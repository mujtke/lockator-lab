/* Generated by Frama-C */

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct e1000_hw;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_regs.h"
enum e1000_mac_type {
    e1000_undefined = 0,
    e1000_82575 = 1,
    e1000_82576 = 2,
    e1000_82580 = 3,
    e1000_i350 = 4,
    e1000_i354 = 5,
    e1000_i210 = 6,
    e1000_i211 = 7,
    e1000_num_macs = 8
};

#line 382 
enum e1000_media_type {
    e1000_media_type_unknown = 0,
    e1000_media_type_copper = 1,
    e1000_media_type_fiber = 2,
    e1000_media_type_internal_serdes = 3,
    e1000_num_media_types = 4
};

#line 390 
enum e1000_nvm_type {
    e1000_nvm_unknown = 0,
    e1000_nvm_none = 1,
    e1000_nvm_eeprom_spi = 2,
    e1000_nvm_flash_hw = 3,
    e1000_nvm_invm = 4,
    e1000_nvm_flash_sw = 5
};

#line 399 
enum e1000_nvm_override {
    e1000_nvm_override_none = 0,
    e1000_nvm_override_spi_small = 1,
    e1000_nvm_override_spi_large = 2
};

#line 405 
enum e1000_phy_type {
    e1000_phy_unknown = 0,
    e1000_phy_none = 1,
    e1000_phy_m88 = 2,
    e1000_phy_igp = 3,
    e1000_phy_igp_2 = 4,
    e1000_phy_gg82563 = 5,
    e1000_phy_igp_3 = 6,
    e1000_phy_ife = 7,
    e1000_phy_82580 = 8,
    e1000_phy_i210 = 9
};

#line 418 
enum e1000_bus_type {
    e1000_bus_type_unknown = 0,
    e1000_bus_type_pci = 1,
    e1000_bus_type_pcix = 2,
    e1000_bus_type_pci_express = 3,
    e1000_bus_type_reserved = 4
};

#line 426 
enum e1000_bus_speed {
    e1000_bus_speed_unknown = 0,
    e1000_bus_speed_33 = 1,
    e1000_bus_speed_66 = 2,
    e1000_bus_speed_100 = 3,
    e1000_bus_speed_120 = 4,
    e1000_bus_speed_133 = 5,
    e1000_bus_speed_2500 = 6,
    e1000_bus_speed_5000 = 7,
    e1000_bus_speed_reserved = 8
};

#line 438 
enum e1000_bus_width {
    e1000_bus_width_unknown = 0,
    e1000_bus_width_pcie_x1 = 1,
    e1000_bus_width_pcie_x2 = 2,
    e1000_bus_width_pcie_x4 = 4,
    e1000_bus_width_pcie_x8 = 8,
    e1000_bus_width_32 = 9,
    e1000_bus_width_64 = 10,
    e1000_bus_width_reserved = 11
};

#line 449 
enum e1000_1000t_rx_status {
    e1000_1000t_rx_status_not_ok = 0,
    e1000_1000t_rx_status_ok = 1,
    e1000_1000t_rx_status_undefined = 255
};

#line 455 
enum e1000_rev_polarity {
    e1000_rev_polarity_normal = 0,
    e1000_rev_polarity_reversed = 1,
    e1000_rev_polarity_undefined = 255
};

#line 461 
enum e1000_fc_mode {
    e1000_fc_none = 0,
    e1000_fc_rx_pause = 1,
    e1000_fc_tx_pause = 2,
    e1000_fc_full = 3,
    e1000_fc_default = 255
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_host_mng_dhcp_cookie {
   u32 signature ;
   u8 status ;
   u8 reserved0 ;
   u16 vlan_id ;
   u32 reserved1 ;
   u16 reserved2 ;
   u8 reserved3 ;
   u8 checksum ;
};

#line 307 
enum e1000_ms_type {
    e1000_ms_hw_default = 0,
    e1000_ms_force_master = 1,
    e1000_ms_force_slave = 2,
    e1000_ms_auto = 3
};

#line 314 
enum e1000_smart_speed {
    e1000_smart_speed_default = 0,
    e1000_smart_speed_on = 1,
    e1000_smart_speed_off = 2
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.h"
struct e1000_sfp_flags {
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) e1000_base_sx : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) e1000_base_lx : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) e1000_base_cx : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) e1000_base_t : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) e100_base_lx : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) e100_base_fx : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) e10_base_bx10 : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) e10_base_px : 1 ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.h"
struct e1000_mac_operations {
   s32 (*check_for_link)(struct e1000_hw *) ;
   s32 (*reset_hw)(struct e1000_hw *) ;
   s32 (*init_hw)(struct e1000_hw *) ;
   bool (*check_mng_mode)(struct e1000_hw *) ;
   s32 (*setup_physical_interface)(struct e1000_hw *) ;
   void (*rar_set)(struct e1000_hw *, u8 *, u32 ) ;
   s32 (*read_mac_addr)(struct e1000_hw *) ;
   s32 (*get_speed_and_duplex)(struct e1000_hw *, u16 *, u16 *) ;
   s32 (*acquire_swfw_sync)(struct e1000_hw *, u16 ) ;
   void (*release_swfw_sync)(struct e1000_hw *, u16 ) ;
   s32 (*get_thermal_sensor_data)(struct e1000_hw *) ;
   s32 (*init_thermal_sensor_thresh)(struct e1000_hw *) ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_phy_operations {
   s32 (*acquire)(struct e1000_hw *) ;
   s32 (*check_polarity)(struct e1000_hw *) ;
   s32 (*check_reset_block)(struct e1000_hw *) ;
   s32 (*force_speed_duplex)(struct e1000_hw *) ;
   s32 (*get_cfg_done)(struct e1000_hw *) ;
   s32 (*get_cable_length)(struct e1000_hw *) ;
   s32 (*get_phy_info)(struct e1000_hw *) ;
   s32 (*read_reg)(struct e1000_hw *, u32 , u16 *) ;
   void (*release)(struct e1000_hw *) ;
   s32 (*reset)(struct e1000_hw *) ;
   s32 (*set_d0_lplu_state)(struct e1000_hw *, bool ) ;
   s32 (*set_d3_lplu_state)(struct e1000_hw *, bool ) ;
   s32 (*write_reg)(struct e1000_hw *, u32 , u16 ) ;
   s32 (*read_i2c_byte)(struct e1000_hw *, u8 , u8 , u8 *) ;
   s32 (*write_i2c_byte)(struct e1000_hw *, u8 , u8 , u8 ) ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_nvm_operations {
   s32 (*acquire)(struct e1000_hw *) ;
   s32 (*read)(struct e1000_hw *, u16 , u16 , u16 *) ;
   void (*release)(struct e1000_hw *) ;
   s32 (*write)(struct e1000_hw *, u16 , u16 , u16 *) ;
   s32 (*update)(struct e1000_hw *) ;
   s32 (*validate)(struct e1000_hw *) ;
   s32 (*valid_led_default)(struct e1000_hw *, u16 *) ;
};

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_thermal_diode_data {
   u8 location ;
   u8 temp ;
   u8 caution_thresh ;
   u8 max_op_thresh ;
};

#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_thermal_sensor_data {
   struct e1000_thermal_diode_data sensor[3U] ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_mac_info {
   struct e1000_mac_operations ops ;
   u8 addr[6U] ;
   u8 perm_addr[6U] ;
   enum e1000_mac_type type ;
   u32 ledctl_default ;
   u32 ledctl_mode1 ;
   u32 ledctl_mode2 ;
   u32 mc_filter_type ;
   u32 txcw ;
   u16 mta_reg_count ;
   u16 uta_reg_count ;
   u32 mta_shadow[128U] ;
   u16 rar_entry_count ;
   u8 forced_speed_duplex ;
   bool adaptive_ifs ;
   bool arc_subsystem_valid ;
   bool asf_firmware_present ;
   bool autoneg ;
   bool autoneg_failed ;
   bool disable_hw_init_bits ;
   bool get_link_status ;
   bool ifs_params_forced ;
   bool in_ifs_mode ;
   bool report_tx_early ;
   bool serdes_has_link ;
   bool tx_pkt_filtering ;
   struct e1000_thermal_sensor_data thermal_sensor_data ;
};

#line 419  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_phy_info {
   struct e1000_phy_operations ops ;
   enum e1000_phy_type type ;
   enum e1000_1000t_rx_status local_rx ;
   enum e1000_1000t_rx_status remote_rx ;
   enum e1000_ms_type ms_type ;
   enum e1000_ms_type original_ms_type ;
   enum e1000_rev_polarity cable_polarity ;
   enum e1000_smart_speed smart_speed ;
   u32 addr ;
   u32 id ;
   u32 reset_delay_us ;
   u32 revision ;
   enum e1000_media_type media_type ;
   u16 autoneg_advertised ;
   u16 autoneg_mask ;
   u16 cable_length ;
   u16 max_cable_length ;
   u16 min_cable_length ;
   u8 mdix ;
   bool disable_polarity_correction ;
   bool is_mdix ;
   bool polarity_correction ;
   bool reset_disable ;
   bool speed_downgraded ;
   bool autoneg_wait_to_complete ;
};

#line 454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_nvm_info {
   struct e1000_nvm_operations ops ;
   enum e1000_nvm_type type ;
   enum e1000_nvm_override override ;
   u32 flash_bank_size ;
   u32 flash_base_addr ;
   u16 word_size ;
   u16 delay_usec ;
   u16 address_bits ;
   u16 opcode_bits ;
   u16 page_size ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_bus_info {
   enum e1000_bus_type type ;
   enum e1000_bus_speed speed ;
   enum e1000_bus_width width ;
   u32 snoop ;
   u16 func ;
   u16 pci_cmd_word ;
};

#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_fc_info {
   u32 high_water ;
   u32 low_water ;
   u16 pause_time ;
   bool send_xon ;
   bool strict_ieee ;
   enum e1000_fc_mode current_mode ;
   enum e1000_fc_mode requested_mode ;
};

#line 490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_mbx_operations {
   s32 (*init_params)(struct e1000_hw *) ;
   s32 (*read)(struct e1000_hw *, u32 *, u16 , u16 ) ;
   s32 (*write)(struct e1000_hw *, u32 *, u16 , u16 ) ;
   s32 (*read_posted)(struct e1000_hw *, u32 *, u16 , u16 ) ;
   s32 (*write_posted)(struct e1000_hw *, u32 *, u16 , u16 ) ;
   s32 (*check_for_msg)(struct e1000_hw *, u16 ) ;
   s32 (*check_for_ack)(struct e1000_hw *, u16 ) ;
   s32 (*check_for_rst)(struct e1000_hw *, u16 ) ;
};

#line 501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_mbx_stats {
   u32 msgs_tx ;
   u32 msgs_rx ;
   u32 acks ;
   u32 reqs ;
   u32 rsts ;
};

#line 510  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_mbx_info {
   struct e1000_mbx_operations ops ;
   struct e1000_mbx_stats stats ;
   u32 timeout ;
   u32 usec_delay ;
   u16 size ;
};

#line 518  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_dev_spec_82575 {
   bool sgmii_active ;
   bool global_device_reset ;
   bool eee_disable ;
   bool clear_semaphore_once ;
   struct e1000_sfp_flags eth_flags ;
   bool module_plugged ;
   u8 media_port ;
   bool media_changed ;
   bool mas_capable ;
};

#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
union __anonunion_dev_spec_311 {
   struct e1000_dev_spec_82575 _82575 ;
};

#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_hw {
   void *back ;
   u8 *hw_addr ;
   u8 *flash_address ;
   unsigned long io_base ;
   struct e1000_mac_info mac ;
   struct e1000_fc_info fc ;
   struct e1000_phy_info phy ;
   struct e1000_nvm_info nvm ;
   struct e1000_bus_info bus ;
   struct e1000_mbx_info mbx ;
   struct e1000_host_mng_dhcp_cookie mng_cookie ;
   union __anonunion_dev_spec_311 dev_spec ;
   u16 device_id ;
   u16 subsystem_vendor_id ;
   u16 subsystem_device_id ;
   u16 vendor_id ;
   u8 revision_id ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __le64;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_317 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_317 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_318 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_318 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 cycle_t;

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_hwmon.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_320 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_321 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_319 {
   struct __anonstruct_320 __anonCompField___anonunion_319_4 ;
   struct __anonstruct_321 __anonCompField___anonunion_319_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_319 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_322 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_322 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_323 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_323 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_327 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_328 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_329 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_326 {
   struct __anonstruct_futex_327 futex ;
   struct __anonstruct_nanosleep_328 nanosleep ;
   struct __anonstruct_poll_329 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_326 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_330 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_330 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_340 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_341 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_339 {
   struct __anonstruct_340 __anonCompField___anonunion_339_12 ;
   struct __anonstruct_341 __anonCompField___anonunion_339_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_342 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_339 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_342 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_346 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_345 {
   struct raw_spinlock rlock ;
   struct __anonstruct_346 __anonCompField___anonunion_345_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_345 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_347 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_347 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/iomap.h"
struct pci_dev;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/io.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_378 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_378 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugobjects.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 1170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_380 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_379 {
   struct __anonstruct_380 __anonCompField___anonunion_379_29 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_379 __anonCompField_ctl_table_header_30 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/prefetch.h"
struct vm_area_struct;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmdebug.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mpspec.h"
struct workqueue_struct;

#line 153 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_445 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_445 nodemask_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_446 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_446 mm_context_t;

#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist.h"
union __anonunion_455 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_455 __anonCompField_idr_layer_31 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_460 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_460 __anonCompField_kernfs_node_32 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171 
struct vm_operations_struct;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 281 
struct inode;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_461 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_461 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_462 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_462 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct bin_attribute;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 796  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct rw_semaphore;

#line 797  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct dma_map_ops;

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203 
struct of_device_id;

#line 203 
struct acpi_device_id;

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 1272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_463 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_463 __anonCompField_iov_iter_33 ;
   unsigned long nr_segs ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_469 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_470 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_468 {
   struct __anonstruct_469 __anonCompField___anonunion_468_36 ;
   struct __anonstruct_470 __anonCompField___anonunion_468_37 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_468 __anonCompField_uprobe_task_38 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_471 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_473 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_477 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_476 {
   atomic_t _mapcount ;
   struct __anonstruct_477 __anonCompField___anonunion_476_41 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_475 {
   union __anonunion_476 __anonCompField___anonstruct_475_42 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_474 {
   unsigned long counters ;
   struct __anonstruct_475 __anonCompField___anonunion_474_43 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_472 {
   union __anonunion_473 __anonCompField___anonstruct_472_40 ;
   union __anonunion_474 __anonCompField___anonstruct_472_44 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_479 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_480 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_478 {
   struct list_head lru ;
   struct __anonstruct_479 __anonCompField___anonunion_478_46 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_480 __anonCompField___anonunion_478_47 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_481 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_471 __anonCompField_page_39 ;
   struct __anonstruct_472 __anonCompField_page_45 ;
   union __anonunion_478 __anonCompField_page_48 ;
   union __anonunion_481 __anonCompField_page_49 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_482 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_482 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct user_struct;

#line 66 
struct writeback_control;

#line 67 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 18 
struct pid;

#line 19 
struct cred;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_485 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_485 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_486 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_486 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_487 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_487 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_488 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_488 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_489 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_489 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_490 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_490 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_491 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_491 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_492 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_492 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_493 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_494 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_493 ifr_ifrn ;
   union __anonunion_ifr_ifru_494 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_499 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_498 {
   struct __anonstruct_499 __anonCompField___anonunion_498_50 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_498 __anonCompField_lockref_51 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_501 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_500 {
   struct __anonstruct_501 __anonCompField___anonunion_500_52 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_500 __anonCompField_qstr_53 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_502 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_502 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_506 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_505 {
   struct __anonstruct_506 __anonCompField___anonunion_505_54 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_505 __anonCompField_radix_tree_node_55 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 428 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 435 
struct pid_namespace;

#line 435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct block_device;

#line 31 
struct io_context;

#line 32 
struct cgroup_subsys_state;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct backing_dev_info;

#line 61 
struct export_operations;

#line 63 
struct pipe_inode_info;

#line 65 
struct kstatfs;

#line 66 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_511 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_511 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_512 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_512 __anonCompField_kqid_57 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_515 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_516 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_517 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_515 __anonCompField_inode_58 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_516 __anonCompField_inode_59 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_517 __anonCompField_inode_60 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_518 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_518 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_520 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_519 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_520 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_519 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1061 
struct files_struct;

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_521 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_521 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_523 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_524 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_525 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_526 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_528 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_527 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_528 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_529 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_530 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_522 {
   int _pad[28U] ;
   struct __anonstruct__kill_523 _kill ;
   struct __anonstruct__timer_524 _timer ;
   struct __anonstruct__rt_525 _rt ;
   struct __anonstruct__sigchld_526 _sigchld ;
   struct __anonstruct__sigfault_527 _sigfault ;
   struct __anonstruct__sigpoll_529 _sigpoll ;
   struct __anonstruct__sigsys_530 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_522 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root waiters ;
   struct rb_node *waiters_leftmost ;
   struct task_struct *owner ;
   int save_state ;
   char const *name ;
   char const *file ;
   int line ;
   void *magic ;
};

#line 40 
struct rt_mutex_waiter;

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_533 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_534 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_536 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_535 {
   struct keyring_index_key index_key ;
   struct __anonstruct_536 __anonCompField___anonunion_535_63 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_537 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_539 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_538 {
   union __anonunion_payload_539 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_533 __anonCompField_key_61 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_534 __anonCompField_key_62 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_535 __anonCompField_key_64 ;
   union __anonunion_type_data_537 type_data ;
   union __anonunion_538 __anonCompField_key_65 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 327 
struct cgroup;

#line 328 
struct cgroup_root;

#line 329 
struct cgroup_subsys;

#line 330 
struct cgroup_taskset;

#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 134 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct reclaim_state;

#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1172 
struct uts_namespace;

#line 1173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_568 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_568 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_25019 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_573 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_574 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_25019 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_573 __anonCompField_nf_bridge_info_72 ;
   union __anonunion_574 __anonCompField_nf_bridge_info_73 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_577 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_576 {
   u64 v64 ;
   struct __anonstruct_577 __anonCompField___anonunion_576_74 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_576 __anonCompField_skb_mstamp_75 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_580 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_579 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_580 __anonCompField___anonstruct_579_76 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_578 {
   struct __anonstruct_579 __anonCompField___anonunion_578_77 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_582 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_581 {
   __wsum csum ;
   struct __anonstruct_582 __anonCompField___anonunion_581_79 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_583 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_584 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_585 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_578 __anonCompField_sk_buff_78 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_581 __anonCompField_sk_buff_80 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_583 __anonCompField_sk_buff_81 ;
   __u32 secmark ;
   union __anonunion_584 __anonCompField_sk_buff_82 ;
   union __anonunion_585 __anonCompField_sk_buff_83 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118 
struct proc_dir_entry;

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_27928 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_27928 phy_interface_t;

#line 126 
enum ldv_27981 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_27981 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 1628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_29693 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_29694 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_615 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_616 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_617 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_615 adj_list ;
   struct __anonstruct_all_adj_list_616 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_29693 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_29694 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_617 __anonCompField_net_device_93 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_regs.h"
struct e1000_hw_stats {
   u64 crcerrs ;
   u64 algnerrc ;
   u64 symerrs ;
   u64 rxerrc ;
   u64 mpc ;
   u64 scc ;
   u64 ecol ;
   u64 mcc ;
   u64 latecol ;
   u64 colc ;
   u64 dc ;
   u64 tncrs ;
   u64 sec ;
   u64 cexterr ;
   u64 rlec ;
   u64 xonrxc ;
   u64 xontxc ;
   u64 xoffrxc ;
   u64 xofftxc ;
   u64 fcruc ;
   u64 prc64 ;
   u64 prc127 ;
   u64 prc255 ;
   u64 prc511 ;
   u64 prc1023 ;
   u64 prc1522 ;
   u64 gprc ;
   u64 bprc ;
   u64 mprc ;
   u64 gptc ;
   u64 gorc ;
   u64 gotc ;
   u64 rnbc ;
   u64 ruc ;
   u64 rfc ;
   u64 roc ;
   u64 rjc ;
   u64 mgprc ;
   u64 mgpdc ;
   u64 mgptc ;
   u64 tor ;
   u64 tot ;
   u64 tpr ;
   u64 tpt ;
   u64 ptc64 ;
   u64 ptc127 ;
   u64 ptc255 ;
   u64 ptc511 ;
   u64 ptc1023 ;
   u64 ptc1522 ;
   u64 mptc ;
   u64 bptc ;
   u64 tsctc ;
   u64 tsctfc ;
   u64 iac ;
   u64 icrxptc ;
   u64 icrxatc ;
   u64 ictxptc ;
   u64 ictxatc ;
   u64 ictxqec ;
   u64 ictxqmtc ;
   u64 icrxdmtc ;
   u64 icrxoc ;
   u64 cbtmpc ;
   u64 htdpmc ;
   u64 cbrdpc ;
   u64 cbrmpc ;
   u64 rpthc ;
   u64 hgptc ;
   u64 htcbdpc ;
   u64 hgorc ;
   u64 hgotc ;
   u64 lenerrs ;
   u64 scvpc ;
   u64 hrmpc ;
   u64 doosync ;
   u64 o2bgptc ;
   u64 o2bspc ;
   u64 b2ospc ;
   u64 b2ogprc ;
};

#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_info {
   s32 (*get_invariants)(struct e1000_hw *) ;
   struct e1000_mac_operations *mac_ops ;
   struct e1000_phy_operations *phy_ops ;
   struct e1000_nvm_operations *nvm_ops ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_read_630 {
   __le64 buffer_addr ;
   __le32 cmd_type_len ;
   __le32 olinfo_status ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_wb_631 {
   __le64 rsvd ;
   __le32 nxtseq_seed ;
   __le32 status ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
union e1000_adv_tx_desc {
   struct __anonstruct_read_630 read ;
   struct __anonstruct_wb_631 wb ;
};

#line 269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct cyclecounter {
   cycle_t (*read)(struct cyclecounter const *) ;
   cycle_t mask ;
   u32 mult ;
   u32 shift ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
struct timecounter {
   struct cyclecounter const *cc ;
   cycle_t cycle_last ;
   u64 nsec ;
   u64 mask ;
   u64 frac ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/pps.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations const *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pps_kernel.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};

#line 83 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};

#line 134 
enum ldv_31794 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
union __anonunion_632 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_clock_request {
   enum ldv_31794 type ;
   union __anonunion_632 __anonCompField_ptp_clock_request_94 ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec const *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
};

#line 113 
struct ptp_clock;

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
struct i2c_algorithm;

#line 40 
struct i2c_adapter;

#line 41 
struct i2c_client;

#line 43 
struct i2c_board_info;

#line 44 
enum i2c_slave_event;

#line 44 
enum i2c_slave_event;

#line 196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};

#line 251 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};

#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
struct i2c_board_info {
   char type[20U] ;
   unsigned short flags ;
   unsigned short addr ;
   void *platform_data ;
   struct dev_archdata *archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int irq ;
};

#line 359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};

#line 411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   int scl_gpio ;
   int sda_gpio ;
};

#line 451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};

#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm const *algo ;
   void *algo_data ;
   struct rt_mutex bus_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks const *quirks ;
};

#line 640  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
struct i2c_algo_bit_data {
   void *data ;
   void (*setsda)(void *, int ) ;
   void (*setscl)(void *, int ) ;
   int (*getsda)(void *) ;
   int (*getscl)(void *) ;
   int (*pre_xfer)(struct i2c_adapter *) ;
   void (*post_xfer)(struct i2c_adapter *) ;
   int udelay ;
   int timeout ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_642 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_642 __anonCompField_pci_dev_96 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
struct igb_adapter;

#line 176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
struct vf_data_storage {
   unsigned char vf_mac_addresses[6U] ;
   u16 vf_mc_hashes[30U] ;
   u16 num_vf_mc_hashes ;
   u16 vlans_enabled ;
   u32 flags ;
   unsigned long last_nack ;
   u16 pf_vlan ;
   u16 pf_qos ;
   u16 tx_rate ;
   bool spoofchk_enabled ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct igb_tx_buffer {
   union e1000_adv_tx_desc *next_to_watch ;
   unsigned long time_stamp ;
   struct sk_buff *skb ;
   unsigned int bytecount ;
   u16 gso_segs ;
   __be16 protocol ;
   dma_addr_t dma ;
   __u32 len ;
   u32 tx_flags ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct igb_rx_buffer {
   dma_addr_t dma ;
   struct page *page ;
   unsigned int page_offset ;
};

#line 208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct igb_tx_queue_stats {
   u64 packets ;
   u64 bytes ;
   u64 restart_queue ;
   u64 restart_queue2 ;
};

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct igb_rx_queue_stats {
   u64 packets ;
   u64 bytes ;
   u64 drops ;
   u64 csum_err ;
   u64 alloc_failed ;
};

#line 223 
struct igb_ring;

#line 223  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct igb_ring_container {
   struct igb_ring *ring ;
   unsigned int total_bytes ;
   unsigned int total_packets ;
   u16 work_limit ;
   u8 count ;
   u8 itr ;
};

#line 232 
struct igb_q_vector;

#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
union __anonunion_643 {
   struct igb_tx_buffer *tx_buffer_info ;
   struct igb_rx_buffer *rx_buffer_info ;
};

#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct __anonstruct_645 {
   struct igb_tx_queue_stats tx_stats ;
   struct u64_stats_sync tx_syncp ;
   struct u64_stats_sync tx_syncp2 ;
};

#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct __anonstruct_646 {
   struct sk_buff *skb ;
   struct igb_rx_queue_stats rx_stats ;
   struct u64_stats_sync rx_syncp ;
};

#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
union __anonunion_644 {
   struct __anonstruct_645 __anonCompField___anonunion_644_98 ;
   struct __anonstruct_646 __anonCompField___anonunion_644_99 ;
};

#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct igb_ring {
   struct igb_q_vector *q_vector ;
   struct net_device *netdev ;
   struct device *dev ;
   union __anonunion_643 __anonCompField_igb_ring_97 ;
   void *desc ;
   unsigned long flags ;
   void *tail ;
   dma_addr_t dma ;
   unsigned int size ;
   u16 count ;
   u8 queue_index ;
   u8 reg_idx ;
   u16 next_to_clean ;
   u16 next_to_use ;
   u16 next_to_alloc ;
   union __anonunion_644 __anonCompField_igb_ring_100 ;
};

#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct igb_q_vector {
   struct igb_adapter *adapter ;
   int cpu ;
   u32 eims_value ;
   u16 itr_val ;
   u8 set_itr ;
   void *itr_register ;
   struct igb_ring_container rx ;
   struct igb_ring_container tx ;
   struct napi_struct napi ;
   struct callback_head rcu ;
   char name[25U] ;
   struct igb_ring ring[0U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct hwmon_attr {
   struct device_attribute dev_attr ;
   struct e1000_hw *hw ;
   struct e1000_thermal_diode_data *sensor ;
   char name[12U] ;
};

#line 336  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct hwmon_buff {
   struct attribute_group group ;
   struct attribute_group const *groups[2U] ;
   struct attribute *attrs[13U] ;
   struct hwmon_attr hwmon_list[12U] ;
   unsigned int n_hwmon ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct __anonstruct_perout_647 {
   struct timespec start ;
   struct timespec period ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct igb_adapter {
   unsigned long active_vlans[64U] ;
   struct net_device *netdev ;
   unsigned long state ;
   unsigned int flags ;
   unsigned int num_q_vectors ;
   struct msix_entry msix_entries[10U] ;
   u32 rx_itr_setting ;
   u32 tx_itr_setting ;
   u16 tx_itr ;
   u16 rx_itr ;
   u16 tx_work_limit ;
   u32 tx_timeout_count ;
   int num_tx_queues ;
   struct igb_ring *tx_ring[16U] ;
   int num_rx_queues ;
   struct igb_ring *rx_ring[16U] ;
   u32 max_frame_size ;
   u32 min_frame_size ;
   struct timer_list watchdog_timer ;
   struct timer_list phy_info_timer ;
   u16 mng_vlan_id ;
   u32 bd_number ;
   u32 wol ;
   u32 en_mng_pt ;
   u16 link_speed ;
   u16 link_duplex ;
   struct work_struct reset_task ;
   struct work_struct watchdog_task ;
   bool fc_autoneg ;
   u8 tx_timeout_factor ;
   struct timer_list blink_timer ;
   unsigned long led_status ;
   struct pci_dev *pdev ;
   spinlock_t stats64_lock ;
   struct rtnl_link_stats64 stats64 ;
   struct e1000_hw hw ;
   struct e1000_hw_stats stats ;
   struct e1000_phy_info phy_info ;
   u32 test_icr ;
   struct igb_ring test_tx_ring ;
   struct igb_ring test_rx_ring ;
   int msg_enable ;
   struct igb_q_vector *q_vector[8U] ;
   u32 eims_enable_mask ;
   u32 eims_other ;
   u16 tx_ring_count ;
   u16 rx_ring_count ;
   unsigned int vfs_allocated_count ;
   struct vf_data_storage *vf_data ;
   int vf_rate_link_speed ;
   u32 rss_queues ;
   u32 wvbr ;
   u32 *shadow_vfta ;
   struct ptp_clock *ptp_clock ;
   struct ptp_clock_info ptp_caps ;
   struct delayed_work ptp_overflow_work ;
   struct work_struct ptp_tx_work ;
   struct sk_buff *ptp_tx_skb ;
   struct hwtstamp_config tstamp_config ;
   unsigned long ptp_tx_start ;
   unsigned long last_rx_ptp_check ;
   unsigned long last_rx_timestamp ;
   spinlock_t tmreg_lock ;
   struct cyclecounter cc ;
   struct timecounter tc ;
   u32 tx_hwtstamp_timeouts ;
   u32 rx_hwtstamp_cleared ;
   struct ptp_pin_desc sdp_config[4U] ;
   struct __anonstruct_perout_647 perout[2U] ;
   char fw_version[32U] ;
   struct hwmon_buff *igb_hwmon_buff ;
   bool ets ;
   struct i2c_algo_bit_data i2c_algo ;
   struct i2c_adapter i2c_adap ;
   struct i2c_client *i2c_client ;
   u32 rss_indir_tbl_init ;
   u8 rss_indir_tbl[128U] ;
   unsigned long link_check_timeout ;
   int copper_tries ;
   struct e1000_info ei ;
   u16 eee_advert ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct kernel_param;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_652 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_652 __anonCompField_kernel_param_101 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.h"
struct e1000_fw_version {
   u32 etrack_id ;
   u16 eep_major ;
   u16 eep_minor ;
   u16 eep_build ;
   u8 invm_major ;
   u8 invm_minor ;
   u8 invm_img_type ;
   bool or_valid ;
   u16 or_major ;
   u16 or_build ;
   u16 or_patch ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_read_1593 {
   __le64 pkt_addr ;
   __le64 hdr_addr ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_lo_dword_1596 {
   __le16 pkt_info ;
   __le16 hdr_info ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_csum_ip_1598 {
   __le16 ip_id ;
   __le16 csum ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
union __anonunion_hi_dword_1597 {
   __le32 rss ;
   struct __anonstruct_csum_ip_1598 csum_ip ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_lower_1595 {
   struct __anonstruct_lo_dword_1596 lo_dword ;
   union __anonunion_hi_dword_1597 hi_dword ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_upper_1599 {
   __le32 status_error ;
   __le16 length ;
   __le16 vlan ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct __anonstruct_wb_1594 {
   struct __anonstruct_lower_1595 lower ;
   struct __anonstruct_upper_1599 upper ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
union e1000_adv_rx_desc {
   struct __anonstruct_read_1593 read ;
   struct __anonstruct_wb_1594 wb ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
struct igb_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};

#line 977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
struct igb_reg_test {
   u16 reg ;
   u16 reg_offset ;
   u16 array_len ;
   u16 test_type ;
   u32 mask ;
   u32 write ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_RUNNING = 1,
    SYSTEM_HALT = 2,
    SYSTEM_POWER_OFF = 3,
    SYSTEM_RESTART = 4
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
typedef int pao_T__;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};

#line 96 
struct pglist_data;

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};

#line 215 
struct zone;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   struct zone *zone ;
};

#line 247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   s8 stat_threshold ;
   s8 vm_stat_diff[39U] ;
};

#line 270 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    __MAX_NR_ZONES = 4
};

#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone {
   unsigned long watermark[3U] ;
   long lowmem_reserve[4U] ;
   int node ;
   unsigned int inactive_ratio ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long dirty_balance_reserve ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   unsigned long zone_start_pfn ;
   unsigned long managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char const *name ;
   int nr_migrate_reserve_block ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   wait_queue_head_t *wait_table ;
   unsigned long wait_table_hash_nr_entries ;
   unsigned long wait_table_bits ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   spinlock_t lru_lock ;
   struct lruvec lruvec ;
   atomic_long_t inactive_age ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[39U] ;
};

#line 567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zonelist_cache {
   unsigned short z_to_n[4096U] ;
   unsigned long fullzones[64U] ;
   unsigned long last_full_zap ;
};

#line 654  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};

#line 667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zonelist {
   struct zonelist_cache *zlcache_ptr ;
   struct zoneref _zonerefs[4097U] ;
   struct zonelist_cache zlcache ;
};

#line 705  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[4U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_max_order ;
   enum zone_type classzone_idx ;
   spinlock_t numabalancing_migrate_lock ;
   unsigned long numabalancing_migrate_next_window ;
   unsigned long numabalancing_migrate_nr_pages ;
   unsigned long first_deferred_pfn ;
};

#line 773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
typedef struct pglist_data pg_data_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11780 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
enum ldv_25932 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_25932 socket_state;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_2211 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_2211 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 767 
struct rtable;

#line 890 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};

#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 331 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/icmpv6.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/memcontrol.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_2257 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_2257 __anonCompField_bpf_prog_99 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_2268 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_2268 __anonCompField_dst_entry_100 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_2269 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_2269 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_2271 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_2270 {
   __addrpair skc_addrpair ;
   struct __anonstruct_2271 __anonCompField___anonunion_2270_101 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_2272 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_2274 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_2273 {
   __portpair skc_portpair ;
   struct __anonstruct_2274 __anonCompField___anonunion_2273_104 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_2275 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_2276 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_2270 __anonCompField_sock_common_102 ;
   union __anonunion_2272 __anonCompField_sock_common_103 ;
   union __anonunion_2273 __anonCompField_sock_common_105 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_2275 __anonCompField_sock_common_106 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_2276 __anonCompField_sock_common_107 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_2277 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_2277 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_2280 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_2280 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_timewait_sock.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) res1 : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) doff : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fin : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syn : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rst : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) psh : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ack : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) urg : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ece : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};

#line 302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   __u8 addr_gen_mode ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
union __anonunion_2299 {
   __be32 a4 ;
   __be32 a6[4U] ;
   struct in6_addr in6 ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_2299 __anonCompField_inetpeer_addr_base_109 ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_2300 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct __anonstruct_2302 {
   atomic_t rid ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_2301 {
   struct __anonstruct_2302 __anonCompField___anonunion_2301_111 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[16U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_2300 __anonCompField_inet_peer_110 ;
   union __anonunion_2301 __anonCompField_inet_peer_112 ;
   __u32 dtime ;
   atomic_t refcnt ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   int total ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct uncached_list;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
struct e1000_adv_tx_context_desc {
   __le32 vlan_macip_lens ;
   __le32 seqnum_seed ;
   __le32 type_tucmd_mlhl ;
   __le32 mss_l4len_idx ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pps_kernel.h"
struct pps_event_time {
   struct timespec ts_real ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
union __anonunion_2325 {
   u64 timestamp ;
   struct pps_event_time pps_times ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
struct ptp_clock_event {
   int type ;
   int index ;
   union __anonunion_2325 __anonCompField_ptp_clock_event_116 ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
struct igb_reg_info {
   u32 ofs ;
   char *name ;
};

#line 369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
struct my_u0 {
   u64 a ;
   u64 b ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11802 {
    WORK_STRUCT_PENDING_BIT_0 = 0,
    WORK_STRUCT_DELAYED_BIT_0 = 1,
    WORK_STRUCT_PWQ_BIT_0 = 2,
    WORK_STRUCT_LINKED_BIT_0 = 3,
    WORK_STRUCT_STATIC_BIT_0 = 4,
    WORK_STRUCT_COLOR_SHIFT_0 = 5,
    WORK_STRUCT_COLOR_BITS_0 = 4,
    WORK_STRUCT_PENDING_0 = 1,
    WORK_STRUCT_DELAYED_0 = 2,
    WORK_STRUCT_PWQ_0 = 4,
    WORK_STRUCT_LINKED_0 = 8,
    WORK_STRUCT_STATIC_0 = 16,
    WORK_NR_COLORS_0 = 15,
    WORK_NO_COLOR_0 = 15,
    WORK_CPU_UNBOUND_0 = 8192,
    WORK_STRUCT_FLAG_BITS_0 = 9,
    WORK_OFFQ_FLAG_BASE_0 = 5,
    __WORK_OFFQ_CANCELING_0 = 5,
    WORK_OFFQ_CANCELING_0 = 32,
    WORK_OFFQ_FLAG_BITS_0 = 1,
    WORK_OFFQ_POOL_SHIFT_0 = 6,
    WORK_OFFQ_LEFT_0 = 58,
    WORK_OFFQ_POOL_BITS_0 = 31,
    WORK_OFFQ_POOL_NONE_0 = 2147483647,
    WORK_STRUCT_FLAG_MASK_0 = 511,
    WORK_STRUCT_WQ_DATA_MASK_0 = -512,
    WORK_STRUCT_NO_POOL_0 = 137438953408,
    WORK_BUSY_PENDING_0 = 1,
    WORK_BUSY_RUNNING_0 = 2,
    WORKER_DESC_LEN_0 = 24
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};

#line 19  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_14 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_17 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_22 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_21 {
   struct timer_list *arg0 ;
   int signal_pending ;
};

#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/fvtp/.tmp_e1000_mbx.c"
void ldv_inline_asm(void);


#line 5  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __bad_udelay(void);


#line 8 
void __udelay(unsigned long);


#line 10 
void __const_udelay(unsigned long);


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void volatile *addr)
{
  
#line 68 
  ldv_inline_asm();
  
#line 69 
  return;
}


#line 369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_regs.h"
u32 igb_rd32(struct e1000_hw *hw, u32 reg);


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.h"
s32 igb_read_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id);


#line 67 
s32 igb_write_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id);


#line 68 
s32 igb_check_for_msg(struct e1000_hw *hw, u16 mbx_id);


#line 69 
s32 igb_check_for_ack(struct e1000_hw *hw, u16 mbx_id);


#line 70 
s32 igb_check_for_rst(struct e1000_hw *hw, u16 mbx_id);


#line 71 
s32 igb_init_mbx_params_pf(struct e1000_hw *hw);


#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_read_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  
#line 37 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 38 
  s32 ret_val = -15;
  
#line 41 
  if ((int)mbx->size < (int)size) 
#line 42 
                                  size = mbx->size; else ;
  
#line 44 
  if (mbx->ops.read != (s32 (*)(struct e1000_hw *, u32 *, u16 , u16 ))0) 
    
#line 45 
    ret_val = (*(mbx->ops.read))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id)); else ;
  
#line 47 
  return ret_val;
}


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_write_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  
#line 61 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 62 
  s32 ret_val = 0;
  
#line 64 
  if ((int)mbx->size < (int)size) 
#line 65 
                                  ret_val = -15;
  else 
    
#line 67 
    if (mbx->ops.write != (s32 (*)(struct e1000_hw *, u32 *, u16 , u16 ))0) 
      
#line 68 
      ret_val = (*(mbx->ops.write))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id)); else ;
  
#line 70 
  return ret_val;
}


#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_check_for_msg(struct e1000_hw *hw, u16 mbx_id)
{
  
#line 82 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 83 
  s32 ret_val = -15;
  
#line 85 
  if (mbx->ops.check_for_msg != (s32 (*)(struct e1000_hw *, u16 ))0) 
    
#line 86 
    ret_val = (*(mbx->ops.check_for_msg))(hw,(unsigned short)((int)mbx_id)); else ;
  
#line 88 
  return ret_val;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_check_for_ack(struct e1000_hw *hw, u16 mbx_id)
{
  
#line 100 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 101 
  s32 ret_val = -15;
  
#line 103 
  if (mbx->ops.check_for_ack != (s32 (*)(struct e1000_hw *, u16 ))0) 
    
#line 104 
    ret_val = (*(mbx->ops.check_for_ack))(hw,(unsigned short)((int)mbx_id)); else ;
  
#line 106 
  return ret_val;
}


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_check_for_rst(struct e1000_hw *hw, u16 mbx_id)
{
  
#line 118 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 119 
  s32 ret_val = -15;
  
#line 121 
  if (mbx->ops.check_for_rst != (s32 (*)(struct e1000_hw *, u16 ))0) 
    
#line 122 
    ret_val = (*(mbx->ops.check_for_rst))(hw,(unsigned short)((int)mbx_id)); else ;
  
#line 124 
  return ret_val;
}


#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_poll_for_msg(struct e1000_hw *hw, u16 mbx_id)
{
  int tmp_0;
  
#line 136 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 137 
  int countdown = (int)mbx->timeout;
  
#line 139 
  if (countdown == 0 || mbx->ops.check_for_msg == (s32 (*)(struct e1000_hw *, u16 ))0) 
    
#line 140 
    goto out; else ;
  
#line 142 
  goto ldv_44055;
  ldv_44054: 
#line 143 
  ;
  
#line 143 
  countdown -= 1;
  
#line 144 
  if (countdown == 0) 
#line 145 
                      goto ldv_44053; else ;
  
#line 146 
  if (0 != 0) 
    
#line 146 
    if (mbx->usec_delay > 19999U) 
#line 146 
                                  __bad_udelay(); else 
#line 146 
                                                       __const_udelay((unsigned long)mbx->usec_delay * 4295UL);
  else 
#line 146 
       __udelay((unsigned long)mbx->usec_delay);
  ldv_44055: 
#line 148 
  ;
  
#line 142 
  if (countdown != 0) {
    s32 tmp;
    
#line 142 
    tmp = (*(mbx->ops.check_for_msg))(hw,(unsigned short)((int)mbx_id));
    
#line 142 
    if (tmp != 0) 
#line 144 
                  goto ldv_44054; else 
#line 147 
                                       goto ldv_44053;
  }
  else 
#line 147 
       goto ldv_44053;
  ldv_44053: 
#line 148 
  ;
  
#line 150 
  if (countdown == 0) 
#line 151 
                      mbx->timeout = 0U; else ;
  out: 
#line 152 
  ;
  
#line 153 
  if (countdown != 0) 
#line 153 
                      tmp_0 = 0; else 
#line 153 
                                      tmp_0 = -15;
  
#line 153 
  return tmp_0;
}


#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_poll_for_ack(struct e1000_hw *hw, u16 mbx_id)
{
  int tmp_0;
  
#line 165 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 166 
  int countdown = (int)mbx->timeout;
  
#line 168 
  if (countdown == 0 || mbx->ops.check_for_ack == (s32 (*)(struct e1000_hw *, u16 ))0) 
    
#line 169 
    goto out; else ;
  
#line 171 
  goto ldv_44065;
  ldv_44064: 
#line 172 
  ;
  
#line 172 
  countdown -= 1;
  
#line 173 
  if (countdown == 0) 
#line 174 
                      goto ldv_44063; else ;
  
#line 175 
  if (0 != 0) 
    
#line 175 
    if (mbx->usec_delay > 19999U) 
#line 175 
                                  __bad_udelay(); else 
#line 175 
                                                       __const_udelay((unsigned long)mbx->usec_delay * 4295UL);
  else 
#line 175 
       __udelay((unsigned long)mbx->usec_delay);
  ldv_44065: 
#line 177 
  ;
  
#line 171 
  if (countdown != 0) {
    s32 tmp;
    
#line 171 
    tmp = (*(mbx->ops.check_for_ack))(hw,(unsigned short)((int)mbx_id));
    
#line 171 
    if (tmp != 0) 
#line 173 
                  goto ldv_44064; else 
#line 176 
                                       goto ldv_44063;
  }
  else 
#line 176 
       goto ldv_44063;
  ldv_44063: 
#line 177 
  ;
  
#line 179 
  if (countdown == 0) 
#line 180 
                      mbx->timeout = 0U; else ;
  out: 
#line 181 
  ;
  
#line 182 
  if (countdown != 0) 
#line 182 
                      tmp_0 = 0; else 
#line 182 
                                      tmp_0 = -15;
  
#line 182 
  return tmp_0;
}


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_read_posted_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  
#line 198 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 199 
  s32 ret_val = -15;
  
#line 201 
  if (mbx->ops.read == (s32 (*)(struct e1000_hw *, u32 *, u16 , u16 ))0) 
    
#line 202 
    goto out; else ;
  
#line 204 
  ret_val = igb_poll_for_msg(hw,(unsigned short)((int)mbx_id));
  
#line 206 
  if (ret_val == 0) 
#line 207 
                    ret_val = (*(mbx->ops.read))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id)); else ;
  out: 
#line 208 
  ;
  
#line 209 
  return ret_val;
}


#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_write_posted_mbx(struct e1000_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  
#line 225 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 226 
  s32 ret_val = -15;
  
#line 229 
  if (mbx->ops.write == (s32 (*)(struct e1000_hw *, u32 *, u16 , u16 ))0 || mbx->timeout == 0U) 
    
#line 230 
    goto out; else ;
  
#line 233 
  ret_val = (*(mbx->ops.write))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id));
  
#line 236 
  if (ret_val == 0) 
#line 237 
                    ret_val = igb_poll_for_ack(hw,(unsigned short)((int)mbx_id)); else ;
  out: 
#line 238 
  ;
  
#line 239 
  return ret_val;
}


#line 242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_check_for_bit_pf(struct e1000_hw *hw, u32 mask)
{
  
#line 244 
  u32 mbvficr = igb_rd32(hw,3200U);
  
#line 245 
  s32 ret_val = -15;
  
#line 247 
  if ((mbvficr & mask) != 0U) {
    
#line 248 
    ret_val = 0;
    {
      u8 * volatile *tmp_0;
      {
        
#line 249 
        u8 *__var = (u8 *)0U;
        
#line 249 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 249 
      u8 *hw_addr = *tmp_0;
      
#line 249 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 249 
                                             writel(mask,(void volatile *)(hw_addr + 3200U)); else ;
    }
  }
  else ;
  
#line 252 
  return ret_val;
}


#line 262  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_check_for_msg_pf(struct e1000_hw *hw, u16 vf_number)
{
  s32 tmp;
  
#line 264 
  s32 ret_val = -15;
  
#line 266 
  tmp = igb_check_for_bit_pf(hw,(unsigned int)(1 << (int)vf_number));
  
#line 266 
  if (tmp == 0) {
    
#line 267 
    ret_val = 0;
    
#line 268 
    hw->mbx.stats.reqs += 1U;
  }
  else ;
  
#line 271 
  return ret_val;
}


#line 281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_check_for_ack_pf(struct e1000_hw *hw, u16 vf_number)
{
  s32 tmp;
  
#line 283 
  s32 ret_val = -15;
  
#line 285 
  tmp = igb_check_for_bit_pf(hw,(unsigned int)(65536 << (int)vf_number));
  
#line 285 
  if (tmp == 0) {
    
#line 286 
    ret_val = 0;
    
#line 287 
    hw->mbx.stats.acks += 1U;
  }
  else ;
  
#line 290 
  return ret_val;
}


#line 300  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_check_for_rst_pf(struct e1000_hw *hw, u16 vf_number)
{
  
#line 302 
  u32 vflre = igb_rd32(hw,3208U);
  
#line 303 
  s32 ret_val = -15;
  
#line 305 
  if (((unsigned int)(1 << (int)vf_number) & vflre) != 0U) {
    
#line 306 
    ret_val = 0;
    {
      u8 * volatile *tmp_0;
      {
        
#line 307 
        u8 *__var = (u8 *)0U;
        
#line 307 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 307 
      u8 *hw_addr = *tmp_0;
      
#line 307 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 307 
                                             writel((unsigned int)(1 << (int)vf_number),(void volatile *)(hw_addr + 3208U)); else ;
    }
    
#line 308 
    hw->mbx.stats.rsts += 1U;
  }
  else ;
  
#line 311 
  return ret_val;
}


#line 321  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_obtain_mbx_lock_pf(struct e1000_hw *hw, u16 vf_number)
{
  u32 p2v_mailbox;
  
#line 323 
  s32 ret_val = -15;
  {
    u8 * volatile *tmp;
    {
      
#line 327 
      u8 *__var = (u8 *)0U;
      
#line 327 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 327 
    u8 *hw_addr = *tmp;
    
#line 327 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 327 
                                           writel(8U,(void volatile *)(hw_addr + ((int)vf_number + 768) * 4)); else ;
  }
  
#line 330 
  p2v_mailbox = igb_rd32(hw,(unsigned int)(((int)vf_number + 768) * 4));
  
#line 331 
  if ((p2v_mailbox & 8U) != 0U) 
#line 332 
                                ret_val = 0; else ;
  
#line 334 
  return ret_val;
}


#line 346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_write_mbx_pf(struct e1000_hw *hw, u32 *msg, u16 size, u16 vf_number)
{
  s32 ret_val;
  u16 i;
  
#line 353 
  ret_val = igb_obtain_mbx_lock_pf(hw,(unsigned short)((int)vf_number));
  
#line 354 
  if (ret_val != 0) 
#line 355 
                    goto out_no_write; else ;
  
#line 358 
  igb_check_for_msg_pf(hw,(unsigned short)((int)vf_number));
  
#line 359 
  igb_check_for_ack_pf(hw,(unsigned short)((int)vf_number));
  
#line 362 
  i = (unsigned short)0U;
  
#line 362 
  goto ldv_44134;
  ldv_44133: 
#line 363 
  ;
  {
    u8 * volatile *tmp;
    {
      
#line 363 
      u8 *__var = (u8 *)0U;
      
#line 363 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 363 
    u8 *hw_addr = *tmp;
    
#line 363 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 363 
                                           writel(*(msg + (int)i),(void volatile *)(hw_addr + (((int)vf_number + 32) * 64 + ((int)i << 2)))); else ;
  }
  
#line 362 
  i = (u16)((int)i + 1);
  ldv_44134: 
#line 363 
  ;
  
#line 362 
  if ((int)i < (int)size) 
#line 364 
                          goto ldv_44133; else 
#line 367 
                                               goto ldv_44135;
  ldv_44135: 
#line 368 
  ;
  {
    u8 * volatile *tmp_0;
    {
      
#line 366 
      u8 *__var_0 = (u8 *)0U;
      
#line 366 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 366 
    u8 *hw_addr_0 = *tmp_0;
    
#line 366 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 366 
                                             writel(1U,(void volatile *)(hw_addr_0 + ((int)vf_number + 768) * 4)); else ;
  }
  
#line 369 
  hw->mbx.stats.msgs_tx += 1U;
  out_no_write: 
#line 371 
  ;
  
#line 372 
  return ret_val;
}


#line 387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
static s32 igb_read_mbx_pf(struct e1000_hw *hw, u32 *msg, u16 size, u16 vf_number)
{
  s32 ret_val;
  u16 i;
  
#line 394 
  ret_val = igb_obtain_mbx_lock_pf(hw,(unsigned short)((int)vf_number));
  
#line 395 
  if (ret_val != 0) 
#line 396 
                    goto out_no_read; else ;
  
#line 399 
  i = (unsigned short)0U;
  
#line 399 
  goto ldv_44149;
  ldv_44148: 
#line 400 
  ;
  
#line 400 
  *(msg + (int)i) = readl((void const volatile *)(hw->hw_addr + (((int)vf_number + 32) * 64 + ((int)i << 2))));
  
#line 399 
  i = (u16)((int)i + 1);
  ldv_44149: 
#line 400 
  ;
  
#line 399 
  if ((int)i < (int)size) 
#line 401 
                          goto ldv_44148; else 
#line 404 
                                               goto ldv_44150;
  ldv_44150: 
#line 405 
  ;
  {
    u8 * volatile *tmp;
    {
      
#line 403 
      u8 *__var = (u8 *)0U;
      
#line 403 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 403 
    u8 *hw_addr = *tmp;
    
#line 403 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 403 
                                           writel(2U,(void volatile *)(hw_addr + ((int)vf_number + 768) * 4)); else ;
  }
  
#line 406 
  hw->mbx.stats.msgs_rx += 1U;
  out_no_read: 
#line 408 
  ;
  
#line 409 
  return ret_val;
}


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mbx.c"
s32 igb_init_mbx_params_pf(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 420 
  struct e1000_mbx_info *mbx = & hw->mbx;
  
#line 422 
  mbx->timeout = 0U;
  
#line 423 
  mbx->usec_delay = 0U;
  
#line 425 
  mbx->size = (unsigned short)16U;
  
#line 427 
  mbx->ops.read = & igb_read_mbx_pf;
  
#line 428 
  mbx->ops.write = & igb_write_mbx_pf;
  
#line 429 
  mbx->ops.read_posted = & igb_read_posted_mbx;
  
#line 430 
  mbx->ops.write_posted = & igb_write_posted_mbx;
  
#line 431 
  mbx->ops.check_for_msg = & igb_check_for_msg_pf;
  
#line 432 
  mbx->ops.check_for_ack = & igb_check_for_ack_pf;
  
#line 433 
  mbx->ops.check_for_rst = & igb_check_for_rst_pf;
  
#line 435 
  mbx->stats.msgs_tx = 0U;
  
#line 436 
  mbx->stats.msgs_rx = 0U;
  
#line 437 
  mbx->stats.reqs = 0U;
  
#line 438 
  mbx->stats.acks = 0U;
  
#line 439 
  mbx->stats.rsts = 0U;
  
#line 441 
  __retres = 0;
  
#line 441 
  return __retres;
}


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 405 
int snprintf(char *, size_t, char const * , ...);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static long PTR_ERR(void const *ptr);


#line 41 
static bool IS_ERR(void const *ptr);


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 639  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void *devm_kmalloc(struct device *, size_t, gfp_t);


#line 645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
  void *tmp;
  
#line 647 
  tmp = devm_kmalloc(dev,size,gfp | 32768U);
  
#line 647 
  return tmp;
}


#line 1089 
void _dev_info(struct device const *, char const * , ...);


#line 326  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
struct i2c_client *i2c_new_device(struct i2c_adapter *, struct i2c_board_info const *);


#line 545  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
void igb_sysfs_exit(struct igb_adapter *adapter);


#line 546 
int igb_sysfs_init(struct igb_adapter *adapter);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hwmon.h"
struct device *devm_hwmon_device_register_with_groups(struct device *, char const *, void *, struct attribute_group const **);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static struct i2c_board_info i350_sensor_info = {.type = {(char)'i', (char)'3', (char)'5', (char)'0', (char)'b', (char)'b', (char)'\000'}, .flags = (unsigned short)0, .addr = (unsigned short)124U, .platform_data = (void *)0, .archdata = (struct dev_archdata *)0, .of_node = (struct device_node *)0, .fwnode = (struct fwnode_handle *)0, .irq = 0};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static ssize_t igb_hwmon_show_location(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct hwmon_attr *tmp;
  int tmp_0;
  {
    
#line 47 
    struct device_attribute const *__mptr = (struct device_attribute const *)attr;
    
#line 47 
    tmp = (struct hwmon_attr *)__mptr;
  }
  
#line 47 
  struct hwmon_attr *igb_attr = tmp;
  
#line 49 
  tmp_0 = sprintf(buf,"loc%u\n",(int)(igb_attr->sensor)->location);
  
#line 49 
  __retres = (long)tmp_0;
  
#line 49 
  return __retres;
}


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static ssize_t igb_hwmon_show_temp(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct hwmon_attr *tmp;
  unsigned int value;
  int tmp_0;
  {
    
#line 57 
    struct device_attribute const *__mptr = (struct device_attribute const *)attr;
    
#line 57 
    tmp = (struct hwmon_attr *)__mptr;
  }
  
#line 57 
  struct hwmon_attr *igb_attr = tmp;
  
#line 62 
  (*((igb_attr->hw)->mac.ops.get_thermal_sensor_data))(igb_attr->hw);
  
#line 64 
  value = (unsigned int)(igb_attr->sensor)->temp;
  
#line 67 
  value *= 1000U;
  
#line 69 
  tmp_0 = sprintf(buf,"%u\n",value);
  
#line 69 
  __retres = (long)tmp_0;
  
#line 69 
  return __retres;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static ssize_t igb_hwmon_show_cautionthresh(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct hwmon_attr *tmp;
  int tmp_0;
  {
    
#line 76 
    struct device_attribute const *__mptr = (struct device_attribute const *)attr;
    
#line 76 
    tmp = (struct hwmon_attr *)__mptr;
  }
  
#line 76 
  struct hwmon_attr *igb_attr = tmp;
  
#line 78 
  unsigned int value = (unsigned int)(igb_attr->sensor)->caution_thresh;
  
#line 81 
  value *= 1000U;
  
#line 83 
  tmp_0 = sprintf(buf,"%u\n",value);
  
#line 83 
  __retres = (long)tmp_0;
  
#line 83 
  return __retres;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static ssize_t igb_hwmon_show_maxopthresh(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct hwmon_attr *tmp;
  int tmp_0;
  {
    
#line 90 
    struct device_attribute const *__mptr = (struct device_attribute const *)attr;
    
#line 90 
    tmp = (struct hwmon_attr *)__mptr;
  }
  
#line 90 
  struct hwmon_attr *igb_attr = tmp;
  
#line 92 
  unsigned int value = (unsigned int)(igb_attr->sensor)->max_op_thresh;
  
#line 95 
  value *= 1000U;
  
#line 97 
  tmp_0 = sprintf(buf,"%u\n",value);
  
#line 97 
  __retres = (long)tmp_0;
  
#line 97 
  return __retres;
}


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static int igb_add_hwmon_attr(struct igb_adapter *adapter, unsigned int offset, int type)
{
  int __retres;
  int rc;
  unsigned int n_attr;
  struct hwmon_attr *igb_attr;
  
#line 116 
  n_attr = (adapter->igb_hwmon_buff)->n_hwmon;
  
#line 117 
  igb_attr = & (adapter->igb_hwmon_buff)->hwmon_list[n_attr];
  
#line 119 
  switch (type) {
    case 0: 
#line 120 
    ;
    
#line 121 
    igb_attr->dev_attr.show = & igb_hwmon_show_location;
    
#line 122 
    snprintf((char *)(& igb_attr->name),12UL,"temp%u_label",offset + 1U);
    
#line 124 
    goto ldv_48474;
    case 1: 
#line 125 
    ;
    
#line 126 
    igb_attr->dev_attr.show = & igb_hwmon_show_temp;
    
#line 127 
    snprintf((char *)(& igb_attr->name),12UL,"temp%u_input",offset + 1U);
    
#line 129 
    goto ldv_48474;
    case 2: 
#line 130 
    ;
    
#line 131 
    igb_attr->dev_attr.show = & igb_hwmon_show_cautionthresh;
    
#line 132 
    snprintf((char *)(& igb_attr->name),12UL,"temp%u_max",offset + 1U);
    
#line 134 
    goto ldv_48474;
    case 3: 
#line 135 
    ;
    
#line 136 
    igb_attr->dev_attr.show = & igb_hwmon_show_maxopthresh;
    
#line 137 
    snprintf((char *)(& igb_attr->name),12UL,"temp%u_crit",offset + 1U);
    
#line 139 
    goto ldv_48474;
    default: 
#line 140 
    ;
    
#line 141 
    rc = -1;
    
#line 142 
    __retres = rc;
    
#line 142 
    goto return_label;
  }
  ldv_48474: 
#line 146 
  ;
  
#line 146 
  igb_attr->sensor = & adapter->hw.mac.thermal_sensor_data.sensor[offset];
  
#line 148 
  igb_attr->hw = & adapter->hw;
  
#line 149 
  igb_attr->dev_attr.store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0;
  
#line 150 
  igb_attr->dev_attr.attr.mode = (unsigned short)292U;
  
#line 151 
  igb_attr->dev_attr.attr.name = (char const *)(& igb_attr->name);
  {
    struct lock_class_key __key;
    
#line 152 
    igb_attr->dev_attr.attr.key = & __key;
  }
  
#line 154 
  (adapter->igb_hwmon_buff)->attrs[n_attr] = & igb_attr->dev_attr.attr;
  
#line 156 
  (adapter->igb_hwmon_buff)->n_hwmon += 1U;
  
#line 158 
  __retres = 0;
  return_label: 
#line 158 
                return __retres;
}


#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_hwmon.c"
static void igb_sysfs_del_adapter(struct igb_adapter *adapter)
{
  
#line 163 
  return;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_hwmon.c"
void igb_sysfs_exit(struct igb_adapter *adapter)
{
  
#line 168 
  igb_sysfs_del_adapter(adapter);
  
#line 169 
  return;
}


#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_hwmon.c"
int igb_sysfs_init(struct igb_adapter *adapter)
{
  struct hwmon_buff *igb_hwmon;
  struct i2c_client *client;
  struct device *hwmon_dev;
  unsigned int i;
  bool tmp_1;
  
#line 178 
  int rc = 0;
  
#line 181 
  if (adapter->hw.mac.ops.init_thermal_sensor_thresh == (s32 (*)(struct e1000_hw *))0) 
    
#line 182 
    goto exit; else ;
  
#line 185 
  rc = (*(adapter->hw.mac.ops.init_thermal_sensor_thresh))(& adapter->hw);
  
#line 186 
  if (rc != 0) 
#line 187 
               goto exit; else ;
  
#line 189 
  igb_hwmon = (struct hwmon_buff *)devm_kzalloc(& (adapter->pdev)->dev,1120UL,208U);
  
#line 191 
  if (igb_hwmon == (struct hwmon_buff *)0) {
    
#line 192 
    rc = -12;
    
#line 193 
    goto exit;
  }
  else ;
  
#line 195 
  adapter->igb_hwmon_buff = igb_hwmon;
  
#line 197 
  i = 0U;
  
#line 197 
  goto ldv_48497;
  ldv_48496: 
#line 198 
  ;
  
#line 202 
  if ((unsigned int)adapter->hw.mac.thermal_sensor_data.sensor[i].location == 0U) 
    
#line 203 
    goto ldv_48495; else ;
  
#line 206 
  rc = igb_add_hwmon_attr(adapter,i,2);
  
#line 207 
  if (rc != 0) 
#line 208 
               goto exit; else ;
  
#line 209 
  rc = igb_add_hwmon_attr(adapter,i,0);
  
#line 210 
  if (rc != 0) 
#line 211 
               goto exit; else ;
  
#line 212 
  rc = igb_add_hwmon_attr(adapter,i,1);
  
#line 213 
  if (rc != 0) 
#line 214 
               goto exit; else ;
  
#line 215 
  rc = igb_add_hwmon_attr(adapter,i,3);
  
#line 216 
  if (rc != 0) 
#line 217 
               goto exit; else ;
  ldv_48495: 
#line 218 
  ;
  
#line 197 
  i += 1U;
  ldv_48497: 
#line 198 
  ;
  
#line 197 
  if (i <= 2U) 
#line 199 
               goto ldv_48496; else 
#line 202 
                                    goto ldv_48498;
  ldv_48498: 
#line 203 
  ;
  
#line 221 
  client = i2c_new_device(& adapter->i2c_adap,(struct i2c_board_info const *)(& i350_sensor_info));
  
#line 222 
  if (client == (struct i2c_client *)0) {
    
#line 223 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Failed to create new i2c device.\n");
    
#line 225 
    rc = -19;
    
#line 226 
    goto exit;
  }
  else ;
  
#line 228 
  adapter->i2c_client = client;
  
#line 230 
  igb_hwmon->groups[0] = (struct attribute_group const *)(& igb_hwmon->group);
  
#line 231 
  igb_hwmon->group.attrs = (struct attribute **)(& igb_hwmon->attrs);
  
#line 233 
  hwmon_dev = devm_hwmon_device_register_with_groups(& (adapter->pdev)->dev,(char const *)(& client->name),(void *)igb_hwmon,(struct attribute_group const **)(& igb_hwmon->groups));
  
#line 237 
  tmp_1 = IS_ERR((void const *)hwmon_dev);
  
#line 237 
  if ((int)tmp_1 != 0) {
    long tmp_0;
    
#line 238 
    tmp_0 = PTR_ERR((void const *)hwmon_dev);
    
#line 238 
    rc = (int)tmp_0;
    
#line 239 
    goto err;
  }
  else ;
  
#line 242 
  goto exit;
  err: 
#line 244 
  ;
  
#line 245 
  igb_sysfs_del_adapter(adapter);
  exit: 
#line 246 
  ;
  
#line 247 
  return rc;
}


#line 77  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_hwmon.c.aux"
static long PTR_ERR(void const *ptr)
{
  long tmp;
  
#line 80 
  tmp = ldv_ptr_err(ptr);
  
#line 80 
  return tmp;
}


#line 84  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_hwmon.c.aux"
static bool IS_ERR(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 88 
  ret = ldv_is_err(ptr);
  
#line 89 
  __retres = (_Bool)(ret != 0L);
  
#line 89 
  return __retres;
}


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device const *, char const * , ...);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 48 
void usleep_range(unsigned long, unsigned long);


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.h"
s32 igb_check_downshift(struct e1000_hw *hw);


#line 41 
s32 igb_check_reset_block(struct e1000_hw *hw);


#line 42 
s32 igb_copper_link_setup_igp(struct e1000_hw *hw);


#line 43 
s32 igb_copper_link_setup_m88(struct e1000_hw *hw);


#line 44 
s32 igb_copper_link_setup_m88_gen2(struct e1000_hw *hw);


#line 45 
s32 igb_phy_force_speed_duplex_igp(struct e1000_hw *hw);


#line 46 
s32 igb_phy_force_speed_duplex_m88(struct e1000_hw *hw);


#line 47 
s32 igb_get_cable_length_m88(struct e1000_hw *hw);


#line 48 
s32 igb_get_cable_length_m88_gen2(struct e1000_hw *hw);


#line 49 
s32 igb_get_cable_length_igp_2(struct e1000_hw *hw);


#line 50 
s32 igb_get_phy_id(struct e1000_hw *hw);


#line 51 
s32 igb_get_phy_info_igp(struct e1000_hw *hw);


#line 52 
s32 igb_get_phy_info_m88(struct e1000_hw *hw);


#line 53 
s32 igb_phy_sw_reset(struct e1000_hw *hw);


#line 54 
s32 igb_phy_hw_reset(struct e1000_hw *hw);


#line 55 
s32 igb_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data);


#line 56 
s32 igb_set_d3_lplu_state(struct e1000_hw *hw, bool active);


#line 57 
s32 igb_setup_copper_link(struct e1000_hw *hw);


#line 58 
s32 igb_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data);


#line 59 
s32 igb_phy_has_link(struct e1000_hw *hw, u32 iterations, u32 usec_interval, bool *success);


#line 61 
void igb_power_up_phy_copper(struct e1000_hw *hw);


#line 62 
void igb_power_down_phy_copper(struct e1000_hw *hw);


#line 63 
s32 igb_phy_init_script_igp3(struct e1000_hw *hw);


#line 64 
s32 igb_read_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 *data);


#line 65 
s32 igb_write_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 data);


#line 66 
s32 igb_read_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 *data);


#line 67 
s32 igb_write_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 data);


#line 68 
s32 igb_read_sfp_data_byte(struct e1000_hw *hw, u16 offset, u8 *data);


#line 69 
s32 igb_copper_link_setup_82580(struct e1000_hw *hw);


#line 70 
s32 igb_get_phy_info_82580(struct e1000_hw *hw);


#line 71 
s32 igb_phy_force_speed_duplex_82580(struct e1000_hw *hw);


#line 72 
s32 igb_get_cable_length_82580(struct e1000_hw *hw);


#line 73 
s32 igb_read_phy_reg_gs40g(struct e1000_hw *hw, u32 offset, u16 *data);


#line 74 
s32 igb_write_phy_reg_gs40g(struct e1000_hw *hw, u32 offset, u16 data);


#line 75 
s32 igb_check_polarity_m88(struct e1000_hw *hw);


#line 558  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct net_device *igb_get_hw_dev(struct e1000_hw *hw);


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.h"
s32 igb_config_fc_after_link_up(struct e1000_hw *hw);


#line 61 
void igb_config_collision_dist(struct e1000_hw *hw);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_phy_setup_autoneg(struct e1000_hw *hw);


#line 31 
static void igb_phy_force_speed_duplex_setup(struct e1000_hw *hw, u16 *phy_ctrl);


#line 33 
static s32 igb_wait_autoneg(struct e1000_hw *hw);


#line 34 
static s32 igb_set_master_slave_mode(struct e1000_hw *hw);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static u16 const e1000_m88_cable_length_table[7U] = {(unsigned short)0U, (unsigned short)50U, (unsigned short)80U, (unsigned short)110U, (unsigned short)140U, (unsigned short)140U, (unsigned short)255U};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static u16 const e1000_igp_2_cable_length_table[113U] = {(unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)3U, (unsigned short)5U, (unsigned short)8U, (unsigned short)11U, (unsigned short)13U, (unsigned short)16U, (unsigned short)18U, (unsigned short)21U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)3U, (unsigned short)6U, (unsigned short)10U, (unsigned short)13U, (unsigned short)16U, (unsigned short)19U, (unsigned short)23U, (unsigned short)26U, (unsigned short)29U, (unsigned short)32U, (unsigned short)35U, (unsigned short)38U, (unsigned short)41U, (unsigned short)6U, (unsigned short)10U, (unsigned short)14U, (unsigned short)18U, (unsigned short)22U, (unsigned short)26U, (unsigned short)30U, (unsigned short)33U, (unsigned short)37U, (unsigned short)41U, (unsigned short)44U, (unsigned short)48U, (unsigned short)51U, (unsigned short)54U, (unsigned short)58U, (unsigned short)61U, (unsigned short)21U, (unsigned short)26U, (unsigned short)31U, (unsigned short)35U, (unsigned short)40U, (unsigned short)44U, (unsigned short)49U, (unsigned short)53U, (unsigned short)57U, (unsigned short)61U, (unsigned short)65U, (unsigned short)68U, (unsigned short)72U, (unsigned short)75U, (unsigned short)79U, (unsigned short)82U, (unsigned short)40U, (unsigned short)45U, (unsigned short)51U, (unsigned short)56U, (unsigned short)61U, (unsigned short)66U, (unsigned short)70U, (unsigned short)75U, (unsigned short)79U, (unsigned short)83U, (unsigned short)87U, (unsigned short)91U, (unsigned short)94U, (unsigned short)98U, (unsigned short)101U, (unsigned short)104U, (unsigned short)60U, (unsigned short)66U, (unsigned short)72U, (unsigned short)77U, (unsigned short)82U, (unsigned short)87U, (unsigned short)92U, (unsigned short)96U, (unsigned short)100U, (unsigned short)104U, (unsigned short)108U, (unsigned short)111U, (unsigned short)114U, (unsigned short)117U, (unsigned short)119U, (unsigned short)121U, (unsigned short)83U, (unsigned short)89U, (unsigned short)95U, (unsigned short)100U, (unsigned short)105U, (unsigned short)109U, (unsigned short)113U, (unsigned short)116U, (unsigned short)119U, (unsigned short)122U, (unsigned short)124U, (unsigned short)104U, (unsigned short)109U, (unsigned short)114U, (unsigned short)118U, (unsigned short)121U, (unsigned short)124U};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_check_reset_block(struct e1000_hw *hw)
{
  u32 manc;
  int tmp;
  
#line 68 
  manc = igb_rd32(hw,22560U);
  
#line 70 
  if ((manc & 262144U) != 0U) 
#line 70 
                              tmp = 12; else 
#line 70 
                                             tmp = 0;
  
#line 70 
  return tmp;
}


#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_phy_id(struct e1000_hw *hw)
{
  u16 phy_id;
  
#line 82 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 83 
  s32 ret_val = 0;
  
#line 86 
  ret_val = (*(phy->ops.read_reg))(hw,2U,& phy_id);
  
#line 87 
  if (ret_val != 0) 
#line 88 
                    goto out; else ;
  
#line 90 
  phy->id = (unsigned int)((int)phy_id << 16);
  
#line 91 
  __const_udelay(85900UL);
  
#line 92 
  ret_val = (*(phy->ops.read_reg))(hw,3U,& phy_id);
  
#line 93 
  if (ret_val != 0) 
#line 94 
                    goto out; else ;
  
#line 96 
  phy->id |= (unsigned int)phy_id & 4294967280U;
  
#line 97 
  phy->revision = (unsigned int)phy_id & 15U;
  out: 
#line 99 
  ;
  
#line 100 
  return ret_val;
}


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_phy_reset_dsp(struct e1000_hw *hw)
{
  
#line 111 
  s32 ret_val = 0;
  
#line 113 
  if (hw->phy.ops.write_reg == (s32 (*)(struct e1000_hw *, u32 , u16 ))0) 
    
#line 114 
    goto out; else ;
  
#line 116 
  ret_val = (*(hw->phy.ops.write_reg))(hw,30U,(unsigned short)193);
  
#line 117 
  if (ret_val != 0) 
#line 118 
                    goto out; else ;
  
#line 120 
  ret_val = (*(hw->phy.ops.write_reg))(hw,30U,(unsigned short)0);
  out: 
#line 122 
  ;
  
#line 123 
  return ret_val;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_read_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 *data)
{
  u32 i;
  
#line 137 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 138 
  u32 mdic = 0U;
  
#line 139 
  s32 ret_val = 0;
  
#line 141 
  if (offset > 31U) {
    {
      
#line 142 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_read_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "PHY Address %d is out of range\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))142U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 142 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 142 
        ;
        
#line 142 
        tmp = igb_get_hw_dev(hw);
        
#line 142 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"PHY Address %d is out of range\n",offset);
      }
      else ;
    }
    
#line 143 
    ret_val = -4;
    
#line 144 
    goto out;
  }
  else ;
  
#line 151 
  mdic = ((offset << 16) | (phy->addr << 21)) | 134217728U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 155 
      u8 *__var = (u8 *)0U;
      
#line 155 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 155 
    u8 *hw_addr = *tmp_0;
    
#line 155 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 155 
                                           writel(mdic,(void volatile *)(hw_addr + 32U)); else ;
  }
  
#line 161 
  i = 0U;
  
#line 161 
  goto ldv_44056;
  ldv_44055: 
#line 162 
  ;
  
#line 162 
  __const_udelay(214750UL);
  
#line 163 
  mdic = igb_rd32(hw,32U);
  
#line 164 
  if ((mdic & 268435456U) != 0U) 
#line 165 
                                 goto ldv_44054; else ;
  
#line 161 
  i += 1U;
  ldv_44056: 
#line 162 
  ;
  
#line 161 
  if (i <= 1919U) 
#line 163 
                  goto ldv_44055; else 
#line 166 
                                       goto ldv_44054;
  ldv_44054: 
#line 167 
  ;
  
#line 167 
  if ((mdic & 268435456U) == 0U) {
    {
      
#line 168 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_read_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "MDI Read did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))168U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 168 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 168 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 168 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_1,"MDI Read did not complete\n");
      }
      else ;
    }
    
#line 169 
    ret_val = -2;
    
#line 170 
    goto out;
  }
  else ;
  
#line 172 
  if ((mdic & 1073741824U) != 0U) {
    {
      
#line 173 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_read_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "MDI Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))173U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 173 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 173 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 173 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_2,"MDI Error\n");
      }
      else ;
    }
    
#line 174 
    ret_val = -2;
    
#line 175 
    goto out;
  }
  else ;
  
#line 177 
  *data = (unsigned short)mdic;
  out: 
#line 179 
  ;
  
#line 180 
  return ret_val;
}


#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_write_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 data)
{
  u32 i;
  
#line 193 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 194 
  u32 mdic = 0U;
  
#line 195 
  s32 ret_val = 0;
  
#line 197 
  if (offset > 31U) {
    {
      
#line 198 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_write_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "PHY Address %d is out of range\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))198U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 198 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 198 
        ;
        
#line 198 
        tmp = igb_get_hw_dev(hw);
        
#line 198 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"PHY Address %d is out of range\n",offset);
      }
      else ;
    }
    
#line 199 
    ret_val = -4;
    
#line 200 
    goto out;
  }
  else ;
  
#line 207 
  mdic = (((unsigned int)data | (offset << 16)) | (phy->addr << 21)) | 67108864U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 212 
      u8 *__var = (u8 *)0U;
      
#line 212 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 212 
    u8 *hw_addr = *tmp_0;
    
#line 212 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 212 
                                           writel(mdic,(void volatile *)(hw_addr + 32U)); else ;
  }
  
#line 218 
  i = 0U;
  
#line 218 
  goto ldv_44076;
  ldv_44075: 
#line 219 
  ;
  
#line 219 
  __const_udelay(214750UL);
  
#line 220 
  mdic = igb_rd32(hw,32U);
  
#line 221 
  if ((mdic & 268435456U) != 0U) 
#line 222 
                                 goto ldv_44074; else ;
  
#line 218 
  i += 1U;
  ldv_44076: 
#line 219 
  ;
  
#line 218 
  if (i <= 1919U) 
#line 220 
                  goto ldv_44075; else 
#line 223 
                                       goto ldv_44074;
  ldv_44074: 
#line 224 
  ;
  
#line 224 
  if ((mdic & 268435456U) == 0U) {
    {
      
#line 225 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_write_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "MDI Write did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))225U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 225 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 225 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 225 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_1,"MDI Write did not complete\n");
      }
      else ;
    }
    
#line 226 
    ret_val = -2;
    
#line 227 
    goto out;
  }
  else ;
  
#line 229 
  if ((mdic & 1073741824U) != 0U) {
    {
      
#line 230 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_write_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "MDI Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))230U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 230 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 230 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 230 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_2,"MDI Error\n");
      }
      else ;
    }
    
#line 231 
    ret_val = -2;
    
#line 232 
    goto out;
  }
  else ;
  out: 
#line 235 
  ;
  
#line 236 
  return ret_val;
}


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_read_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 __retres;
  u32 i;
  
#line 250 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 251 
  u32 i2ccmd = 0U;
  
#line 257 
  i2ccmd = ((offset << 16) | (phy->addr << 24)) | 134217728U;
  {
    u8 * volatile *tmp;
    {
      
#line 261 
      u8 *__var = (u8 *)0U;
      
#line 261 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 261 
    u8 *hw_addr = *tmp;
    
#line 261 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 261 
                                           writel(i2ccmd,(void volatile *)(hw_addr + 4136U)); else ;
  }
  
#line 264 
  i = 0U;
  
#line 264 
  goto ldv_44092;
  ldv_44091: 
#line 265 
  ;
  
#line 265 
  __const_udelay(214750UL);
  
#line 266 
  i2ccmd = igb_rd32(hw,4136U);
  
#line 267 
  if ((i2ccmd & 536870912U) != 0U) 
#line 268 
                                   goto ldv_44090; else ;
  
#line 264 
  i += 1U;
  ldv_44092: 
#line 265 
  ;
  
#line 264 
  if (i <= 199U) 
#line 266 
                 goto ldv_44091; else 
#line 269 
                                      goto ldv_44090;
  ldv_44090: 
#line 270 
  ;
  
#line 270 
  if ((i2ccmd & 536870912U) == 0U) {
    {
      
#line 271 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_read_phy_reg_i2c", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "I2CCMD Read did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))271U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 271 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 271 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 271 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_0,"I2CCMD Read did not complete\n");
      }
      else ;
    }
    
#line 272 
    __retres = -2;
    
#line 272 
    goto return_label;
  }
  else ;
  
#line 274 
  if (i2ccmd < (u32)0) {
    {
      
#line 275 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_read_phy_reg_i2c", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "I2CCMD Error bit set\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))275U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 275 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 275 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 275 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_1,"I2CCMD Error bit set\n");
      }
      else ;
    }
    
#line 276 
    __retres = -2;
    
#line 276 
    goto return_label;
  }
  else ;
  
#line 280 
  *data = (unsigned short)(((unsigned int)((unsigned short)(i2ccmd >> 8)) & 255U) | (unsigned int)((int)((unsigned short)i2ccmd) << 8U));
  
#line 282 
  __retres = 0;
  return_label: 
#line 282 
                return __retres;
}


#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_write_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 __retres;
  u32 i;
  u16 phy_data_swapped;
  
#line 295 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 296 
  u32 i2ccmd = 0U;
  
#line 300 
  if (hw->phy.addr + 4294967295U > 6U) {
    {
      
#line 301 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_write_phy_reg_i2c", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "PHY I2C Address %d is out of range.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))302U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 301 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 301 
        ;
        
#line 301 
        tmp = igb_get_hw_dev(hw);
        
#line 301 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"PHY I2C Address %d is out of range.\n",hw->phy.addr);
      }
      else ;
    }
    
#line 303 
    __retres = -3;
    
#line 303 
    goto return_label;
  }
  else ;
  
#line 307 
  phy_data_swapped = (unsigned short)(((int)data >> 8) | ((int)data << 8));
  
#line 313 
  i2ccmd = ((offset << 16) | (phy->addr << 24)) | (unsigned int)phy_data_swapped;
  {
    u8 * volatile *tmp_0;
    {
      
#line 318 
      u8 *__var = (u8 *)0U;
      
#line 318 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 318 
    u8 *hw_addr = *tmp_0;
    
#line 318 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 318 
                                           writel(i2ccmd,(void volatile *)(hw_addr + 4136U)); else ;
  }
  
#line 321 
  i = 0U;
  
#line 321 
  goto ldv_44112;
  ldv_44111: 
#line 322 
  ;
  
#line 322 
  __const_udelay(214750UL);
  
#line 323 
  i2ccmd = igb_rd32(hw,4136U);
  
#line 324 
  if ((i2ccmd & 536870912U) != 0U) 
#line 325 
                                   goto ldv_44110; else ;
  
#line 321 
  i += 1U;
  ldv_44112: 
#line 322 
  ;
  
#line 321 
  if (i <= 199U) 
#line 323 
                 goto ldv_44111; else 
#line 326 
                                      goto ldv_44110;
  ldv_44110: 
#line 327 
  ;
  
#line 327 
  if ((i2ccmd & 536870912U) == 0U) {
    {
      
#line 328 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_write_phy_reg_i2c", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "I2CCMD Write did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))328U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 328 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 328 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 328 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_1,"I2CCMD Write did not complete\n");
      }
      else ;
    }
    
#line 329 
    __retres = -2;
    
#line 329 
    goto return_label;
  }
  else ;
  
#line 331 
  if (i2ccmd < (u32)0) {
    {
      
#line 332 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_write_phy_reg_i2c", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "I2CCMD Error bit set\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))332U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 332 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 332 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 332 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_2,"I2CCMD Error bit set\n");
      }
      else ;
    }
    
#line 333 
    __retres = -2;
    
#line 333 
    goto return_label;
  }
  else ;
  
#line 336 
  __retres = 0;
  return_label: 
#line 336 
                return __retres;
}


#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_read_sfp_data_byte(struct e1000_hw *hw, u16 offset, u8 *data)
{
  s32 __retres;
  
#line 354 
  u32 i = 0U;
  
#line 355 
  u32 i2ccmd = 0U;
  
#line 356 
  u32 data_local = 0U;
  
#line 358 
  if ((unsigned int)offset > 511U) {
    {
      
#line 359 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_read_sfp_data_byte", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "I2CCMD command address exceeds upper limit\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))359U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 359 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 359 
        tmp = igb_get_hw_dev(hw);
        
#line 359 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"I2CCMD command address exceeds upper limit\n");
      }
      else ;
    }
    
#line 360 
    __retres = -2;
    
#line 360 
    goto return_label;
  }
  else ;
  
#line 367 
  i2ccmd = (unsigned int)(((int)offset << 16) | 134217728);
  {
    u8 * volatile *tmp_0;
    {
      
#line 370 
      u8 *__var = (u8 *)0U;
      
#line 370 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 370 
    u8 *hw_addr = *tmp_0;
    
#line 370 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 370 
                                           writel(i2ccmd,(void volatile *)(hw_addr + 4136U)); else ;
  }
  
#line 373 
  i = 0U;
  
#line 373 
  goto ldv_44130;
  ldv_44129: 
#line 374 
  ;
  
#line 374 
  __const_udelay(214750UL);
  
#line 375 
  data_local = igb_rd32(hw,4136U);
  
#line 376 
  if ((data_local & 536870912U) != 0U) 
#line 377 
                                       goto ldv_44128; else ;
  
#line 373 
  i += 1U;
  ldv_44130: 
#line 374 
  ;
  
#line 373 
  if (i <= 199U) 
#line 375 
                 goto ldv_44129; else 
#line 378 
                                      goto ldv_44128;
  ldv_44128: 
#line 379 
  ;
  
#line 379 
  if ((data_local & 536870912U) == 0U) {
    {
      
#line 380 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_read_sfp_data_byte", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "I2CCMD Read did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))380U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 380 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 380 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 380 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_1,"I2CCMD Read did not complete\n");
      }
      else ;
    }
    
#line 381 
    __retres = -2;
    
#line 381 
    goto return_label;
  }
  else ;
  
#line 383 
  if (data_local < (u32)0) {
    {
      
#line 384 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_read_sfp_data_byte", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "I2CCMD Error bit set\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))384U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 384 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 384 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 384 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_2,"I2CCMD Error bit set\n");
      }
      else ;
    }
    
#line 385 
    __retres = -2;
    
#line 385 
    goto return_label;
  }
  else ;
  
#line 387 
  *data = (unsigned char)data_local;
  
#line 389 
  __retres = 0;
  return_label: 
#line 389 
                return __retres;
}


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data)
{
  
#line 404 
  s32 ret_val = 0;
  
#line 406 
  if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) 
#line 407 
                                                            goto out; else ;
  
#line 409 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 410 
  if (ret_val != 0) 
#line 411 
                    goto out; else ;
  
#line 413 
  if (offset > 15U) {
    
#line 414 
    ret_val = igb_write_phy_reg_mdic(hw,31U,(unsigned short)((int)((unsigned short)offset)));
    
#line 417 
    if (ret_val != 0) {
      
#line 418 
      (*(hw->phy.ops.release))(hw);
      
#line 419 
      goto out;
    }
    else ;
  }
  else ;
  
#line 423 
  ret_val = igb_read_phy_reg_mdic(hw,offset & 31U,data);
  
#line 426 
  (*(hw->phy.ops.release))(hw);
  out: 
#line 428 
  ;
  
#line 429 
  return ret_val;
}


#line 441  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data)
{
  
#line 443 
  s32 ret_val = 0;
  
#line 445 
  if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) 
#line 446 
                                                            goto out; else ;
  
#line 448 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 449 
  if (ret_val != 0) 
#line 450 
                    goto out; else ;
  
#line 452 
  if (offset > 15U) {
    
#line 453 
    ret_val = igb_write_phy_reg_mdic(hw,31U,(unsigned short)((int)((unsigned short)offset)));
    
#line 456 
    if (ret_val != 0) {
      
#line 457 
      (*(hw->phy.ops.release))(hw);
      
#line 458 
      goto out;
    }
    else ;
  }
  else ;
  
#line 462 
  ret_val = igb_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  
#line 465 
  (*(hw->phy.ops.release))(hw);
  out: 
#line 467 
  ;
  
#line 468 
  return ret_val;
}


#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_copper_link_setup_82580(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  
#line 479 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 483 
  if ((int)phy->reset_disable != 0) {
    
#line 484 
    ret_val = 0;
    
#line 485 
    goto out;
  }
  else ;
  
#line 488 
  if (phy->type == (unsigned int)e1000_phy_82580) {
    
#line 489 
    ret_val = (*(hw->phy.ops.reset))(hw);
    
#line 490 
    if (ret_val != 0) {
      {
        
#line 491 
        struct _ddebug descriptor = {.modname = "igb", .function = "igb_copper_link_setup_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error resetting the PHY.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))491U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 491 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
          struct net_device *tmp;
          
#line 491 
          tmp = igb_get_hw_dev(hw);
          
#line 491 
          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Error resetting the PHY.\n");
        }
        else ;
      }
      
#line 492 
      goto out;
    }
    else ;
  }
  else ;
  
#line 497 
  ret_val = (*(phy->ops.read_reg))(hw,22U,& phy_data);
  
#line 498 
  if (ret_val != 0) 
#line 499 
                    goto out; else ;
  
#line 501 
  phy_data = (unsigned short)((unsigned int)phy_data | 32768U);
  
#line 504 
  phy_data = (unsigned short)((unsigned int)phy_data | 3072U);
  
#line 506 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)((int)phy_data));
  
#line 507 
  if (ret_val != 0) 
#line 508 
                    goto out; else ;
  
#line 511 
  ret_val = (*(phy->ops.read_reg))(hw,18U,& phy_data);
  
#line 512 
  if (ret_val != 0) 
#line 513 
                    goto out; else ;
  
#line 514 
  phy_data = (unsigned short)((unsigned int)phy_data & 63999U);
  
#line 520 
  switch ((int)hw->phy.mdix) {
    case 1: 
#line 521 
    ;
    
#line 522 
    goto ldv_44157;
    case 2: 
#line 523 
    ;
    
#line 524 
    phy_data = (unsigned short)((unsigned int)phy_data | 512U);
    
#line 525 
    goto ldv_44157;
    case 0: 
#line 526 
    ;
    default: 
#line 527 
    ;
    
#line 528 
    phy_data = (unsigned short)((unsigned int)phy_data | 1024U);
    
#line 529 
    goto ldv_44157;
  }
  ldv_44157: 
#line 531 
  ;
  
#line 531 
  ret_val = (*(hw->phy.ops.write_reg))(hw,18U,(unsigned short)((int)phy_data));
  out: 
#line 533 
  ;
  
#line 534 
  return ret_val;
}


#line 544  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_copper_link_setup_m88(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  
#line 546 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 550 
  if ((int)phy->reset_disable != 0) {
    
#line 551 
    ret_val = 0;
    
#line 552 
    goto out;
  }
  else ;
  
#line 556 
  ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
  
#line 557 
  if (ret_val != 0) 
#line 558 
                    goto out; else ;
  
#line 560 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  
#line 569 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  
#line 571 
  switch ((int)phy->mdix) {
    case 1: 
#line 572 
    ;
    
#line 573 
    phy_data = phy_data;
    
#line 574 
    goto ldv_44169;
    case 2: 
#line 575 
    ;
    
#line 576 
    phy_data = (unsigned short)((unsigned int)phy_data | 32U);
    
#line 577 
    goto ldv_44169;
    case 3: 
#line 578 
    ;
    
#line 579 
    phy_data = (unsigned short)((unsigned int)phy_data | 64U);
    
#line 580 
    goto ldv_44169;
    case 0: 
#line 581 
    ;
    default: 
#line 582 
    ;
    
#line 583 
    phy_data = (unsigned short)((unsigned int)phy_data | 96U);
    
#line 584 
    goto ldv_44169;
  }
  ldv_44169: 
#line 593 
  ;
  
#line 593 
  phy_data = (unsigned short)((unsigned int)phy_data & 65533U);
  
#line 594 
  if ((int)phy->disable_polarity_correction == 1) 
#line 595 
                                                  phy_data = (unsigned short)((unsigned int)phy_data | 2U); else ;
  
#line 597 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
  
#line 598 
  if (ret_val != 0) 
#line 599 
                    goto out; else ;
  
#line 601 
  if (phy->revision <= 3U) {
    
#line 605 
    ret_val = (*(phy->ops.read_reg))(hw,20U,& phy_data);
    
#line 607 
    if (ret_val != 0) 
#line 608 
                      goto out; else ;
    
#line 610 
    phy_data = (unsigned short)((unsigned int)phy_data | 112U);
    
#line 612 
    if (phy->revision == 2U && phy->id == 21040320U) {
      
#line 615 
      phy_data = (unsigned short)((unsigned int)phy_data & 61951U);
      
#line 616 
      phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
    }
    else {
      
#line 619 
      phy_data = (unsigned short)((unsigned int)phy_data & 61695U);
      
#line 621 
      phy_data = (unsigned short)((unsigned int)phy_data | 256U);
    }
    
#line 624 
    ret_val = (*(phy->ops.write_reg))(hw,20U,(unsigned short)((int)phy_data));
    
#line 626 
    if (ret_val != 0) 
#line 627 
                      goto out; else ;
  }
  else ;
  
#line 631 
  ret_val = igb_phy_sw_reset(hw);
  
#line 632 
  if (ret_val != 0) {
    {
      
#line 633 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_copper_link_setup_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error committing the PHY changes\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))633U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 633 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 633 
        tmp = igb_get_hw_dev(hw);
        
#line 633 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Error committing the PHY changes\n");
      }
      else ;
    }
    
#line 634 
    goto out;
  }
  else ;
  out: 
#line 637 
  ;
  
#line 638 
  return ret_val;
}


#line 648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_copper_link_setup_m88_gen2(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  
#line 650 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 654 
  if ((int)phy->reset_disable != 0) {
    
#line 655 
    __retres = 0;
    
#line 655 
    goto return_label;
  }
  else ;
  
#line 658 
  ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
  
#line 659 
  if (ret_val != 0) {
    
#line 660 
    __retres = ret_val;
    
#line 660 
    goto return_label;
  }
  else ;
  
#line 669 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  
#line 671 
  switch ((int)phy->mdix) {
    case 1: 
#line 672 
    ;
    
#line 673 
    phy_data = phy_data;
    
#line 674 
    goto ldv_44183;
    case 2: 
#line 675 
    ;
    
#line 676 
    phy_data = (unsigned short)((unsigned int)phy_data | 32U);
    
#line 677 
    goto ldv_44183;
    case 3: 
#line 678 
    ;
    
#line 680 
    if (phy->id != 21040272U) {
      
#line 681 
      phy_data = (unsigned short)((unsigned int)phy_data | 64U);
      
#line 682 
      goto ldv_44183;
    }
    else ;
    case 0: 
#line 684 
    ;
    default: 
#line 685 
    ;
    
#line 686 
    phy_data = (unsigned short)((unsigned int)phy_data | 96U);
    
#line 687 
    goto ldv_44183;
  }
  ldv_44183: 
#line 696 
  ;
  
#line 696 
  phy_data = (unsigned short)((unsigned int)phy_data & 65533U);
  
#line 697 
  if ((int)phy->disable_polarity_correction == 1) 
#line 698 
                                                  phy_data = (unsigned short)((unsigned int)phy_data | 2U); else ;
  
#line 701 
  if (phy->id == 21040800U) {
    
#line 702 
    phy_data = (unsigned short)((unsigned int)phy_data & 63487U);
    
#line 703 
    ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
    
#line 705 
    if (ret_val != 0) {
      
#line 706 
      __retres = ret_val;
      
#line 706 
      goto return_label;
    }
    else ;
    
#line 708 
    ret_val = igb_phy_sw_reset(hw);
    
#line 709 
    if (ret_val != 0) {
      {
        
#line 710 
        struct _ddebug descriptor = {.modname = "igb", .function = "igb_copper_link_setup_m88_gen2", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error committing the PHY changes\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))710U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 710 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
          struct net_device *tmp;
          
#line 710 
          tmp = igb_get_hw_dev(hw);
          
#line 710 
          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Error committing the PHY changes\n");
        }
        else ;
      }
      
#line 711 
      __retres = ret_val;
      
#line 711 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 715 
  phy_data = (unsigned short)((unsigned int)phy_data & 36863U);
  
#line 716 
  phy_data = (unsigned short)((unsigned int)phy_data | 20480U);
  
#line 717 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  
#line 719 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
  
#line 720 
  if (ret_val != 0) {
    
#line 721 
    __retres = ret_val;
    
#line 721 
    goto return_label;
  }
  else ;
  
#line 724 
  ret_val = igb_phy_sw_reset(hw);
  
#line 725 
  if (ret_val != 0) {
    {
      
#line 726 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_copper_link_setup_m88_gen2", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error committing the PHY changes\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))726U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 726 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 726 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 726 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Error committing the PHY changes\n");
      }
      else ;
    }
    
#line 727 
    __retres = ret_val;
    
#line 727 
    goto return_label;
  }
  else ;
  
#line 729 
  ret_val = igb_set_master_slave_mode(hw);
  
#line 730 
  if (ret_val != 0) {
    
#line 731 
    __retres = ret_val;
    
#line 731 
    goto return_label;
  }
  else ;
  
#line 733 
  __retres = 0;
  return_label: 
#line 733 
                return __retres;
}


#line 743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_copper_link_setup_igp(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 data;
  
#line 745 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 749 
  if ((int)phy->reset_disable != 0) {
    
#line 750 
    ret_val = 0;
    
#line 751 
    goto out;
  }
  else ;
  
#line 754 
  ret_val = (*(phy->ops.reset))(hw);
  
#line 755 
  if (ret_val != 0) {
    {
      
#line 756 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_copper_link_setup_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error resetting the PHY.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))756U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 756 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 756 
        tmp = igb_get_hw_dev(hw);
        
#line 756 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Error resetting the PHY.\n");
      }
      else ;
    }
    
#line 757 
    goto out;
  }
  else ;
  
#line 763 
  msleep(100U);
  
#line 768 
  if (phy->type == (unsigned int)e1000_phy_igp) {
    
#line 770 
    if (phy->ops.set_d3_lplu_state != (s32 (*)(struct e1000_hw *, bool ))0) 
      
#line 771 
      ret_val = (*(phy->ops.set_d3_lplu_state))(hw,(_Bool)0); else ;
    
#line 772 
    if (ret_val != 0) {
      {
        
#line 773 
        struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_copper_link_setup_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error Disabling LPLU D3\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))773U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 773 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
          struct net_device *tmp_0;
          
#line 773 
          tmp_0 = igb_get_hw_dev(hw);
          
#line 773 
          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Error Disabling LPLU D3\n");
        }
        else ;
      }
      
#line 774 
      goto out;
    }
    else ;
  }
  else ;
  
#line 779 
  ret_val = (*(phy->ops.set_d0_lplu_state))(hw,(_Bool)0);
  
#line 780 
  if (ret_val != 0) {
    {
      
#line 781 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_copper_link_setup_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error Disabling LPLU D0\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))781U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 781 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 781 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 781 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Error Disabling LPLU D0\n");
      }
      else ;
    }
    
#line 782 
    goto out;
  }
  else ;
  
#line 785 
  ret_val = (*(phy->ops.read_reg))(hw,18U,& data);
  
#line 786 
  if (ret_val != 0) 
#line 787 
                    goto out; else ;
  
#line 789 
  data = (unsigned short)((unsigned int)data & 61439U);
  
#line 791 
  switch ((int)phy->mdix) {
    case 1: 
#line 792 
    ;
    
#line 793 
    data = (unsigned short)((unsigned int)data & 57343U);
    
#line 794 
    goto ldv_44203;
    case 2: 
#line 795 
    ;
    
#line 796 
    data = (unsigned short)((unsigned int)data | 8192U);
    
#line 797 
    goto ldv_44203;
    case 0: 
#line 798 
    ;
    default: 
#line 799 
    ;
    
#line 800 
    data = (unsigned short)((unsigned int)data | 4096U);
    
#line 801 
    goto ldv_44203;
  }
  ldv_44203: 
#line 803 
  ;
  
#line 803 
  ret_val = (*(phy->ops.write_reg))(hw,18U,(unsigned short)((int)data));
  
#line 804 
  if (ret_val != 0) 
#line 805 
                    goto out; else ;
  
#line 808 
  if ((int)hw->mac.autoneg != 0) {
    int tmp_3;
    
#line 813 
    if ((unsigned int)phy->autoneg_advertised == 32U) {
      
#line 815 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      
#line 818 
      if (ret_val != 0) 
#line 819 
                        goto out; else ;
      
#line 821 
      data = (unsigned short)((unsigned int)data & 65407U);
      
#line 822 
      ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
      
#line 825 
      if (ret_val != 0) 
#line 826 
                        goto out; else ;
      
#line 829 
      ret_val = (*(phy->ops.read_reg))(hw,9U,& data);
      
#line 830 
      if (ret_val != 0) 
#line 831 
                        goto out; else ;
      
#line 833 
      data = (unsigned short)((unsigned int)data & 61439U);
      
#line 834 
      ret_val = (*(phy->ops.write_reg))(hw,9U,(unsigned short)((int)data));
      
#line 835 
      if (ret_val != 0) 
#line 836 
                        goto out; else ;
    }
    else ;
    
#line 839 
    ret_val = (*(phy->ops.read_reg))(hw,9U,& data);
    
#line 840 
    if (ret_val != 0) 
#line 841 
                      goto out; else ;
    
#line 847 
    if (((int)data & 4096) != 0) {
      int tmp_2;
      
#line 844 
      if (((int)data & 2048) != 0) 
#line 844 
                                   tmp_2 = 1; else 
#line 844 
                                                   tmp_2 = 2;
      
#line 847 
      tmp_3 = tmp_2;
    }
    else 
#line 847 
         tmp_3 = 3;
    
#line 844 
    phy->original_ms_type = (enum e1000_ms_type)tmp_3;
    
#line 850 
    switch ((unsigned int)phy->ms_type) {
      case (unsigned int)1: 
#line 851 
      ;
      
#line 852 
      data = (unsigned short)((unsigned int)data | 6144U);
      
#line 853 
      goto ldv_44208;
      case (unsigned int)2: 
#line 854 
      ;
      
#line 855 
      data = (unsigned short)((unsigned int)data | 4096U);
      
#line 856 
      data = (unsigned short)((unsigned int)data & 63487U);
      
#line 857 
      goto ldv_44208;
      case (unsigned int)3: 
#line 858 
      ;
      
#line 859 
      data = (unsigned short)((unsigned int)data & 61439U);
      default: 
#line 860 
      ;
      
#line 861 
      goto ldv_44208;
    }
    ldv_44208: 
#line 863 
    ;
    
#line 863 
    ret_val = (*(phy->ops.write_reg))(hw,9U,(unsigned short)((int)data));
    
#line 864 
    if (ret_val != 0) 
#line 865 
                      goto out; else ;
  }
  else ;
  out: 
#line 868 
  ;
  
#line 869 
  return ret_val;
}


#line 881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_copper_link_autoneg(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_ctrl;
  
#line 883 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 890 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  
#line 895 
  if ((unsigned int)phy->autoneg_advertised == 0U) 
#line 896 
                                                   phy->autoneg_advertised = phy->autoneg_mask; else ;
  {
    
#line 898 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_copper_link_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Reconfiguring auto-neg advertisement params\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))898U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 898 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 898 
      tmp = igb_get_hw_dev(hw);
      
#line 898 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Reconfiguring auto-neg advertisement params\n");
    }
    else ;
  }
  
#line 899 
  ret_val = igb_phy_setup_autoneg(hw);
  
#line 900 
  if (ret_val != 0) {
    {
      
#line 901 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_copper_link_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error Setting up Auto-Negotiation\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))901U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 901 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 901 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 901 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Error Setting up Auto-Negotiation\n");
      }
      else ;
    }
    
#line 902 
    goto out;
  }
  else ;
  {
    
#line 904 
    struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_copper_link_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Restarting Auto-Neg\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))904U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 904 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
      struct net_device *tmp_1;
      
#line 904 
      tmp_1 = igb_get_hw_dev(hw);
      
#line 904 
      __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Restarting Auto-Neg\n");
    }
    else ;
  }
  
#line 909 
  ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_ctrl);
  
#line 910 
  if (ret_val != 0) 
#line 911 
                    goto out; else ;
  
#line 913 
  phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 4608U);
  
#line 914 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_ctrl));
  
#line 915 
  if (ret_val != 0) 
#line 916 
                    goto out; else ;
  
#line 921 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    
#line 922 
    ret_val = igb_wait_autoneg(hw);
    
#line 923 
    if (ret_val != 0) {
      {
        
#line 924 
        struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_copper_link_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error while waiting for autoneg to complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))924U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 924 
        if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
          struct net_device *tmp_2;
          
#line 924 
          tmp_2 = igb_get_hw_dev(hw);
          
#line 924 
          __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_2,"Error while waiting for autoneg to complete\n");
        }
        else ;
      }
      
#line 925 
      goto out;
    }
    else ;
  }
  else ;
  
#line 929 
  hw->mac.get_link_status = (_Bool)1;
  out: 
#line 931 
  ;
  
#line 932 
  return ret_val;
}


#line 944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_phy_setup_autoneg(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 mii_autoneg_adv_reg;
  
#line 946 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 949 
  u16 mii_1000t_ctrl_reg = (unsigned short)0U;
  
#line 951 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  
#line 954 
  ret_val = (*(phy->ops.read_reg))(hw,4U,& mii_autoneg_adv_reg);
  
#line 955 
  if (ret_val != 0) 
#line 956 
                    goto out; else ;
  
#line 958 
  if (((int)phy->autoneg_mask & 32) != 0) {
    
#line 960 
    ret_val = (*(phy->ops.read_reg))(hw,9U,& mii_1000t_ctrl_reg);
    
#line 962 
    if (ret_val != 0) 
#line 963 
                      goto out; else ;
  }
  else ;
  
#line 977 
  mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 65055U);
  
#line 981 
  mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg & 64767U);
  {
    
#line 983 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "autoneg_advertised %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))983U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 983 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 983 
      ;
      
#line 983 
      tmp = igb_get_hw_dev(hw);
      
#line 983 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"autoneg_advertised %x\n",(int)phy->autoneg_advertised);
    }
    else ;
  }
  
#line 986 
  if (((int)phy->autoneg_advertised & 1) != 0) {
    {
      
#line 987 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Advertise 10mb Half duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))987U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 987 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 987 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 987 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Advertise 10mb Half duplex\n");
      }
      else ;
    }
    
#line 988 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 32U);
  }
  else ;
  
#line 992 
  if (((int)phy->autoneg_advertised & 2) != 0) {
    {
      
#line 993 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Advertise 10mb Full duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))993U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 993 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 993 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 993 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Advertise 10mb Full duplex\n");
      }
      else ;
    }
    
#line 994 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 64U);
  }
  else ;
  
#line 998 
  if (((int)phy->autoneg_advertised & 4) != 0) {
    {
      
#line 999 
      struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Advertise 100mb Half duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))999U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 999 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 999 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 999 
        __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_2,"Advertise 100mb Half duplex\n");
      }
      else ;
    }
    
#line 1000 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 128U);
  }
  else ;
  
#line 1004 
  if (((int)phy->autoneg_advertised & 8) != 0) {
    {
      
#line 1005 
      struct _ddebug descriptor_3 = {.modname = "igb", .function = "igb_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Advertise 100mb Full duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1005U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1005 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) {
        struct net_device *tmp_3;
        
#line 1005 
        tmp_3 = igb_get_hw_dev(hw);
        
#line 1005 
        __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)tmp_3,"Advertise 100mb Full duplex\n");
      }
      else ;
    }
    
#line 1006 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 256U);
  }
  else ;
  
#line 1010 
  if (((int)phy->autoneg_advertised & 16) != 0) {
    
#line 1011 
    struct _ddebug descriptor_4 = {.modname = "igb", .function = "igb_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Advertise 1000mb Half duplex request denied!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1011U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1011 
    if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) {
      struct net_device *tmp_4;
      
#line 1011 
      tmp_4 = igb_get_hw_dev(hw);
      
#line 1011 
      __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)tmp_4,"Advertise 1000mb Half duplex request denied!\n");
    }
    else ;
  }
  else ;
  
#line 1014 
  if (((int)phy->autoneg_advertised & 32) != 0) {
    {
      
#line 1015 
      struct _ddebug descriptor_5 = {.modname = "igb", .function = "igb_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Advertise 1000mb Full duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1015U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1015 
      if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) {
        struct net_device *tmp_5;
        
#line 1015 
        tmp_5 = igb_get_hw_dev(hw);
        
#line 1015 
        __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)tmp_5,"Advertise 1000mb Full duplex\n");
      }
      else ;
    }
    
#line 1016 
    mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg | 512U);
  }
  else ;
  
#line 1036 
  switch ((unsigned int)hw->fc.current_mode) {
    case (unsigned int)0: 
#line 1037 
    ;
    
#line 1041 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 62463U);
    
#line 1042 
    goto ldv_44241;
    case (unsigned int)1: 
#line 1043 
    ;
    
#line 1053 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    
#line 1054 
    goto ldv_44241;
    case (unsigned int)2: 
#line 1055 
    ;
    
#line 1059 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 2048U);
    
#line 1060 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 64511U);
    
#line 1061 
    goto ldv_44241;
    case (unsigned int)3: 
#line 1062 
    ;
    
#line 1066 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    
#line 1067 
    goto ldv_44241;
    default: 
#line 1068 
    ;
    {
      
#line 1069 
      struct _ddebug descriptor_6 = {.modname = "igb", .function = "igb_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Flow control param set incorrectly\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1069U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1069 
      if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) {
        struct net_device *tmp_6;
        
#line 1069 
        tmp_6 = igb_get_hw_dev(hw);
        
#line 1069 
        __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)tmp_6,"Flow control param set incorrectly\n");
      }
      else ;
    }
    
#line 1070 
    ret_val = -3;
    
#line 1071 
    goto out;
  }
  ldv_44241: 
#line 1074 
  ;
  
#line 1074 
  ret_val = (*(phy->ops.write_reg))(hw,4U,(unsigned short)((int)mii_autoneg_adv_reg));
  
#line 1075 
  if (ret_val != 0) 
#line 1076 
                    goto out; else ;
  {
    
#line 1078 
    struct _ddebug descriptor_7 = {.modname = "igb", .function = "igb_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Auto-Neg Advertising %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1078U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1078 
    if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) {
      struct net_device *tmp_7;
      
#line 1078 
      ;
      
#line 1078 
      tmp_7 = igb_get_hw_dev(hw);
      
#line 1078 
      __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)tmp_7,"Auto-Neg Advertising %x\n",(int)mii_autoneg_adv_reg);
    }
    else ;
  }
  
#line 1080 
  if (((int)phy->autoneg_mask & 32) != 0) {
    
#line 1081 
    ret_val = (*(phy->ops.write_reg))(hw,9U,(unsigned short)((int)mii_1000t_ctrl_reg));
    
#line 1084 
    if (ret_val != 0) 
#line 1085 
                      goto out; else ;
  }
  else ;
  out: 
#line 1088 
  ;
  
#line 1089 
  return ret_val;
}


#line 1101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_setup_copper_link(struct e1000_hw *hw)
{
  s32 ret_val;
  bool link;
  
#line 1106 
  if ((int)hw->mac.autoneg != 0) {
    
#line 1110 
    ret_val = igb_copper_link_autoneg(hw);
    
#line 1111 
    if (ret_val != 0) 
#line 1112 
                      goto out; else ;
  }
  else {
    {
      
#line 1117 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_setup_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Forcing Speed and Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1117U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1117 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1117 
        tmp = igb_get_hw_dev(hw);
        
#line 1117 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Forcing Speed and Duplex\n");
      }
      else ;
    }
    
#line 1118 
    ret_val = (*(hw->phy.ops.force_speed_duplex))(hw);
    
#line 1119 
    if (ret_val != 0) {
      {
        
#line 1120 
        struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_setup_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Error Forcing Speed and Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1120U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1120 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
          struct net_device *tmp_0;
          
#line 1120 
          tmp_0 = igb_get_hw_dev(hw);
          
#line 1120 
          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Error Forcing Speed and Duplex\n");
        }
        else ;
      }
      
#line 1121 
      goto out;
    }
    else ;
  }
  
#line 1128 
  ret_val = igb_phy_has_link(hw,10U,10U,& link);
  
#line 1129 
  if (ret_val != 0) 
#line 1130 
                    goto out; else ;
  
#line 1132 
  if ((int)link != 0) {
    {
      
#line 1133 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_setup_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Valid link established!!!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1133U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1133 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 1133 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 1133 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Valid link established!!!\n");
      }
      else ;
    }
    
#line 1134 
    igb_config_collision_dist(hw);
    
#line 1135 
    ret_val = igb_config_fc_after_link_up(hw);
  }
  else {
    
#line 1137 
    struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_setup_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Unable to establish link!!!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1137U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1137 
    if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
      struct net_device *tmp_2;
      
#line 1137 
      tmp_2 = igb_get_hw_dev(hw);
      
#line 1137 
      __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_2,"Unable to establish link!!!\n");
    }
    else ;
  }
  out: 
#line 1140 
  ;
  
#line 1141 
  return ret_val;
}


#line 1152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_force_speed_duplex_igp(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  bool link;
  
#line 1154 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1159 
  ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_data);
  
#line 1160 
  if (ret_val != 0) 
#line 1161 
                    goto out; else ;
  
#line 1163 
  igb_phy_force_speed_duplex_setup(hw,& phy_data);
  
#line 1165 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_data));
  
#line 1166 
  if (ret_val != 0) 
#line 1167 
                    goto out; else ;
  
#line 1172 
  ret_val = (*(phy->ops.read_reg))(hw,18U,& phy_data);
  
#line 1173 
  if (ret_val != 0) 
#line 1174 
                    goto out; else ;
  
#line 1176 
  phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
  
#line 1177 
  phy_data = (unsigned short)((unsigned int)phy_data & 57343U);
  
#line 1179 
  ret_val = (*(phy->ops.write_reg))(hw,18U,(unsigned short)((int)phy_data));
  
#line 1180 
  if (ret_val != 0) 
#line 1181 
                    goto out; else ;
  {
    
#line 1183 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_phy_force_speed_duplex_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "IGP PSCR: %X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1183U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1183 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 1183 
      ;
      
#line 1183 
      tmp = igb_get_hw_dev(hw);
      
#line 1183 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"IGP PSCR: %X\n",(int)phy_data);
    }
    else ;
  }
  
#line 1185 
  __const_udelay(4295UL);
  
#line 1187 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      
#line 1188 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_phy_force_speed_duplex_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Waiting for forced speed/duplex link on IGP phy.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1188U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1188 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 1188 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 1188 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Waiting for forced speed/duplex link on IGP phy.\n");
      }
      else ;
    }
    
#line 1190 
    ret_val = igb_phy_has_link(hw,20U,10000U,& link);
    
#line 1191 
    if (ret_val != 0) 
#line 1192 
                      goto out; else ;
    
#line 1194 
    if (! link) {
      
#line 1195 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_phy_force_speed_duplex_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Link taking longer than expected.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1195U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1195 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 1195 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 1195 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Link taking longer than expected.\n");
      }
      else ;
    }
    else ;
    
#line 1198 
    ret_val = igb_phy_has_link(hw,20U,10000U,& link);
    
#line 1199 
    if (ret_val != 0) 
#line 1200 
                      goto out; else ;
  }
  else ;
  out: 
#line 1203 
  ;
  
#line 1204 
  return ret_val;
}


#line 1217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_force_speed_duplex_m88(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  bool link;
  
#line 1219 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1225 
  if (phy->type != (unsigned int)e1000_phy_i210) {
    
#line 1229 
    ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
    
#line 1231 
    if (ret_val != 0) 
#line 1232 
                      goto out; else ;
    
#line 1234 
    phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
    
#line 1235 
    ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
    
#line 1237 
    if (ret_val != 0) 
#line 1238 
                      goto out; else ;
    {
      
#line 1240 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_phy_force_speed_duplex_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "M88E1000 PSCR: %X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1240U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1240 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1240 
        ;
        
#line 1240 
        tmp = igb_get_hw_dev(hw);
        
#line 1240 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"M88E1000 PSCR: %X\n",(int)phy_data);
      }
      else ;
    }
  }
  else ;
  
#line 1243 
  ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_data);
  
#line 1244 
  if (ret_val != 0) 
#line 1245 
                    goto out; else ;
  
#line 1247 
  igb_phy_force_speed_duplex_setup(hw,& phy_data);
  
#line 1249 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_data));
  
#line 1250 
  if (ret_val != 0) 
#line 1251 
                    goto out; else ;
  
#line 1254 
  ret_val = igb_phy_sw_reset(hw);
  
#line 1255 
  if (ret_val != 0) 
#line 1256 
                    goto out; else ;
  
#line 1258 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      
#line 1259 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_phy_force_speed_duplex_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Waiting for forced speed/duplex link on M88 phy.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1259U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1259 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 1259 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 1259 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Waiting for forced speed/duplex link on M88 phy.\n");
      }
      else ;
    }
    
#line 1261 
    ret_val = igb_phy_has_link(hw,20U,100000U,& link);
    
#line 1262 
    if (ret_val != 0) 
#line 1263 
                      goto out; else ;
    
#line 1265 
    if (! link) {
      
#line 1266 
      bool reset_dsp = (_Bool)1;
      
#line 1268 
      switch (hw->phy.id) {
        case (u32)21040576: 
#line 1269 
        ;
        case (u32)21040272: 
#line 1270 
        ;
        case (u32)21040128: 
#line 1271 
        ;
        
#line 1272 
        reset_dsp = (_Bool)0;
        
#line 1273 
        goto ldv_44286;
        default: 
#line 1274 
        ;
        
#line 1275 
        if (hw->phy.type != (unsigned int)e1000_phy_m88) 
#line 1276 
                                                         reset_dsp = (_Bool)0; else ;
        
#line 1277 
        goto ldv_44286;
      }
      ldv_44286: 
#line 1279 
      ;
      
#line 1279 
      if (! reset_dsp) {
        
#line 1280 
        struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_phy_force_speed_duplex_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Link taking longer than expected.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1280U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1280 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
          struct net_device *tmp_1;
          
#line 1280 
          tmp_1 = igb_get_hw_dev(hw);
          
#line 1280 
          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Link taking longer than expected.\n");
        }
        else ;
      }
      else {
        
#line 1285 
        ret_val = (*(phy->ops.write_reg))(hw,29U,(unsigned short)29);
        
#line 1288 
        if (ret_val != 0) 
#line 1289 
                          goto out; else ;
        
#line 1290 
        ret_val = igb_phy_reset_dsp(hw);
        
#line 1291 
        if (ret_val != 0) 
#line 1292 
                          goto out; else ;
      }
    }
    else ;
    
#line 1297 
    ret_val = igb_phy_has_link(hw,20U,100000U,& link);
    
#line 1299 
    if (ret_val != 0) 
#line 1300 
                      goto out; else ;
  }
  else ;
  
#line 1303 
  if (((hw->phy.type != (unsigned int)e1000_phy_m88 || hw->phy.id == 21040576U) || hw->phy.id == 21040272U) || hw->phy.id == 21040128U) 
    
#line 1307 
    goto out; else ;
  
#line 1309 
  ret_val = (*(phy->ops.read_reg))(hw,20U,& phy_data);
  
#line 1310 
  if (ret_val != 0) 
#line 1311 
                    goto out; else ;
  
#line 1317 
  phy_data = (unsigned short)((unsigned int)phy_data | 112U);
  
#line 1318 
  ret_val = (*(phy->ops.write_reg))(hw,20U,(unsigned short)((int)phy_data));
  
#line 1319 
  if (ret_val != 0) 
#line 1320 
                    goto out; else ;
  
#line 1325 
  ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
  
#line 1326 
  if (ret_val != 0) 
#line 1327 
                    goto out; else ;
  
#line 1329 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  
#line 1330 
  ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)phy_data));
  out: 
#line 1332 
  ;
  
#line 1333 
  return ret_val;
}


#line 1348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static void igb_phy_force_speed_duplex_setup(struct e1000_hw *hw, u16 *phy_ctrl)
{
  u32 ctrl;
  
#line 1351 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1355 
  hw->fc.current_mode = e1000_fc_none;
  
#line 1358 
  ctrl = igb_rd32(hw,0U);
  
#line 1359 
  ctrl |= 6144U;
  
#line 1360 
  ctrl &= 4294966527U;
  
#line 1363 
  ctrl &= 4294967263U;
  
#line 1366 
  *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 61439U);
  
#line 1369 
  if (((int)mac->forced_speed_duplex & 5) != 0) {
    
#line 1370 
    ctrl &= 4294967294U;
    
#line 1371 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 65279U);
    {
      
#line 1372 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_phy_force_speed_duplex_setup", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Half Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1372U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1372 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1372 
        tmp = igb_get_hw_dev(hw);
        
#line 1372 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Half Duplex\n");
      }
      else ;
    }
  }
  else {
    
#line 1374 
    ctrl |= 1U;
    
#line 1375 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl | 256U);
    {
      
#line 1376 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_phy_force_speed_duplex_setup", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Full Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1376U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1376 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 1376 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 1376 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Full Duplex\n");
      }
      else ;
    }
  }
  
#line 1380 
  if (((int)mac->forced_speed_duplex & 12) != 0) {
    
#line 1381 
    ctrl |= 256U;
    
#line 1382 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl | 8192U);
    
#line 1383 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 65471U);
    {
      
#line 1384 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_phy_force_speed_duplex_setup", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Forcing 100mb\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1384U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1384 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 1384 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 1384 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Forcing 100mb\n");
      }
      else ;
    }
  }
  else {
    
#line 1386 
    ctrl &= 4294966527U;
    
#line 1387 
    *phy_ctrl = *phy_ctrl;
    
#line 1388 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 57279U);
    {
      
#line 1389 
      struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_phy_force_speed_duplex_setup", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Forcing 10mb\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1389U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1389 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 1389 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 1389 
        __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_2,"Forcing 10mb\n");
      }
      else ;
    }
  }
  
#line 1392 
  igb_config_collision_dist(hw);
  {
    u8 * volatile *tmp_3;
    {
      
#line 1394 
      u8 *__var = (u8 *)0U;
      
#line 1394 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1394 
    u8 *hw_addr = *tmp_3;
    
#line 1394 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1394 
                                           writel(ctrl,(void volatile *)hw_addr); else ;
  }
  
#line 1396 
  return;
}


#line 1411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_set_d3_lplu_state(struct e1000_hw *hw, bool active)
{
  u16 data;
  
#line 1413 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1414 
  s32 ret_val = 0;
  
#line 1417 
  if (hw->phy.ops.read_reg == (s32 (*)(struct e1000_hw *, u32 , u16 *))0) 
    
#line 1418 
    goto out; else ;
  
#line 1420 
  ret_val = (*(phy->ops.read_reg))(hw,25U,& data);
  
#line 1421 
  if (ret_val != 0) 
#line 1422 
                    goto out; else ;
  
#line 1424 
  if (! active) {
    
#line 1425 
    data = (unsigned short)((unsigned int)data & 65531U);
    
#line 1426 
    ret_val = (*(phy->ops.write_reg))(hw,25U,(unsigned short)((int)data));
    
#line 1428 
    if (ret_val != 0) 
#line 1429 
                      goto out; else ;
    
#line 1435 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      
#line 1436 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      
#line 1439 
      if (ret_val != 0) 
#line 1440 
                        goto out; else ;
      
#line 1442 
      data = (unsigned short)((unsigned int)data | 128U);
      
#line 1443 
      ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
      
#line 1446 
      if (ret_val != 0) 
#line 1447 
                        goto out; else ;
    }
    else 
      
#line 1448 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        
#line 1449 
        ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
        
#line 1452 
        if (ret_val != 0) 
#line 1453 
                          goto out; else ;
        
#line 1455 
        data = (unsigned short)((unsigned int)data & 65407U);
        
#line 1456 
        ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
        
#line 1459 
        if (ret_val != 0) 
#line 1460 
                          goto out; else ;
      }
      else ;
  }
  else 
    
#line 1462 
    if (((unsigned int)phy->autoneg_advertised == 47U || (unsigned int)phy->autoneg_advertised == 15U) || (unsigned int)phy->autoneg_advertised == 3U) {
      
#line 1465 
      data = (unsigned short)((unsigned int)data | 4U);
      
#line 1466 
      ret_val = (*(phy->ops.write_reg))(hw,25U,(unsigned short)((int)data));
      
#line 1468 
      if (ret_val != 0) 
#line 1469 
                        goto out; else ;
      
#line 1472 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      
#line 1474 
      if (ret_val != 0) 
#line 1475 
                        goto out; else ;
      
#line 1477 
      data = (unsigned short)((unsigned int)data & 65407U);
      
#line 1478 
      ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
    }
    else ;
  out: 
#line 1482 
  ;
  
#line 1483 
  return ret_val;
}


#line 1494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_check_downshift(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  u16 offset;
  u16 mask;
  
#line 1496 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1500 
  switch ((unsigned int)phy->type) {
    case (unsigned int)9: 
#line 1501 
    ;
    case (unsigned int)2: 
#line 1502 
    ;
    case (unsigned int)5: 
#line 1503 
    ;
    
#line 1504 
    offset = (unsigned short)17U;
    
#line 1505 
    mask = (unsigned short)32U;
    
#line 1506 
    goto ldv_44322;
    case (unsigned int)4: 
#line 1507 
    ;
    case (unsigned int)3: 
#line 1508 
    ;
    case (unsigned int)6: 
#line 1509 
    ;
    
#line 1510 
    offset = (unsigned short)19U;
    
#line 1511 
    mask = (unsigned short)32768U;
    
#line 1512 
    goto ldv_44322;
    default: 
#line 1513 
    ;
    
#line 1515 
    phy->speed_downgraded = (_Bool)0;
    
#line 1516 
    ret_val = 0;
    
#line 1517 
    goto out;
  }
  ldv_44322: 
#line 1520 
  ;
  
#line 1520 
  ret_val = (*(phy->ops.read_reg))(hw,(unsigned int)offset,& phy_data);
  
#line 1522 
  if (ret_val == 0) 
#line 1523 
                    phy->speed_downgraded = (_Bool)((unsigned int)((int)phy_data & (int)mask) != 0U); else ;
  out: 
#line 1525 
  ;
  
#line 1526 
  return ret_val;
}


#line 1537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_check_polarity_m88(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 data;
  
#line 1539 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1543 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& data);
  
#line 1545 
  if (ret_val == 0) 
#line 1546 
                    phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 1) & 1); else ;
  
#line 1550 
  return ret_val;
}


#line 1562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_check_polarity_igp(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 data;
  u16 offset;
  u16 mask;
  
#line 1564 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1571 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& data);
  
#line 1572 
  if (ret_val != 0) 
#line 1573 
                    goto out; else ;
  
#line 1575 
  if (((int)data & 49152) == 49152) {
    
#line 1577 
    offset = (unsigned short)180U;
    
#line 1578 
    mask = (unsigned short)120U;
  }
  else {
    
#line 1583 
    offset = (unsigned short)17U;
    
#line 1584 
    mask = (unsigned short)2U;
  }
  
#line 1587 
  ret_val = (*(phy->ops.read_reg))(hw,(unsigned int)offset,& data);
  
#line 1589 
  if (ret_val == 0) 
#line 1590 
                    phy->cable_polarity = (enum e1000_rev_polarity)((unsigned int)((int)data & (int)mask) != 0U); else ;
  out: 
#line 1594 
  ;
  
#line 1595 
  return ret_val;
}


#line 1605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_wait_autoneg(struct e1000_hw *hw)
{
  u16 i;
  u16 phy_status;
  
#line 1607 
  s32 ret_val = 0;
  
#line 1611 
  i = (unsigned short)45U;
  
#line 1611 
  goto ldv_44351;
  ldv_44350: 
#line 1612 
  ;
  
#line 1612 
  ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
  
#line 1613 
  if (ret_val != 0) 
#line 1614 
                    goto ldv_44349; else ;
  
#line 1615 
  ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
  
#line 1616 
  if (ret_val != 0) 
#line 1617 
                    goto ldv_44349; else ;
  
#line 1618 
  if (((int)phy_status & 32) != 0) 
#line 1619 
                                   goto ldv_44349; else ;
  
#line 1620 
  msleep(100U);
  
#line 1611 
  i = (u16)((int)i - 1);
  ldv_44351: 
#line 1612 
  ;
  
#line 1611 
  if ((unsigned int)i != 0U) 
#line 1613 
                             goto ldv_44350; else 
#line 1616 
                                                  goto ldv_44349;
  ldv_44349: 
#line 1617 
  ;
  
#line 1626 
  return ret_val;
}


#line 1638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_has_link(struct e1000_hw *hw, u32 iterations, u32 usec_interval, bool *success)
{
  u16 i;
  u16 phy_status;
  
#line 1641 
  s32 ret_val = 0;
  
#line 1644 
  i = (unsigned short)0U;
  
#line 1644 
  goto ldv_44371;
  ldv_44370: 
#line 1645 
  ;
  
#line 1649 
  ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
  
#line 1650 
  if (ret_val != 0 && usec_interval != 0U) 
    
#line 1655 
    if (usec_interval > 999U) 
      
#line 1656 
      if (0 != 0 && usec_interval <= 5999U) 
        
#line 1656 
        if (0 != 0) 
          
#line 1656 
          if ((usec_interval / 1000U) * 1000U > 19999U) 
#line 1656 
                                                        __bad_udelay(); else 
                                                                    
#line 1656 
                                                                    __const_udelay((unsigned long)((usec_interval / 1000U) * 1000U) * 4295UL);
        else 
#line 1656 
             __udelay((unsigned long)((usec_interval / 1000U) * 1000U));
      else {
        
#line 1656 
        unsigned long __ms = (unsigned long)(usec_interval / 1000U);
        {
          unsigned long tmp;
          
#line 1656 
          goto ldv_44363;
          ldv_44362: 
#line 1657 
          ;
          
#line 1656 
          __const_udelay(4295000UL);
          ldv_44363: 
#line 1658 
          ;
          
#line 1656 
          tmp = __ms;
          
#line 1656 
          __ms -= 1UL;
          
#line 1656 
          ;
          
#line 1656 
          if (tmp != 0UL) 
#line 1658 
                          goto ldv_44362; else 
#line 1661 
                                               goto ldv_44364;
          ldv_44364: 
#line 1662 
          ;
        }
      }
    else 
      
#line 1658 
      if (0 != 0) 
        
#line 1658 
        if (usec_interval > 19999U) 
#line 1658 
                                    __bad_udelay(); else 
#line 1658 
                                                         __const_udelay((unsigned long)usec_interval * 4295UL);
      else 
#line 1658 
           __udelay((unsigned long)usec_interval);
  else ;
  
#line 1660 
  ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
  
#line 1661 
  if (ret_val != 0) 
#line 1662 
                    goto ldv_44365; else ;
  
#line 1663 
  if (((int)phy_status & 4) != 0) 
#line 1664 
                                  goto ldv_44365; else ;
  
#line 1665 
  if (usec_interval > 999U) 
    
#line 1666 
    if (0 != 0 && usec_interval <= 5999U) 
      
#line 1666 
      if (0 != 0) 
        
#line 1666 
        if ((usec_interval / 1000U) * 1000U > 19999U) 
#line 1666 
                                                      __bad_udelay(); else 
                                                                    
#line 1666 
                                                                    __const_udelay((unsigned long)((usec_interval / 1000U) * 1000U) * 4295UL);
      else 
#line 1666 
           __udelay((unsigned long)((usec_interval / 1000U) * 1000U));
    else {
      
#line 1666 
      unsigned long __ms_0 = (unsigned long)(usec_interval / 1000U);
      {
        unsigned long tmp_0;
        
#line 1666 
        goto ldv_44368;
        ldv_44367: 
#line 1667 
        ;
        
#line 1666 
        __const_udelay(4295000UL);
        ldv_44368: 
#line 1668 
        ;
        
#line 1666 
        tmp_0 = __ms_0;
        
#line 1666 
        __ms_0 -= 1UL;
        
#line 1666 
        ;
        
#line 1666 
        if (tmp_0 != 0UL) 
#line 1668 
                          goto ldv_44367; else 
#line 1671 
                                               goto ldv_44369;
        ldv_44369: 
#line 1672 
        ;
      }
    }
  else 
    
#line 1668 
    if (0 != 0) 
      
#line 1668 
      if (usec_interval > 19999U) 
#line 1668 
                                  __bad_udelay(); else 
#line 1668 
                                                       __const_udelay((unsigned long)usec_interval * 4295UL);
    else 
#line 1668 
         __udelay((unsigned long)usec_interval);
  
#line 1644 
  i = (u16)((int)i + 1);
  ldv_44371: 
#line 1645 
  ;
  
#line 1644 
  if ((unsigned int)i < iterations) 
#line 1646 
                                    goto ldv_44370; else 
#line 1649 
                                                         goto ldv_44365;
  ldv_44365: 
#line 1650 
  ;
  
#line 1671 
  *success = (_Bool)((unsigned int)i < iterations);
  
#line 1673 
  return ret_val;
}


#line 1691  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_cable_length_m88(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  u16 index;
  
#line 1693 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1697 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& phy_data);
  
#line 1698 
  if (ret_val != 0) 
#line 1699 
                    goto out; else ;
  
#line 1701 
  index = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 7)) & 7U);
  
#line 1703 
  if ((unsigned int)index > 5U) {
    
#line 1704 
    ret_val = -2;
    
#line 1705 
    goto out;
  }
  else ;
  
#line 1708 
  phy->min_cable_length = e1000_m88_cable_length_table[(int)index];
  
#line 1709 
  phy->max_cable_length = e1000_m88_cable_length_table[(int)index + 1];
  
#line 1711 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  out: 
#line 1713 
  ;
  
#line 1714 
  return ret_val;
}


#line 1717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_cable_length_m88_gen2(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  u16 phy_data2;
  u16 index;
  u16 default_page;
  u16 is_cm;
  
#line 1719 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1723 
  switch (hw->phy.id) {
    int tmp;
    int tmp_0;
    int tmp_1;
    int tmp_2;
    int tmp_3;
    int tmp_4;
    case (u32)21040128: 
#line 1724 
    ;
    
#line 1726 
    ret_val = (*(phy->ops.read_reg))(hw,phy->addr + 458768U,& phy_data);
    
#line 1729 
    if (ret_val != 0) {
      
#line 1730 
      __retres = ret_val;
      
#line 1730 
      goto return_label;
    }
    else ;
    
#line 1733 
    ret_val = (*(phy->ops.read_reg))(hw,458773U,& phy_data2);
    
#line 1735 
    if (ret_val != 0) {
      
#line 1736 
      __retres = ret_val;
      
#line 1736 
      goto return_label;
    }
    else ;
    
#line 1738 
    is_cm = (unsigned short)(((int)phy_data2 & 1024) == 0);
    
#line 1741 
    if ((unsigned int)is_cm != 0U) 
#line 1741 
                                   tmp = 100; else 
#line 1741 
                                                   tmp = 1;
    
#line 1741 
    phy->min_cable_length = (unsigned short)((int)phy_data / tmp);
    
#line 1742 
    if ((unsigned int)is_cm != 0U) 
#line 1742 
                                   tmp_0 = 100; else 
#line 1742 
                                                     tmp_0 = 1;
    
#line 1742 
    phy->max_cable_length = (unsigned short)((int)phy_data / tmp_0);
    
#line 1743 
    if ((unsigned int)is_cm != 0U) 
#line 1743 
                                   tmp_1 = 100; else 
#line 1743 
                                                     tmp_1 = 1;
    
#line 1743 
    phy->cable_length = (unsigned short)((int)phy_data / tmp_1);
    
#line 1744 
    goto ldv_44391;
    case (u32)21040800: 
#line 1745 
    ;
    case (u32)21040576: 
#line 1746 
    ;
    
#line 1748 
    ret_val = (*(phy->ops.read_reg))(hw,22U,& default_page);
    
#line 1750 
    if (ret_val != 0) 
#line 1751 
                      goto out; else ;
    
#line 1753 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)7);
    
#line 1754 
    if (ret_val != 0) 
#line 1755 
                      goto out; else ;
    
#line 1758 
    ret_val = (*(phy->ops.read_reg))(hw,phy->addr + 16U,& phy_data);
    
#line 1760 
    if (ret_val != 0) 
#line 1761 
                      goto out; else ;
    
#line 1764 
    ret_val = (*(phy->ops.read_reg))(hw,21U,& phy_data2);
    
#line 1765 
    if (ret_val != 0) 
#line 1766 
                      goto out; else ;
    
#line 1768 
    is_cm = (unsigned short)(((int)phy_data2 & 1024) == 0);
    
#line 1771 
    if ((unsigned int)is_cm != 0U) 
#line 1771 
                                   tmp_2 = 100; else 
#line 1771 
                                                     tmp_2 = 1;
    
#line 1771 
    phy->min_cable_length = (unsigned short)((int)phy_data / tmp_2);
    
#line 1772 
    if ((unsigned int)is_cm != 0U) 
#line 1772 
                                   tmp_3 = 100; else 
#line 1772 
                                                     tmp_3 = 1;
    
#line 1772 
    phy->max_cable_length = (unsigned short)((int)phy_data / tmp_3);
    
#line 1773 
    if ((unsigned int)is_cm != 0U) 
#line 1773 
                                   tmp_4 = 100; else 
#line 1773 
                                                     tmp_4 = 1;
    
#line 1773 
    phy->cable_length = (unsigned short)((int)phy_data / tmp_4);
    
#line 1776 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)((int)default_page));
    
#line 1778 
    if (ret_val != 0) 
#line 1779 
                      goto out; else ;
    
#line 1780 
    goto ldv_44391;
    case (u32)21040272: 
#line 1781 
    ;
    
#line 1783 
    ret_val = (*(phy->ops.read_reg))(hw,22U,& default_page);
    
#line 1785 
    if (ret_val != 0) 
#line 1786 
                      goto out; else ;
    
#line 1788 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)5);
    
#line 1789 
    if (ret_val != 0) 
#line 1790 
                      goto out; else ;
    
#line 1792 
    ret_val = (*(phy->ops.read_reg))(hw,26U,& phy_data);
    
#line 1794 
    if (ret_val != 0) 
#line 1795 
                      goto out; else ;
    
#line 1797 
    index = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 7)) & 7U);
    
#line 1799 
    if ((unsigned int)index > 5U) {
      
#line 1800 
      ret_val = -2;
      
#line 1801 
      goto out;
    }
    else ;
    
#line 1804 
    phy->min_cable_length = e1000_m88_cable_length_table[(int)index];
    
#line 1805 
    phy->max_cable_length = e1000_m88_cable_length_table[(int)index + 1];
    
#line 1807 
    phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
    
#line 1811 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)((int)default_page));
    
#line 1813 
    if (ret_val != 0) 
#line 1814 
                      goto out; else ;
    
#line 1816 
    goto ldv_44391;
    default: 
#line 1817 
    ;
    
#line 1818 
    ret_val = -2;
    
#line 1819 
    goto out;
  }
  ldv_44391: 
#line 1822 
  ;
  out: 
#line 1822 
  ;
  
#line 1823 
  __retres = ret_val;
  return_label: 
#line 1823 
                return __retres;
}


#line 1837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_cable_length_igp_2(struct e1000_hw *hw)
{
  u16 phy_data;
  u16 i;
  u16 cur_agc_index;
  int tmp;
  
#line 1839 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1840 
  s32 ret_val = 0;
  
#line 1841 
  u16 agc_value = (unsigned short)0U;
  
#line 1842 
  u16 max_agc_index = (unsigned short)0U;
  
#line 1843 
  u16 min_agc_index = (unsigned short)112U;
  
#line 1844 
  u16 const agc_reg_array[4U] = {(unsigned short)4529U, (unsigned short)4785U, (unsigned short)5297U, (unsigned short)6321U};
  
#line 1852 
  i = (unsigned short)0U;
  
#line 1852 
  goto ldv_44411;
  ldv_44410: 
#line 1853 
  ;
  
#line 1853 
  ret_val = (*(phy->ops.read_reg))(hw,(unsigned int)agc_reg_array[(int)i],& phy_data);
  
#line 1854 
  if (ret_val != 0) 
#line 1855 
                    goto out; else ;
  
#line 1862 
  cur_agc_index = (unsigned short)((int)phy_data >> 9);
  
#line 1866 
  if ((unsigned int)cur_agc_index + 65535U > 111U) {
    
#line 1868 
    ret_val = -2;
    
#line 1869 
    goto out;
  }
  else ;
  
#line 1873 
  if ((int)e1000_igp_2_cable_length_table[(int)min_agc_index] > (int)e1000_igp_2_cable_length_table[(int)cur_agc_index]) 
    
#line 1875 
    min_agc_index = cur_agc_index; else ;
  
#line 1876 
  if ((int)e1000_igp_2_cable_length_table[(int)max_agc_index] < (int)e1000_igp_2_cable_length_table[(int)cur_agc_index]) 
    
#line 1878 
    max_agc_index = cur_agc_index; else ;
  
#line 1880 
  agc_value = (unsigned short)((int)e1000_igp_2_cable_length_table[(int)cur_agc_index] + (int)agc_value);
  
#line 1852 
  i = (u16)((int)i + 1);
  ldv_44411: 
#line 1853 
  ;
  
#line 1852 
  if ((unsigned int)i <= 3U) 
#line 1854 
                             goto ldv_44410; else 
#line 1857 
                                                  goto ldv_44412;
  ldv_44412: 
#line 1858 
  ;
  
#line 1883 
  agc_value = (unsigned short)((int)agc_value - ((int)e1000_igp_2_cable_length_table[(int)min_agc_index] + (int)e1000_igp_2_cable_length_table[(int)max_agc_index]));
  
#line 1885 
  agc_value = (unsigned short)((unsigned int)agc_value / 2U);
  
#line 1888 
  if (0 > (int)agc_value + -15) 
#line 1888 
                                tmp = 0; else 
#line 1888 
                                              tmp = (int)agc_value + -15;
  
#line 1888 
  phy->min_cable_length = (unsigned short)tmp;
  
#line 1890 
  phy->max_cable_length = (unsigned short)((unsigned int)agc_value + 15U);
  
#line 1892 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  out: 
#line 1894 
  ;
  
#line 1895 
  return ret_val;
}


#line 1908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_phy_info_m88(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  bool link;
  
#line 1910 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1915 
  if (phy->media_type != (unsigned int)e1000_media_type_copper) {
    {
      
#line 1916 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_phy_info_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Phy info is only valid for copper media\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1916U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1916 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1916 
        tmp = igb_get_hw_dev(hw);
        
#line 1916 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Phy info is only valid for copper media\n");
      }
      else ;
    }
    
#line 1917 
    ret_val = -3;
    
#line 1918 
    goto out;
  }
  else ;
  
#line 1921 
  ret_val = igb_phy_has_link(hw,1U,0U,& link);
  
#line 1922 
  if (ret_val != 0) 
#line 1923 
                    goto out; else ;
  
#line 1925 
  if (! link) {
    {
      
#line 1926 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_get_phy_info_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Phy info is only valid if link is up\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1926U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1926 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 1926 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 1926 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Phy info is only valid if link is up\n");
      }
      else ;
    }
    
#line 1927 
    ret_val = -3;
    
#line 1928 
    goto out;
  }
  else ;
  
#line 1931 
  ret_val = (*(phy->ops.read_reg))(hw,16U,& phy_data);
  
#line 1932 
  if (ret_val != 0) 
#line 1933 
                    goto out; else ;
  
#line 1935 
  phy->polarity_correction = (_Bool)((((int)phy_data >> 1) & 1) != 0);
  
#line 1938 
  ret_val = igb_check_polarity_m88(hw);
  
#line 1939 
  if (ret_val != 0) 
#line 1940 
                    goto out; else ;
  
#line 1942 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& phy_data);
  
#line 1943 
  if (ret_val != 0) 
#line 1944 
                    goto out; else ;
  
#line 1946 
  phy->is_mdix = (_Bool)((((int)phy_data >> 6) & 1) != 0);
  
#line 1948 
  if (((int)phy_data & 49152) == 32768) {
    
#line 1949 
    ret_val = (*(phy->ops.get_cable_length))(hw);
    
#line 1950 
    if (ret_val != 0) 
#line 1951 
                      goto out; else ;
    
#line 1953 
    ret_val = (*(phy->ops.read_reg))(hw,10U,& phy_data);
    
#line 1954 
    if (ret_val != 0) 
#line 1955 
                      goto out; else ;
    
#line 1957 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)phy_data >> 13) & 1);
    
#line 1961 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)phy_data >> 12) & 1);
  }
  else {
    
#line 1966 
    phy->cable_length = (unsigned short)255U;
    
#line 1967 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    
#line 1968 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  out: 
#line 1971 
  ;
  
#line 1972 
  return ret_val;
}


#line 1984  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_phy_info_igp(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 data;
  bool link;
  
#line 1986 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1991 
  ret_val = igb_phy_has_link(hw,1U,0U,& link);
  
#line 1992 
  if (ret_val != 0) 
#line 1993 
                    goto out; else ;
  
#line 1995 
  if (! link) {
    {
      
#line 1996 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_phy_info_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Phy info is only valid if link is up\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1996U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1996 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1996 
        tmp = igb_get_hw_dev(hw);
        
#line 1996 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Phy info is only valid if link is up\n");
      }
      else ;
    }
    
#line 1997 
    ret_val = -3;
    
#line 1998 
    goto out;
  }
  else ;
  
#line 2001 
  phy->polarity_correction = (_Bool)1;
  
#line 2003 
  ret_val = igb_check_polarity_igp(hw);
  
#line 2004 
  if (ret_val != 0) 
#line 2005 
                    goto out; else ;
  
#line 2007 
  ret_val = (*(phy->ops.read_reg))(hw,17U,& data);
  
#line 2008 
  if (ret_val != 0) 
#line 2009 
                    goto out; else ;
  
#line 2011 
  phy->is_mdix = (_Bool)((((int)data >> 11) & 1) != 0);
  
#line 2013 
  if (((int)data & 49152) == 49152) {
    
#line 2015 
    ret_val = (*(phy->ops.get_cable_length))(hw);
    
#line 2016 
    if (ret_val != 0) 
#line 2017 
                      goto out; else ;
    
#line 2019 
    ret_val = (*(phy->ops.read_reg))(hw,10U,& data);
    
#line 2020 
    if (ret_val != 0) 
#line 2021 
                      goto out; else ;
    
#line 2023 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)data >> 13) & 1);
    
#line 2027 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)data >> 12) & 1);
  }
  else {
    
#line 2031 
    phy->cable_length = (unsigned short)255U;
    
#line 2032 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    
#line 2033 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  out: 
#line 2036 
  ;
  
#line 2037 
  return ret_val;
}


#line 2047  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_sw_reset(struct e1000_hw *hw)
{
  u16 phy_ctrl;
  
#line 2049 
  s32 ret_val = 0;
  
#line 2052 
  if (hw->phy.ops.read_reg == (s32 (*)(struct e1000_hw *, u32 , u16 *))0) 
    
#line 2053 
    goto out; else ;
  
#line 2055 
  ret_val = (*(hw->phy.ops.read_reg))(hw,0U,& phy_ctrl);
  
#line 2056 
  if (ret_val != 0) 
#line 2057 
                    goto out; else ;
  
#line 2059 
  phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 32768U);
  
#line 2060 
  ret_val = (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)((int)phy_ctrl));
  
#line 2061 
  if (ret_val != 0) 
#line 2062 
                    goto out; else ;
  
#line 2064 
  __const_udelay(4295UL);
  out: 
#line 2066 
  ;
  
#line 2067 
  return ret_val;
}


#line 2079  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_hw_reset(struct e1000_hw *hw)
{
  s32 ret_val;
  u32 ctrl;
  
#line 2081 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2085 
  ret_val = igb_check_reset_block(hw);
  
#line 2086 
  if (ret_val != 0) {
    
#line 2087 
    ret_val = 0;
    
#line 2088 
    goto out;
  }
  else ;
  
#line 2091 
  ret_val = (*(phy->ops.acquire))(hw);
  
#line 2092 
  if (ret_val != 0) 
#line 2093 
                    goto out; else ;
  
#line 2095 
  ctrl = igb_rd32(hw,0U);
  {
    u8 * volatile *tmp;
    {
      
#line 2096 
      u8 *__var = (u8 *)0U;
      
#line 2096 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2096 
    u8 *hw_addr = *tmp;
    
#line 2096 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2096 
                                           writel(ctrl | 2147483648U,(void volatile *)hw_addr); else ;
  }
  
#line 2097 
  igb_rd32(hw,8U);
  
#line 2099 
  if (0 != 0) 
    
#line 2099 
    if (phy->reset_delay_us > 19999U) 
#line 2099 
                                      __bad_udelay(); else 
#line 2099 
                                                           __const_udelay((unsigned long)phy->reset_delay_us * 4295UL);
  else 
#line 2099 
       __udelay((unsigned long)phy->reset_delay_us);
  {
    u8 * volatile *tmp_0;
    {
      
#line 2101 
      u8 *__var_0 = (u8 *)0U;
      
#line 2101 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2101 
    u8 *hw_addr_0 = *tmp_0;
    
#line 2101 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 2101 
                                             writel(ctrl,(void volatile *)hw_addr_0); else ;
  }
  
#line 2102 
  igb_rd32(hw,8U);
  
#line 2104 
  __const_udelay(644250UL);
  
#line 2106 
  (*(phy->ops.release))(hw);
  
#line 2108 
  ret_val = (*(phy->ops.get_cfg_done))(hw);
  out: 
#line 2110 
  ;
  
#line 2111 
  return ret_val;
}


#line 2120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_init_script_igp3(struct e1000_hw *hw)
{
  s32 __retres;
  {
    
#line 2122 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_phy_init_script_igp3", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Running IGP 3 PHY init script\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2122U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2122 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 2122 
      tmp = igb_get_hw_dev(hw);
      
#line 2122 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Running IGP 3 PHY init script\n");
    }
    else ;
  }
  
#line 2126 
  (*(hw->phy.ops.write_reg))(hw,12123U,(unsigned short)36888);
  
#line 2128 
  (*(hw->phy.ops.write_reg))(hw,12114U,(unsigned short)0);
  
#line 2130 
  (*(hw->phy.ops.write_reg))(hw,12209U,(unsigned short)35620);
  
#line 2132 
  (*(hw->phy.ops.write_reg))(hw,12210U,(unsigned short)63728);
  
#line 2134 
  (*(hw->phy.ops.write_reg))(hw,8208U,(unsigned short)4272);
  
#line 2136 
  (*(hw->phy.ops.write_reg))(hw,8209U,(unsigned short)0);
  
#line 2138 
  (*(hw->phy.ops.write_reg))(hw,8413U,(unsigned short)9370);
  
#line 2140 
  (*(hw->phy.ops.write_reg))(hw,8414U,(unsigned short)211);
  
#line 2142 
  (*(hw->phy.ops.write_reg))(hw,10420U,(unsigned short)1230);
  
#line 2144 
  (*(hw->phy.ops.write_reg))(hw,12144U,(unsigned short)10724);
  
#line 2146 
  (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)320);
  
#line 2148 
  (*(hw->phy.ops.write_reg))(hw,7984U,(unsigned short)5638);
  
#line 2150 
  (*(hw->phy.ops.write_reg))(hw,7985U,(unsigned short)47124);
  
#line 2152 
  (*(hw->phy.ops.write_reg))(hw,7989U,(unsigned short)42);
  
#line 2154 
  (*(hw->phy.ops.write_reg))(hw,7998U,(unsigned short)103);
  
#line 2156 
  (*(hw->phy.ops.write_reg))(hw,8020U,(unsigned short)101);
  
#line 2158 
  (*(hw->phy.ops.write_reg))(hw,8021U,(unsigned short)42);
  
#line 2160 
  (*(hw->phy.ops.write_reg))(hw,8022U,(unsigned short)42);
  
#line 2162 
  (*(hw->phy.ops.write_reg))(hw,8050U,(unsigned short)16304);
  
#line 2164 
  (*(hw->phy.ops.write_reg))(hw,8054U,(unsigned short)49407);
  
#line 2166 
  (*(hw->phy.ops.write_reg))(hw,8055U,(unsigned short)7660);
  
#line 2168 
  (*(hw->phy.ops.write_reg))(hw,8056U,(unsigned short)63983);
  
#line 2170 
  (*(hw->phy.ops.write_reg))(hw,8057U,(unsigned short)528);
  
#line 2172 
  (*(hw->phy.ops.write_reg))(hw,6293U,(unsigned short)3);
  
#line 2174 
  (*(hw->phy.ops.write_reg))(hw,6038U,(unsigned short)8);
  
#line 2176 
  (*(hw->phy.ops.write_reg))(hw,6040U,(unsigned short)53256);
  
#line 2180 
  (*(hw->phy.ops.write_reg))(hw,6296U,(unsigned short)55576);
  
#line 2182 
  (*(hw->phy.ops.write_reg))(hw,6266U,(unsigned short)2048);
  
#line 2186 
  (*(hw->phy.ops.write_reg))(hw,25U,(unsigned short)141);
  
#line 2188 
  (*(hw->phy.ops.write_reg))(hw,27U,(unsigned short)8320);
  
#line 2190 
  (*(hw->phy.ops.write_reg))(hw,20U,(unsigned short)69);
  
#line 2192 
  (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)4928);
  
#line 2194 
  __retres = 0;
  
#line 2194 
  return __retres;
}


#line 2204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
void igb_power_up_phy_copper(struct e1000_hw *hw)
{
  
#line 2206 
  u16 mii_reg = (unsigned short)0U;
  
#line 2209 
  (*(hw->phy.ops.read_reg))(hw,0U,& mii_reg);
  
#line 2210 
  mii_reg = (unsigned short)((unsigned int)mii_reg & 63487U);
  
#line 2211 
  (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)((int)mii_reg));
  
#line 2212 
  return;
}


#line 2221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
void igb_power_down_phy_copper(struct e1000_hw *hw)
{
  
#line 2223 
  u16 mii_reg = (unsigned short)0U;
  
#line 2226 
  (*(hw->phy.ops.read_reg))(hw,0U,& mii_reg);
  
#line 2227 
  mii_reg = (unsigned short)((unsigned int)mii_reg | 2048U);
  
#line 2228 
  (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)((int)mii_reg));
  
#line 2229 
  usleep_range(1000UL,2000UL);
  
#line 2230 
  return;
}


#line 2240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_check_polarity_82580(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 data;
  
#line 2242 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2247 
  ret_val = (*(phy->ops.read_reg))(hw,26U,& data);
  
#line 2249 
  if (ret_val == 0) 
#line 2250 
                    phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 10) & 1); else ;
  
#line 2254 
  return ret_val;
}


#line 2265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_phy_force_speed_duplex_82580(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  bool link;
  
#line 2267 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2272 
  ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_data);
  
#line 2273 
  if (ret_val != 0) 
#line 2274 
                    goto out; else ;
  
#line 2276 
  igb_phy_force_speed_duplex_setup(hw,& phy_data);
  
#line 2278 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_data));
  
#line 2279 
  if (ret_val != 0) 
#line 2280 
                    goto out; else ;
  
#line 2285 
  ret_val = (*(phy->ops.read_reg))(hw,18U,& phy_data);
  
#line 2286 
  if (ret_val != 0) 
#line 2287 
                    goto out; else ;
  
#line 2289 
  phy_data = (unsigned short)((unsigned int)phy_data & 63999U);
  
#line 2291 
  ret_val = (*(phy->ops.write_reg))(hw,18U,(unsigned short)((int)phy_data));
  
#line 2292 
  if (ret_val != 0) 
#line 2293 
                    goto out; else ;
  {
    
#line 2295 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_phy_force_speed_duplex_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "I82580_PHY_CTRL_2: %X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2295U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2295 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 2295 
      ;
      
#line 2295 
      tmp = igb_get_hw_dev(hw);
      
#line 2295 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"I82580_PHY_CTRL_2: %X\n",(int)phy_data);
    }
    else ;
  }
  
#line 2297 
  __const_udelay(4295UL);
  
#line 2299 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      
#line 2300 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_phy_force_speed_duplex_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Waiting for forced speed/duplex link on 82580 phy\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2300U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2300 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 2300 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 2300 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Waiting for forced speed/duplex link on 82580 phy\n");
      }
      else ;
    }
    
#line 2302 
    ret_val = igb_phy_has_link(hw,20U,100000U,& link);
    
#line 2303 
    if (ret_val != 0) 
#line 2304 
                      goto out; else ;
    
#line 2306 
    if (! link) {
      
#line 2307 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_phy_force_speed_duplex_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Link taking longer than expected.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2307U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2307 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 2307 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 2307 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Link taking longer than expected.\n");
      }
      else ;
    }
    else ;
    
#line 2310 
    ret_val = igb_phy_has_link(hw,20U,100000U,& link);
    
#line 2311 
    if (ret_val != 0) 
#line 2312 
                      goto out; else ;
  }
  else ;
  out: 
#line 2315 
  ;
  
#line 2316 
  return ret_val;
}


#line 2328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_phy_info_82580(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 data;
  bool link;
  
#line 2330 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2335 
  ret_val = igb_phy_has_link(hw,1U,0U,& link);
  
#line 2336 
  if (ret_val != 0) 
#line 2337 
                    goto out; else ;
  
#line 2339 
  if (! link) {
    {
      
#line 2340 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_phy_info_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c", .format = "Phy info is only valid if link is up\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2340U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2340 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 2340 
        tmp = igb_get_hw_dev(hw);
        
#line 2340 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Phy info is only valid if link is up\n");
      }
      else ;
    }
    
#line 2341 
    ret_val = -3;
    
#line 2342 
    goto out;
  }
  else ;
  
#line 2345 
  phy->polarity_correction = (_Bool)1;
  
#line 2347 
  ret_val = igb_check_polarity_82580(hw);
  
#line 2348 
  if (ret_val != 0) 
#line 2349 
                    goto out; else ;
  
#line 2351 
  ret_val = (*(phy->ops.read_reg))(hw,26U,& data);
  
#line 2352 
  if (ret_val != 0) 
#line 2353 
                    goto out; else ;
  
#line 2355 
  phy->is_mdix = (_Bool)((((int)data >> 11) & 1) != 0);
  
#line 2357 
  if (((int)data & 768) == 512) {
    
#line 2359 
    ret_val = (*(hw->phy.ops.get_cable_length))(hw);
    
#line 2360 
    if (ret_val != 0) 
#line 2361 
                      goto out; else ;
    
#line 2363 
    ret_val = (*(phy->ops.read_reg))(hw,10U,& data);
    
#line 2364 
    if (ret_val != 0) 
#line 2365 
                      goto out; else ;
    
#line 2367 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)data >> 13) & 1);
    
#line 2371 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)data >> 12) & 1);
  }
  else {
    
#line 2375 
    phy->cable_length = (unsigned short)255U;
    
#line 2376 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    
#line 2377 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  out: 
#line 2380 
  ;
  
#line 2381 
  return ret_val;
}


#line 2391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_get_cable_length_82580(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  u16 length;
  
#line 2393 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2397 
  ret_val = (*(phy->ops.read_reg))(hw,31U,& phy_data);
  
#line 2398 
  if (ret_val != 0) 
#line 2399 
                    goto out; else ;
  
#line 2401 
  length = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 2)) & 255U);
  
#line 2404 
  if ((unsigned int)length == 255U) 
#line 2405 
                                    ret_val = -2; else ;
  
#line 2407 
  phy->cable_length = length;
  out: 
#line 2409 
  ;
  
#line 2410 
  return ret_val;
}


#line 2423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_write_phy_reg_gs40g(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 __retres;
  s32 ret_val;
  
#line 2426 
  u16 page = (unsigned short)(offset >> 16);
  
#line 2428 
  offset &= 65535U;
  
#line 2429 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2430 
  if (ret_val != 0) {
    
#line 2431 
    __retres = ret_val;
    
#line 2431 
    goto return_label;
  }
  else ;
  
#line 2433 
  ret_val = igb_write_phy_reg_mdic(hw,22U,(unsigned short)((int)page));
  
#line 2434 
  if (ret_val != 0) 
#line 2435 
                    goto release; else ;
  
#line 2436 
  ret_val = igb_write_phy_reg_mdic(hw,offset,(unsigned short)((int)data));
  release: 
#line 2438 
  ;
  
#line 2439 
  (*(hw->phy.ops.release))(hw);
  
#line 2440 
  __retres = ret_val;
  return_label: 
#line 2440 
                return __retres;
}


#line 2453  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
s32 igb_read_phy_reg_gs40g(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 __retres;
  s32 ret_val;
  
#line 2456 
  u16 page = (unsigned short)(offset >> 16);
  
#line 2458 
  offset &= 65535U;
  
#line 2459 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2460 
  if (ret_val != 0) {
    
#line 2461 
    __retres = ret_val;
    
#line 2461 
    goto return_label;
  }
  else ;
  
#line 2463 
  ret_val = igb_write_phy_reg_mdic(hw,22U,(unsigned short)((int)page));
  
#line 2464 
  if (ret_val != 0) 
#line 2465 
                    goto release; else ;
  
#line 2466 
  ret_val = igb_read_phy_reg_mdic(hw,offset,data);
  release: 
#line 2468 
  ;
  
#line 2469 
  (*(hw->phy.ops.release))(hw);
  
#line 2470 
  __retres = ret_val;
  return_label: 
#line 2470 
                return __retres;
}


#line 2479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_phy.c"
static s32 igb_set_master_slave_mode(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  int tmp_0;
  s32 tmp_1;
  
#line 2485 
  ret_val = (*(hw->phy.ops.read_reg))(hw,9U,& phy_data);
  
#line 2486 
  if (ret_val != 0) {
    
#line 2487 
    __retres = ret_val;
    
#line 2487 
    goto return_label;
  }
  else ;
  
#line 2493 
  if (((int)phy_data & 4096) != 0) {
    int tmp;
    
#line 2490 
    if (((int)phy_data & 2048) != 0) 
#line 2490 
                                     tmp = 1; else 
#line 2490 
                                                   tmp = 2;
    
#line 2493 
    tmp_0 = tmp;
  }
  else 
#line 2493 
       tmp_0 = 3;
  
#line 2490 
  hw->phy.original_ms_type = (enum e1000_ms_type)tmp_0;
  
#line 2495 
  switch ((unsigned int)hw->phy.ms_type) {
    case (unsigned int)1: 
#line 2496 
    ;
    
#line 2497 
    phy_data = (unsigned short)((unsigned int)phy_data | 6144U);
    
#line 2498 
    goto ldv_44524;
    case (unsigned int)2: 
#line 2499 
    ;
    
#line 2500 
    phy_data = (unsigned short)((unsigned int)phy_data | 4096U);
    
#line 2501 
    phy_data = (unsigned short)((unsigned int)phy_data & 63487U);
    
#line 2502 
    goto ldv_44524;
    case (unsigned int)3: 
#line 2503 
    ;
    
#line 2504 
    phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
    default: 
#line 2506 
    ;
    
#line 2507 
    goto ldv_44524;
  }
  ldv_44524: 
#line 2510 
  ;
  
#line 2510 
  tmp_1 = (*(hw->phy.ops.write_reg))(hw,9U,(unsigned short)((int)phy_data));
  
#line 2510 
  __retres = tmp_1;
  return_label: 
#line 2510 
                return __retres;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.h"
s32 igb_read_nvm_eerd(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);


#line 36 
s32 igb_validate_nvm_checksum(struct e1000_hw *hw);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.h"
s32 igb_acquire_swfw_sync_i210(struct e1000_hw *hw, u16 mask);


#line 28 
void igb_release_swfw_sync_i210(struct e1000_hw *hw, u16 mask);


#line 29 
s32 igb_valid_led_default_i210(struct e1000_hw *hw, u16 *data);


#line 30 
s32 igb_read_invm_version(struct e1000_hw *hw, struct e1000_fw_version *invm_ver);


#line 32 
s32 igb_read_xmdio_reg(struct e1000_hw *hw, u16 addr, u8 dev_addr, u16 *data);


#line 33 
s32 igb_write_xmdio_reg(struct e1000_hw *hw, u16 addr, u8 dev_addr, u16 data);


#line 34 
s32 igb_init_nvm_params_i210(struct e1000_hw *hw);


#line 35 
bool igb_get_flash_presence_i210(struct e1000_hw *hw);


#line 36 
s32 igb_pll_workaround_i210(struct e1000_hw *hw);


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.h"
void igb_put_hw_semaphore(struct e1000_hw *hw);


#line 566  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
void igb_read_pci_cfg(struct e1000_hw *hw, u32 reg, u16 *value);


#line 567 
void igb_write_pci_cfg(struct e1000_hw *hw, u32 reg, u16 *value);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_update_flash_i210(struct e1000_hw *hw);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_get_hw_semaphore_i210(struct e1000_hw *hw)
{
  s32 __retres;
  u32 swsm;
  u32 tmp_1;
  
#line 45 
  s32 timeout = (int)hw->nvm.word_size + 1;
  
#line 46 
  s32 i = 0;
  
#line 49 
  goto ldv_44022;
  ldv_44021: 
#line 50 
  ;
  
#line 50 
  swsm = igb_rd32(hw,23376U);
  
#line 51 
  if ((swsm & 1U) == 0U) 
#line 52 
                         goto ldv_44020; else ;
  
#line 54 
  __const_udelay(214750UL);
  
#line 55 
  i += 1;
  ldv_44022: 
#line 56 
  ;
  
#line 49 
  if (i < timeout) 
#line 51 
                   goto ldv_44021; else 
#line 54 
                                        goto ldv_44020;
  ldv_44020: 
#line 55 
  ;
  
#line 58 
  if (i == timeout) {
    
#line 62 
    if ((int)hw->dev_spec._82575.clear_semaphore_once != 0) {
      
#line 63 
      hw->dev_spec._82575.clear_semaphore_once = (_Bool)0;
      
#line 64 
      igb_put_hw_semaphore(hw);
      
#line 65 
      i = 0;
      
#line 65 
      goto ldv_44025;
      ldv_44024: 
#line 66 
      ;
      
#line 66 
      swsm = igb_rd32(hw,23376U);
      
#line 67 
      if ((swsm & 1U) == 0U) 
#line 68 
                             goto ldv_44023; else ;
      
#line 70 
      __const_udelay(214750UL);
      
#line 65 
      i += 1;
      ldv_44025: 
#line 66 
      ;
      
#line 65 
      if (i < timeout) 
#line 67 
                       goto ldv_44024; else 
#line 70 
                                            goto ldv_44023;
      ldv_44023: 
#line 71 
      ;
    }
    else ;
    
#line 75 
    if (i == timeout) {
      {
        
#line 76 
        struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_hw_semaphore_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "Driver can\'t access device - SMBI bit is set.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))76U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 76 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
          struct net_device *tmp;
          
#line 76 
          tmp = igb_get_hw_dev(hw);
          
#line 76 
          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Driver can\'t access device - SMBI bit is set.\n");
        }
        else ;
      }
      
#line 77 
      __retres = -1;
      
#line 77 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 82 
  i = 0;
  
#line 82 
  goto ldv_44033;
  ldv_44032: 
#line 83 
  ;
  
#line 83 
  swsm = igb_rd32(hw,23376U);
  {
    u8 * volatile *tmp_0;
    {
      
#line 84 
      u8 *__var = (u8 *)0U;
      
#line 84 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 84 
    u8 *hw_addr = *tmp_0;
    
#line 84 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 84 
                                           writel(swsm | 2U,(void volatile *)(hw_addr + 23376U)); else ;
  }
  
#line 87 
  tmp_1 = igb_rd32(hw,23376U);
  
#line 87 
  if ((tmp_1 & 2U) != 0U) 
#line 88 
                          goto ldv_44031; else ;
  
#line 90 
  __const_udelay(214750UL);
  
#line 82 
  i += 1;
  ldv_44033: 
#line 83 
  ;
  
#line 82 
  if (i < timeout) 
#line 84 
                   goto ldv_44032; else 
#line 87 
                                        goto ldv_44031;
  ldv_44031: 
#line 88 
  ;
  
#line 93 
  if (i == timeout) {
    
#line 95 
    igb_put_hw_semaphore(hw);
    {
      
#line 96 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_get_hw_semaphore_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "Driver can\'t access the NVM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))96U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 96 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 96 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 96 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_2,"Driver can\'t access the NVM\n");
      }
      else ;
    }
    
#line 97 
    __retres = -1;
    
#line 97 
    goto return_label;
  }
  else ;
  
#line 100 
  __retres = 0;
  return_label: 
#line 100 
                return __retres;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_acquire_nvm_i210(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 114 
  tmp = igb_acquire_swfw_sync_i210(hw,(unsigned short)1);
  
#line 114 
  return tmp;
}


#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static void igb_release_nvm_i210(struct e1000_hw *hw)
{
  
#line 126 
  igb_release_swfw_sync_i210(hw,(unsigned short)1);
  
#line 127 
  return;
}


#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_acquire_swfw_sync_i210(struct e1000_hw *hw, u16 mask)
{
  u32 swfw_sync;
  s32 tmp;
  
#line 140 
  u32 swmask = (unsigned int)mask;
  
#line 141 
  u32 fwmask = (unsigned int)((int)mask << 16);
  
#line 142 
  s32 ret_val = 0;
  
#line 143 
  s32 i = 0;
  
#line 143 
  s32 timeout = 200;
  
#line 145 
  goto ldv_44058;
  ldv_44057: 
#line 146 
  ;
  
#line 146 
  tmp = igb_get_hw_semaphore_i210(hw);
  
#line 146 
  if (tmp != 0) {
    
#line 147 
    ret_val = -13;
    
#line 148 
    goto out;
  }
  else ;
  
#line 151 
  swfw_sync = igb_rd32(hw,23388U);
  
#line 152 
  if (((fwmask | swmask) & swfw_sync) == 0U) 
#line 153 
                                             goto ldv_44052; else ;
  
#line 156 
  igb_put_hw_semaphore(hw);
  
#line 157 
  if (1) 
#line 157 
         __const_udelay(21475000UL);
  else {
    
#line 157 
    unsigned long __ms = 5UL;
    {
      unsigned long tmp_0;
      
#line 157 
      goto ldv_44055;
      ldv_44054: 
#line 158 
      ;
      
#line 157 
      __const_udelay(4295000UL);
      ldv_44055: 
#line 159 
      ;
      
#line 157 
      tmp_0 = __ms;
      
#line 157 
      __ms -= 1UL;
      
#line 157 
      ;
      
#line 157 
      if (tmp_0 != 0UL) 
#line 159 
                        goto ldv_44054; else 
#line 162 
                                             goto ldv_44056;
      ldv_44056: 
#line 163 
      ;
    }
  }
  
#line 158 
  i += 1;
  ldv_44058: 
#line 159 
  ;
  
#line 145 
  if (i < timeout) 
#line 147 
                   goto ldv_44057; else 
#line 150 
                                        goto ldv_44052;
  ldv_44052: 
#line 151 
  ;
  
#line 161 
  if (i == timeout) {
    {
      
#line 162 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_acquire_swfw_sync_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "Driver can\'t access resource, SW_FW_SYNC timeout.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))162U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 162 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 162 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 162 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_1,"Driver can\'t access resource, SW_FW_SYNC timeout.\n");
      }
      else ;
    }
    
#line 163 
    ret_val = -13;
    
#line 164 
    goto out;
  }
  else ;
  
#line 167 
  swfw_sync |= swmask;
  {
    u8 * volatile *tmp_2;
    {
      
#line 168 
      u8 *__var = (u8 *)0U;
      
#line 168 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 168 
    u8 *hw_addr = *tmp_2;
    
#line 168 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 168 
                                           writel(swfw_sync,(void volatile *)(hw_addr + 23388U)); else ;
  }
  
#line 170 
  igb_put_hw_semaphore(hw);
  out: 
#line 171 
  ;
  
#line 172 
  return ret_val;
}


#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
void igb_release_swfw_sync_i210(struct e1000_hw *hw, u16 mask)
{
  u32 swfw_sync;
  s32 tmp;
  
#line 187 
  goto ldv_44070;
  ldv_44069: 
#line 188 
  ;
  ldv_44070: 
#line 189 
  ;
  
#line 187 
  tmp = igb_get_hw_semaphore_i210(hw);
  
#line 187 
  if (tmp != 0) 
#line 189 
                goto ldv_44069; else 
#line 192 
                                     goto ldv_44071;
  ldv_44071: 
#line 193 
  ;
  
#line 190 
  swfw_sync = igb_rd32(hw,23388U);
  
#line 191 
  swfw_sync = (unsigned int)(~ ((int)mask)) & swfw_sync;
  {
    u8 * volatile *tmp_0;
    {
      
#line 192 
      u8 *__var = (u8 *)0U;
      
#line 192 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 192 
    u8 *hw_addr = *tmp_0;
    
#line 192 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 192 
                                           writel(swfw_sync,(void volatile *)(hw_addr + 23388U)); else ;
  }
  
#line 194 
  igb_put_hw_semaphore(hw);
  
#line 195 
  return;
}


#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_read_nvm_srrd_i210(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  u16 i;
  u16 count;
  int tmp;
  s32 tmp_0;
  
#line 210 
  s32 status = 0;
  
#line 217 
  i = (unsigned short)0U;
  
#line 217 
  goto ldv_44086;
  ldv_44085: 
#line 218 
  ;
  
#line 218 
  if (512 < (int)words - (int)i) 
#line 218 
                                 tmp = 512; else 
#line 218 
                                                 tmp = (int)words - (int)i;
  
#line 218 
  count = (unsigned short)tmp;
  
#line 220 
  tmp_0 = (*(hw->nvm.ops.acquire))(hw);
  
#line 220 
  if (tmp_0 == 0) {
    
#line 221 
    status = igb_read_nvm_eerd(hw,(unsigned short)((int)offset),(unsigned short)((int)count),data + (int)i);
    
#line 223 
    (*(hw->nvm.ops.release))(hw);
  }
  else 
#line 225 
       status = 13;
  
#line 228 
  if (status != 0) 
#line 229 
                   goto ldv_44084; else ;
  
#line 217 
  i = (unsigned short)((unsigned int)i + 512U);
  ldv_44086: 
#line 218 
  ;
  
#line 217 
  if ((int)i < (int)words) 
#line 219 
                           goto ldv_44085; else 
#line 222 
                                                goto ldv_44084;
  ldv_44084: 
#line 223 
  ;
  
#line 232 
  return status;
}


#line 247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_write_nvm_srwr(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  u32 i;
  u32 k;
  u32 tmp_1;
  
#line 250 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 251 
  u32 eewr = 0U;
  
#line 252 
  u32 attempts = 100000U;
  
#line 253 
  s32 ret_val = 0;
  
#line 258 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 260 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_write_nvm_srwr", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))260U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 260 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 260 
        tmp = igb_get_hw_dev(hw);
        
#line 260 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"nvm parameter(s) out of bounds\n");
      }
      else ;
    }
    
#line 261 
    ret_val = -1;
    
#line 262 
    goto out;
  }
  else ;
  
#line 265 
  i = 0U;
  
#line 265 
  goto ldv_44111;
  ldv_44110: 
#line 266 
  ;
  
#line 266 
  eewr = ((((unsigned int)offset + i) << 2) | (unsigned int)((int)*(data + i) << 16)) | 1U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 270 
      u8 *__var = (u8 *)0U;
      
#line 270 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 270 
    u8 *hw_addr = *tmp_0;
    
#line 270 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 270 
                                           writel(eewr,(void volatile *)(hw_addr + 73752U)); else ;
  }
  
#line 272 
  k = 0U;
  
#line 272 
  goto ldv_44107;
  ldv_44106: 
#line 273 
  ;
  
#line 273 
  tmp_1 = igb_rd32(hw,73752U);
  
#line 273 
  if ((tmp_1 & 2U) != 0U) {
    
#line 275 
    ret_val = 0;
    
#line 276 
    goto ldv_44105;
  }
  else ;
  
#line 278 
  __const_udelay(21475UL);
  
#line 272 
  k += 1U;
  ldv_44107: 
#line 273 
  ;
  
#line 272 
  if (k < attempts) 
#line 274 
                    goto ldv_44106; else 
#line 277 
                                         goto ldv_44105;
  ldv_44105: 
#line 278 
  ;
  
#line 281 
  if (ret_val != 0) {
    {
      
#line 282 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_write_nvm_srwr", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "Shadow RAM write EEWR timed out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))282U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 282 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 282 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 282 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_2,"Shadow RAM write EEWR timed out\n");
      }
      else ;
    }
    
#line 283 
    goto ldv_44109;
  }
  else ;
  
#line 265 
  i += 1U;
  ldv_44111: 
#line 266 
  ;
  
#line 265 
  if ((unsigned int)words > i) 
#line 267 
                               goto ldv_44110; else 
#line 270 
                                                    goto ldv_44109;
  ldv_44109: 
#line 271 
  ;
  out: 
#line 287 
  ;
  
#line 288 
  return ret_val;
}


#line 307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_write_nvm_srwr_i210(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  u16 i;
  u16 count;
  int tmp;
  s32 tmp_0;
  
#line 310 
  s32 status = 0;
  
#line 317 
  i = (unsigned short)0U;
  
#line 317 
  goto ldv_44123;
  ldv_44122: 
#line 318 
  ;
  
#line 318 
  if (512 < (int)words - (int)i) 
#line 318 
                                 tmp = 512; else 
#line 318 
                                                 tmp = (int)words - (int)i;
  
#line 318 
  count = (unsigned short)tmp;
  
#line 320 
  tmp_0 = (*(hw->nvm.ops.acquire))(hw);
  
#line 320 
  if (tmp_0 == 0) {
    
#line 321 
    status = igb_write_nvm_srwr(hw,(unsigned short)((int)offset),(unsigned short)((int)count),data + (int)i);
    
#line 323 
    (*(hw->nvm.ops.release))(hw);
  }
  else 
#line 325 
       status = 13;
  
#line 328 
  if (status != 0) 
#line 329 
                   goto ldv_44121; else ;
  
#line 317 
  i = (unsigned short)((unsigned int)i + 512U);
  ldv_44123: 
#line 318 
  ;
  
#line 317 
  if ((int)i < (int)words) 
#line 319 
                           goto ldv_44122; else 
#line 322 
                                                goto ldv_44121;
  ldv_44121: 
#line 323 
  ;
  
#line 332 
  return status;
}


#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_read_invm_word_i210(struct e1000_hw *hw, u8 address, u16 *data)
{
  u32 invm_dword;
  u16 i;
  u8 record_type;
  u8 word_address;
  
#line 346 
  s32 status = -19;
  
#line 351 
  i = (unsigned short)0U;
  
#line 351 
  goto ldv_44138;
  ldv_44137: 
#line 352 
  ;
  
#line 352 
  invm_dword = igb_rd32(hw,(unsigned int)(((int)i + 18504) * 4));
  
#line 354 
  record_type = (unsigned char)((unsigned int)((unsigned char)invm_dword) & 7U);
  
#line 355 
  if ((unsigned int)record_type == 0U) 
#line 356 
                                       goto ldv_44134; else ;
  
#line 357 
  if ((unsigned int)record_type == 2U) 
#line 358 
                                       i = (unsigned short)((unsigned int)i + 1U); else ;
  
#line 359 
  if ((unsigned int)record_type == 4U) 
#line 360 
                                       i = (unsigned short)((unsigned int)i + 8U); else ;
  
#line 361 
  if ((unsigned int)record_type == 1U) {
    
#line 362 
    word_address = (unsigned char)((unsigned int)((unsigned char)(invm_dword >> 9)) & 127U);
    
#line 363 
    if ((int)word_address == (int)address) {
      
#line 364 
      *data = (unsigned short)(invm_dword >> 16);
      {
        
#line 365 
        struct _ddebug descriptor = {.modname = "igb", .function = "igb_read_invm_word_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "Read INVM Word 0x%02x = %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))366U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 365 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
          struct net_device *tmp;
          
#line 365 
          ;
          
#line 365 
          ;
          
#line 365 
          tmp = igb_get_hw_dev(hw);
          
#line 365 
          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Read INVM Word 0x%02x = %x\n",(int)address,(int)*data);
        }
        else ;
      }
      
#line 367 
      status = 0;
      
#line 368 
      goto ldv_44134;
    }
    else ;
  }
  else ;
  
#line 351 
  i = (u16)((int)i + 1);
  ldv_44138: 
#line 352 
  ;
  
#line 351 
  if ((unsigned int)i <= 63U) 
#line 353 
                              goto ldv_44137; else 
#line 356 
                                                   goto ldv_44134;
  ldv_44134: 
#line 357 
  ;
  
#line 372 
  if (status != 0) {
    
#line 373 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_read_invm_word_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "Requested word 0x%02x not found in OTP\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))373U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 373 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_0;
      
#line 373 
      ;
      
#line 373 
      tmp_0 = igb_get_hw_dev(hw);
      
#line 373 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Requested word 0x%02x not found in OTP\n",(int)address);
    }
    else ;
  }
  else ;
  
#line 374 
  return status;
}


#line 385  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_read_invm_i210(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  
#line 388 
  s32 ret_val = 0;
  
#line 391 
  switch ((int)offset) {
    s32 tmp;
    s32 tmp_0;
    case 0: 
#line 392 
    ;
    
#line 393 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    
#line 394 
    tmp = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned int)((unsigned char)offset) + 1U)),data + 1U);
    
#line 395 
    ret_val = tmp | ret_val;
    
#line 396 
    tmp_0 = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned int)((unsigned char)offset) + 2U)),data + 2U);
    
#line 397 
    ret_val = tmp_0 | ret_val;
    
#line 398 
    if (ret_val != 0) {
      
#line 399 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_read_invm_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "MAC Addr not found in iNVM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))399U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 399 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 399 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 399 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_1,"MAC Addr not found in iNVM\n");
      }
      else ;
    }
    else ;
    
#line 400 
    goto ldv_44150;
    case 15: 
#line 401 
    ;
    
#line 402 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    
#line 403 
    if (ret_val != 0) {
      
#line 404 
      *data = (unsigned short)29251U;
      
#line 405 
      ret_val = 0;
    }
    else ;
    
#line 407 
    goto ldv_44150;
    case 19: 
#line 408 
    ;
    
#line 409 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    
#line 410 
    if (ret_val != 0) {
      
#line 411 
      *data = (unsigned short)193U;
      
#line 412 
      ret_val = 0;
    }
    else ;
    
#line 414 
    goto ldv_44150;
    case 28: 
#line 415 
    ;
    
#line 416 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    
#line 417 
    if (ret_val != 0) {
      
#line 418 
      *data = (unsigned short)388U;
      
#line 419 
      ret_val = 0;
    }
    else ;
    
#line 421 
    goto ldv_44150;
    case 31: 
#line 422 
    ;
    
#line 423 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    
#line 424 
    if (ret_val != 0) {
      
#line 425 
      *data = (unsigned short)8204U;
      
#line 426 
      ret_val = 0;
    }
    else ;
    
#line 428 
    goto ldv_44150;
    case 4: 
#line 429 
    ;
    
#line 430 
    ret_val = igb_read_invm_word_i210(hw,(unsigned char)((int)((unsigned char)offset)),data);
    
#line 431 
    if (ret_val != 0) {
      
#line 432 
      *data = (unsigned short)65535U;
      
#line 433 
      ret_val = 0;
    }
    else ;
    
#line 435 
    goto ldv_44150;
    case 11: 
#line 436 
    ;
    
#line 437 
    *data = hw->subsystem_device_id;
    
#line 438 
    goto ldv_44150;
    case 12: 
#line 439 
    ;
    
#line 440 
    *data = hw->subsystem_vendor_id;
    
#line 441 
    goto ldv_44150;
    case 13: 
#line 442 
    ;
    
#line 443 
    *data = hw->device_id;
    
#line 444 
    goto ldv_44150;
    case 14: 
#line 445 
    ;
    
#line 446 
    *data = hw->vendor_id;
    
#line 447 
    goto ldv_44150;
    default: 
#line 448 
    ;
    {
      
#line 449 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_read_invm_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "NVM word 0x%02x is not mapped.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))449U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 449 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 449 
        ;
        
#line 449 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 449 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_2,"NVM word 0x%02x is not mapped.\n",(int)offset);
      }
      else ;
    }
    
#line 450 
    *data = (unsigned short)65535U;
    
#line 451 
    goto ldv_44150;
  }
  ldv_44150: 
#line 453 
  ;
  
#line 453 
  return ret_val;
}


#line 463  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_read_invm_version(struct e1000_hw *hw, struct e1000_fw_version *invm_ver)
{
  u32 buffer[64U];
  
#line 465 
  u32 *record = (u32 *)0U;
  
#line 466 
  u32 *next_record = (u32 *)0U;
  
#line 467 
  u32 i = 0U;
  
#line 468 
  u32 invm_dword = 0U;
  
#line 469 
  u32 invm_blocks = 62U;
  
#line 472 
  s32 status = -19;
  
#line 473 
  u16 version = (unsigned short)0U;
  
#line 476 
  i = 0U;
  
#line 476 
  goto ldv_44175;
  ldv_44174: 
#line 477 
  ;
  
#line 477 
  invm_dword = igb_rd32(hw,(i + 18504U) * 4U);
  
#line 478 
  buffer[i] = invm_dword;
  
#line 476 
  i += 1U;
  ldv_44175: 
#line 477 
  ;
  
#line 476 
  if (i <= 63U) 
#line 478 
                goto ldv_44174; else 
#line 481 
                                     goto ldv_44176;
  ldv_44176: 
#line 482 
  ;
  
#line 482 
  i = 1U;
  
#line 482 
  goto ldv_44179;
  ldv_44178: 
#line 483 
  ;
  
#line 483 
  record = & buffer[invm_blocks - i];
  
#line 484 
  next_record = & buffer[(invm_blocks - i) + 1U];
  
#line 487 
  if (i == 1U && (*record & 8184U) == 0U) {
    
#line 488 
    version = (unsigned short)0U;
    
#line 489 
    status = 0;
    
#line 490 
    goto ldv_44177;
  }
  else 
    
#line 493 
    if (i == 1U && (*record & 8380416U) == 0U) {
      
#line 495 
      version = (unsigned short)((unsigned int)((unsigned short)(*record >> 3)) & 1023U);
      
#line 496 
      status = 0;
      
#line 497 
      goto ldv_44177;
    }
    else 
      
#line 502 
      if (((*record & 8184U) == 0U && (*record & 3U) == 0U) || ((*record & 3U) != 0U && i != 1U)) {
        
#line 505 
        version = (unsigned short)((unsigned int)((unsigned short)(*next_record >> 13)) & 1023U);
        
#line 507 
        status = 0;
        
#line 508 
        goto ldv_44177;
      }
      else 
        
#line 513 
        if ((*record & 8380416U) == 0U && (*record & 3U) == 0U) {
          
#line 515 
          version = (unsigned short)((unsigned int)((unsigned short)(*record >> 3)) & 1023U);
          
#line 516 
          status = 0;
          
#line 517 
          goto ldv_44177;
        }
        else ;
  
#line 482 
  i += 1U;
  ldv_44179: 
#line 483 
  ;
  
#line 482 
  if (i < invm_blocks) 
#line 484 
                       goto ldv_44178; else 
#line 487 
                                            goto ldv_44177;
  ldv_44177: 
#line 488 
  ;
  
#line 521 
  if (status == 0) {
    
#line 522 
    invm_ver->invm_major = (unsigned char)((unsigned int)((unsigned char)((int)version >> 4)) & 63U);
    
#line 524 
    invm_ver->invm_minor = (unsigned char)((unsigned int)((unsigned char)version) & 15U);
  }
  else ;
  
#line 527 
  i = 1U;
  
#line 527 
  goto ldv_44182;
  ldv_44181: 
#line 528 
  ;
  
#line 528 
  record = & buffer[invm_blocks - i];
  
#line 529 
  next_record = & buffer[(invm_blocks - i) + 1U];
  
#line 532 
  if (i == 1U && (*record & 528482304U) == 0U) {
    
#line 533 
    invm_ver->invm_img_type = (unsigned char)0U;
    
#line 534 
    status = 0;
    
#line 535 
    goto ldv_44180;
  }
  else 
    
#line 538 
    if (((*record & 3U) == 0U && (*record & 528482304U) == 0U) || ((*record & 3U) != 0U && i != 1U)) {
      
#line 541 
      invm_ver->invm_img_type = (unsigned char)((unsigned int)((unsigned char)(*next_record >> 23)) & 63U);
      
#line 543 
      status = 0;
      
#line 544 
      goto ldv_44180;
    }
    else ;
  
#line 527 
  i += 1U;
  ldv_44182: 
#line 528 
  ;
  
#line 527 
  if (i < invm_blocks) 
#line 529 
                       goto ldv_44181; else 
#line 532 
                                            goto ldv_44180;
  ldv_44180: 
#line 533 
  ;
  
#line 547 
  return status;
}


#line 557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_validate_nvm_checksum_i210(struct e1000_hw *hw)
{
  s32 (*read_op_ptr)(struct e1000_hw *, u16 , u16 , u16 *);
  s32 tmp;
  
#line 559 
  s32 status = 0;
  
#line 562 
  tmp = (*(hw->nvm.ops.acquire))(hw);
  
#line 562 
  if (tmp == 0) {
    
#line 568 
    read_op_ptr = hw->nvm.ops.read;
    
#line 569 
    hw->nvm.ops.read = & igb_read_nvm_eerd;
    
#line 571 
    status = igb_validate_nvm_checksum(hw);
    
#line 574 
    hw->nvm.ops.read = read_op_ptr;
    
#line 576 
    (*(hw->nvm.ops.release))(hw);
  }
  else 
#line 578 
       status = 13;
  
#line 581 
  return status;
}


#line 592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_update_nvm_checksum_i210(struct e1000_hw *hw)
{
  u16 i;
  u16 nvm_data;
  s32 tmp_2;
  
#line 594 
  s32 ret_val = 0;
  
#line 595 
  u16 checksum = (unsigned short)0U;
  
#line 602 
  ret_val = igb_read_nvm_eerd(hw,(unsigned short)0,(unsigned short)1,& nvm_data);
  
#line 603 
  if (ret_val != 0) {
    {
      
#line 604 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_update_nvm_checksum_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))604U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 604 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 604 
        tmp = igb_get_hw_dev(hw);
        
#line 604 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"EEPROM read failed\n");
      }
      else ;
    }
    
#line 605 
    goto out;
  }
  else ;
  
#line 608 
  tmp_2 = (*(hw->nvm.ops.acquire))(hw);
  
#line 608 
  if (tmp_2 == 0) {
    
#line 614 
    i = (unsigned short)0U;
    
#line 614 
    goto ldv_44204;
    ldv_44203: 
#line 615 
    ;
    
#line 615 
    ret_val = igb_read_nvm_eerd(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    
#line 616 
    if (ret_val != 0) {
      
#line 617 
      (*(hw->nvm.ops.release))(hw);
      {
        
#line 618 
        struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_update_nvm_checksum_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "NVM Read Error while updating checksum.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))618U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 618 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
          struct net_device *tmp_0;
          
#line 618 
          tmp_0 = igb_get_hw_dev(hw);
          
#line 618 
          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"NVM Read Error while updating checksum.\n");
        }
        else ;
      }
      
#line 619 
      goto out;
    }
    else ;
    
#line 621 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    
#line 614 
    i = (u16)((int)i + 1);
    ldv_44204: 
#line 615 
    ;
    
#line 614 
    if ((unsigned int)i <= 62U) 
#line 616 
                                goto ldv_44203; else 
#line 619 
                                                     goto ldv_44205;
    ldv_44205: 
#line 620 
    ;
    
#line 623 
    checksum = (unsigned short)(47802U - (unsigned int)checksum);
    
#line 624 
    ret_val = igb_write_nvm_srwr(hw,(unsigned short)63,(unsigned short)1,& checksum);
    
#line 626 
    if (ret_val != 0) {
      
#line 627 
      (*(hw->nvm.ops.release))(hw);
      {
        
#line 628 
        struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_update_nvm_checksum_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "NVM Write Error while updating checksum.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))628U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 628 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
          struct net_device *tmp_1;
          
#line 628 
          tmp_1 = igb_get_hw_dev(hw);
          
#line 628 
          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"NVM Write Error while updating checksum.\n");
        }
        else ;
      }
      
#line 629 
      goto out;
    }
    else ;
    
#line 632 
    (*(hw->nvm.ops.release))(hw);
    
#line 634 
    ret_val = igb_update_flash_i210(hw);
  }
  else 
#line 636 
       ret_val = -13;
  out: 
#line 638 
  ;
  
#line 639 
  return ret_val;
}


#line 647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_pool_flash_update_done_i210(struct e1000_hw *hw)
{
  u32 i;
  u32 reg;
  
#line 649 
  s32 ret_val = -1;
  
#line 652 
  i = 0U;
  
#line 652 
  goto ldv_44215;
  ldv_44214: 
#line 653 
  ;
  
#line 653 
  reg = igb_rd32(hw,16U);
  
#line 654 
  if ((reg & 67108864U) != 0U) {
    
#line 655 
    ret_val = 0;
    
#line 656 
    goto ldv_44213;
  }
  else ;
  
#line 658 
  __const_udelay(21475UL);
  
#line 652 
  i += 1U;
  ldv_44215: 
#line 653 
  ;
  
#line 652 
  if (i <= 19999U) 
#line 654 
                   goto ldv_44214; else 
#line 657 
                                        goto ldv_44213;
  ldv_44213: 
#line 658 
  ;
  
#line 661 
  return ret_val;
}


#line 669  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
bool igb_get_flash_presence_i210(struct e1000_hw *hw)
{
  
#line 671 
  u32 eec = 0U;
  
#line 672 
  bool ret_val = (_Bool)0;
  
#line 674 
  eec = igb_rd32(hw,16U);
  
#line 675 
  if ((eec & 524288U) != 0U) 
#line 676 
                             ret_val = (_Bool)1; else ;
  
#line 678 
  return ret_val;
}


#line 686  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 igb_update_flash_i210(struct e1000_hw *hw)
{
  u32 flup;
  u32 tmp_0;
  
#line 688 
  s32 ret_val = 0;
  
#line 691 
  ret_val = igb_pool_flash_update_done_i210(hw);
  
#line 692 
  if (ret_val == -1) {
    {
      
#line 693 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_update_flash_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "Flash update time out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))693U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 693 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 693 
        tmp = igb_get_hw_dev(hw);
        
#line 693 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Flash update time out\n");
      }
      else ;
    }
    
#line 694 
    goto out;
  }
  else ;
  
#line 697 
  tmp_0 = igb_rd32(hw,16U);
  
#line 697 
  flup = tmp_0 | 8388608U;
  {
    u8 * volatile *tmp_1;
    {
      
#line 698 
      u8 *__var = (u8 *)0U;
      
#line 698 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 698 
    u8 *hw_addr = *tmp_1;
    
#line 698 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 698 
                                           writel(flup,(void volatile *)(hw_addr + 16U)); else ;
  }
  
#line 700 
  ret_val = igb_pool_flash_update_done_i210(hw);
  
#line 701 
  if (ret_val != 0) {
    
#line 702 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_update_flash_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "Flash update complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))702U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 702 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_2;
      
#line 702 
      tmp_2 = igb_get_hw_dev(hw);
      
#line 702 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_2,"Flash update complete\n");
    }
    else ;
  }
  else {
    
#line 704 
    struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_update_flash_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "Flash update time out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))704U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 704 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
      struct net_device *tmp_3;
      
#line 704 
      tmp_3 = igb_get_hw_dev(hw);
      
#line 704 
      __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_3,"Flash update time out\n");
    }
    else ;
  }
  out: 
#line 706 
  ;
  
#line 707 
  return ret_val;
}


#line 718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_valid_led_default_i210(struct e1000_hw *hw, u16 *data)
{
  s32 ret_val;
  
#line 722 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)4,(unsigned short)1,data);
  
#line 723 
  if (ret_val != 0) {
    {
      
#line 724 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_valid_led_default_i210", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))724U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 724 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 724 
        tmp = igb_get_hw_dev(hw);
        
#line 724 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error\n");
      }
      else ;
    }
    
#line 725 
    goto out;
  }
  else ;
  
#line 728 
  if ((unsigned int)*data + 65535U > 65533U) {
    
#line 729 
    switch ((unsigned int)hw->phy.media_type) {
      case (unsigned int)3: 
#line 730 
      ;
      
#line 731 
      *data = (unsigned short)280U;
      
#line 732 
      goto ldv_44243;
      case (unsigned int)1: 
#line 733 
      ;
      default: 
#line 734 
      ;
      
#line 735 
      *data = (unsigned short)2073U;
      
#line 736 
      goto ldv_44243;
    }
    ldv_44243: 
#line 738 
    ;
  }
  else ;
  out: 
#line 739 
  ;
  
#line 740 
  return ret_val;
}


#line 751  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
static s32 __igb_access_xmdio_reg(struct e1000_hw *hw, u16 address, u8 dev_addr, u16 *data, bool read)
{
  s32 __retres;
  
#line 754 
  s32 ret_val = 0;
  
#line 756 
  ret_val = (*(hw->phy.ops.write_reg))(hw,13U,(unsigned short)((int)dev_addr));
  
#line 757 
  if (ret_val != 0) {
    
#line 758 
    __retres = ret_val;
    
#line 758 
    goto return_label;
  }
  else ;
  
#line 760 
  ret_val = (*(hw->phy.ops.write_reg))(hw,14U,(unsigned short)((int)address));
  
#line 761 
  if (ret_val != 0) {
    
#line 762 
    __retres = ret_val;
    
#line 762 
    goto return_label;
  }
  else ;
  
#line 764 
  ret_val = (*(hw->phy.ops.write_reg))(hw,13U,(unsigned short)((int)((unsigned short)((int)dev_addr | 16384))));
  
#line 766 
  if (ret_val != 0) {
    
#line 767 
    __retres = ret_val;
    
#line 767 
    goto return_label;
  }
  else ;
  
#line 769 
  if ((int)read != 0) 
#line 770 
                      ret_val = (*(hw->phy.ops.read_reg))(hw,14U,data); else 
                                                                    
#line 772 
                                                                    ret_val = (*(hw->phy.ops.write_reg))(hw,14U,(unsigned short)((int)*data));
  
#line 773 
  if (ret_val != 0) {
    
#line 774 
    __retres = ret_val;
    
#line 774 
    goto return_label;
  }
  else ;
  
#line 777 
  ret_val = (*(hw->phy.ops.write_reg))(hw,13U,(unsigned short)0);
  
#line 778 
  if (ret_val != 0) {
    
#line 779 
    __retres = ret_val;
    
#line 779 
    goto return_label;
  }
  else ;
  
#line 781 
  __retres = ret_val;
  return_label: 
#line 781 
                return __retres;
}


#line 791  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_read_xmdio_reg(struct e1000_hw *hw, u16 addr, u8 dev_addr, u16 *data)
{
  s32 tmp;
  
#line 793 
  tmp = __igb_access_xmdio_reg(hw,(unsigned short)((int)addr),(unsigned char)((int)dev_addr),data,(_Bool)1);
  
#line 793 
  return tmp;
}


#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_write_xmdio_reg(struct e1000_hw *hw, u16 addr, u8 dev_addr, u16 data)
{
  s32 tmp;
  
#line 805 
  tmp = __igb_access_xmdio_reg(hw,(unsigned short)((int)addr),(unsigned char)((int)dev_addr),& data,(_Bool)0);
  
#line 805 
  return tmp;
}


#line 812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_init_nvm_params_i210(struct e1000_hw *hw)
{
  bool tmp;
  
#line 814 
  s32 ret_val = 0;
  
#line 815 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 817 
  nvm->ops.acquire = & igb_acquire_nvm_i210;
  
#line 818 
  nvm->ops.release = & igb_release_nvm_i210;
  
#line 819 
  nvm->ops.valid_led_default = & igb_valid_led_default_i210;
  
#line 822 
  tmp = igb_get_flash_presence_i210(hw);
  
#line 822 
  if ((int)tmp != 0) {
    
#line 823 
    hw->nvm.type = e1000_nvm_flash_hw;
    
#line 824 
    nvm->ops.read = & igb_read_nvm_srrd_i210;
    
#line 825 
    nvm->ops.write = & igb_write_nvm_srwr_i210;
    
#line 826 
    nvm->ops.validate = & igb_validate_nvm_checksum_i210;
    
#line 827 
    nvm->ops.update = & igb_update_nvm_checksum_i210;
  }
  else {
    
#line 829 
    hw->nvm.type = e1000_nvm_invm;
    
#line 830 
    nvm->ops.read = & igb_read_invm_i210;
    
#line 831 
    nvm->ops.write = (s32 (*)(struct e1000_hw *, u16 , u16 , u16 *))0;
    
#line 832 
    nvm->ops.validate = (s32 (*)(struct e1000_hw *))0;
    
#line 833 
    nvm->ops.update = (s32 (*)(struct e1000_hw *))0;
  }
  
#line 835 
  return ret_val;
}


#line 845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_i210.c"
s32 igb_pll_workaround_i210(struct e1000_hw *hw)
{
  s32 ret_val;
  u32 wuc;
  u32 mdicnfg;
  u32 ctrl;
  u32 ctrl_ext;
  u32 reg_val;
  u16 nvm_word;
  u16 phy_word;
  u16 pci_word;
  u16 tmp_nvm;
  int i;
  
#line 853 
  wuc = igb_rd32(hw,22528U);
  
#line 854 
  mdicnfg = igb_rd32(hw,3588U);
  
#line 855 
  reg_val = mdicnfg & 2147483647U;
  {
    u8 * volatile *tmp;
    {
      
#line 856 
      u8 *__var = (u8 *)0U;
      
#line 856 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 856 
    u8 *hw_addr = *tmp;
    
#line 856 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 856 
                                           writel(reg_val,(void volatile *)(hw_addr + 3588U)); else ;
  }
  
#line 859 
  ret_val = igb_read_invm_word_i210(hw,(unsigned char)10,& nvm_word);
  
#line 861 
  if (ret_val != 0) 
#line 862 
                    nvm_word = (unsigned short)8239U; else ;
  
#line 863 
  tmp_nvm = (unsigned short)((unsigned int)nvm_word | 16U);
  
#line 864 
  i = 0;
  
#line 864 
  goto ldv_44308;
  ldv_44307: 
#line 865 
  ;
  
#line 866 
  igb_read_phy_reg_gs40g(hw,16515086U,& phy_word);
  
#line 868 
  if (((int)phy_word & 255) != 255) {
    
#line 870 
    ret_val = 0;
    
#line 871 
    goto ldv_44288;
  }
  else 
#line 873 
       ret_val = -2;
  
#line 876 
  ctrl = igb_rd32(hw,0U);
  {
    u8 * volatile *tmp_0;
    {
      
#line 877 
      u8 *__var_0 = (u8 *)0U;
      
#line 877 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 877 
    u8 *hw_addr_0 = *tmp_0;
    
#line 877 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 877 
                                             writel(ctrl | 2147483648U,(void volatile *)hw_addr_0); else ;
  }
  
#line 879 
  ctrl_ext = igb_rd32(hw,24U);
  
#line 880 
  ctrl_ext |= 1310720U;
  {
    u8 * volatile *tmp_1;
    {
      
#line 881 
      u8 *__var_1 = (u8 *)0U;
      
#line 881 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 881 
    u8 *hw_addr_1 = *tmp_1;
    
#line 881 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 881 
                                             writel(ctrl_ext,(void volatile *)(hw_addr_1 + 24U)); else ;
  }
  {
    u8 * volatile *tmp_2;
    {
      
#line 883 
      u8 *__var_2 = (u8 *)0U;
      
#line 883 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 883 
    u8 *hw_addr_2 = *tmp_2;
    
#line 883 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 883 
                                             writel(0U,(void volatile *)(hw_addr_2 + 22528U)); else ;
  }
  
#line 884 
  reg_val = (unsigned int)(((int)tmp_nvm << 16) | 160);
  {
    u8 * volatile *tmp_3;
    {
      
#line 885 
      u8 *__var_3 = (u8 *)0U;
      
#line 885 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 885 
    u8 *hw_addr_3 = *tmp_3;
    
#line 885 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 885 
                                             writel(reg_val,(void volatile *)(hw_addr_3 + 73764U)); else ;
  }
  
#line 887 
  igb_read_pci_cfg(hw,68U,& pci_word);
  
#line 888 
  pci_word = (unsigned short)((unsigned int)pci_word | 3U);
  
#line 889 
  igb_write_pci_cfg(hw,68U,& pci_word);
  
#line 890 
  usleep_range(1000UL,2000UL);
  
#line 891 
  pci_word = (unsigned short)((unsigned int)pci_word & 65532U);
  
#line 892 
  igb_write_pci_cfg(hw,68U,& pci_word);
  
#line 893 
  reg_val = (unsigned int)(((int)nvm_word << 16) | 160);
  {
    u8 * volatile *tmp_4;
    {
      
#line 894 
      u8 *__var_4 = (u8 *)0U;
      
#line 894 
      tmp_4 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 894 
    u8 *hw_addr_4 = *tmp_4;
    
#line 894 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 894 
                                             writel(reg_val,(void volatile *)(hw_addr_4 + 73764U)); else ;
  }
  {
    u8 * volatile *tmp_5;
    {
      
#line 897 
      u8 *__var_5 = (u8 *)0U;
      
#line 897 
      tmp_5 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 897 
    u8 *hw_addr_5 = *tmp_5;
    
#line 897 
    if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
#line 897 
                                             writel(wuc,(void volatile *)(hw_addr_5 + 22528U)); else ;
  }
  
#line 864 
  i += 1;
  ldv_44308: 
#line 865 
  ;
  
#line 864 
  if (i <= 4) 
#line 866 
              goto ldv_44307; else 
#line 869 
                                   goto ldv_44288;
  ldv_44288: 
#line 870 
  ;
  {
    u8 * volatile *tmp_6;
    {
      
#line 900 
      u8 *__var_6 = (u8 *)0U;
      
#line 900 
      tmp_6 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 900 
    u8 *hw_addr_6 = *tmp_6;
    
#line 900 
    if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
#line 900 
                                             writel(mdicnfg,(void volatile *)(hw_addr_6 + 3588U)); else ;
  }
  
#line 901 
  return ret_val;
}

unsigned short __builtin_bswap16(unsigned short);

void __builtin_unreachable(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __swab16p(__u16 const *p)
{
  __u16 __retres;
  int tmp_0;
  
#line 159 
  if (0 != 0) 
#line 159 
              tmp_0 = (int)((unsigned short)(((int)*p << 8) | ((int)*p >> 8)));
  else {
    __u16 tmp;
    
#line 159 
    tmp = __fswab16((unsigned short)((int)*p));
    
#line 159 
    tmp_0 = (int)tmp;
  }
  
#line 159 
  __retres = (unsigned short)tmp_0;
  
#line 159 
  return __retres;
}


#line 223  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static void __swab16s(__u16 *p)
{
  
#line 228 
  *p = __swab16p((__u16 const *)p);
  
#line 229 
  return;
}


#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_sleep(char const *, int, int);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc(atomic_t *v);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_78(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_79(spinlock_t *lock);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_spin_model_lock(char *);


#line 75 
void ldv_spin_model_unlock(char *);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vmalloc(unsigned long);


#line 83 
void vfree(void const *);


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
unsigned long msleep_interruptible(unsigned int);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
int device_set_wakeup_enable(struct device *, bool);


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 1083 
void dev_err(struct device const *, char const * , ...);


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
void dql_reset(struct dql *);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 418 
static void *kmalloc(size_t size, gfp_t flags);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);


#line 63 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 106 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 108 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 108 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 110 
    ldv_inline_asm();
    
#line 108 
    ;
  }
  else ;
  
#line 109 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 110 
    (*(ops->sync_single_for_cpu))(dev,addr,size,dir); else ;
  
#line 111 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  
#line 112 
  return;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 118 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 120 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 120 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 122 
    ldv_inline_asm();
    
#line 120 
    ;
  }
  else ;
  
#line 121 
  if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 122 
    (*(ops->sync_single_for_device))(dev,addr,size,dir); else ;
  
#line 123 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  
#line 124 
  return;
}


#line 772  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
void kfree_skb(struct sk_buff *);


#line 783 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);


#line 787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  struct sk_buff *tmp;
  
#line 790 
  tmp = __alloc_skb(size,priority,0,-1);
  
#line 790 
  return tmp;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  
#line 1087 
  atomic_inc(& skb->users);
  
#line 1088 
  return skb;
}


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync const *syncp)
{
  unsigned int __retres;
  
#line 131 
  __retres = 0U;
  
#line 131 
  return __retres;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync const *syncp, unsigned int start)
{
  bool __retres;
  
#line 144 
  __retres = (_Bool)0;
  
#line 144 
  return __retres;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_72(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_73(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 149 
static int ldv_request_irq_74(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 153 
static int ldv_request_irq_75(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 165 
static void ldv_free_irq_76(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 169 
static void ldv_free_irq_77(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 2182 
int dev_open(struct net_device *);


#line 2183 
int dev_close(struct net_device *);


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  
#line 2726 
  set_bit(1L,(unsigned long volatile *)(& q->state));
  
#line 2727 
  dql_reset(& q->dql);
  
#line 2728 
  return;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
int __pm_runtime_idle(struct device *, int);


#line 41 
int __pm_runtime_resume(struct device *, int);


#line 227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static int pm_runtime_get_sync(struct device *dev)
{
  int tmp;
  
#line 229 
  tmp = __pm_runtime_resume(dev,4);
  
#line 229 
  return tmp;
}


#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static int pm_runtime_put(struct device *dev)
{
  int tmp;
  
#line 234 
  tmp = __pm_runtime_idle(dev,5);
  
#line 234 
  return tmp;
}


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highmem.h"
__inline static void *kmap(struct page *page)
{
  void *tmp;
  
#line 58 
  __might_sleep("include/linux/highmem.h",58,0);
  
#line 59 
  tmp = lowmem_page_address((struct page const *)page);
  
#line 59 
  return tmp;
}


#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highmem.h"
__inline static void kunmap(struct page *page)
{
  
#line 64 
  return;
}


#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
__inline static u32 mmd_eee_adv_to_ethtool_adv_t(u16 eee_adv)
{
  
#line 130 
  u32 adv = 0U;
  
#line 132 
  if (((int)eee_adv & 2) != 0) 
#line 133 
                               adv |= 8U; else ;
  
#line 134 
  if (((int)eee_adv & 4) != 0) 
#line 135 
                               adv |= 32U; else ;
  
#line 136 
  if (((int)eee_adv & 8) != 0) 
#line 137 
                               adv |= 4096U; else ;
  
#line 138 
  if (((int)eee_adv & 16) != 0) 
#line 139 
                                adv |= 131072U; else ;
  
#line 140 
  if (((int)eee_adv & 32) != 0) 
#line 141 
                                adv |= 262144U; else ;
  
#line 142 
  if (((int)eee_adv & 64) != 0) 
#line 143 
                                adv |= 524288U; else ;
  
#line 145 
  return adv;
}


#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
__inline static u16 ethtool_adv_to_mmd_eee_adv_t(u32 adv)
{
  
#line 158 
  u16 reg = (unsigned short)0U;
  
#line 160 
  if ((adv & 8U) != 0U) 
#line 161 
                        reg = (unsigned short)((unsigned int)reg | 2U); else ;
  
#line 162 
  if ((adv & 32U) != 0U) 
#line 163 
                         reg = (unsigned short)((unsigned int)reg | 4U); else ;
  
#line 164 
  if ((adv & 4096U) != 0U) 
#line 165 
                           reg = (unsigned short)((unsigned int)reg | 8U); else ;
  
#line 166 
  if ((adv & 131072U) != 0U) 
#line 167 
                             reg = (unsigned short)((unsigned int)reg | 16U); else ;
  
#line 168 
  if ((adv & 262144U) != 0U) 
#line 169 
                             reg = (unsigned short)((unsigned int)reg | 32U); else ;
  
#line 170 
  if ((adv & 524288U) != 0U) 
#line 171 
                             reg = (unsigned short)((unsigned int)reg | 64U); else ;
  
#line 173 
  return reg;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.h"
s32 igb_blink_led(struct e1000_hw *hw);


#line 39 
s32 igb_cleanup_led(struct e1000_hw *hw);


#line 42 
s32 igb_force_mac_fc(struct e1000_hw *hw);


#line 49 
s32 igb_led_off(struct e1000_hw *hw);


#line 52 
s32 igb_setup_link(struct e1000_hw *hw);


#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
s32 igb_read_emi_reg(struct e1000_hw *hw, u16 addr, u16 *data);


#line 266 
s32 igb_set_eee_i350(struct e1000_hw *hw, bool adv1G, bool adv100M);


#line 267 
s32 igb_set_eee_i354(struct e1000_hw *hw, bool adv1G, bool adv100M);


#line 268 
s32 igb_get_eee_status_i354(struct e1000_hw *hw, bool *status);


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
int ptp_clock_index(struct ptp_clock *);


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
__inline static __le32 igb_test_staterr(union e1000_adv_rx_desc *rx_desc, u32 const stat_err_bits)
{
  __le32 __retres;
  
#line 311 
  __retres = rx_desc->wb.upper.status_error & stat_err_bits;
  
#line 311 
  return __retres;
}


#line 315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
__inline static int igb_desc_unused(struct igb_ring *ring)
{
  int __retres;
  
#line 317 
  if ((int)ring->next_to_clean > (int)ring->next_to_use) {
    
#line 318 
    __retres = ((int)ring->next_to_clean - (int)ring->next_to_use) + -1;
    
#line 318 
    goto return_label;
  }
  else ;
  
#line 320 
  __retres = (((int)ring->count + (int)ring->next_to_clean) - (int)ring->next_to_use) + -1;
  return_label: 
#line 320 
                return __retres;
}


#line 508 
char igb_driver_name[4U];


#line 509 
char igb_driver_version[9U];


#line 511 
int igb_up(struct igb_adapter *adapter);


#line 512 
void igb_down(struct igb_adapter *adapter);


#line 513 
void igb_reinit_locked(struct igb_adapter *adapter);


#line 514 
void igb_reset(struct igb_adapter *adapter);


#line 515 
int igb_reinit_queues(struct igb_adapter *adapter);


#line 516 
void igb_write_rss_indir_tbl(struct igb_adapter *adapter);


#line 517 
int igb_set_spd_dplx(struct igb_adapter *adapter, u32 spd, u8 dplx);


#line 518 
int igb_setup_tx_resources(struct igb_ring *tx_ring);


#line 519 
int igb_setup_rx_resources(struct igb_ring *rx_ring);


#line 520 
void igb_free_tx_resources(struct igb_ring *tx_ring);


#line 521 
void igb_free_rx_resources(struct igb_ring *rx_ring);


#line 522 
void igb_configure_tx_ring(struct igb_adapter *adapter, struct igb_ring *ring);


#line 523 
void igb_configure_rx_ring(struct igb_adapter *adapter, struct igb_ring *ring);


#line 524 
void igb_setup_tctl(struct igb_adapter *adapter);


#line 525 
void igb_setup_rctl(struct igb_adapter *adapter);


#line 526 
netdev_tx_t igb_xmit_frame_ring(struct sk_buff *skb, struct igb_ring *tx_ring);


#line 527 
void igb_unmap_and_free_tx_resource(struct igb_ring *ring, struct igb_tx_buffer *tx_buffer);


#line 528 
void igb_alloc_rx_buffers(struct igb_ring *rx_ring, u16 cleaned_count);


#line 529 
void igb_update_stats(struct igb_adapter *adapter, struct rtnl_link_stats64 *net_stats);


#line 530 
bool igb_has_link(struct igb_adapter *adapter);


#line 531 
void igb_set_ethtool_ops(struct net_device *netdev);


#line 532 
void igb_power_up_link(struct igb_adapter *adapter);


#line 533 
void igb_set_fw_version(struct igb_adapter *adapter);


#line 543 
void igb_set_flag_queue_pairs(struct igb_adapter *adapter, u32 const max_rss_queues);


#line 556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
__inline static s32 igb_read_phy_reg(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 __retres;
  
#line 558 
  if (hw->phy.ops.read_reg != (s32 (*)(struct e1000_hw *, u32 , u16 *))0) {
    s32 tmp;
    
#line 559 
    tmp = (*(hw->phy.ops.read_reg))(hw,offset,data);
    
#line 559 
    __retres = tmp;
    
#line 559 
    goto return_label;
  }
  else ;
  
#line 561 
  __retres = 0;
  return_label: 
#line 561 
                return __retres;
}


#line 564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
__inline static s32 igb_write_phy_reg(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 __retres;
  
#line 566 
  if (hw->phy.ops.write_reg != (s32 (*)(struct e1000_hw *, u32 , u16 ))0) {
    s32 tmp;
    
#line 567 
    tmp = (*(hw->phy.ops.write_reg))(hw,offset,(unsigned short)((int)data));
    
#line 567 
    __retres = tmp;
    
#line 567 
    goto return_label;
  }
  else ;
  
#line 569 
  __retres = 0;
  return_label: 
#line 569 
                return __retres;
}


#line 580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
__inline static struct netdev_queue *txring_txq(struct igb_ring const *tx_ring)
{
  struct netdev_queue *tmp;
  
#line 582 
  tmp = netdev_get_tx_queue((struct net_device const *)tx_ring->netdev,(unsigned int)tx_ring->queue_index);
  
#line 582 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_stats const igb_gstrings_stats[41U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3144}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3168}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3176}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3184}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3152}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3344}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3160}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3336}, {.stat_string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3160}, {.stat_string = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3008}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 2936}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3192}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 2968}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 2984}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3024}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'w', (char)'i', (char)'n', (char)'d', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3000}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3000}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d', (char)'_', (char)'o', (char)'k', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3016}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 2976}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 2992}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'\000'}, .sizeof_stat = 4, .stat_offset = 632}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3216}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3200}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 2944}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3352}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3360}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3056}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3072}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3064}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3080}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3176}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'o', (char)'f', (char)'_', (char)'s', (char)'y', (char)'n', (char)'c', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3536}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3248}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3232}, {.stat_string = {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3240}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'b', (char)'m', (char)'c', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3544}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'b', (char)'m', (char)'c', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3560}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3552}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 3568}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 4, .stat_offset = 13008}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'r', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 4, .stat_offset = 13012}};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_stats const igb_gstrings_net_stats[9U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 32}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 40}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 56}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 80}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 88}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 104}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 112}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 144}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'e', (char)'a', (char)'r', (char)'t', (char)'b', (char)'e', (char)'a', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 152}};

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static char const igb_gstrings_test[5U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'E', (char)'e', (char)'p', (char)'r', (char)'o', (char)'m', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}};

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_settings(struct net_device *netdev, struct ethtool_cmd *ecmd)
{
  int __retres;
  u32 status;
  u32 speed;
  
#line 139 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 140 
  struct e1000_hw *hw = & adapter->hw;
  
#line 141 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  
#line 142 
  struct e1000_sfp_flags *eth_flags = & dev_spec->eth_flags;
  
#line 146 
  status = igb_rd32(hw,8U);
  
#line 147 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    
#line 149 
    ecmd->supported = 8431U;
    
#line 157 
    ecmd->advertising = 128U;
    
#line 159 
    if ((int)hw->mac.autoneg == 1) {
      
#line 160 
      ecmd->advertising |= 64U;
      
#line 162 
      ecmd->advertising |= (unsigned int)hw->phy.autoneg_advertised;
    }
    else ;
    
#line 165 
    ecmd->port = (unsigned char)0U;
    
#line 166 
    ecmd->phy_address = (unsigned char)hw->phy.addr;
    
#line 167 
    ecmd->transceiver = (unsigned char)0U;
  }
  else {
    
#line 169 
    ecmd->supported = 140352U;
    
#line 173 
    ecmd->advertising = 132096U;
    
#line 175 
    if (hw->mac.type == (unsigned int)e1000_i354) {
      
#line 176 
      if ((unsigned int)hw->device_id == 8005U && (status & 8192U) == 0U) {
        
#line 179 
        ecmd->supported |= 32768U;
        
#line 180 
        ecmd->supported &= 4294836223U;
        
#line 182 
        ecmd->advertising |= 32768U;
        
#line 183 
        ecmd->advertising &= 4294836223U;
      }
      else ;
    }
    else ;
    
#line 187 
    if ((unsigned int)*((unsigned char *)eth_flags + 0UL) != 0U) {
      
#line 188 
      ecmd->supported |= 8U;
      
#line 189 
      ecmd->advertising |= 8U;
    }
    else ;
    
#line 191 
    if ((int)hw->mac.autoneg == 1) 
#line 192 
                                   ecmd->advertising |= 64U; else ;
    
#line 194 
    ecmd->port = (unsigned char)3U;
    
#line 195 
    ecmd->transceiver = (unsigned char)1U;
  }
  
#line 197 
  if (! hw->mac.autoneg) 
#line 198 
                         ecmd->advertising &= 4294942719U; else ;
  
#line 201 
  switch ((unsigned int)hw->fc.requested_mode) {
    case (unsigned int)3: 
#line 202 
    ;
    
#line 203 
    ecmd->advertising |= 8192U;
    
#line 204 
    goto ldv_48195;
    case (unsigned int)1: 
#line 205 
    ;
    
#line 206 
    ecmd->advertising |= 24576U;
    
#line 208 
    goto ldv_48195;
    case (unsigned int)2: 
#line 209 
    ;
    
#line 210 
    ecmd->advertising |= 16384U;
    
#line 211 
    goto ldv_48195;
    default: 
#line 212 
    ;
    
#line 213 
    ecmd->advertising &= 4294942719U;
  }
  ldv_48195: 
#line 216 
  ;
  
#line 216 
  if ((status & 2U) != 0U) {
    
#line 217 
    if ((status & 4096U) != 0U && (status & 8192U) == 0U) 
#line 219 
                                                          speed = 2500U;
    else 
      
#line 220 
      if ((status & 128U) != 0U) 
#line 221 
                                 speed = 1000U;
      else 
        
#line 222 
        if ((status & 64U) != 0U) 
#line 223 
                                  speed = 100U; else 
#line 225 
                                                     speed = 10U;
    
#line 227 
    if ((status & 1U) != 0U || hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
      
#line 229 
      ecmd->duplex = (unsigned char)1U; else 
#line 231 
                                             ecmd->duplex = (unsigned char)0U;
  }
  else {
    
#line 233 
    speed = 4294967295U;
    
#line 234 
    ecmd->duplex = (unsigned char)255U;
  }
  
#line 236 
  ethtool_cmd_speed_set(ecmd,speed);
  
#line 237 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber || (int)hw->mac.autoneg != 0) 
    
#line 239 
    ecmd->autoneg = (unsigned char)1U; else 
#line 241 
                                            ecmd->autoneg = (unsigned char)0U;
  
#line 244 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
    
#line 245 
    if ((int)hw->phy.is_mdix != 0) 
#line 245 
                                   ecmd->eth_tp_mdix = (unsigned char)2U; else 
                                                                    
#line 245 
                                                                    ecmd->eth_tp_mdix = (unsigned char)1U;
  else 
#line 248 
       ecmd->eth_tp_mdix = (unsigned char)0U;
  
#line 250 
  if ((unsigned int)hw->phy.mdix == 0U) 
#line 251 
                                        ecmd->eth_tp_mdix_ctrl = (unsigned char)3U; else 
                                                                    
#line 253 
                                                                    ecmd->eth_tp_mdix_ctrl = hw->phy.mdix;
  
#line 255 
  __retres = 0;
  
#line 255 
  return __retres;
}


#line 258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_settings(struct net_device *netdev, struct ethtool_cmd *ecmd)
{
  int __retres;
  s32 tmp_0;
  int tmp_1;
  bool tmp_4;
  
#line 260 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 261 
  struct e1000_hw *hw = & adapter->hw;
  
#line 266 
  tmp_0 = igb_check_reset_block(hw);
  
#line 266 
  if (tmp_0 != 0) {
    
#line 267 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Cannot change link characteristics when SoL/IDER is active.\n");
    
#line 269 
    __retres = -22;
    
#line 269 
    goto return_label;
  }
  else ;
  
#line 276 
  if ((unsigned int)ecmd->eth_tp_mdix_ctrl != 0U) {
    
#line 277 
    if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
      
#line 278 
      __retres = -95;
      
#line 278 
      goto return_label;
    }
    else ;
    
#line 280 
    if ((unsigned int)ecmd->eth_tp_mdix_ctrl != 3U && (unsigned int)ecmd->autoneg != 1U) {
      
#line 282 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"forcing MDI/MDI-X state is not supported when link speed and/or duplex are forced\n");
      
#line 283 
      __retres = -22;
      
#line 283 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 287 
  goto ldv_48206;
  ldv_48205: 
#line 288 
  ;
  
#line 288 
  usleep_range(1000UL,2000UL);
  ldv_48206: 
#line 289 
  ;
  
#line 287 
  tmp_1 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 287 
  if (tmp_1 != 0) 
#line 289 
                  goto ldv_48205; else 
#line 292 
                                       goto ldv_48207;
  ldv_48207: 
#line 293 
  ;
  
#line 290 
  if ((unsigned int)ecmd->autoneg == 1U) {
    
#line 291 
    hw->mac.autoneg = (_Bool)1;
    
#line 292 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) {
      
#line 293 
      hw->phy.autoneg_advertised = (unsigned short)((unsigned int)((unsigned short)ecmd->advertising) | 1088U);
      
#line 296 
      switch ((int)adapter->link_speed) {
        case 2500: 
#line 297 
        ;
        
#line 298 
        hw->phy.autoneg_advertised = (unsigned short)32768U;
        
#line 300 
        goto ldv_48209;
        case 1000: 
#line 301 
        ;
        
#line 302 
        hw->phy.autoneg_advertised = (unsigned short)32U;
        
#line 304 
        goto ldv_48209;
        case 100: 
#line 305 
        ;
        
#line 306 
        hw->phy.autoneg_advertised = (unsigned short)8U;
        
#line 308 
        goto ldv_48209;
        default: 
#line 309 
        ;
        
#line 310 
        goto ldv_48209;
      }
      ldv_48209: 
#line 312 
      ;
    }
    else 
#line 313 
         hw->phy.autoneg_advertised = (unsigned short)((unsigned int)((unsigned short)ecmd->advertising) | 192U);
    
#line 317 
    ecmd->advertising = (unsigned int)hw->phy.autoneg_advertised;
    
#line 318 
    if ((int)adapter->fc_autoneg != 0) 
#line 319 
                                       hw->fc.requested_mode = e1000_fc_default; else ;
  }
  else {
    int tmp_3;
    
#line 321 
    u32 speed = ethtool_cmd_speed((struct ethtool_cmd const *)ecmd);
    
#line 323 
    tmp_3 = igb_set_spd_dplx(adapter,speed,(unsigned char)((int)ecmd->duplex));
    
#line 323 
    if (tmp_3 != 0) {
      
#line 324 
      set_bit(1L,(unsigned long volatile *)(& adapter->state));
      
#line 325 
      __retres = -22;
      
#line 325 
      goto return_label;
    }
    else ;
  }
  
#line 330 
  if ((unsigned int)ecmd->eth_tp_mdix_ctrl != 0U) 
    
#line 334 
    if ((unsigned int)ecmd->eth_tp_mdix_ctrl == 3U) 
#line 335 
                                                    hw->phy.mdix = (unsigned char)0U; else 
                                                                    
#line 337 
                                                                    hw->phy.mdix = ecmd->eth_tp_mdix_ctrl;
  else ;
  
#line 341 
  tmp_4 = netif_running((struct net_device const *)adapter->netdev);
  
#line 341 
  if ((int)tmp_4 != 0) {
    
#line 342 
    igb_down(adapter);
    
#line 343 
    igb_up(adapter);
  }
  else 
#line 345 
       igb_reset(adapter);
  
#line 347 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 348 
  __retres = 0;
  return_label: 
#line 348 
                return __retres;
}


#line 351  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static u32 igb_get_link(struct net_device *netdev)
{
  u32 __retres;
  int tmp_1;
  bool tmp_0;
  bool tmp_2;
  
#line 353 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 354 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  
#line 362 
  tmp_0 = netif_carrier_ok((struct net_device const *)netdev);
  
#line 362 
  if (tmp_0) 
#line 362 
             tmp_1 = 0; else 
#line 362 
                             tmp_1 = 1;
  
#line 362 
  if (tmp_1) 
#line 363 
             mac->get_link_status = (_Bool)1; else ;
  
#line 365 
  tmp_2 = igb_has_link(adapter);
  
#line 365 
  __retres = (unsigned int)tmp_2;
  
#line 365 
  return __retres;
}


#line 368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  
#line 371 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 372 
  struct e1000_hw *hw = & adapter->hw;
  
#line 374 
  pause->autoneg = (unsigned int)((int)adapter->fc_autoneg != 0);
  
#line 377 
  if (hw->fc.current_mode == (unsigned int)e1000_fc_rx_pause) 
#line 378 
                                                              pause->rx_pause = 1U;
  else 
    
#line 379 
    if (hw->fc.current_mode == (unsigned int)e1000_fc_tx_pause) 
#line 380 
                                                                pause->tx_pause = 1U;
    else 
      
#line 381 
      if (hw->fc.current_mode == (unsigned int)e1000_fc_full) {
        
#line 382 
        pause->rx_pause = 1U;
        
#line 383 
        pause->tx_pause = 1U;
      }
      else ;
  
#line 385 
  return;
}


#line 387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  int __retres;
  int tmp_0;
  
#line 390 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 391 
  struct e1000_hw *hw = & adapter->hw;
  
#line 392 
  int retval = 0;
  
#line 395 
  if ((unsigned int)*((unsigned char *)(& hw->dev_spec._82575.eth_flags) + 0UL) != 0U) {
    
#line 396 
    __retres = -22;
    
#line 396 
    goto return_label;
  }
  else ;
  
#line 398 
  adapter->fc_autoneg = (_Bool)(pause->autoneg != 0U);
  
#line 400 
  goto ldv_48233;
  ldv_48232: 
#line 401 
  ;
  
#line 401 
  usleep_range(1000UL,2000UL);
  ldv_48233: 
#line 402 
  ;
  
#line 400 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 400 
  if (tmp_0 != 0) 
#line 402 
                  goto ldv_48232; else 
#line 405 
                                       goto ldv_48234;
  ldv_48234: 
#line 406 
  ;
  
#line 403 
  if ((int)adapter->fc_autoneg == 1) {
    bool tmp_1;
    
#line 404 
    hw->fc.requested_mode = e1000_fc_default;
    
#line 405 
    tmp_1 = netif_running((struct net_device const *)adapter->netdev);
    
#line 405 
    if ((int)tmp_1 != 0) {
      
#line 406 
      igb_down(adapter);
      
#line 407 
      igb_up(adapter);
    }
    else 
#line 409 
         igb_reset(adapter);
  }
  else {
    
#line 412 
    if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
#line 413 
                                                        hw->fc.requested_mode = e1000_fc_full;
    else 
      
#line 414 
      if (pause->rx_pause != 0U && pause->tx_pause == 0U) 
#line 415 
                                                          hw->fc.requested_mode = e1000_fc_rx_pause;
      else 
        
#line 416 
        if (pause->rx_pause == 0U && pause->tx_pause != 0U) 
#line 417 
                                                            hw->fc.requested_mode = e1000_fc_tx_pause;
        else 
          
#line 418 
          if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
#line 419 
                                                              hw->fc.requested_mode = e1000_fc_none; else ;
    
#line 421 
    hw->fc.current_mode = hw->fc.requested_mode;
    
#line 423 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
      
#line 423 
      retval = igb_force_mac_fc(hw); else 
#line 424 
                                          retval = igb_setup_link(hw);
  }
  
#line 427 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 428 
  __retres = retval;
  return_label: 
#line 428 
                return __retres;
}


#line 431  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static u32 igb_get_msglevel(struct net_device *netdev)
{
  u32 __retres;
  
#line 433 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 434 
  __retres = (unsigned int)adapter->msg_enable;
  
#line 434 
  return __retres;
}


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_set_msglevel(struct net_device *netdev, u32 data)
{
  
#line 439 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 440 
  adapter->msg_enable = (int)data;
  
#line 441 
  return;
}


#line 443  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_regs_len(struct net_device *netdev)
{
  int __retres;
  
#line 446 
  __retres = 2956;
  
#line 446 
  return __retres;
}


#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *p)
{
  u8 i;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  int tmp_6;
  int tmp_7;
  int tmp_8;
  int tmp_9;
  int tmp_10;
  int tmp_11;
  int tmp_12;
  int tmp_13;
  int tmp_14;
  int tmp_15;
  int tmp_16;
  int tmp_17;
  int tmp_18;
  int tmp_19;
  int tmp_20;
  int tmp_21;
  int tmp_22;
  int tmp_23;
  int tmp_24;
  int tmp_25;
  int tmp_26;
  int tmp_27;
  int tmp_28;
  int tmp_29;
  int tmp_30;
  int tmp_31;
  int tmp_32;
  
#line 452 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 453 
  struct e1000_hw *hw = & adapter->hw;
  
#line 454 
  u32 *regs_buff = (u32 *)p;
  
#line 457 
  memset(p,0,2956UL);
  
#line 459 
  regs->version = (unsigned int)((((int)hw->revision_id << 16) | 16777216) | (int)hw->device_id);
  
#line 462 
  *regs_buff = igb_rd32(hw,0U);
  
#line 463 
  *(regs_buff + 1U) = igb_rd32(hw,8U);
  
#line 464 
  *(regs_buff + 2U) = igb_rd32(hw,24U);
  
#line 465 
  *(regs_buff + 3U) = igb_rd32(hw,32U);
  
#line 466 
  *(regs_buff + 4U) = igb_rd32(hw,36U);
  
#line 467 
  *(regs_buff + 5U) = igb_rd32(hw,52U);
  
#line 468 
  *(regs_buff + 6U) = igb_rd32(hw,56U);
  
#line 469 
  *(regs_buff + 7U) = igb_rd32(hw,3584U);
  
#line 470 
  *(regs_buff + 8U) = igb_rd32(hw,4096U);
  
#line 471 
  *(regs_buff + 9U) = igb_rd32(hw,4104U);
  
#line 472 
  *(regs_buff + 10U) = igb_rd32(hw,4168U);
  
#line 473 
  *(regs_buff + 11U) = igb_rd32(hw,4172U);
  
#line 476 
  *(regs_buff + 12U) = igb_rd32(hw,16U);
  
#line 482 
  *(regs_buff + 13U) = igb_rd32(hw,5408U);
  
#line 483 
  *(regs_buff + 14U) = igb_rd32(hw,5408U);
  
#line 484 
  *(regs_buff + 15U) = igb_rd32(hw,5412U);
  
#line 485 
  *(regs_buff + 16U) = igb_rd32(hw,5416U);
  
#line 486 
  *(regs_buff + 17U) = igb_rd32(hw,5420U);
  
#line 487 
  *(regs_buff + 18U) = igb_rd32(hw,5424U);
  
#line 491 
  *(regs_buff + 19U) = igb_rd32(hw,200U);
  
#line 492 
  *(regs_buff + 20U) = igb_rd32(hw,200U);
  
#line 493 
  *(regs_buff + 21U) = igb_rd32(hw,208U);
  
#line 494 
  *(regs_buff + 22U) = igb_rd32(hw,216U);
  
#line 495 
  *(regs_buff + 23U) = igb_rd32(hw,16640U);
  
#line 496 
  *(regs_buff + 24U) = igb_rd32(hw,224U);
  
#line 497 
  *(regs_buff + 25U) = igb_rd32(hw,23232U);
  
#line 500 
  *(regs_buff + 26U) = igb_rd32(hw,40U);
  
#line 501 
  *(regs_buff + 27U) = igb_rd32(hw,44U);
  
#line 502 
  *(regs_buff + 28U) = igb_rd32(hw,368U);
  
#line 503 
  *(regs_buff + 29U) = igb_rd32(hw,8544U);
  
#line 504 
  *(regs_buff + 30U) = igb_rd32(hw,8552U);
  
#line 505 
  *(regs_buff + 31U) = igb_rd32(hw,9312U);
  
#line 508 
  *(regs_buff + 32U) = igb_rd32(hw,256U);
  
#line 509 
  *(regs_buff + 33U) = igb_rd32(hw,20480U);
  
#line 510 
  *(regs_buff + 34U) = igb_rd32(hw,20484U);
  
#line 511 
  *(regs_buff + 35U) = igb_rd32(hw,20488U);
  
#line 512 
  *(regs_buff + 36U) = igb_rd32(hw,22552U);
  
#line 513 
  *(regs_buff + 37U) = igb_rd32(hw,22556U);
  
#line 516 
  *(regs_buff + 38U) = igb_rd32(hw,1024U);
  
#line 517 
  *(regs_buff + 39U) = igb_rd32(hw,1028U);
  
#line 518 
  *(regs_buff + 40U) = igb_rd32(hw,1040U);
  
#line 519 
  *(regs_buff + 41U) = igb_rd32(hw,13712U);
  
#line 522 
  *(regs_buff + 42U) = igb_rd32(hw,22528U);
  
#line 523 
  *(regs_buff + 43U) = igb_rd32(hw,22536U);
  
#line 524 
  *(regs_buff + 44U) = igb_rd32(hw,22544U);
  
#line 525 
  *(regs_buff + 45U) = igb_rd32(hw,22584U);
  
#line 526 
  *(regs_buff + 46U) = igb_rd32(hw,22784U);
  
#line 529 
  *(regs_buff + 47U) = igb_rd32(hw,16896U);
  
#line 530 
  *(regs_buff + 48U) = igb_rd32(hw,16904U);
  
#line 531 
  *(regs_buff + 49U) = igb_rd32(hw,16908U);
  
#line 532 
  *(regs_buff + 50U) = igb_rd32(hw,16920U);
  
#line 533 
  *(regs_buff + 51U) = igb_rd32(hw,16924U);
  
#line 534 
  *(regs_buff + 52U) = igb_rd32(hw,16928U);
  
#line 535 
  *(regs_buff + 53U) = igb_rd32(hw,16932U);
  
#line 538 
  *(regs_buff + 54U) = (unsigned int)adapter->stats.crcerrs;
  
#line 539 
  *(regs_buff + 55U) = (unsigned int)adapter->stats.algnerrc;
  
#line 540 
  *(regs_buff + 56U) = (unsigned int)adapter->stats.symerrs;
  
#line 541 
  *(regs_buff + 57U) = (unsigned int)adapter->stats.rxerrc;
  
#line 542 
  *(regs_buff + 58U) = (unsigned int)adapter->stats.mpc;
  
#line 543 
  *(regs_buff + 59U) = (unsigned int)adapter->stats.scc;
  
#line 544 
  *(regs_buff + 60U) = (unsigned int)adapter->stats.ecol;
  
#line 545 
  *(regs_buff + 61U) = (unsigned int)adapter->stats.mcc;
  
#line 546 
  *(regs_buff + 62U) = (unsigned int)adapter->stats.latecol;
  
#line 547 
  *(regs_buff + 63U) = (unsigned int)adapter->stats.colc;
  
#line 548 
  *(regs_buff + 64U) = (unsigned int)adapter->stats.dc;
  
#line 549 
  *(regs_buff + 65U) = (unsigned int)adapter->stats.tncrs;
  
#line 550 
  *(regs_buff + 66U) = (unsigned int)adapter->stats.sec;
  
#line 551 
  *(regs_buff + 67U) = (unsigned int)adapter->stats.htdpmc;
  
#line 552 
  *(regs_buff + 68U) = (unsigned int)adapter->stats.rlec;
  
#line 553 
  *(regs_buff + 69U) = (unsigned int)adapter->stats.xonrxc;
  
#line 554 
  *(regs_buff + 70U) = (unsigned int)adapter->stats.xontxc;
  
#line 555 
  *(regs_buff + 71U) = (unsigned int)adapter->stats.xoffrxc;
  
#line 556 
  *(regs_buff + 72U) = (unsigned int)adapter->stats.xofftxc;
  
#line 557 
  *(regs_buff + 73U) = (unsigned int)adapter->stats.fcruc;
  
#line 558 
  *(regs_buff + 74U) = (unsigned int)adapter->stats.prc64;
  
#line 559 
  *(regs_buff + 75U) = (unsigned int)adapter->stats.prc127;
  
#line 560 
  *(regs_buff + 76U) = (unsigned int)adapter->stats.prc255;
  
#line 561 
  *(regs_buff + 77U) = (unsigned int)adapter->stats.prc511;
  
#line 562 
  *(regs_buff + 78U) = (unsigned int)adapter->stats.prc1023;
  
#line 563 
  *(regs_buff + 79U) = (unsigned int)adapter->stats.prc1522;
  
#line 564 
  *(regs_buff + 80U) = (unsigned int)adapter->stats.gprc;
  
#line 565 
  *(regs_buff + 81U) = (unsigned int)adapter->stats.bprc;
  
#line 566 
  *(regs_buff + 82U) = (unsigned int)adapter->stats.mprc;
  
#line 567 
  *(regs_buff + 83U) = (unsigned int)adapter->stats.gptc;
  
#line 568 
  *(regs_buff + 84U) = (unsigned int)adapter->stats.gorc;
  
#line 569 
  *(regs_buff + 86U) = (unsigned int)adapter->stats.gotc;
  
#line 570 
  *(regs_buff + 88U) = (unsigned int)adapter->stats.rnbc;
  
#line 571 
  *(regs_buff + 89U) = (unsigned int)adapter->stats.ruc;
  
#line 572 
  *(regs_buff + 90U) = (unsigned int)adapter->stats.rfc;
  
#line 573 
  *(regs_buff + 91U) = (unsigned int)adapter->stats.roc;
  
#line 574 
  *(regs_buff + 92U) = (unsigned int)adapter->stats.rjc;
  
#line 575 
  *(regs_buff + 93U) = (unsigned int)adapter->stats.mgprc;
  
#line 576 
  *(regs_buff + 94U) = (unsigned int)adapter->stats.mgpdc;
  
#line 577 
  *(regs_buff + 95U) = (unsigned int)adapter->stats.mgptc;
  
#line 578 
  *(regs_buff + 96U) = (unsigned int)adapter->stats.tor;
  
#line 579 
  *(regs_buff + 98U) = (unsigned int)adapter->stats.tot;
  
#line 580 
  *(regs_buff + 100U) = (unsigned int)adapter->stats.tpr;
  
#line 581 
  *(regs_buff + 101U) = (unsigned int)adapter->stats.tpt;
  
#line 582 
  *(regs_buff + 102U) = (unsigned int)adapter->stats.ptc64;
  
#line 583 
  *(regs_buff + 103U) = (unsigned int)adapter->stats.ptc127;
  
#line 584 
  *(regs_buff + 104U) = (unsigned int)adapter->stats.ptc255;
  
#line 585 
  *(regs_buff + 105U) = (unsigned int)adapter->stats.ptc511;
  
#line 586 
  *(regs_buff + 106U) = (unsigned int)adapter->stats.ptc1023;
  
#line 587 
  *(regs_buff + 107U) = (unsigned int)adapter->stats.ptc1522;
  
#line 588 
  *(regs_buff + 108U) = (unsigned int)adapter->stats.mptc;
  
#line 589 
  *(regs_buff + 109U) = (unsigned int)adapter->stats.bptc;
  
#line 590 
  *(regs_buff + 110U) = (unsigned int)adapter->stats.tsctc;
  
#line 591 
  *(regs_buff + 111U) = (unsigned int)adapter->stats.iac;
  
#line 592 
  *(regs_buff + 112U) = (unsigned int)adapter->stats.rpthc;
  
#line 593 
  *(regs_buff + 113U) = (unsigned int)adapter->stats.hgptc;
  
#line 594 
  *(regs_buff + 114U) = (unsigned int)adapter->stats.hgorc;
  
#line 595 
  *(regs_buff + 116U) = (unsigned int)adapter->stats.hgotc;
  
#line 596 
  *(regs_buff + 118U) = (unsigned int)adapter->stats.lenerrs;
  
#line 597 
  *(regs_buff + 119U) = (unsigned int)adapter->stats.scvpc;
  
#line 598 
  *(regs_buff + 120U) = (unsigned int)adapter->stats.hrmpc;
  
#line 600 
  i = (unsigned char)0U;
  
#line 600 
  goto ldv_48257;
  ldv_48256: 
#line 601 
  ;
  
#line 601 
  if ((unsigned int)i <= 3U) 
#line 601 
                             tmp_0 = (int)i * 256 + 10252; else 
#line 601 
                                                                tmp_0 = (int)i * 64 + 49164;
  
#line 601 
  ;
  
#line 601 
  *(regs_buff + ((int)i + 121)) = igb_rd32(hw,(unsigned int)tmp_0);
  
#line 600 
  i = (u8)((int)i + 1);
  ldv_48257: 
#line 601 
  ;
  
#line 600 
  if ((unsigned int)i <= 3U) 
#line 602 
                             goto ldv_48256; else 
#line 605 
                                                  goto ldv_48258;
  ldv_48258: 
#line 606 
  ;
  
#line 602 
  i = (unsigned char)0U;
  
#line 602 
  goto ldv_48260;
  ldv_48259: 
#line 603 
  ;
  
#line 603 
  *(regs_buff + ((int)i + 125)) = igb_rd32(hw,(unsigned int)(((int)i + 5408) * 4));
  
#line 602 
  i = (u8)((int)i + 1);
  ldv_48260: 
#line 603 
  ;
  
#line 602 
  if ((unsigned int)i <= 3U) 
#line 604 
                             goto ldv_48259; else 
#line 607 
                                                  goto ldv_48261;
  ldv_48261: 
#line 608 
  ;
  
#line 604 
  i = (unsigned char)0U;
  
#line 604 
  goto ldv_48263;
  ldv_48262: 
#line 605 
  ;
  
#line 605 
  if ((unsigned int)i <= 3U) 
#line 605 
                             tmp_1 = ((int)i + 40) * 256; else 
#line 605 
                                                               tmp_1 = ((int)i + 768) * 64;
  
#line 605 
  ;
  
#line 605 
  *(regs_buff + ((int)i + 129)) = igb_rd32(hw,(unsigned int)tmp_1);
  
#line 604 
  i = (u8)((int)i + 1);
  ldv_48263: 
#line 605 
  ;
  
#line 604 
  if ((unsigned int)i <= 3U) 
#line 606 
                             goto ldv_48262; else 
#line 609 
                                                  goto ldv_48264;
  ldv_48264: 
#line 610 
  ;
  
#line 606 
  i = (unsigned char)0U;
  
#line 606 
  goto ldv_48266;
  ldv_48265: 
#line 607 
  ;
  
#line 607 
  if ((unsigned int)i <= 3U) 
#line 607 
                             tmp_2 = (int)i * 256 + 10244; else 
#line 607 
                                                                tmp_2 = (int)i * 64 + 49156;
  
#line 607 
  ;
  
#line 607 
  *(regs_buff + ((int)i + 133)) = igb_rd32(hw,(unsigned int)tmp_2);
  
#line 606 
  i = (u8)((int)i + 1);
  ldv_48266: 
#line 607 
  ;
  
#line 606 
  if ((unsigned int)i <= 3U) 
#line 608 
                             goto ldv_48265; else 
#line 611 
                                                  goto ldv_48267;
  ldv_48267: 
#line 612 
  ;
  
#line 608 
  i = (unsigned char)0U;
  
#line 608 
  goto ldv_48269;
  ldv_48268: 
#line 609 
  ;
  
#line 609 
  if ((unsigned int)i <= 3U) 
#line 609 
                             tmp_3 = (int)i * 256 + 10248; else 
#line 609 
                                                                tmp_3 = (int)i * 64 + 49160;
  
#line 609 
  ;
  
#line 609 
  *(regs_buff + ((int)i + 137)) = igb_rd32(hw,(unsigned int)tmp_3);
  
#line 608 
  i = (u8)((int)i + 1);
  ldv_48269: 
#line 609 
  ;
  
#line 608 
  if ((unsigned int)i <= 3U) 
#line 610 
                             goto ldv_48268; else 
#line 613 
                                                  goto ldv_48270;
  ldv_48270: 
#line 614 
  ;
  
#line 610 
  i = (unsigned char)0U;
  
#line 610 
  goto ldv_48272;
  ldv_48271: 
#line 611 
  ;
  
#line 611 
  if ((unsigned int)i <= 3U) 
#line 611 
                             tmp_4 = (int)i * 256 + 10256; else 
#line 611 
                                                                tmp_4 = (int)i * 64 + 49168;
  
#line 611 
  ;
  
#line 611 
  *(regs_buff + ((int)i + 141)) = igb_rd32(hw,(unsigned int)tmp_4);
  
#line 610 
  i = (u8)((int)i + 1);
  ldv_48272: 
#line 611 
  ;
  
#line 610 
  if ((unsigned int)i <= 3U) 
#line 612 
                             goto ldv_48271; else 
#line 615 
                                                  goto ldv_48273;
  ldv_48273: 
#line 616 
  ;
  
#line 612 
  i = (unsigned char)0U;
  
#line 612 
  goto ldv_48275;
  ldv_48274: 
#line 613 
  ;
  
#line 613 
  if ((unsigned int)i <= 3U) 
#line 613 
                             tmp_5 = (int)i * 256 + 10264; else 
#line 613 
                                                                tmp_5 = (int)i * 64 + 49176;
  
#line 613 
  ;
  
#line 613 
  *(regs_buff + ((int)i + 145)) = igb_rd32(hw,(unsigned int)tmp_5);
  
#line 612 
  i = (u8)((int)i + 1);
  ldv_48275: 
#line 613 
  ;
  
#line 612 
  if ((unsigned int)i <= 3U) 
#line 614 
                             goto ldv_48274; else 
#line 617 
                                                  goto ldv_48276;
  ldv_48276: 
#line 618 
  ;
  
#line 614 
  i = (unsigned char)0U;
  
#line 614 
  goto ldv_48278;
  ldv_48277: 
#line 615 
  ;
  
#line 615 
  if ((unsigned int)i <= 3U) 
#line 615 
                             tmp_6 = (int)i * 256 + 10280; else 
#line 615 
                                                                tmp_6 = (int)i * 64 + 49192;
  
#line 615 
  ;
  
#line 615 
  *(regs_buff + ((int)i + 149)) = igb_rd32(hw,(unsigned int)tmp_6);
  
#line 614 
  i = (u8)((int)i + 1);
  ldv_48278: 
#line 615 
  ;
  
#line 614 
  if ((unsigned int)i <= 3U) 
#line 616 
                             goto ldv_48277; else 
#line 619 
                                                  goto ldv_48279;
  ldv_48279: 
#line 620 
  ;
  
#line 617 
  i = (unsigned char)0U;
  
#line 617 
  goto ldv_48281;
  ldv_48280: 
#line 618 
  ;
  
#line 618 
  *(regs_buff + ((int)i + 153)) = igb_rd32(hw,(unsigned int)(((int)i + 1440) * 4));
  
#line 617 
  i = (u8)((int)i + 1);
  ldv_48281: 
#line 618 
  ;
  
#line 617 
  if ((unsigned int)i <= 9U) 
#line 619 
                             goto ldv_48280; else 
#line 622 
                                                  goto ldv_48282;
  ldv_48282: 
#line 623 
  ;
  
#line 619 
  i = (unsigned char)0U;
  
#line 619 
  goto ldv_48284;
  ldv_48283: 
#line 620 
  ;
  
#line 620 
  *(regs_buff + ((int)i + 163)) = igb_rd32(hw,(unsigned int)(((int)i + 5792) * 4));
  
#line 619 
  i = (u8)((int)i + 1);
  ldv_48284: 
#line 620 
  ;
  
#line 619 
  if ((unsigned int)i <= 7U) 
#line 621 
                             goto ldv_48283; else 
#line 624 
                                                  goto ldv_48285;
  ldv_48285: 
#line 625 
  ;
  
#line 621 
  i = (unsigned char)0U;
  
#line 621 
  goto ldv_48287;
  ldv_48286: 
#line 622 
  ;
  
#line 622 
  *(regs_buff + ((int)i + 171)) = igb_rd32(hw,(unsigned int)(((int)i + 5800) * 4));
  
#line 621 
  i = (u8)((int)i + 1);
  ldv_48287: 
#line 622 
  ;
  
#line 621 
  if ((unsigned int)i <= 7U) 
#line 623 
                             goto ldv_48286; else 
#line 626 
                                                  goto ldv_48288;
  ldv_48288: 
#line 627 
  ;
  
#line 623 
  i = (unsigned char)0U;
  
#line 623 
  goto ldv_48290;
  ldv_48289: 
#line 624 
  ;
  
#line 624 
  if ((unsigned int)i <= 15U) 
#line 624 
                              tmp_7 = ((int)i + 2688) * 8; else 
#line 624 
                                                                tmp_7 = ((int)i + 2700) * 8;
  
#line 624 
  ;
  
#line 624 
  *(regs_buff + ((int)i + 179)) = igb_rd32(hw,(unsigned int)tmp_7);
  
#line 623 
  i = (u8)((int)i + 1);
  ldv_48290: 
#line 624 
  ;
  
#line 623 
  if ((unsigned int)i <= 15U) 
#line 625 
                              goto ldv_48289; else 
#line 628 
                                                   goto ldv_48291;
  ldv_48291: 
#line 629 
  ;
  
#line 625 
  i = (unsigned char)0U;
  
#line 625 
  goto ldv_48293;
  ldv_48292: 
#line 626 
  ;
  
#line 626 
  if ((unsigned int)i <= 15U) 
#line 626 
                              tmp_8 = (int)i * 8 + 21508; else 
#line 626 
                                                               tmp_8 = ((int)i + -16) * 8 + 21732;
  
#line 626 
  ;
  
#line 626 
  *(regs_buff + ((int)i + 195)) = igb_rd32(hw,(unsigned int)tmp_8);
  
#line 625 
  i = (u8)((int)i + 1);
  ldv_48293: 
#line 626 
  ;
  
#line 625 
  if ((unsigned int)i <= 15U) 
#line 627 
                              goto ldv_48292; else 
#line 630 
                                                   goto ldv_48294;
  ldv_48294: 
#line 631 
  ;
  
#line 628 
  i = (unsigned char)0U;
  
#line 628 
  goto ldv_48296;
  ldv_48295: 
#line 629 
  ;
  
#line 629 
  if ((unsigned int)i <= 3U) 
#line 629 
                             tmp_9 = ((int)i + 56) * 256; else 
#line 629 
                                                               tmp_9 = ((int)i + 896) * 64;
  
#line 629 
  ;
  
#line 629 
  *(regs_buff + ((int)i + 211)) = igb_rd32(hw,(unsigned int)tmp_9);
  
#line 628 
  i = (u8)((int)i + 1);
  ldv_48296: 
#line 629 
  ;
  
#line 628 
  if ((unsigned int)i <= 3U) 
#line 630 
                             goto ldv_48295; else 
#line 633 
                                                  goto ldv_48297;
  ldv_48297: 
#line 634 
  ;
  
#line 630 
  i = (unsigned char)0U;
  
#line 630 
  goto ldv_48299;
  ldv_48298: 
#line 631 
  ;
  
#line 631 
  if ((unsigned int)i <= 3U) 
#line 631 
                             tmp_10 = (int)i * 256 + 14340; else 
#line 631 
                                                                 tmp_10 = (int)i * 64 + 57348;
  
#line 631 
  ;
  
#line 631 
  *(regs_buff + ((int)i + 215)) = igb_rd32(hw,(unsigned int)tmp_10);
  
#line 630 
  i = (u8)((int)i + 1);
  ldv_48299: 
#line 631 
  ;
  
#line 630 
  if ((unsigned int)i <= 3U) 
#line 632 
                             goto ldv_48298; else 
#line 635 
                                                  goto ldv_48300;
  ldv_48300: 
#line 636 
  ;
  
#line 632 
  i = (unsigned char)0U;
  
#line 632 
  goto ldv_48302;
  ldv_48301: 
#line 633 
  ;
  
#line 633 
  if ((unsigned int)i <= 3U) 
#line 633 
                             tmp_11 = (int)i * 256 + 14344; else 
#line 633 
                                                                 tmp_11 = (int)i * 64 + 57352;
  
#line 633 
  ;
  
#line 633 
  *(regs_buff + ((int)i + 219)) = igb_rd32(hw,(unsigned int)tmp_11);
  
#line 632 
  i = (u8)((int)i + 1);
  ldv_48302: 
#line 633 
  ;
  
#line 632 
  if ((unsigned int)i <= 3U) 
#line 634 
                             goto ldv_48301; else 
#line 637 
                                                  goto ldv_48303;
  ldv_48303: 
#line 638 
  ;
  
#line 634 
  i = (unsigned char)0U;
  
#line 634 
  goto ldv_48305;
  ldv_48304: 
#line 635 
  ;
  
#line 635 
  if ((unsigned int)i <= 3U) 
#line 635 
                             tmp_12 = (int)i * 256 + 14352; else 
#line 635 
                                                                 tmp_12 = (int)i * 64 + 57360;
  
#line 635 
  ;
  
#line 635 
  *(regs_buff + ((int)i + 223)) = igb_rd32(hw,(unsigned int)tmp_12);
  
#line 634 
  i = (u8)((int)i + 1);
  ldv_48305: 
#line 635 
  ;
  
#line 634 
  if ((unsigned int)i <= 3U) 
#line 636 
                             goto ldv_48304; else 
#line 639 
                                                  goto ldv_48306;
  ldv_48306: 
#line 640 
  ;
  
#line 636 
  i = (unsigned char)0U;
  
#line 636 
  goto ldv_48308;
  ldv_48307: 
#line 637 
  ;
  
#line 637 
  if ((unsigned int)i <= 3U) 
#line 637 
                             tmp_13 = (int)i * 256 + 14360; else 
#line 637 
                                                                 tmp_13 = (int)i * 64 + 57368;
  
#line 637 
  ;
  
#line 637 
  *(regs_buff + ((int)i + 227)) = igb_rd32(hw,(unsigned int)tmp_13);
  
#line 636 
  i = (u8)((int)i + 1);
  ldv_48308: 
#line 637 
  ;
  
#line 636 
  if ((unsigned int)i <= 3U) 
#line 638 
                             goto ldv_48307; else 
#line 641 
                                                  goto ldv_48309;
  ldv_48309: 
#line 642 
  ;
  
#line 638 
  i = (unsigned char)0U;
  
#line 638 
  goto ldv_48311;
  ldv_48310: 
#line 639 
  ;
  
#line 639 
  if ((unsigned int)i <= 3U) 
#line 639 
                             tmp_14 = (int)i * 256 + 14376; else 
#line 639 
                                                                 tmp_14 = (int)i * 64 + 57384;
  
#line 639 
  ;
  
#line 639 
  *(regs_buff + ((int)i + 231)) = igb_rd32(hw,(unsigned int)tmp_14);
  
#line 638 
  i = (u8)((int)i + 1);
  ldv_48311: 
#line 639 
  ;
  
#line 638 
  if ((unsigned int)i <= 3U) 
#line 640 
                             goto ldv_48310; else 
#line 643 
                                                  goto ldv_48312;
  ldv_48312: 
#line 644 
  ;
  
#line 640 
  i = (unsigned char)0U;
  
#line 640 
  goto ldv_48314;
  ldv_48313: 
#line 641 
  ;
  
#line 641 
  if ((unsigned int)i <= 3U) 
#line 641 
                             tmp_15 = (int)i * 256 + 14392; else 
#line 641 
                                                                 tmp_15 = (int)i * 64 + 57400;
  
#line 641 
  ;
  
#line 641 
  *(regs_buff + ((int)i + 235)) = igb_rd32(hw,(unsigned int)tmp_15);
  
#line 640 
  i = (u8)((int)i + 1);
  ldv_48314: 
#line 641 
  ;
  
#line 640 
  if ((unsigned int)i <= 3U) 
#line 642 
                             goto ldv_48313; else 
#line 645 
                                                  goto ldv_48315;
  ldv_48315: 
#line 646 
  ;
  
#line 642 
  i = (unsigned char)0U;
  
#line 642 
  goto ldv_48317;
  ldv_48316: 
#line 643 
  ;
  
#line 643 
  if ((unsigned int)i <= 3U) 
#line 643 
                             tmp_16 = (int)i * 256 + 14396; else 
#line 643 
                                                                 tmp_16 = (int)i * 64 + 57404;
  
#line 643 
  ;
  
#line 643 
  *(regs_buff + ((int)i + 239)) = igb_rd32(hw,(unsigned int)tmp_16);
  
#line 642 
  i = (u8)((int)i + 1);
  ldv_48317: 
#line 643 
  ;
  
#line 642 
  if ((unsigned int)i <= 3U) 
#line 644 
                             goto ldv_48316; else 
#line 647 
                                                  goto ldv_48318;
  ldv_48318: 
#line 648 
  ;
  
#line 644 
  i = (unsigned char)0U;
  
#line 644 
  goto ldv_48320;
  ldv_48319: 
#line 645 
  ;
  
#line 645 
  if ((unsigned int)i <= 3U) 
#line 645 
                             tmp_17 = (int)i * 256 + 14356; else 
#line 645 
                                                                 tmp_17 = (int)i * 64 + 57364;
  
#line 645 
  ;
  
#line 645 
  *(regs_buff + ((int)i + 243)) = igb_rd32(hw,(unsigned int)tmp_17);
  
#line 644 
  i = (u8)((int)i + 1);
  ldv_48320: 
#line 645 
  ;
  
#line 644 
  if ((unsigned int)i <= 3U) 
#line 646 
                             goto ldv_48319; else 
#line 649 
                                                  goto ldv_48321;
  ldv_48321: 
#line 650 
  ;
  
#line 647 
  i = (unsigned char)0U;
  
#line 647 
  goto ldv_48323;
  ldv_48322: 
#line 648 
  ;
  
#line 648 
  *(regs_buff + ((int)i + 247)) = igb_rd32(hw,(unsigned int)(((int)i + 2824) * 8));
  
#line 647 
  i = (u8)((int)i + 1);
  ldv_48323: 
#line 648 
  ;
  
#line 647 
  if ((unsigned int)i <= 3U) 
#line 649 
                             goto ldv_48322; else 
#line 652 
                                                  goto ldv_48324;
  ldv_48324: 
#line 653 
  ;
  
#line 649 
  i = (unsigned char)0U;
  
#line 649 
  goto ldv_48326;
  ldv_48325: 
#line 650 
  ;
  
#line 650 
  *(regs_buff + ((int)i + 251)) = igb_rd32(hw,(unsigned int)(((int)i + 5664) * 4));
  
#line 649 
  i = (u8)((int)i + 1);
  ldv_48326: 
#line 650 
  ;
  
#line 649 
  if ((unsigned int)i <= 3U) 
#line 651 
                             goto ldv_48325; else 
#line 654 
                                                  goto ldv_48327;
  ldv_48327: 
#line 655 
  ;
  
#line 651 
  i = (unsigned char)0U;
  
#line 651 
  goto ldv_48329;
  ldv_48328: 
#line 652 
  ;
  
#line 652 
  *(regs_buff + ((int)i + 255)) = igb_rd32(hw,(unsigned int)(((int)i + 5760) * 4));
  
#line 651 
  i = (u8)((int)i + 1);
  ldv_48329: 
#line 652 
  ;
  
#line 651 
  if ((unsigned int)i <= 31U) 
#line 653 
                              goto ldv_48328; else 
#line 656 
                                                   goto ldv_48330;
  ldv_48330: 
#line 657 
  ;
  
#line 653 
  i = (unsigned char)0U;
  
#line 653 
  goto ldv_48332;
  ldv_48331: 
#line 654 
  ;
  
#line 654 
  *(regs_buff + ((int)i + 287)) = igb_rd32(hw,(unsigned int)(((int)i + 4608) * 8));
  
#line 653 
  i = (u8)((int)i + 1);
  ldv_48332: 
#line 654 
  ;
  
#line 653 
  if ((int)i >= 0) 
#line 655 
                   goto ldv_48331; else 
#line 658 
                                        goto ldv_48333;
  ldv_48333: 
#line 659 
  ;
  
#line 655 
  i = (unsigned char)0U;
  
#line 655 
  goto ldv_48335;
  ldv_48334: 
#line 656 
  ;
  
#line 656 
  *(regs_buff + ((int)i + 415)) = igb_rd32(hw,(unsigned int)(((int)i + 4864) * 8));
  
#line 655 
  i = (u8)((int)i + 1);
  ldv_48335: 
#line 656 
  ;
  
#line 655 
  if ((int)i >= 0) 
#line 657 
                   goto ldv_48334; else 
#line 660 
                                        goto ldv_48336;
  ldv_48336: 
#line 661 
  ;
  
#line 657 
  i = (unsigned char)0U;
  
#line 657 
  goto ldv_48338;
  ldv_48337: 
#line 658 
  ;
  
#line 658 
  *(regs_buff + ((int)i + 543)) = igb_rd32(hw,(unsigned int)(((int)i + 3040) * 8));
  
#line 657 
  i = (u8)((int)i + 1);
  ldv_48338: 
#line 658 
  ;
  
#line 657 
  if ((unsigned int)i <= 3U) 
#line 659 
                             goto ldv_48337; else 
#line 662 
                                                  goto ldv_48339;
  ldv_48339: 
#line 663 
  ;
  
#line 660 
  *(regs_buff + 547U) = igb_rd32(hw,13328U);
  
#line 661 
  *(regs_buff + 548U) = igb_rd32(hw,13336U);
  
#line 662 
  *(regs_buff + 549U) = igb_rd32(hw,13344U);
  
#line 663 
  *(regs_buff + 550U) = igb_rd32(hw,13360U);
  
#line 665 
  if (hw->mac.type > (unsigned int)e1000_82580) {
    
#line 666 
    *(regs_buff + 551U) = (unsigned int)adapter->stats.o2bgptc;
    
#line 667 
    *(regs_buff + 552U) = (unsigned int)adapter->stats.b2ospc;
    
#line 668 
    *(regs_buff + 553U) = (unsigned int)adapter->stats.o2bspc;
    
#line 669 
    *(regs_buff + 554U) = (unsigned int)adapter->stats.b2ogprc;
  }
  else ;
  
#line 672 
  if (hw->mac.type != (unsigned int)e1000_82576) 
#line 673 
                                                 goto return_label; else ;
  
#line 674 
  i = (unsigned char)0U;
  
#line 674 
  goto ldv_48341;
  ldv_48340: 
#line 675 
  ;
  
#line 675 
  if ((int)i + 4 <= 3) 
#line 675 
                       tmp_18 = ((int)i + 4) * 256 + 10252; else 
#line 675 
                                                                 tmp_18 = ((int)i + 4) * 64 + 49164;
  
#line 675 
  ;
  
#line 675 
  *(regs_buff + ((int)i + 555)) = igb_rd32(hw,(unsigned int)tmp_18);
  
#line 674 
  i = (u8)((int)i + 1);
  ldv_48341: 
#line 675 
  ;
  
#line 674 
  if ((unsigned int)i <= 11U) 
#line 676 
                              goto ldv_48340; else 
#line 679 
                                                   goto ldv_48342;
  ldv_48342: 
#line 680 
  ;
  
#line 676 
  i = (unsigned char)0U;
  
#line 676 
  goto ldv_48344;
  ldv_48343: 
#line 677 
  ;
  
#line 677 
  *(regs_buff + ((int)i + 567)) = igb_rd32(hw,(unsigned int)(((int)i + 5412) * 4));
  
#line 676 
  i = (u8)((int)i + 1);
  ldv_48344: 
#line 677 
  ;
  
#line 676 
  if ((unsigned int)i <= 3U) 
#line 678 
                             goto ldv_48343; else 
#line 681 
                                                  goto ldv_48345;
  ldv_48345: 
#line 682 
  ;
  
#line 678 
  i = (unsigned char)0U;
  
#line 678 
  goto ldv_48347;
  ldv_48346: 
#line 679 
  ;
  
#line 679 
  if ((int)i + 4 <= 3) 
#line 679 
                       tmp_19 = ((int)i + 44) * 256; else 
#line 679 
                                                          tmp_19 = ((int)i + 772) * 64;
  
#line 679 
  ;
  
#line 679 
  *(regs_buff + ((int)i + 571)) = igb_rd32(hw,(unsigned int)tmp_19);
  
#line 678 
  i = (u8)((int)i + 1);
  ldv_48347: 
#line 679 
  ;
  
#line 678 
  if ((unsigned int)i <= 11U) 
#line 680 
                              goto ldv_48346; else 
#line 683 
                                                   goto ldv_48348;
  ldv_48348: 
#line 684 
  ;
  
#line 680 
  i = (unsigned char)0U;
  
#line 680 
  goto ldv_48350;
  ldv_48349: 
#line 681 
  ;
  
#line 681 
  if ((int)i + 4 <= 3) 
#line 681 
                       tmp_20 = ((int)i + 4) * 256 + 10244; else 
#line 681 
                                                                 tmp_20 = ((int)i + 4) * 64 + 49156;
  
#line 681 
  ;
  
#line 681 
  *(regs_buff + ((int)i + 583)) = igb_rd32(hw,(unsigned int)tmp_20);
  
#line 680 
  i = (u8)((int)i + 1);
  ldv_48350: 
#line 681 
  ;
  
#line 680 
  if ((unsigned int)i <= 11U) 
#line 682 
                              goto ldv_48349; else 
#line 685 
                                                   goto ldv_48351;
  ldv_48351: 
#line 686 
  ;
  
#line 682 
  i = (unsigned char)0U;
  
#line 682 
  goto ldv_48353;
  ldv_48352: 
#line 683 
  ;
  
#line 683 
  if ((int)i + 4 <= 3) 
#line 683 
                       tmp_21 = ((int)i + 4) * 256 + 10248; else 
#line 683 
                                                                 tmp_21 = ((int)i + 4) * 64 + 49160;
  
#line 683 
  ;
  
#line 683 
  *(regs_buff + ((int)i + 595)) = igb_rd32(hw,(unsigned int)tmp_21);
  
#line 682 
  i = (u8)((int)i + 1);
  ldv_48353: 
#line 683 
  ;
  
#line 682 
  if ((unsigned int)i <= 11U) 
#line 684 
                              goto ldv_48352; else 
#line 687 
                                                   goto ldv_48354;
  ldv_48354: 
#line 688 
  ;
  
#line 684 
  i = (unsigned char)0U;
  
#line 684 
  goto ldv_48356;
  ldv_48355: 
#line 685 
  ;
  
#line 685 
  if ((int)i + 4 <= 3) 
#line 685 
                       tmp_22 = ((int)i + 4) * 256 + 10256; else 
#line 685 
                                                                 tmp_22 = ((int)i + 4) * 64 + 49168;
  
#line 685 
  ;
  
#line 685 
  *(regs_buff + ((int)i + 607)) = igb_rd32(hw,(unsigned int)tmp_22);
  
#line 684 
  i = (u8)((int)i + 1);
  ldv_48356: 
#line 685 
  ;
  
#line 684 
  if ((unsigned int)i <= 11U) 
#line 686 
                              goto ldv_48355; else 
#line 689 
                                                   goto ldv_48357;
  ldv_48357: 
#line 690 
  ;
  
#line 686 
  i = (unsigned char)0U;
  
#line 686 
  goto ldv_48359;
  ldv_48358: 
#line 687 
  ;
  
#line 687 
  if ((int)i + 4 <= 3) 
#line 687 
                       tmp_23 = ((int)i + 4) * 256 + 10264; else 
#line 687 
                                                                 tmp_23 = ((int)i + 4) * 64 + 49176;
  
#line 687 
  ;
  
#line 687 
  *(regs_buff + ((int)i + 619)) = igb_rd32(hw,(unsigned int)tmp_23);
  
#line 686 
  i = (u8)((int)i + 1);
  ldv_48359: 
#line 687 
  ;
  
#line 686 
  if ((unsigned int)i <= 11U) 
#line 688 
                              goto ldv_48358; else 
#line 691 
                                                   goto ldv_48360;
  ldv_48360: 
#line 692 
  ;
  
#line 688 
  i = (unsigned char)0U;
  
#line 688 
  goto ldv_48362;
  ldv_48361: 
#line 689 
  ;
  
#line 689 
  if ((int)i + 4 <= 3) 
#line 689 
                       tmp_24 = ((int)i + 4) * 256 + 10280; else 
#line 689 
                                                                 tmp_24 = ((int)i + 4) * 64 + 49192;
  
#line 689 
  ;
  
#line 689 
  *(regs_buff + ((int)i + 631)) = igb_rd32(hw,(unsigned int)tmp_24);
  
#line 688 
  i = (u8)((int)i + 1);
  ldv_48362: 
#line 689 
  ;
  
#line 688 
  if ((unsigned int)i <= 11U) 
#line 690 
                              goto ldv_48361; else 
#line 693 
                                                   goto ldv_48363;
  ldv_48363: 
#line 694 
  ;
  
#line 691 
  i = (unsigned char)0U;
  
#line 691 
  goto ldv_48365;
  ldv_48364: 
#line 692 
  ;
  
#line 692 
  if ((int)i + 4 <= 3) 
#line 692 
                       tmp_25 = ((int)i + 60) * 256; else 
#line 692 
                                                          tmp_25 = ((int)i + 900) * 64;
  
#line 692 
  ;
  
#line 692 
  *(regs_buff + ((int)i + 643)) = igb_rd32(hw,(unsigned int)tmp_25);
  
#line 691 
  i = (u8)((int)i + 1);
  ldv_48365: 
#line 692 
  ;
  
#line 691 
  if ((unsigned int)i <= 11U) 
#line 693 
                              goto ldv_48364; else 
#line 696 
                                                   goto ldv_48366;
  ldv_48366: 
#line 697 
  ;
  
#line 693 
  i = (unsigned char)0U;
  
#line 693 
  goto ldv_48368;
  ldv_48367: 
#line 694 
  ;
  
#line 694 
  if ((int)i + 4 <= 3) 
#line 694 
                       tmp_26 = ((int)i + 4) * 256 + 14340; else 
#line 694 
                                                                 tmp_26 = ((int)i + 4) * 64 + 57348;
  
#line 694 
  ;
  
#line 694 
  *(regs_buff + ((int)i + 655)) = igb_rd32(hw,(unsigned int)tmp_26);
  
#line 693 
  i = (u8)((int)i + 1);
  ldv_48368: 
#line 694 
  ;
  
#line 693 
  if ((unsigned int)i <= 11U) 
#line 695 
                              goto ldv_48367; else 
#line 698 
                                                   goto ldv_48369;
  ldv_48369: 
#line 699 
  ;
  
#line 695 
  i = (unsigned char)0U;
  
#line 695 
  goto ldv_48371;
  ldv_48370: 
#line 696 
  ;
  
#line 696 
  if ((int)i + 4 <= 3) 
#line 696 
                       tmp_27 = ((int)i + 4) * 256 + 14344; else 
#line 696 
                                                                 tmp_27 = ((int)i + 4) * 64 + 57352;
  
#line 696 
  ;
  
#line 696 
  *(regs_buff + ((int)i + 667)) = igb_rd32(hw,(unsigned int)tmp_27);
  
#line 695 
  i = (u8)((int)i + 1);
  ldv_48371: 
#line 696 
  ;
  
#line 695 
  if ((unsigned int)i <= 11U) 
#line 697 
                              goto ldv_48370; else 
#line 700 
                                                   goto ldv_48372;
  ldv_48372: 
#line 701 
  ;
  
#line 697 
  i = (unsigned char)0U;
  
#line 697 
  goto ldv_48374;
  ldv_48373: 
#line 698 
  ;
  
#line 698 
  if ((int)i + 4 <= 3) 
#line 698 
                       tmp_28 = ((int)i + 4) * 256 + 14352; else 
#line 698 
                                                                 tmp_28 = ((int)i + 4) * 64 + 57360;
  
#line 698 
  ;
  
#line 698 
  *(regs_buff + ((int)i + 679)) = igb_rd32(hw,(unsigned int)tmp_28);
  
#line 697 
  i = (u8)((int)i + 1);
  ldv_48374: 
#line 698 
  ;
  
#line 697 
  if ((unsigned int)i <= 11U) 
#line 699 
                              goto ldv_48373; else 
#line 702 
                                                   goto ldv_48375;
  ldv_48375: 
#line 703 
  ;
  
#line 699 
  i = (unsigned char)0U;
  
#line 699 
  goto ldv_48377;
  ldv_48376: 
#line 700 
  ;
  
#line 700 
  if ((int)i + 4 <= 3) 
#line 700 
                       tmp_29 = ((int)i + 4) * 256 + 14360; else 
#line 700 
                                                                 tmp_29 = ((int)i + 4) * 64 + 57368;
  
#line 700 
  ;
  
#line 700 
  *(regs_buff + ((int)i + 691)) = igb_rd32(hw,(unsigned int)tmp_29);
  
#line 699 
  i = (u8)((int)i + 1);
  ldv_48377: 
#line 700 
  ;
  
#line 699 
  if ((unsigned int)i <= 11U) 
#line 701 
                              goto ldv_48376; else 
#line 704 
                                                   goto ldv_48378;
  ldv_48378: 
#line 705 
  ;
  
#line 701 
  i = (unsigned char)0U;
  
#line 701 
  goto ldv_48380;
  ldv_48379: 
#line 702 
  ;
  
#line 702 
  if ((int)i + 4 <= 3) 
#line 702 
                       tmp_30 = ((int)i + 4) * 256 + 14376; else 
#line 702 
                                                                 tmp_30 = ((int)i + 4) * 64 + 57384;
  
#line 702 
  ;
  
#line 702 
  *(regs_buff + ((int)i + 703)) = igb_rd32(hw,(unsigned int)tmp_30);
  
#line 701 
  i = (u8)((int)i + 1);
  ldv_48380: 
#line 702 
  ;
  
#line 701 
  if ((unsigned int)i <= 11U) 
#line 703 
                              goto ldv_48379; else 
#line 706 
                                                   goto ldv_48381;
  ldv_48381: 
#line 707 
  ;
  
#line 703 
  i = (unsigned char)0U;
  
#line 703 
  goto ldv_48383;
  ldv_48382: 
#line 704 
  ;
  
#line 704 
  if ((int)i + 4 <= 3) 
#line 704 
                       tmp_31 = ((int)i + 4) * 256 + 14392; else 
#line 704 
                                                                 tmp_31 = ((int)i + 4) * 64 + 57400;
  
#line 704 
  ;
  
#line 704 
  *(regs_buff + ((int)i + 715)) = igb_rd32(hw,(unsigned int)tmp_31);
  
#line 703 
  i = (u8)((int)i + 1);
  ldv_48383: 
#line 704 
  ;
  
#line 703 
  if ((unsigned int)i <= 11U) 
#line 705 
                              goto ldv_48382; else 
#line 708 
                                                   goto ldv_48384;
  ldv_48384: 
#line 709 
  ;
  
#line 705 
  i = (unsigned char)0U;
  
#line 705 
  goto ldv_48386;
  ldv_48385: 
#line 706 
  ;
  
#line 706 
  if ((int)i + 4 <= 3) 
#line 706 
                       tmp_32 = ((int)i + 4) * 256 + 14396; else 
#line 706 
                                                                 tmp_32 = ((int)i + 4) * 64 + 57404;
  
#line 706 
  ;
  
#line 706 
  *(regs_buff + ((int)i + 727)) = igb_rd32(hw,(unsigned int)tmp_32);
  
#line 705 
  i = (u8)((int)i + 1);
  ldv_48386: 
#line 706 
  ;
  
#line 705 
  if ((unsigned int)i <= 11U) 
#line 707 
                              goto ldv_48385; else 
#line 710 
                                                   goto ldv_48387;
  ldv_48387: 
#line 711 
  ;
  return_label: 
#line 712 
                return;
}


#line 709  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_eeprom_len(struct net_device *netdev)
{
  int __retres;
  
#line 711 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 712 
  __retres = (int)adapter->hw.nvm.word_size * 2;
  
#line 712 
  return __retres;
}


#line 715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  int __retres;
  u16 *eeprom_buff;
  int first_word;
  int last_word;
  u16 i;
  
#line 718 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 719 
  struct e1000_hw *hw = & adapter->hw;
  
#line 722 
  int ret_val = 0;
  
#line 725 
  if (eeprom->len == 0U) {
    
#line 726 
    __retres = -22;
    
#line 726 
    goto return_label;
  }
  else ;
  
#line 728 
  eeprom->magic = (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16));
  
#line 730 
  first_word = (int)(eeprom->offset >> 1);
  
#line 731 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  
#line 733 
  eeprom_buff = (u16 *)kmalloc((unsigned long)((last_word - first_word) + 1) * 2UL,208U);
  
#line 735 
  if (eeprom_buff == (u16 *)0U) {
    
#line 736 
    __retres = -12;
    
#line 736 
    goto return_label;
  }
  else ;
  
#line 738 
  if (hw->nvm.type == (unsigned int)e1000_nvm_eeprom_spi) 
#line 739 
                                                          ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  else {
    
#line 743 
    i = (unsigned short)0U;
    
#line 743 
    goto ldv_48406;
    ldv_48405: 
#line 744 
    ;
    
#line 744 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word) + (int)i),(unsigned short)1,eeprom_buff + (int)i);
    
#line 746 
    if (ret_val != 0) 
#line 747 
                      goto ldv_48404; else ;
    
#line 743 
    i = (u16)((int)i + 1);
    ldv_48406: 
#line 744 
    ;
    
#line 743 
    if ((int)i < (last_word - first_word) + 1) 
#line 745 
                                               goto ldv_48405; else 
#line 748 
                                                                    goto ldv_48404;
    ldv_48404: 
#line 749 
    ;
  }
  
#line 752 
  i = (unsigned short)0U;
  
#line 752 
  goto ldv_48408;
  ldv_48407: 
#line 753 
  ;
  
#line 753 
  u16 *tmp_2 = eeprom_buff + (int)i;
  
#line 752 
  i = (u16)((int)i + 1);
  ldv_48408: 
#line 753 
  ;
  
#line 752 
  if ((int)i < (last_word - first_word) + 1) 
#line 754 
                                             goto ldv_48407; else 
#line 757 
                                                                  goto ldv_48409;
  ldv_48409: 
#line 758 
  ;
  
#line 755 
  memcpy((void *)bytes,(void const *)eeprom_buff + (eeprom->offset & 1U),(unsigned long)eeprom->len);
  
#line 757 
  kfree((void const *)eeprom_buff);
  
#line 759 
  __retres = ret_val;
  return_label: 
#line 759 
                return __retres;
}


#line 762  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  int __retres;
  u16 *eeprom_buff;
  void *ptr;
  int max_len;
  int first_word;
  int last_word;
  u16 i;
  
#line 765 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 766 
  struct e1000_hw *hw = & adapter->hw;
  
#line 769 
  int ret_val = 0;
  
#line 772 
  if (eeprom->len == 0U) {
    
#line 773 
    __retres = -95;
    
#line 773 
    goto return_label;
  }
  else ;
  
#line 775 
  if (hw->mac.type > (unsigned int)e1000_i354) {
    int tmp_1;
    bool tmp_0;
    
#line 776 
    tmp_0 = igb_get_flash_presence_i210(hw);
    
#line 776 
    if (tmp_0) 
#line 776 
               tmp_1 = 0; else 
#line 776 
                               tmp_1 = 1;
    
#line 776 
    if (tmp_1) {
      
#line 777 
      __retres = -95;
      
#line 777 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 780 
  if (eeprom->magic != (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16))) {
    
#line 781 
    __retres = -14;
    
#line 781 
    goto return_label;
  }
  else ;
  
#line 783 
  max_len = (int)hw->nvm.word_size * 2;
  
#line 785 
  first_word = (int)(eeprom->offset >> 1);
  
#line 786 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  
#line 787 
  eeprom_buff = (u16 *)kmalloc((unsigned long)max_len,208U);
  
#line 788 
  if (eeprom_buff == (u16 *)0U) {
    
#line 789 
    __retres = -12;
    
#line 789 
    goto return_label;
  }
  else ;
  
#line 791 
  ptr = (void *)eeprom_buff;
  
#line 793 
  if ((eeprom->offset & 1U) != 0U) {
    
#line 797 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)1,eeprom_buff);
    
#line 799 
    ptr += 1;
  }
  else ;
  
#line 801 
  if (((eeprom->offset + eeprom->len) & 1U) != 0U && ret_val == 0) 
#line 805 
                                                                   ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)last_word)),(unsigned short)1,eeprom_buff + (last_word - first_word)); else ;
  
#line 810 
  i = (unsigned short)0U;
  
#line 810 
  goto ldv_48425;
  ldv_48424: 
#line 811 
  ;
  
#line 811 
  u16 *tmp_3 = eeprom_buff + (int)i;
  
#line 810 
  i = (u16)((int)i + 1);
  ldv_48425: 
#line 811 
  ;
  
#line 810 
  if ((int)i < (last_word - first_word) + 1) 
#line 812 
                                             goto ldv_48424; else 
#line 815 
                                                                  goto ldv_48426;
  ldv_48426: 
#line 816 
  ;
  
#line 813 
  memcpy(ptr,(void const *)bytes,(unsigned long)eeprom->len);
  
#line 815 
  i = (unsigned short)0U;
  
#line 815 
  goto ldv_48428;
  ldv_48427: 
#line 816 
  ;
  
#line 816 
  *(eeprom_buff + (int)i) = *(eeprom_buff + (int)i);
  
#line 815 
  i = (u16)((int)i + 1);
  ldv_48428: 
#line 816 
  ;
  
#line 815 
  if ((int)i < (last_word - first_word) + 1) 
#line 817 
                                             goto ldv_48427; else 
#line 820 
                                                                  goto ldv_48429;
  ldv_48429: 
#line 821 
  ;
  
#line 818 
  ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  
#line 822 
  if (ret_val == 0) 
#line 823 
                    (*(hw->nvm.ops.update))(hw); else ;
  
#line 825 
  igb_set_fw_version(adapter);
  
#line 826 
  kfree((void const *)eeprom_buff);
  
#line 827 
  __retres = ret_val;
  return_label: 
#line 827 
                return __retres;
}


#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  char const *tmp_0;
  void *tmp_1;
  void *tmp_2;
  int tmp_3;
  int tmp_4;
  
#line 833 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 835 
  strlcpy((char *)(& drvinfo->driver),(char const *)(& igb_driver_name),32UL);
  
#line 836 
  strlcpy((char *)(& drvinfo->version),(char const *)(& igb_driver_version),32UL);
  
#line 841 
  strlcpy((char *)(& drvinfo->fw_version),(char const *)(& adapter->fw_version),32UL);
  
#line 843 
  tmp_0 = pci_name((struct pci_dev const *)adapter->pdev);
  
#line 843 
  ;
  
#line 843 
  strlcpy((char *)(& drvinfo->bus_info),tmp_0,32UL);
  
#line 845 
  tmp_1 = netdev_priv((struct net_device const *)netdev);
  
#line 845 
  tmp_2 = netdev_priv((struct net_device const *)netdev);
  
#line 845 
  drvinfo->n_stats = ((unsigned int)((unsigned long)((struct igb_adapter *)tmp_1)->num_rx_queues) * 5U + (unsigned int)(((struct igb_adapter *)tmp_2)->num_tx_queues * 3)) + 50U;
  
#line 846 
  drvinfo->testinfo_len = 5U;
  
#line 847 
  tmp_3 = igb_get_regs_len(netdev);
  
#line 847 
  drvinfo->regdump_len = (unsigned int)tmp_3;
  
#line 848 
  tmp_4 = igb_get_eeprom_len(netdev);
  
#line 848 
  drvinfo->eedump_len = (unsigned int)tmp_4;
  
#line 849 
  return;
}


#line 851  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  
#line 854 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 856 
  ring->rx_max_pending = 4096U;
  
#line 857 
  ring->tx_max_pending = 4096U;
  
#line 858 
  ring->rx_pending = (unsigned int)adapter->rx_ring_count;
  
#line 859 
  ring->tx_pending = (unsigned int)adapter->tx_ring_count;
  
#line 860 
  return;
}


#line 862  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  int __retres;
  struct igb_ring *temp_ring;
  int i;
  u16 new_rx_count;
  u16 new_tx_count;
  u32 tmp_1;
  int tmp_3;
  u32 tmp_5;
  int tmp_7;
  int tmp_8;
  int tmp_10;
  bool tmp_9;
  
#line 865 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 867 
  int err = 0;
  
#line 870 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) {
    
#line 871 
    __retres = -22;
    
#line 871 
    goto return_label;
  }
  else ;
  {
    u32 tmp_0;
    
#line 873 
    u32 __min1 = ring->rx_pending;
    
#line 873 
    u32 __min2 = 4096U;
    
#line 873 
    if (__min1 < __min2) 
#line 873 
                         tmp_0 = __min1; else 
#line 873 
                                              tmp_0 = __min2;
    
#line 873 
    tmp_1 = tmp_0;
  }
  
#line 873 
  new_rx_count = (unsigned short)tmp_1;
  {
    int tmp_2;
    
#line 874 
    u16 __max1 = new_rx_count;
    
#line 874 
    u16 __max2 = (unsigned short)80U;
    
#line 874 
    if ((int)__max1 > (int)__max2) 
#line 874 
                                   tmp_2 = (int)__max1; else 
#line 874 
                                                             tmp_2 = (int)__max2;
    
#line 874 
    tmp_3 = tmp_2;
  }
  
#line 874 
  new_rx_count = (unsigned short)tmp_3;
  
#line 875 
  new_rx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_rx_count + 7U)) & 65528U);
  {
    u32 tmp_4;
    
#line 877 
    u32 __min1_0 = ring->tx_pending;
    
#line 877 
    u32 __min2_0 = 4096U;
    
#line 877 
    if (__min1_0 < __min2_0) 
#line 877 
                             tmp_4 = __min1_0; else 
#line 877 
                                                    tmp_4 = __min2_0;
    
#line 877 
    tmp_5 = tmp_4;
  }
  
#line 877 
  new_tx_count = (unsigned short)tmp_5;
  {
    int tmp_6;
    
#line 878 
    u16 __max1_0 = new_tx_count;
    
#line 878 
    u16 __max2_0 = (unsigned short)80U;
    
#line 878 
    if ((int)__max1_0 > (int)__max2_0) 
#line 878 
                                       tmp_6 = (int)__max1_0; else 
#line 878 
                                                                   tmp_6 = (int)__max2_0;
    
#line 878 
    tmp_7 = tmp_6;
  }
  
#line 878 
  new_tx_count = (unsigned short)tmp_7;
  
#line 879 
  new_tx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_tx_count + 7U)) & 65528U);
  
#line 881 
  if ((int)adapter->tx_ring_count == (int)new_tx_count && (int)adapter->rx_ring_count == (int)new_rx_count) {
    
#line 884 
    __retres = 0;
    
#line 884 
    goto return_label;
  }
  else ;
  
#line 887 
  goto ldv_48463;
  ldv_48462: 
#line 888 
  ;
  
#line 888 
  usleep_range(1000UL,2000UL);
  ldv_48463: 
#line 889 
  ;
  
#line 887 
  tmp_8 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 887 
  if (tmp_8 != 0) 
#line 889 
                  goto ldv_48462; else 
#line 892 
                                       goto ldv_48464;
  ldv_48464: 
#line 893 
  ;
  
#line 890 
  tmp_9 = netif_running((struct net_device const *)adapter->netdev);
  
#line 890 
  if (tmp_9) 
#line 890 
             tmp_10 = 0; else 
#line 890 
                              tmp_10 = 1;
  
#line 890 
  if (tmp_10) {
    
#line 891 
    i = 0;
    
#line 891 
    goto ldv_48466;
    ldv_48465: 
#line 892 
    ;
    
#line 892 
    (adapter->tx_ring[i])->count = new_tx_count;
    
#line 891 
    i += 1;
    ldv_48466: 
#line 892 
    ;
    
#line 891 
    if (adapter->num_tx_queues > i) 
#line 893 
                                    goto ldv_48465; else 
#line 896 
                                                         goto ldv_48467;
    ldv_48467: 
#line 897 
    ;
    
#line 893 
    i = 0;
    
#line 893 
    goto ldv_48469;
    ldv_48468: 
#line 894 
    ;
    
#line 894 
    (adapter->rx_ring[i])->count = new_rx_count;
    
#line 893 
    i += 1;
    ldv_48469: 
#line 894 
    ;
    
#line 893 
    if (adapter->num_rx_queues > i) 
#line 895 
                                    goto ldv_48468; else 
#line 898 
                                                         goto ldv_48470;
    ldv_48470: 
#line 899 
    ;
    
#line 895 
    adapter->tx_ring_count = new_tx_count;
    
#line 896 
    adapter->rx_ring_count = new_rx_count;
    
#line 897 
    goto clear_reset;
  }
  else ;
  
#line 900 
  if (adapter->num_tx_queues > adapter->num_rx_queues) 
#line 901 
                                                       temp_ring = (struct igb_ring *)vmalloc((unsigned long)adapter->num_tx_queues * 4096UL); else 
                                                                    
#line 904 
                                                                    temp_ring = (struct igb_ring *)vmalloc((unsigned long)adapter->num_rx_queues * 4096UL);
  
#line 907 
  if (temp_ring == (struct igb_ring *)0) {
    
#line 908 
    err = -12;
    
#line 909 
    goto clear_reset;
  }
  else ;
  
#line 912 
  igb_down(adapter);
  
#line 918 
  if ((int)adapter->tx_ring_count != (int)new_tx_count) {
    
#line 919 
    i = 0;
    
#line 919 
    goto ldv_48477;
    ldv_48476: 
#line 920 
    ;
    
#line 920 
    memcpy((void *)(temp_ring + i),(void const *)adapter->tx_ring[i],4096UL);
    
#line 923 
    (temp_ring + i)->count = new_tx_count;
    
#line 924 
    err = igb_setup_tx_resources(temp_ring + i);
    
#line 925 
    if (err != 0) {
      
#line 926 
      goto ldv_48473;
      ldv_48472: 
#line 927 
      ;
      
#line 927 
      i -= 1;
      
#line 928 
      igb_free_tx_resources(temp_ring + i);
      ldv_48473: 
#line 929 
      ;
      
#line 926 
      if (i != 0) 
#line 928 
                  goto ldv_48472; else 
#line 931 
                                       goto ldv_48474;
      ldv_48474: 
#line 932 
      ;
      
#line 930 
      goto err_setup;
    }
    else ;
    
#line 919 
    i += 1;
    ldv_48477: 
#line 920 
    ;
    
#line 919 
    if (adapter->num_tx_queues > i) 
#line 921 
                                    goto ldv_48476; else 
#line 924 
                                                         goto ldv_48478;
    ldv_48478: 
#line 925 
    ;
    
#line 934 
    i = 0;
    
#line 934 
    goto ldv_48480;
    ldv_48479: 
#line 935 
    ;
    
#line 935 
    igb_free_tx_resources(adapter->tx_ring[i]);
    
#line 937 
    memcpy((void *)adapter->tx_ring[i],(void const *)(temp_ring + i),4096UL);
    
#line 934 
    i += 1;
    ldv_48480: 
#line 935 
    ;
    
#line 934 
    if (adapter->num_tx_queues > i) 
#line 936 
                                    goto ldv_48479; else 
#line 939 
                                                         goto ldv_48481;
    ldv_48481: 
#line 940 
    ;
    
#line 941 
    adapter->tx_ring_count = new_tx_count;
  }
  else ;
  
#line 944 
  if ((int)adapter->rx_ring_count != (int)new_rx_count) {
    
#line 945 
    i = 0;
    
#line 945 
    goto ldv_48486;
    ldv_48485: 
#line 946 
    ;
    
#line 946 
    memcpy((void *)(temp_ring + i),(void const *)adapter->rx_ring[i],4096UL);
    
#line 949 
    (temp_ring + i)->count = new_rx_count;
    
#line 950 
    err = igb_setup_rx_resources(temp_ring + i);
    
#line 951 
    if (err != 0) {
      
#line 952 
      goto ldv_48483;
      ldv_48482: 
#line 953 
      ;
      
#line 953 
      i -= 1;
      
#line 954 
      igb_free_rx_resources(temp_ring + i);
      ldv_48483: 
#line 955 
      ;
      
#line 952 
      if (i != 0) 
#line 954 
                  goto ldv_48482; else 
#line 957 
                                       goto ldv_48484;
      ldv_48484: 
#line 958 
      ;
      
#line 956 
      goto err_setup;
    }
    else ;
    
#line 945 
    i += 1;
    ldv_48486: 
#line 946 
    ;
    
#line 945 
    if (adapter->num_rx_queues > i) 
#line 947 
                                    goto ldv_48485; else 
#line 950 
                                                         goto ldv_48487;
    ldv_48487: 
#line 951 
    ;
    
#line 961 
    i = 0;
    
#line 961 
    goto ldv_48489;
    ldv_48488: 
#line 962 
    ;
    
#line 962 
    igb_free_rx_resources(adapter->rx_ring[i]);
    
#line 964 
    memcpy((void *)adapter->rx_ring[i],(void const *)(temp_ring + i),4096UL);
    
#line 961 
    i += 1;
    ldv_48489: 
#line 962 
    ;
    
#line 961 
    if (adapter->num_rx_queues > i) 
#line 963 
                                    goto ldv_48488; else 
#line 966 
                                                         goto ldv_48490;
    ldv_48490: 
#line 967 
    ;
    
#line 968 
    adapter->rx_ring_count = new_rx_count;
  }
  else ;
  err_setup: 
#line 970 
  ;
  
#line 971 
  igb_up(adapter);
  
#line 972 
  vfree((void const *)temp_ring);
  clear_reset: 
#line 973 
  ;
  
#line 974 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 975 
  __retres = err;
  return_label: 
#line 975 
                return __retres;
}


#line 1006  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_i210[22U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)14360U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 2416967679U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)0U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)0U, .test_type = (unsigned short)0U, .mask = 0U, .write = 0U}};

#line 1036  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_i350[33U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)56U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294901760U, .write = 4294901760U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)49408U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)49412U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)49416U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)49432U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)57600U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)57604U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)57608U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)14360U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)57624U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 3288334335U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 3288334335U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)0U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)0U, .test_type = (unsigned short)0U, .mask = 0U, .write = 0U}};

#line 1079  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_82580[33U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)56U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)49408U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)49412U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)49416U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)49432U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)57600U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)57604U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)57608U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)14360U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)57624U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 2214592511U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)8U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)8U, .test_type = (unsigned short)6U, .mask = 2214592511U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)0U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)0U, .test_type = (unsigned short)0U, .mask = 0U, .write = 0U}};

#line 1122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_82576[35U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)56U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)49408U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)49412U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)49416U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)10280U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)3U, .mask = 0U, .write = 33554432U}, {.reg = (unsigned short)49448U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)3U, .mask = 0U, .write = 33554432U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)49432U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)10280U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)3U, .mask = 0U, .write = 0U}, {.reg = (unsigned short)49448U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)3U, .mask = 0U, .write = 0U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)57600U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)57604U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)57608U, .reg_offset = (unsigned short)64U, .array_len = (unsigned short)12U, .test_type = (unsigned short)1U, .mask = 1048560U, .write = 1048575U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720126U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 2214592511U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)8U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21728U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)8U, .test_type = (unsigned short)6U, .mask = 2214592511U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)0U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)0U, .test_type = (unsigned short)0U, .mask = 0U, .write = 0U}};

#line 1165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct igb_reg_test reg_test_82575[25U] = {{.reg = (unsigned short)40U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)44U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)48U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 4294967295U}, {.reg = (unsigned short)56U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10240U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)10244U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)10248U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)10280U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)3U, .mask = 0U, .write = 33554432U}, {.reg = (unsigned short)10264U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)10280U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)3U, .mask = 0U, .write = 0U}, {.reg = (unsigned short)8552U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65520U, .write = 65520U}, {.reg = (unsigned short)368U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)1040U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 1073741823U, .write = 1073741823U}, {.reg = (unsigned short)14336U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)14340U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)14344U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)4U, .test_type = (unsigned short)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720894U, .write = 4194299U}, {.reg = (unsigned short)256U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 80720894U, .write = 4294967295U}, {.reg = (unsigned short)1024U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)2U, .mask = 4294967295U, .write = 0U}, {.reg = (unsigned short)376U, .reg_offset = (unsigned short)256U, .array_len = (unsigned short)1U, .test_type = (unsigned short)1U, .mask = 3221291007U, .write = 65535U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)16U, .test_type = (unsigned short)6U, .mask = 2148532223U, .write = 4294967295U}, {.reg = (unsigned short)20992U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)128U, .test_type = (unsigned short)4U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)0U, .reg_offset = (unsigned short)0U, .array_len = (unsigned short)0U, .test_type = (unsigned short)0U, .mask = 0U, .write = 0U}};

#line 1196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static bool reg_pattern_test(struct igb_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  bool __retres;
  u32 pat;
  u32 val;
  u32 tmp_0;
  
#line 1199 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1201 
  u32 const _test[4U] = {1515870810U, 2779096485U, 0U, 4294967295U};
  
#line 1203 
  pat = 0U;
  
#line 1203 
  goto ldv_48521;
  ldv_48520: 
#line 1204 
  ;
  {
    u8 * volatile *tmp;
    {
      
#line 1204 
      u8 *__var = (u8 *)0U;
      
#line 1204 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1204 
    u8 *hw_addr = *tmp;
    
#line 1204 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1204 
                                           writel(_test[pat] & write,(void volatile *)(hw_addr + reg)); else ;
  }
  
#line 1205 
  tmp_0 = igb_rd32(hw,(unsigned int)reg);
  
#line 1205 
  val = tmp_0 & mask;
  
#line 1206 
  if (((_test[pat] & write) & mask) != val) {
    
#line 1207 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"pattern test reg %04X failed: got 0x%08X expected 0x%08X\n",reg,val,(_test[pat] & write) & mask);
    
#line 1210 
    *data = (unsigned long long)reg;
    
#line 1211 
    __retres = (_Bool)1;
    
#line 1211 
    goto return_label;
  }
  else ;
  
#line 1203 
  pat += 1U;
  ldv_48521: 
#line 1204 
  ;
  
#line 1203 
  if (pat <= 3U) 
#line 1205 
                 goto ldv_48520; else 
#line 1208 
                                      goto ldv_48522;
  ldv_48522: 
#line 1209 
  ;
  
#line 1215 
  __retres = (_Bool)0;
  return_label: 
#line 1215 
                return __retres;
}


#line 1218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static bool reg_set_and_check(struct igb_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  bool __retres;
  u32 val;
  
#line 1221 
  struct e1000_hw *hw = & adapter->hw;
  {
    u8 * volatile *tmp;
    {
      
#line 1224 
      u8 *__var = (u8 *)0U;
      
#line 1224 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1224 
    u8 *hw_addr = *tmp;
    
#line 1224 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1224 
                                           writel(write & mask,(void volatile *)(hw_addr + reg)); else ;
  }
  
#line 1225 
  val = igb_rd32(hw,(unsigned int)reg);
  
#line 1226 
  if (((write ^ val) & mask) != 0U) {
    
#line 1227 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"set/check reg %04X test failed: got 0x%08X expected 0x%08X\n",reg,val & mask,write & mask);
    
#line 1230 
    *data = (unsigned long long)reg;
    
#line 1231 
    __retres = (_Bool)1;
    
#line 1231 
    goto return_label;
  }
  else ;
  
#line 1234 
  __retres = (_Bool)0;
  return_label: 
#line 1234 
                return __retres;
}


#line 1249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_reg_test(struct igb_adapter *adapter, u64 *data)
{
  int __retres;
  struct igb_reg_test *test;
  u32 value;
  u32 before;
  u32 after;
  u32 i;
  u32 toggle;
  u32 tmp;
  u32 tmp_1;
  
#line 1251 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1256 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)4: 
#line 1257 
    ;
    case (unsigned int)5: 
#line 1258 
    ;
    
#line 1259 
    test = (struct igb_reg_test *)(& reg_test_i350);
    
#line 1260 
    toggle = 2146431999U;
    
#line 1261 
    goto ldv_48548;
    case (unsigned int)6: 
#line 1262 
    ;
    case (unsigned int)7: 
#line 1263 
    ;
    
#line 1264 
    test = (struct igb_reg_test *)(& reg_test_i210);
    
#line 1265 
    toggle = 2146431999U;
    
#line 1266 
    goto ldv_48548;
    case (unsigned int)3: 
#line 1267 
    ;
    
#line 1268 
    test = (struct igb_reg_test *)(& reg_test_82580);
    
#line 1269 
    toggle = 2146431999U;
    
#line 1270 
    goto ldv_48548;
    case (unsigned int)2: 
#line 1271 
    ;
    
#line 1272 
    test = (struct igb_reg_test *)(& reg_test_82576);
    
#line 1273 
    toggle = 2147480575U;
    
#line 1274 
    goto ldv_48548;
    default: 
#line 1275 
    ;
    
#line 1276 
    test = (struct igb_reg_test *)(& reg_test_82575);
    
#line 1277 
    toggle = 2147480575U;
    
#line 1278 
    goto ldv_48548;
  }
  ldv_48548: 
#line 1286 
  ;
  
#line 1286 
  before = igb_rd32(hw,8U);
  
#line 1287 
  tmp = igb_rd32(hw,8U);
  
#line 1287 
  value = tmp & toggle;
  {
    u8 * volatile *tmp_0;
    {
      
#line 1288 
      u8 *__var = (u8 *)0U;
      
#line 1288 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1288 
    u8 *hw_addr = *tmp_0;
    
#line 1288 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1288 
                                           writel(toggle,(void volatile *)(hw_addr + 8U)); else ;
  }
  
#line 1289 
  tmp_1 = igb_rd32(hw,8U);
  
#line 1289 
  after = tmp_1 & toggle;
  
#line 1290 
  if (value != after) {
    
#line 1291 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"failed STATUS register test got: 0x%08X expected: 0x%08X\n",after,value);
    
#line 1294 
    *data = 1ULL;
    
#line 1295 
    __retres = 1;
    
#line 1295 
    goto return_label;
  }
  else ;
  {
    u8 * volatile *tmp_2;
    {
      
#line 1298 
      u8 *__var_0 = (u8 *)0U;
      
#line 1298 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1298 
    u8 *hw_addr_0 = *tmp_2;
    
#line 1298 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1298 
                                             writel(before,(void volatile *)(hw_addr_0 + 8U)); else ;
  }
  
#line 1303 
  goto ldv_48571;
  ldv_48570: 
#line 1304 
  ;
  
#line 1304 
  i = 0U;
  
#line 1304 
  goto ldv_48568;
  ldv_48567: 
#line 1305 
  ;
  
#line 1305 
  switch ((int)test->test_type) {
    bool tmp_3;
    bool tmp_4;
    bool tmp_5;
    bool tmp_6;
    bool tmp_7;
    case 1: 
#line 1306 
    ;
    
#line 1307 
    tmp_3 = reg_pattern_test(adapter,data,(int)((unsigned int)test->reg + (unsigned int)test->reg_offset * i),test->mask,test->write);
    
#line 1307 
    if ((int)tmp_3 != 0) {
      
#line 1307 
      __retres = 1;
      
#line 1307 
      goto return_label;
    }
    else ;
    
#line 1311 
    goto ldv_48561;
    case 2: 
#line 1312 
    ;
    
#line 1313 
    tmp_4 = reg_set_and_check(adapter,data,(int)((unsigned int)test->reg + (unsigned int)test->reg_offset * i),test->mask,test->write);
    
#line 1313 
    if ((int)tmp_4 != 0) {
      
#line 1313 
      __retres = 1;
      
#line 1313 
      goto return_label;
    }
    else ;
    
#line 1317 
    goto ldv_48561;
    case 3: 
#line 1318 
    ;
    
#line 1319 
    writel(test->write,(void volatile *)(adapter->hw.hw_addr + ((unsigned int)test->reg + (unsigned int)test->reg_offset * i)));
    
#line 1322 
    goto ldv_48561;
    case 4: 
#line 1323 
    ;
    
#line 1324 
    tmp_5 = reg_pattern_test(adapter,data,(int)((unsigned int)test->reg + i * 4U),test->mask,test->write);
    
#line 1324 
    if ((int)tmp_5 != 0) {
      
#line 1324 
      __retres = 1;
      
#line 1324 
      goto return_label;
    }
    else ;
    
#line 1327 
    goto ldv_48561;
    case 5: 
#line 1328 
    ;
    
#line 1329 
    tmp_6 = reg_pattern_test(adapter,data,(int)((unsigned int)test->reg + i * 8U),test->mask,test->write);
    
#line 1329 
    if ((int)tmp_6 != 0) {
      
#line 1329 
      __retres = 1;
      
#line 1329 
      goto return_label;
    }
    else ;
    
#line 1332 
    goto ldv_48561;
    case 6: 
#line 1333 
    ;
    
#line 1334 
    tmp_7 = reg_pattern_test(adapter,data,(int)(((unsigned int)test->reg + i * 8U) + 4U),test->mask,test->write);
    
#line 1334 
    if ((int)tmp_7 != 0) {
      
#line 1334 
      __retres = 1;
      
#line 1334 
      goto return_label;
    }
    else ;
    
#line 1337 
    goto ldv_48561;
  }
  ldv_48561: 
#line 1339 
  ;
  
#line 1304 
  i += 1U;
  ldv_48568: 
#line 1305 
  ;
  
#line 1304 
  if ((unsigned int)test->array_len > i) 
#line 1306 
                                         goto ldv_48567; else 
#line 1309 
                                                              goto ldv_48569;
  ldv_48569: 
#line 1310 
  ;
  
#line 1340 
  test += 1;
  ldv_48571: 
#line 1341 
  ;
  
#line 1303 
  if ((unsigned int)test->reg != 0U) 
#line 1305 
                                     goto ldv_48570; else 
#line 1308 
                                                          goto ldv_48572;
  ldv_48572: 
#line 1309 
  ;
  
#line 1343 
  *data = 0ULL;
  
#line 1344 
  __retres = 0;
  return_label: 
#line 1344 
                return __retres;
}


#line 1347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_eeprom_test(struct igb_adapter *adapter, u64 *data)
{
  int __retres;
  
#line 1349 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1351 
  *data = 0ULL;
  
#line 1354 
  switch ((unsigned int)hw->mac.type) {
    bool tmp_0;
    s32 tmp_1;
    case (unsigned int)6: 
#line 1355 
    ;
    case (unsigned int)7: 
#line 1356 
    ;
    
#line 1357 
    tmp_0 = igb_get_flash_presence_i210(hw);
    
#line 1357 
    if ((int)tmp_0 != 0) {
      s32 tmp;
      
#line 1358 
      tmp = (*(adapter->hw.nvm.ops.validate))(& adapter->hw);
      
#line 1358 
      if (tmp < 0) 
#line 1359 
                   *data = 2ULL; else ;
    }
    else ;
    
#line 1361 
    goto ldv_48580;
    default: 
#line 1362 
    ;
    
#line 1363 
    tmp_1 = (*(adapter->hw.nvm.ops.validate))(& adapter->hw);
    
#line 1363 
    if (tmp_1 < 0) 
#line 1364 
                   *data = 2ULL; else ;
    
#line 1365 
    goto ldv_48580;
  }
  ldv_48580: 
#line 1368 
  ;
  
#line 1368 
  __retres = (int)*data;
  
#line 1368 
  return __retres;
}


#line 1371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static irqreturn_t igb_test_intr(int irq, void *data)
{
  irqreturn_t __retres;
  u32 tmp;
  
#line 1373 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 1374 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1376 
  tmp = igb_rd32(hw,192U);
  
#line 1376 
  adapter->test_icr |= tmp;
  
#line 1378 
  __retres = IRQ_HANDLED;
  
#line 1378 
  return __retres;
}


#line 1381  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_intr_test(struct igb_adapter *adapter, u64 *data)
{
  int __retres;
  u32 mask;
  u32 ics_mask;
  char *tmp_3;
  
#line 1383 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1384 
  struct net_device *netdev = adapter->netdev;
  
#line 1385 
  u32 i = 0U;
  
#line 1385 
  u32 shared_int = 1U;
  
#line 1386 
  u32 irq = (adapter->pdev)->irq;
  
#line 1388 
  *data = 0ULL;
  
#line 1391 
  if ((adapter->flags & 8192U) != 0U) {
    int tmp;
    
#line 1392 
    tmp = ldv_request_irq_72(adapter->msix_entries[0].vector,& igb_test_intr,0UL,(char const *)(& netdev->name),(void *)adapter);
    
#line 1392 
    if (tmp != 0) {
      
#line 1394 
      *data = 1ULL;
      
#line 1395 
      __retres = -1;
      
#line 1395 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 1397 
    if ((adapter->flags & 1U) != 0U) {
      int tmp_0;
      
#line 1398 
      shared_int = 0U;
      
#line 1399 
      tmp_0 = ldv_request_irq_73(irq,& igb_test_intr,0UL,(char const *)(& netdev->name),(void *)adapter);
      
#line 1399 
      if (tmp_0 != 0) {
        
#line 1401 
        *data = 1ULL;
        
#line 1402 
        __retres = -1;
        
#line 1402 
        goto return_label;
      }
      else ;
    }
    else {
      int tmp_2;
      
#line 1404 
      tmp_2 = ldv_request_irq_74(irq,& igb_test_intr,256UL,(char const *)(& netdev->name),(void *)adapter);
      
#line 1404 
      if (tmp_2 == 0) 
#line 1406 
                      shared_int = 0U;
      else {
        int tmp_1;
        
#line 1407 
        tmp_1 = ldv_request_irq_75(irq,& igb_test_intr,128UL,(char const *)(& netdev->name),(void *)adapter);
        
#line 1407 
        if (tmp_1 != 0) {
          
#line 1409 
          *data = 1ULL;
          
#line 1410 
          __retres = -1;
          
#line 1410 
          goto return_label;
        }
        else ;
      }
    }
  
#line 1412 
  if (shared_int != 0U) 
#line 1412 
                        tmp_3 = (char *)"shared"; else 
#line 1412 
                                                       tmp_3 = (char *)"unshared";
  
#line 1412 
  ;
  
#line 1412 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"testing %s interrupt\n",tmp_3);
  {
    u8 * volatile *tmp_4;
    {
      
#line 1416 
      u8 *__var = (u8 *)0U;
      
#line 1416 
      tmp_4 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1416 
    u8 *hw_addr = *tmp_4;
    
#line 1416 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1416 
                                           writel(4294967295U,(void volatile *)(hw_addr + 216U)); else ;
  }
  
#line 1417 
  igb_rd32(hw,8U);
  
#line 1418 
  usleep_range(10000UL,11000UL);
  
#line 1421 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 1422 
    ;
    
#line 1423 
    ics_mask = 938770141U;
    
#line 1424 
    goto ldv_48603;
    case (unsigned int)2: 
#line 1425 
    ;
    
#line 1426 
    ics_mask = 2010446845U;
    
#line 1427 
    goto ldv_48603;
    case (unsigned int)3: 
#line 1428 
    ;
    
#line 1429 
    ics_mask = 2010971861U;
    
#line 1430 
    goto ldv_48603;
    case (unsigned int)4: 
#line 1431 
    ;
    case (unsigned int)5: 
#line 1432 
    ;
    case (unsigned int)6: 
#line 1433 
    ;
    case (unsigned int)7: 
#line 1434 
    ;
    
#line 1435 
    ics_mask = 2010971861U;
    
#line 1436 
    goto ldv_48603;
    default: 
#line 1437 
    ;
    
#line 1438 
    ics_mask = 2147483647U;
    
#line 1439 
    goto ldv_48603;
  }
  ldv_48603: 
#line 1443 
  ;
  
#line 1443 
  goto ldv_48641;
  ldv_48640: 
#line 1444 
  ;
  
#line 1445 
  mask = (unsigned int)(1 << i);
  
#line 1447 
  if ((mask & ics_mask) == 0U) 
#line 1448 
                               goto ldv_48611; else ;
  
#line 1450 
  if (shared_int == 0U) {
    
#line 1457 
    adapter->test_icr = 0U;
    {
      u8 * volatile *tmp_5;
      {
        
#line 1460 
        u8 *__var_0 = (u8 *)0U;
        
#line 1460 
        tmp_5 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1460 
      u8 *hw_addr_0 = *tmp_5;
      
#line 1460 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1460 
                                               writel(4294967295U,(void volatile *)(hw_addr_0 + 192U)); else ;
    }
    {
      u8 * volatile *tmp_6;
      {
        
#line 1462 
        u8 *__var_1 = (u8 *)0U;
        
#line 1462 
        tmp_6 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1462 
      u8 *hw_addr_1 = *tmp_6;
      
#line 1462 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1462 
                                               writel(mask,(void volatile *)(hw_addr_1 + 216U)); else ;
    }
    {
      u8 * volatile *tmp_7;
      {
        
#line 1463 
        u8 *__var_2 = (u8 *)0U;
        
#line 1463 
        tmp_7 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1463 
      u8 *hw_addr_2 = *tmp_7;
      
#line 1463 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1463 
                                               writel(mask,(void volatile *)(hw_addr_2 + 200U)); else ;
    }
    
#line 1464 
    igb_rd32(hw,8U);
    
#line 1465 
    usleep_range(10000UL,11000UL);
    
#line 1467 
    if ((adapter->test_icr & mask) != 0U) {
      
#line 1468 
      *data = 3ULL;
      
#line 1469 
      goto ldv_48621;
    }
    else ;
  }
  else ;
  
#line 1479 
  adapter->test_icr = 0U;
  {
    u8 * volatile *tmp_8;
    {
      
#line 1482 
      u8 *__var_3 = (u8 *)0U;
      
#line 1482 
      tmp_8 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1482 
    u8 *hw_addr_3 = *tmp_8;
    
#line 1482 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1482 
                                             writel(4294967295U,(void volatile *)(hw_addr_3 + 192U)); else ;
  }
  {
    u8 * volatile *tmp_9;
    {
      
#line 1484 
      u8 *__var_4 = (u8 *)0U;
      
#line 1484 
      tmp_9 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1484 
    u8 *hw_addr_4 = *tmp_9;
    
#line 1484 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 1484 
                                             writel(mask,(void volatile *)(hw_addr_4 + 208U)); else ;
  }
  {
    u8 * volatile *tmp_10;
    {
      
#line 1485 
      u8 *__var_5 = (u8 *)0U;
      
#line 1485 
      tmp_10 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1485 
    u8 *hw_addr_5 = *tmp_10;
    
#line 1485 
    if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
#line 1485 
                                             writel(mask,(void volatile *)(hw_addr_5 + 200U)); else ;
  }
  
#line 1486 
  igb_rd32(hw,8U);
  
#line 1487 
  usleep_range(10000UL,11000UL);
  
#line 1489 
  if ((adapter->test_icr & mask) == 0U) {
    
#line 1490 
    *data = 4ULL;
    
#line 1491 
    goto ldv_48621;
  }
  else ;
  
#line 1494 
  if (shared_int == 0U) {
    
#line 1501 
    adapter->test_icr = 0U;
    {
      u8 * volatile *tmp_11;
      {
        
#line 1504 
        u8 *__var_6 = (u8 *)0U;
        
#line 1504 
        tmp_11 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1504 
      u8 *hw_addr_6 = *tmp_11;
      
#line 1504 
      if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
#line 1504 
                                               writel(4294967295U,(void volatile *)(hw_addr_6 + 192U)); else ;
    }
    {
      u8 * volatile *tmp_12;
      {
        
#line 1506 
        u8 *__var_7 = (u8 *)0U;
        
#line 1506 
        tmp_12 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1506 
      u8 *hw_addr_7 = *tmp_12;
      
#line 1506 
      if ((long)(hw_addr_7 == (u8 *)0U) == 0L) 
#line 1506 
                                               writel(~ mask,(void volatile *)(hw_addr_7 + 216U)); else ;
    }
    {
      u8 * volatile *tmp_13;
      {
        
#line 1507 
        u8 *__var_8 = (u8 *)0U;
        
#line 1507 
        tmp_13 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1507 
      u8 *hw_addr_8 = *tmp_13;
      
#line 1507 
      if ((long)(hw_addr_8 == (u8 *)0U) == 0L) 
#line 1507 
                                               writel(~ mask,(void volatile *)(hw_addr_8 + 200U)); else ;
    }
    
#line 1508 
    igb_rd32(hw,8U);
    
#line 1509 
    usleep_range(10000UL,11000UL);
    
#line 1511 
    if ((adapter->test_icr & mask) != 0U) {
      
#line 1512 
      *data = 5ULL;
      
#line 1513 
      goto ldv_48621;
    }
    else ;
  }
  else ;
  ldv_48611: 
#line 1516 
  ;
  
#line 1443 
  i += 1U;
  ldv_48641: 
#line 1444 
  ;
  
#line 1443 
  if (i <= 30U) 
#line 1445 
                goto ldv_48640; else 
#line 1448 
                                     goto ldv_48621;
  ldv_48621: 
#line 1449 
  ;
  {
    u8 * volatile *tmp_14;
    {
      
#line 1519 
      u8 *__var_9 = (u8 *)0U;
      
#line 1519 
      tmp_14 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1519 
    u8 *hw_addr_9 = *tmp_14;
    
#line 1519 
    if ((long)(hw_addr_9 == (u8 *)0U) == 0L) 
#line 1519 
                                             writel(4294967295U,(void volatile *)(hw_addr_9 + 216U)); else ;
  }
  
#line 1520 
  igb_rd32(hw,8U);
  
#line 1521 
  usleep_range(10000UL,11000UL);
  
#line 1524 
  if ((adapter->flags & 8192U) != 0U) 
#line 1525 
                                      ldv_free_irq_76(adapter->msix_entries[0].vector,(void *)adapter); else 
                                                                    
#line 1527 
                                                                    ldv_free_irq_77(irq,(void *)adapter);
  
#line 1529 
  __retres = (int)*data;
  return_label: 
#line 1529 
                return __retres;
}


#line 1532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_free_desc_rings(struct igb_adapter *adapter)
{
  
#line 1534 
  igb_free_tx_resources(& adapter->test_tx_ring);
  
#line 1535 
  igb_free_rx_resources(& adapter->test_rx_ring);
  
#line 1536 
  return;
}


#line 1538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_setup_desc_rings(struct igb_adapter *adapter)
{
  int __retres;
  int ret_val;
  int tmp;
  int tmp_0;
  int tmp_2;
  
#line 1540 
  struct igb_ring *tx_ring = & adapter->test_tx_ring;
  
#line 1541 
  struct igb_ring *rx_ring = & adapter->test_rx_ring;
  
#line 1542 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1546 
  tx_ring->count = (unsigned short)256U;
  
#line 1547 
  tx_ring->dev = & (adapter->pdev)->dev;
  
#line 1548 
  tx_ring->netdev = adapter->netdev;
  
#line 1549 
  tx_ring->reg_idx = (unsigned char)adapter->vfs_allocated_count;
  
#line 1551 
  tmp = igb_setup_tx_resources(tx_ring);
  
#line 1551 
  if (tmp != 0) {
    
#line 1552 
    ret_val = 1;
    
#line 1553 
    goto err_nomem;
  }
  else ;
  
#line 1556 
  igb_setup_tctl(adapter);
  
#line 1557 
  igb_configure_tx_ring(adapter,tx_ring);
  
#line 1560 
  rx_ring->count = (unsigned short)256U;
  
#line 1561 
  rx_ring->dev = & (adapter->pdev)->dev;
  
#line 1562 
  rx_ring->netdev = adapter->netdev;
  
#line 1563 
  rx_ring->reg_idx = (unsigned char)adapter->vfs_allocated_count;
  
#line 1565 
  tmp_0 = igb_setup_rx_resources(rx_ring);
  
#line 1565 
  if (tmp_0 != 0) {
    
#line 1566 
    ret_val = 3;
    
#line 1567 
    goto err_nomem;
  }
  else ;
  {
    u8 * volatile *tmp_1;
    {
      
#line 1571 
      u8 *__var = (u8 *)0U;
      
#line 1571 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1571 
    u8 *hw_addr = *tmp_1;
    
#line 1571 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1571 
                                           writel(adapter->vfs_allocated_count << 3,(void volatile *)(hw_addr + 22552U)); else ;
  }
  
#line 1574 
  igb_setup_rctl(adapter);
  
#line 1575 
  igb_configure_rx_ring(adapter,rx_ring);
  
#line 1577 
  tmp_2 = igb_desc_unused(rx_ring);
  
#line 1577 
  ;
  
#line 1577 
  igb_alloc_rx_buffers(rx_ring,(unsigned short)((int)((unsigned short)tmp_2)));
  
#line 1579 
  __retres = 0;
  
#line 1579 
  goto return_label;
  err_nomem: 
#line 1581 
  ;
  
#line 1582 
  igb_free_desc_rings(adapter);
  
#line 1583 
  __retres = ret_val;
  return_label: 
#line 1583 
                return __retres;
}


#line 1586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_phy_disable_receiver(struct igb_adapter *adapter)
{
  
#line 1588 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1591 
  igb_write_phy_reg(hw,29U,(unsigned short)31);
  
#line 1592 
  igb_write_phy_reg(hw,30U,(unsigned short)36860);
  
#line 1593 
  igb_write_phy_reg(hw,29U,(unsigned short)26);
  
#line 1594 
  igb_write_phy_reg(hw,30U,(unsigned short)36848);
  
#line 1595 
  return;
}


#line 1597  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_integrated_phy_loopback(struct igb_adapter *adapter)
{
  int __retres;
  
#line 1599 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1600 
  u32 ctrl_reg = 0U;
  
#line 1602 
  hw->mac.autoneg = (_Bool)0;
  
#line 1604 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) 
    
#line 1605 
    if (hw->phy.id != 21040128U) {
      
#line 1607 
      igb_write_phy_reg(hw,16U,(unsigned short)2056);
      
#line 1609 
      igb_write_phy_reg(hw,0U,(unsigned short)37184);
      
#line 1611 
      igb_write_phy_reg(hw,0U,(unsigned short)33088);
    }
    else {
      
#line 1614 
      igb_write_phy_reg(hw,22U,(unsigned short)0);
      
#line 1615 
      igb_write_phy_reg(hw,0U,(unsigned short)16704);
    }
  else 
    
#line 1617 
    if (hw->phy.type == (unsigned int)e1000_phy_82580) 
#line 1619 
                                                       igb_write_phy_reg(hw,19U,(unsigned short)32833); else ;
  
#line 1623 
  msleep(50U);
  
#line 1626 
  igb_write_phy_reg(hw,0U,(unsigned short)16704);
  
#line 1629 
  ctrl_reg = igb_rd32(hw,0U);
  
#line 1630 
  ctrl_reg &= 4294966527U;
  
#line 1631 
  ctrl_reg |= 6721U;
  
#line 1637 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) 
#line 1638 
                                                   ctrl_reg |= 128U; else ;
  {
    u8 * volatile *tmp;
    {
      
#line 1640 
      u8 *__var = (u8 *)0U;
      
#line 1640 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1640 
    u8 *hw_addr = *tmp;
    
#line 1640 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1640 
                                           writel(ctrl_reg,(void volatile *)hw_addr); else ;
  }
  
#line 1645 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) 
#line 1646 
                                                   igb_phy_disable_receiver(adapter); else ;
  {
    
#line 1648 
    unsigned long __ms = 500UL;
    {
      unsigned long tmp_0;
      
#line 1648 
      goto ldv_48673;
      ldv_48672: 
#line 1649 
      ;
      
#line 1648 
      __const_udelay(4295000UL);
      ldv_48673: 
#line 1650 
      ;
      
#line 1648 
      tmp_0 = __ms;
      
#line 1648 
      __ms -= 1UL;
      
#line 1648 
      ;
      
#line 1648 
      if (tmp_0 != 0UL) 
#line 1650 
                        goto ldv_48672; else 
#line 1653 
                                             goto ldv_48674;
      ldv_48674: 
#line 1654 
      ;
    }
  }
  
#line 1649 
  __retres = 0;
  
#line 1649 
  return __retres;
}


#line 1652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_phy_loopback(struct igb_adapter *adapter)
{
  int tmp;
  
#line 1654 
  tmp = igb_integrated_phy_loopback(adapter);
  
#line 1654 
  return tmp;
}


#line 1657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_setup_loopback_test(struct igb_adapter *adapter)
{
  int __retres;
  u32 reg;
  int tmp_7;
  
#line 1659 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1662 
  reg = igb_rd32(hw,24U);
  
#line 1665 
  if ((reg & 12582912U) != 0U) {
    
#line 1666 
    if ((((((unsigned int)hw->device_id == 1080U || (unsigned int)hw->device_id == 1082U) || (unsigned int)hw->device_id == 1084U) || (unsigned int)hw->device_id == 1088U) || (unsigned int)hw->device_id == 8001U) || (unsigned int)hw->device_id == 8005U) {
      
#line 1673 
      reg = igb_rd32(hw,36U);
      
#line 1674 
      reg = (reg & 4294901760U) | 4U;
      {
        u8 * volatile *tmp;
        {
          
#line 1676 
          u8 *__var = (u8 *)0U;
          
#line 1676 
          tmp = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 1676 
        u8 *hw_addr = *tmp;
        
#line 1676 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1676 
                                               writel(reg,(void volatile *)(hw_addr + 36U)); else ;
      }
      
#line 1678 
      reg = igb_rd32(hw,3600U);
      
#line 1679 
      reg |= 16U;
      {
        u8 * volatile *tmp_0;
        {
          
#line 1680 
          u8 *__var_0 = (u8 *)0U;
          
#line 1680 
          tmp_0 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 1680 
        u8 *hw_addr_0 = *tmp_0;
        
#line 1680 
        if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1680 
                                                 writel(reg,(void volatile *)(hw_addr_0 + 3600U)); else ;
      }
    }
    else ;
    
#line 1683 
    reg = igb_rd32(hw,256U);
    
#line 1684 
    reg |= 192U;
    {
      u8 * volatile *tmp_1;
      {
        
#line 1685 
        u8 *__var_1 = (u8 *)0U;
        
#line 1685 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1685 
      u8 *hw_addr_1 = *tmp_1;
      
#line 1685 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1685 
                                               writel(reg,(void volatile *)(hw_addr_1 + 256U)); else ;
    }
    {
      u8 * volatile *tmp_2;
      {
        
#line 1687 
        u8 *__var_2 = (u8 *)0U;
        
#line 1687 
        tmp_2 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1687 
      u8 *hw_addr_2 = *tmp_2;
      
#line 1687 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1687 
                                               writel(1040U,(void volatile *)(hw_addr_2 + 36U)); else ;
    }
    
#line 1689 
    reg = igb_rd32(hw,0U);
    
#line 1690 
    reg &= 3892314103U;
    
#line 1693 
    reg |= 65U;
    {
      u8 * volatile *tmp_3;
      {
        
#line 1695 
        u8 *__var_3 = (u8 *)0U;
        
#line 1695 
        tmp_3 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1695 
      u8 *hw_addr_3 = *tmp_3;
      
#line 1695 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1695 
                                               writel(reg,(void volatile *)hw_addr_3); else ;
    }
    
#line 1698 
    reg = igb_rd32(hw,52U);
    
#line 1699 
    reg &= 4294967291U;
    {
      u8 * volatile *tmp_4;
      {
        
#line 1700 
        u8 *__var_4 = (u8 *)0U;
        
#line 1700 
        tmp_4 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1700 
      u8 *hw_addr_4 = *tmp_4;
      
#line 1700 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 1700 
                                               writel(reg,(void volatile *)(hw_addr_4 + 52U)); else ;
    }
    
#line 1705 
    if (hw->mac.type > (unsigned int)e1000_82576) {
      
#line 1706 
      reg = igb_rd32(hw,16896U);
      
#line 1707 
      reg |= 1U;
      {
        u8 * volatile *tmp_5;
        {
          
#line 1708 
          u8 *__var_5 = (u8 *)0U;
          
#line 1708 
          tmp_5 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 1708 
        u8 *hw_addr_5 = *tmp_5;
        
#line 1708 
        if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
#line 1708 
                                                 writel(reg,(void volatile *)(hw_addr_5 + 16896U)); else ;
      }
    }
    else ;
    
#line 1712 
    reg = igb_rd32(hw,16904U);
    
#line 1713 
    reg &= 4294901759U;
    
#line 1714 
    reg |= 61U;
    {
      u8 * volatile *tmp_6;
      {
        
#line 1719 
        u8 *__var_6 = (u8 *)0U;
        
#line 1719 
        tmp_6 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1719 
      u8 *hw_addr_6 = *tmp_6;
      
#line 1719 
      if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
#line 1719 
                                               writel(reg,(void volatile *)(hw_addr_6 + 16904U)); else ;
    }
    
#line 1721 
    __retres = 0;
    
#line 1721 
    goto return_label;
  }
  else ;
  
#line 1724 
  tmp_7 = igb_set_phy_loopback(adapter);
  
#line 1724 
  __retres = tmp_7;
  return_label: 
#line 1724 
                return __retres;
}


#line 1727  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_loopback_cleanup(struct igb_adapter *adapter)
{
  u32 rctl;
  u16 phy_reg;
  
#line 1729 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1733 
  if (((((unsigned int)hw->device_id == 1080U || (unsigned int)hw->device_id == 1082U) || (unsigned int)hw->device_id == 1084U) || (unsigned int)hw->device_id == 1088U) || (unsigned int)hw->device_id == 8001U) {
    u32 reg;
    
#line 1741 
    reg = igb_rd32(hw,36U);
    
#line 1742 
    reg = (reg & 4294901760U) | 4U;
    {
      u8 * volatile *tmp;
      {
        
#line 1744 
        u8 *__var = (u8 *)0U;
        
#line 1744 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1744 
      u8 *hw_addr = *tmp;
      
#line 1744 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1744 
                                             writel(reg,(void volatile *)(hw_addr + 36U)); else ;
    }
    
#line 1746 
    reg = igb_rd32(hw,3600U);
    
#line 1747 
    reg &= 4294967279U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 1748 
        u8 *__var_0 = (u8 *)0U;
        
#line 1748 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1748 
      u8 *hw_addr_0 = *tmp_0;
      
#line 1748 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1748 
                                               writel(reg,(void volatile *)(hw_addr_0 + 3600U)); else ;
    }
  }
  else ;
  
#line 1751 
  rctl = igb_rd32(hw,256U);
  
#line 1752 
  rctl &= 4294967103U;
  {
    u8 * volatile *tmp_1;
    {
      
#line 1753 
      u8 *__var_1 = (u8 *)0U;
      
#line 1753 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1753 
    u8 *hw_addr_1 = *tmp_1;
    
#line 1753 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1753 
                                             writel(rctl,(void volatile *)(hw_addr_1 + 256U)); else ;
  }
  
#line 1755 
  hw->mac.autoneg = (_Bool)1;
  
#line 1756 
  igb_read_phy_reg(hw,0U,& phy_reg);
  
#line 1757 
  if (((int)phy_reg & 16384) != 0) {
    
#line 1758 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 49151U);
    
#line 1759 
    igb_write_phy_reg(hw,0U,(unsigned short)((int)phy_reg));
    
#line 1760 
    igb_phy_sw_reset(hw);
  }
  else ;
  
#line 1762 
  return;
}


#line 1764  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_create_lbtest_frame(struct sk_buff *skb, unsigned int frame_size)
{
  
#line 1767 
  memset((void *)skb->data,255,(unsigned long)frame_size);
  
#line 1768 
  frame_size /= 2U;
  
#line 1769 
  memset((void *)(skb->data + frame_size),170,(unsigned long)(frame_size + 4294967295U));
  
#line 1770 
  memset((void *)(skb->data + (frame_size + 10U)),190,1UL);
  
#line 1771 
  memset((void *)(skb->data + (frame_size + 12U)),175,1UL);
  
#line 1772 
  return;
}


#line 1774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_check_lbtest_frame(struct igb_rx_buffer *rx_buffer, unsigned int frame_size)
{
  int __retres;
  unsigned char *data;
  
#line 1778 
  bool match = (_Bool)1;
  
#line 1780 
  frame_size >>= 1;
  
#line 1782 
  data = (unsigned char *)kmap(rx_buffer->page);
  
#line 1784 
  if (((unsigned int)*(data + 3U) != 255U || (unsigned int)*(data + (frame_size + 10U)) != 190U) || (unsigned int)*(data + (frame_size + 12U)) != 175U) 
    
#line 1787 
    match = (_Bool)0; else ;
  
#line 1789 
  kunmap(rx_buffer->page);
  
#line 1791 
  __retres = (int)match;
  
#line 1791 
  return __retres;
}


#line 1794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_clean_test_rings(struct igb_ring *rx_ring, struct igb_ring *tx_ring, unsigned int size)
{
  int __retres;
  union e1000_adv_rx_desc *rx_desc;
  struct igb_rx_buffer *rx_buffer_info;
  struct igb_tx_buffer *tx_buffer_info;
  u16 rx_ntc;
  u16 tx_ntc;
  int tmp;
  __le32 tmp_0;
  struct netdev_queue *tmp_1;
  
#line 1801 
  u16 count = (unsigned short)0U;
  
#line 1804 
  rx_ntc = rx_ring->next_to_clean;
  
#line 1805 
  tx_ntc = tx_ring->next_to_clean;
  
#line 1806 
  rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (int)rx_ntc;
  
#line 1808 
  goto ldv_48745;
  ldv_48744: 
#line 1809 
  ;
  
#line 1810 
  rx_buffer_info = rx_ring->__anonCompField_igb_ring_97.rx_buffer_info + (int)rx_ntc;
  
#line 1813 
  dma_sync_single_for_cpu(rx_ring->dev,rx_buffer_info->dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 1819 
  tmp = igb_check_lbtest_frame(rx_buffer_info,size);
  
#line 1819 
  if (tmp != 0) 
#line 1820 
                count = (u16)((int)count + 1); else ;
  
#line 1823 
  dma_sync_single_for_device(rx_ring->dev,rx_buffer_info->dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 1829 
  tx_buffer_info = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info + (int)tx_ntc;
  
#line 1830 
  igb_unmap_and_free_tx_resource(tx_ring,tx_buffer_info);
  
#line 1833 
  rx_ntc = (u16)((int)rx_ntc + 1);
  
#line 1834 
  if ((int)rx_ring->count == (int)rx_ntc) 
#line 1835 
                                          rx_ntc = (unsigned short)0U; else ;
  
#line 1836 
  tx_ntc = (u16)((int)tx_ntc + 1);
  
#line 1837 
  if ((int)tx_ring->count == (int)tx_ntc) 
#line 1838 
                                          tx_ntc = (unsigned short)0U; else ;
  
#line 1841 
  rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (int)rx_ntc;
  ldv_48745: 
#line 1842 
  ;
  
#line 1808 
  tmp_0 = igb_test_staterr(rx_desc,1U);
  
#line 1808 
  if (tmp_0 != 0U) 
#line 1810 
                   goto ldv_48744; else 
#line 1813 
                                        goto ldv_48746;
  ldv_48746: 
#line 1814 
  ;
  
#line 1844 
  tmp_1 = txring_txq((struct igb_ring const *)tx_ring);
  
#line 1844 
  netdev_tx_reset_queue(tmp_1);
  
#line 1847 
  igb_alloc_rx_buffers(rx_ring,(unsigned short)((int)count));
  
#line 1848 
  rx_ring->next_to_clean = rx_ntc;
  
#line 1849 
  tx_ring->next_to_clean = tx_ntc;
  
#line 1851 
  __retres = (int)count;
  
#line 1851 
  return __retres;
}


#line 1854  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_run_loopback_test(struct igb_adapter *adapter)
{
  int __retres;
  u16 i;
  u16 j;
  u16 lc;
  u16 good_cnt;
  netdev_tx_t tx_ret_val;
  struct sk_buff *skb;
  int tmp;
  
#line 1856 
  struct igb_ring *tx_ring = & adapter->test_tx_ring;
  
#line 1857 
  struct igb_ring *rx_ring = & adapter->test_rx_ring;
  
#line 1859 
  int ret_val = 0;
  
#line 1860 
  unsigned int size = 256U;
  
#line 1865 
  skb = alloc_skb(size,208U);
  
#line 1866 
  if (skb == (struct sk_buff *)0) {
    
#line 1867 
    __retres = 11;
    
#line 1867 
    goto return_label;
  }
  else ;
  
#line 1870 
  igb_create_lbtest_frame(skb,size);
  
#line 1871 
  skb_put(skb,size);
  
#line 1878 
  if ((int)rx_ring->count <= (int)tx_ring->count) 
#line 1879 
                                                  lc = (unsigned short)((unsigned int)((unsigned short)((unsigned int)tx_ring->count / 64U)) * 2U + 1U); else 
                                                                    
#line 1881 
                                                                    lc = (unsigned short)((unsigned int)((unsigned short)((unsigned int)rx_ring->count / 64U)) * 2U + 1U);
  
#line 1883 
  j = (unsigned short)0U;
  
#line 1883 
  goto ldv_48765;
  ldv_48764: 
#line 1884 
  ;
  
#line 1885 
  good_cnt = (unsigned short)0U;
  
#line 1888 
  i = (unsigned short)0U;
  
#line 1888 
  goto ldv_48761;
  ldv_48760: 
#line 1889 
  ;
  
#line 1889 
  skb_get(skb);
  
#line 1890 
  tx_ret_val = igb_xmit_frame_ring(skb,tx_ring);
  
#line 1891 
  if (tx_ret_val == (unsigned int)NETDEV_TX_OK) 
#line 1892 
                                                good_cnt = (u16)((int)good_cnt + 1); else ;
  
#line 1888 
  i = (u16)((int)i + 1);
  ldv_48761: 
#line 1889 
  ;
  
#line 1888 
  if ((unsigned int)i <= 63U) 
#line 1890 
                              goto ldv_48760; else 
#line 1893 
                                                   goto ldv_48762;
  ldv_48762: 
#line 1894 
  ;
  
#line 1895 
  if ((unsigned int)good_cnt != 64U) {
    
#line 1896 
    ret_val = 12;
    
#line 1897 
    goto ldv_48763;
  }
  else ;
  
#line 1901 
  msleep(200U);
  
#line 1903 
  tmp = igb_clean_test_rings(rx_ring,tx_ring,size);
  
#line 1903 
  good_cnt = (unsigned short)tmp;
  
#line 1904 
  if ((unsigned int)good_cnt != 64U) {
    
#line 1905 
    ret_val = 13;
    
#line 1906 
    goto ldv_48763;
  }
  else ;
  
#line 1883 
  j = (u16)((int)j + 1);
  ldv_48765: 
#line 1884 
  ;
  
#line 1883 
  if ((int)j <= (int)lc) 
#line 1885 
                         goto ldv_48764; else 
#line 1888 
                                              goto ldv_48763;
  ldv_48763: 
#line 1889 
  ;
  
#line 1911 
  kfree_skb(skb);
  
#line 1913 
  __retres = ret_val;
  return_label: 
#line 1913 
                return __retres;
}


#line 1916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_loopback_test(struct igb_adapter *adapter, u64 *data)
{
  int __retres;
  s32 tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 1921 
  tmp = igb_check_reset_block(& adapter->hw);
  
#line 1921 
  if (tmp != 0) {
    
#line 1922 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Cannot do PHY loopback test when SoL/IDER is active.\n");
    
#line 1924 
    *data = 0ULL;
    
#line 1925 
    goto out;
  }
  else ;
  
#line 1928 
  if (adapter->hw.mac.type == (unsigned int)e1000_i354) {
    
#line 1929 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Loopback test not supported on i354.\n");
    
#line 1931 
    *data = 0ULL;
    
#line 1932 
    goto out;
  }
  else ;
  
#line 1934 
  tmp_0 = igb_setup_desc_rings(adapter);
  
#line 1934 
  *data = (unsigned long long)tmp_0;
  
#line 1935 
  if (*data != 0ULL) 
#line 1936 
                     goto out; else ;
  
#line 1937 
  tmp_1 = igb_setup_loopback_test(adapter);
  
#line 1937 
  *data = (unsigned long long)tmp_1;
  
#line 1938 
  if (*data != 0ULL) 
#line 1939 
                     goto err_loopback; else ;
  
#line 1940 
  tmp_2 = igb_run_loopback_test(adapter);
  
#line 1940 
  *data = (unsigned long long)tmp_2;
  
#line 1941 
  igb_loopback_cleanup(adapter);
  err_loopback: 
#line 1943 
  ;
  
#line 1944 
  igb_free_desc_rings(adapter);
  out: 
#line 1945 
  ;
  
#line 1946 
  __retres = (int)*data;
  
#line 1946 
  return __retres;
}


#line 1949  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_link_test(struct igb_adapter *adapter, u64 *data)
{
  int __retres;
  
#line 1951 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1952 
  *data = 0ULL;
  
#line 1953 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) {
    int tmp;
    
#line 1954 
    int i = 0;
    
#line 1956 
    hw->mac.serdes_has_link = (_Bool)0;
    ldv_48778: 
#line 1957 
    ;
    
#line 1962 
    (*(hw->mac.ops.check_for_link))(& adapter->hw);
    
#line 1963 
    if ((int)hw->mac.serdes_has_link != 0) {
      
#line 1964 
      __retres = (int)*data;
      
#line 1964 
      goto return_label;
    }
    else ;
    
#line 1965 
    msleep(20U);
    
#line 1966 
    tmp = i;
    
#line 1966 
    i += 1;
    
#line 1966 
    ;
    
#line 1966 
    if (tmp <= 3749) 
#line 1968 
                     goto ldv_48778; else 
#line 1971 
                                          goto ldv_48779;
    ldv_48779: 
#line 1972 
    ;
    
#line 1968 
    *data = 1ULL;
  }
  else {
    u32 tmp_0;
    
#line 1970 
    (*(hw->mac.ops.check_for_link))(& adapter->hw);
    
#line 1971 
    if ((int)hw->mac.autoneg != 0) 
#line 1972 
                                   msleep(5000U); else ;
    
#line 1974 
    tmp_0 = igb_rd32(hw,8U);
    
#line 1974 
    if ((tmp_0 & 2U) == 0U) 
#line 1975 
                            *data = 1ULL; else ;
  }
  
#line 1977 
  __retres = (int)*data;
  return_label: 
#line 1977 
                return __retres;
}


#line 1980  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_diag_test(struct net_device *netdev, struct ethtool_test *eth_test, u64 *data)
{
  u16 autoneg_advertised;
  u8 forced_speed_duplex;
  u8 autoneg;
  
#line 1983 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1986 
  bool if_running = netif_running((struct net_device const *)netdev);
  
#line 1988 
  set_bit(0L,(unsigned long volatile *)(& adapter->state));
  
#line 1991 
  if ((int)adapter->hw.dev_spec._82575.mas_capable != 0) 
#line 1992 
                                                         eth_test->flags &= 4294967294U; else ;
  
#line 1993 
  if (eth_test->flags == 1U) {
    int tmp_1;
    int tmp_2;
    int tmp_3;
    int tmp_4;
    int tmp_5;
    
#line 1997 
    autoneg_advertised = adapter->hw.phy.autoneg_advertised;
    
#line 1998 
    forced_speed_duplex = adapter->hw.mac.forced_speed_duplex;
    
#line 1999 
    autoneg = (unsigned char)adapter->hw.mac.autoneg;
    
#line 2001 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"offline testing starting\n");
    
#line 2004 
    igb_power_up_link(adapter);
    
#line 2009 
    tmp_1 = igb_link_test(adapter,data + 4U);
    
#line 2009 
    if (tmp_1 != 0) 
#line 2010 
                    eth_test->flags |= 2U; else ;
    
#line 2012 
    if ((int)if_running != 0) 
#line 2014 
                              dev_close(netdev); else 
#line 2016 
                                                      igb_reset(adapter);
    
#line 2018 
    tmp_2 = igb_reg_test(adapter,data);
    
#line 2018 
    if (tmp_2 != 0) 
#line 2019 
                    eth_test->flags |= 2U; else ;
    
#line 2021 
    igb_reset(adapter);
    
#line 2022 
    tmp_3 = igb_eeprom_test(adapter,data + 1U);
    
#line 2022 
    if (tmp_3 != 0) 
#line 2023 
                    eth_test->flags |= 2U; else ;
    
#line 2025 
    igb_reset(adapter);
    
#line 2026 
    tmp_4 = igb_intr_test(adapter,data + 2U);
    
#line 2026 
    if (tmp_4 != 0) 
#line 2027 
                    eth_test->flags |= 2U; else ;
    
#line 2029 
    igb_reset(adapter);
    
#line 2031 
    igb_power_up_link(adapter);
    
#line 2032 
    tmp_5 = igb_loopback_test(adapter,data + 3U);
    
#line 2032 
    if (tmp_5 != 0) 
#line 2033 
                    eth_test->flags |= 2U; else ;
    
#line 2036 
    adapter->hw.phy.autoneg_advertised = autoneg_advertised;
    
#line 2037 
    adapter->hw.mac.forced_speed_duplex = forced_speed_duplex;
    
#line 2038 
    adapter->hw.mac.autoneg = (_Bool)((unsigned int)autoneg != 0U);
    
#line 2041 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)1;
    
#line 2042 
    igb_reset(adapter);
    
#line 2043 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)0;
    
#line 2045 
    set_bit(0L,(unsigned long volatile *)(& adapter->state));
    
#line 2046 
    if ((int)if_running != 0) 
#line 2047 
                              dev_open(netdev); else ;
  }
  else {
    
#line 2049 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"online testing starting\n");
    
#line 2052 
    if ((int)if_running != 0) {
      int tmp_6;
      
#line 2052 
      tmp_6 = igb_link_test(adapter,data + 4U);
      
#line 2052 
      if (tmp_6 != 0) 
#line 2053 
                      eth_test->flags |= 2U; else 
#line 2055 
                                                  *(data + 4U) = 0ULL;
    }
    else 
#line 2055 
         *(data + 4U) = 0ULL;
    
#line 2058 
    *data = 0ULL;
    
#line 2059 
    *(data + 1U) = 0ULL;
    
#line 2060 
    *(data + 2U) = 0ULL;
    
#line 2061 
    *(data + 3U) = 0ULL;
    
#line 2063 
    set_bit(0L,(unsigned long volatile *)(& adapter->state));
  }
  
#line 2065 
  msleep_interruptible(4000U);
  
#line 2066 
  return;
}


#line 2068  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  
#line 2070 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2072 
  wol->wolopts = 0U;
  
#line 2074 
  if ((adapter->flags & 256U) == 0U) 
#line 2075 
                                     goto return_label; else ;
  
#line 2077 
  wol->supported = 47U;
  
#line 2082 
  switch ((int)adapter->hw.device_id) {
    default: 
#line 2083 
    ;
    
#line 2084 
    goto ldv_48796;
  }
  ldv_48796: 
#line 2087 
  ;
  
#line 2087 
  if ((adapter->wol & 4U) != 0U) 
#line 2088 
                                 wol->wolopts |= 2U; else ;
  
#line 2089 
  if ((adapter->wol & 8U) != 0U) 
#line 2090 
                                 wol->wolopts |= 4U; else ;
  
#line 2091 
  if ((adapter->wol & 16U) != 0U) 
#line 2092 
                                  wol->wolopts |= 8U; else ;
  
#line 2093 
  if ((adapter->wol & 2U) != 0U) 
#line 2094 
                                 wol->wolopts |= 32U; else ;
  
#line 2095 
  if ((adapter->wol & 1U) != 0U) 
#line 2096 
                                 wol->wolopts |= 1U; else ;
  return_label: 
#line 2097 
                return;
}


#line 2099  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  int __retres;
  
#line 2101 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2103 
  if ((wol->wolopts & 80U) != 0U) {
    
#line 2104 
    __retres = -95;
    
#line 2104 
    goto return_label;
  }
  else ;
  
#line 2106 
  if ((adapter->flags & 256U) == 0U) {
    int tmp_0;
    
#line 2107 
    if (wol->wolopts != 0U) 
#line 2107 
                            tmp_0 = -95; else 
#line 2107 
                                              tmp_0 = 0;
    
#line 2107 
    __retres = tmp_0;
    
#line 2107 
    goto return_label;
  }
  else ;
  
#line 2110 
  adapter->wol = 0U;
  
#line 2112 
  if ((wol->wolopts & 2U) != 0U) 
#line 2113 
                                 adapter->wol |= 4U; else ;
  
#line 2114 
  if ((wol->wolopts & 4U) != 0U) 
#line 2115 
                                 adapter->wol |= 8U; else ;
  
#line 2116 
  if ((wol->wolopts & 8U) != 0U) 
#line 2117 
                                 adapter->wol |= 16U; else ;
  
#line 2118 
  if ((wol->wolopts & 32U) != 0U) 
#line 2119 
                                  adapter->wol |= 2U; else ;
  
#line 2120 
  if ((wol->wolopts & 1U) != 0U) 
#line 2121 
                                 adapter->wol |= 1U; else ;
  
#line 2122 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)(adapter->wol != 0U));
  
#line 2124 
  __retres = 0;
  return_label: 
#line 2124 
                return __retres;
}


#line 2130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  int __retres;
  
#line 2133 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2134 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2136 
  switch ((unsigned int)state) {
    case (unsigned int)1: 
#line 2137 
    ;
    
#line 2138 
    igb_blink_led(hw);
    
#line 2139 
    __retres = 2;
    
#line 2139 
    goto return_label;
    case (unsigned int)2: 
#line 2140 
    ;
    
#line 2141 
    igb_blink_led(hw);
    
#line 2142 
    goto ldv_48810;
    case (unsigned int)3: 
#line 2143 
    ;
    
#line 2144 
    igb_led_off(hw);
    
#line 2145 
    goto ldv_48810;
    case (unsigned int)0: 
#line 2146 
    ;
    
#line 2147 
    igb_led_off(hw);
    
#line 2148 
    set_bit(0L,(unsigned long volatile *)(& adapter->led_status));
    
#line 2149 
    igb_cleanup_led(hw);
    
#line 2150 
    goto ldv_48810;
  }
  ldv_48810: 
#line 2153 
  ;
  
#line 2153 
  __retres = 0;
  return_label: 
#line 2153 
                return __retres;
}


#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  int __retres;
  int i;
  
#line 2159 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2162 
  if ((ec->rx_coalesce_usecs > 10000U || ec->rx_coalesce_usecs + 4294967292U <= 5U) || ec->rx_coalesce_usecs == 2U) {
    
#line 2166 
    __retres = -22;
    
#line 2166 
    goto return_label;
  }
  else ;
  
#line 2168 
  if ((ec->tx_coalesce_usecs > 10000U || ec->tx_coalesce_usecs + 4294967292U <= 5U) || ec->tx_coalesce_usecs == 2U) {
    
#line 2172 
    __retres = -22;
    
#line 2172 
    goto return_label;
  }
  else ;
  
#line 2174 
  if ((adapter->flags & 8U) != 0U && ec->tx_coalesce_usecs != 0U) {
    
#line 2175 
    __retres = -22;
    
#line 2175 
    goto return_label;
  }
  else ;
  
#line 2178 
  if (ec->rx_coalesce_usecs == 0U) {
    
#line 2179 
    if ((adapter->flags & 16U) != 0U) 
#line 2180 
                                      adapter->flags &= 4294967279U; else ;
  }
  else ;
  
#line 2184 
  if (ec->rx_coalesce_usecs + 4294967295U <= 2U) 
#line 2185 
                                                 adapter->rx_itr_setting = ec->rx_coalesce_usecs; else 
                                                                    
#line 2187 
                                                                    adapter->rx_itr_setting = ec->rx_coalesce_usecs << 2;
  
#line 2190 
  if ((adapter->flags & 8U) != 0U) 
#line 2191 
                                   adapter->tx_itr_setting = adapter->rx_itr_setting;
  else 
    
#line 2192 
    if (ec->tx_coalesce_usecs + 4294967295U <= 2U) 
#line 2193 
                                                   adapter->tx_itr_setting = ec->tx_coalesce_usecs; else 
                                                                    
#line 2195 
                                                                    adapter->tx_itr_setting = ec->tx_coalesce_usecs << 2;
  
#line 2197 
  i = 0;
  
#line 2197 
  goto ldv_48821;
  ldv_48820: 
#line 2198 
  ;
  {
    
#line 2198 
    struct igb_q_vector *q_vector = adapter->q_vector[i];
    
#line 2199 
    q_vector->tx.work_limit = adapter->tx_work_limit;
    
#line 2200 
    if (q_vector->rx.ring != (struct igb_ring *)0) 
#line 2201 
                                                   q_vector->itr_val = (unsigned short)adapter->rx_itr_setting; else 
                                                                    
#line 2203 
                                                                    q_vector->itr_val = (unsigned short)adapter->tx_itr_setting;
    
#line 2204 
    if ((unsigned int)q_vector->itr_val + 65535U <= 2U) 
#line 2205 
                                                        q_vector->itr_val = (unsigned short)648U; else ;
    
#line 2206 
    q_vector->set_itr = (unsigned char)1U;
  }
  
#line 2197 
  i += 1;
  ldv_48821: 
#line 2198 
  ;
  
#line 2197 
  if (adapter->num_q_vectors > (unsigned int)i) 
#line 2199 
                                                goto ldv_48820; else 
                                                                  
#line 2202 
                                                                  goto ldv_48822;
  ldv_48822: 
#line 2203 
  ;
  
#line 2209 
  __retres = 0;
  return_label: 
#line 2209 
                return __retres;
}


#line 2212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  int __retres;
  
#line 2215 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2217 
  if (adapter->rx_itr_setting <= 3U) 
#line 2218 
                                     ec->rx_coalesce_usecs = adapter->rx_itr_setting; else 
                                                                    
#line 2220 
                                                                    ec->rx_coalesce_usecs = adapter->rx_itr_setting >> 2;
  
#line 2222 
  if ((adapter->flags & 8U) == 0U) 
    
#line 2223 
    if (adapter->tx_itr_setting <= 3U) 
#line 2224 
                                       ec->tx_coalesce_usecs = adapter->tx_itr_setting; else 
                                                                    
#line 2226 
                                                                    ec->tx_coalesce_usecs = adapter->tx_itr_setting >> 2;
  else ;
  
#line 2229 
  __retres = 0;
  
#line 2229 
  return __retres;
}


#line 2232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_nway_reset(struct net_device *netdev)
{
  int __retres;
  bool tmp_0;
  
#line 2234 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2235 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 2235 
  if ((int)tmp_0 != 0) 
#line 2236 
                       igb_reinit_locked(adapter); else ;
  
#line 2237 
  __retres = 0;
  
#line 2237 
  return __retres;
}


#line 2240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_sset_count(struct net_device *netdev, int sset)
{
  int __retres;
  
#line 2242 
  switch (sset) {
    void *tmp;
    void *tmp_0;
    case 1: 
#line 2243 
    ;
    
#line 2244 
    tmp = netdev_priv((struct net_device const *)netdev);
    
#line 2244 
    tmp_0 = netdev_priv((struct net_device const *)netdev);
    
#line 2244 
    ;
    
#line 2244 
    __retres = (int)(((unsigned long)((struct igb_adapter *)tmp)->num_rx_queues * (unsigned long)5U + (unsigned long)(((struct igb_adapter *)tmp_0)->num_tx_queues * 3)) + (unsigned long)50U);
    
#line 2244 
    goto return_label;
    case 0: 
#line 2245 
    ;
    
#line 2246 
    __retres = 5;
    
#line 2246 
    goto return_label;
    default: 
#line 2247 
    ;
    
#line 2248 
    __retres = -524;
    
#line 2248 
    goto return_label;
  }
  return_label: 
#line 2242 
                return __retres;
}


#line 2252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  unsigned int start;
  struct igb_ring *ring;
  int i;
  int j;
  char *p;
  bool tmp_2;
  
#line 2255 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2256 
  struct rtnl_link_stats64 *net_stats = & adapter->stats64;
  
#line 2262 
  ldv_spin_lock_78(& adapter->stats64_lock);
  
#line 2263 
  igb_update_stats(adapter,net_stats);
  
#line 2265 
  i = 0;
  
#line 2265 
  goto ldv_48852;
  ldv_48851: 
#line 2266 
  ;
  
#line 2266 
  p = (char *)adapter + igb_gstrings_stats[i].stat_offset;
  
#line 2267 
  if (igb_gstrings_stats[i].sizeof_stat == 8) 
#line 2267 
                                              *(data + i) = *((u64 *)p); else 
                                                                    
#line 2267 
                                                                    *(data + i) = (unsigned long long)*((u32 *)p);
  
#line 2265 
  i += 1;
  ldv_48852: 
#line 2266 
  ;
  
#line 2265 
  if ((unsigned int)i <= 40U) 
#line 2267 
                              goto ldv_48851; else 
#line 2270 
                                                   goto ldv_48853;
  ldv_48853: 
#line 2271 
  ;
  
#line 2270 
  j = 0;
  
#line 2270 
  goto ldv_48855;
  ldv_48854: 
#line 2271 
  ;
  
#line 2271 
  p = (char *)net_stats + igb_gstrings_net_stats[j].stat_offset;
  
#line 2272 
  if (igb_gstrings_net_stats[j].sizeof_stat == 8) 
#line 2272 
                                                  *(data + i) = *((u64 *)p); else 
                                                                    
#line 2272 
                                                                    *(data + i) = (unsigned long long)*((u32 *)p);
  
#line 2270 
  j += 1;
  
#line 2270 
  i += 1;
  ldv_48855: 
#line 2271 
  ;
  
#line 2270 
  if ((unsigned int)j <= 8U) 
#line 2272 
                             goto ldv_48854; else 
#line 2275 
                                                  goto ldv_48856;
  ldv_48856: 
#line 2276 
  ;
  
#line 2275 
  j = 0;
  
#line 2275 
  goto ldv_48863;
  ldv_48862: 
#line 2276 
  ;
  {
    u64 restart2;
    bool tmp_0;
    bool tmp_1;
    
#line 2278 
    ring = adapter->tx_ring[j];
    ldv_48858: 
#line 2279 
    ;
    
#line 2280 
    start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp));
    
#line 2281 
    *(data + i) = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.packets;
    
#line 2282 
    *(data + ((unsigned int)i + 1U)) = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.bytes;
    
#line 2283 
    *(data + ((unsigned int)i + 2U)) = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.restart_queue;
    
#line 2284 
    tmp_0 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp),start);
    
#line 2284 
    if ((int)tmp_0 != 0) 
#line 2286 
                         goto ldv_48858; else 
#line 2289 
                                              goto ldv_48859;
    ldv_48859: 
#line 2290 
    ;
    ldv_48860: 
#line 2291 
    ;
    
#line 2286 
    start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp2));
    
#line 2287 
    restart2 = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.restart_queue2;
    
#line 2288 
    tmp_1 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp2),start);
    
#line 2288 
    if ((int)tmp_1 != 0) 
#line 2290 
                         goto ldv_48860; else 
#line 2293 
                                              goto ldv_48861;
    ldv_48861: 
#line 2294 
    ;
    
#line 2289 
    *(data + ((unsigned int)i + 2U)) += restart2;
    
#line 2291 
    i += 3;
  }
  
#line 2275 
  j += 1;
  ldv_48863: 
#line 2276 
  ;
  
#line 2275 
  if (adapter->num_tx_queues > j) 
#line 2277 
                                  goto ldv_48862; else 
#line 2280 
                                                       goto ldv_48864;
  ldv_48864: 
#line 2281 
  ;
  
#line 2293 
  j = 0;
  
#line 2293 
  goto ldv_48868;
  ldv_48867: 
#line 2294 
  ;
  
#line 2294 
  ring = adapter->rx_ring[j];
  ldv_48865: 
#line 2295 
  ;
  
#line 2296 
  start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_syncp));
  
#line 2297 
  *(data + i) = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.packets;
  
#line 2298 
  *(data + ((unsigned int)i + 1U)) = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.bytes;
  
#line 2299 
  *(data + ((unsigned int)i + 2U)) = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.drops;
  
#line 2300 
  *(data + ((unsigned int)i + 3U)) = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.csum_err;
  
#line 2301 
  *(data + ((unsigned int)i + 4U)) = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.alloc_failed;
  
#line 2302 
  tmp_2 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_syncp),start);
  
#line 2302 
  if ((int)tmp_2 != 0) 
#line 2304 
                       goto ldv_48865; else 
#line 2307 
                                            goto ldv_48866;
  ldv_48866: 
#line 2308 
  ;
  
#line 2303 
  i = (int)((unsigned int)i + 5U);
  
#line 2293 
  j += 1;
  ldv_48868: 
#line 2294 
  ;
  
#line 2293 
  if (adapter->num_rx_queues > j) 
#line 2295 
                                  goto ldv_48867; else 
#line 2298 
                                                       goto ldv_48869;
  ldv_48869: 
#line 2299 
  ;
  
#line 2305 
  ldv_spin_unlock_79(& adapter->stats64_lock);
  
#line 2306 
  return;
}


#line 2308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  int i;
  
#line 2310 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2311 
  u8 *p = data;
  
#line 2314 
  switch (stringset) {
    case (u32)0: 
#line 2315 
    ;
    
#line 2316 
    memcpy((void *)data,(void const *)(& igb_gstrings_test),160UL);
    
#line 2318 
    goto ldv_48879;
    case (u32)1: 
#line 2319 
    ;
    
#line 2320 
    i = 0;
    
#line 2320 
    goto ldv_48882;
    ldv_48881: 
#line 2321 
    ;
    
#line 2321 
    memcpy((void *)p,(void const *)(& igb_gstrings_stats[i].stat_string),32UL);
    
#line 2323 
    p += 32U;
    
#line 2320 
    i += 1;
    ldv_48882: 
#line 2321 
    ;
    
#line 2320 
    if ((unsigned int)i <= 40U) 
#line 2322 
                                goto ldv_48881; else 
#line 2325 
                                                     goto ldv_48883;
    ldv_48883: 
#line 2326 
    ;
    
#line 2325 
    i = 0;
    
#line 2325 
    goto ldv_48885;
    ldv_48884: 
#line 2326 
    ;
    
#line 2326 
    memcpy((void *)p,(void const *)(& igb_gstrings_net_stats[i].stat_string),32UL);
    
#line 2328 
    p += 32U;
    
#line 2325 
    i += 1;
    ldv_48885: 
#line 2326 
    ;
    
#line 2325 
    if ((unsigned int)i <= 8U) 
#line 2327 
                               goto ldv_48884; else 
#line 2330 
                                                    goto ldv_48886;
    ldv_48886: 
#line 2331 
    ;
    
#line 2330 
    i = 0;
    
#line 2330 
    goto ldv_48888;
    ldv_48887: 
#line 2331 
    ;
    
#line 2331 
    sprintf((char *)p,"tx_queue_%u_packets",i);
    
#line 2332 
    p += 32U;
    
#line 2333 
    sprintf((char *)p,"tx_queue_%u_bytes",i);
    
#line 2334 
    p += 32U;
    
#line 2335 
    sprintf((char *)p,"tx_queue_%u_restart",i);
    
#line 2336 
    p += 32U;
    
#line 2330 
    i += 1;
    ldv_48888: 
#line 2331 
    ;
    
#line 2330 
    if (adapter->num_tx_queues > i) 
#line 2332 
                                    goto ldv_48887; else 
#line 2335 
                                                         goto ldv_48889;
    ldv_48889: 
#line 2336 
    ;
    
#line 2338 
    i = 0;
    
#line 2338 
    goto ldv_48891;
    ldv_48890: 
#line 2339 
    ;
    
#line 2339 
    sprintf((char *)p,"rx_queue_%u_packets",i);
    
#line 2340 
    p += 32U;
    
#line 2341 
    sprintf((char *)p,"rx_queue_%u_bytes",i);
    
#line 2342 
    p += 32U;
    
#line 2343 
    sprintf((char *)p,"rx_queue_%u_drops",i);
    
#line 2344 
    p += 32U;
    
#line 2345 
    sprintf((char *)p,"rx_queue_%u_csum_err",i);
    
#line 2346 
    p += 32U;
    
#line 2347 
    sprintf((char *)p,"rx_queue_%u_alloc_failed",i);
    
#line 2348 
    p += 32U;
    
#line 2338 
    i += 1;
    ldv_48891: 
#line 2339 
    ;
    
#line 2338 
    if (adapter->num_rx_queues > i) 
#line 2340 
                                    goto ldv_48890; else 
#line 2343 
                                                         goto ldv_48892;
    ldv_48892: 
#line 2344 
    ;
    
#line 2351 
    goto ldv_48879;
  }
  ldv_48879: 
#line 2353 
  ;
  
#line 2354 
  return;
}


#line 2355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
{
  int __retres;
  
#line 2358 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 2360 
  if (adapter->ptp_clock != (struct ptp_clock *)0) 
#line 2361 
                                                   info->phc_index = ptp_clock_index(adapter->ptp_clock); else 
                                                                    
#line 2363 
                                                                    info->phc_index = -1;
  
#line 2365 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)1: 
#line 2366 
    ;
    
#line 2367 
    info->so_timestamping = 26U;
    
#line 2371 
    __retres = 0;
    
#line 2371 
    goto return_label;
    case (unsigned int)2: 
#line 2372 
    ;
    case (unsigned int)3: 
#line 2373 
    ;
    case (unsigned int)4: 
#line 2374 
    ;
    case (unsigned int)5: 
#line 2375 
    ;
    case (unsigned int)6: 
#line 2376 
    ;
    case (unsigned int)7: 
#line 2377 
    ;
    
#line 2378 
    info->so_timestamping = 95U;
    
#line 2386 
    info->tx_types = 3U;
    
#line 2390 
    info->rx_filters = 1U;
    
#line 2393 
    if (adapter->hw.mac.type > (unsigned int)e1000_82576) 
#line 2394 
                                                          info->rx_filters |= 2U; else 
                                                                    
#line 2396 
                                                                    info->rx_filters |= 7600U;
    
#line 2405 
    __retres = 0;
    
#line 2405 
    goto return_label;
    default: 
#line 2406 
    ;
    
#line 2407 
    __retres = -95;
    
#line 2407 
    goto return_label;
  }
  return_label: 
#line 2365 
                return __retres;
}


#line 2411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_rss_hash_opts(struct igb_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  int __retres;
  
#line 2414 
  cmd->data = 0ULL;
  
#line 2417 
  switch (cmd->flow_type) {
    case (__u32)1: 
#line 2418 
    ;
    
#line 2419 
    cmd->data |= 192ULL;
    case (__u32)2: 
#line 2421 
    ;
    
#line 2422 
    if ((adapter->flags & 64U) != 0U) 
#line 2423 
                                      cmd->data |= 192ULL; else ;
    case (__u32)3: 
#line 2425 
    ;
    case (__u32)4: 
#line 2426 
    ;
    case (__u32)9: 
#line 2427 
    ;
    case (__u32)10: 
#line 2428 
    ;
    case (__u32)16: 
#line 2429 
    ;
    
#line 2430 
    cmd->data |= 48ULL;
    
#line 2431 
    goto ldv_48917;
    case (__u32)5: 
#line 2432 
    ;
    
#line 2433 
    cmd->data |= 192ULL;
    case (__u32)6: 
#line 2435 
    ;
    
#line 2436 
    if ((adapter->flags & 128U) != 0U) 
#line 2437 
                                       cmd->data |= 192ULL; else ;
    case (__u32)7: 
#line 2439 
    ;
    case (__u32)8: 
#line 2440 
    ;
    case (__u32)11: 
#line 2441 
    ;
    case (__u32)12: 
#line 2442 
    ;
    case (__u32)17: 
#line 2443 
    ;
    
#line 2444 
    cmd->data |= 48ULL;
    
#line 2445 
    goto ldv_48917;
    default: 
#line 2446 
    ;
    
#line 2447 
    __retres = -22;
    
#line 2447 
    goto return_label;
  }
  ldv_48917: 
#line 2450 
  ;
  
#line 2450 
  __retres = 0;
  return_label: 
#line 2450 
                return __retres;
}


#line 2453  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  
#line 2456 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 2457 
  int ret = -95;
  
#line 2459 
  switch (cmd->cmd) {
    case (__u32)45: 
#line 2460 
    ;
    
#line 2461 
    cmd->data = (unsigned long long)adapter->num_rx_queues;
    
#line 2462 
    ret = 0;
    
#line 2463 
    goto ldv_48934;
    case (__u32)41: 
#line 2464 
    ;
    
#line 2465 
    ret = igb_get_rss_hash_opts(adapter,cmd);
    
#line 2466 
    goto ldv_48934;
    default: 
#line 2467 
    ;
    
#line 2468 
    goto ldv_48934;
  }
  ldv_48934: 
#line 2471 
  ;
  
#line 2471 
  return ret;
}


#line 2476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_rss_hash_opt(struct igb_adapter *adapter, struct ethtool_rxnfc *nfc)
{
  int __retres;
  
#line 2479 
  u32 flags = adapter->flags;
  
#line 2484 
  if ((nfc->data & 18446744073709551375ULL) != 0ULL) {
    
#line 2486 
    __retres = -22;
    
#line 2486 
    goto return_label;
  }
  else ;
  
#line 2488 
  switch (nfc->flow_type) {
    case (__u32)1: 
#line 2489 
    ;
    case (__u32)5: 
#line 2490 
    ;
    
#line 2491 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) == 0ULL) || (nfc->data & 128ULL) == 0ULL) {
      
#line 2495 
      __retres = -22;
      
#line 2495 
      goto return_label;
    }
    else ;
    
#line 2496 
    goto ldv_48944;
    case (__u32)2: 
#line 2497 
    ;
    
#line 2498 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) {
      
#line 2500 
      __retres = -22;
      
#line 2500 
      goto return_label;
    }
    else ;
    
#line 2501 
    switch (nfc->data & 192ULL) {
      case (unsigned long long)0: 
#line 2502 
      ;
      
#line 2503 
      flags &= 4294967231U;
      
#line 2504 
      goto ldv_48947;
      case (unsigned long long)192: 
#line 2505 
      ;
      
#line 2506 
      flags |= 64U;
      
#line 2507 
      goto ldv_48947;
      default: 
#line 2508 
      ;
      
#line 2509 
      __retres = -22;
      
#line 2509 
      goto return_label;
    }
    ldv_48947: 
#line 2511 
    ;
    
#line 2511 
    goto ldv_48944;
    case (__u32)6: 
#line 2512 
    ;
    
#line 2513 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) {
      
#line 2515 
      __retres = -22;
      
#line 2515 
      goto return_label;
    }
    else ;
    
#line 2516 
    switch (nfc->data & 192ULL) {
      case (unsigned long long)0: 
#line 2517 
      ;
      
#line 2518 
      flags &= 4294967167U;
      
#line 2519 
      goto ldv_48952;
      case (unsigned long long)192: 
#line 2520 
      ;
      
#line 2521 
      flags |= 128U;
      
#line 2522 
      goto ldv_48952;
      default: 
#line 2523 
      ;
      
#line 2524 
      __retres = -22;
      
#line 2524 
      goto return_label;
    }
    ldv_48952: 
#line 2526 
    ;
    
#line 2526 
    goto ldv_48944;
    case (__u32)4: 
#line 2527 
    ;
    case (__u32)9: 
#line 2528 
    ;
    case (__u32)10: 
#line 2529 
    ;
    case (__u32)3: 
#line 2530 
    ;
    case (__u32)8: 
#line 2531 
    ;
    case (__u32)11: 
#line 2532 
    ;
    case (__u32)12: 
#line 2533 
    ;
    case (__u32)7: 
#line 2534 
    ;
    
#line 2535 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) != 0ULL) || (nfc->data & 128ULL) != 0ULL) {
      
#line 2539 
      __retres = -22;
      
#line 2539 
      goto return_label;
    }
    else ;
    
#line 2540 
    goto ldv_48944;
    default: 
#line 2541 
    ;
    
#line 2542 
    __retres = -22;
    
#line 2542 
    goto return_label;
  }
  ldv_48944: 
#line 2546 
  ;
  
#line 2546 
  if (adapter->flags != flags) {
    
#line 2547 
    struct e1000_hw *hw = & adapter->hw;
    
#line 2548 
    u32 mrqc = igb_rd32(hw,22552U);
    
#line 2550 
    if ((flags & 192U) != 0U && (adapter->flags & 192U) == 0U) 
#line 2552 
                                                               dev_err((struct device const *)(& (adapter->pdev)->dev),"enabling UDP RSS: fragmented packets may arrive out of order to the stack above\n"); else ;
    
#line 2555 
    adapter->flags = flags;
    
#line 2558 
    mrqc |= 3342336U;
    
#line 2563 
    mrqc &= 4282384383U;
    
#line 2566 
    if ((flags & 64U) != 0U) 
#line 2567 
                             mrqc |= 4194304U; else ;
    
#line 2569 
    if ((flags & 128U) != 0U) 
#line 2570 
                              mrqc |= 8388608U; else ;
    {
      u8 * volatile *tmp_0;
      {
        
#line 2572 
        u8 *__var = (u8 *)0U;
        
#line 2572 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 2572 
      u8 *hw_addr = *tmp_0;
      
#line 2572 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2572 
                                             writel(mrqc,(void volatile *)(hw_addr + 22552U)); else ;
    }
  }
  else ;
  
#line 2575 
  __retres = 0;
  return_label: 
#line 2575 
                return __retres;
}


#line 2578  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd)
{
  
#line 2580 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 2581 
  int ret = -95;
  
#line 2583 
  switch (cmd->cmd) {
    case (__u32)42: 
#line 2584 
    ;
    
#line 2585 
    ret = igb_set_rss_hash_opt(adapter,cmd);
    
#line 2586 
    goto ldv_48976;
    default: 
#line 2587 
    ;
    
#line 2588 
    goto ldv_48976;
  }
  ldv_48976: 
#line 2591 
  ;
  
#line 2591 
  return ret;
}


#line 2594  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_eee(struct net_device *netdev, struct ethtool_eee *edata)
{
  int __retres;
  u32 ret_val;
  u16 phy_data;
  
#line 2596 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2597 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2601 
  if (hw->mac.type <= (unsigned int)e1000_82580 || hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    
#line 2603 
    __retres = -95;
    
#line 2603 
    goto return_label;
  }
  else ;
  
#line 2605 
  edata->supported = 40U;
  
#line 2607 
  if (! hw->dev_spec._82575.eee_disable) 
#line 2608 
                                         edata->advertised = mmd_eee_adv_to_ethtool_adv_t((unsigned short)((int)adapter->eee_advert)); else ;
  
#line 2612 
  if (hw->mac.type == (unsigned int)e1000_i354) 
#line 2613 
                                                igb_get_eee_status_i354(hw,(bool *)(& edata->eee_active));
  else {
    u32 eeer;
    
#line 2617 
    eeer = igb_rd32(hw,3632U);
    
#line 2620 
    if ((eeer & 536870912U) != 0U) 
#line 2621 
                                   edata->eee_active = 1U; else ;
    
#line 2623 
    if ((eeer & 65536U) != 0U) 
#line 2624 
                               edata->tx_lpi_enabled = 1U; else ;
  }
  
#line 2628 
  switch ((unsigned int)hw->mac.type) {
    s32 tmp_0;
    s32 tmp_1;
    case (unsigned int)4: 
#line 2629 
    ;
    
#line 2630 
    tmp_0 = igb_read_emi_reg(hw,(unsigned short)1039,& phy_data);
    
#line 2630 
    ret_val = (unsigned int)tmp_0;
    
#line 2632 
    if (ret_val != 0U) {
      
#line 2633 
      __retres = -61;
      
#line 2633 
      goto return_label;
    }
    else ;
    
#line 2635 
    edata->lp_advertised = mmd_eee_adv_to_ethtool_adv_t((unsigned short)((int)phy_data));
    
#line 2636 
    goto ldv_48988;
    case (unsigned int)5: 
#line 2637 
    ;
    case (unsigned int)6: 
#line 2638 
    ;
    case (unsigned int)7: 
#line 2639 
    ;
    
#line 2640 
    tmp_1 = igb_read_xmdio_reg(hw,(unsigned short)61,(unsigned char)7,& phy_data);
    
#line 2640 
    ret_val = (unsigned int)tmp_1;
    
#line 2643 
    if (ret_val != 0U) {
      
#line 2644 
      __retres = -61;
      
#line 2644 
      goto return_label;
    }
    else ;
    
#line 2646 
    edata->lp_advertised = mmd_eee_adv_to_ethtool_adv_t((unsigned short)((int)phy_data));
    
#line 2648 
    goto ldv_48988;
    default: 
#line 2649 
    ;
    
#line 2650 
    goto ldv_48988;
  }
  ldv_48988: 
#line 2653 
  ;
  
#line 2653 
  edata->eee_enabled = (unsigned int)(! hw->dev_spec._82575.eee_disable);
  
#line 2655 
  if (hw->mac.type == (unsigned int)e1000_i354 && edata->eee_enabled != 0U) 
    
#line 2657 
    edata->tx_lpi_enabled = 1U; else ;
  
#line 2662 
  if ((unsigned int)adapter->link_duplex == 1U) {
    
#line 2663 
    edata->eee_enabled = 0U;
    
#line 2664 
    edata->eee_active = 0U;
    
#line 2665 
    edata->tx_lpi_enabled = 0U;
    
#line 2666 
    edata->advertised = 0U;
  }
  else ;
  
#line 2669 
  __retres = 0;
  return_label: 
#line 2669 
                return __retres;
}


#line 2672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_eee(struct net_device *netdev, struct ethtool_eee *edata)
{
  int __retres;
  struct ethtool_eee eee_curr;
  s32 ret_val;
  
#line 2675 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2676 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2678 
  bool adv1g_eee = (_Bool)1;
  
#line 2678 
  bool adv100m_eee = (_Bool)1;
  
#line 2681 
  if (hw->mac.type <= (unsigned int)e1000_82580 || hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    
#line 2683 
    __retres = -95;
    
#line 2683 
    goto return_label;
  }
  else ;
  
#line 2685 
  memset((void *)(& eee_curr),0,40UL);
  
#line 2687 
  ret_val = igb_get_eee(netdev,& eee_curr);
  
#line 2688 
  if (ret_val != 0) {
    
#line 2689 
    __retres = ret_val;
    
#line 2689 
    goto return_label;
  }
  else ;
  
#line 2691 
  if (eee_curr.eee_enabled != 0U) {
    
#line 2692 
    if (eee_curr.tx_lpi_enabled != edata->tx_lpi_enabled) {
      
#line 2693 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Setting EEE tx-lpi is not supported\n");
      
#line 2695 
      __retres = -22;
      
#line 2695 
      goto return_label;
    }
    else ;
    
#line 2699 
    if (edata->tx_lpi_timer != 0U) {
      
#line 2700 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Setting EEE Tx LPI timer is not supported\n");
      
#line 2702 
      __retres = -22;
      
#line 2702 
      goto return_label;
    }
    else ;
    
#line 2705 
    if (edata->advertised == 0U || (edata->advertised & 4294967255U) != 0U) {
      
#line 2707 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"EEE Advertisement supports only 100Tx and/or 100T full duplex\n");
      
#line 2709 
      __retres = -22;
      
#line 2709 
      goto return_label;
    }
    else ;
    
#line 2711 
    adv100m_eee = (_Bool)((edata->advertised & 8U) != 0U);
    
#line 2712 
    adv1g_eee = (_Bool)((edata->advertised & 32U) != 0U);
  }
  else 
    
#line 2714 
    if (edata->eee_enabled == 0U) {
      
#line 2715 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Setting EEE options are not supported with EEE disabled\n");
      
#line 2717 
      __retres = -22;
      
#line 2717 
      goto return_label;
    }
    else ;
  
#line 2720 
  adapter->eee_advert = ethtool_adv_to_mmd_eee_adv_t(edata->advertised);
  
#line 2721 
  if ((int)hw->dev_spec._82575.eee_disable != (edata->eee_enabled == 0U)) {
    bool tmp_0;
    
#line 2722 
    hw->dev_spec._82575.eee_disable = (_Bool)(edata->eee_enabled == 0U);
    
#line 2723 
    adapter->flags |= 16384U;
    
#line 2726 
    tmp_0 = netif_running((struct net_device const *)netdev);
    
#line 2726 
    if ((int)tmp_0 != 0) 
#line 2727 
                         igb_reinit_locked(adapter); else 
#line 2729 
                                                          igb_reset(adapter);
  }
  else ;
  
#line 2732 
  if (hw->mac.type == (unsigned int)e1000_i354) 
#line 2733 
                                                ret_val = igb_set_eee_i354(hw,(_Bool)((bool)((int)adv1g_eee) != 0),(_Bool)((bool)((int)adv100m_eee) != 0)); else 
                                                                    
#line 2735 
                                                                    ret_val = igb_set_eee_i350(hw,(_Bool)((bool)((int)adv1g_eee) != 0),(_Bool)((bool)((int)adv100m_eee) != 0));
  
#line 2737 
  if (ret_val != 0) {
    
#line 2738 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Problem setting EEE advertisement options\n");
    
#line 2740 
    __retres = -22;
    
#line 2740 
    goto return_label;
  }
  else ;
  
#line 2743 
  __retres = 0;
  return_label: 
#line 2743 
                return __retres;
}


#line 2746  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_module_info(struct net_device *netdev, struct ethtool_modinfo *modinfo)
{
  int __retres;
  u16 sff8472_rev;
  u16 addr_mode;
  s32 tmp_0;
  s32 tmp_1;
  
#line 2749 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2750 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2751 
  u32 status = 0U;
  
#line 2753 
  bool page_swap = (_Bool)0;
  
#line 2755 
  if (hw->phy.media_type <= (unsigned int)e1000_media_type_copper) {
    
#line 2757 
    __retres = -95;
    
#line 2757 
    goto return_label;
  }
  else ;
  
#line 2760 
  tmp_0 = igb_read_phy_reg_i2c(hw,94U,& sff8472_rev);
  
#line 2760 
  status = (unsigned int)tmp_0;
  
#line 2761 
  if (status != 0U) {
    
#line 2762 
    __retres = -5;
    
#line 2762 
    goto return_label;
  }
  else ;
  
#line 2765 
  tmp_1 = igb_read_phy_reg_i2c(hw,92U,& addr_mode);
  
#line 2765 
  status = (unsigned int)tmp_1;
  
#line 2766 
  if (status != 0U) {
    
#line 2767 
    __retres = -5;
    
#line 2767 
    goto return_label;
  }
  else ;
  
#line 2770 
  if (((int)addr_mode & 4) != 0) {
    {
      
#line 2771 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_module_info", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c", .format = "Address change required to access page 0xA2, but not supported. Please report the module type to the driver maintainers.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2771U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2771 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 2771 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 2771 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_2,"Address change required to access page 0xA2, but not supported. Please report the module type to the driver maintainers.\n");
      }
      else ;
    }
    
#line 2772 
    page_swap = (_Bool)1;
  }
  else ;
  
#line 2775 
  if (((int)sff8472_rev & 255) == 0 || (int)page_swap != 0) {
    
#line 2777 
    modinfo->type = 1U;
    
#line 2778 
    modinfo->eeprom_len = 256U;
  }
  else {
    
#line 2781 
    modinfo->type = 2U;
    
#line 2782 
    modinfo->eeprom_len = 512U;
  }
  
#line 2785 
  __retres = 0;
  return_label: 
#line 2785 
                return __retres;
}


#line 2788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_module_eeprom(struct net_device *netdev, struct ethtool_eeprom *ee, u8 *data)
{
  int __retres;
  u16 *dataword;
  u16 first_word;
  u16 last_word;
  s32 tmp_1;
  
#line 2791 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2792 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2793 
  u32 status = 0U;
  
#line 2796 
  int i = 0;
  
#line 2798 
  if (ee->len == 0U) {
    
#line 2799 
    __retres = -22;
    
#line 2799 
    goto return_label;
  }
  else ;
  
#line 2801 
  first_word = (unsigned short)(ee->offset >> 1);
  
#line 2802 
  last_word = (unsigned short)(((ee->offset + ee->len) + 4294967295U) >> 1);
  
#line 2804 
  dataword = (u16 *)kmalloc((unsigned long)(((int)last_word - (int)first_word) + 1) * 2UL,208U);
  
#line 2806 
  if (dataword == (u16 *)0U) {
    
#line 2807 
    __retres = -12;
    
#line 2807 
    goto return_label;
  }
  else ;
  
#line 2810 
  i = 0;
  
#line 2810 
  goto ldv_49028;
  ldv_49027: 
#line 2811 
  ;
  
#line 2811 
  tmp_1 = igb_read_phy_reg_i2c(hw,(unsigned int)((int)first_word + i),dataword + i);
  
#line 2811 
  status = (unsigned int)tmp_1;
  
#line 2812 
  if (status != 0U) {
    
#line 2814 
    kfree((void const *)dataword);
    
#line 2815 
    __retres = -5;
    
#line 2815 
    goto return_label;
  }
  else ;
  
#line 2818 
  __swab16s(dataword + i);
  
#line 2810 
  i += 1;
  ldv_49028: 
#line 2811 
  ;
  
#line 2810 
  if (((int)last_word - (int)first_word) + 1 > i) 
#line 2812 
                                                  goto ldv_49027; else 
                                                                    
#line 2815 
                                                                    goto ldv_49029;
  ldv_49029: 
#line 2816 
  ;
  
#line 2821 
  memcpy((void *)data,(void const *)dataword + (ee->offset & 1U),(unsigned long)ee->len);
  
#line 2822 
  kfree((void const *)dataword);
  
#line 2824 
  __retres = 0;
  return_label: 
#line 2824 
                return __retres;
}


#line 2827  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_ethtool_begin(struct net_device *netdev)
{
  int __retres;
  
#line 2829 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2830 
  pm_runtime_get_sync(& (adapter->pdev)->dev);
  
#line 2831 
  __retres = 0;
  
#line 2831 
  return __retres;
}


#line 2834  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_ethtool_complete(struct net_device *netdev)
{
  
#line 2836 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2837 
  pm_runtime_put(& (adapter->pdev)->dev);
  
#line 2838 
  return;
}


#line 2840  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static u32 igb_get_rxfh_indir_size(struct net_device *netdev)
{
  u32 __retres;
  
#line 2842 
  __retres = 128U;
  
#line 2842 
  return __retres;
}


#line 2845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  int __retres;
  int i;
  
#line 2848 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2851 
  if (hfunc != (u8 *)0U) 
#line 2852 
                         *hfunc = (unsigned char)1U; else ;
  
#line 2853 
  if (indir == (u32 *)0U) {
    
#line 2854 
    __retres = 0;
    
#line 2854 
    goto return_label;
  }
  else ;
  
#line 2855 
  i = 0;
  
#line 2855 
  goto ldv_49050;
  ldv_49049: 
#line 2856 
  ;
  
#line 2856 
  *(indir + i) = (unsigned int)adapter->rss_indir_tbl[i];
  
#line 2855 
  i += 1;
  ldv_49050: 
#line 2856 
  ;
  
#line 2855 
  if (i <= 127) 
#line 2857 
                goto ldv_49049; else 
#line 2860 
                                     goto ldv_49051;
  ldv_49051: 
#line 2861 
  ;
  
#line 2858 
  __retres = 0;
  return_label: 
#line 2858 
                return __retres;
}


#line 2861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
void igb_write_rss_indir_tbl(struct igb_adapter *adapter)
{
  
#line 2863 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2864 
  u32 reg = 23552U;
  
#line 2865 
  u32 shift = 0U;
  
#line 2866 
  int i = 0;
  
#line 2868 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 2869 
    ;
    
#line 2870 
    shift = 6U;
    
#line 2871 
    goto ldv_49060;
    case (unsigned int)2: 
#line 2872 
    ;
    
#line 2874 
    if (adapter->vfs_allocated_count != 0U) 
#line 2875 
                                            shift = 3U; else ;
    
#line 2876 
    goto ldv_49060;
    default: 
#line 2877 
    ;
    
#line 2878 
    goto ldv_49060;
  }
  ldv_49060: 
#line 2881 
  ;
  
#line 2881 
  goto ldv_49072;
  ldv_49071: 
#line 2882 
  ;
  {
    int j;
    
#line 2882 
    u32 val = 0U;
    
#line 2885 
    j = 3;
    
#line 2885 
    goto ldv_49066;
    ldv_49065: 
#line 2886 
    ;
    
#line 2886 
    val <<= 8;
    
#line 2887 
    val = (unsigned int)adapter->rss_indir_tbl[i + j] | val;
    
#line 2885 
    j -= 1;
    ldv_49066: 
#line 2886 
    ;
    
#line 2885 
    if (j >= 0) 
#line 2887 
                goto ldv_49065; else 
#line 2890 
                                     goto ldv_49067;
    ldv_49067: 
#line 2891 
    ;
    {
      u8 * volatile *tmp;
      {
        
#line 2890 
        u8 *__var = (u8 *)0U;
        
#line 2890 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 2890 
      u8 *hw_addr = *tmp;
      
#line 2890 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2890 
                                             writel(val << shift,(void volatile *)(hw_addr + reg)); else ;
    }
    
#line 2891 
    reg += 4U;
    
#line 2892 
    i += 4;
  }
  ldv_49072: 
#line 2894 
  ;
  
#line 2881 
  if (i <= 127) 
#line 2883 
                goto ldv_49071; else 
#line 2886 
                                     goto ldv_49073;
  ldv_49073: 
#line 2887 
  ;
  
#line 2888 
  return;
}


#line 2896  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_rxfh(struct net_device *netdev, u32 const *indir, u8 const *key, u8 const hfunc)
{
  int __retres;
  int i;
  u32 num_queues;
  
#line 2899 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2900 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2905 
  if (key != (u8 const *)0U || (unsigned int)hfunc > 1U) {
    
#line 2907 
    __retres = -95;
    
#line 2907 
    goto return_label;
  }
  else ;
  
#line 2908 
  if (indir == (u32 const *)0U) {
    
#line 2909 
    __retres = 0;
    
#line 2909 
    goto return_label;
  }
  else ;
  
#line 2911 
  num_queues = adapter->rss_queues;
  
#line 2913 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 2914 
    ;
    
#line 2916 
    if (adapter->vfs_allocated_count != 0U) 
#line 2917 
                                            num_queues = 2U; else ;
    
#line 2918 
    goto ldv_49085;
    default: 
#line 2919 
    ;
    
#line 2920 
    goto ldv_49085;
  }
  ldv_49085: 
#line 2924 
  ;
  
#line 2924 
  i = 0;
  
#line 2924 
  goto ldv_49088;
  ldv_49087: 
#line 2925 
  ;
  
#line 2925 
  if (*(indir + i) >= num_queues) {
    
#line 2926 
    __retres = -22;
    
#line 2926 
    goto return_label;
  }
  else ;
  
#line 2924 
  i += 1;
  ldv_49088: 
#line 2925 
  ;
  
#line 2924 
  if (i <= 127) 
#line 2926 
                goto ldv_49087; else 
#line 2929 
                                     goto ldv_49089;
  ldv_49089: 
#line 2930 
  ;
  
#line 2929 
  i = 0;
  
#line 2929 
  goto ldv_49091;
  ldv_49090: 
#line 2930 
  ;
  
#line 2930 
  adapter->rss_indir_tbl[i] = (unsigned char)*(indir + i);
  
#line 2929 
  i += 1;
  ldv_49091: 
#line 2930 
  ;
  
#line 2929 
  if (i <= 127) 
#line 2931 
                goto ldv_49090; else 
#line 2934 
                                     goto ldv_49092;
  ldv_49092: 
#line 2935 
  ;
  
#line 2932 
  igb_write_rss_indir_tbl(adapter);
  
#line 2934 
  __retres = 0;
  return_label: 
#line 2934 
                return __retres;
}


#line 2937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static unsigned int igb_max_channels(struct igb_adapter *adapter)
{
  
#line 2939 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2940 
  unsigned int max_combined = 0U;
  
#line 2942 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)7: 
#line 2943 
    ;
    
#line 2944 
    max_combined = 2U;
    
#line 2945 
    goto ldv_49099;
    case (unsigned int)1: 
#line 2946 
    ;
    case (unsigned int)6: 
#line 2947 
    ;
    
#line 2948 
    max_combined = 4U;
    
#line 2949 
    goto ldv_49099;
    case (unsigned int)4: 
#line 2950 
    ;
    
#line 2951 
    if (adapter->vfs_allocated_count != 0U) {
      
#line 2952 
      max_combined = 1U;
      
#line 2953 
      goto ldv_49099;
    }
    else ;
    case (unsigned int)2: 
#line 2956 
    ;
    
#line 2957 
    if (adapter->vfs_allocated_count != 0U) {
      
#line 2958 
      max_combined = 2U;
      
#line 2959 
      goto ldv_49099;
    }
    else ;
    case (unsigned int)3: 
#line 2962 
    ;
    case (unsigned int)5: 
#line 2963 
    ;
    default: 
#line 2964 
    ;
    
#line 2965 
    max_combined = 8U;
    
#line 2966 
    goto ldv_49099;
  }
  ldv_49099: 
#line 2969 
  ;
  
#line 2969 
  return max_combined;
}


#line 2972  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static void igb_get_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  
#line 2975 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2978 
  ch->max_combined = igb_max_channels(adapter);
  
#line 2981 
  if ((adapter->flags & 8192U) != 0U) {
    
#line 2982 
    ch->max_other = 1U;
    
#line 2983 
    ch->other_count = 1U;
  }
  else ;
  
#line 2986 
  ch->combined_count = adapter->rss_queues;
  
#line 2987 
  return;
}


#line 2989  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static int igb_set_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  int __retres;
  
#line 2992 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2993 
  unsigned int count = ch->combined_count;
  
#line 2994 
  unsigned int max_combined = 0U;
  
#line 2997 
  if ((count == 0U || ch->rx_count != 0U) || ch->tx_count != 0U) {
    
#line 2998 
    __retres = -22;
    
#line 2998 
    goto return_label;
  }
  else ;
  
#line 3001 
  if (ch->other_count != 1U) {
    
#line 3002 
    __retres = -22;
    
#line 3002 
    goto return_label;
  }
  else ;
  
#line 3005 
  max_combined = igb_max_channels(adapter);
  
#line 3006 
  if (count > max_combined) {
    
#line 3007 
    __retres = -22;
    
#line 3007 
    goto return_label;
  }
  else ;
  
#line 3009 
  if (adapter->rss_queues != count) {
    int tmp_0;
    
#line 3010 
    adapter->rss_queues = count;
    
#line 3011 
    igb_set_flag_queue_pairs(adapter,max_combined);
    
#line 3016 
    tmp_0 = igb_reinit_queues(adapter);
    
#line 3016 
    __retres = tmp_0;
    
#line 3016 
    goto return_label;
  }
  else ;
  
#line 3019 
  __retres = 0;
  return_label: 
#line 3019 
                return __retres;
}


#line 3022  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
static struct ethtool_ops const igb_ethtool_ops = {.get_settings = & igb_get_settings, .set_settings = & igb_set_settings, .get_drvinfo = & igb_get_drvinfo, .get_regs_len = & igb_get_regs_len, .get_regs = & igb_get_regs, .get_wol = & igb_get_wol, .set_wol = & igb_set_wol, .get_msglevel = & igb_get_msglevel, .set_msglevel = & igb_set_msglevel, .nway_reset = & igb_nway_reset, .get_link = & igb_get_link, .get_eeprom_len = & igb_get_eeprom_len, .get_eeprom = & igb_get_eeprom, .set_eeprom = & igb_set_eeprom, .get_coalesce = & igb_get_coalesce, .set_coalesce = & igb_set_coalesce, .get_ringparam = & igb_get_ringparam, .set_ringparam = & igb_set_ringparam, .get_pauseparam = & igb_get_pauseparam, .set_pauseparam = & igb_set_pauseparam, .self_test = & igb_diag_test, .get_strings = & igb_get_strings, .set_phys_id = & igb_set_phys_id, .get_ethtool_stats = & igb_get_ethtool_stats, .begin = & igb_ethtool_begin, .complete = & igb_ethtool_complete, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & igb_get_sset_count, .get_rxnfc = & igb_get_rxnfc, .set_rxnfc = & igb_set_rxnfc, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = & igb_get_rxfh_indir_size, .get_rxfh = & igb_get_rxfh, .set_rxfh = & igb_set_rxfh, .get_channels = & igb_get_channels, .set_channels = & igb_set_channels, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = & igb_get_ts_info, .get_module_info = & igb_get_module_info, .get_module_eeprom = & igb_get_module_eeprom, .get_eee = & igb_get_eee, .set_eee = & igb_set_eee, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 3064  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ethtool.c"
void igb_set_ethtool_ops(struct net_device *netdev)
{
  
#line 3066 
  netdev->ethtool_ops = & igb_ethtool_ops;
  
#line 3067 
  return;
}


#line 63  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 67 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_regs_len_54(struct net_device *arg0)
{
  int tmp;
  
#line 72 
  tmp = igb_get_regs_len(arg0);
  
#line 72 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_rxnfc_21(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  int tmp;
  
#line 77 
  tmp = igb_get_rxnfc(arg0,arg1,arg2);
  
#line 77 
  return tmp;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_get_channels_32(struct net_device *arg0, struct ethtool_channels *arg1)
{
  
#line 82 
  igb_get_channels(arg0,arg1);
  
#line 83 
  return;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_pauseparam_56(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  int tmp;
  
#line 87 
  tmp = igb_set_pauseparam(arg0,arg1);
  
#line 87 
  return tmp;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_diag_test_17(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  
#line 92 
  igb_diag_test(arg0,arg1,arg2);
  
#line 93 
  return;
}


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_set_msglevel_31(struct net_device *arg0, unsigned int arg1)
{
  
#line 97 
  igb_set_msglevel(arg0,arg1);
  
#line 98 
  return;
}


#line 101  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_rxfh_23(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  int tmp;
  
#line 102 
  tmp = igb_get_rxfh(arg0,arg1,arg2,arg3);
  
#line 102 
  return tmp;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_get_ethtool_stats_24(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 107 
  igb_get_ethtool_stats(arg0,arg1,arg2);
  
#line 108 
  return;
}


#line 111  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_get_pauseparam_27(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  
#line 112 
  igb_get_pauseparam(arg0,arg1);
  
#line 113 
  return;
}


#line 116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_eee_39(struct net_device *arg0, struct ethtool_eee *arg1)
{
  int tmp;
  
#line 117 
  tmp = igb_set_eee(arg0,arg1);
  
#line 117 
  return tmp;
}


#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
unsigned int ldv_emg_wrapper_igb_get_rxfh_indir_size_30(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 122 
  tmp = igb_get_rxfh_indir_size(arg0);
  
#line 122 
  return tmp;
}


#line 126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_eeprom_9(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 127 
  tmp = igb_set_eeprom(arg0,arg1,arg2);
  
#line 127 
  return tmp;
}


#line 131  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_module_info_44(struct net_device *arg0, struct ethtool_modinfo *arg1)
{
  int tmp;
  
#line 132 
  tmp = igb_get_module_info(arg0,arg1);
  
#line 132 
  return tmp;
}


#line 136  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_rxnfc_7(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  int tmp;
  
#line 137 
  tmp = igb_set_rxnfc(arg0,arg1);
  
#line 137 
  return tmp;
}


#line 141  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_wol_19(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  int tmp;
  
#line 142 
  tmp = igb_set_wol(arg0,arg1);
  
#line 142 
  return tmp;
}


#line 146  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_get_regs_51(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  
#line 147 
  igb_get_regs(arg0,arg1,arg2);
  
#line 148 
  return;
}


#line 151  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_phys_id_3(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  int tmp;
  
#line 152 
  tmp = igb_set_phys_id(arg0,arg1);
  
#line 152 
  return tmp;
}


#line 156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_ts_info_53(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  int tmp;
  
#line 157 
  tmp = igb_get_ts_info(arg0,arg1);
  
#line 157 
  return tmp;
}


#line 161  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
enum irqreturn ldv_emg_wrapper_igb_test_intr_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 162 
  tmp = igb_test_intr(arg0,arg1);
  
#line 162 
  return tmp;
}


#line 166  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_ringparam_12(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  int tmp;
  
#line 167 
  tmp = igb_set_ringparam(arg0,arg1);
  
#line 167 
  return tmp;
}


#line 171  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_eeprom_len_38(struct net_device *arg0)
{
  int tmp;
  
#line 172 
  tmp = igb_get_eeprom_len(arg0);
  
#line 172 
  return tmp;
}


#line 176  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_ethtool_complete_42(struct net_device *arg0)
{
  
#line 177 
  igb_ethtool_complete(arg0);
  
#line 178 
  return;
}


#line 181  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_channels_37(struct net_device *arg0, struct ethtool_channels *arg1)
{
  int tmp;
  
#line 182 
  tmp = igb_set_channels(arg0,arg1);
  
#line 182 
  return tmp;
}


#line 186  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_get_wol_46(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  
#line 187 
  igb_get_wol(arg0,arg1);
  
#line 188 
  return;
}


#line 191  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_get_drvinfo_8(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 192 
  igb_get_drvinfo(arg0,arg1);
  
#line 193 
  return;
}


#line 196  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_coalesce_55(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 197 
  tmp = igb_set_coalesce(arg0,arg1);
  
#line 197 
  return tmp;
}


#line 201  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_eeprom_43(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 202 
  tmp = igb_get_eeprom(arg0,arg1,arg2);
  
#line 202 
  return tmp;
}


#line 206  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_sset_count_52(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 207 
  tmp = igb_get_sset_count(arg0,arg1);
  
#line 207 
  return tmp;
}


#line 211  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_settings_41(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 212 
  tmp = igb_get_settings(arg0,arg1);
  
#line 212 
  return tmp;
}


#line 216  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
unsigned int ldv_emg_wrapper_igb_get_msglevel_13(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 217 
  tmp = igb_get_msglevel(arg0);
  
#line 217 
  return tmp;
}


#line 221  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_rxfh_11(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  int tmp;
  
#line 222 
  tmp = igb_set_rxfh(arg0,(u32 const *)arg1,(u8 const *)arg2,(unsigned char)((int)arg3));
  
#line 222 
  return tmp;
}


#line 226  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
unsigned int ldv_emg_wrapper_igb_get_link_29(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 227 
  tmp = igb_get_link(arg0);
  
#line 227 
  return tmp;
}


#line 231  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_module_eeprom_5(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 232 
  tmp = igb_get_module_eeprom(arg0,arg1,arg2);
  
#line 232 
  return tmp;
}


#line 236  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_coalesce_48(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 237 
  tmp = igb_get_coalesce(arg0,arg1);
  
#line 237 
  return tmp;
}


#line 241  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_get_ringparam_22(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 242 
  igb_get_ringparam(arg0,arg1);
  
#line 243 
  return;
}


#line 246  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_set_settings_2(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 247 
  tmp = igb_set_settings(arg0,arg1);
  
#line 247 
  return tmp;
}


#line 251  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
void ldv_emg_wrapper_igb_get_strings_45(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 252 
  igb_get_strings(arg0,arg1,arg2);
  
#line 253 
  return;
}


#line 256  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_nway_reset_25(struct net_device *arg0)
{
  int tmp;
  
#line 257 
  tmp = igb_nway_reset(arg0);
  
#line 257 
  return tmp;
}


#line 261  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_ethtool_begin_49(struct net_device *arg0)
{
  int tmp;
  
#line 262 
  tmp = igb_ethtool_begin(arg0);
  
#line 262 
  return tmp;
}


#line 266  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
int ldv_emg_wrapper_igb_get_eee_10(struct net_device *arg0, struct ethtool_eee *arg1)
{
  int tmp;
  
#line 267 
  tmp = igb_get_eee(arg0,arg1);
  
#line 267 
  return tmp;
}


#line 325  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 328 
  ldv_atomic_inc(v);
  
#line 329 
  return;
}


#line 781  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 784 
  tmp = ldv_kmalloc(size,flags);
  
#line 784 
  return tmp;
}


#line 942  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static int ldv_request_irq_72(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 946 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 946 
  return tmp;
}


#line 950  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static int ldv_request_irq_73(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 954 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 954 
  return tmp;
}


#line 958  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static int ldv_request_irq_74(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 962 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 962 
  return tmp;
}


#line 966  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static int ldv_request_irq_75(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 970 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 970 
  return tmp;
}


#line 974  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static void ldv_free_irq_76(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 978 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 979 
  return;
}


#line 982  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static void ldv_free_irq_77(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 986 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 987 
  return;
}


#line 990  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static void ldv_spin_lock_78(spinlock_t *lock)
{
  
#line 994 
  ldv_spin_model_lock((char *)"stats64_lock_of_igb_adapter");
  
#line 996 
  spin_lock(lock);
  
#line 997 
  return;
}


#line 1000  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ethtool.c.aux"
static void ldv_spin_unlock_79(spinlock_t *lock)
{
  
#line 1004 
  ldv_spin_model_unlock((char *)"stats64_lock_of_igb_adapter");
  
#line 1006 
  spin_unlock(lock);
  
#line 1007 
  return;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.h"
s32 igb_acquire_nvm(struct e1000_hw *hw);


#line 28 
void igb_release_nvm(struct e1000_hw *hw);


#line 29 
s32 igb_read_mac_addr(struct e1000_hw *hw);


#line 31 
s32 igb_read_part_string(struct e1000_hw *hw, u8 *part_num, u32 part_num_size);


#line 34 
s32 igb_read_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);


#line 35 
s32 igb_write_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);


#line 37 
s32 igb_update_nvm_checksum(struct e1000_hw *hw);


#line 54 
void igb_get_fw_version(struct e1000_hw *hw, struct e1000_fw_version *fw_vers);


#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void igb_raise_eec_clk(struct e1000_hw *hw, u32 *eecd)
{
  
#line 38 
  *eecd |= 1U;
  {
    u8 * volatile *tmp;
    {
      
#line 39 
      u8 *__var = (u8 *)0U;
      
#line 39 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 39 
    u8 *hw_addr = *tmp;
    
#line 39 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 39 
                                           writel(*eecd,(void volatile *)(hw_addr + 16U)); else ;
  }
  
#line 40 
  igb_rd32(hw,8U);
  
#line 41 
  if (0 != 0) 
    
#line 41 
    if ((unsigned int)hw->nvm.delay_usec > 19999U) 
#line 41 
                                                   __bad_udelay(); else 
                                                                    
#line 41 
                                                                    __const_udelay((unsigned long)hw->nvm.delay_usec * 4295UL);
  else 
#line 41 
       __udelay((unsigned long)hw->nvm.delay_usec);
  
#line 43 
  return;
}


#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void igb_lower_eec_clk(struct e1000_hw *hw, u32 *eecd)
{
  
#line 53 
  *eecd &= 4294967294U;
  {
    u8 * volatile *tmp;
    {
      
#line 54 
      u8 *__var = (u8 *)0U;
      
#line 54 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 54 
    u8 *hw_addr = *tmp;
    
#line 54 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 54 
                                           writel(*eecd,(void volatile *)(hw_addr + 16U)); else ;
  }
  
#line 55 
  igb_rd32(hw,8U);
  
#line 56 
  if (0 != 0) 
    
#line 56 
    if ((unsigned int)hw->nvm.delay_usec > 19999U) 
#line 56 
                                                   __bad_udelay(); else 
                                                                    
#line 56 
                                                                    __const_udelay((unsigned long)hw->nvm.delay_usec * 4295UL);
  else 
#line 56 
       __udelay((unsigned long)hw->nvm.delay_usec);
  
#line 58 
  return;
}


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void igb_shift_out_eec_bits(struct e1000_hw *hw, u16 data, u16 count)
{
  u32 mask;
  
#line 71 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 72 
  u32 eecd = igb_rd32(hw,16U);
  
#line 75 
  mask = (unsigned int)(1 << ((int)count + -1));
  
#line 76 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) 
#line 77 
                                                       eecd |= 8U; else ;
  ldv_44037: 
#line 78 
  ;
  
#line 80 
  eecd &= 4294967291U;
  
#line 82 
  if (((unsigned int)data & mask) != 0U) 
#line 83 
                                         eecd |= 4U; else ;
  {
    u8 * volatile *tmp_0;
    {
      
#line 85 
      u8 *__var = (u8 *)0U;
      
#line 85 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 85 
    u8 *hw_addr = *tmp_0;
    
#line 85 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 85 
                                           writel(eecd,(void volatile *)(hw_addr + 16U)); else ;
  }
  
#line 86 
  igb_rd32(hw,8U);
  
#line 88 
  if (0 != 0) 
    
#line 88 
    if ((unsigned int)nvm->delay_usec > 19999U) 
#line 88 
                                                __bad_udelay(); else 
                                                                  
#line 88 
                                                                  __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
  else 
#line 88 
       __udelay((unsigned long)nvm->delay_usec);
  
#line 90 
  igb_raise_eec_clk(hw,& eecd);
  
#line 91 
  igb_lower_eec_clk(hw,& eecd);
  
#line 93 
  mask >>= 1;
  
#line 94 
  if (mask != 0U) 
#line 96 
                  goto ldv_44037; else 
#line 99 
                                       goto ldv_44038;
  ldv_44038: 
#line 100 
  ;
  
#line 96 
  eecd &= 4294967291U;
  {
    u8 * volatile *tmp_1;
    {
      
#line 97 
      u8 *__var_0 = (u8 *)0U;
      
#line 97 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 97 
    u8 *hw_addr_0 = *tmp_1;
    
#line 97 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 97 
                                             writel(eecd,(void volatile *)(hw_addr_0 + 16U)); else ;
  }
  
#line 99 
  return;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static u16 igb_shift_in_eec_bits(struct e1000_hw *hw, u16 count)
{
  u32 eecd;
  u32 i;
  u16 data;
  
#line 117 
  eecd = igb_rd32(hw,16U);
  
#line 119 
  eecd &= 4294967283U;
  
#line 120 
  data = (unsigned short)0U;
  
#line 122 
  i = 0U;
  
#line 122 
  goto ldv_44050;
  ldv_44049: 
#line 123 
  ;
  
#line 123 
  data = (unsigned short)((int)data << 1U);
  
#line 124 
  igb_raise_eec_clk(hw,& eecd);
  
#line 126 
  eecd = igb_rd32(hw,16U);
  
#line 128 
  eecd &= 4294967291U;
  
#line 129 
  if ((eecd & 8U) != 0U) 
#line 130 
                         data = (unsigned short)((unsigned int)data | 1U); else ;
  
#line 132 
  igb_lower_eec_clk(hw,& eecd);
  
#line 122 
  i += 1U;
  ldv_44050: 
#line 123 
  ;
  
#line 122 
  if ((unsigned int)count > i) 
#line 124 
                               goto ldv_44049; else 
#line 127 
                                                    goto ldv_44051;
  ldv_44051: 
#line 128 
  ;
  
#line 135 
  return data;
}


#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static s32 igb_poll_eerd_eewr_done(struct e1000_hw *hw, int ee_reg)
{
  u32 i;
  
#line 148 
  u32 attempts = 100000U;
  
#line 149 
  u32 reg = 0U;
  
#line 150 
  s32 ret_val = -1;
  
#line 152 
  i = 0U;
  
#line 152 
  goto ldv_44062;
  ldv_44061: 
#line 153 
  ;
  
#line 153 
  if (ee_reg == 0) 
#line 154 
                   reg = igb_rd32(hw,20U); else 
#line 156 
                                                reg = igb_rd32(hw,4140U);
  
#line 158 
  if ((reg & 2U) != 0U) {
    
#line 159 
    ret_val = 0;
    
#line 160 
    goto ldv_44060;
  }
  else ;
  
#line 163 
  __const_udelay(21475UL);
  
#line 152 
  i += 1U;
  ldv_44062: 
#line 153 
  ;
  
#line 152 
  if (i < attempts) 
#line 154 
                    goto ldv_44061; else 
#line 157 
                                         goto ldv_44060;
  ldv_44060: 
#line 158 
  ;
  
#line 166 
  return ret_val;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_acquire_nvm(struct e1000_hw *hw)
{
  
#line 179 
  u32 eecd = igb_rd32(hw,16U);
  
#line 180 
  s32 timeout = 1000;
  
#line 181 
  s32 ret_val = 0;
  {
    u8 * volatile *tmp_0;
    {
      
#line 184 
      u8 *__var = (u8 *)0U;
      
#line 184 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 184 
    u8 *hw_addr = *tmp_0;
    
#line 184 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 184 
                                           writel(eecd | 64U,(void volatile *)(hw_addr + 16U)); else ;
  }
  
#line 185 
  eecd = igb_rd32(hw,16U);
  
#line 187 
  goto ldv_44074;
  ldv_44073: 
#line 188 
  ;
  
#line 188 
  if ((eecd & 128U) != 0U) 
#line 189 
                           goto ldv_44072; else ;
  
#line 190 
  __const_udelay(21475UL);
  
#line 191 
  eecd = igb_rd32(hw,16U);
  
#line 192 
  timeout -= 1;
  ldv_44074: 
#line 193 
  ;
  
#line 187 
  if (timeout != 0) 
#line 189 
                    goto ldv_44073; else 
#line 192 
                                         goto ldv_44072;
  ldv_44072: 
#line 193 
  ;
  
#line 195 
  if (timeout == 0) {
    
#line 196 
    eecd &= 4294967231U;
    {
      u8 * volatile *tmp_1;
      {
        
#line 197 
        u8 *__var_0 = (u8 *)0U;
        
#line 197 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 197 
      u8 *hw_addr_0 = *tmp_1;
      
#line 197 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 197 
                                               writel(eecd,(void volatile *)(hw_addr_0 + 16U)); else ;
    }
    {
      
#line 198 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_acquire_nvm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "Could not acquire NVM grant\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))198U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 198 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 198 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 198 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_2,"Could not acquire NVM grant\n");
      }
      else ;
    }
    
#line 199 
    ret_val = -1;
  }
  else ;
  
#line 202 
  return ret_val;
}


#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void igb_standby_nvm(struct e1000_hw *hw)
{
  
#line 213 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 214 
  u32 eecd = igb_rd32(hw,16U);
  
#line 216 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) {
    
#line 218 
    eecd |= 2U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 219 
        u8 *__var = (u8 *)0U;
        
#line 219 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 219 
      u8 *hw_addr = *tmp_0;
      
#line 219 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 219 
                                             writel(eecd,(void volatile *)(hw_addr + 16U)); else ;
    }
    
#line 220 
    igb_rd32(hw,8U);
    
#line 221 
    if (0 != 0) 
      
#line 221 
      if ((unsigned int)nvm->delay_usec > 19999U) 
#line 221 
                                                  __bad_udelay(); else 
                                                                    
#line 221 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
#line 221 
         __udelay((unsigned long)nvm->delay_usec);
    
#line 222 
    eecd &= 4294967293U;
    {
      u8 * volatile *tmp_1;
      {
        
#line 223 
        u8 *__var_0 = (u8 *)0U;
        
#line 223 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 223 
      u8 *hw_addr_0 = *tmp_1;
      
#line 223 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 223 
                                               writel(eecd,(void volatile *)(hw_addr_0 + 16U)); else ;
    }
    
#line 224 
    igb_rd32(hw,8U);
    
#line 225 
    if (0 != 0) 
      
#line 225 
      if ((unsigned int)nvm->delay_usec > 19999U) 
#line 225 
                                                  __bad_udelay(); else 
                                                                    
#line 225 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
#line 225 
         __udelay((unsigned long)nvm->delay_usec);
  }
  else ;
  
#line 228 
  return;
}


#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static void e1000_stop_nvm(struct e1000_hw *hw)
{
  u32 eecd;
  
#line 239 
  eecd = igb_rd32(hw,16U);
  
#line 240 
  if (hw->nvm.type == (unsigned int)e1000_nvm_eeprom_spi) {
    
#line 242 
    eecd |= 2U;
    
#line 243 
    igb_lower_eec_clk(hw,& eecd);
  }
  else ;
  
#line 245 
  return;
}


#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
void igb_release_nvm(struct e1000_hw *hw)
{
  u32 eecd;
  
#line 257 
  e1000_stop_nvm(hw);
  
#line 259 
  eecd = igb_rd32(hw,16U);
  
#line 260 
  eecd &= 4294967231U;
  {
    u8 * volatile *tmp;
    {
      
#line 261 
      u8 *__var = (u8 *)0U;
      
#line 261 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 261 
    u8 *hw_addr = *tmp;
    
#line 261 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 261 
                                           writel(eecd,(void volatile *)(hw_addr + 16U)); else ;
  }
  
#line 263 
  return;
}


#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
static s32 igb_ready_nvm_eeprom(struct e1000_hw *hw)
{
  u8 spi_stat_reg;
  
#line 272 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 273 
  u32 eecd = igb_rd32(hw,16U);
  
#line 274 
  s32 ret_val = 0;
  
#line 275 
  u16 timeout = (unsigned short)0U;
  
#line 279 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) {
    u16 tmp_1;
    
#line 281 
    eecd &= 4294967292U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 282 
        u8 *__var = (u8 *)0U;
        
#line 282 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 282 
      u8 *hw_addr = *tmp_0;
      
#line 282 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 282 
                                             writel(eecd,(void volatile *)(hw_addr + 16U)); else ;
    }
    
#line 283 
    igb_rd32(hw,8U);
    
#line 284 
    __const_udelay(4295UL);
    
#line 285 
    timeout = (unsigned short)5000U;
    
#line 292 
    goto ldv_44115;
    ldv_44114: 
#line 293 
    ;
    
#line 293 
    igb_shift_out_eec_bits(hw,(unsigned short)5,(unsigned short)((int)hw->nvm.opcode_bits));
    
#line 295 
    tmp_1 = igb_shift_in_eec_bits(hw,(unsigned short)8);
    
#line 295 
    spi_stat_reg = (unsigned char)tmp_1;
    
#line 296 
    if (((int)spi_stat_reg & 1) == 0) 
#line 297 
                                      goto ldv_44113; else ;
    
#line 299 
    __const_udelay(21475UL);
    
#line 300 
    igb_standby_nvm(hw);
    
#line 301 
    timeout = (u16)((int)timeout - 1);
    ldv_44115: 
#line 302 
    ;
    
#line 292 
    if ((unsigned int)timeout != 0U) 
#line 294 
                                     goto ldv_44114; else 
#line 297 
                                                          goto ldv_44113;
    ldv_44113: 
#line 298 
    ;
    
#line 304 
    if ((unsigned int)timeout == 0U) {
      {
        
#line 305 
        struct _ddebug descriptor = {.modname = "igb", .function = "igb_ready_nvm_eeprom", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "SPI NVM Status error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))305U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 305 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
          struct net_device *tmp_2;
          
#line 305 
          tmp_2 = igb_get_hw_dev(hw);
          
#line 305 
          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_2,"SPI NVM Status error\n");
        }
        else ;
      }
      
#line 306 
      ret_val = -1;
      
#line 307 
      goto out;
    }
    else ;
  }
  else ;
  out: 
#line 311 
  ;
  
#line 312 
  return ret_val;
}


#line 324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_read_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 ret_val;
  u16 word_in;
  
#line 326 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 327 
  u32 i = 0U;
  
#line 330 
  u8 read_opcode = (unsigned char)3U;
  
#line 335 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 337 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_read_nvm_spi", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))337U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 337 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 337 
        tmp = igb_get_hw_dev(hw);
        
#line 337 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"nvm parameter(s) out of bounds\n");
      }
      else ;
    }
    
#line 338 
    ret_val = -1;
    
#line 339 
    goto out;
  }
  else ;
  
#line 342 
  ret_val = (*(nvm->ops.acquire))(hw);
  
#line 343 
  if (ret_val != 0) 
#line 344 
                    goto out; else ;
  
#line 346 
  ret_val = igb_ready_nvm_eeprom(hw);
  
#line 347 
  if (ret_val != 0) 
#line 348 
                    goto release; else ;
  
#line 350 
  igb_standby_nvm(hw);
  
#line 352 
  if ((unsigned int)nvm->address_bits == 8U && (unsigned int)offset > 127U) 
    
#line 353 
    read_opcode = (unsigned char)((unsigned int)read_opcode | 8U); else ;
  
#line 356 
  igb_shift_out_eec_bits(hw,(unsigned short)((int)read_opcode),(unsigned short)((int)nvm->opcode_bits));
  
#line 357 
  igb_shift_out_eec_bits(hw,(unsigned short)((int)((unsigned int)offset * 2U)),(unsigned short)((int)nvm->address_bits));
  
#line 363 
  i = 0U;
  
#line 363 
  goto ldv_44135;
  ldv_44134: 
#line 364 
  ;
  
#line 364 
  word_in = igb_shift_in_eec_bits(hw,(unsigned short)16);
  
#line 365 
  *(data + i) = (unsigned short)(((int)word_in >> 8) | ((int)word_in << 8));
  
#line 363 
  i += 1U;
  ldv_44135: 
#line 364 
  ;
  
#line 363 
  if ((unsigned int)words > i) 
#line 365 
                               goto ldv_44134; else 
#line 368 
                                                    goto ldv_44136;
  ldv_44136: 
#line 369 
  ;
  release: 
#line 368 
  ;
  
#line 369 
  (*(nvm->ops.release))(hw);
  out: 
#line 371 
  ;
  
#line 372 
  return ret_val;
}


#line 384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_read_nvm_eerd(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  u32 i;
  u32 tmp_1;
  
#line 386 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 387 
  u32 eerd = 0U;
  
#line 388 
  s32 ret_val = 0;
  
#line 393 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 395 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_read_nvm_eerd", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))395U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 395 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 395 
        tmp = igb_get_hw_dev(hw);
        
#line 395 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"nvm parameter(s) out of bounds\n");
      }
      else ;
    }
    
#line 396 
    ret_val = -1;
    
#line 397 
    goto out;
  }
  else ;
  
#line 400 
  i = 0U;
  
#line 400 
  goto ldv_44155;
  ldv_44154: 
#line 401 
  ;
  
#line 401 
  eerd = (((unsigned int)offset + i) << 2) + 1U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 404 
      u8 *__var = (u8 *)0U;
      
#line 404 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 404 
    u8 *hw_addr = *tmp_0;
    
#line 404 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 404 
                                           writel(eerd,(void volatile *)(hw_addr + 20U)); else ;
  }
  
#line 405 
  ret_val = igb_poll_eerd_eewr_done(hw,0);
  
#line 406 
  if (ret_val != 0) 
#line 407 
                    goto ldv_44153; else ;
  
#line 409 
  tmp_1 = igb_rd32(hw,20U);
  
#line 409 
  *(data + i) = (unsigned short)(tmp_1 >> 16);
  
#line 400 
  i += 1U;
  ldv_44155: 
#line 401 
  ;
  
#line 400 
  if ((unsigned int)words > i) 
#line 402 
                               goto ldv_44154; else 
#line 405 
                                                    goto ldv_44153;
  ldv_44153: 
#line 406 
  ;
  out: 
#line 413 
  ;
  
#line 414 
  return ret_val;
}


#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_write_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  
#line 431 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 432 
  s32 ret_val = -1;
  
#line 433 
  u16 widx = (unsigned short)0U;
  
#line 438 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 440 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_write_nvm_spi", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))440U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 440 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 440 
        tmp = igb_get_hw_dev(hw);
        
#line 440 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"nvm parameter(s) out of bounds\n");
      }
      else ;
    }
    
#line 441 
    __retres = ret_val;
    
#line 441 
    goto return_label;
  }
  else ;
  
#line 444 
  goto ldv_44173;
  ldv_44172: 
#line 445 
  ;
  {
    
#line 445 
    u8 write_opcode = (unsigned char)2U;
    
#line 447 
    ret_val = (*(nvm->ops.acquire))(hw);
    
#line 448 
    if (ret_val != 0) {
      
#line 449 
      __retres = ret_val;
      
#line 449 
      goto return_label;
    }
    else ;
    
#line 451 
    ret_val = igb_ready_nvm_eeprom(hw);
    
#line 452 
    if (ret_val != 0) {
      
#line 453 
      (*(nvm->ops.release))(hw);
      
#line 454 
      __retres = ret_val;
      
#line 454 
      goto return_label;
    }
    else ;
    
#line 457 
    igb_standby_nvm(hw);
    
#line 460 
    igb_shift_out_eec_bits(hw,(unsigned short)6,(unsigned short)((int)nvm->opcode_bits));
    
#line 463 
    igb_standby_nvm(hw);
    
#line 468 
    if ((unsigned int)nvm->address_bits == 8U && (unsigned int)offset > 127U) 
      
#line 469 
      write_opcode = (unsigned char)((unsigned int)write_opcode | 8U); else ;
    
#line 472 
    igb_shift_out_eec_bits(hw,(unsigned short)((int)write_opcode),(unsigned short)((int)nvm->opcode_bits));
    
#line 473 
    igb_shift_out_eec_bits(hw,(unsigned short)((int)((unsigned int)((int)offset + (int)widx) * 2U)),(unsigned short)((int)nvm->address_bits));
    
#line 477 
    goto ldv_44171;
    ldv_44170: 
#line 478 
    ;
    {
      
#line 478 
      u16 word_out = *(data + (int)widx);
      
#line 480 
      word_out = (unsigned short)(((int)word_out >> 8) | ((int)word_out << 8));
      
#line 481 
      igb_shift_out_eec_bits(hw,(unsigned short)((int)word_out),(unsigned short)16);
      
#line 482 
      widx = (u16)((int)widx + 1);
      
#line 484 
      if ((((int)offset + (int)widx) * 2) % (int)nvm->page_size == 0) {
        
#line 485 
        igb_standby_nvm(hw);
        
#line 486 
        goto ldv_44169;
      }
      else ;
    }
    ldv_44171: 
#line 489 
    ;
    
#line 477 
    if ((int)widx < (int)words) 
#line 479 
                                goto ldv_44170; else 
#line 482 
                                                     goto ldv_44169;
    ldv_44169: 
#line 483 
    ;
    
#line 489 
    usleep_range(1000UL,2000UL);
    
#line 490 
    (*(nvm->ops.release))(hw);
  }
  ldv_44173: 
#line 492 
  ;
  
#line 444 
  if ((int)widx < (int)words) 
#line 446 
                              goto ldv_44172; else 
#line 449 
                                                   goto ldv_44174;
  ldv_44174: 
#line 450 
  ;
  
#line 493 
  __retres = ret_val;
  return_label: 
#line 493 
                return __retres;
}


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_read_part_string(struct e1000_hw *hw, u8 *part_num, u32 part_num_size)
{
  s32 __retres;
  s32 ret_val;
  u16 nvm_data;
  u16 pointer;
  u16 offset;
  u16 length;
  
#line 513 
  if (part_num == (u8 *)0U) {
    {
      
#line 514 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_read_part_string", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "PBA string buffer was null\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))514U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 514 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 514 
        tmp = igb_get_hw_dev(hw);
        
#line 514 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"PBA string buffer was null\n");
      }
      else ;
    }
    
#line 515 
    ret_val = 16;
    
#line 516 
    goto out;
  }
  else ;
  
#line 519 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)8,(unsigned short)1,& nvm_data);
  
#line 520 
  if (ret_val != 0) {
    {
      
#line 521 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_read_part_string", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))521U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 521 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 521 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 521 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"NVM Read Error\n");
      }
      else ;
    }
    
#line 522 
    goto out;
  }
  else ;
  
#line 525 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)9,(unsigned short)1,& pointer);
  
#line 526 
  if (ret_val != 0) {
    {
      
#line 527 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_read_part_string", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))527U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 527 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 527 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 527 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"NVM Read Error\n");
      }
      else ;
    }
    
#line 528 
    goto out;
  }
  else ;
  
#line 535 
  if ((unsigned int)nvm_data != 64250U) {
    {
      
#line 536 
      struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_read_part_string", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM PBA number is not stored as string\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))536U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 536 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 536 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 536 
        __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_2,"NVM PBA number is not stored as string\n");
      }
      else ;
    }
    
#line 539 
    if (part_num_size <= 10U) {
      {
        
#line 540 
        struct _ddebug descriptor_3 = {.modname = "igb", .function = "igb_read_part_string", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "PBA string buffer too small\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))540U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 540 
        if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) {
          struct net_device *tmp_3;
          
#line 540 
          tmp_3 = igb_get_hw_dev(hw);
          
#line 540 
          __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)tmp_3,"PBA string buffer too small\n");
        }
        else ;
      }
      
#line 541 
      __retres = 17;
      
#line 541 
      goto return_label;
    }
    else ;
    
#line 545 
    *part_num = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 12)) & 15U);
    
#line 546 
    *(part_num + 1U) = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 8)) & 15U);
    
#line 547 
    *(part_num + 2U) = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 4)) & 15U);
    
#line 548 
    *(part_num + 3U) = (unsigned char)((unsigned int)((unsigned char)nvm_data) & 15U);
    
#line 549 
    *(part_num + 4U) = (unsigned char)((unsigned int)((unsigned char)((int)pointer >> 12)) & 15U);
    
#line 550 
    *(part_num + 5U) = (unsigned char)((unsigned int)((unsigned char)((int)pointer >> 8)) & 15U);
    
#line 551 
    *(part_num + 6U) = (unsigned char)45U;
    
#line 552 
    *(part_num + 7U) = (unsigned char)0U;
    
#line 553 
    *(part_num + 8U) = (unsigned char)((unsigned int)((unsigned char)((int)pointer >> 4)) & 15U);
    
#line 554 
    *(part_num + 9U) = (unsigned char)((unsigned int)((unsigned char)pointer) & 15U);
    
#line 557 
    *(part_num + 10U) = (unsigned char)0U;
    
#line 560 
    offset = (unsigned short)0U;
    
#line 560 
    goto ldv_44193;
    ldv_44192: 
#line 561 
    ;
    
#line 561 
    if ((unsigned int)*(part_num + (int)offset) <= 9U) 
#line 562 
                                                       *(part_num + (int)offset) = (unsigned char)((unsigned int)*(part_num + (int)offset) + 48U);
    else 
      
#line 563 
      if ((unsigned int)*(part_num + (int)offset) <= 15U) 
#line 564 
                                                          *(part_num + (int)offset) = (unsigned char)((unsigned int)*(part_num + (int)offset) + 55U); else ;
    
#line 560 
    offset = (u16)((int)offset + 1);
    ldv_44193: 
#line 561 
    ;
    
#line 560 
    if ((unsigned int)offset <= 9U) 
#line 562 
                                    goto ldv_44192; else 
#line 565 
                                                         goto ldv_44194;
    ldv_44194: 
#line 566 
    ;
    
#line 567 
    goto out;
  }
  else ;
  
#line 570 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)pointer),(unsigned short)1,& length);
  
#line 571 
  if (ret_val != 0) {
    {
      
#line 572 
      struct _ddebug descriptor_4 = {.modname = "igb", .function = "igb_read_part_string", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))572U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 572 
      if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) {
        struct net_device *tmp_4;
        
#line 572 
        tmp_4 = igb_get_hw_dev(hw);
        
#line 572 
        __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)tmp_4,"NVM Read Error\n");
      }
      else ;
    }
    
#line 573 
    goto out;
  }
  else ;
  
#line 576 
  if ((unsigned int)length + 65535U > 65533U) {
    {
      
#line 577 
      struct _ddebug descriptor_5 = {.modname = "igb", .function = "igb_read_part_string", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM PBA number section invalid length\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))577U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 577 
      if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) {
        struct net_device *tmp_5;
        
#line 577 
        tmp_5 = igb_get_hw_dev(hw);
        
#line 577 
        __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)tmp_5,"NVM PBA number section invalid length\n");
      }
      else ;
    }
    
#line 578 
    ret_val = 18;
    
#line 579 
    goto out;
  }
  else ;
  
#line 582 
  if ((unsigned int)length * 2U + 4294967295U > part_num_size) {
    {
      
#line 583 
      struct _ddebug descriptor_6 = {.modname = "igb", .function = "igb_read_part_string", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "PBA string buffer too small\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))583U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 583 
      if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) {
        struct net_device *tmp_6;
        
#line 583 
        tmp_6 = igb_get_hw_dev(hw);
        
#line 583 
        __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)tmp_6,"PBA string buffer too small\n");
      }
      else ;
    }
    
#line 584 
    ret_val = 17;
    
#line 585 
    goto out;
  }
  else ;
  
#line 589 
  pointer = (u16)((int)pointer + 1);
  
#line 590 
  length = (u16)((int)length - 1);
  
#line 592 
  offset = (unsigned short)0U;
  
#line 592 
  goto ldv_44200;
  ldv_44199: 
#line 593 
  ;
  
#line 593 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)pointer + (int)offset),(unsigned short)1,& nvm_data);
  
#line 594 
  if (ret_val != 0) {
    {
      
#line 595 
      struct _ddebug descriptor_7 = {.modname = "igb", .function = "igb_read_part_string", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))595U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 595 
      if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) {
        struct net_device *tmp_7;
        
#line 595 
        tmp_7 = igb_get_hw_dev(hw);
        
#line 595 
        __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)tmp_7,"NVM Read Error\n");
      }
      else ;
    }
    
#line 596 
    goto out;
  }
  else ;
  
#line 598 
  *(part_num + (int)offset * 2) = (unsigned char)((int)nvm_data >> 8);
  
#line 599 
  *(part_num + ((unsigned int)((int)offset * 2) + 1U)) = (unsigned char)nvm_data;
  
#line 592 
  offset = (u16)((int)offset + 1);
  ldv_44200: 
#line 593 
  ;
  
#line 592 
  if ((int)offset < (int)length) 
#line 594 
                                 goto ldv_44199; else 
#line 597 
                                                      goto ldv_44201;
  ldv_44201: 
#line 598 
  ;
  
#line 601 
  *(part_num + (int)offset * 2) = (unsigned char)0U;
  out: 
#line 603 
  ;
  
#line 604 
  __retres = ret_val;
  return_label: 
#line 604 
                return __retres;
}


#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_read_mac_addr(struct e1000_hw *hw)
{
  s32 __retres;
  u32 rar_high;
  u32 rar_low;
  u16 i;
  
#line 621 
  rar_high = igb_rd32(hw,21508U);
  
#line 622 
  rar_low = igb_rd32(hw,21504U);
  
#line 624 
  i = (unsigned short)0U;
  
#line 624 
  goto ldv_44209;
  ldv_44208: 
#line 625 
  ;
  
#line 625 
  hw->mac.perm_addr[(int)i] = (unsigned char)(rar_low >> (int)i * 8);
  
#line 624 
  i = (u16)((int)i + 1);
  ldv_44209: 
#line 625 
  ;
  
#line 624 
  if ((unsigned int)i <= 3U) 
#line 626 
                             goto ldv_44208; else 
#line 629 
                                                  goto ldv_44210;
  ldv_44210: 
#line 630 
  ;
  
#line 627 
  i = (unsigned short)0U;
  
#line 627 
  goto ldv_44212;
  ldv_44211: 
#line 628 
  ;
  
#line 628 
  hw->mac.perm_addr[(int)i + 4] = (unsigned char)(rar_high >> (int)i * 8);
  
#line 627 
  i = (u16)((int)i + 1);
  ldv_44212: 
#line 628 
  ;
  
#line 627 
  if ((unsigned int)i <= 1U) 
#line 629 
                             goto ldv_44211; else 
#line 632 
                                                  goto ldv_44213;
  ldv_44213: 
#line 633 
  ;
  
#line 630 
  i = (unsigned short)0U;
  
#line 630 
  goto ldv_44215;
  ldv_44214: 
#line 631 
  ;
  
#line 631 
  hw->mac.addr[(int)i] = hw->mac.perm_addr[(int)i];
  
#line 630 
  i = (u16)((int)i + 1);
  ldv_44215: 
#line 631 
  ;
  
#line 630 
  if ((unsigned int)i <= 5U) 
#line 632 
                             goto ldv_44214; else 
#line 635 
                                                  goto ldv_44216;
  ldv_44216: 
#line 636 
  ;
  
#line 633 
  __retres = 0;
  
#line 633 
  return __retres;
}


#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_validate_nvm_checksum(struct e1000_hw *hw)
{
  u16 i;
  u16 nvm_data;
  
#line 645 
  s32 ret_val = 0;
  
#line 646 
  u16 checksum = (unsigned short)0U;
  
#line 649 
  i = (unsigned short)0U;
  
#line 649 
  goto ldv_44228;
  ldv_44227: 
#line 650 
  ;
  
#line 650 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
  
#line 651 
  if (ret_val != 0) {
    {
      
#line 652 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_validate_nvm_checksum", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))652U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 652 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 652 
        tmp = igb_get_hw_dev(hw);
        
#line 652 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error\n");
      }
      else ;
    }
    
#line 653 
    goto out;
  }
  else ;
  
#line 655 
  checksum = (unsigned short)((int)checksum + (int)nvm_data);
  
#line 649 
  i = (u16)((int)i + 1);
  ldv_44228: 
#line 650 
  ;
  
#line 649 
  if ((unsigned int)i <= 63U) 
#line 651 
                              goto ldv_44227; else 
#line 654 
                                                   goto ldv_44229;
  ldv_44229: 
#line 655 
  ;
  
#line 658 
  if ((unsigned int)checksum != 47802U) {
    {
      
#line 659 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_validate_nvm_checksum", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM Checksum Invalid\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))659U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 659 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 659 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 659 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"NVM Checksum Invalid\n");
      }
      else ;
    }
    
#line 660 
    ret_val = -1;
    
#line 661 
    goto out;
  }
  else ;
  out: 
#line 664 
  ;
  
#line 665 
  return ret_val;
}


#line 676  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
s32 igb_update_nvm_checksum(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 i;
  u16 nvm_data;
  
#line 679 
  u16 checksum = (unsigned short)0U;
  
#line 682 
  i = (unsigned short)0U;
  
#line 682 
  goto ldv_44242;
  ldv_44241: 
#line 683 
  ;
  
#line 683 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
  
#line 684 
  if (ret_val != 0) {
    {
      
#line 685 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_update_nvm_checksum", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM Read Error while updating checksum.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))685U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 685 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 685 
        tmp = igb_get_hw_dev(hw);
        
#line 685 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error while updating checksum.\n");
      }
      else ;
    }
    
#line 686 
    goto out;
  }
  else ;
  
#line 688 
  checksum = (unsigned short)((int)checksum + (int)nvm_data);
  
#line 682 
  i = (u16)((int)i + 1);
  ldv_44242: 
#line 683 
  ;
  
#line 682 
  if ((unsigned int)i <= 62U) 
#line 684 
                              goto ldv_44241; else 
#line 687 
                                                   goto ldv_44243;
  ldv_44243: 
#line 688 
  ;
  
#line 690 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  
#line 691 
  ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)63,(unsigned short)1,& checksum);
  
#line 692 
  if (ret_val != 0) {
    
#line 693 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_update_nvm_checksum", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c", .format = "NVM Write Error while updating checksum.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))693U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 693 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_0;
      
#line 693 
      tmp_0 = igb_get_hw_dev(hw);
      
#line 693 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"NVM Write Error while updating checksum.\n");
    }
    else ;
  }
  else ;
  out: 
#line 695 
  ;
  
#line 696 
  return ret_val;
}


#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_nvm.c"
void igb_get_fw_version(struct e1000_hw *hw, struct e1000_fw_version *fw_vers)
{
  u16 eeprom_verh;
  u16 eeprom_verl;
  u16 etrack_test;
  u16 fw_version;
  u8 q;
  u8 hval;
  u8 rem;
  u8 result;
  u16 comb_verh;
  u16 comb_verl;
  u16 comb_offset;
  
#line 712 
  memset((void *)fw_vers,0,20UL);
  
#line 717 
  (*(hw->nvm.ops.read))(hw,(unsigned short)67,(unsigned short)1,& etrack_test);
  
#line 718 
  switch ((unsigned int)hw->mac.type) {
    int tmp_0;
    bool tmp;
    case (unsigned int)7: 
#line 719 
    ;
    
#line 720 
    igb_read_invm_version(hw,fw_vers);
    
#line 721 
    goto return_label;
    case (unsigned int)1: 
#line 722 
    ;
    case (unsigned int)2: 
#line 723 
    ;
    case (unsigned int)3: 
#line 724 
    ;
    
#line 728 
    if (((int)etrack_test & 61440) != 32768) {
      
#line 729 
      (*(hw->nvm.ops.read))(hw,(unsigned short)5,(unsigned short)1,& fw_version);
      
#line 730 
      fw_vers->eep_major = (unsigned short)((int)fw_version >> 12);
      
#line 732 
      fw_vers->eep_minor = (unsigned short)((unsigned int)((unsigned short)((int)fw_version >> 4)) & 255U);
      
#line 734 
      fw_vers->eep_build = (unsigned short)((unsigned int)fw_version & 15U);
      
#line 735 
      goto etrack_id;
    }
    else ;
    
#line 737 
    goto ldv_44265;
    case (unsigned int)6: 
#line 738 
    ;
    
#line 739 
    tmp = igb_get_flash_presence_i210(hw);
    
#line 739 
    if (tmp) 
#line 739 
             tmp_0 = 0; else 
#line 739 
                             tmp_0 = 1;
    
#line 739 
    if (tmp_0) {
      
#line 740 
      igb_read_invm_version(hw,fw_vers);
      
#line 741 
      goto return_label;
    }
    else ;
    case (unsigned int)4: 
#line 744 
    ;
    
#line 746 
    (*(hw->nvm.ops.read))(hw,(unsigned short)61,(unsigned short)1,& comb_offset);
    
#line 747 
    if ((unsigned int)comb_offset + 65535U <= 65533U) {
      
#line 750 
      (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned int)comb_offset + 132U)),(unsigned short)1,& comb_verh);
      
#line 752 
      (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned int)comb_offset + 131U)),(unsigned short)1,& comb_verl);
      
#line 756 
      if (((unsigned int)comb_verh != 0U && (unsigned int)comb_verl != 0U) && ((unsigned int)comb_verh != 65535U && (unsigned int)comb_verl != 65535U)) {
        
#line 760 
        fw_vers->or_valid = (_Bool)1;
        
#line 761 
        fw_vers->or_major = (unsigned short)((int)comb_verl >> 8);
        
#line 763 
        fw_vers->or_build = (unsigned short)(((int)comb_verl << 8) | ((int)comb_verh >> 8));
        
#line 766 
        fw_vers->or_patch = (unsigned short)((unsigned int)comb_verh & 255U);
      }
      else ;
    }
    else ;
    
#line 770 
    goto ldv_44265;
    default: 
#line 771 
    ;
    
#line 772 
    goto return_label;
  }
  ldv_44265: 
#line 774 
  ;
  
#line 774 
  (*(hw->nvm.ops.read))(hw,(unsigned short)5,(unsigned short)1,& fw_version);
  
#line 775 
  fw_vers->eep_major = (unsigned short)((int)fw_version >> 12);
  
#line 779 
  if (((int)fw_version & 3840) == 0) 
#line 780 
                                     eeprom_verl = (unsigned short)((unsigned int)fw_version & 255U); else 
                                                                    
#line 782 
                                                                    eeprom_verl = (unsigned short)((unsigned int)((unsigned short)((int)fw_version >> 4)) & 255U);
  
#line 788 
  q = (unsigned char)((unsigned int)eeprom_verl / 16U);
  
#line 789 
  hval = (unsigned char)((unsigned int)q * 10U);
  
#line 790 
  rem = (unsigned char)((unsigned int)((unsigned char)eeprom_verl) & 15U);
  
#line 791 
  result = (unsigned char)((int)hval + (int)rem);
  
#line 792 
  fw_vers->eep_minor = (unsigned short)result;
  etrack_id: 
#line 794 
  ;
  
#line 795 
  if (((int)etrack_test & 61440) == 32768) {
    
#line 796 
    (*(hw->nvm.ops.read))(hw,(unsigned short)66,(unsigned short)1,& eeprom_verl);
    
#line 797 
    (*(hw->nvm.ops.read))(hw,(unsigned short)67,(unsigned short)1,& eeprom_verh);
    
#line 798 
    fw_vers->etrack_id = (unsigned int)(((int)eeprom_verh << 16) | (int)eeprom_verl);
  }
  else ;
  return_label: 
#line 801 
                return;
}

void __builtin_prefetch(void const * , ...);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit_lock(long nr, unsigned long volatile *addr)
{
  int tmp;
  
#line 219 
  tmp = test_and_set_bit(nr,addr);
  
#line 219 
  return tmp;
}


#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(long nr, unsigned long const volatile *addr)
{
  int oldbit;
  
#line 317 
  ldv_inline_asm();
  
#line 323 
  return oldbit;
}


#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_next_bit(unsigned long const *, unsigned long, unsigned long);


#line 42 
unsigned long find_first_bit(unsigned long const *, unsigned long);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  unsigned long tmp_0;
  
#line 80 
  if (0 != 0) 
#line 80 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)((((((((((unsigned long long)(w >> 32) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 32) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 40) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 40) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 48) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 48) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 56) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 56) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 128ULL) != 0ULL))))); else 
                                                                    
#line 80 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  
#line 80 
  return tmp_0;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_dev_dbg(struct _ddebug *, struct device const *, char const * , ...);


#line 431  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
void print_hex_dump(char const *, char const *, int, int, int, void const *, size_t, bool);


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
extern enum system_states system_state;


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_fmt(char const *, int const, char const * , ...);


#line 71 
void warn_slowpath_null(char const *, int const);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
char *strcpy(char *, char const *);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
char *strncpy(char *, char const *, __kernel_size_t);


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int __bitmap_weight(unsigned long const *, unsigned int);


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  int tmp_0;
  
#line 300 
  if (0 != 0 && nbits <= 64U) {
    unsigned long tmp;
    
#line 301 
    tmp = hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
    
#line 301 
    __retres = (int)tmp;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 302 
  tmp_0 = __bitmap_weight(src,nbits);
  
#line 302 
  __retres = tmp_0;
  return_label: 
#line 302 
                return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
extern int nr_cpu_ids;


#line 89 
extern struct cpumask const * const cpu_online_mask;


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask const *srcp)
{
  unsigned int __retres;
  int tmp;
  
#line 476 
  tmp = bitmap_weight((unsigned long const *)(& srcp->bits),(unsigned int)nr_cpu_ids);
  
#line 476 
  __retres = (unsigned int)tmp;
  
#line 476 
  return __retres;
}


#line 697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void const *x)
{
  
#line 699 
  ldv_inline_asm();
  
#line 700 
  return;
}


#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cmpxchg.h"
void __cmpxchg_wrong_size(void);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 98 
static void atomic_inc_0(atomic_t *v);


#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v, int old, int new)
{
  int tmp;
  {
    int __ret;
    
#line 181 
    int __old = old;
    
#line 181 
    int __new = new;
    
#line 181 
    switch (4UL) {
      case (unsigned long)1: 
#line 181 
      ;
      {
        
#line 181 
        u8 volatile *__ptr = (u8 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      case (unsigned long)2: 
#line 181 
      ;
      {
        
#line 181 
        u16 volatile *__ptr_0 = (u16 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      case (unsigned long)4: 
#line 181 
      ;
      {
        
#line 181 
        u32 volatile *__ptr_1 = (u32 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      case (unsigned long)8: 
#line 181 
      ;
      {
        
#line 181 
        u64 volatile *__ptr_2 = (u64 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      default: 
#line 181 
      ;
      
#line 181 
      __cmpxchg_wrong_size();
    }
    ldv_5991: 
#line 181 
    ;
    
#line 181 
    tmp = __ret;
  }
  
#line 181 
  return tmp;
}


#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int __atomic_add_unless(atomic_t *v, int a, int u)
{
  int c;
  int old;
  
#line 197 
  c = atomic_read((atomic_t const *)v);
  ldv_6020: 
#line 198 
  ;
  
#line 199 
  if ((long)(c == u) != 0L) 
#line 200 
                            goto ldv_6019; else ;
  
#line 201 
  old = atomic_cmpxchg(v,c,c + a);
  
#line 202 
  if ((long)(old == c) != 0L) 
#line 203 
                              goto ldv_6019; else ;
  
#line 204 
  c = old;
  
#line 199 
  goto ldv_6020;
  ldv_6019: 
#line 200 
  ;
  
#line 206 
  return c;
}


#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/atomic.h"
__inline static int atomic_add_unless(atomic_t *v, int a, int u)
{
  int __retres;
  int tmp;
  
#line 17 
  tmp = __atomic_add_unless(v,a,u);
  
#line 17 
  ;
  
#line 17 
  __retres = tmp != u;
  
#line 17 
  return __retres;
}


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  int __retres;
  int tmp;
  {
    int pfo_ret__;
    
#line 22 
    switch (4UL) {
      case (unsigned long)1: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)2: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)4: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)8: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      default: 
#line 22 
      ;
      
#line 22 
      __bad_percpu_size();
    }
    ldv_6320: 
#line 22 
    ;
    
#line 22 
    tmp = pfo_ret__;
  }
  
#line 22 
  __retres = tmp & 2147483647;
  
#line 22 
  return __retres;
}


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  int tmp;
  
#line 72 
  if (0 != 0 && (val == 1 || val == -1)) 
#line 72 
                                         tmp = val; else 
#line 72 
                                                         tmp = 0;
  
#line 72 
  int const pao_ID__ = tmp;
  
#line 72 
  switch (4UL) {
    case (unsigned long)1: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)2: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)4: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)8: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    default: 
#line 72 
    ;
    
#line 72 
    __bad_percpu_size();
  }
  ldv_6377: 
#line 72 
  ;
  
#line 74 
  return;
}


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  int tmp;
  
#line 77 
  if (0 != 0 && (- val == 1 || - val == -1)) 
#line 77 
                                             tmp = - val; else 
#line 77 
                                                               tmp = 0;
  
#line 77 
  int const pao_ID__ = tmp;
  
#line 77 
  switch (4UL) {
    case (unsigned long)1: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)2: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)4: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)8: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    default: 
#line 77 
    ;
    
#line 77 
    __bad_percpu_size();
  }
  ldv_6389: 
#line 77 
  ;
  
#line 79 
  return;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 333 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);


#line 337 
void lock_release(struct lockdep_map *, int, unsigned long);


#line 545 
void lockdep_rcu_suspicious(char const *, int const, char const *);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_87(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_102(spinlock_t *lock);


#line 366 
static void ldv_spin_lock_109(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_112(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_114(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_88(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_103(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_110(spinlock_t *lock);


#line 419 
static void ldv_spin_unlock_113(spinlock_t *lock);


#line 423 
static void ldv_spin_unlock_115(spinlock_t *lock);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/time.h"
void set_normalized_timespec(struct timespec *, time_t, s64);


#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/time.h"
__inline static struct timespec timespec_add(struct timespec lhs, struct timespec rhs)
{
  struct timespec ts_delta;
  
#line 72 
  set_normalized_timespec(& ts_delta,lhs.tv_sec + rhs.tv_sec,(long long)(lhs.tv_nsec + rhs.tv_nsec));
  
#line 74 
  return ts_delta;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  
#line 270 
  __preempt_count_add(1);
  
#line 271 
  ldv_inline_asm();
  
#line 272 
  return;
}


#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  
#line 275 
  ldv_inline_asm();
  
#line 275 
  __preempt_count_sub(1);
  
#line 276 
  return;
}


#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcutree.h"
void kfree_call_rcu(struct callback_head *, void (*)(struct callback_head *));


#line 104 
bool rcu_is_watching(void);


#line 447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  __here_0: 
#line 449 
  ;
  
#line 449 
  ;
  
#line 449 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  
#line 451 
  return;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  __here_0: 
#line 454 
  ;
  
#line 454 
  ;
  
#line 454 
  lock_release(map,1,(unsigned long)((void *)0));
  
#line 456 
  return;
}


#line 457 
extern struct lockdep_map rcu_lock_map;


#line 461 
int debug_lockdep_rcu_enabled(void);


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  
#line 845 
  __rcu_read_lock();
  
#line 847 
  rcu_lock_acquire(& rcu_lock_map);
  {
    bool __warned;
    int tmp;
    
#line 848 
    tmp = debug_lockdep_rcu_enabled();
    
#line 848 
    if (tmp != 0) {
      
#line 848 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 848 
        tmp_0 = rcu_is_watching();
        
#line 848 
        if (tmp_0) 
#line 848 
                   tmp_1 = 0; else 
#line 848 
                                   tmp_1 = 1;
        
#line 848 
        if (tmp_1) {
          
#line 848 
          __warned = (_Bool)1;
          
#line 848 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",849,"rcu_read_lock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 851 
  return;
}


#line 897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    bool __warned;
    int tmp;
    
#line 899 
    tmp = debug_lockdep_rcu_enabled();
    
#line 899 
    if (tmp != 0) {
      
#line 899 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 899 
        tmp_0 = rcu_is_watching();
        
#line 899 
        if (tmp_0) 
#line 899 
                   tmp_1 = 0; else 
#line 899 
                                   tmp_1 = 1;
        
#line 899 
        if (tmp_1) {
          
#line 899 
          __warned = (_Bool)1;
          
#line 899 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",900,"rcu_read_unlock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 902 
  __rcu_read_unlock();
  
#line 903 
  rcu_lock_release(& rcu_lock_map);
  
#line 904 
  return;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 173 
static int ldv_mod_timer_98(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_99(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 181 
static int ldv_mod_timer_105(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 185 
static int ldv_mod_timer_106(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 189 
static int ldv_mod_timer_117(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 193 
static int ldv_mod_timer_119(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 197 
static int ldv_mod_timer_121(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_85(struct timer_list *ldv_func_arg1);


#line 236 
static int ldv_del_timer_sync_86(struct timer_list *ldv_func_arg1);


#line 240 
static int ldv_del_timer_sync_92(struct timer_list *ldv_func_arg1);


#line 244 
static int ldv_del_timer_sync_93(struct timer_list *ldv_func_arg1);


#line 252 
unsigned long round_jiffies(unsigned long);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void __init_work(struct work_struct *, int);


#line 444 
bool cancel_work_sync(struct work_struct *);


#line 560 
static bool ldv_schedule_work_84(struct work_struct *work);


#line 564 
static bool ldv_schedule_work_96(struct work_struct *work);


#line 568 
static bool ldv_schedule_work_97(struct work_struct *work);


#line 572 
static bool ldv_schedule_work_100(struct work_struct *work);


#line 576 
static bool ldv_schedule_work_101(struct work_struct *work);


#line 580 
static bool ldv_schedule_work_104(struct work_struct *work);


#line 584 
static bool ldv_schedule_work_107(struct work_struct *work);


#line 588 
static bool ldv_schedule_work_108(struct work_struct *work);


#line 592 
static bool ldv_schedule_work_111(struct work_struct *work);


#line 596 
static bool ldv_schedule_work_116(struct work_struct *work);


#line 600 
static bool ldv_schedule_work_118(struct work_struct *work);


#line 604 
static bool ldv_schedule_work_120(struct work_struct *work);


#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/memory_hotplug.h"
extern pg_data_t *node_data[];


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
void iounmap(void volatile *);


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/iomap.h"
void pci_iounmap(struct pci_dev *, void *);


#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci_iomap.h"
void *pci_iomap(struct pci_dev *, int, unsigned long);


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  int tmp_3;
  {
    int pscr_ret__;
    {
      
#line 77 
      void const *__vpp_verify = (void const *)0;
      
#line 77 
      void const *tmp = __vpp_verify;
    }
    
#line 77 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 77 
      ;
      {
        int pfo_ret__;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14410;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14410;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14410;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14410;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14410: 
#line 77 
        ;
        
#line 77 
        tmp_0 = pfo_ret__;
      }
      
#line 77 
      pscr_ret__ = tmp_0;
      
#line 77 
      goto ldv_14416;
      case (unsigned long)2: 
#line 77 
      ;
      {
        int pfo_ret___0;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14420;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14420;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14420;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14420;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14420: 
#line 77 
        ;
        
#line 77 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 77 
      pscr_ret__ = tmp_0_0;
      
#line 77 
      goto ldv_14416;
      case (unsigned long)4: 
#line 77 
      ;
      {
        int pfo_ret___1;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14429;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14429;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14429;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14429;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14429: 
#line 77 
        ;
        
#line 77 
        tmp_1 = pfo_ret___1;
      }
      
#line 77 
      pscr_ret__ = tmp_1;
      
#line 77 
      goto ldv_14416;
      case (unsigned long)8: 
#line 77 
      ;
      {
        int pfo_ret___2;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14438;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14438;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14438;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14438;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14438: 
#line 77 
        ;
        
#line 77 
        tmp_2 = pfo_ret___2;
      }
      
#line 77 
      pscr_ret__ = tmp_2;
      
#line 77 
      goto ldv_14416;
      default: 
#line 77 
      ;
      
#line 77 
      __bad_size_call_parameter();
      
#line 77 
      goto ldv_14416;
    }
    ldv_14416: 
#line 77 
    ;
    
#line 77 
    tmp_3 = pscr_ret__;
  }
  
#line 77 
  return tmp_3;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  int tmp;
  
#line 168 
  tmp = numa_node_id();
  
#line 168 
  return tmp;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static int gfp_zonelist(gfp_t flags)
{
  int __retres;
  
#line 265 
  if ((long)((flags & 262144U) != 0U) != 0L) {
    
#line 266 
    __retres = 1;
    
#line 266 
    goto return_label;
  }
  else ;
  
#line 268 
  __retres = 0;
  return_label: 
#line 268 
                return __retres;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct zonelist *node_zonelist(int nid, gfp_t flags)
{
  struct zonelist *__retres;
  int tmp;
  
#line 282 
  tmp = gfp_zonelist(flags);
  
#line 282 
  ;
  
#line 282 
  __retres = (struct zonelist *)(& (node_data[nid])->node_zonelists) + tmp;
  
#line 282 
  return __retres;
}


#line 293 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, struct zonelist *, nodemask_t *);


#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, struct zonelist *zonelist)
{
  struct page *tmp;
  
#line 300 
  tmp = __alloc_pages_nodemask(gfp_mask,order,zonelist,(nodemask_t *)0);
  
#line 300 
  return tmp;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp_0;
  struct zonelist *tmp;
  
#line 307 
  if (nid < 0) 
#line 308 
               nid = numa_node_id(); else ;
  
#line 310 
  tmp = node_zonelist(nid,gfp_mask);
  
#line 310 
  ;
  
#line 310 
  ;
  
#line 310 
  tmp_0 = __alloc_pages(gfp_mask,order,tmp);
  
#line 310 
  return tmp_0;
}


#line 366 
void __free_pages(struct page *, unsigned int);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vzalloc(unsigned long);


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page-flags.h"
__inline static int PageTail(struct page const *page)
{
  int tmp;
  
#line 400 
  tmp = constant_test_bit(15L,(unsigned long const volatile *)(& page->flags));
  
#line 400 
  return tmp;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head_by_tail(struct page *tail)
{
  struct page *__retres;
  int tmp;
  
#line 442 
  struct page *head = tail->__anonCompField_page_49.first_page;
  
#line 443 
  ldv_inline_asm();
  
#line 450 
  tmp = PageTail((struct page const *)tail);
  
#line 450 
  if ((long)(tmp != 0) != 0L) {
    
#line 451 
    __retres = head;
    
#line 451 
    goto return_label;
  }
  else ;
  
#line 452 
  __retres = tail;
  return_label: 
#line 452 
                return __retres;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head(struct page *page)
{
  struct page *__retres;
  int tmp_0;
  
#line 463 
  tmp_0 = PageTail((struct page const *)page);
  
#line 463 
  if ((long)(tmp_0 != 0) != 0L) {
    struct page *tmp;
    
#line 464 
    tmp = compound_head_by_tail(page);
    
#line 464 
    __retres = tmp;
    
#line 464 
    goto return_label;
  }
  else ;
  
#line 465 
  __retres = page;
  return_label: 
#line 465 
                return __retres;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static int page_count(struct page *page)
{
  int tmp_0;
  struct page *tmp;
  
#line 498 
  tmp = compound_head(page);
  
#line 498 
  tmp_0 = atomic_read((atomic_t const *)(& tmp->__anonCompField_page_45.__anonCompField___anonstruct_472_44.__anonCompField___anonunion_474_43._count));
  
#line 498 
  return tmp_0;
}


#line 760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static int page_to_nid(struct page const *page)
{
  int __retres;
  
#line 762 
  __retres = (int)(page->flags >> 54UL);
  
#line 762 
  return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  bool __retres;
  
#line 1037 
  __retres = (_Bool)(page->__anonCompField_page_45.__anonCompField___anonstruct_472_40.index == 18446744073709551615UL);
  
#line 1037 
  return __retres;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hardirq.h"
void synchronize_irq(unsigned int);


#line 317  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
int driver_for_each_device(struct device_driver *, struct device *, void *, int (*)(struct device *, void *));


#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  bool __retres;
  
#line 83 
  __retres = (_Bool)((int)dev->power.can_wakeup != 0);
  
#line 83 
  return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 1085 
void dev_warn(struct device const *, char const * , ...);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  
#line 74 
  if ((long)(count > 268435455U) != 0L) {
    
#line 76 
    ldv_inline_asm();
    
#line 74 
    ;
  }
  else ;
  
#line 76 
  dql->last_obj_cnt = count;
  
#line 77 
  ldv_inline_asm();
  
#line 85 
  dql->num_queued += count;
  
#line 86 
  return;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql const *dql)
{
  int __retres;
  unsigned int const volatile *tmp;
  unsigned int const volatile *tmp_0;
  {
    
#line 91 
    unsigned int const __var = 0U;
    
#line 91 
    tmp = (unsigned int const volatile *)(& dql->adj_limit);
  }
  {
    
#line 91 
    unsigned int const __var_0 = 0U;
    
#line 91 
    tmp_0 = (unsigned int const volatile *)(& dql->num_queued);
  }
  
#line 91 
  ;
  
#line 91 
  __retres = (int)(*tmp - *tmp_0);
  
#line 91 
  return __retres;
}


#line 95 
void dql_completed(struct dql *, unsigned int);


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
int net_ratelimit(void);


#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
size_t ksize(void const *);


#line 542 
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  __sum16 __retres;
  
#line 24 
  ldv_inline_asm();
  
#line 29 
  __retres = (unsigned short)(~ sum >> 16);
  
#line 29 
  return __retres;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  
#line 89 
  ldv_inline_asm();
  
#line 97 
  return sum;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  __sum16 tmp_0;
  __wsum tmp;
  
#line 116 
  tmp = csum_tcpudp_nofold(saddr,daddr,(unsigned short)((int)len),(unsigned short)((int)proto),sum);
  
#line 116 
  tmp_0 = csum_fold(tmp);
  
#line 116 
  return tmp_0;
}


#line 179 
__sum16 csum_ipv6_magic(struct in6_addr const *, struct in6_addr const *, __u32, unsigned short, __wsum);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 67 
void debug_dma_sync_single_range_for_cpu(struct device *, dma_addr_t, unsigned long, size_t, int);


#line 73 
void debug_dma_sync_single_range_for_device(struct device *, dma_addr_t, unsigned long, size_t, int);


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_range_for_cpu(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 132 
  struct dma_map_ops const *ops = get_dma_ops(dev);
  
#line 134 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 134 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 136 
    ldv_inline_asm();
    
#line 134 
    ;
  }
  else ;
  
#line 135 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 136 
    (*(ops->sync_single_for_cpu))(dev,addr + (unsigned long long)offset,size,dir); else ;
  
#line 137 
  debug_dma_sync_single_range_for_cpu(dev,addr,offset,size,(int)dir);
  
#line 138 
  return;
}


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_range_for_device(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 146 
  struct dma_map_ops const *ops = get_dma_ops(dev);
  
#line 148 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 148 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 150 
    ldv_inline_asm();
    
#line 148 
    ;
  }
  else ;
  
#line 149 
  if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 150 
    (*(ops->sync_single_for_device))(dev,addr + (unsigned long long)offset,size,dir); else ;
  
#line 151 
  debug_dma_sync_single_range_for_device(dev,addr,offset,size,(int)dir);
  
#line 152 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 60 
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 131 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  
#line 118 
  int rc = dma_set_mask(dev,mask);
  
#line 119 
  if (rc == 0) 
#line 120 
               dma_set_coherent_mask(dev,mask); else ;
  
#line 121 
  return rc;
}


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_size_sub(skb_frag_t *frag, int delta)
{
  
#line 247 
  frag->size -= (unsigned int)delta;
  
#line 248 
  return;
}


#line 775 
void consume_skb(struct sk_buff *);


#line 852 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);


#line 862 
int skb_pad(struct sk_buff *, int);


#line 926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  
#line 928 
  skb->l4_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))(type == (unsigned int)PKT_HASH_TYPE_L4);
  
#line 929 
  skb->sw_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 930 
  skb->hash = hash;
  
#line 931 
  return;
}


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get_0(struct sk_buff *skb)
{
  
#line 1087 
  atomic_inc_0(& skb->users);
  
#line 1088 
  return skb;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff const *skb)
{
  int __retres;
  int dataref;
  unsigned char *tmp;
  
#line 1131 
  if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) {
    
#line 1132 
    __retres = 0;
    
#line 1132 
    goto return_label;
  }
  else ;
  
#line 1134 
  tmp = skb_end_pointer(skb);
  
#line 1134 
  dataref = atomic_read((atomic_t const *)(& ((struct skb_shared_info *)tmp)->dataref));
  
#line 1135 
  dataref = (dataref & 65535) - (dataref >> 16);
  
#line 1136 
  __retres = dataref != 1;
  return_label: 
#line 1136 
                return __retres;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff const *skb)
{
  bool __retres;
  
#line 1569 
  __retres = (_Bool)(skb->data_len != 0U);
  
#line 1569 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1639 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);


#line 1650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1652 
  __retres = skb->head + skb->tail;
  
#line 1652 
  return __retres;
}


#line 1689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
  bool tmp_1;
  
#line 1691 
  unsigned char *tmp = skb_tail_pointer((struct sk_buff const *)skb);
  
#line 1692 
  tmp_1 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 1692 
  if ((long)((int)tmp_1 != 0) != 0L) {
    
#line 1694 
    ldv_inline_asm();
    
#line 1692 
    ;
  }
  else ;
  
#line 1693 
  skb->tail += len;
  
#line 1694 
  skb->len += len;
  
#line 1695 
  return tmp;
}


#line 1719 
unsigned char *__pskb_pull_tail(struct sk_buff *, int);


#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  unsigned int tmp;
  unsigned char *tmp_1;
  unsigned int tmp_0;
  
#line 1737 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 1737 
  ;
  
#line 1737 
  if ((long)(tmp >= len) != 0L) {
    
#line 1738 
    __retres = 1;
    
#line 1738 
    goto return_label;
  }
  else ;
  
#line 1739 
  if ((long)(skb->len < len) != 0L) {
    
#line 1740 
    __retres = 0;
    
#line 1740 
    goto return_label;
  }
  else ;
  
#line 1741 
  tmp_0 = skb_headlen((struct sk_buff const *)skb);
  
#line 1741 
  ;
  
#line 1741 
  ;
  
#line 1741 
  tmp_1 = __pskb_pull_tail(skb,(int)(len - tmp_0));
  
#line 1741 
  __retres = tmp_1 != (unsigned char *)0U;
  return_label: 
#line 1741 
                return __retres;
}


#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1752 
  __retres = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1752 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1899 
  __retres = skb->head + (int)skb->network_header;
  
#line 1899 
  return __retres;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1969 
  tmp = skb_transport_header(skb);
  
#line 1969 
  ;
  
#line 1969 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1969 
  return __retres;
}


#line 1972  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff const *skb)
{
  u32 __retres;
  
#line 1974 
  __retres = (unsigned int)((int)skb->transport_header - (int)skb->network_header);
  
#line 1974 
  return __retres;
}


#line 1982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1984 
  tmp = skb_network_header(skb);
  
#line 1984 
  ;
  
#line 1984 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1984 
  return __retres;
}


#line 2198 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);


#line 2200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2203 
  tmp = __napi_alloc_skb(napi,length,32U);
  
#line 2203 
  return tmp;
}


#line 2215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp;
  
#line 2226 
  gfp_mask |= 24832U;
  
#line 2228 
  tmp = alloc_pages_node(-1,gfp_mask,order);
  
#line 2228 
  return tmp;
}


#line 2244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_page(gfp_t gfp_mask)
{
  struct page *tmp;
  
#line 2246 
  tmp = __dev_alloc_pages(gfp_mask,0U);
  
#line 2246 
  return tmp;
}


#line 2249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *dev_alloc_page(void)
{
  struct page *tmp;
  
#line 2251 
  tmp = __dev_alloc_page(32U);
  
#line 2251 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void *skb_frag_address(skb_frag_t const *frag)
{
  void *__retres;
  void *tmp_0;
  struct page *tmp;
  
#line 2332 
  tmp = skb_frag_page(frag);
  
#line 2332 
  tmp_0 = lowmem_page_address((struct page const *)tmp);
  
#line 2332 
  ;
  
#line 2332 
  __retres = tmp_0 + frag->page_offset;
  
#line 2332 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  int __retres;
  unsigned int tmp_0;
  
#line 2430 
  int delta = 0;
  
#line 2432 
  tmp_0 = skb_headroom((struct sk_buff const *)skb);
  
#line 2432 
  ;
  
#line 2432 
  if (tmp_0 < headroom) {
    unsigned int tmp;
    
#line 2433 
    tmp = skb_headroom((struct sk_buff const *)skb);
    
#line 2433 
    delta = (int)(headroom - tmp);
  }
  else ;
  
#line 2435 
  if (delta != 0 || cloned != 0) {
    int tmp_5;
    int tmp_2;
    int tmp_4;
    {
      int tmp_1;
      
#line 2436 
      int _max1 = 32;
      
#line 2436 
      int _max2 = 64;
      
#line 2436 
      if (_max1 > _max2) 
#line 2436 
                         tmp_1 = _max1; else 
#line 2436 
                                             tmp_1 = _max2;
      
#line 2436 
      tmp_2 = tmp_1;
    }
    {
      int tmp_3;
      
#line 2436 
      int _max1_0 = 32;
      
#line 2436 
      int _max2_0 = 64;
      
#line 2436 
      if (_max1_0 > _max2_0) 
#line 2436 
                             tmp_3 = _max1_0; else 
#line 2436 
                                                   tmp_3 = _max2_0;
      
#line 2436 
      tmp_4 = tmp_3;
    }
    
#line 2436 
    ;
    
#line 2436 
    ;
    
#line 2436 
    tmp_5 = pskb_expand_head(skb,((tmp_2 + -1) + delta) & ~ (tmp_4 + -1),0,32U);
    
#line 2436 
    __retres = tmp_5;
    
#line 2436 
    goto return_label;
  }
  else ;
  
#line 2438 
  __retres = 0;
  return_label: 
#line 2438 
                return __retres;
}


#line 2468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  int tmp_0;
  int tmp;
  
#line 2470 
  tmp = skb_header_cloned((struct sk_buff const *)skb);
  
#line 2470 
  ;
  
#line 2470 
  ;
  
#line 2470 
  tmp_0 = __skb_cow(skb,headroom,tmp);
  
#line 2470 
  return tmp_0;
}


#line 2501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  
#line 2503 
  unsigned int size = skb->len;
  
#line 2505 
  if ((long)(size < len) != 0L) {
    int tmp;
    
#line 2506 
    len -= size;
    
#line 2507 
    tmp = skb_pad(skb,(int)len);
    
#line 2507 
    if (tmp != 0) {
      
#line 2508 
      __retres = -12;
      
#line 2508 
      goto return_label;
    }
    else ;
    
#line 2509 
    __skb_put(skb,len);
  }
  else ;
  
#line 2511 
  __retres = 0;
  return_label: 
#line 2511 
                return __retres;
}


#line 2803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void const *from, unsigned int const len)
{
  
#line 2807 
  memcpy((void *)skb->data,from,(unsigned long)len);
  
#line 2808 
  return;
}


#line 2865 
void skb_clone_tx_timestamp(struct sk_buff *);


#line 2911 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);


#line 2914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void sw_tx_timestamp(struct sk_buff *skb)
{
  unsigned char *tmp;
  
#line 2916 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2916 
  ;
  
#line 2916 
  if (((int)((struct skb_shared_info *)tmp)->tx_flags & 2) != 0) {
    unsigned char *tmp_0;
    
#line 2917 
    tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2916 
    ;
    
#line 2916 
    if (((int)((struct skb_shared_info *)tmp_0)->tx_flags & 4) == 0) 
      
#line 2918 
      skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0); else ;
  }
  else ;
  
#line 2919 
  return;
}


#line 2933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  
#line 2935 
  skb_clone_tx_timestamp(skb);
  
#line 2936 
  sw_tx_timestamp(skb);
  
#line 2937 
  return;
}


#line 3305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  
#line 3307 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  
#line 3308 
  return;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3386 
  tmp = skb_end_pointer(skb);
  
#line 3386 
  ;
  
#line 3386 
  __retres = (_Bool)((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U);
  
#line 3386 
  return __retres;
}


#line 3390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso_v6(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3392 
  tmp = skb_end_pointer(skb);
  
#line 3392 
  ;
  
#line 3392 
  __retres = (_Bool)(((int)((struct skb_shared_info *)tmp)->gso_type & 16) != 0);
  
#line 3392 
  return __retres;
}


#line 3426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff const *skb)
{
  
#line 3428 
  return;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  
#line 73 
  return;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_75_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_76(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 149 
static int ldv_request_irq_79(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 153 
static int ldv_request_irq_80(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 165 
static void ldv_free_irq_77_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 169 
static void ldv_free_irq_78(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 173 
static void ldv_free_irq_81(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 177 
static void ldv_free_irq_82(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 181 
static void ldv_free_irq_83(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  struct mii_ioctl_data *__retres;
  
#line 47 
  __retres = (struct mii_ioctl_data *)(& rq->ifr_ifru);
  
#line 47 
  return __retres;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct const *n)
{
  int tmp;
  
#line 523 
  goto ldv_43067;
  ldv_43066: 
#line 524 
  ;
  
#line 524 
  msleep(1U);
  ldv_43067: 
#line 525 
  ;
  
#line 523 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 523 
  if (tmp != 0) 
#line 525 
                goto ldv_43066; else 
#line 528 
                                     goto ldv_43068;
  ldv_43068: 
#line 529 
  ;
  
#line 530 
  return;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 1920 
void netif_napi_del(struct napi_struct *);


#line 2205 
static void ldv_free_netdev_91(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_95(struct net_device *ldv_func_arg1);


#line 2505 
void netif_schedule_queue(struct netdev_queue *);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2535 
  i = 0U;
  
#line 2535 
  goto ldv_44138;
  ldv_44137: 
#line 2536 
  ;
  {
    
#line 2536 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2537 
    netif_tx_start_queue(txq);
  }
  
#line 2535 
  i += 1U;
  ldv_44138: 
#line 2536 
  ;
  
#line 2535 
  if (dev->num_tx_queues > i) 
#line 2537 
                              goto ldv_44137; else 
#line 2540 
                                                   goto ldv_44139;
  ldv_44139: 
#line 2541 
  ;
  
#line 2542 
  return;
}


#line 2582 
void netif_tx_stop_all_queues(struct net_device *);


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  
#line 2602 
  __retres = (_Bool)((dev_queue->state & 3UL) != 0UL);
  
#line 2602 
  return __retres;
}


#line 2645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2649 
  dql_queued(& dev_queue->dql,bytes);
  
#line 2651 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2651 
  if ((long)(tmp >= 0) != 0L) 
#line 2652 
                              goto return_label; else ;
  
#line 2654 
  set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2655 
  ldv_inline_asm();
  
#line 2664 
  tmp_0 = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2664 
  if ((long)(tmp_0 >= 0) != 0L) 
#line 2665 
                                set_bit(1L,(unsigned long volatile *)(& dev_queue->state)); else ;
  return_label: 
#line 2666 
                return;
}


#line 2683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2687 
  if ((long)(bytes == 0U) != 0L) 
#line 2688 
                                 goto return_label; else ;
  
#line 2690 
  dql_completed(& dev_queue->dql,bytes);
  
#line 2691 
  ldv_inline_asm();
  
#line 2699 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2699 
  if (tmp < 0) 
#line 2700 
               goto return_label; else ;
  
#line 2702 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2702 
  if (tmp_0 != 0) 
#line 2703 
                  netif_schedule_queue(dev_queue); else ;
  return_label: 
#line 2704 
                return;
}


#line 2802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  
#line 2804 
  struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,(unsigned int)queue_index);
  
#line 2805 
  netif_tx_start_queue(txq);
  
#line 2806 
  return;
}


#line 2815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device const *dev, u16 queue_index)
{
  bool tmp_0;
  
#line 2818 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  
#line 2820 
  tmp_0 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
  
#line 2820 
  return tmp_0;
}


#line 2829 
void netif_wake_subqueue(struct net_device *, u16);


#line 2867 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);


#line 2870 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2936  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  
#line 2938 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  
#line 2939 
  return;
}


#line 2948 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  u32 __retres;
  
#line 3162 
  if ((unsigned int)debug_value > 31U) {
    
#line 3163 
    __retres = (unsigned int)default_msg_enable_bits;
    
#line 3163 
    goto return_label;
  }
  else ;
  
#line 3164 
  if (debug_value == 0) {
    
#line 3165 
    __retres = 0U;
    
#line 3165 
    goto return_label;
  }
  else ;
  
#line 3167 
  __retres = (unsigned int)((1 << debug_value) + -1);
  return_label: 
#line 3167 
                return __retres;
}


#line 3355 
static int ldv_register_netdev_90(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_94(struct net_device *ldv_func_arg1);


#line 3549 
void netdev_rss_key_fill(void *, size_t);


#line 3689 
netdev_features_t passthru_features_check(struct sk_buff *, struct net_device *, netdev_features_t);


#line 3828 
void netdev_err(struct net_device const *, char const * , ...);


#line 3830 
void netdev_warn(struct net_device const *, char const * , ...);


#line 3834 
void netdev_info(struct net_device const *, char const * , ...);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
void rtnl_lock(void);


#line 28 
void rtnl_unlock(void);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 29 
  tmp = (struct tcphdr *)skb_transport_header(skb);
  
#line 29 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  struct tcphdr *tmp;
  
#line 34 
  tmp = tcp_hdr(skb);
  
#line 34 
  ;
  
#line 34 
  __retres = (unsigned int)((int)tmp->doff * 4);
  
#line 34 
  return __retres;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 76 
  tmp = (struct ipv6hdr *)skb_network_header(skb);
  
#line 76 
  return tmp;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 25 
  tmp = (struct iphdr *)skb_network_header(skb);
  
#line 25 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
u32 eth_get_headlen(void *, unsigned int);


#line 33 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 47 
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_89(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  
#line 246 
  memset((void *)addr,0,6UL);
  
#line 247 
  return;
}


#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  int tmp;
  
#line 447 
  tmp = skb_put_padto(skb,60U);
  
#line 447 
  return tmp;
}


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  __be16 __retres;
  
#line 484 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  
#line 490 
  if ((unsigned int)type == 129U || (unsigned int)type == 43144U) {
    
#line 491 
    if (vlan_depth != 0U) {
      int tmp;
      {
        
#line 492 
        int __ret_warn_on = vlan_depth <= 3U;
        
#line 492 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 492 
                                              warn_slowpath_null("include/linux/if_vlan.h",492); else ;
        
#line 492 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 492 
      if ((long)tmp != 0L) {
        
#line 493 
        __retres = (unsigned short)0U;
        
#line 493 
        goto return_label;
      }
      else ;
      
#line 494 
      vlan_depth += 4294967292U;
    }
    else 
#line 496 
         vlan_depth = 14U;
    ldv_52423: 
#line 497 
    ;
    {
      struct vlan_hdr *vh;
      int tmp_0;
      
#line 501 
      tmp_0 = pskb_may_pull(skb,vlan_depth + 4U);
      
#line 501 
      if ((long)(tmp_0 == 0) != 0L) {
        
#line 503 
        __retres = (unsigned short)0U;
        
#line 503 
        goto return_label;
      }
      else ;
      
#line 505 
      vh = (struct vlan_hdr *)(skb->data + vlan_depth);
      
#line 506 
      type = vh->h_vlan_encapsulated_proto;
      
#line 507 
      vlan_depth += 4U;
    }
    
#line 509 
    if ((unsigned int)type == 129U || (unsigned int)type == 43144U) 
#line 511 
                                                                    goto ldv_52423; else 
                                                                    
#line 514 
                                                                    goto ldv_52424;
    ldv_52424: 
#line 515 
    ;
  }
  else ;
  
#line 512 
  if (depth != (int *)0) 
#line 513 
                         *depth = (int)vlan_depth; else ;
  
#line 515 
  __retres = type;
  return_label: 
#line 515 
                return __retres;
}


#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  __be16 tmp;
  
#line 527 
  tmp = __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
  
#line 527 
  return tmp;
}


#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  int __retres;
  
#line 403 
  __retres = pdev->error_state != 1U;
  
#line 403 
  return __retres;
}


#line 861 
int pci_bus_read_config_word(struct pci_bus *, unsigned int, int, u16 *);


#line 867 
int pci_bus_write_config_word(struct pci_bus *, unsigned int, int, u16);


#line 887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev const *dev, int where, u16 *val)
{
  int tmp;
  
#line 889 
  tmp = pci_bus_read_config_word(dev->bus,dev->devfn,where,val);
  
#line 889 
  return tmp;
}


#line 900  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_write_config_word(struct pci_dev const *dev, int where, u16 val)
{
  int tmp;
  
#line 902 
  tmp = pci_bus_write_config_word(dev->bus,dev->devfn,where,(unsigned short)((int)val));
  
#line 902 
  return tmp;
}


#line 910 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);


#line 912 
int pcie_capability_write_word(struct pci_dev *, int, u16);


#line 953 
int pci_enable_device_mem(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 1013 
int pci_select_bars(struct pci_dev *, unsigned long);


#line 1014 
bool pci_device_is_present(struct pci_dev *);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1040 
int pci_set_power_state(struct pci_dev *, pci_power_t);


#line 1044 
int __pci_enable_wake(struct pci_dev *, pci_power_t, bool, bool);


#line 1046 
int pci_wake_from_d3(struct pci_dev *, bool);


#line 1047 
int pci_prepare_to_sleep(struct pci_dev *);


#line 1053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_wake(struct pci_dev *dev, pci_power_t state, bool enable)
{
  int tmp;
  
#line 1056 
  tmp = __pci_enable_wake(dev,state,(_Bool)0,(_Bool)((bool)((int)enable) != 0));
  
#line 1056 
  return tmp;
}


#line 1100 
int pci_request_selected_regions(struct pci_dev *, int, char const *);


#line 1102 
void pci_release_selected_regions(struct pci_dev *, int);


#line 1146 
static int ldv___pci_register_driver_73(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_74(struct pci_driver *ldv_func_arg1);


#line 1212 
void pci_disable_msi(struct pci_dev *);


#line 1216 
void pci_disable_msix(struct pci_dev *);


#line 1219 
int pci_enable_msi_range(struct pci_dev *, int, int);


#line 1220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{
  int __retres;
  
#line 1222 
  int rc = pci_enable_msi_range(dev,nvec,nvec);
  
#line 1223 
  if (rc < 0) {
    
#line 1224 
    __retres = rc;
    
#line 1224 
    goto return_label;
  }
  else ;
  
#line 1225 
  __retres = 0;
  return_label: 
#line 1225 
                return __retres;
}


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 1672 
int pci_enable_sriov(struct pci_dev *, int);


#line 1673 
void pci_disable_sriov(struct pci_dev *);


#line 1674 
int pci_num_vf(struct pci_dev *);


#line 1675 
int pci_vfs_assigned(struct pci_dev *);


#line 1676 
int pci_sriov_set_totalvfs(struct pci_dev *, u16);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/aer.h"
int pci_enable_pcie_error_reporting(struct pci_dev *);


#line 43 
int pci_disable_pcie_error_reporting(struct pci_dev *);


#line 44 
int pci_cleanup_aer_uncorrect_error_status(struct pci_dev *);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
int pm_schedule_suspend(struct device *, unsigned int);


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static void pm_runtime_get_noresume(struct device *dev)
{
  
#line 66 
  atomic_inc_0(& dev->power.usage_count);
  
#line 67 
  return;
}


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static void pm_runtime_put_noidle(struct device *dev)
{
  
#line 71 
  atomic_add_unless(& dev->power.usage_count,-1,0);
  
#line 72 
  return;
}


#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static int pm_runtime_resume(struct device *dev)
{
  int tmp;
  
#line 204 
  tmp = __pm_runtime_resume(dev,0);
  
#line 204 
  return tmp;
}


#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static int pm_runtime_put_sync(struct device *dev)
{
  int tmp;
  
#line 245 
  tmp = __pm_runtime_idle(dev,4);
  
#line 245 
  return tmp;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dca.h"
void dca_register_notify(struct notifier_block *);


#line 30 
void dca_unregister_notify(struct notifier_block *);


#line 68 
int dca_add_requester(struct device *);


#line 69 
int dca_remove_requester(struct device *);


#line 71 
u8 dca3_get_tag(struct device *, int);


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c.h"
s32 i2c_smbus_read_byte_data(struct i2c_client const *, u8);


#line 91 
s32 i2c_smbus_write_byte_data(struct i2c_client const *, u8, u8);


#line 580 
void i2c_del_adapter(struct i2c_adapter *);


#line 379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_hw.h"
struct e1000_info const e1000_82575_info;


#line 563 
s32 igb_read_pcie_cap_reg(struct e1000_hw *hw, u32 reg, u16 *value);


#line 564 
s32 igb_write_pcie_cap_reg(struct e1000_hw *hw, u32 reg, u16 *value);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.h"
s32 igb_disable_pcie_master(struct e1000_hw *hw);


#line 44 
s32 igb_get_bus_info_pcie(struct e1000_hw *hw);


#line 50 
void igb_update_mc_addr_list(struct e1000_hw *hw, u8 *mc_addr_list, u32 mc_addr_count);


#line 53 
s32 igb_validate_mdi_setting(struct e1000_hw *hw);


#line 60 
s32 igb_vfta_set(struct e1000_hw *hw, u32 vid, bool add);


#line 63 
void igb_mta_set(struct e1000_hw *hw, u32 hash_value);


#line 68 
bool igb_enable_mng_pass_thru(struct e1000_hw *hw);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.h"
void igb_shutdown_serdes_link_82575(struct e1000_hw *hw);


#line 28 
void igb_power_up_serdes_link_82575(struct e1000_hw *hw);


#line 29 
void igb_power_down_phy_copper_82575(struct e1000_hw *hw);


#line 30 
void igb_rx_fifo_flush_82575(struct e1000_hw *hw);


#line 31 
s32 igb_read_i2c_byte(struct e1000_hw *hw, u8 byte_offset, u8 dev_addr, u8 *data);


#line 33 
s32 igb_write_i2c_byte(struct e1000_hw *hw, u8 byte_offset, u8 dev_addr, u8 data);


#line 261 
void igb_vmdq_set_anti_spoofing_pf(struct e1000_hw *hw, bool enable, int pf);


#line 262 
void igb_vmdq_set_loopback_pf(struct e1000_hw *hw, bool enable);


#line 263 
void igb_vmdq_set_replication_pf(struct e1000_hw *hw, bool enable);


#line 264 
u16 igb_rxpbs_adjust_82580(u32 data);


#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
void ptp_clock_event(struct ptp_clock *, struct ptp_clock_event *);


#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/i2c-algo-bit.h"
int i2c_bit_add_bus(struct i2c_adapter *);


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
void igb_ptp_init(struct igb_adapter *adapter);


#line 535 
void igb_ptp_stop(struct igb_adapter *adapter);


#line 536 
void igb_ptp_reset(struct igb_adapter *adapter);


#line 537 
void igb_ptp_rx_hang(struct igb_adapter *adapter);


#line 538 
void igb_ptp_rx_rgtstamp(struct igb_q_vector *q_vector, struct sk_buff *skb);


#line 539 
void igb_ptp_rx_pktstamp(struct igb_q_vector *q_vector, unsigned char *va, struct sk_buff *skb);


#line 541 
int igb_ptp_set_ts_config(struct net_device *netdev, struct ifreq *ifr);


#line 542 
int igb_ptp_get_ts_config(struct net_device *netdev, struct ifreq *ifr);


#line 548  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
__inline static s32 igb_reset_phy(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 550 
  if (hw->phy.ops.reset != (s32 (*)(struct e1000_hw *))0) {
    s32 tmp;
    
#line 551 
    tmp = (*(hw->phy.ops.reset))(hw);
    
#line 551 
    __retres = tmp;
    
#line 551 
    goto return_label;
  }
  else ;
  
#line 553 
  __retres = 0;
  return_label: 
#line 553 
                return __retres;
}


#line 572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb.h"
__inline static s32 igb_get_phy_info(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 574 
  if (hw->phy.ops.get_phy_info != (s32 (*)(struct e1000_hw *))0) {
    s32 tmp;
    
#line 575 
    tmp = (*(hw->phy.ops.get_phy_info))(hw);
    
#line 575 
    __retres = tmp;
    
#line 575 
    goto return_label;
  }
  else ;
  
#line 577 
  __retres = 0;
  return_label: 
#line 577 
                return __retres;
}


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
char igb_driver_name[4U] = {(char)'i', (char)'g', (char)'b', (char)'\000'};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
char igb_driver_version[9U] = {(char)'5', (char)'\000'};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static char const igb_driver_string[41U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'G', (char)'i', (char)'g', (char)'a', (char)'b', (char)'i', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)'\000'};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static char const igb_copyright[43U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)' ', (char)'(', (char)'c', (char)')', (char)' ', (char)'2', (char)'0', (char)'0', (char)'7', (char)'-', (char)'2', (char)'0', (char)'1', (char)'4', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.', (char)'\000'};

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct e1000_info const *igb_info_tbl[1U] = {& e1000_82575_info};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct pci_device_id const igb_pci_tbl[36U] = {{.vendor = 32902U, .device = 8000U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 8001U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 8005U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5433U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5427U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5430U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5431U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5432U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5499U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5500U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5409U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5410U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5411U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5412U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5390U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5391U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5415U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5392U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5393U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5398U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 1080U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 1082U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 1084U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 1088U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4297U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5386U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5400U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4326U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4327U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5389U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5414U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4328U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4263U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4265U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4310U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
struct pci_device_id const __mod_pci__igb_pci_tbl_device_table[36U];

#line 117 
static int igb_setup_all_tx_resources(struct igb_adapter *adapter);


#line 118 
static int igb_setup_all_rx_resources(struct igb_adapter *adapter);


#line 119 
static void igb_free_all_tx_resources(struct igb_adapter *adapter);


#line 120 
static void igb_free_all_rx_resources(struct igb_adapter *adapter);


#line 121 
static void igb_setup_mrqc(struct igb_adapter *adapter);


#line 122 
static int igb_probe(struct pci_dev *pdev, struct pci_device_id const *ent);


#line 123 
static void igb_remove(struct pci_dev *pdev);


#line 124 
static int igb_sw_init(struct igb_adapter *adapter);


#line 125 
static int igb_open(struct net_device *netdev);


#line 126 
static int igb_close(struct net_device *netdev);


#line 127 
static void igb_configure(struct igb_adapter *adapter);


#line 128 
static void igb_configure_tx(struct igb_adapter *adapter);


#line 129 
static void igb_configure_rx(struct igb_adapter *adapter);


#line 130 
static void igb_clean_all_tx_rings(struct igb_adapter *adapter);


#line 131 
static void igb_clean_all_rx_rings(struct igb_adapter *adapter);


#line 132 
static void igb_clean_tx_ring(struct igb_ring *tx_ring);


#line 133 
static void igb_clean_rx_ring(struct igb_ring *rx_ring);


#line 134 
static void igb_set_rx_mode(struct net_device *netdev);


#line 135 
static void igb_update_phy_info(unsigned long data);


#line 136 
static void igb_watchdog(unsigned long data);


#line 137 
static void igb_watchdog_task(struct work_struct *work);


#line 138 
static netdev_tx_t igb_xmit_frame(struct sk_buff *skb, struct net_device *netdev);


#line 139 
static struct rtnl_link_stats64 *igb_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats);


#line 141 
static int igb_change_mtu(struct net_device *netdev, int new_mtu);


#line 142 
static int igb_set_mac(struct net_device *netdev, void *p);


#line 143 
static void igb_set_uta(struct igb_adapter *adapter);


#line 144 
static irqreturn_t igb_intr(int irq, void *data);


#line 145 
static irqreturn_t igb_intr_msi(int irq, void *data);


#line 146 
static irqreturn_t igb_msix_other(int irq, void *data);


#line 147 
static irqreturn_t igb_msix_ring(int irq, void *data);


#line 149 
static void igb_update_dca(struct igb_q_vector *q_vector);


#line 150 
static void igb_setup_dca(struct igb_adapter *adapter);


#line 152 
static int igb_poll(struct napi_struct *napi, int budget);


#line 153 
static bool igb_clean_tx_irq(struct igb_q_vector *q_vector);


#line 154 
static bool igb_clean_rx_irq(struct igb_q_vector *q_vector, int const budget);


#line 155 
static int igb_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd);


#line 156 
static void igb_tx_timeout(struct net_device *netdev);


#line 157 
static void igb_reset_task(struct work_struct *work);


#line 158 
static void igb_vlan_mode(struct net_device *netdev, netdev_features_t features);


#line 160 
static int igb_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid);


#line 161 
static int igb_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid);


#line 162 
static void igb_restore_vlan(struct igb_adapter *adapter);


#line 163 
static void igb_rar_set_qsel(struct igb_adapter *adapter, u8 *addr, u32 index, u8 qsel);


#line 164 
static void igb_ping_all_vfs(struct igb_adapter *adapter);


#line 165 
static void igb_msg_task(struct igb_adapter *adapter);


#line 166 
static void igb_vmm_control(struct igb_adapter *adapter);


#line 167 
static int igb_set_vf_mac(struct igb_adapter *adapter, int vf, unsigned char *mac_addr);


#line 168 
static void igb_restore_vf_multicasts(struct igb_adapter *adapter);


#line 169 
static int igb_ndo_set_vf_mac(struct net_device *netdev, int vf, u8 *mac);


#line 170 
static int igb_ndo_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos);


#line 172 
static int igb_ndo_set_vf_bw(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate);


#line 173 
static int igb_ndo_set_vf_spoofchk(struct net_device *netdev, int vf, bool setting);


#line 175 
static int igb_ndo_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi);


#line 177 
static void igb_check_vf_rate_limit(struct igb_adapter *adapter);


#line 180 
static int igb_vf_configure(struct igb_adapter *adapter, int vf);


#line 181 
static int igb_pci_enable_sriov(struct pci_dev *dev, int num_vfs);


#line 186 
static int igb_suspend(struct device *dev);


#line 188 
static int igb_resume(struct device *dev);


#line 189 
static int igb_runtime_suspend(struct device *dev);


#line 190 
static int igb_runtime_resume(struct device *dev);


#line 191 
static int igb_runtime_idle(struct device *dev);


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct dev_pm_ops const igb_pm_ops = {.prepare = (int (*)(struct device *))0, .complete = (void (*)(struct device *))0, .suspend = & igb_suspend, .resume = & igb_resume, .freeze = & igb_suspend, .thaw = & igb_resume, .poweroff = & igb_suspend, .restore = & igb_resume, .suspend_late = (int (*)(struct device *))0, .resume_early = (int (*)(struct device *))0, .freeze_late = (int (*)(struct device *))0, .thaw_early = (int (*)(struct device *))0, .poweroff_late = (int (*)(struct device *))0, .restore_early = (int (*)(struct device *))0, .suspend_noirq = (int (*)(struct device *))0, .resume_noirq = (int (*)(struct device *))0, .freeze_noirq = (int (*)(struct device *))0, .thaw_noirq = (int (*)(struct device *))0, .poweroff_noirq = (int (*)(struct device *))0, .restore_noirq = (int (*)(struct device *))0, .runtime_suspend = & igb_runtime_suspend, .runtime_resume = & igb_runtime_resume, .runtime_idle = & igb_runtime_idle};

#line 198 
static void igb_shutdown(struct pci_dev *pdev);


#line 199 
static int igb_pci_sriov_configure(struct pci_dev *dev, int num_vfs);


#line 201 
static int igb_notify_dca(struct notifier_block *nb, unsigned long event, void *p);


#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct notifier_block dca_notifier = {.notifier_call = & igb_notify_dca, .next = (struct notifier_block *)0, .priority = 0};

#line 210 
static void igb_netpoll(struct net_device *netdev);


#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static unsigned int max_vfs;

#line 218 
static pci_ers_result_t igb_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state);


#line 220 
static pci_ers_result_t igb_io_slot_reset(struct pci_dev *pdev);


#line 221 
static void igb_io_resume(struct pci_dev *pdev);


#line 223  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct pci_error_handlers const igb_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& igb_io_error_detected), .mmio_enabled = (pci_ers_result_t (*)(struct pci_dev *))0, .link_reset = (pci_ers_result_t (*)(struct pci_dev *))0, .slot_reset = & igb_io_slot_reset, .reset_notify = (void (*)(struct pci_dev *, bool ))0, .resume = & igb_io_resume};

#line 229 
static void igb_init_dmac(struct igb_adapter *adapter, u32 pba);


#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct pci_driver igb_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = (char const *)(& igb_driver_name), .id_table = (struct pci_device_id const *)(& igb_pci_tbl), .probe = & igb_probe, .remove = & igb_remove, .suspend = (int (*)(struct pci_dev *, pm_message_t ))0, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = (int (*)(struct pci_dev *))0, .shutdown = & igb_shutdown, .sriov_configure = & igb_pci_sriov_configure, .err_handler = & igb_err_handler, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = & igb_pm_ops, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int debug = -1;

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct igb_reg_info const igb_reg_info_tbl[23U] = {{.ofs = 0U, .name = (char *)"CTRL"}, {.ofs = 8U, .name = (char *)"STATUS"}, {.ofs = 24U, .name = (char *)"CTRL_EXT"}, {.ofs = 192U, .name = (char *)"ICR"}, {.ofs = 256U, .name = (char *)"RCTL"}, {.ofs = 10248U, .name = (char *)"RDLEN"}, {.ofs = 10256U, .name = (char *)"RDH"}, {.ofs = 10264U, .name = (char *)"RDT"}, {.ofs = 10280U, .name = (char *)"RXDCTL"}, {.ofs = 10240U, .name = (char *)"RDBAL"}, {.ofs = 10244U, .name = (char *)"RDBAH"}, {.ofs = 1024U, .name = (char *)"TCTL"}, {.ofs = 14336U, .name = (char *)"TDBAL"}, {.ofs = 14340U, .name = (char *)"TDBAH"}, {.ofs = 14344U, .name = (char *)"TDLEN"}, {.ofs = 14352U, .name = (char *)"TDH"}, {.ofs = 14360U, .name = (char *)"TDT"}, {.ofs = 14376U, .name = (char *)"TXDCTL"}, {.ofs = 13328U, .name = (char *)"TDFH"}, {.ofs = 13336U, .name = (char *)"TDFT"}, {.ofs = 13344U, .name = (char *)"TDFHS"}, {.ofs = 13360U, .name = (char *)"TDFPC"}, {.ofs = 0U, .name = (char *)0}};

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_regdump(struct e1000_hw *hw, struct igb_reg_info *reginfo)
{
  char rname[16U];
  u32 regs[8U];
  
#line 298 
  int n = 0;
  
#line 302 
  switch (reginfo->ofs) {
    int tmp;
    int tmp_0;
    int tmp_1;
    int tmp_2;
    int tmp_3;
    int tmp_4;
    int tmp_5;
    int tmp_6;
    int tmp_7;
    int tmp_8;
    int tmp_9;
    int tmp_10;
    u32 tmp_11;
    case (u32)10248: 
#line 303 
    ;
    
#line 304 
    n = 0;
    
#line 304 
    goto ldv_57020;
    ldv_57019: 
#line 305 
    ;
    
#line 305 
    if (n <= 3) 
#line 305 
                tmp = n * 256 + 10248; else 
#line 305 
                                            tmp = n * 64 + 49160;
    
#line 305 
    ;
    
#line 305 
    regs[n] = igb_rd32(hw,(unsigned int)tmp);
    
#line 304 
    n += 1;
    ldv_57020: 
#line 305 
    ;
    
#line 304 
    if (n <= 3) 
#line 306 
                goto ldv_57019; else 
#line 309 
                                     goto ldv_57021;
    ldv_57021: 
#line 310 
    ;
    
#line 306 
    goto ldv_57022;
    case (u32)10256: 
#line 307 
    ;
    
#line 308 
    n = 0;
    
#line 308 
    goto ldv_57025;
    ldv_57024: 
#line 309 
    ;
    
#line 309 
    if (n <= 3) 
#line 309 
                tmp_0 = n * 256 + 10256; else 
#line 309 
                                              tmp_0 = n * 64 + 49168;
    
#line 309 
    ;
    
#line 309 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_0);
    
#line 308 
    n += 1;
    ldv_57025: 
#line 309 
    ;
    
#line 308 
    if (n <= 3) 
#line 310 
                goto ldv_57024; else 
#line 313 
                                     goto ldv_57026;
    ldv_57026: 
#line 314 
    ;
    
#line 310 
    goto ldv_57022;
    case (u32)10264: 
#line 311 
    ;
    
#line 312 
    n = 0;
    
#line 312 
    goto ldv_57029;
    ldv_57028: 
#line 313 
    ;
    
#line 313 
    if (n <= 3) 
#line 313 
                tmp_1 = n * 256 + 10264; else 
#line 313 
                                              tmp_1 = n * 64 + 49176;
    
#line 313 
    ;
    
#line 313 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_1);
    
#line 312 
    n += 1;
    ldv_57029: 
#line 313 
    ;
    
#line 312 
    if (n <= 3) 
#line 314 
                goto ldv_57028; else 
#line 317 
                                     goto ldv_57030;
    ldv_57030: 
#line 318 
    ;
    
#line 314 
    goto ldv_57022;
    case (u32)10280: 
#line 315 
    ;
    
#line 316 
    n = 0;
    
#line 316 
    goto ldv_57033;
    ldv_57032: 
#line 317 
    ;
    
#line 317 
    if (n <= 3) 
#line 317 
                tmp_2 = n * 256 + 10280; else 
#line 317 
                                              tmp_2 = n * 64 + 49192;
    
#line 317 
    ;
    
#line 317 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_2);
    
#line 316 
    n += 1;
    ldv_57033: 
#line 317 
    ;
    
#line 316 
    if (n <= 3) 
#line 318 
                goto ldv_57032; else 
#line 321 
                                     goto ldv_57034;
    ldv_57034: 
#line 322 
    ;
    
#line 318 
    goto ldv_57022;
    case (u32)10240: 
#line 319 
    ;
    
#line 320 
    n = 0;
    
#line 320 
    goto ldv_57037;
    ldv_57036: 
#line 321 
    ;
    
#line 321 
    if (n <= 3) 
#line 321 
                tmp_3 = (n + 40) * 256; else 
#line 321 
                                             tmp_3 = (n + 768) * 64;
    
#line 321 
    ;
    
#line 321 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_3);
    
#line 320 
    n += 1;
    ldv_57037: 
#line 321 
    ;
    
#line 320 
    if (n <= 3) 
#line 322 
                goto ldv_57036; else 
#line 325 
                                     goto ldv_57038;
    ldv_57038: 
#line 326 
    ;
    
#line 322 
    goto ldv_57022;
    case (u32)10244: 
#line 323 
    ;
    
#line 324 
    n = 0;
    
#line 324 
    goto ldv_57041;
    ldv_57040: 
#line 325 
    ;
    
#line 325 
    if (n <= 3) 
#line 325 
                tmp_4 = n * 256 + 10244; else 
#line 325 
                                              tmp_4 = n * 64 + 49156;
    
#line 325 
    ;
    
#line 325 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_4);
    
#line 324 
    n += 1;
    ldv_57041: 
#line 325 
    ;
    
#line 324 
    if (n <= 3) 
#line 326 
                goto ldv_57040; else 
#line 329 
                                     goto ldv_57042;
    ldv_57042: 
#line 330 
    ;
    
#line 326 
    goto ldv_57022;
    case (u32)14336: 
#line 327 
    ;
    
#line 328 
    n = 0;
    
#line 328 
    goto ldv_57045;
    ldv_57044: 
#line 329 
    ;
    
#line 329 
    if (n <= 3) 
#line 329 
                tmp_5 = (n + 40) * 256; else 
#line 329 
                                             tmp_5 = (n + 768) * 64;
    
#line 329 
    ;
    
#line 329 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_5);
    
#line 328 
    n += 1;
    ldv_57045: 
#line 329 
    ;
    
#line 328 
    if (n <= 3) 
#line 330 
                goto ldv_57044; else 
#line 333 
                                     goto ldv_57046;
    ldv_57046: 
#line 334 
    ;
    
#line 330 
    goto ldv_57022;
    case (u32)14340: 
#line 331 
    ;
    
#line 332 
    n = 0;
    
#line 332 
    goto ldv_57049;
    ldv_57048: 
#line 333 
    ;
    
#line 333 
    if (n <= 3) 
#line 333 
                tmp_6 = n * 256 + 14340; else 
#line 333 
                                              tmp_6 = n * 64 + 57348;
    
#line 333 
    ;
    
#line 333 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_6);
    
#line 332 
    n += 1;
    ldv_57049: 
#line 333 
    ;
    
#line 332 
    if (n <= 3) 
#line 334 
                goto ldv_57048; else 
#line 337 
                                     goto ldv_57050;
    ldv_57050: 
#line 338 
    ;
    
#line 334 
    goto ldv_57022;
    case (u32)14344: 
#line 335 
    ;
    
#line 336 
    n = 0;
    
#line 336 
    goto ldv_57053;
    ldv_57052: 
#line 337 
    ;
    
#line 337 
    if (n <= 3) 
#line 337 
                tmp_7 = n * 256 + 14344; else 
#line 337 
                                              tmp_7 = n * 64 + 57352;
    
#line 337 
    ;
    
#line 337 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_7);
    
#line 336 
    n += 1;
    ldv_57053: 
#line 337 
    ;
    
#line 336 
    if (n <= 3) 
#line 338 
                goto ldv_57052; else 
#line 341 
                                     goto ldv_57054;
    ldv_57054: 
#line 342 
    ;
    
#line 338 
    goto ldv_57022;
    case (u32)14352: 
#line 339 
    ;
    
#line 340 
    n = 0;
    
#line 340 
    goto ldv_57057;
    ldv_57056: 
#line 341 
    ;
    
#line 341 
    if (n <= 3) 
#line 341 
                tmp_8 = n * 256 + 14352; else 
#line 341 
                                              tmp_8 = n * 64 + 57360;
    
#line 341 
    ;
    
#line 341 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_8);
    
#line 340 
    n += 1;
    ldv_57057: 
#line 341 
    ;
    
#line 340 
    if (n <= 3) 
#line 342 
                goto ldv_57056; else 
#line 345 
                                     goto ldv_57058;
    ldv_57058: 
#line 346 
    ;
    
#line 342 
    goto ldv_57022;
    case (u32)14360: 
#line 343 
    ;
    
#line 344 
    n = 0;
    
#line 344 
    goto ldv_57061;
    ldv_57060: 
#line 345 
    ;
    
#line 345 
    if (n <= 3) 
#line 345 
                tmp_9 = n * 256 + 14360; else 
#line 345 
                                              tmp_9 = n * 64 + 57368;
    
#line 345 
    ;
    
#line 345 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_9);
    
#line 344 
    n += 1;
    ldv_57061: 
#line 345 
    ;
    
#line 344 
    if (n <= 3) 
#line 346 
                goto ldv_57060; else 
#line 349 
                                     goto ldv_57062;
    ldv_57062: 
#line 350 
    ;
    
#line 346 
    goto ldv_57022;
    case (u32)14376: 
#line 347 
    ;
    
#line 348 
    n = 0;
    
#line 348 
    goto ldv_57065;
    ldv_57064: 
#line 349 
    ;
    
#line 349 
    if (n <= 3) 
#line 349 
                tmp_10 = n * 256 + 14376; else 
#line 349 
                                               tmp_10 = n * 64 + 57384;
    
#line 349 
    ;
    
#line 349 
    regs[n] = igb_rd32(hw,(unsigned int)tmp_10);
    
#line 348 
    n += 1;
    ldv_57065: 
#line 349 
    ;
    
#line 348 
    if (n <= 3) 
#line 350 
                goto ldv_57064; else 
#line 353 
                                     goto ldv_57066;
    ldv_57066: 
#line 354 
    ;
    
#line 350 
    goto ldv_57022;
    default: 
#line 351 
    ;
    
#line 352 
    tmp_11 = igb_rd32(hw,reginfo->ofs);
    
#line 352 
    ;
    
#line 352 
    printk("\001",reginfo->name,tmp_11);
    
#line 353 
    goto return_label;
  }
  ldv_57022: 
#line 356 
  ;
  
#line 356 
  snprintf((char *)(& rname),16UL,"%s%s",reginfo->name,(char *)"[0-3]");
  
#line 357 
  printk("\001",(char *)(& rname),regs[0],regs[1],regs[2],regs[3]);
  return_label: 
#line 358 
                return;
}


#line 362  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_dump(struct igb_adapter *adapter)
{
  struct igb_reg_info *reginfo;
  struct igb_ring *tx_ring;
  union e1000_adv_tx_desc *tx_desc;
  struct my_u0 *u0;
  struct igb_ring *rx_ring;
  union e1000_adv_rx_desc *rx_desc;
  u32 staterr;
  u16 i;
  u16 n;
  
#line 364 
  struct net_device *netdev = adapter->netdev;
  
#line 365 
  struct e1000_hw *hw = & adapter->hw;
  
#line 375 
  if ((adapter->msg_enable & 8192) == 0) 
#line 376 
                                         goto return_label; else ;
  
#line 379 
  if (netdev != (struct net_device *)0) {
    
#line 380 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Net device Info\n");
    
#line 381 
    printk("\001");
    
#line 382 
    printk("\001",(char *)(& netdev->name),netdev->state,netdev->trans_start,netdev->last_rx);
  }
  else ;
  
#line 387 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Register Dump\n");
  
#line 388 
  printk("\001");
  
#line 389 
  reginfo = (struct igb_reg_info *)(& igb_reg_info_tbl);
  
#line 389 
  goto ldv_57086;
  ldv_57085: 
#line 390 
  ;
  
#line 391 
  igb_regdump(hw,reginfo);
  
#line 390 
  reginfo += 1;
  ldv_57086: 
#line 391 
  ;
  
#line 389 
  if (reginfo->name != (char *)0) 
#line 392 
                                  goto ldv_57085; else 
#line 395 
                                                       goto ldv_57087;
  ldv_57087: 
#line 396 
  ;
  
#line 395 
  if (netdev == (struct net_device *)0) 
#line 396 
                                        goto exit;
  else {
    int tmp_0;
    bool tmp;
    
#line 395 
    tmp = netif_running((struct net_device const *)netdev);
    
#line 395 
    if (tmp) 
#line 395 
             tmp_0 = 0; else 
#line 395 
                             tmp_0 = 1;
    
#line 395 
    if (tmp_0) 
#line 396 
               goto exit; else ;
  }
  
#line 398 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"TX Rings Summary\n");
  
#line 399 
  printk("\001");
  
#line 400 
  n = (unsigned short)0U;
  
#line 400 
  goto ldv_57091;
  ldv_57090: 
#line 401 
  ;
  {
    struct igb_tx_buffer *buffer_info;
    
#line 402 
    tx_ring = adapter->tx_ring[(int)n];
    
#line 403 
    buffer_info = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info + (int)tx_ring->next_to_clean;
    
#line 404 
    printk("\001",(int)n,(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,buffer_info->dma,buffer_info->len,buffer_info->next_to_watch,(unsigned long long)buffer_info->time_stamp);
  }
  
#line 400 
  n = (u16)((int)n + 1);
  ldv_57091: 
#line 401 
  ;
  
#line 400 
  if ((int)n < adapter->num_tx_queues) 
#line 402 
                                       goto ldv_57090; else 
#line 405 
                                                            goto ldv_57092;
  ldv_57092: 
#line 406 
  ;
  
#line 413 
  if ((adapter->msg_enable & 1024) == 0) 
#line 414 
                                         goto rx_ring_summary; else ;
  
#line 416 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"TX Rings Dump\n");
  
#line 429 
  n = (unsigned short)0U;
  
#line 429 
  goto ldv_57100;
  ldv_57099: 
#line 430 
  ;
  
#line 430 
  tx_ring = adapter->tx_ring[(int)n];
  
#line 431 
  printk("\001");
  
#line 432 
  printk("\001",(int)tx_ring->queue_index);
  
#line 433 
  printk("\001");
  
#line 434 
  printk("\001");
  
#line 436 
  i = (unsigned short)0U;
  
#line 436 
  goto ldv_57097;
  ldv_57096: 
#line 437 
  ;
  {
    char const *next_desc;
    struct igb_tx_buffer *buffer_info_0;
    
#line 439 
    tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc + (int)i;
    
#line 440 
    buffer_info_0 = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info + (int)i;
    
#line 441 
    u0 = (struct my_u0 *)tx_desc;
    
#line 442 
    if ((int)tx_ring->next_to_use == (int)i && (int)tx_ring->next_to_clean == (int)i) 
      
#line 444 
      next_desc = " NTC/U";
    else 
      
#line 445 
      if ((int)tx_ring->next_to_use == (int)i) 
#line 446 
                                               next_desc = " NTU";
      else 
        
#line 447 
        if ((int)tx_ring->next_to_clean == (int)i) 
#line 448 
                                                   next_desc = " NTC"; else 
                                                                    
#line 450 
                                                                    next_desc = "";
    
#line 452 
    printk("\001",(int)i,u0->a,u0->b,buffer_info_0->dma,buffer_info_0->len,buffer_info_0->next_to_watch,(unsigned long long)buffer_info_0->time_stamp,buffer_info_0->skb,next_desc);
    
#line 461 
    if ((adapter->msg_enable & 4096) != 0 && buffer_info_0->skb != (struct sk_buff *)0) 
      
#line 462 
      print_hex_dump("\001","",1,16,1,(void const *)(buffer_info_0->skb)->data,(unsigned long)buffer_info_0->len,(_Bool)1); else ;
  }
  
#line 436 
  i = (u16)((int)i + 1);
  ldv_57097: 
#line 437 
  ;
  
#line 436 
  if (tx_ring->desc != (void *)0 && (int)tx_ring->count > (int)i) 
#line 438 
                                                                  goto ldv_57096; else 
                                                                    
#line 441 
                                                                    goto ldv_57098;
  ldv_57098: 
#line 442 
  ;
  
#line 429 
  n = (u16)((int)n + 1);
  ldv_57100: 
#line 430 
  ;
  
#line 429 
  if ((int)n < adapter->num_tx_queues) 
#line 431 
                                       goto ldv_57099; else 
#line 434 
                                                            goto ldv_57101;
  ldv_57101: 
#line 435 
  ;
  rx_ring_summary: 
#line 471 
  ;
  
#line 472 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"RX Rings Summary\n");
  
#line 473 
  printk("\001");
  
#line 474 
  n = (unsigned short)0U;
  
#line 474 
  goto ldv_57103;
  ldv_57102: 
#line 475 
  ;
  
#line 475 
  rx_ring = adapter->rx_ring[(int)n];
  
#line 476 
  printk("\001",(int)n,(int)rx_ring->next_to_use,(int)rx_ring->next_to_clean);
  
#line 474 
  n = (u16)((int)n + 1);
  ldv_57103: 
#line 475 
  ;
  
#line 474 
  if ((int)n < adapter->num_rx_queues) 
#line 476 
                                       goto ldv_57102; else 
#line 479 
                                                            goto ldv_57104;
  ldv_57104: 
#line 480 
  ;
  
#line 481 
  if ((adapter->msg_enable & 2048) == 0) 
#line 482 
                                         goto exit; else ;
  
#line 484 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"RX Rings Dump\n");
  
#line 507 
  n = (unsigned short)0U;
  
#line 507 
  goto ldv_57111;
  ldv_57110: 
#line 508 
  ;
  
#line 508 
  rx_ring = adapter->rx_ring[(int)n];
  
#line 509 
  printk("\001");
  
#line 510 
  printk("\001",(int)rx_ring->queue_index);
  
#line 511 
  printk("\001");
  
#line 512 
  printk("\001");
  
#line 513 
  printk("\001");
  
#line 515 
  i = (unsigned short)0U;
  
#line 515 
  goto ldv_57108;
  ldv_57107: 
#line 516 
  ;
  {
    char const *next_desc_0;
    struct igb_rx_buffer *buffer_info_1;
    
#line 518 
    buffer_info_1 = rx_ring->__anonCompField_igb_ring_97.rx_buffer_info + (int)i;
    
#line 519 
    rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (int)i;
    
#line 520 
    u0 = (struct my_u0 *)rx_desc;
    
#line 521 
    staterr = rx_desc->wb.upper.status_error;
    
#line 523 
    if ((int)rx_ring->next_to_use == (int)i) 
#line 524 
                                             next_desc_0 = " NTU";
    else 
      
#line 525 
      if ((int)rx_ring->next_to_clean == (int)i) 
#line 526 
                                                 next_desc_0 = " NTC"; else 
                                                                    
#line 528 
                                                                    next_desc_0 = "";
    
#line 530 
    if ((staterr & 1U) != 0U) 
#line 532 
                              printk("\001",(char *)"RWB",(int)i,u0->a,u0->b,next_desc_0);
    else {
      
#line 538 
      printk("\001",(char *)"R  ",(int)i,u0->a,u0->b,buffer_info_1->dma,next_desc_0);
      
#line 545 
      if (((adapter->msg_enable & 4096) != 0 && buffer_info_1->dma != 0ULL) && buffer_info_1->page != (struct page *)0) {
        void *tmp_1;
        
#line 550 
        tmp_1 = lowmem_page_address((struct page const *)buffer_info_1->page);
        
#line 547 
        ;
        
#line 547 
        print_hex_dump("\001","",1,16,1,(void const *)(tmp_1 + buffer_info_1->page_offset),2048UL,(_Bool)1);
      }
      else ;
    }
  }
  
#line 515 
  i = (u16)((int)i + 1);
  ldv_57108: 
#line 516 
  ;
  
#line 515 
  if ((int)rx_ring->count > (int)i) 
#line 517 
                                    goto ldv_57107; else 
#line 520 
                                                         goto ldv_57109;
  ldv_57109: 
#line 521 
  ;
  
#line 507 
  n = (u16)((int)n + 1);
  ldv_57111: 
#line 508 
  ;
  
#line 507 
  if ((int)n < adapter->num_rx_queues) 
#line 509 
                                       goto ldv_57110; else 
#line 512 
                                                            goto ldv_57112;
  ldv_57112: 
#line 513 
  ;
  exit: 
#line 558 
  ;
  return_label: 
#line 559 
                return;
}


#line 569  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_get_i2c_data(void *data)
{
  int __retres;
  u32 tmp;
  
#line 571 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 572 
  struct e1000_hw *hw = & adapter->hw;
  
#line 573 
  tmp = igb_rd32(hw,4140U);
  
#line 573 
  s32 i2cctl = (int)tmp;
  
#line 575 
  __retres = (i2cctl & 4096) != 0;
  
#line 575 
  return __retres;
}


#line 585  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_i2c_data(void *data, int state)
{
  u32 tmp;
  
#line 587 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 588 
  struct e1000_hw *hw = & adapter->hw;
  
#line 589 
  tmp = igb_rd32(hw,4140U);
  
#line 589 
  s32 i2cctl = (int)tmp;
  
#line 591 
  if (state != 0) 
#line 592 
                  i2cctl |= 1024; else 
#line 594 
                                       i2cctl &= -1025;
  
#line 596 
  i2cctl &= -2049;
  
#line 597 
  i2cctl |= 8192;
  {
    u8 * volatile *tmp_0;
    {
      
#line 598 
      u8 *__var = (u8 *)0U;
      
#line 598 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 598 
    u8 *hw_addr = *tmp_0;
    
#line 598 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 598 
                                           writel((unsigned int)i2cctl,(void volatile *)(hw_addr + 4140U)); else ;
  }
  
#line 599 
  igb_rd32(hw,8U);
  
#line 600 
  return;
}


#line 610  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_i2c_clk(void *data, int state)
{
  u32 tmp;
  
#line 612 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 613 
  struct e1000_hw *hw = & adapter->hw;
  
#line 614 
  tmp = igb_rd32(hw,4140U);
  
#line 614 
  s32 i2cctl = (int)tmp;
  
#line 616 
  if (state != 0) {
    
#line 617 
    i2cctl |= 512;
    
#line 618 
    i2cctl &= -8193;
  }
  else {
    
#line 620 
    i2cctl &= -513;
    
#line 621 
    i2cctl &= -8193;
  }
  {
    u8 * volatile *tmp_0;
    {
      
#line 623 
      u8 *__var = (u8 *)0U;
      
#line 623 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 623 
    u8 *hw_addr = *tmp_0;
    
#line 623 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 623 
                                           writel((unsigned int)i2cctl,(void volatile *)(hw_addr + 4140U)); else ;
  }
  
#line 624 
  igb_rd32(hw,8U);
  
#line 625 
  return;
}


#line 633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_get_i2c_clk(void *data)
{
  int __retres;
  u32 tmp;
  
#line 635 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 636 
  struct e1000_hw *hw = & adapter->hw;
  
#line 637 
  tmp = igb_rd32(hw,4140U);
  
#line 637 
  s32 i2cctl = (int)tmp;
  
#line 639 
  __retres = (i2cctl & 16384) != 0;
  
#line 639 
  return __retres;
}


#line 642  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct i2c_algo_bit_data const igb_i2c_algo = {.data = (void *)0, .setsda = & igb_set_i2c_data, .setscl = & igb_set_i2c_clk, .getsda = & igb_get_i2c_data, .getscl = & igb_get_i2c_clk, .pre_xfer = (int (*)(struct i2c_adapter *))0, .post_xfer = (void (*)(struct i2c_adapter *))0, .udelay = 5, .timeout = 20};

#line 657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
struct net_device *igb_get_hw_dev(struct e1000_hw *hw)
{
  struct net_device *__retres;
  
#line 659 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  
#line 660 
  __retres = adapter->netdev;
  
#line 660 
  return __retres;
}


#line 669  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_init_module(void)
{
  int ret;
  
#line 673 
  printk("\001",(char const *)(& igb_driver_string),(char *)(& igb_driver_version));
  
#line 675 
  printk("\001",(char const *)(& igb_copyright));
  
#line 678 
  dca_register_notify(& dca_notifier);
  
#line 680 
  ret = ldv___pci_register_driver_73(& igb_driver,& __this_module,"igb");
  
#line 681 
  return ret;
}


#line 692  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_exit_module(void)
{
  
#line 695 
  dca_unregister_notify(& dca_notifier);
  
#line 697 
  ldv_pci_unregister_driver_74(& igb_driver);
  
#line 698 
  return;
}


#line 710  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_cache_ring_register(struct igb_adapter *adapter)
{
  
#line 712 
  int i = 0;
  
#line 712 
  int j = 0;
  
#line 713 
  u32 rbase_offset = adapter->vfs_allocated_count;
  
#line 715 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 716 
    ;
    
#line 722 
    if (adapter->vfs_allocated_count != 0U) {
      
#line 723 
      goto ldv_57175;
      ldv_57174: 
#line 724 
      ;
      
#line 724 
      (adapter->rx_ring[i])->reg_idx = (unsigned char)((((unsigned int)((unsigned char)(i << 3)) & 8U) + (unsigned int)((unsigned char)(i >> 1))) + (unsigned int)((unsigned char)rbase_offset));
      
#line 723 
      i += 1;
      ldv_57175: 
#line 724 
      ;
      
#line 723 
      if (adapter->rss_queues > (unsigned int)i) 
#line 725 
                                                 goto ldv_57174; else 
                                                                   
#line 728 
                                                                   goto ldv_57176;
      ldv_57176: 
#line 729 
      ;
    }
    else ;
    case (unsigned int)1: 
#line 728 
    ;
    case (unsigned int)3: 
#line 729 
    ;
    case (unsigned int)4: 
#line 730 
    ;
    case (unsigned int)5: 
#line 731 
    ;
    case (unsigned int)6: 
#line 732 
    ;
    case (unsigned int)7: 
#line 733 
    ;
    default: 
#line 735 
    ;
    
#line 736 
    goto ldv_57185;
    ldv_57184: 
#line 737 
    ;
    
#line 737 
    (adapter->rx_ring[i])->reg_idx = (unsigned char)((int)((unsigned char)rbase_offset) + (int)((unsigned char)i));
    
#line 736 
    i += 1;
    ldv_57185: 
#line 737 
    ;
    
#line 736 
    if (adapter->num_rx_queues > i) 
#line 738 
                                    goto ldv_57184; else 
#line 741 
                                                         goto ldv_57186;
    ldv_57186: 
#line 742 
    ;
    
#line 738 
    goto ldv_57188;
    ldv_57187: 
#line 739 
    ;
    
#line 739 
    (adapter->tx_ring[j])->reg_idx = (unsigned char)((int)((unsigned char)rbase_offset) + (int)((unsigned char)j));
    
#line 738 
    j += 1;
    ldv_57188: 
#line 739 
    ;
    
#line 738 
    if (adapter->num_tx_queues > j) 
#line 740 
                                    goto ldv_57187; else 
#line 743 
                                                         goto ldv_57189;
    ldv_57189: 
#line 744 
    ;
    
#line 740 
    goto ldv_57190;
  }
  ldv_57190: 
#line 742 
  ;
  
#line 743 
  return;
}


#line 744  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
u32 igb_rd32(struct e1000_hw *hw, u32 reg)
{
  u32 __retres;
  struct igb_adapter *tmp;
  u8 * volatile *tmp_0;
  {
    
#line 746 
    struct e1000_hw const *__mptr = (struct e1000_hw const *)hw;
    
#line 746 
    tmp = (struct igb_adapter *)__mptr + 18446744073709549856U;
  }
  
#line 746 
  struct igb_adapter *igb = tmp;
  {
    
#line 747 
    u8 *__var = (u8 *)0U;
    
#line 747 
    tmp_0 = (u8 * volatile *)(& hw->hw_addr);
  }
  
#line 747 
  u8 *hw_addr = *tmp_0;
  
#line 748 
  u32 value = 0U;
  
#line 750 
  if ((long)(hw_addr == (u8 *)0U) != 0L) {
    
#line 751 
    __retres = ~ value;
    
#line 751 
    goto return_label;
  }
  else ;
  
#line 753 
  value = readl((void const volatile *)(hw_addr + reg));
  
#line 756 
  if (value == 4294967295U) {
    
#line 756 
    if (reg == 0U) 
#line 756 
                   goto _LOR;
    else {
      unsigned int tmp_1;
      
#line 756 
      tmp_1 = readl((void const volatile *)hw_addr);
      
#line 756 
      if (tmp_1 == 4294967295U) {
        _LOR: {
                
#line 757 
                struct net_device *netdev = igb->netdev;
                
#line 758 
                hw->hw_addr = (u8 *)0U;
                
#line 759 
                netif_device_detach(netdev);
                
#line 760 
                netdev_err((struct net_device const *)netdev,"PCIe link lost, device now detached\n");
              }
      }
      else ;
    }
  }
  else ;
  
#line 763 
  __retres = value;
  return_label: 
#line 763 
                return __retres;
}


#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_write_ivar(struct e1000_hw *hw, int msix_vector, int index, int offset)
{
  
#line 781 
  u32 ivar = readl((void const volatile *)(hw->hw_addr + ((unsigned int)(index << 2) + 5888U)));
  
#line 784 
  ivar = ~ (255U << offset) & ivar;
  
#line 787 
  ivar = (unsigned int)((msix_vector | 128) << offset) | ivar;
  {
    u8 * volatile *tmp_0;
    {
      
#line 789 
      u8 *__var = (u8 *)0U;
      
#line 789 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 789 
    u8 *hw_addr = *tmp_0;
    
#line 789 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 789 
                                           writel(ivar,(void volatile *)(hw_addr + ((index << 2) + 5888))); else ;
  }
  
#line 791 
  return;
}


#line 793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_assign_vector(struct igb_q_vector *q_vector, int msix_vector)
{
  
#line 795 
  struct igb_adapter *adapter = q_vector->adapter;
  
#line 796 
  struct e1000_hw *hw = & adapter->hw;
  
#line 797 
  int rx_queue = -1;
  
#line 798 
  int tx_queue = -1;
  
#line 799 
  u32 msixbm = 0U;
  
#line 801 
  if (q_vector->rx.ring != (struct igb_ring *)0) 
#line 802 
                                                 rx_queue = (int)(q_vector->rx.ring)->reg_idx; else ;
  
#line 803 
  if (q_vector->tx.ring != (struct igb_ring *)0) 
#line 804 
                                                 tx_queue = (int)(q_vector->tx.ring)->reg_idx; else ;
  
#line 806 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 807 
    ;
    
#line 813 
    if (rx_queue >= 0) 
#line 814 
                       msixbm = (unsigned int)(1 << rx_queue); else ;
    
#line 815 
    if (tx_queue >= 0) 
#line 816 
                       msixbm = (unsigned int)(256 << tx_queue) | msixbm; else ;
    
#line 817 
    if ((adapter->flags & 8192U) == 0U && msix_vector == 0) 
#line 818 
                                                            msixbm |= 2147483648U; else ;
    {
      u8 * volatile *tmp;
      {
        
#line 819 
        u8 *__var = (u8 *)0U;
        
#line 819 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 819 
      u8 *hw_addr = *tmp;
      
#line 819 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 819 
                                             writel(msixbm,(void volatile *)(hw_addr + ((msix_vector << 2) + 5632))); else ;
    }
    
#line 820 
    q_vector->eims_value = msixbm;
    
#line 821 
    goto ldv_57226;
    case (unsigned int)2: 
#line 822 
    ;
    
#line 828 
    if (rx_queue >= 0) 
#line 829 
                       igb_write_ivar(hw,msix_vector,rx_queue & 7,(rx_queue << 1) & 16); else ;
    
#line 832 
    if (tx_queue >= 0) 
#line 833 
                       igb_write_ivar(hw,msix_vector,tx_queue & 7,((tx_queue << 1) & 16) + 8); else ;
    
#line 836 
    q_vector->eims_value = (unsigned int)(1 << msix_vector);
    
#line 837 
    goto ldv_57226;
    case (unsigned int)3: 
#line 838 
    ;
    case (unsigned int)4: 
#line 839 
    ;
    case (unsigned int)5: 
#line 840 
    ;
    case (unsigned int)6: 
#line 841 
    ;
    case (unsigned int)7: 
#line 842 
    ;
    
#line 849 
    if (rx_queue >= 0) 
#line 850 
                       igb_write_ivar(hw,msix_vector,rx_queue >> 1,(rx_queue << 4) & 16); else ;
    
#line 853 
    if (tx_queue >= 0) 
#line 854 
                       igb_write_ivar(hw,msix_vector,tx_queue >> 1,((tx_queue << 4) & 16) + 8); else ;
    
#line 857 
    q_vector->eims_value = (unsigned int)(1 << msix_vector);
    
#line 858 
    goto ldv_57226;
    default: 
#line 859 
    ;
    
#line 860 
    ldv_inline_asm();
    
#line 860 
    ;
  }
  ldv_57226: 
#line 865 
  ;
  
#line 865 
  adapter->eims_enable_mask |= q_vector->eims_value;
  
#line 868 
  q_vector->set_itr = (unsigned char)1U;
  
#line 869 
  return;
}


#line 878  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_configure_msix(struct igb_adapter *adapter)
{
  u32 tmp;
  int i;
  int tmp_6;
  
#line 881 
  int vector = 0;
  
#line 882 
  struct e1000_hw *hw = & adapter->hw;
  
#line 884 
  adapter->eims_enable_mask = 0U;
  
#line 887 
  switch ((unsigned int)hw->mac.type) {
    int tmp_4;
    case (unsigned int)1: 
#line 888 
    ;
    
#line 889 
    tmp = igb_rd32(hw,24U);
    
#line 891 
    tmp |= 2147483648U;
    
#line 894 
    tmp |= 16777216U;
    
#line 895 
    tmp |= 1U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 897 
        u8 *__var = (u8 *)0U;
        
#line 897 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 897 
      u8 *hw_addr = *tmp_0;
      
#line 897 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 897 
                                             writel(tmp,(void volatile *)(hw_addr + 24U)); else ;
    }
    {
      u8 * volatile *tmp_1;
      {
        
#line 900 
        u8 *__var_0 = (u8 *)0U;
        
#line 900 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 900 
      u8 *hw_addr_0 = *tmp_1;
      
#line 900 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
        int tmp_2;
        
#line 900 
        tmp_2 = vector;
        
#line 900 
        vector += 1;
        
#line 900 
        ;
        
#line 900 
        writel(2147483648U,(void volatile *)(hw_addr_0 + ((tmp_2 << 2) + 5632)));
      }
      else ;
    }
    
#line 901 
    adapter->eims_other = 2147483648U;
    
#line 903 
    goto ldv_57248;
    case (unsigned int)2: 
#line 905 
    ;
    case (unsigned int)3: 
#line 906 
    ;
    case (unsigned int)4: 
#line 907 
    ;
    case (unsigned int)5: 
#line 908 
    ;
    case (unsigned int)6: 
#line 909 
    ;
    case (unsigned int)7: 
#line 910 
    ;
    {
      u8 * volatile *tmp_3;
      {
        
#line 914 
        u8 *__var_1 = (u8 *)0U;
        
#line 914 
        tmp_3 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 914 
      u8 *hw_addr_1 = *tmp_3;
      
#line 914 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 914 
                                               writel(3221225489U,(void volatile *)(hw_addr_1 + 5396U)); else ;
    }
    
#line 919 
    adapter->eims_other = (unsigned int)(1 << vector);
    
#line 920 
    tmp_4 = vector;
    
#line 920 
    vector += 1;
    
#line 920 
    tmp = (unsigned int)((tmp_4 << 8) | 32768);
    {
      u8 * volatile *tmp_5;
      {
        
#line 922 
        u8 *__var_2 = (u8 *)0U;
        
#line 922 
        tmp_5 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 922 
      u8 *hw_addr_2 = *tmp_5;
      
#line 922 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 922 
                                               writel(tmp,(void volatile *)(hw_addr_2 + 5952U)); else ;
    }
    
#line 923 
    goto ldv_57248;
    default: 
#line 924 
    ;
    
#line 926 
    goto ldv_57248;
  }
  ldv_57248: 
#line 929 
  ;
  
#line 929 
  adapter->eims_enable_mask |= adapter->eims_other;
  
#line 931 
  i = 0;
  
#line 931 
  goto ldv_57263;
  ldv_57262: 
#line 932 
  ;
  
#line 932 
  tmp_6 = vector;
  
#line 932 
  vector += 1;
  
#line 932 
  ;
  
#line 932 
  ;
  
#line 932 
  igb_assign_vector(adapter->q_vector[i],tmp_6);
  
#line 931 
  i += 1;
  ldv_57263: 
#line 932 
  ;
  
#line 931 
  if (adapter->num_q_vectors > (unsigned int)i) 
#line 933 
                                                goto ldv_57262; else 
                                                                  
#line 936 
                                                                  goto ldv_57264;
  ldv_57264: 
#line 937 
  ;
  
#line 934 
  igb_rd32(hw,8U);
  
#line 935 
  return;
}


#line 944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_request_msix(struct igb_adapter *adapter)
{
  int __retres;
  int i;
  int tmp;
  int tmp_0;
  
#line 946 
  struct net_device *netdev = adapter->netdev;
  
#line 947 
  struct e1000_hw *hw = & adapter->hw;
  
#line 948 
  int err = 0;
  
#line 948 
  int vector = 0;
  
#line 948 
  int free_vector = 0;
  
#line 950 
  err = ldv_request_irq_75_0(adapter->msix_entries[vector].vector,& igb_msix_other,0UL,(char const *)(& netdev->name),(void *)adapter);
  
#line 952 
  if (err != 0) 
#line 953 
                goto err_out; else ;
  
#line 955 
  i = 0;
  
#line 955 
  goto ldv_57278;
  ldv_57277: 
#line 956 
  ;
  {
    
#line 956 
    struct igb_q_vector *q_vector = adapter->q_vector[i];
    
#line 958 
    vector += 1;
    
#line 960 
    q_vector->itr_register = (void *)(hw->hw_addr + (vector + 1440) * 4);
    
#line 962 
    if (q_vector->rx.ring != (struct igb_ring *)0 && q_vector->tx.ring != (struct igb_ring *)0) 
      
#line 963 
      sprintf((char *)(& q_vector->name),"%s-TxRx-%u",(char *)(& netdev->name),(int)(q_vector->rx.ring)->queue_index);
    else 
      
#line 965 
      if (q_vector->tx.ring != (struct igb_ring *)0) 
#line 966 
                                                     sprintf((char *)(& q_vector->name),"%s-tx-%u",(char *)(& netdev->name),(int)(q_vector->tx.ring)->queue_index);
      else 
        
#line 968 
        if (q_vector->rx.ring != (struct igb_ring *)0) 
#line 969 
                                                       sprintf((char *)(& q_vector->name),"%s-rx-%u",(char *)(& netdev->name),(int)(q_vector->rx.ring)->queue_index); else 
                                                                    
#line 972 
                                                                    sprintf((char *)(& q_vector->name),"%s-unused",(char *)(& netdev->name));
    
#line 974 
    err = ldv_request_irq_76(adapter->msix_entries[vector].vector,& igb_msix_ring,0UL,(char const *)(& q_vector->name),(void *)q_vector);
    
#line 977 
    if (err != 0) 
#line 978 
                  goto err_free; else ;
  }
  
#line 955 
  i += 1;
  ldv_57278: 
#line 956 
  ;
  
#line 955 
  if (adapter->num_q_vectors > (unsigned int)i) 
#line 957 
                                                goto ldv_57277; else 
                                                                  
#line 960 
                                                                  goto ldv_57279;
  ldv_57279: 
#line 961 
  ;
  
#line 981 
  igb_configure_msix(adapter);
  
#line 982 
  __retres = 0;
  
#line 982 
  goto return_label;
  err_free: 
#line 984 
  ;
  
#line 986 
  ;
  
#line 986 
  tmp = free_vector;
  
#line 986 
  free_vector += 1;
  
#line 986 
  ;
  
#line 986 
  ldv_free_irq_77_0(adapter->msix_entries[tmp].vector,(void *)adapter);
  
#line 988 
  vector -= 1;
  
#line 989 
  i = 0;
  
#line 989 
  goto ldv_57281;
  ldv_57280: 
#line 990 
  ;
  
#line 990 
  ;
  
#line 990 
  tmp_0 = free_vector;
  
#line 990 
  free_vector += 1;
  
#line 990 
  ;
  
#line 990 
  ldv_free_irq_78(adapter->msix_entries[tmp_0].vector,(void *)adapter->q_vector[i]);
  
#line 989 
  i += 1;
  ldv_57281: 
#line 990 
  ;
  
#line 989 
  if (i < vector) 
#line 991 
                  goto ldv_57280; else 
#line 994 
                                       goto ldv_57282;
  ldv_57282: 
#line 995 
  ;
  err_out: 
#line 993 
  ;
  
#line 994 
  __retres = err;
  return_label: 
#line 994 
                return __retres;
}


#line 1014 
void __compiletime_assert_1014(void);


#line 1004  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_q_vector(struct igb_adapter *adapter, int v_idx)
{
  
#line 1006 
  struct igb_q_vector *q_vector = adapter->q_vector[v_idx];
  
#line 1008 
  adapter->q_vector[v_idx] = (struct igb_q_vector *)0;
  
#line 1013 
  if (q_vector != (struct igb_q_vector *)0) {
    {
      
#line 1014 
      bool __cond = (_Bool)0;
      
#line 1014 
      if ((int)__cond != 0) 
#line 1014 
                            __compiletime_assert_1014(); else ;
    }
    
#line 1014 
    kfree_call_rcu(& q_vector->rcu,(void (*)(struct callback_head *))360);
  }
  else ;
  
#line 1016 
  return;
}


#line 1025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_reset_q_vector(struct igb_adapter *adapter, int v_idx)
{
  
#line 1027 
  struct igb_q_vector *q_vector = adapter->q_vector[v_idx];
  
#line 1032 
  if (q_vector == (struct igb_q_vector *)0) 
#line 1033 
                                            goto return_label; else ;
  
#line 1035 
  if (q_vector->tx.ring != (struct igb_ring *)0) 
#line 1036 
                                                 adapter->tx_ring[(int)(q_vector->tx.ring)->queue_index] = (struct igb_ring *)0; else ;
  
#line 1038 
  if (q_vector->rx.ring != (struct igb_ring *)0) 
#line 1039 
                                                 adapter->rx_ring[(int)(q_vector->rx.ring)->queue_index] = (struct igb_ring *)0; else ;
  
#line 1041 
  netif_napi_del(& q_vector->napi);
  return_label: 
#line 1042 
                return;
}


#line 1045  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_reset_interrupt_capability(struct igb_adapter *adapter)
{
  int tmp;
  
#line 1047 
  int v_idx = (int)adapter->num_q_vectors;
  
#line 1049 
  if ((adapter->flags & 8192U) != 0U) 
#line 1050 
                                      pci_disable_msix(adapter->pdev);
  else 
    
#line 1051 
    if ((adapter->flags & 1U) != 0U) 
#line 1052 
                                     pci_disable_msi(adapter->pdev); else ;
  
#line 1054 
  goto ldv_57303;
  ldv_57302: 
#line 1055 
  ;
  
#line 1055 
  igb_reset_q_vector(adapter,v_idx);
  ldv_57303: 
#line 1056 
  ;
  
#line 1054 
  tmp = v_idx;
  
#line 1054 
  v_idx -= 1;
  
#line 1054 
  ;
  
#line 1054 
  if (tmp != 0) 
#line 1056 
                goto ldv_57302; else 
#line 1059 
                                     goto ldv_57304;
  ldv_57304: 
#line 1060 
  ;
  
#line 1061 
  return;
}


#line 1066  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_q_vectors(struct igb_adapter *adapter)
{
  int tmp;
  
#line 1068 
  int v_idx = (int)adapter->num_q_vectors;
  
#line 1070 
  adapter->num_tx_queues = 0;
  
#line 1071 
  adapter->num_rx_queues = 0;
  
#line 1072 
  adapter->num_q_vectors = 0U;
  
#line 1074 
  goto ldv_57310;
  ldv_57309: 
#line 1075 
  ;
  
#line 1075 
  igb_reset_q_vector(adapter,v_idx);
  
#line 1076 
  igb_free_q_vector(adapter,v_idx);
  ldv_57310: 
#line 1077 
  ;
  
#line 1074 
  tmp = v_idx;
  
#line 1074 
  v_idx -= 1;
  
#line 1074 
  ;
  
#line 1074 
  if (tmp != 0) 
#line 1076 
                goto ldv_57309; else 
#line 1079 
                                     goto ldv_57311;
  ldv_57311: 
#line 1080 
  ;
  
#line 1081 
  return;
}


#line 1087  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clear_interrupt_scheme(struct igb_adapter *adapter)
{
  
#line 1089 
  igb_free_q_vectors(adapter);
  
#line 1090 
  igb_reset_interrupt_capability(adapter);
  
#line 1091 
  return;
}


#line 1101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_interrupt_capability(struct igb_adapter *adapter, bool msix)
{
  int err;
  int numvecs;
  int i;
  int tmp_0;
  
#line 1106 
  if (! msix) 
#line 1107 
              goto msi_only; else ;
  
#line 1108 
  adapter->flags |= 8192U;
  
#line 1111 
  adapter->num_rx_queues = (int)adapter->rss_queues;
  
#line 1112 
  if (adapter->vfs_allocated_count != 0U) 
#line 1113 
                                          adapter->num_tx_queues = 1; else 
                                                                    
#line 1115 
                                                                    adapter->num_tx_queues = (int)adapter->rss_queues;
  
#line 1118 
  numvecs = adapter->num_rx_queues;
  
#line 1121 
  if ((adapter->flags & 8U) == 0U) 
#line 1122 
                                   numvecs = adapter->num_tx_queues + numvecs; else ;
  
#line 1125 
  adapter->num_q_vectors = (unsigned int)numvecs;
  
#line 1128 
  numvecs += 1;
  
#line 1129 
  i = 0;
  
#line 1129 
  goto ldv_57324;
  ldv_57323: 
#line 1130 
  ;
  
#line 1130 
  adapter->msix_entries[i].entry = (unsigned short)i;
  
#line 1129 
  i += 1;
  ldv_57324: 
#line 1130 
  ;
  
#line 1129 
  if (i < numvecs) 
#line 1131 
                   goto ldv_57323; else 
#line 1134 
                                        goto ldv_57325;
  ldv_57325: 
#line 1135 
  ;
  
#line 1132 
  err = pci_enable_msix_range(adapter->pdev,(struct msix_entry *)(& adapter->msix_entries),numvecs,numvecs);
  
#line 1136 
  if (err > 0) 
#line 1137 
               goto return_label; else ;
  
#line 1139 
  igb_reset_interrupt_capability(adapter);
  msi_only: 
#line 1142 
  ;
  
#line 1143 
  adapter->flags &= 4294959103U;
  
#line 1146 
  if (adapter->vf_data != (struct vf_data_storage *)0) {
    
#line 1147 
    struct e1000_hw *hw = & adapter->hw;
    
#line 1149 
    pci_disable_sriov(adapter->pdev);
    
#line 1150 
    msleep(500U);
    
#line 1152 
    kfree((void const *)adapter->vf_data);
    
#line 1153 
    adapter->vf_data = (struct vf_data_storage *)0;
    {
      u8 * volatile *tmp;
      {
        
#line 1154 
        u8 *__var = (u8 *)0U;
        
#line 1154 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1154 
      u8 *hw_addr = *tmp;
      
#line 1154 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1154 
                                             writel(1U,(void volatile *)(hw_addr + 23484U)); else ;
    }
    
#line 1155 
    igb_rd32(hw,8U);
    
#line 1156 
    msleep(100U);
    
#line 1157 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"IOV Disabled\n");
  }
  else ;
  
#line 1160 
  adapter->vfs_allocated_count = 0U;
  
#line 1161 
  adapter->rss_queues = 1U;
  
#line 1162 
  adapter->flags |= 8U;
  
#line 1163 
  adapter->num_rx_queues = 1;
  
#line 1164 
  adapter->num_tx_queues = 1;
  
#line 1165 
  adapter->num_q_vectors = 1U;
  
#line 1166 
  tmp_0 = pci_enable_msi_exact(adapter->pdev,1);
  
#line 1166 
  if (tmp_0 == 0) 
#line 1167 
                  adapter->flags |= 1U; else ;
  return_label: 
#line 1168 
                return;
}


#line 1170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_add_ring(struct igb_ring *ring, struct igb_ring_container *head)
{
  
#line 1173 
  head->ring = ring;
  
#line 1174 
  head->count = (u8)((int)head->count + 1);
  
#line 1175 
  return;
}


#line 1211 
void __compiletime_assert_1211(void);


#line 1189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_alloc_q_vector(struct igb_adapter *adapter, int v_count, int v_idx, int txr_count, int txr_idx, int rxr_count, int rxr_idx)
{
  int __retres;
  struct igb_q_vector *q_vector;
  struct igb_ring *ring;
  int ring_count;
  int size;
  
#line 1199 
  if (txr_count > 1 || rxr_count > 1) {
    
#line 1200 
    __retres = -12;
    
#line 1200 
    goto return_label;
  }
  else ;
  
#line 1202 
  ring_count = txr_count + rxr_count;
  
#line 1203 
  size = (int)(((unsigned long)ring_count + 1UL) * (unsigned long)4096U);
  
#line 1207 
  q_vector = adapter->q_vector[v_idx];
  
#line 1208 
  if (q_vector == (struct igb_q_vector *)0) 
#line 1209 
                                            q_vector = (struct igb_q_vector *)kzalloc((unsigned long)size,208U);
  else {
    size_t tmp_1;
    
#line 1210 
    tmp_1 = ksize((void const *)q_vector);
    
#line 1210 
    ;
    
#line 1210 
    if ((unsigned long)size > tmp_1) {
      {
        
#line 1211 
        bool __cond = (_Bool)0;
        
#line 1211 
        if ((int)__cond != 0) 
#line 1211 
                              __compiletime_assert_1211(); else ;
      }
      
#line 1211 
      kfree_call_rcu(& q_vector->rcu,(void (*)(struct callback_head *))360);
      
#line 1212 
      q_vector = (struct igb_q_vector *)kzalloc((unsigned long)size,208U);
    }
    else 
#line 1214 
         memset((void *)q_vector,0,(unsigned long)size);
  }
  
#line 1216 
  if (q_vector == (struct igb_q_vector *)0) {
    
#line 1217 
    __retres = -12;
    
#line 1217 
    goto return_label;
  }
  else ;
  
#line 1220 
  netif_napi_add(adapter->netdev,& q_vector->napi,& igb_poll,64);
  
#line 1224 
  adapter->q_vector[v_idx] = q_vector;
  
#line 1225 
  q_vector->adapter = adapter;
  
#line 1228 
  q_vector->tx.work_limit = adapter->tx_work_limit;
  
#line 1231 
  q_vector->itr_register = (void *)(adapter->hw.hw_addr + 5760U);
  
#line 1232 
  q_vector->itr_val = (unsigned short)648U;
  
#line 1235 
  ring = (struct igb_ring *)(& q_vector->ring);
  
#line 1238 
  if (rxr_count != 0) {
    
#line 1240 
    if (adapter->rx_itr_setting + 4294967295U > 2U) 
#line 1241 
                                                    q_vector->itr_val = (unsigned short)adapter->rx_itr_setting; else ;
  }
  else 
    
#line 1244 
    if (adapter->tx_itr_setting + 4294967295U > 2U) 
#line 1245 
                                                    q_vector->itr_val = (unsigned short)adapter->tx_itr_setting; else ;
  
#line 1248 
  if (txr_count != 0) {
    
#line 1250 
    ring->dev = & (adapter->pdev)->dev;
    
#line 1251 
    ring->netdev = adapter->netdev;
    
#line 1254 
    ring->q_vector = q_vector;
    
#line 1257 
    igb_add_ring(ring,& q_vector->tx);
    
#line 1260 
    if (adapter->hw.mac.type == (unsigned int)e1000_82575) 
#line 1261 
                                                           set_bit(2L,(unsigned long volatile *)(& ring->flags)); else ;
    
#line 1264 
    ring->count = adapter->tx_ring_count;
    
#line 1265 
    ring->queue_index = (unsigned char)txr_idx;
    
#line 1267 
    u64_stats_init(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp);
    
#line 1268 
    u64_stats_init(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp2);
    
#line 1271 
    adapter->tx_ring[txr_idx] = ring;
    
#line 1274 
    ring += 1;
  }
  else ;
  
#line 1277 
  if (rxr_count != 0) {
    
#line 1279 
    ring->dev = & (adapter->pdev)->dev;
    
#line 1280 
    ring->netdev = adapter->netdev;
    
#line 1283 
    ring->q_vector = q_vector;
    
#line 1286 
    igb_add_ring(ring,& q_vector->rx);
    
#line 1289 
    if (adapter->hw.mac.type > (unsigned int)e1000_82575) 
#line 1290 
                                                          set_bit(0L,(unsigned long volatile *)(& ring->flags)); else ;
    
#line 1295 
    if (adapter->hw.mac.type > (unsigned int)e1000_82580) 
#line 1296 
                                                          set_bit(1L,(unsigned long volatile *)(& ring->flags)); else ;
    
#line 1299 
    ring->count = adapter->rx_ring_count;
    
#line 1300 
    ring->queue_index = (unsigned char)rxr_idx;
    
#line 1302 
    u64_stats_init(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_syncp);
    
#line 1305 
    adapter->rx_ring[rxr_idx] = ring;
  }
  else ;
  
#line 1308 
  __retres = 0;
  return_label: 
#line 1308 
                return __retres;
}


#line 1319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_alloc_q_vectors(struct igb_adapter *adapter)
{
  int __retres;
  int err;
  int tmp;
  
#line 1321 
  int q_vectors = (int)adapter->num_q_vectors;
  
#line 1322 
  int rxr_remaining = adapter->num_rx_queues;
  
#line 1323 
  int txr_remaining = adapter->num_tx_queues;
  
#line 1324 
  int rxr_idx = 0;
  
#line 1324 
  int txr_idx = 0;
  
#line 1324 
  int v_idx = 0;
  
#line 1327 
  if (rxr_remaining + txr_remaining <= q_vectors) {
    
#line 1328 
    goto ldv_57364;
    ldv_57363: 
#line 1329 
    ;
    
#line 1329 
    err = igb_alloc_q_vector(adapter,q_vectors,v_idx,0,0,1,rxr_idx);
    
#line 1332 
    if (err != 0) 
#line 1333 
                  goto err_out; else ;
    
#line 1336 
    rxr_remaining -= 1;
    
#line 1337 
    rxr_idx += 1;
    
#line 1328 
    v_idx += 1;
    ldv_57364: 
#line 1329 
    ;
    
#line 1328 
    if (rxr_remaining != 0) 
#line 1330 
                            goto ldv_57363; else 
#line 1333 
                                                 goto ldv_57365;
    ldv_57365: 
#line 1334 
    ;
  }
  else ;
  
#line 1341 
  goto ldv_57369;
  ldv_57368: 
#line 1342 
  ;
  {
    
#line 1342 
    int rqpv = (((q_vectors - v_idx) + rxr_remaining) + -1) / (q_vectors - v_idx);
    
#line 1343 
    int tqpv = (((q_vectors - v_idx) + txr_remaining) + -1) / (q_vectors - v_idx);
    
#line 1345 
    err = igb_alloc_q_vector(adapter,q_vectors,v_idx,tqpv,txr_idx,rqpv,rxr_idx);
    
#line 1348 
    if (err != 0) 
#line 1349 
                  goto err_out; else ;
    
#line 1352 
    rxr_remaining -= rqpv;
    
#line 1353 
    txr_remaining -= tqpv;
    
#line 1354 
    rxr_idx += 1;
    
#line 1355 
    txr_idx += 1;
  }
  
#line 1341 
  v_idx += 1;
  ldv_57369: 
#line 1342 
  ;
  
#line 1341 
  if (v_idx < q_vectors) 
#line 1343 
                         goto ldv_57368; else 
#line 1346 
                                              goto ldv_57370;
  ldv_57370: 
#line 1347 
  ;
  
#line 1358 
  __retres = 0;
  
#line 1358 
  goto return_label;
  err_out: 
#line 1360 
  ;
  
#line 1361 
  adapter->num_tx_queues = 0;
  
#line 1362 
  adapter->num_rx_queues = 0;
  
#line 1363 
  adapter->num_q_vectors = 0U;
  
#line 1365 
  goto ldv_57372;
  ldv_57371: 
#line 1366 
  ;
  
#line 1366 
  igb_free_q_vector(adapter,v_idx);
  ldv_57372: 
#line 1367 
  ;
  
#line 1365 
  tmp = v_idx;
  
#line 1365 
  v_idx -= 1;
  
#line 1365 
  ;
  
#line 1365 
  if (tmp != 0) 
#line 1367 
                goto ldv_57371; else 
#line 1370 
                                     goto ldv_57373;
  ldv_57373: 
#line 1371 
  ;
  
#line 1368 
  __retres = -12;
  return_label: 
#line 1368 
                return __retres;
}


#line 1378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_init_interrupt_scheme(struct igb_adapter *adapter, bool msix)
{
  int __retres;
  int err;
  
#line 1380 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1383 
  igb_set_interrupt_capability(adapter,(_Bool)((bool)((int)msix) != 0));
  
#line 1385 
  err = igb_alloc_q_vectors(adapter);
  
#line 1386 
  if (err != 0) {
    
#line 1387 
    dev_err((struct device const *)(& pdev->dev),"Unable to allocate memory for vectors\n");
    
#line 1388 
    goto err_alloc_q_vectors;
  }
  else ;
  
#line 1391 
  igb_cache_ring_register(adapter);
  
#line 1393 
  __retres = 0;
  
#line 1393 
  goto return_label;
  err_alloc_q_vectors: 
#line 1395 
  ;
  
#line 1396 
  igb_reset_interrupt_capability(adapter);
  
#line 1397 
  __retres = err;
  return_label: 
#line 1397 
                return __retres;
}


#line 1407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_request_irq(struct igb_adapter *adapter)
{
  
#line 1409 
  struct net_device *netdev = adapter->netdev;
  
#line 1410 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1411 
  int err = 0;
  
#line 1413 
  if ((adapter->flags & 8192U) != 0U) {
    
#line 1414 
    err = igb_request_msix(adapter);
    
#line 1415 
    if (err == 0) 
#line 1416 
                  goto request_done; else ;
    
#line 1418 
    igb_free_all_tx_resources(adapter);
    
#line 1419 
    igb_free_all_rx_resources(adapter);
    
#line 1421 
    igb_clear_interrupt_scheme(adapter);
    
#line 1422 
    err = igb_init_interrupt_scheme(adapter,(_Bool)0);
    
#line 1423 
    if (err != 0) 
#line 1424 
                  goto request_done; else ;
    
#line 1426 
    igb_setup_all_tx_resources(adapter);
    
#line 1427 
    igb_setup_all_rx_resources(adapter);
    
#line 1428 
    igb_configure(adapter);
  }
  else ;
  
#line 1431 
  igb_assign_vector(adapter->q_vector[0],0);
  
#line 1433 
  if ((adapter->flags & 1U) != 0U) {
    
#line 1434 
    err = ldv_request_irq_79(pdev->irq,& igb_intr_msi,0UL,(char const *)(& netdev->name),(void *)adapter);
    
#line 1436 
    if (err == 0) 
#line 1437 
                  goto request_done; else ;
    
#line 1440 
    igb_reset_interrupt_capability(adapter);
    
#line 1441 
    adapter->flags &= 4294967294U;
  }
  else ;
  
#line 1444 
  err = ldv_request_irq_80(pdev->irq,& igb_intr,128UL,(char const *)(& netdev->name),(void *)adapter);
  
#line 1447 
  if (err != 0) 
#line 1448 
                dev_err((struct device const *)(& pdev->dev),"Error %d getting interrupt\n",err); else ;
  request_done: 
#line 1451 
  ;
  
#line 1452 
  return err;
}


#line 1455  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_irq(struct igb_adapter *adapter)
{
  
#line 1457 
  if ((adapter->flags & 8192U) != 0U) {
    int i;
    int tmp;
    int tmp_0;
    
#line 1458 
    int vector = 0;
    
#line 1460 
    ;
    
#line 1460 
    tmp = vector;
    
#line 1460 
    vector += 1;
    
#line 1460 
    ;
    
#line 1460 
    ldv_free_irq_81(adapter->msix_entries[tmp].vector,(void *)adapter);
    
#line 1462 
    i = 0;
    
#line 1462 
    goto ldv_57394;
    ldv_57393: 
#line 1463 
    ;
    
#line 1463 
    ;
    
#line 1463 
    tmp_0 = vector;
    
#line 1463 
    vector += 1;
    
#line 1463 
    ;
    
#line 1463 
    ldv_free_irq_82(adapter->msix_entries[tmp_0].vector,(void *)adapter->q_vector[i]);
    
#line 1462 
    i += 1;
    ldv_57394: 
#line 1463 
    ;
    
#line 1462 
    if (adapter->num_q_vectors > (unsigned int)i) 
#line 1464 
                                                  goto ldv_57393; else 
                                                                    
#line 1467 
                                                                    goto ldv_57395;
    ldv_57395: 
#line 1468 
    ;
  }
  else 
#line 1466 
       ldv_free_irq_83((adapter->pdev)->irq,(void *)adapter);
  
#line 1467 
  return;
}


#line 1474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_irq_disable(struct igb_adapter *adapter)
{
  
#line 1476 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1482 
  if ((adapter->flags & 8192U) != 0U) {
    
#line 1483 
    u32 regval = igb_rd32(hw,5424U);
    {
      u8 * volatile *tmp_0;
      {
        
#line 1485 
        u8 *__var = (u8 *)0U;
        
#line 1485 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1485 
      u8 *hw_addr = *tmp_0;
      
#line 1485 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1485 
                                             writel(~ adapter->eims_enable_mask & regval,(void volatile *)(hw_addr + 5424U)); else ;
    }
    {
      u8 * volatile *tmp_1;
      {
        
#line 1486 
        u8 *__var_0 = (u8 *)0U;
        
#line 1486 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1486 
      u8 *hw_addr_0 = *tmp_1;
      
#line 1486 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1486 
                                               writel(adapter->eims_enable_mask,(void volatile *)(hw_addr_0 + 5416U)); else ;
    }
    
#line 1487 
    regval = igb_rd32(hw,5420U);
    {
      u8 * volatile *tmp_2;
      {
        
#line 1488 
        u8 *__var_1 = (u8 *)0U;
        
#line 1488 
        tmp_2 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1488 
      u8 *hw_addr_1 = *tmp_2;
      
#line 1488 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1488 
                                               writel(~ adapter->eims_enable_mask & regval,(void volatile *)(hw_addr_1 + 5420U)); else ;
    }
  }
  else ;
  {
    u8 * volatile *tmp_3;
    {
      
#line 1491 
      u8 *__var_2 = (u8 *)0U;
      
#line 1491 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1491 
    u8 *hw_addr_2 = *tmp_3;
    
#line 1491 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1491 
                                             writel(0U,(void volatile *)(hw_addr_2 + 224U)); else ;
  }
  {
    u8 * volatile *tmp_4;
    {
      
#line 1492 
      u8 *__var_3 = (u8 *)0U;
      
#line 1492 
      tmp_4 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1492 
    u8 *hw_addr_3 = *tmp_4;
    
#line 1492 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1492 
                                             writel(4294967295U,(void volatile *)(hw_addr_3 + 216U)); else ;
  }
  
#line 1493 
  igb_rd32(hw,8U);
  
#line 1494 
  if ((adapter->flags & 8192U) != 0U) {
    int i;
    
#line 1497 
    i = 0;
    
#line 1497 
    goto ldv_57418;
    ldv_57417: 
#line 1498 
    ;
    
#line 1498 
    synchronize_irq(adapter->msix_entries[i].vector);
    
#line 1497 
    i += 1;
    ldv_57418: 
#line 1498 
    ;
    
#line 1497 
    if (adapter->num_q_vectors > (unsigned int)i) 
#line 1499 
                                                  goto ldv_57417; else 
                                                                    
#line 1502 
                                                                    goto ldv_57419;
    ldv_57419: 
#line 1503 
    ;
  }
  else 
#line 1500 
       synchronize_irq((adapter->pdev)->irq);
  
#line 1501 
  return;
}


#line 1508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_irq_enable(struct igb_adapter *adapter)
{
  
#line 1510 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1512 
  if ((adapter->flags & 8192U) != 0U) {
    
#line 1513 
    u32 ims = 1342177284U;
    
#line 1514 
    u32 regval = igb_rd32(hw,5420U);
    {
      u8 * volatile *tmp_0;
      {
        
#line 1516 
        u8 *__var = (u8 *)0U;
        
#line 1516 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1516 
      u8 *hw_addr = *tmp_0;
      
#line 1516 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1516 
                                             writel(adapter->eims_enable_mask | regval,(void volatile *)(hw_addr + 5420U)); else ;
    }
    
#line 1517 
    regval = igb_rd32(hw,5424U);
    {
      u8 * volatile *tmp_1;
      {
        
#line 1518 
        u8 *__var_0 = (u8 *)0U;
        
#line 1518 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1518 
      u8 *hw_addr_0 = *tmp_1;
      
#line 1518 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1518 
                                               writel(adapter->eims_enable_mask | regval,(void volatile *)(hw_addr_0 + 5424U)); else ;
    }
    {
      u8 * volatile *tmp_2;
      {
        
#line 1519 
        u8 *__var_1 = (u8 *)0U;
        
#line 1519 
        tmp_2 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1519 
      u8 *hw_addr_1 = *tmp_2;
      
#line 1519 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1519 
                                               writel(adapter->eims_enable_mask,(void volatile *)(hw_addr_1 + 5412U)); else ;
    }
    
#line 1520 
    if (adapter->vfs_allocated_count != 0U) {
      {
        u8 * volatile *tmp_3;
        {
          
#line 1521 
          u8 *__var_2 = (u8 *)0U;
          
#line 1521 
          tmp_3 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 1521 
        u8 *hw_addr_2 = *tmp_3;
        
#line 1521 
        if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1521 
                                                 writel(255U,(void volatile *)(hw_addr_2 + 3204U)); else ;
      }
      
#line 1522 
      ims |= 256U;
    }
    else ;
    {
      u8 * volatile *tmp_4;
      {
        
#line 1524 
        u8 *__var_3 = (u8 *)0U;
        
#line 1524 
        tmp_4 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1524 
      u8 *hw_addr_3 = *tmp_4;
      
#line 1524 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1524 
                                               writel(ims,(void volatile *)(hw_addr_3 + 208U)); else ;
    }
  }
  else {
    {
      u8 * volatile *tmp_5;
      {
        
#line 1526 
        u8 *__var_4 = (u8 *)0U;
        
#line 1526 
        tmp_5 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1526 
      u8 *hw_addr_4 = *tmp_5;
      
#line 1526 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 1526 
                                               writel(1342177437U,(void volatile *)(hw_addr_4 + 208U)); else ;
    }
    {
      u8 * volatile *tmp_6;
      {
        
#line 1528 
        u8 *__var_5 = (u8 *)0U;
        
#line 1528 
        tmp_6 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1528 
      u8 *hw_addr_5 = *tmp_6;
      
#line 1528 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
#line 1528 
                                               writel(1342177437U,(void volatile *)(hw_addr_5 + 224U)); else ;
    }
  }
  
#line 1531 
  return;
}


#line 1533  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_mng_vlan(struct igb_adapter *adapter)
{
  
#line 1535 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1536 
  u16 vid = adapter->hw.mng_cookie.vlan_id;
  
#line 1537 
  u16 old_vid = adapter->mng_vlan_id;
  
#line 1539 
  if (((int)hw->mng_cookie.status & 2) != 0) {
    
#line 1541 
    igb_vfta_set(hw,(unsigned int)vid,(_Bool)1);
    
#line 1542 
    adapter->mng_vlan_id = vid;
  }
  else 
#line 1544 
       adapter->mng_vlan_id = (unsigned short)65535U;
  
#line 1547 
  if ((unsigned int)old_vid != 65535U && (int)vid != (int)old_vid) {
    int tmp_1;
    
#line 1548 
    if (0 != 0) {
      int tmp;
      
#line 1549 
      tmp = constant_test_bit((long)old_vid,(unsigned long const volatile *)(& adapter->active_vlans));
      
#line 1548 
      tmp_1 = tmp == 0;
    }
    else {
      int tmp_0;
      
#line 1548 
      tmp_0 = variable_test_bit((long)old_vid,(unsigned long const volatile *)(& adapter->active_vlans));
      
#line 1548 
      tmp_1 = tmp_0 == 0;
    }
    
#line 1548 
    if (tmp_1) 
#line 1551 
               igb_vfta_set(hw,(unsigned int)old_vid,(_Bool)0); else ;
  }
  else ;
  
#line 1552 
  return;
}


#line 1563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_release_hw_control(struct igb_adapter *adapter)
{
  u32 ctrl_ext;
  
#line 1565 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1569 
  ctrl_ext = igb_rd32(hw,24U);
  {
    u8 * volatile *tmp;
    {
      
#line 1570 
      u8 *__var = (u8 *)0U;
      
#line 1570 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1570 
    u8 *hw_addr = *tmp;
    
#line 1570 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1570 
                                           writel(ctrl_ext & 4026531839U,(void volatile *)(hw_addr + 24U)); else ;
  }
  
#line 1572 
  return;
}


#line 1582  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_get_hw_control(struct igb_adapter *adapter)
{
  u32 ctrl_ext;
  
#line 1584 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1588 
  ctrl_ext = igb_rd32(hw,24U);
  {
    u8 * volatile *tmp;
    {
      
#line 1589 
      u8 *__var = (u8 *)0U;
      
#line 1589 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1589 
    u8 *hw_addr = *tmp;
    
#line 1589 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1589 
                                           writel(ctrl_ext | 268435456U,(void volatile *)(hw_addr + 24U)); else ;
  }
  
#line 1591 
  return;
}


#line 1597  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_configure(struct igb_adapter *adapter)
{
  int i;
  
#line 1599 
  struct net_device *netdev = adapter->netdev;
  
#line 1602 
  igb_get_hw_control(adapter);
  
#line 1603 
  igb_set_rx_mode(netdev);
  
#line 1605 
  igb_restore_vlan(adapter);
  
#line 1607 
  igb_setup_tctl(adapter);
  
#line 1608 
  igb_setup_mrqc(adapter);
  
#line 1609 
  igb_setup_rctl(adapter);
  
#line 1611 
  igb_configure_tx(adapter);
  
#line 1612 
  igb_configure_rx(adapter);
  
#line 1614 
  igb_rx_fifo_flush_82575(& adapter->hw);
  
#line 1620 
  i = 0;
  
#line 1620 
  goto ldv_57476;
  ldv_57475: 
#line 1621 
  ;
  {
    int tmp;
    
#line 1621 
    struct igb_ring *ring = adapter->rx_ring[i];
    
#line 1622 
    tmp = igb_desc_unused(ring);
    
#line 1622 
    ;
    
#line 1622 
    igb_alloc_rx_buffers(ring,(unsigned short)((int)((unsigned short)tmp)));
  }
  
#line 1620 
  i += 1;
  ldv_57476: 
#line 1621 
  ;
  
#line 1620 
  if (adapter->num_rx_queues > i) 
#line 1622 
                                  goto ldv_57475; else 
#line 1625 
                                                       goto ldv_57477;
  ldv_57477: 
#line 1626 
  ;
  
#line 1627 
  return;
}


#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_power_up_link(struct igb_adapter *adapter)
{
  
#line 1632 
  igb_reset_phy(& adapter->hw);
  
#line 1634 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_copper) 
    
#line 1635 
    igb_power_up_phy_copper(& adapter->hw); else 
#line 1637 
                                                 igb_power_up_serdes_link_82575(& adapter->hw);
  
#line 1639 
  igb_setup_link(& adapter->hw);
  
#line 1640 
  return;
}


#line 1646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_power_down_link(struct igb_adapter *adapter)
{
  
#line 1648 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_copper) 
    
#line 1649 
    igb_power_down_phy_copper_82575(& adapter->hw); else 
#line 1651 
                                                         igb_shutdown_serdes_link_82575(& adapter->hw);
  
#line 1652 
  return;
}


#line 1658  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_check_swap_media(struct igb_adapter *adapter)
{
  u32 ctrl_ext;
  u32 connsw;
  
#line 1660 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1662 
  bool swap_now = (_Bool)0;
  
#line 1664 
  ctrl_ext = igb_rd32(hw,24U);
  
#line 1665 
  connsw = igb_rd32(hw,52U);
  
#line 1671 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (connsw & 1U) == 0U) 
    
#line 1673 
    swap_now = (_Bool)1;
  else 
    
#line 1674 
    if ((connsw & 512U) == 0U) 
      
#line 1676 
      if (adapter->copper_tries <= 3) {
        
#line 1677 
        adapter->copper_tries += 1;
        
#line 1678 
        connsw |= 2U;
        {
          u8 * volatile *tmp;
          {
            
#line 1679 
            u8 *__var = (u8 *)0U;
            
#line 1679 
            tmp = (u8 * volatile *)(& hw->hw_addr);
          }
          
#line 1679 
          u8 *hw_addr = *tmp;
          
#line 1679 
          if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1679 
                                                 writel(connsw,(void volatile *)(hw_addr + 52U)); else ;
        }
        
#line 1680 
        goto return_label;
      }
      else {
        
#line 1682 
        adapter->copper_tries = 0;
        
#line 1683 
        if ((connsw & 1024U) != 0U && (connsw & 2048U) == 0U) {
          
#line 1685 
          swap_now = (_Bool)1;
          
#line 1686 
          connsw &= 4294967293U;
          {
            u8 * volatile *tmp_0;
            {
              
#line 1687 
              u8 *__var_0 = (u8 *)0U;
              
#line 1687 
              tmp_0 = (u8 * volatile *)(& hw->hw_addr);
            }
            
#line 1687 
            u8 *hw_addr_0 = *tmp_0;
            
#line 1687 
            if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1687 
                                                     writel(connsw,(void volatile *)(hw_addr_0 + 52U)); else ;
          }
        }
        else ;
      }
    else ;
  
#line 1692 
  if (! swap_now) 
#line 1693 
                  goto return_label; else ;
  
#line 1695 
  switch ((unsigned int)hw->phy.media_type) {
    case (unsigned int)1: 
#line 1696 
    ;
    
#line 1697 
    netdev_info((struct net_device const *)adapter->netdev,"MAS: changing media to fiber/serdes\n");
    
#line 1699 
    ctrl_ext |= 12582912U;
    
#line 1701 
    adapter->flags |= 1024U;
    
#line 1702 
    adapter->copper_tries = 0;
    
#line 1703 
    goto ldv_57498;
    case (unsigned int)3: 
#line 1704 
    ;
    case (unsigned int)2: 
#line 1705 
    ;
    
#line 1706 
    netdev_info((struct net_device const *)adapter->netdev,"MAS: changing media to copper\n");
    
#line 1708 
    ctrl_ext &= 4282384383U;
    
#line 1710 
    adapter->flags |= 1024U;
    
#line 1711 
    goto ldv_57498;
    default: 
#line 1712 
    ;
    
#line 1714 
    netdev_err((struct net_device const *)adapter->netdev,"AMS: Invalid media type found, returning\n");
    
#line 1716 
    goto ldv_57498;
  }
  ldv_57498: 
#line 1718 
  ;
  {
    u8 * volatile *tmp_1;
    {
      
#line 1718 
      u8 *__var_1 = (u8 *)0U;
      
#line 1718 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1718 
    u8 *hw_addr_1 = *tmp_1;
    
#line 1718 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1718 
                                             writel(ctrl_ext,(void volatile *)(hw_addr_1 + 24U)); else ;
  }
  return_label: 
#line 1720 
                return;
}


#line 1725  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_up(struct igb_adapter *adapter)
{
  int __retres;
  int i;
  
#line 1727 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1731 
  igb_configure(adapter);
  
#line 1733 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1735 
  i = 0;
  
#line 1735 
  goto ldv_57511;
  ldv_57510: 
#line 1736 
  ;
  
#line 1736 
  napi_enable(& (adapter->q_vector[i])->napi);
  
#line 1735 
  i += 1;
  ldv_57511: 
#line 1736 
  ;
  
#line 1735 
  if (adapter->num_q_vectors > (unsigned int)i) 
#line 1737 
                                                goto ldv_57510; else 
                                                                  
#line 1740 
                                                                  goto ldv_57512;
  ldv_57512: 
#line 1741 
  ;
  
#line 1738 
  if ((adapter->flags & 8192U) != 0U) 
#line 1739 
                                      igb_configure_msix(adapter); else 
                                                                    
#line 1741 
                                                                    igb_assign_vector(adapter->q_vector[0],0);
  
#line 1744 
  igb_rd32(hw,192U);
  
#line 1745 
  igb_irq_enable(adapter);
  
#line 1748 
  if (adapter->vfs_allocated_count != 0U) {
    
#line 1749 
    u32 reg_data = igb_rd32(hw,24U);
    
#line 1751 
    reg_data |= 16384U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 1752 
        u8 *__var = (u8 *)0U;
        
#line 1752 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1752 
      u8 *hw_addr = *tmp_0;
      
#line 1752 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1752 
                                             writel(reg_data,(void volatile *)(hw_addr + 24U)); else ;
    }
  }
  else ;
  
#line 1755 
  netif_tx_start_all_queues(adapter->netdev);
  
#line 1758 
  hw->mac.get_link_status = (_Bool)1;
  
#line 1759 
  ldv_schedule_work_84(& adapter->watchdog_task);
  
#line 1761 
  if ((adapter->flags & 16384U) != 0U && ! hw->dev_spec._82575.eee_disable) 
    
#line 1763 
    adapter->eee_advert = (unsigned short)6U; else ;
  
#line 1765 
  __retres = 0;
  
#line 1765 
  return __retres;
}


#line 1768  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_down(struct igb_adapter *adapter)
{
  u32 tctl;
  u32 rctl;
  int i;
  int tmp_1;
  
#line 1770 
  struct net_device *netdev = adapter->netdev;
  
#line 1771 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1778 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1781 
  rctl = igb_rd32(hw,256U);
  {
    u8 * volatile *tmp;
    {
      
#line 1782 
      u8 *__var = (u8 *)0U;
      
#line 1782 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1782 
    u8 *hw_addr = *tmp;
    
#line 1782 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1782 
                                           writel(rctl & 4294967293U,(void volatile *)(hw_addr + 256U)); else ;
  }
  
#line 1785 
  netif_carrier_off(netdev);
  
#line 1786 
  netif_tx_stop_all_queues(netdev);
  
#line 1789 
  tctl = igb_rd32(hw,1024U);
  
#line 1790 
  tctl &= 4294967293U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 1791 
      u8 *__var_0 = (u8 *)0U;
      
#line 1791 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1791 
    u8 *hw_addr_0 = *tmp_0;
    
#line 1791 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1791 
                                             writel(tctl,(void volatile *)(hw_addr_0 + 1024U)); else ;
  }
  
#line 1793 
  igb_rd32(hw,8U);
  
#line 1794 
  usleep_range(10000UL,11000UL);
  
#line 1796 
  igb_irq_disable(adapter);
  
#line 1798 
  adapter->flags &= 4294966783U;
  
#line 1800 
  i = 0;
  
#line 1800 
  goto ldv_57532;
  ldv_57531: 
#line 1801 
  ;
  
#line 1801 
  if (adapter->q_vector[i] != (struct igb_q_vector *)0) {
    
#line 1802 
    napi_synchronize((struct napi_struct const *)(& (adapter->q_vector[i])->napi));
    
#line 1803 
    napi_disable(& (adapter->q_vector[i])->napi);
  }
  else ;
  
#line 1800 
  i += 1;
  ldv_57532: 
#line 1801 
  ;
  
#line 1800 
  if (adapter->num_q_vectors > (unsigned int)i) 
#line 1802 
                                                goto ldv_57531; else 
                                                                  
#line 1805 
                                                                  goto ldv_57533;
  ldv_57533: 
#line 1806 
  ;
  
#line 1807 
  ldv_del_timer_sync_85(& adapter->watchdog_timer);
  
#line 1808 
  ldv_del_timer_sync_86(& adapter->phy_info_timer);
  
#line 1811 
  ldv_spin_lock_87(& adapter->stats64_lock);
  
#line 1812 
  igb_update_stats(adapter,& adapter->stats64);
  
#line 1813 
  ldv_spin_unlock_88(& adapter->stats64_lock);
  
#line 1815 
  adapter->link_speed = (unsigned short)0U;
  
#line 1816 
  adapter->link_duplex = (unsigned short)0U;
  
#line 1818 
  tmp_1 = pci_channel_offline(adapter->pdev);
  
#line 1818 
  if (tmp_1 == 0) 
#line 1819 
                  igb_reset(adapter); else ;
  
#line 1820 
  igb_clean_all_tx_rings(adapter);
  
#line 1821 
  igb_clean_all_rx_rings(adapter);
  
#line 1825 
  igb_setup_dca(adapter);
  
#line 1826 
  return;
}


#line 1829  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_reinit_locked(struct igb_adapter *adapter)
{
  int tmp_0;
  {
    int tmp;
    
#line 1831 
    tmp = preempt_count();
    
#line 1831 
    int __ret_warn_on = ((unsigned long)tmp & 2096896UL) != 0UL;
    
#line 1831 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 1831 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c",1831); else ;
    
#line 1831 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 1832 
  goto ldv_57540;
  ldv_57539: 
#line 1833 
  ;
  
#line 1833 
  usleep_range(1000UL,2000UL);
  ldv_57540: 
#line 1834 
  ;
  
#line 1832 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 1832 
  if (tmp_0 != 0) 
#line 1834 
                  goto ldv_57539; else 
#line 1837 
                                       goto ldv_57541;
  ldv_57541: 
#line 1838 
  ;
  
#line 1834 
  igb_down(adapter);
  
#line 1835 
  igb_up(adapter);
  
#line 1836 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 1837 
  return;
}


#line 1843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_enable_mas(struct igb_adapter *adapter)
{
  
#line 1845 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1846 
  u32 connsw = igb_rd32(hw,52U);
  
#line 1849 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (connsw & 512U) == 0U) {
    
#line 1851 
    connsw |= 4U;
    
#line 1852 
    connsw |= 1U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 1853 
        u8 *__var = (u8 *)0U;
        
#line 1853 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1853 
      u8 *hw_addr = *tmp_0;
      
#line 1853 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1853 
                                             writel(connsw,(void volatile *)(hw_addr + 52U)); else ;
    }
    
#line 1854 
    igb_rd32(hw,8U);
  }
  else ;
  
#line 1856 
  return;
}


#line 1858  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_reset(struct igb_adapter *adapter)
{
  u32 tx_space;
  u32 min_tx_space;
  u32 min_rx_space;
  u32 hwm;
  u32 tmp_3;
  s32 tmp_7;
  int tmp_8;
  int tmp_10;
  bool tmp_9;
  
#line 1860 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1861 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1862 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1863 
  struct e1000_fc_info *fc = & hw->fc;
  
#line 1864 
  u32 pba = 0U;
  
#line 1869 
  switch ((unsigned int)mac->type) {
    u16 tmp;
    case (unsigned int)4: 
#line 1870 
    ;
    case (unsigned int)5: 
#line 1871 
    ;
    case (unsigned int)3: 
#line 1872 
    ;
    
#line 1873 
    pba = igb_rd32(hw,9220U);
    
#line 1874 
    tmp = igb_rxpbs_adjust_82580(pba);
    
#line 1874 
    pba = (unsigned int)tmp;
    
#line 1875 
    goto ldv_57565;
    case (unsigned int)2: 
#line 1876 
    ;
    
#line 1877 
    pba = igb_rd32(hw,9220U);
    
#line 1878 
    pba &= 127U;
    
#line 1879 
    goto ldv_57565;
    case (unsigned int)1: 
#line 1880 
    ;
    case (unsigned int)6: 
#line 1881 
    ;
    case (unsigned int)7: 
#line 1882 
    ;
    default: 
#line 1883 
    ;
    
#line 1884 
    pba = 34U;
    
#line 1885 
    goto ldv_57565;
  }
  ldv_57565: 
#line 1888 
  ;
  
#line 1888 
  if (adapter->max_frame_size > 1518U && mac->type <= (unsigned int)e1000_82575) {
    {
      u8 * volatile *tmp_0;
      {
        
#line 1891 
        u8 *__var = (u8 *)0U;
        
#line 1891 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1891 
      u8 *hw_addr = *tmp_0;
      
#line 1891 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1891 
                                             writel(pba,(void volatile *)(hw_addr + 4096U)); else ;
    }
    
#line 1900 
    pba = igb_rd32(hw,4096U);
    
#line 1902 
    tx_space = pba >> 16;
    
#line 1904 
    pba &= 65535U;
    
#line 1908 
    min_tx_space = (adapter->max_frame_size + 12U) * 2U;
    
#line 1911 
    min_tx_space = (min_tx_space + 1023U) & 4294966272U;
    
#line 1912 
    min_tx_space >>= 10;
    
#line 1914 
    min_rx_space = adapter->max_frame_size;
    
#line 1915 
    min_rx_space = (min_rx_space + 1023U) & 4294966272U;
    
#line 1916 
    min_rx_space >>= 10;
    
#line 1922 
    if (tx_space < min_tx_space && min_tx_space - tx_space < pba) {
      
#line 1924 
      pba = (tx_space - min_tx_space) + pba;
      
#line 1929 
      if (pba < min_rx_space) 
#line 1930 
                              pba = min_rx_space; else ;
    }
    else ;
    {
      u8 * volatile *tmp_1;
      {
        
#line 1932 
        u8 *__var_0 = (u8 *)0U;
        
#line 1932 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1932 
      u8 *hw_addr_0 = *tmp_1;
      
#line 1932 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1932 
                                               writel(pba,(void volatile *)(hw_addr_0 + 4096U)); else ;
    }
  }
  else ;
  {
    u32 tmp_2;
    
#line 1942 
    u32 _min1 = (pba * 9216U) / 10U;
    
#line 1942 
    u32 _min2 = (pba << 10) - adapter->max_frame_size * 2U;
    
#line 1942 
    if (_min1 < _min2) 
#line 1942 
                       tmp_2 = _min1; else 
#line 1942 
                                           tmp_2 = _min2;
    
#line 1942 
    tmp_3 = tmp_2;
  }
  
#line 1942 
  hwm = tmp_3;
  
#line 1945 
  fc->high_water = hwm & 4294967280U;
  
#line 1946 
  fc->low_water = fc->high_water + 4294967280U;
  
#line 1947 
  fc->pause_time = (unsigned short)65535U;
  
#line 1948 
  fc->send_xon = (_Bool)1;
  
#line 1949 
  fc->current_mode = fc->requested_mode;
  
#line 1952 
  if (adapter->vfs_allocated_count != 0U) {
    int i;
    
#line 1955 
    i = 0;
    
#line 1955 
    goto ldv_57582;
    ldv_57581: 
#line 1956 
    ;
    
#line 1956 
    (adapter->vf_data + i)->flags &= 8U;
    
#line 1955 
    i += 1;
    ldv_57582: 
#line 1956 
    ;
    
#line 1955 
    if (adapter->vfs_allocated_count > (unsigned int)i) 
#line 1957 
                                                        goto ldv_57581; else 
                                                                    
#line 1960 
                                                                    goto ldv_57583;
    ldv_57583: 
#line 1961 
    ;
    
#line 1959 
    igb_ping_all_vfs(adapter);
    {
      u8 * volatile *tmp_4;
      {
        
#line 1962 
        u8 *__var_1 = (u8 *)0U;
        
#line 1962 
        tmp_4 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1962 
      u8 *hw_addr_1 = *tmp_4;
      
#line 1962 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1962 
                                               writel(0U,(void volatile *)(hw_addr_1 + 3212U)); else ;
    }
    {
      u8 * volatile *tmp_5;
      {
        
#line 1963 
        u8 *__var_2 = (u8 *)0U;
        
#line 1963 
        tmp_5 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1963 
      u8 *hw_addr_2 = *tmp_5;
      
#line 1963 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1963 
                                               writel(0U,(void volatile *)(hw_addr_2 + 3216U)); else ;
    }
  }
  else ;
  
#line 1967 
  (*(hw->mac.ops.reset_hw))(hw);
  {
    u8 * volatile *tmp_6;
    {
      
#line 1968 
      u8 *__var_3 = (u8 *)0U;
      
#line 1968 
      tmp_6 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1968 
    u8 *hw_addr_3 = *tmp_6;
    
#line 1968 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1968 
                                             writel(0U,(void volatile *)(hw_addr_3 + 22528U)); else ;
  }
  
#line 1970 
  if ((adapter->flags & 1024U) != 0U) {
    
#line 1972 
    (*(adapter->ei.get_invariants))(hw);
    
#line 1973 
    adapter->flags &= 4294966271U;
  }
  else ;
  
#line 1975 
  if (mac->type == (unsigned int)e1000_82575 && (adapter->flags & 4096U) != 0U) 
    
#line 1977 
    igb_enable_mas(adapter); else ;
  
#line 1979 
  tmp_7 = (*(hw->mac.ops.init_hw))(hw);
  
#line 1979 
  if (tmp_7 != 0) 
#line 1980 
                  dev_err((struct device const *)(& pdev->dev),"Hardware Error\n"); else ;
  
#line 1985 
  if (! hw->mac.autoneg) 
#line 1986 
                         igb_force_mac_fc(hw); else ;
  
#line 1988 
  igb_init_dmac(adapter,pba);
  
#line 1991 
  tmp_8 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 1991 
  if (tmp_8 == 0) {
    
#line 1992 
    if (mac->type == (unsigned int)e1000_i350 && (unsigned int)hw->bus.func == 0U) {
      
#line 1996 
      if ((int)adapter->ets != 0) 
#line 1997 
                                  (*(mac->ops.init_thermal_sensor_thresh))(hw); else ;
    }
    else ;
  }
  else ;
  
#line 2002 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    
#line 2003 
    switch ((unsigned int)mac->type) {
      case (unsigned int)4: 
#line 2004 
      ;
      case (unsigned int)6: 
#line 2005 
      ;
      case (unsigned int)7: 
#line 2006 
      ;
      
#line 2007 
      igb_set_eee_i350(hw,(_Bool)1,(_Bool)1);
      
#line 2008 
      goto ldv_57596;
      case (unsigned int)5: 
#line 2009 
      ;
      
#line 2010 
      igb_set_eee_i354(hw,(_Bool)1,(_Bool)1);
      
#line 2011 
      goto ldv_57596;
      default: 
#line 2012 
      ;
      
#line 2013 
      goto ldv_57596;
    }
    ldv_57596: 
#line 2015 
    ;
  }
  else ;
  
#line 2016 
  tmp_9 = netif_running((struct net_device const *)adapter->netdev);
  
#line 2016 
  if (tmp_9) 
#line 2016 
             tmp_10 = 0; else 
#line 2016 
                              tmp_10 = 1;
  
#line 2016 
  if (tmp_10) 
#line 2017 
              igb_power_down_link(adapter); else ;
  
#line 2019 
  igb_update_mng_vlan(adapter);
  {
    u8 * volatile *tmp_11;
    {
      
#line 2022 
      u8 *__var_4 = (u8 *)0U;
      
#line 2022 
      tmp_11 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2022 
    u8 *hw_addr_4 = *tmp_11;
    
#line 2022 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 2022 
                                             writel(33024U,(void volatile *)(hw_addr_4 + 56U)); else ;
  }
  
#line 2025 
  igb_ptp_reset(adapter);
  
#line 2027 
  igb_get_phy_info(hw);
  
#line 2028 
  return;
}


#line 2030  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static netdev_features_t igb_fix_features(struct net_device *netdev, netdev_features_t features)
{
  
#line 2036 
  if ((features & 256ULL) != 0ULL) 
#line 2037 
                                   features |= 128ULL; else 
#line 2039 
                                                            features &= 18446744073709551487ULL;
  
#line 2041 
  return features;
}


#line 2044  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_features(struct net_device *netdev, netdev_features_t features)
{
  int __retres;
  bool tmp_0;
  
#line 2047 
  netdev_features_t changed = netdev->features ^ features;
  
#line 2048 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2050 
  if ((changed & 256ULL) != 0ULL) 
#line 2051 
                                  igb_vlan_mode(netdev,features); else ;
  
#line 2053 
  if ((changed & 274877906944ULL) == 0ULL) {
    
#line 2054 
    __retres = 0;
    
#line 2054 
    goto return_label;
  }
  else ;
  
#line 2056 
  netdev->features = features;
  
#line 2058 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 2058 
  if ((int)tmp_0 != 0) 
#line 2059 
                       igb_reinit_locked(adapter); else 
#line 2061 
                                                        igb_reset(adapter);
  
#line 2063 
  __retres = 0;
  return_label: 
#line 2063 
                return __retres;
}


#line 2066  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct net_device_ops const igb_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & igb_open, .ndo_stop = & igb_close, .ndo_start_xmit = & igb_xmit_frame, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & igb_set_rx_mode, .ndo_set_mac_address = & igb_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & igb_ioctl, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & igb_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & igb_tx_timeout, .ndo_get_stats64 = & igb_get_stats64, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = & igb_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & igb_vlan_rx_kill_vid, .ndo_poll_controller = & igb_netpoll, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = & igb_ndo_set_vf_mac, .ndo_set_vf_vlan = & igb_ndo_set_vf_vlan, .ndo_set_vf_rate = & igb_ndo_set_vf_bw, .ndo_set_vf_spoofchk = & igb_ndo_set_vf_spoofchk, .ndo_get_vf_config = & igb_ndo_get_vf_config, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = & igb_fix_features, .ndo_set_features = & igb_set_features, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = & passthru_features_check, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 2096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_set_fw_version(struct igb_adapter *adapter)
{
  struct e1000_fw_version fw;
  
#line 2098 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2101 
  igb_get_fw_version(hw,& fw);
  
#line 2103 
  switch ((unsigned int)hw->mac.type) {
    int tmp_0;
    bool tmp;
    case (unsigned int)6: 
#line 2104 
    ;
    case (unsigned int)7: 
#line 2105 
    ;
    
#line 2106 
    tmp = igb_get_flash_presence_i210(hw);
    
#line 2106 
    if (tmp) 
#line 2106 
             tmp_0 = 0; else 
#line 2106 
                             tmp_0 = 1;
    
#line 2106 
    if (tmp_0) {
      
#line 2107 
      snprintf((char *)(& adapter->fw_version),32UL,"%2d.%2d-%d",(int)fw.invm_major,(int)fw.invm_minor,(int)fw.invm_img_type);
      
#line 2112 
      goto ldv_57620;
    }
    else ;
    default: 
#line 2115 
    ;
    
#line 2117 
    if ((int)fw.or_valid != 0) 
#line 2118 
                               snprintf((char *)(& adapter->fw_version),32UL,"%d.%d, 0x%08x, %d.%d.%d",(int)fw.eep_major,(int)fw.eep_minor,fw.etrack_id,(int)fw.or_major,(int)fw.or_build,(int)fw.or_patch);
    else 
      
#line 2124 
      if (fw.etrack_id != 0U) 
#line 2125 
                              snprintf((char *)(& adapter->fw_version),32UL,"%d.%d, 0x%08x",(int)fw.eep_major,(int)fw.eep_minor,fw.etrack_id); else 
                                                                    
#line 2130 
                                                                    snprintf((char *)(& adapter->fw_version),32UL,"%d.%d.%d",(int)fw.eep_major,(int)fw.eep_minor,(int)fw.eep_build);
    
#line 2135 
    goto ldv_57620;
  }
  ldv_57620: 
#line 2137 
  ;
  
#line 2138 
  return;
}


#line 2144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_init_mas(struct igb_adapter *adapter)
{
  u16 eeprom_data;
  
#line 2146 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2149 
  (*(hw->nvm.ops.read))(hw,(unsigned short)3,(unsigned short)1,& eeprom_data);
  
#line 2150 
  switch ((int)hw->bus.func) {
    case 0: 
#line 2151 
    ;
    
#line 2152 
    if (((int)eeprom_data & 1) != 0) {
      
#line 2153 
      adapter->flags |= 4096U;
      
#line 2154 
      netdev_info((struct net_device const *)adapter->netdev,"MAS: Enabling Media Autosense for port %d\n",(int)hw->bus.func);
    }
    else ;
    
#line 2158 
    goto ldv_57628;
    case 1: 
#line 2159 
    ;
    
#line 2160 
    if (((int)eeprom_data & 2) != 0) {
      
#line 2161 
      adapter->flags |= 4096U;
      
#line 2162 
      netdev_info((struct net_device const *)adapter->netdev,"MAS: Enabling Media Autosense for port %d\n",(int)hw->bus.func);
    }
    else ;
    
#line 2166 
    goto ldv_57628;
    case 2: 
#line 2167 
    ;
    
#line 2168 
    if (((int)eeprom_data & 4) != 0) {
      
#line 2169 
      adapter->flags |= 4096U;
      
#line 2170 
      netdev_info((struct net_device const *)adapter->netdev,"MAS: Enabling Media Autosense for port %d\n",(int)hw->bus.func);
    }
    else ;
    
#line 2174 
    goto ldv_57628;
    case 3: 
#line 2175 
    ;
    
#line 2176 
    if (((int)eeprom_data & 8) != 0) {
      
#line 2177 
      adapter->flags |= 4096U;
      
#line 2178 
      netdev_info((struct net_device const *)adapter->netdev,"MAS: Enabling Media Autosense for port %d\n",(int)hw->bus.func);
    }
    else ;
    
#line 2182 
    goto ldv_57628;
    default: 
#line 2183 
    ;
    
#line 2185 
    netdev_err((struct net_device const *)adapter->netdev,"MAS: Invalid port configuration, returning\n");
    
#line 2187 
    goto ldv_57628;
  }
  ldv_57628: 
#line 2189 
  ;
  
#line 2190 
  return;
}


#line 2195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static s32 igb_init_i2c(struct igb_adapter *adapter)
{
  s32 __retres;
  
#line 2197 
  s32 status = 0;
  
#line 2200 
  if (adapter->hw.mac.type != (unsigned int)e1000_i350) {
    
#line 2201 
    __retres = 0;
    
#line 2201 
    goto return_label;
  }
  else ;
  
#line 2207 
  adapter->i2c_adap.owner = & __this_module;
  
#line 2208 
  adapter->i2c_algo = igb_i2c_algo;
  
#line 2209 
  adapter->i2c_algo.data = (void *)adapter;
  
#line 2210 
  adapter->i2c_adap.algo_data = (void *)(& adapter->i2c_algo);
  
#line 2211 
  adapter->i2c_adap.dev.parent = & (adapter->pdev)->dev;
  
#line 2212 
  strlcpy((char *)(& adapter->i2c_adap.name),"igb BB",48UL);
  
#line 2214 
  status = i2c_bit_add_bus(& adapter->i2c_adap);
  
#line 2215 
  __retres = status;
  return_label: 
#line 2215 
                return __retres;
}


#line 2229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_probe(struct pci_dev *pdev, struct pci_device_id const *ent)
{
  int __retres;
  struct net_device *netdev;
  struct igb_adapter *adapter;
  struct e1000_hw *hw;
  s32 ret_val;
  int global_quad_port_a;
  int err;
  int pci_using_dac;
  u8 part_str[11U];
  int tmp_0;
  u32 tmp_2_0;
  char const *tmp_4;
  s32 tmp_5;
  bool tmp_6;
  s32 tmp_10;
  int tmp_12;
  bool tmp_11;
  int tmp_19;
  char *tmp_28;
  s32 tmp_30;
  int tmp_31;
  
#line 2234 
  u16 eeprom_data = (unsigned short)0U;
  
#line 2237 
  struct e1000_info const *ei = igb_info_tbl[ent->driver_data];
  
#line 2244 
  if ((unsigned int)*((unsigned char *)pdev + 2531UL) != 0U) {
    {
      
#line 2245 
      int __ret_warn_on = 1;
      
#line 2245 
      if ((long)(__ret_warn_on != 0) != 0L) {
        char const *tmp;
        
#line 2245 
        ;
        
#line 2245 
        ;
        
#line 2245 
        tmp = pci_name((struct pci_dev const *)pdev);
        
#line 2245 
        warn_slowpath_fmt("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c",2246,"\001",tmp,(int)pdev->vendor,(int)pdev->device);
      }
      else ;
      
#line 2245 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    
#line 2247 
    __retres = -22;
    
#line 2247 
    goto return_label;
  }
  else ;
  
#line 2250 
  err = pci_enable_device_mem(pdev);
  
#line 2251 
  if (err != 0) {
    
#line 2252 
    __retres = err;
    
#line 2252 
    goto return_label;
  }
  else ;
  
#line 2254 
  pci_using_dac = 0;
  
#line 2255 
  err = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  
#line 2256 
  if (err == 0) 
#line 2257 
                pci_using_dac = 1;
  else {
    
#line 2259 
    err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    
#line 2260 
    if (err != 0) {
      
#line 2261 
      dev_err((struct device const *)(& pdev->dev),"No usable DMA configuration, aborting\n");
      
#line 2263 
      goto err_dma;
    }
    else ;
  }
  
#line 2267 
  tmp_0 = pci_select_bars(pdev,512UL);
  
#line 2267 
  ;
  
#line 2267 
  err = pci_request_selected_regions(pdev,tmp_0,(char const *)(& igb_driver_name));
  
#line 2270 
  if (err != 0) 
#line 2271 
                goto err_pci_reg; else ;
  
#line 2273 
  pci_enable_pcie_error_reporting(pdev);
  
#line 2275 
  pci_set_master(pdev);
  
#line 2276 
  pci_save_state(pdev);
  
#line 2278 
  err = -12;
  
#line 2279 
  netdev = ldv_alloc_etherdev_mqs_89(16384,8U,8U);
  
#line 2281 
  if (netdev == (struct net_device *)0) 
#line 2282 
                                        goto err_alloc_etherdev; else ;
  
#line 2284 
  netdev->dev.parent = & pdev->dev;
  
#line 2286 
  pci_set_drvdata(pdev,(void *)netdev);
  
#line 2287 
  adapter = (struct igb_adapter *)netdev_priv((struct net_device const *)netdev);
  
#line 2288 
  adapter->netdev = netdev;
  
#line 2289 
  adapter->pdev = pdev;
  
#line 2290 
  hw = & adapter->hw;
  
#line 2291 
  hw->back = (void *)adapter;
  
#line 2292 
  tmp_2_0 = netif_msg_init(debug,7);
  
#line 2292 
  adapter->msg_enable = (int)tmp_2_0;
  
#line 2294 
  err = -5;
  
#line 2295 
  hw->hw_addr = (u8 *)pci_iomap(pdev,0,0UL);
  
#line 2296 
  if (hw->hw_addr == (u8 *)0U) 
#line 2297 
                               goto err_ioremap; else ;
  
#line 2299 
  netdev->netdev_ops = & igb_netdev_ops;
  
#line 2300 
  igb_set_ethtool_ops(netdev);
  
#line 2301 
  netdev->watchdog_timeo = 1250;
  
#line 2303 
  tmp_4 = pci_name((struct pci_dev const *)pdev);
  
#line 2303 
  ;
  
#line 2303 
  strncpy((char *)(& netdev->name),tmp_4,15UL);
  
#line 2305 
  netdev->mem_start = (unsigned long)pdev->resource[0].start;
  
#line 2306 
  netdev->mem_end = (unsigned long)pdev->resource[0].end;
  
#line 2309 
  hw->vendor_id = pdev->vendor;
  
#line 2310 
  hw->device_id = pdev->device;
  
#line 2311 
  hw->revision_id = pdev->revision;
  
#line 2312 
  hw->subsystem_vendor_id = pdev->subsystem_vendor;
  
#line 2313 
  hw->subsystem_device_id = pdev->subsystem_device;
  
#line 2316 
  memcpy((void *)(& hw->mac.ops),(void const *)ei->mac_ops,96UL);
  
#line 2317 
  memcpy((void *)(& hw->phy.ops),(void const *)ei->phy_ops,120UL);
  
#line 2318 
  memcpy((void *)(& hw->nvm.ops),(void const *)ei->nvm_ops,56UL);
  
#line 2320 
  err = (*(ei->get_invariants))(hw);
  
#line 2321 
  if (err != 0) 
#line 2322 
                goto err_sw_init; else ;
  
#line 2325 
  err = igb_sw_init(adapter);
  
#line 2326 
  if (err != 0) 
#line 2327 
                goto err_sw_init; else ;
  
#line 2329 
  igb_get_bus_info_pcie(hw);
  
#line 2331 
  hw->phy.autoneg_wait_to_complete = (_Bool)0;
  
#line 2334 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    
#line 2335 
    hw->phy.mdix = (unsigned char)0U;
    
#line 2336 
    hw->phy.disable_polarity_correction = (_Bool)0;
    
#line 2337 
    hw->phy.ms_type = e1000_ms_hw_default;
  }
  else ;
  
#line 2340 
  tmp_5 = igb_check_reset_block(hw);
  
#line 2340 
  if (tmp_5 != 0) 
#line 2341 
                  _dev_info((struct device const *)(& pdev->dev),"PHY reset is blocked due to SOL/IDER session.\n"); else ;
  
#line 2348 
  netdev->features |= 25770918291ULL;
  
#line 2359 
  netdev->hw_features |= netdev->features;
  
#line 2360 
  netdev->hw_features |= 274877906944ULL;
  
#line 2363 
  netdev->features |= 512ULL;
  
#line 2365 
  netdev->vlan_features |= 1114131ULL;
  
#line 2371 
  netdev->priv_flags |= 524288U;
  
#line 2373 
  if (pci_using_dac != 0) {
    
#line 2374 
    netdev->features |= 32ULL;
    
#line 2375 
    netdev->vlan_features |= 32ULL;
  }
  else ;
  
#line 2378 
  if (hw->mac.type > (unsigned int)e1000_82575) {
    
#line 2379 
    netdev->hw_features |= 1073741824ULL;
    
#line 2380 
    netdev->features |= 1073741824ULL;
  }
  else ;
  
#line 2383 
  netdev->priv_flags |= 131072U;
  
#line 2385 
  tmp_6 = igb_enable_mng_pass_thru(hw);
  
#line 2385 
  adapter->en_mng_pt = (unsigned int)tmp_6;
  
#line 2390 
  (*(hw->mac.ops.reset_hw))(hw);
  
#line 2395 
  switch ((unsigned int)hw->mac.type) {
    bool tmp_8;
    s32 tmp_9;
    case (unsigned int)6: 
#line 2396 
    ;
    case (unsigned int)7: 
#line 2397 
    ;
    
#line 2398 
    tmp_8 = igb_get_flash_presence_i210(hw);
    
#line 2398 
    if ((int)tmp_8 != 0) {
      s32 tmp_7;
      
#line 2399 
      tmp_7 = (*(hw->nvm.ops.validate))(hw);
      
#line 2399 
      if (tmp_7 < 0) {
        
#line 2400 
        dev_err((struct device const *)(& pdev->dev),"The NVM Checksum Is Not Valid\n");
        
#line 2402 
        err = -5;
        
#line 2403 
        goto err_eeprom;
      }
      else ;
    }
    else ;
    
#line 2406 
    goto ldv_57661;
    default: 
#line 2407 
    ;
    
#line 2408 
    tmp_9 = (*(hw->nvm.ops.validate))(hw);
    
#line 2408 
    if (tmp_9 < 0) {
      
#line 2409 
      dev_err((struct device const *)(& pdev->dev),"The NVM Checksum Is Not Valid\n");
      
#line 2410 
      err = -5;
      
#line 2411 
      goto err_eeprom;
    }
    else ;
    
#line 2413 
    goto ldv_57661;
  }
  ldv_57661: 
#line 2417 
  ;
  
#line 2417 
  tmp_10 = (*(hw->mac.ops.read_mac_addr))(hw);
  
#line 2417 
  if (tmp_10 != 0) 
#line 2418 
                   dev_err((struct device const *)(& pdev->dev),"NVM Read Error\n"); else ;
  
#line 2420 
  memcpy((void *)netdev->dev_addr,(void const *)(& hw->mac.addr),(unsigned long)netdev->addr_len);
  
#line 2422 
  tmp_11 = is_valid_ether_addr((u8 const *)netdev->dev_addr);
  
#line 2422 
  if (tmp_11) 
#line 2422 
              tmp_12 = 0; else 
#line 2422 
                               tmp_12 = 1;
  
#line 2422 
  if (tmp_12) {
    
#line 2423 
    dev_err((struct device const *)(& pdev->dev),"Invalid MAC Address\n");
    
#line 2424 
    err = -5;
    
#line 2425 
    goto err_eeprom;
  }
  else ;
  
#line 2429 
  igb_set_fw_version(adapter);
  
#line 2432 
  if (hw->mac.type == (unsigned int)e1000_i210) {
    {
      u8 * volatile *tmp_13;
      {
        
#line 2433 
        u8 *__var = (u8 *)0U;
        
#line 2433 
        tmp_13 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 2433 
      u8 *hw_addr = *tmp_13;
      
#line 2433 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2433 
                                             writel(162U,(void volatile *)(hw_addr + 9220U)); else ;
    }
    {
      u8 * volatile *tmp_14;
      {
        
#line 2434 
        u8 *__var_0 = (u8 *)0U;
        
#line 2434 
        tmp_14 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 2434 
      u8 *hw_addr_0 = *tmp_14;
      
#line 2434 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 2434 
                                               writel(67108884U,(void volatile *)(hw_addr_0 + 13316U)); else ;
    }
  }
  else ;
  {
    struct lock_class_key __key;
    
#line 2437 
    init_timer_key(& adapter->watchdog_timer,0U,"((&adapter->watchdog_timer))",& __key);
  }
  
#line 2437 
  adapter->watchdog_timer.function = & igb_watchdog;
  
#line 2437 
  adapter->watchdog_timer.data = (unsigned long)adapter;
  {
    struct lock_class_key __key_0;
    
#line 2439 
    init_timer_key(& adapter->phy_info_timer,0U,"((&adapter->phy_info_timer))",& __key_0);
  }
  
#line 2439 
  adapter->phy_info_timer.function = & igb_update_phy_info;
  
#line 2439 
  adapter->phy_info_timer.data = (unsigned long)adapter;
  {
    struct lock_class_key __key_1;
    
#line 2442 
    __init_work(& adapter->reset_task,0);
    
#line 2442 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 2442 
    adapter->reset_task.data = __constr_expr_37;
    
#line 2442 
    lockdep_init_map(& adapter->reset_task.lockdep_map,"(&adapter->reset_task)",& __key_1,0);
    
#line 2442 
    INIT_LIST_HEAD(& adapter->reset_task.entry);
    
#line 2442 
    adapter->reset_task.func = & igb_reset_task;
  }
  {
    struct lock_class_key __key_2;
    
#line 2443 
    __init_work(& adapter->watchdog_task,0);
    
#line 2443 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 2443 
    adapter->watchdog_task.data = __constr_expr_38;
    
#line 2443 
    lockdep_init_map(& adapter->watchdog_task.lockdep_map,"(&adapter->watchdog_task)",& __key_2,0);
    
#line 2443 
    INIT_LIST_HEAD(& adapter->watchdog_task.entry);
    
#line 2443 
    adapter->watchdog_task.func = & igb_watchdog_task;
  }
  
#line 2446 
  adapter->fc_autoneg = (_Bool)1;
  
#line 2447 
  hw->mac.autoneg = (_Bool)1;
  
#line 2448 
  hw->phy.autoneg_advertised = (unsigned short)47U;
  
#line 2450 
  hw->fc.requested_mode = e1000_fc_default;
  
#line 2451 
  hw->fc.current_mode = e1000_fc_default;
  
#line 2453 
  igb_validate_mdi_setting(hw);
  
#line 2456 
  if ((unsigned int)hw->bus.func == 0U) 
#line 2457 
                                        adapter->flags |= 256U; else ;
  
#line 2460 
  if (hw->mac.type > (unsigned int)e1000_82576) {
    unsigned int tmp_15;
    
#line 2461 
    if ((unsigned int)hw->bus.func != 0U) 
#line 2461 
                                          tmp_15 = ((unsigned int)hw->bus.func + 1U) * 64U + 36U; else 
                                                                    
#line 2461 
                                                                    tmp_15 = 36U;
    
#line 2461 
    ;
    
#line 2461 
    (*(hw->nvm.ops.read))(hw,(unsigned short)((int)tmp_15),(unsigned short)1,& eeprom_data);
  }
  else 
    
#line 2464 
    if ((unsigned int)hw->bus.func == 1U) 
#line 2465 
                                          (*(hw->nvm.ops.read))(hw,(unsigned short)20,(unsigned short)1,& eeprom_data); else ;
  
#line 2467 
  if (((int)eeprom_data & 1024) != 0) 
#line 2468 
                                      adapter->flags |= 256U; else ;
  
#line 2474 
  switch ((int)pdev->device) {
    u32 tmp_16;
    int tmp_18;
    bool tmp_17;
    case 4310: 
#line 2475 
    ;
    
#line 2476 
    adapter->flags &= 4294967039U;
    
#line 2477 
    goto ldv_57676;
    case 4265: 
#line 2478 
    ;
    case 4326: 
#line 2479 
    ;
    case 4327: 
#line 2480 
    ;
    
#line 2484 
    tmp_16 = igb_rd32(hw,8U);
    
#line 2484 
    if ((tmp_16 & 4U) != 0U) 
#line 2485 
                             adapter->flags &= 4294967039U; else ;
    
#line 2486 
    goto ldv_57676;
    case 4328: 
#line 2487 
    ;
    case 5414: 
#line 2488 
    ;
    
#line 2490 
    if (global_quad_port_a != 0) 
#line 2491 
                                 adapter->flags &= 4294967039U; else 
                                                                  
#line 2493 
                                                                  adapter->flags |= 4U;
    
#line 2495 
    global_quad_port_a += 1;
    
#line 2495 
    if (global_quad_port_a == 4) 
#line 2496 
                                 global_quad_port_a = 0; else ;
    
#line 2497 
    goto ldv_57676;
    default: 
#line 2498 
    ;
    
#line 2500 
    tmp_17 = device_can_wakeup(& (adapter->pdev)->dev);
    
#line 2500 
    if (tmp_17) 
#line 2500 
                tmp_18 = 0; else 
#line 2500 
                                 tmp_18 = 1;
    
#line 2500 
    if (tmp_18) 
#line 2501 
                adapter->flags &= 4294967039U; else ;
  }
  ldv_57676: 
#line 2505 
  ;
  
#line 2505 
  if ((adapter->flags & 256U) != 0U) 
#line 2506 
                                     adapter->wol |= 2U; else ;
  
#line 2509 
  if (hw->mac.type == (unsigned int)e1000_i350 && (unsigned int)pdev->subsystem_vendor == 4156U) {
    
#line 2511 
    adapter->flags |= 256U;
    
#line 2512 
    adapter->wol = 0U;
  }
  else ;
  
#line 2515 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)((adapter->flags & 256U) != 0U));
  
#line 2519 
  igb_reset(adapter);
  
#line 2522 
  err = igb_init_i2c(adapter);
  
#line 2523 
  if (err != 0) {
    
#line 2524 
    dev_err((struct device const *)(& pdev->dev),"failed to init i2c interface\n");
    
#line 2525 
    goto err_eeprom;
  }
  else ;
  
#line 2531 
  igb_get_hw_control(adapter);
  
#line 2533 
  strcpy((char *)(& netdev->name),"eth%d");
  
#line 2534 
  err = ldv_register_netdev_90(netdev);
  
#line 2535 
  if (err != 0) 
#line 2536 
                goto err_register; else ;
  
#line 2539 
  netif_carrier_off(netdev);
  
#line 2542 
  tmp_19 = dca_add_requester(& pdev->dev);
  
#line 2542 
  if (tmp_19 == 0) {
    
#line 2543 
    adapter->flags |= 2U;
    
#line 2544 
    _dev_info((struct device const *)(& pdev->dev),"DCA enabled\n");
    
#line 2545 
    igb_setup_dca(adapter);
  }
  else ;
  
#line 2551 
  if (hw->mac.type == (unsigned int)e1000_i350 && (unsigned int)hw->bus.func == 0U) {
    u16 ets_word;
    int tmp_20;
    
#line 2557 
    (*(hw->nvm.ops.read))(hw,(unsigned short)62,(unsigned short)1,& ets_word);
    
#line 2558 
    if ((unsigned int)ets_word + 65535U <= 65533U) 
#line 2559 
                                                   adapter->ets = (_Bool)1; else 
                                                                    
#line 2561 
                                                                    adapter->ets = (_Bool)0;
    
#line 2562 
    tmp_20 = igb_sysfs_init(adapter);
    
#line 2562 
    if (tmp_20 != 0) 
#line 2563 
                     dev_err((struct device const *)(& pdev->dev),"failed to allocate sysfs resources\n"); else ;
  }
  else 
#line 2566 
       adapter->ets = (_Bool)0;
  
#line 2570 
  adapter->ei = *ei;
  
#line 2571 
  if ((int)hw->dev_spec._82575.mas_capable != 0) 
#line 2572 
                                                 igb_init_mas(adapter); else ;
  
#line 2575 
  igb_ptp_init(adapter);
  
#line 2577 
  _dev_info((struct device const *)(& pdev->dev),"Intel(R) Gigabit Ethernet Network Connection\n");
  
#line 2579 
  if (hw->mac.type != (unsigned int)e1000_i354) {
    char *tmp_23;
    char *tmp_25;
    
#line 2580 
    ;
    
#line 2580 
    if (hw->bus.width != (unsigned int)e1000_bus_width_pcie_x4) {
      char *tmp_22;
      
#line 2580 
      if (hw->bus.width != (unsigned int)e1000_bus_width_pcie_x2) {
        char *tmp_21;
        
#line 2580 
        if (hw->bus.width == (unsigned int)e1000_bus_width_pcie_x1) 
#line 2580 
                                                                    tmp_21 = (char *)"Width x1"; else 
                                                                    
#line 2580 
                                                                    tmp_21 = (char *)"unknown";
        
#line 2580 
        tmp_22 = tmp_21;
      }
      else 
#line 2580 
           tmp_22 = (char *)"Width x2";
      
#line 2580 
      tmp_23 = tmp_22;
    }
    else 
#line 2580 
         tmp_23 = (char *)"Width x4";
    
#line 2580 
    if (hw->bus.speed != (unsigned int)e1000_bus_speed_2500) {
      char *tmp_24;
      
#line 2580 
      if (hw->bus.speed == (unsigned int)e1000_bus_speed_5000) 
#line 2580 
                                                               tmp_24 = (char *)"5.0Gb/s"; else 
                                                                    
#line 2580 
                                                                    tmp_24 = (char *)"unknown";
      
#line 2580 
      tmp_25 = tmp_24;
    }
    else 
#line 2580 
         tmp_25 = (char *)"2.5Gb/s";
    
#line 2580 
    ;
    
#line 2580 
    ;
    
#line 2580 
    _dev_info((struct device const *)(& pdev->dev),"%s: (PCIe:%s:%s) %pM\n",(char *)(& netdev->name),tmp_25,tmp_23,netdev->dev_addr);
  }
  else ;
  
#line 2593 
  if (hw->mac.type > (unsigned int)e1000_i354) 
#line 2593 
                                               goto _LOR;
  else {
    bool tmp_26;
    
#line 2593 
    tmp_26 = igb_get_flash_presence_i210(hw);
    
#line 2593 
    if ((int)tmp_26 != 0) _LOR: 
#line 2595 
                                ret_val = igb_read_part_string(hw,(u8 *)(& part_str),11U); else 
                                                                    
#line 2598 
                                                                    ret_val = -19;
  }
  
#line 2601 
  if (ret_val != 0) 
#line 2602 
                    strcpy((char *)(& part_str),"Unknown"); else ;
  
#line 2603 
  _dev_info((struct device const *)(& pdev->dev),"%s: PBA No: %s\n",(char *)(& netdev->name),(u8 *)(& part_str));
  
#line 2604 
  ;
  
#line 2604 
  ;
  
#line 2604 
  if ((adapter->flags & 8192U) == 0U) {
    char *tmp_27;
    
#line 2604 
    if ((adapter->flags & 1U) != 0U) 
#line 2604 
                                     tmp_27 = (char *)"MSI"; else 
#line 2604 
                                                                  tmp_27 = (char *)"legacy";
    
#line 2604 
    tmp_28 = tmp_27;
  }
  else 
#line 2604 
       tmp_28 = (char *)"MSI-X";
  
#line 2604 
  ;
  
#line 2604 
  _dev_info((struct device const *)(& pdev->dev),"Using %s interrupts. %d rx queue(s), %d tx queue(s)\n",tmp_28,adapter->num_rx_queues,adapter->num_tx_queues);
  
#line 2609 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    
#line 2610 
    switch ((unsigned int)hw->mac.type) {
      u32 tmp_29;
      case (unsigned int)4: 
#line 2611 
      ;
      case (unsigned int)6: 
#line 2612 
      ;
      case (unsigned int)7: 
#line 2613 
      ;
      
#line 2615 
      err = igb_set_eee_i350(hw,(_Bool)1,(_Bool)1);
      
#line 2616 
      if (err == 0 && ! hw->dev_spec._82575.eee_disable) {
        
#line 2618 
        adapter->eee_advert = (unsigned short)6U;
        
#line 2620 
        adapter->flags |= 16384U;
      }
      else ;
      
#line 2622 
      goto ldv_57688;
      case (unsigned int)5: 
#line 2623 
      ;
      
#line 2624 
      tmp_29 = igb_rd32(hw,24U);
      
#line 2624 
      if ((tmp_29 & 8388608U) != 0U) {
        
#line 2626 
        err = igb_set_eee_i354(hw,(_Bool)1,(_Bool)1);
        
#line 2627 
        if (err == 0 && ! hw->dev_spec._82575.eee_disable) {
          
#line 2629 
          adapter->eee_advert = (unsigned short)6U;
          
#line 2631 
          adapter->flags |= 16384U;
        }
        else ;
      }
      else ;
      
#line 2634 
      goto ldv_57688;
      default: 
#line 2635 
      ;
      
#line 2636 
      goto ldv_57688;
    }
    ldv_57688: 
#line 2638 
    ;
  }
  else ;
  
#line 2639 
  pm_runtime_put_noidle(& pdev->dev);
  
#line 2640 
  __retres = 0;
  
#line 2640 
  goto return_label;
  err_register: 
#line 2642 
  ;
  
#line 2643 
  igb_release_hw_control(adapter);
  
#line 2644 
  memset((void *)(& adapter->i2c_adap),0,1936UL);
  err_eeprom: 
#line 2645 
  ;
  
#line 2646 
  tmp_30 = igb_check_reset_block(hw);
  
#line 2646 
  if (tmp_30 == 0) 
#line 2647 
                   igb_reset_phy(hw); else ;
  
#line 2649 
  if (hw->flash_address != (u8 *)0U) 
#line 2650 
                                     iounmap((void volatile *)hw->flash_address); else ;
  err_sw_init: 
#line 2651 
  ;
  
#line 2652 
  igb_clear_interrupt_scheme(adapter);
  
#line 2653 
  pci_iounmap(pdev,(void *)hw->hw_addr);
  err_ioremap: 
#line 2654 
  ;
  
#line 2655 
  ldv_free_netdev_91(netdev);
  err_alloc_etherdev: 
#line 2656 
  ;
  
#line 2657 
  tmp_31 = pci_select_bars(pdev,512UL);
  
#line 2657 
  ;
  
#line 2657 
  pci_release_selected_regions(pdev,tmp_31);
  err_pci_reg: 
#line 2659 
  ;
  err_dma: 
#line 2660 
  ;
  
#line 2661 
  pci_disable_device(pdev);
  
#line 2662 
  __retres = err;
  return_label: 
#line 2662 
                return __retres;
}


#line 2666  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_disable_sriov(struct pci_dev *pdev)
{
  int __retres;
  
#line 2668 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 2669 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2670 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2673 
  if (adapter->vf_data != (struct vf_data_storage *)0) {
    int tmp_1;
    
#line 2675 
    tmp_1 = pci_vfs_assigned(pdev);
    
#line 2675 
    if (tmp_1 != 0) {
      
#line 2676 
      dev_warn((struct device const *)(& pdev->dev),"Cannot deallocate SR-IOV virtual functions while they are assigned - VFs will not be deallocated\n");
      
#line 2678 
      __retres = -1;
      
#line 2678 
      goto return_label;
    }
    else {
      
#line 2680 
      pci_disable_sriov(pdev);
      
#line 2681 
      msleep(500U);
    }
    
#line 2684 
    kfree((void const *)adapter->vf_data);
    
#line 2685 
    adapter->vf_data = (struct vf_data_storage *)0;
    
#line 2686 
    adapter->vfs_allocated_count = 0U;
    {
      u8 * volatile *tmp_2;
      {
        
#line 2687 
        u8 *__var = (u8 *)0U;
        
#line 2687 
        tmp_2 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 2687 
      u8 *hw_addr = *tmp_2;
      
#line 2687 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2687 
                                             writel(1U,(void volatile *)(hw_addr + 23484U)); else ;
    }
    
#line 2688 
    igb_rd32(hw,8U);
    
#line 2689 
    msleep(100U);
    
#line 2690 
    _dev_info((struct device const *)(& pdev->dev),"IOV Disabled\n");
    
#line 2693 
    adapter->flags |= 16U;
  }
  else ;
  
#line 2696 
  __retres = 0;
  return_label: 
#line 2696 
                return __retres;
}


#line 2699  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_enable_sriov(struct pci_dev *pdev, int num_vfs)
{
  int i;
  
#line 2701 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 2702 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2703 
  int old_vfs = pci_num_vf(pdev);
  
#line 2704 
  int err = 0;
  
#line 2707 
  if ((adapter->flags & 8192U) == 0U || num_vfs > 7) {
    
#line 2708 
    err = -1;
    
#line 2709 
    goto out;
  }
  else ;
  
#line 2711 
  if (num_vfs == 0) 
#line 2712 
                    goto out; else ;
  
#line 2714 
  if (old_vfs != 0) {
    
#line 2715 
    _dev_info((struct device const *)(& pdev->dev),"%d pre-allocated VFs found - override max_vfs setting of %d\n",old_vfs,max_vfs);
    
#line 2717 
    adapter->vfs_allocated_count = (unsigned int)old_vfs;
  }
  else 
#line 2719 
       adapter->vfs_allocated_count = (unsigned int)num_vfs;
  
#line 2721 
  adapter->vf_data = (struct vf_data_storage *)kcalloc((unsigned long)adapter->vfs_allocated_count,96UL,208U);
  
#line 2725 
  if (adapter->vf_data == (struct vf_data_storage *)0) {
    
#line 2726 
    adapter->vfs_allocated_count = 0U;
    
#line 2727 
    dev_err((struct device const *)(& pdev->dev),"Unable to allocate memory for VF Data Storage\n");
    
#line 2729 
    err = -12;
    
#line 2730 
    goto out;
  }
  else ;
  
#line 2734 
  if (old_vfs == 0) {
    
#line 2735 
    err = pci_enable_sriov(pdev,(int)adapter->vfs_allocated_count);
    
#line 2736 
    if (err != 0) 
#line 2737 
                  goto err_out; else ;
  }
  else ;
  
#line 2739 
  _dev_info((struct device const *)(& pdev->dev),"%d VFs allocated\n",adapter->vfs_allocated_count);
  
#line 2741 
  i = 0;
  
#line 2741 
  goto ldv_57712;
  ldv_57711: 
#line 2742 
  ;
  
#line 2742 
  igb_vf_configure(adapter,i);
  
#line 2741 
  i += 1;
  ldv_57712: 
#line 2742 
  ;
  
#line 2741 
  if (adapter->vfs_allocated_count > (unsigned int)i) 
#line 2743 
                                                      goto ldv_57711; else 
                                                                    
#line 2746 
                                                                    goto ldv_57713;
  ldv_57713: 
#line 2747 
  ;
  
#line 2745 
  adapter->flags &= 4294967279U;
  
#line 2746 
  goto out;
  err_out: 
#line 2748 
  ;
  
#line 2749 
  kfree((void const *)adapter->vf_data);
  
#line 2750 
  adapter->vf_data = (struct vf_data_storage *)0;
  
#line 2751 
  adapter->vfs_allocated_count = 0U;
  out: 
#line 2752 
  ;
  
#line 2753 
  return err;
}


#line 2761  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_remove_i2c(struct igb_adapter *adapter)
{
  
#line 2764 
  i2c_del_adapter(& adapter->i2c_adap);
  
#line 2765 
  return;
}


#line 2776  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_remove(struct pci_dev *pdev)
{
  int tmp_2;
  
#line 2778 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 2779 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2780 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2782 
  pm_runtime_get_noresume(& pdev->dev);
  
#line 2784 
  igb_sysfs_exit(adapter);
  
#line 2786 
  igb_remove_i2c(adapter);
  
#line 2787 
  igb_ptp_stop(adapter);
  
#line 2791 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 2792 
  ldv_del_timer_sync_92(& adapter->watchdog_timer);
  
#line 2793 
  ldv_del_timer_sync_93(& adapter->phy_info_timer);
  
#line 2795 
  cancel_work_sync(& adapter->reset_task);
  
#line 2796 
  cancel_work_sync(& adapter->watchdog_task);
  
#line 2799 
  if ((adapter->flags & 2U) != 0U) {
    
#line 2800 
    _dev_info((struct device const *)(& pdev->dev),"DCA disabled\n");
    
#line 2801 
    dca_remove_requester(& pdev->dev);
    
#line 2802 
    adapter->flags &= 4294967293U;
    {
      u8 * volatile *tmp_1;
      {
        
#line 2803 
        u8 *__var = (u8 *)0U;
        
#line 2803 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 2803 
      u8 *hw_addr = *tmp_1;
      
#line 2803 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2803 
                                             writel(1U,(void volatile *)(hw_addr + 23412U)); else ;
    }
  }
  else ;
  
#line 2810 
  igb_release_hw_control(adapter);
  
#line 2812 
  ldv_unregister_netdev_94(netdev);
  
#line 2814 
  igb_clear_interrupt_scheme(adapter);
  
#line 2817 
  igb_disable_sriov(pdev);
  
#line 2820 
  pci_iounmap(pdev,(void *)hw->hw_addr);
  
#line 2821 
  if (hw->flash_address != (u8 *)0U) 
#line 2822 
                                     iounmap((void volatile *)hw->flash_address); else ;
  
#line 2823 
  tmp_2 = pci_select_bars(pdev,512UL);
  
#line 2823 
  ;
  
#line 2823 
  pci_release_selected_regions(pdev,tmp_2);
  
#line 2826 
  kfree((void const *)adapter->shadow_vfta);
  
#line 2827 
  ldv_free_netdev_95(netdev);
  
#line 2829 
  pci_disable_pcie_error_reporting(pdev);
  
#line 2831 
  pci_disable_device(pdev);
  
#line 2832 
  return;
}


#line 2843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_probe_vfs(struct igb_adapter *adapter)
{
  
#line 2846 
  struct pci_dev *pdev = adapter->pdev;
  
#line 2847 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2850 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U) 
#line 2851 
                                                      goto return_label; else ;
  
#line 2853 
  pci_sriov_set_totalvfs(pdev,(unsigned short)7);
  
#line 2854 
  igb_enable_sriov(pdev,(int)max_vfs);
  return_label: 
#line 2855 
                return;
}


#line 2859  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_init_queue_configuration(struct igb_adapter *adapter)
{
  u32 max_rss_queues;
  u32 tmp_1;
  
#line 2861 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2865 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)7: 
#line 2866 
    ;
    
#line 2867 
    max_rss_queues = 2U;
    
#line 2868 
    goto ldv_57737;
    case (unsigned int)1: 
#line 2869 
    ;
    case (unsigned int)6: 
#line 2870 
    ;
    
#line 2871 
    max_rss_queues = 4U;
    
#line 2872 
    goto ldv_57737;
    case (unsigned int)4: 
#line 2873 
    ;
    
#line 2875 
    if (adapter->vfs_allocated_count != 0U) {
      
#line 2876 
      max_rss_queues = 1U;
      
#line 2877 
      goto ldv_57737;
    }
    else ;
    case (unsigned int)2: 
#line 2880 
    ;
    
#line 2881 
    if (adapter->vfs_allocated_count != 0U) {
      
#line 2882 
      max_rss_queues = 2U;
      
#line 2883 
      goto ldv_57737;
    }
    else ;
    case (unsigned int)3: 
#line 2886 
    ;
    case (unsigned int)5: 
#line 2887 
    ;
    default: 
#line 2888 
    ;
    
#line 2889 
    max_rss_queues = 8U;
    
#line 2890 
    goto ldv_57737;
  }
  ldv_57737: 
#line 2893 
  ;
  {
    u32 tmp_0;
    
#line 2893 
    u32 __min1 = max_rss_queues;
    
#line 2893 
    u32 __min2 = cpumask_weight(cpu_online_mask);
    
#line 2893 
    if (__min1 < __min2) 
#line 2893 
                         tmp_0 = __min1; else 
#line 2893 
                                              tmp_0 = __min2;
    
#line 2893 
    tmp_1 = tmp_0;
  }
  
#line 2893 
  adapter->rss_queues = tmp_1;
  
#line 2895 
  igb_set_flag_queue_pairs(adapter,max_rss_queues);
  
#line 2896 
  return;
}


#line 2898  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_set_flag_queue_pairs(struct igb_adapter *adapter, u32 const max_rss_queues)
{
  
#line 2901 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2904 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 2905 
    ;
    case (unsigned int)7: 
#line 2906 
    ;
    
#line 2908 
    goto ldv_57755;
    case (unsigned int)2: 
#line 2909 
    ;
    
#line 2914 
    if (adapter->rss_queues > 1U && adapter->vfs_allocated_count > 6U) 
      
#line 2916 
      adapter->flags |= 8U; else ;
    case (unsigned int)3: 
#line 2918 
    ;
    case (unsigned int)4: 
#line 2919 
    ;
    case (unsigned int)5: 
#line 2920 
    ;
    case (unsigned int)6: 
#line 2921 
    ;
    default: 
#line 2922 
    ;
    
#line 2926 
    if (adapter->rss_queues > max_rss_queues / 2U) 
#line 2927 
                                                   adapter->flags |= 8U; else ;
    
#line 2928 
    goto ldv_57755;
  }
  ldv_57755: 
#line 2930 
  ;
  
#line 2931 
  return;
}


#line 2940  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_sw_init(struct igb_adapter *adapter)
{
  int __retres;
  int tmp_1;
  
#line 2942 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2943 
  struct net_device *netdev = adapter->netdev;
  
#line 2944 
  struct pci_dev *pdev = adapter->pdev;
  
#line 2946 
  pci_read_config_word((struct pci_dev const *)pdev,4,& hw->bus.pci_cmd_word);
  
#line 2949 
  adapter->tx_ring_count = (unsigned short)256U;
  
#line 2950 
  adapter->rx_ring_count = (unsigned short)256U;
  
#line 2953 
  adapter->rx_itr_setting = 3U;
  
#line 2954 
  adapter->tx_itr_setting = 3U;
  
#line 2957 
  adapter->tx_work_limit = (unsigned short)128U;
  
#line 2959 
  adapter->max_frame_size = netdev->mtu + 22U;
  
#line 2961 
  adapter->min_frame_size = 64U;
  
#line 2963 
  spinlock_check(& adapter->stats64_lock);
  {
    struct lock_class_key __key;
    
#line 2963 
    __raw_spin_lock_init(& adapter->stats64_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->stats64_lock)->rlock",& __key);
  }
  
#line 2965 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 2966 
    ;
    case (unsigned int)4: 
#line 2967 
    ;
    
#line 2968 
    if (max_vfs > 7U) {
      unsigned int tmp;
      
#line 2969 
      dev_warn((struct device const *)(& pdev->dev),"Maximum of 7 VFs per PF, using max\n");
      
#line 2971 
      tmp = 7U;
      
#line 2971 
      adapter->vfs_allocated_count = tmp;
      
#line 2971 
      max_vfs = tmp;
    }
    else 
#line 2973 
         adapter->vfs_allocated_count = max_vfs;
    
#line 2974 
    if (adapter->vfs_allocated_count != 0U) 
#line 2975 
                                            dev_warn((struct device const *)(& pdev->dev),"Enabling SR-IOV VFs using the module parameter is deprecated - please use the pci sysfs interface.\n"); else ;
    
#line 2977 
    goto ldv_57771;
    default: 
#line 2978 
    ;
    
#line 2979 
    goto ldv_57771;
  }
  ldv_57771: 
#line 2983 
  ;
  
#line 2983 
  igb_init_queue_configuration(adapter);
  
#line 2986 
  adapter->shadow_vfta = (u32 *)kcalloc(128UL,4UL,32U);
  
#line 2990 
  tmp_1 = igb_init_interrupt_scheme(adapter,(_Bool)1);
  
#line 2990 
  if (tmp_1 != 0) {
    
#line 2991 
    dev_err((struct device const *)(& pdev->dev),"Unable to allocate memory for queues\n");
    
#line 2992 
    __retres = -12;
    
#line 2992 
    goto return_label;
  }
  else ;
  
#line 2995 
  igb_probe_vfs(adapter);
  
#line 2998 
  igb_irq_disable(adapter);
  
#line 3000 
  if (hw->mac.type > (unsigned int)e1000_82580) 
#line 3001 
                                                adapter->flags &= 4294967279U; else ;
  
#line 3003 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 3004 
  __retres = 0;
  return_label: 
#line 3004 
                return __retres;
}


#line 3019  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_open(struct net_device *netdev, bool resuming)
{
  int __retres;
  int err;
  int i;
  int tmp_0;
  
#line 3021 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3022 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3023 
  struct pci_dev *pdev = adapter->pdev;
  
#line 3028 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
  
#line 3028 
  if (tmp_0 != 0) {
    {
      
#line 3029 
      int __ret_warn_on = (int)resuming != 0;
      
#line 3029 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 3029 
                                            warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c",3029); else ;
      
#line 3029 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    
#line 3030 
    __retres = -16;
    
#line 3030 
    goto return_label;
  }
  else ;
  
#line 3033 
  if (! resuming) 
#line 3034 
                  pm_runtime_get_sync(& pdev->dev); else ;
  
#line 3036 
  netif_carrier_off(netdev);
  
#line 3039 
  err = igb_setup_all_tx_resources(adapter);
  
#line 3040 
  if (err != 0) 
#line 3041 
                goto err_setup_tx; else ;
  
#line 3044 
  err = igb_setup_all_rx_resources(adapter);
  
#line 3045 
  if (err != 0) 
#line 3046 
                goto err_setup_rx; else ;
  
#line 3048 
  igb_power_up_link(adapter);
  
#line 3055 
  igb_configure(adapter);
  
#line 3057 
  err = igb_request_irq(adapter);
  
#line 3058 
  if (err != 0) 
#line 3059 
                goto err_req_irq; else ;
  
#line 3062 
  err = netif_set_real_num_tx_queues(adapter->netdev,(unsigned int)adapter->num_tx_queues);
  
#line 3064 
  if (err != 0) 
#line 3065 
                goto err_set_queues; else ;
  
#line 3067 
  err = netif_set_real_num_rx_queues(adapter->netdev,(unsigned int)adapter->num_rx_queues);
  
#line 3069 
  if (err != 0) 
#line 3070 
                goto err_set_queues; else ;
  
#line 3073 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 3075 
  i = 0;
  
#line 3075 
  goto ldv_57789;
  ldv_57788: 
#line 3076 
  ;
  
#line 3076 
  napi_enable(& (adapter->q_vector[i])->napi);
  
#line 3075 
  i += 1;
  ldv_57789: 
#line 3076 
  ;
  
#line 3075 
  if (adapter->num_q_vectors > (unsigned int)i) 
#line 3077 
                                                goto ldv_57788; else 
                                                                  
#line 3080 
                                                                  goto ldv_57790;
  ldv_57790: 
#line 3081 
  ;
  
#line 3079 
  igb_rd32(hw,192U);
  
#line 3081 
  igb_irq_enable(adapter);
  
#line 3084 
  if (adapter->vfs_allocated_count != 0U) {
    
#line 3085 
    u32 reg_data = igb_rd32(hw,24U);
    
#line 3087 
    reg_data |= 16384U;
    {
      u8 * volatile *tmp_2_0;
      {
        
#line 3088 
        u8 *__var = (u8 *)0U;
        
#line 3088 
        tmp_2_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 3088 
      u8 *hw_addr = *tmp_2_0;
      
#line 3088 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 3088 
                                             writel(reg_data,(void volatile *)(hw_addr + 24U)); else ;
    }
  }
  else ;
  
#line 3091 
  netif_tx_start_all_queues(netdev);
  
#line 3093 
  if (! resuming) 
#line 3094 
                  pm_runtime_put(& pdev->dev); else ;
  
#line 3097 
  hw->mac.get_link_status = (_Bool)1;
  
#line 3098 
  ldv_schedule_work_96(& adapter->watchdog_task);
  
#line 3100 
  __retres = 0;
  
#line 3100 
  goto return_label;
  err_set_queues: 
#line 3102 
  ;
  
#line 3103 
  igb_free_irq(adapter);
  err_req_irq: 
#line 3104 
  ;
  
#line 3105 
  igb_release_hw_control(adapter);
  
#line 3106 
  igb_power_down_link(adapter);
  
#line 3107 
  igb_free_all_rx_resources(adapter);
  err_setup_rx: 
#line 3108 
  ;
  
#line 3109 
  igb_free_all_tx_resources(adapter);
  err_setup_tx: 
#line 3110 
  ;
  
#line 3111 
  igb_reset(adapter);
  
#line 3112 
  if (! resuming) 
#line 3113 
                  pm_runtime_put(& pdev->dev); else ;
  
#line 3115 
  __retres = err;
  return_label: 
#line 3115 
                return __retres;
}


#line 3118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_open(struct net_device *netdev)
{
  int tmp;
  
#line 3120 
  tmp = __igb_open(netdev,(_Bool)0);
  
#line 3120 
  return tmp;
}


#line 3134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_close(struct net_device *netdev, bool suspending)
{
  int __retres;
  
#line 3136 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3137 
  struct pci_dev *pdev = adapter->pdev;
  {
    int tmp_0;
    
#line 3139 
    tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 3139 
    int __ret_warn_on = tmp_0 != 0;
    
#line 3139 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 3139 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c",3139); else ;
    
#line 3139 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 3141 
  if (! suspending) 
#line 3142 
                    pm_runtime_get_sync(& pdev->dev); else ;
  
#line 3144 
  igb_down(adapter);
  
#line 3145 
  igb_free_irq(adapter);
  
#line 3147 
  igb_free_all_tx_resources(adapter);
  
#line 3148 
  igb_free_all_rx_resources(adapter);
  
#line 3150 
  if (! suspending) 
#line 3151 
                    pm_runtime_put_sync(& pdev->dev); else ;
  
#line 3152 
  __retres = 0;
  
#line 3152 
  return __retres;
}


#line 3155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_close(struct net_device *netdev)
{
  int tmp;
  
#line 3157 
  tmp = __igb_close(netdev,(_Bool)0);
  
#line 3157 
  return tmp;
}


#line 3166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_setup_tx_resources(struct igb_ring *tx_ring)
{
  int __retres;
  int size;
  
#line 3168 
  struct device *dev = tx_ring->dev;
  
#line 3171 
  size = (int)((unsigned int)tx_ring->count * 48U);
  
#line 3173 
  tx_ring->__anonCompField_igb_ring_97.tx_buffer_info = (struct igb_tx_buffer *)vzalloc((unsigned long)size);
  
#line 3174 
  if (tx_ring->__anonCompField_igb_ring_97.tx_buffer_info == (struct igb_tx_buffer *)0) 
    
#line 3175 
    goto err; else ;
  
#line 3178 
  tx_ring->size = (unsigned int)tx_ring->count * 16U;
  
#line 3179 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  
#line 3181 
  tx_ring->desc = dma_alloc_attrs(dev,(unsigned long)tx_ring->size,& tx_ring->dma,208U,(struct dma_attrs *)0);
  
#line 3183 
  if (tx_ring->desc == (void *)0) 
#line 3184 
                                  goto err; else ;
  
#line 3186 
  tx_ring->next_to_use = (unsigned short)0U;
  
#line 3187 
  tx_ring->next_to_clean = (unsigned short)0U;
  
#line 3189 
  __retres = 0;
  
#line 3189 
  goto return_label;
  err: 
#line 3191 
  ;
  
#line 3192 
  vfree((void const *)tx_ring->__anonCompField_igb_ring_97.tx_buffer_info);
  
#line 3193 
  tx_ring->__anonCompField_igb_ring_97.tx_buffer_info = (struct igb_tx_buffer *)0;
  
#line 3194 
  dev_err((struct device const *)dev,"Unable to allocate memory for the Tx descriptor ring\n");
  
#line 3195 
  __retres = -12;
  return_label: 
#line 3195 
                return __retres;
}


#line 3205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_setup_all_tx_resources(struct igb_adapter *adapter)
{
  int i;
  
#line 3207 
  struct pci_dev *pdev = adapter->pdev;
  
#line 3208 
  int err = 0;
  
#line 3210 
  i = 0;
  
#line 3210 
  goto ldv_57826;
  ldv_57825: 
#line 3211 
  ;
  
#line 3211 
  err = igb_setup_tx_resources(adapter->tx_ring[i]);
  
#line 3212 
  if (err != 0) {
    
#line 3213 
    dev_err((struct device const *)(& pdev->dev),"Allocation for Tx Queue %u failed\n",i);
    
#line 3215 
    i -= 1;
    
#line 3215 
    goto ldv_57822;
    ldv_57821: 
#line 3216 
    ;
    
#line 3216 
    igb_free_tx_resources(adapter->tx_ring[i]);
    
#line 3215 
    i -= 1;
    ldv_57822: 
#line 3216 
    ;
    
#line 3215 
    if (i >= 0) 
#line 3217 
                goto ldv_57821; else 
#line 3220 
                                     goto ldv_57823;
    ldv_57823: 
#line 3221 
    ;
    
#line 3217 
    goto ldv_57824;
  }
  else ;
  
#line 3210 
  i += 1;
  ldv_57826: 
#line 3211 
  ;
  
#line 3210 
  if (adapter->num_tx_queues > i) 
#line 3212 
                                  goto ldv_57825; else 
#line 3215 
                                                       goto ldv_57824;
  ldv_57824: 
#line 3216 
  ;
  
#line 3221 
  return err;
}


#line 3228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_setup_tctl(struct igb_adapter *adapter)
{
  u32 tctl;
  
#line 3230 
  struct e1000_hw *hw = & adapter->hw;
  {
    u8 * volatile *tmp;
    {
      
#line 3234 
      u8 *__var = (u8 *)0U;
      
#line 3234 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3234 
    u8 *hw_addr = *tmp;
    
#line 3234 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 3234 
                                           writel(0U,(void volatile *)(hw_addr + 14376U)); else ;
  }
  
#line 3237 
  tctl = igb_rd32(hw,1024U);
  
#line 3238 
  tctl &= 4294963215U;
  
#line 3239 
  tctl |= 16777464U;
  
#line 3242 
  igb_config_collision_dist(hw);
  
#line 3245 
  tctl |= 2U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 3247 
      u8 *__var_0 = (u8 *)0U;
      
#line 3247 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3247 
    u8 *hw_addr_0 = *tmp_0;
    
#line 3247 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 3247 
                                             writel(tctl,(void volatile *)(hw_addr_0 + 1024U)); else ;
  }
  
#line 3249 
  return;
}


#line 3257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_configure_tx_ring(struct igb_adapter *adapter, struct igb_ring *ring)
{
  int tmp_8;
  int tmp_11;
  int tmp_12;
  
#line 3260 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3261 
  u32 txdctl = 0U;
  
#line 3262 
  u64 tdba = ring->dma;
  
#line 3263 
  int reg_idx = (int)ring->reg_idx;
  {
    u8 * volatile *tmp;
    {
      
#line 3266 
      u8 *__var = (u8 *)0U;
      
#line 3266 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3266 
    u8 *hw_addr = *tmp;
    
#line 3266 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      int tmp_0;
      
#line 3266 
      if (reg_idx <= 3) 
#line 3266 
                        tmp_0 = reg_idx * 256 + 14376; else 
#line 3266 
                                                            tmp_0 = reg_idx * 64 + 57384;
      
#line 3266 
      ;
      
#line 3266 
      writel(0U,(void volatile *)(hw_addr + tmp_0));
    }
    else ;
  }
  
#line 3267 
  igb_rd32(hw,8U);
  {
    
#line 3268 
    unsigned long __ms = 10UL;
    {
      unsigned long tmp_1;
      
#line 3268 
      goto ldv_57851;
      ldv_57850: 
#line 3269 
      ;
      
#line 3268 
      __const_udelay(4295000UL);
      ldv_57851: 
#line 3270 
      ;
      
#line 3268 
      tmp_1 = __ms;
      
#line 3268 
      __ms -= 1UL;
      
#line 3268 
      ;
      
#line 3268 
      if (tmp_1 != 0UL) 
#line 3270 
                        goto ldv_57850; else 
#line 3273 
                                             goto ldv_57852;
      ldv_57852: 
#line 3274 
      ;
    }
  }
  {
    u8 * volatile *tmp_2;
    {
      
#line 3270 
      u8 *__var_0 = (u8 *)0U;
      
#line 3270 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3270 
    u8 *hw_addr_0 = *tmp_2;
    
#line 3270 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      int tmp_3;
      
#line 3270 
      if (reg_idx <= 3) 
#line 3270 
                        tmp_3 = reg_idx * 256 + 14344; else 
#line 3270 
                                                            tmp_3 = reg_idx * 64 + 57352;
      
#line 3270 
      ;
      
#line 3270 
      ;
      
#line 3270 
      writel((unsigned int)ring->count * 16U,(void volatile *)(hw_addr_0 + tmp_3));
    }
    else ;
  }
  {
    u8 * volatile *tmp_4;
    {
      
#line 3272 
      u8 *__var_1 = (u8 *)0U;
      
#line 3272 
      tmp_4 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3272 
    u8 *hw_addr_1 = *tmp_4;
    
#line 3272 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) {
      int tmp_5;
      
#line 3272 
      if (reg_idx <= 3) 
#line 3272 
                        tmp_5 = (reg_idx + 56) * 256; else 
#line 3272 
                                                           tmp_5 = (reg_idx + 896) * 64;
      
#line 3272 
      ;
      
#line 3272 
      ;
      
#line 3272 
      writel((unsigned int)tdba,(void volatile *)(hw_addr_1 + tmp_5));
    }
    else ;
  }
  {
    u8 * volatile *tmp_6;
    {
      
#line 3274 
      u8 *__var_2 = (u8 *)0U;
      
#line 3274 
      tmp_6 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3274 
    u8 *hw_addr_2 = *tmp_6;
    
#line 3274 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) {
      int tmp_7;
      
#line 3274 
      if (reg_idx <= 3) 
#line 3274 
                        tmp_7 = reg_idx * 256 + 14340; else 
#line 3274 
                                                            tmp_7 = reg_idx * 64 + 57348;
      
#line 3274 
      ;
      
#line 3274 
      ;
      
#line 3274 
      writel((unsigned int)(tdba >> 32),(void volatile *)(hw_addr_2 + tmp_7));
    }
    else ;
  }
  
#line 3276 
  if (reg_idx <= 3) 
#line 3276 
                    tmp_8 = reg_idx * 256 + 14360; else 
#line 3276 
                                                        tmp_8 = reg_idx * 64 + 57368;
  
#line 3276 
  ring->tail = (void *)(hw->hw_addr + tmp_8);
  {
    u8 * volatile *tmp_9;
    {
      
#line 3277 
      u8 *__var_3 = (u8 *)0U;
      
#line 3277 
      tmp_9 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3277 
    u8 *hw_addr_3 = *tmp_9;
    
#line 3277 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) {
      int tmp_10;
      
#line 3277 
      if (reg_idx <= 3) 
#line 3277 
                        tmp_10 = reg_idx * 256 + 14352; else 
#line 3277 
                                                             tmp_10 = reg_idx * 64 + 57360;
      
#line 3277 
      ;
      
#line 3277 
      writel(0U,(void volatile *)(hw_addr_3 + tmp_10));
    }
    else ;
  }
  
#line 3278 
  writel(0U,(void volatile *)ring->tail);
  
#line 3280 
  if (hw->mac.type == (unsigned int)e1000_i354) 
#line 3280 
                                                tmp_11 = 20; else 
#line 3280 
                                                                  tmp_11 = 8;
  
#line 3280 
  txdctl = (unsigned int)tmp_11 | txdctl;
  
#line 3281 
  txdctl |= 256U;
  
#line 3282 
  if (hw->mac.type == (unsigned int)e1000_82576 && (adapter->flags & 8192U) != 0U) 
    
#line 3282 
    tmp_12 = 65536; else 
#line 3282 
                         tmp_12 = 1048576;
  
#line 3282 
  txdctl = (unsigned int)tmp_12 | txdctl;
  
#line 3284 
  txdctl |= 33554432U;
  {
    u8 * volatile *tmp_13;
    {
      
#line 3285 
      u8 *__var_4 = (u8 *)0U;
      
#line 3285 
      tmp_13 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3285 
    u8 *hw_addr_4 = *tmp_13;
    
#line 3285 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) {
      int tmp_14;
      
#line 3285 
      if (reg_idx <= 3) 
#line 3285 
                        tmp_14 = reg_idx * 256 + 14376; else 
#line 3285 
                                                             tmp_14 = reg_idx * 64 + 57384;
      
#line 3285 
      ;
      
#line 3285 
      ;
      
#line 3285 
      writel(txdctl,(void volatile *)(hw_addr_4 + tmp_14));
    }
    else ;
  }
  
#line 3287 
  return;
}


#line 3294  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_configure_tx(struct igb_adapter *adapter)
{
  int i;
  
#line 3298 
  i = 0;
  
#line 3298 
  goto ldv_57873;
  ldv_57872: 
#line 3299 
  ;
  
#line 3299 
  igb_configure_tx_ring(adapter,adapter->tx_ring[i]);
  
#line 3298 
  i += 1;
  ldv_57873: 
#line 3299 
  ;
  
#line 3298 
  if (adapter->num_tx_queues > i) 
#line 3300 
                                  goto ldv_57872; else 
#line 3303 
                                                       goto ldv_57874;
  ldv_57874: 
#line 3304 
  ;
  
#line 3305 
  return;
}


#line 3308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_setup_rx_resources(struct igb_ring *rx_ring)
{
  int __retres;
  int size;
  
#line 3310 
  struct device *dev = rx_ring->dev;
  
#line 3313 
  size = (int)((unsigned int)rx_ring->count * 24U);
  
#line 3315 
  rx_ring->__anonCompField_igb_ring_97.rx_buffer_info = (struct igb_rx_buffer *)vzalloc((unsigned long)size);
  
#line 3316 
  if (rx_ring->__anonCompField_igb_ring_97.rx_buffer_info == (struct igb_rx_buffer *)0) 
    
#line 3317 
    goto err; else ;
  
#line 3320 
  rx_ring->size = (unsigned int)rx_ring->count * 16U;
  
#line 3321 
  rx_ring->size = (rx_ring->size + 4095U) & 4294963200U;
  
#line 3323 
  rx_ring->desc = dma_alloc_attrs(dev,(unsigned long)rx_ring->size,& rx_ring->dma,208U,(struct dma_attrs *)0);
  
#line 3325 
  if (rx_ring->desc == (void *)0) 
#line 3326 
                                  goto err; else ;
  
#line 3328 
  rx_ring->next_to_alloc = (unsigned short)0U;
  
#line 3329 
  rx_ring->next_to_clean = (unsigned short)0U;
  
#line 3330 
  rx_ring->next_to_use = (unsigned short)0U;
  
#line 3332 
  __retres = 0;
  
#line 3332 
  goto return_label;
  err: 
#line 3334 
  ;
  
#line 3335 
  vfree((void const *)rx_ring->__anonCompField_igb_ring_97.rx_buffer_info);
  
#line 3336 
  rx_ring->__anonCompField_igb_ring_97.rx_buffer_info = (struct igb_rx_buffer *)0;
  
#line 3337 
  dev_err((struct device const *)dev,"Unable to allocate memory for the Rx descriptor ring\n");
  
#line 3338 
  __retres = -12;
  return_label: 
#line 3338 
                return __retres;
}


#line 3348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_setup_all_rx_resources(struct igb_adapter *adapter)
{
  int i;
  
#line 3350 
  struct pci_dev *pdev = adapter->pdev;
  
#line 3351 
  int err = 0;
  
#line 3353 
  i = 0;
  
#line 3353 
  goto ldv_57892;
  ldv_57891: 
#line 3354 
  ;
  
#line 3354 
  err = igb_setup_rx_resources(adapter->rx_ring[i]);
  
#line 3355 
  if (err != 0) {
    
#line 3356 
    dev_err((struct device const *)(& pdev->dev),"Allocation for Rx Queue %u failed\n",i);
    
#line 3358 
    i -= 1;
    
#line 3358 
    goto ldv_57888;
    ldv_57887: 
#line 3359 
    ;
    
#line 3359 
    igb_free_rx_resources(adapter->rx_ring[i]);
    
#line 3358 
    i -= 1;
    ldv_57888: 
#line 3359 
    ;
    
#line 3358 
    if (i >= 0) 
#line 3360 
                goto ldv_57887; else 
#line 3363 
                                     goto ldv_57889;
    ldv_57889: 
#line 3364 
    ;
    
#line 3360 
    goto ldv_57890;
  }
  else ;
  
#line 3353 
  i += 1;
  ldv_57892: 
#line 3354 
  ;
  
#line 3353 
  if (adapter->num_rx_queues > i) 
#line 3355 
                                  goto ldv_57891; else 
#line 3358 
                                                       goto ldv_57890;
  ldv_57890: 
#line 3359 
  ;
  
#line 3364 
  return err;
}


#line 3371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_setup_mrqc(struct igb_adapter *adapter)
{
  u32 mrqc;
  u32 rxcsum;
  u32 j;
  u32 num_rx_queues;
  u32 rss_key[10U];
  
#line 3373 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3378 
  netdev_rss_key_fill((void *)(& rss_key),40UL);
  
#line 3379 
  j = 0U;
  
#line 3379 
  goto ldv_57906;
  ldv_57905: 
#line 3380 
  ;
  {
    u8 * volatile *tmp;
    {
      
#line 3380 
      u8 *__var = (u8 *)0U;
      
#line 3380 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3380 
    u8 *hw_addr = *tmp;
    
#line 3380 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 3380 
                                           writel(rss_key[j],(void volatile *)(hw_addr + (j + 5920U) * 4U)); else ;
  }
  
#line 3379 
  j += 1U;
  ldv_57906: 
#line 3380 
  ;
  
#line 3379 
  if (j <= 9U) 
#line 3381 
               goto ldv_57905; else 
#line 3384 
                                    goto ldv_57907;
  ldv_57907: 
#line 3385 
  ;
  
#line 3382 
  num_rx_queues = adapter->rss_queues;
  
#line 3384 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 3385 
    ;
    
#line 3387 
    if (adapter->vfs_allocated_count != 0U) 
#line 3388 
                                            num_rx_queues = 2U; else ;
    
#line 3389 
    goto ldv_57909;
    default: 
#line 3390 
    ;
    
#line 3391 
    goto ldv_57909;
  }
  ldv_57909: 
#line 3394 
  ;
  
#line 3394 
  if (adapter->rss_indir_tbl_init != num_rx_queues) {
    
#line 3395 
    j = 0U;
    
#line 3395 
    goto ldv_57912;
    ldv_57911: 
#line 3396 
    ;
    
#line 3396 
    adapter->rss_indir_tbl[j] = (unsigned char)((j * num_rx_queues) / 128U);
    
#line 3395 
    j += 1U;
    ldv_57912: 
#line 3396 
    ;
    
#line 3395 
    if (j <= 127U) 
#line 3397 
                   goto ldv_57911; else 
#line 3400 
                                        goto ldv_57913;
    ldv_57913: 
#line 3401 
    ;
    
#line 3398 
    adapter->rss_indir_tbl_init = num_rx_queues;
  }
  else ;
  
#line 3400 
  igb_write_rss_indir_tbl(adapter);
  
#line 3406 
  rxcsum = igb_rd32(hw,20480U);
  
#line 3407 
  rxcsum |= 8192U;
  
#line 3409 
  if (adapter->hw.mac.type > (unsigned int)e1000_82575) 
#line 3411 
                                                        rxcsum |= 2048U; else ;
  {
    u8 * volatile *tmp_0;
    {
      
#line 3414 
      u8 *__var_0 = (u8 *)0U;
      
#line 3414 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3414 
    u8 *hw_addr_0 = *tmp_0;
    
#line 3414 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 3414 
                                             writel(rxcsum,(void volatile *)(hw_addr_0 + 20480U)); else ;
  }
  
#line 3419 
  mrqc = 3604480U;
  
#line 3425 
  if ((adapter->flags & 64U) != 0U) 
#line 3426 
                                    mrqc |= 4194304U; else ;
  
#line 3427 
  if ((adapter->flags & 128U) != 0U) 
#line 3428 
                                     mrqc |= 8388608U; else ;
  
#line 3434 
  if (adapter->vfs_allocated_count != 0U) {
    
#line 3435 
    if (hw->mac.type > (unsigned int)e1000_82575) {
      
#line 3437 
      u32 vtctl = igb_rd32(hw,22556U);
      
#line 3439 
      vtctl &= 3758095487U;
      
#line 3441 
      vtctl = (adapter->vfs_allocated_count << 7) | vtctl;
      {
        u8 * volatile *tmp_2;
        {
          
#line 3443 
          u8 *__var_1 = (u8 *)0U;
          
#line 3443 
          tmp_2 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 3443 
        u8 *hw_addr_1 = *tmp_2;
        
#line 3443 
        if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 3443 
                                                 writel(vtctl,(void volatile *)(hw_addr_1 + 22556U)); else ;
      }
    }
    else ;
    
#line 3445 
    if (adapter->rss_queues > 1U) 
#line 3446 
                                  mrqc |= 5U; else 
#line 3448 
                                                   mrqc |= 3U;
  }
  else 
    
#line 3450 
    if (hw->mac.type != (unsigned int)e1000_i211) 
#line 3451 
                                                  mrqc |= 2U; else ;
  
#line 3453 
  igb_vmm_control(adapter);
  {
    u8 * volatile *tmp_3;
    {
      
#line 3455 
      u8 *__var_2 = (u8 *)0U;
      
#line 3455 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3455 
    u8 *hw_addr_2 = *tmp_3;
    
#line 3455 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 3455 
                                             writel(mrqc,(void volatile *)(hw_addr_2 + 22552U)); else ;
  }
  
#line 3457 
  return;
}


#line 3462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_setup_rctl(struct igb_adapter *adapter)
{
  u32 rctl;
  
#line 3464 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3467 
  rctl = igb_rd32(hw,256U);
  
#line 3469 
  rctl &= 4294955007U;
  
#line 3470 
  rctl &= 4294967103U;
  
#line 3472 
  rctl = ((hw->mac.mc_filter_type << 12) | rctl) | 32770U;
  
#line 3479 
  rctl |= 67108864U;
  
#line 3482 
  rctl &= 4294770683U;
  
#line 3485 
  rctl |= 32U;
  {
    u8 * volatile *tmp;
    {
      
#line 3488 
      u8 *__var = (u8 *)0U;
      
#line 3488 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3488 
    u8 *hw_addr = *tmp;
    
#line 3488 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 3488 
                                           writel(0U,(void volatile *)(hw_addr + 10280U)); else ;
  }
  
#line 3494 
  if (adapter->vfs_allocated_count != 0U) {
    u8 * volatile *tmp_0;
    {
      
#line 3496 
      u8 *__var_0 = (u8 *)0U;
      
#line 3496 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3496 
    u8 *hw_addr_0 = *tmp_0;
    
#line 3496 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 3496 
                                             writel(65535U,(void volatile *)(hw_addr_0 + 9224U)); else ;
  }
  else ;
  
#line 3500 
  if (((adapter->netdev)->features & 274877906944ULL) != 0ULL) {
    
#line 3504 
    rctl |= 8421380U;
    
#line 3508 
    rctl &= 4289986559U;
  }
  else ;
  {
    u8 * volatile *tmp_1;
    {
      
#line 3516 
      u8 *__var_1 = (u8 *)0U;
      
#line 3516 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3516 
    u8 *hw_addr_1 = *tmp_1;
    
#line 3516 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 3516 
                                             writel(rctl,(void volatile *)(hw_addr_1 + 256U)); else ;
  }
  
#line 3518 
  return;
}


#line 3519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static int igb_set_vf_rlpml(struct igb_adapter *adapter, int size, int vfn)
{
  int __retres;
  u32 vmolr;
  
#line 3522 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3528 
  if (adapter->vfs_allocated_count > (unsigned int)vfn && (unsigned int)(adapter->vf_data + vfn)->vlans_enabled != 0U) 
    
#line 3530 
    size += 4; else ;
  
#line 3532 
  vmolr = igb_rd32(hw,(unsigned int)((vfn + 5812) * 4));
  
#line 3533 
  vmolr &= 4294950912U;
  
#line 3534 
  vmolr = ((unsigned int)size | vmolr) | 65536U;
  {
    u8 * volatile *tmp;
    {
      
#line 3535 
      u8 *__var = (u8 *)0U;
      
#line 3535 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3535 
    u8 *hw_addr = *tmp;
    
#line 3535 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 3535 
                                           writel(vmolr,(void volatile *)(hw_addr + (vfn + 5812) * 4)); else ;
  }
  
#line 3537 
  __retres = 0;
  
#line 3537 
  return __retres;
}


#line 3546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_rlpml_set(struct igb_adapter *adapter)
{
  
#line 3548 
  u32 max_frame_size = adapter->max_frame_size;
  
#line 3549 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3550 
  u16 pf_id = (unsigned short)adapter->vfs_allocated_count;
  
#line 3552 
  if ((unsigned int)pf_id != 0U) {
    
#line 3553 
    igb_set_vf_rlpml(adapter,(int)max_frame_size,(int)pf_id);
    
#line 3560 
    max_frame_size = 16128U;
  }
  else ;
  {
    u8 * volatile *tmp;
    {
      
#line 3563 
      u8 *__var = (u8 *)0U;
      
#line 3563 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3563 
    u8 *hw_addr = *tmp;
    
#line 3563 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 3563 
                                           writel(max_frame_size,(void volatile *)(hw_addr + 20484U)); else ;
  }
  
#line 3565 
  return;
}


#line 3566  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static void igb_set_vmolr(struct igb_adapter *adapter, int vfn, bool aupe)
{
  u32 vmolr;
  
#line 3569 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3575 
  if (hw->mac.type <= (unsigned int)e1000_82575) 
#line 3576 
                                                 goto return_label; else ;
  
#line 3578 
  vmolr = igb_rd32(hw,(unsigned int)((vfn + 5812) * 4));
  
#line 3579 
  vmolr |= 1073741824U;
  
#line 3580 
  if (hw->mac.type == (unsigned int)e1000_i350) {
    u32 dvmolr;
    
#line 3583 
    dvmolr = igb_rd32(hw,(unsigned int)(vfn * 64 + 49208));
    
#line 3584 
    dvmolr |= 1073741824U;
    {
      u8 * volatile *tmp;
      {
        
#line 3585 
        u8 *__var = (u8 *)0U;
        
#line 3585 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 3585 
      u8 *hw_addr = *tmp;
      
#line 3585 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 3585 
                                             writel(dvmolr,(void volatile *)(hw_addr + (vfn * 64 + 49208))); else ;
    }
  }
  else ;
  
#line 3587 
  if ((int)aupe != 0) 
#line 3588 
                      vmolr |= 16777216U; else 
#line 3590 
                                               vmolr &= 4278190079U;
  
#line 3593 
  vmolr &= 4160618495U;
  
#line 3595 
  if (adapter->rss_queues > 1U && adapter->vfs_allocated_count == (unsigned int)vfn) 
    
#line 3596 
    vmolr |= 131072U; else ;
  
#line 3600 
  if (adapter->vfs_allocated_count >= (unsigned int)vfn) 
#line 3601 
                                                         vmolr |= 134217728U; else ;
  {
    u8 * volatile *tmp_0;
    {
      
#line 3603 
      u8 *__var_0 = (u8 *)0U;
      
#line 3603 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3603 
    u8 *hw_addr_0 = *tmp_0;
    
#line 3603 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 3603 
                                             writel(vmolr,(void volatile *)(hw_addr_0 + (vfn + 5812) * 4)); else ;
  }
  return_label: 
#line 3605 
                return;
}


#line 3613  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_configure_rx_ring(struct igb_adapter *adapter, struct igb_ring *ring)
{
  int tmp_7;
  int tmp_12;
  int tmp_13;
  
#line 3616 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3617 
  u64 rdba = ring->dma;
  
#line 3618 
  int reg_idx = (int)ring->reg_idx;
  
#line 3619 
  u32 srrctl = 0U;
  
#line 3619 
  u32 rxdctl = 0U;
  {
    u8 * volatile *tmp;
    {
      
#line 3622 
      u8 *__var = (u8 *)0U;
      
#line 3622 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3622 
    u8 *hw_addr = *tmp;
    
#line 3622 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      int tmp_0;
      
#line 3622 
      if (reg_idx <= 3) 
#line 3622 
                        tmp_0 = reg_idx * 256 + 10280; else 
#line 3622 
                                                            tmp_0 = reg_idx * 64 + 49192;
      
#line 3622 
      ;
      
#line 3622 
      writel(0U,(void volatile *)(hw_addr + tmp_0));
    }
    else ;
  }
  {
    u8 * volatile *tmp_1;
    {
      
#line 3625 
      u8 *__var_0 = (u8 *)0U;
      
#line 3625 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3625 
    u8 *hw_addr_0 = *tmp_1;
    
#line 3625 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      int tmp_2;
      
#line 3625 
      if (reg_idx <= 3) 
#line 3625 
                        tmp_2 = (reg_idx + 40) * 256; else 
#line 3625 
                                                           tmp_2 = (reg_idx + 768) * 64;
      
#line 3625 
      ;
      
#line 3625 
      ;
      
#line 3625 
      writel((unsigned int)rdba,(void volatile *)(hw_addr_0 + tmp_2));
    }
    else ;
  }
  {
    u8 * volatile *tmp_3;
    {
      
#line 3627 
      u8 *__var_1 = (u8 *)0U;
      
#line 3627 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3627 
    u8 *hw_addr_1 = *tmp_3;
    
#line 3627 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) {
      int tmp_4;
      
#line 3627 
      if (reg_idx <= 3) 
#line 3627 
                        tmp_4 = reg_idx * 256 + 10244; else 
#line 3627 
                                                            tmp_4 = reg_idx * 64 + 49156;
      
#line 3627 
      ;
      
#line 3627 
      ;
      
#line 3627 
      writel((unsigned int)(rdba >> 32),(void volatile *)(hw_addr_1 + tmp_4));
    }
    else ;
  }
  {
    u8 * volatile *tmp_5;
    {
      
#line 3628 
      u8 *__var_2 = (u8 *)0U;
      
#line 3628 
      tmp_5 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3628 
    u8 *hw_addr_2 = *tmp_5;
    
#line 3628 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) {
      int tmp_6;
      
#line 3628 
      if (reg_idx <= 3) 
#line 3628 
                        tmp_6 = reg_idx * 256 + 10248; else 
#line 3628 
                                                            tmp_6 = reg_idx * 64 + 49160;
      
#line 3628 
      ;
      
#line 3628 
      ;
      
#line 3628 
      writel((unsigned int)ring->count * 16U,(void volatile *)(hw_addr_2 + tmp_6));
    }
    else ;
  }
  
#line 3632 
  if (reg_idx <= 3) 
#line 3632 
                    tmp_7 = reg_idx * 256 + 10264; else 
#line 3632 
                                                        tmp_7 = reg_idx * 64 + 49176;
  
#line 3632 
  ring->tail = (void *)(hw->hw_addr + tmp_7);
  {
    u8 * volatile *tmp_8;
    {
      
#line 3633 
      u8 *__var_3 = (u8 *)0U;
      
#line 3633 
      tmp_8 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3633 
    u8 *hw_addr_3 = *tmp_8;
    
#line 3633 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) {
      int tmp_9;
      
#line 3633 
      if (reg_idx <= 3) 
#line 3633 
                        tmp_9 = reg_idx * 256 + 10256; else 
#line 3633 
                                                            tmp_9 = reg_idx * 64 + 49168;
      
#line 3633 
      ;
      
#line 3633 
      writel(0U,(void volatile *)(hw_addr_3 + tmp_9));
    }
    else ;
  }
  
#line 3634 
  writel(0U,(void volatile *)ring->tail);
  
#line 3637 
  srrctl = 1024U;
  
#line 3638 
  srrctl |= 2U;
  
#line 3639 
  srrctl |= 33554432U;
  
#line 3640 
  if (hw->mac.type > (unsigned int)e1000_82576) 
#line 3641 
                                                srrctl |= 1073741824U; else ;
  
#line 3643 
  if (adapter->vfs_allocated_count != 0U || adapter->num_rx_queues > 1) 
    
#line 3644 
    srrctl |= 2147483648U; else ;
  {
    u8 * volatile *tmp_10;
    {
      
#line 3646 
      u8 *__var_4 = (u8 *)0U;
      
#line 3646 
      tmp_10 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3646 
    u8 *hw_addr_4 = *tmp_10;
    
#line 3646 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) {
      int tmp_11;
      
#line 3646 
      if (reg_idx <= 3) 
#line 3646 
                        tmp_11 = reg_idx * 256 + 10252; else 
#line 3646 
                                                             tmp_11 = reg_idx * 64 + 49164;
      
#line 3646 
      ;
      
#line 3646 
      ;
      
#line 3646 
      writel(srrctl,(void volatile *)(hw_addr_4 + tmp_11));
    }
    else ;
  }
  
#line 3649 
  igb_set_vmolr(adapter,reg_idx & 7,(_Bool)1);
  
#line 3651 
  if (hw->mac.type == (unsigned int)e1000_i354) 
#line 3651 
                                                tmp_12 = 12; else 
#line 3651 
                                                                  tmp_12 = 8;
  
#line 3651 
  rxdctl = (unsigned int)tmp_12 | rxdctl;
  
#line 3652 
  rxdctl |= 2048U;
  
#line 3653 
  if (hw->mac.type == (unsigned int)e1000_82576 && (adapter->flags & 8192U) != 0U) 
    
#line 3653 
    tmp_13 = 65536; else 
#line 3653 
                         tmp_13 = 262144;
  
#line 3653 
  rxdctl = (unsigned int)tmp_13 | rxdctl;
  
#line 3656 
  rxdctl |= 33554432U;
  {
    u8 * volatile *tmp_14;
    {
      
#line 3657 
      u8 *__var_5 = (u8 *)0U;
      
#line 3657 
      tmp_14 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3657 
    u8 *hw_addr_5 = *tmp_14;
    
#line 3657 
    if ((long)(hw_addr_5 == (u8 *)0U) == 0L) {
      int tmp_15;
      
#line 3657 
      if (reg_idx <= 3) 
#line 3657 
                        tmp_15 = reg_idx * 256 + 10280; else 
#line 3657 
                                                             tmp_15 = reg_idx * 64 + 49192;
      
#line 3657 
      ;
      
#line 3657 
      ;
      
#line 3657 
      writel(rxdctl,(void volatile *)(hw_addr_5 + tmp_15));
    }
    else ;
  }
  
#line 3659 
  return;
}


#line 3666  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_configure_rx(struct igb_adapter *adapter)
{
  int i;
  
#line 3671 
  igb_set_uta(adapter);
  
#line 3674 
  igb_rar_set_qsel(adapter,(u8 *)(& adapter->hw.mac.addr),0U,(unsigned char)((int)((unsigned char)adapter->vfs_allocated_count)));
  
#line 3680 
  i = 0;
  
#line 3680 
  goto ldv_58006;
  ldv_58005: 
#line 3681 
  ;
  
#line 3681 
  igb_configure_rx_ring(adapter,adapter->rx_ring[i]);
  
#line 3680 
  i += 1;
  ldv_58006: 
#line 3681 
  ;
  
#line 3680 
  if (adapter->num_rx_queues > i) 
#line 3682 
                                  goto ldv_58005; else 
#line 3685 
                                                       goto ldv_58007;
  ldv_58007: 
#line 3686 
  ;
  
#line 3687 
  return;
}


#line 3690  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_free_tx_resources(struct igb_ring *tx_ring)
{
  
#line 3692 
  igb_clean_tx_ring(tx_ring);
  
#line 3694 
  vfree((void const *)tx_ring->__anonCompField_igb_ring_97.tx_buffer_info);
  
#line 3695 
  tx_ring->__anonCompField_igb_ring_97.tx_buffer_info = (struct igb_tx_buffer *)0;
  
#line 3698 
  if (tx_ring->desc == (void *)0) 
#line 3699 
                                  goto return_label; else ;
  
#line 3701 
  dma_free_attrs(tx_ring->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma,(struct dma_attrs *)0);
  
#line 3704 
  tx_ring->desc = (void *)0;
  return_label: 
#line 3705 
                return;
}


#line 3713  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_all_tx_resources(struct igb_adapter *adapter)
{
  int i;
  
#line 3717 
  i = 0;
  
#line 3717 
  goto ldv_58016;
  ldv_58015: 
#line 3718 
  ;
  
#line 3718 
  if (adapter->tx_ring[i] != (struct igb_ring *)0) 
#line 3719 
                                                   igb_free_tx_resources(adapter->tx_ring[i]); else ;
  
#line 3717 
  i += 1;
  ldv_58016: 
#line 3718 
  ;
  
#line 3717 
  if (adapter->num_tx_queues > i) 
#line 3719 
                                  goto ldv_58015; else 
#line 3722 
                                                       goto ldv_58017;
  ldv_58017: 
#line 3723 
  ;
  
#line 3724 
  return;
}


#line 3722  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_unmap_and_free_tx_resource(struct igb_ring *ring, struct igb_tx_buffer *tx_buffer)
{
  
#line 3725 
  if (tx_buffer->skb != (struct sk_buff *)0) {
    
#line 3726 
    dev_kfree_skb_any(tx_buffer->skb);
    
#line 3727 
    if (tx_buffer->len != 0U) 
#line 3728 
                              dma_unmap_single_attrs(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0); else ;
  }
  else 
    
#line 3732 
    if (tx_buffer->len != 0U) 
#line 3733 
                              dma_unmap_page(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE); else ;
  
#line 3738 
  tx_buffer->next_to_watch = (union e1000_adv_tx_desc *)0;
  
#line 3739 
  tx_buffer->skb = (struct sk_buff *)0;
  
#line 3740 
  tx_buffer->len = 0U;
  
#line 3741 
  return;
}


#line 3748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clean_tx_ring(struct igb_ring *tx_ring)
{
  struct igb_tx_buffer *buffer_info;
  unsigned long size;
  u16 i;
  struct netdev_queue *tmp;
  
#line 3754 
  if (tx_ring->__anonCompField_igb_ring_97.tx_buffer_info == (struct igb_tx_buffer *)0) 
    
#line 3755 
    goto return_label; else ;
  
#line 3758 
  i = (unsigned short)0U;
  
#line 3758 
  goto ldv_58029;
  ldv_58028: 
#line 3759 
  ;
  
#line 3759 
  buffer_info = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info + (int)i;
  
#line 3760 
  igb_unmap_and_free_tx_resource(tx_ring,buffer_info);
  
#line 3758 
  i = (u16)((int)i + 1);
  ldv_58029: 
#line 3759 
  ;
  
#line 3758 
  if ((int)tx_ring->count > (int)i) 
#line 3760 
                                    goto ldv_58028; else 
#line 3763 
                                                         goto ldv_58030;
  ldv_58030: 
#line 3764 
  ;
  
#line 3763 
  tmp = txring_txq((struct igb_ring const *)tx_ring);
  
#line 3763 
  netdev_tx_reset_queue(tmp);
  
#line 3765 
  size = (unsigned long)tx_ring->count * 48UL;
  
#line 3766 
  memset((void *)tx_ring->__anonCompField_igb_ring_97.tx_buffer_info,0,size);
  
#line 3769 
  memset(tx_ring->desc,0,(unsigned long)tx_ring->size);
  
#line 3771 
  tx_ring->next_to_use = (unsigned short)0U;
  
#line 3772 
  tx_ring->next_to_clean = (unsigned short)0U;
  return_label: 
#line 3773 
                return;
}


#line 3779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clean_all_tx_rings(struct igb_adapter *adapter)
{
  int i;
  
#line 3783 
  i = 0;
  
#line 3783 
  goto ldv_58036;
  ldv_58035: 
#line 3784 
  ;
  
#line 3784 
  if (adapter->tx_ring[i] != (struct igb_ring *)0) 
#line 3785 
                                                   igb_clean_tx_ring(adapter->tx_ring[i]); else ;
  
#line 3783 
  i += 1;
  ldv_58036: 
#line 3784 
  ;
  
#line 3783 
  if (adapter->num_tx_queues > i) 
#line 3785 
                                  goto ldv_58035; else 
#line 3788 
                                                       goto ldv_58037;
  ldv_58037: 
#line 3789 
  ;
  
#line 3790 
  return;
}


#line 3794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_free_rx_resources(struct igb_ring *rx_ring)
{
  
#line 3796 
  igb_clean_rx_ring(rx_ring);
  
#line 3798 
  vfree((void const *)rx_ring->__anonCompField_igb_ring_97.rx_buffer_info);
  
#line 3799 
  rx_ring->__anonCompField_igb_ring_97.rx_buffer_info = (struct igb_rx_buffer *)0;
  
#line 3802 
  if (rx_ring->desc == (void *)0) 
#line 3803 
                                  goto return_label; else ;
  
#line 3805 
  dma_free_attrs(rx_ring->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma,(struct dma_attrs *)0);
  
#line 3808 
  rx_ring->desc = (void *)0;
  return_label: 
#line 3809 
                return;
}


#line 3817  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_free_all_rx_resources(struct igb_adapter *adapter)
{
  int i;
  
#line 3821 
  i = 0;
  
#line 3821 
  goto ldv_58046;
  ldv_58045: 
#line 3822 
  ;
  
#line 3822 
  if (adapter->rx_ring[i] != (struct igb_ring *)0) 
#line 3823 
                                                   igb_free_rx_resources(adapter->rx_ring[i]); else ;
  
#line 3821 
  i += 1;
  ldv_58046: 
#line 3822 
  ;
  
#line 3821 
  if (adapter->num_rx_queues > i) 
#line 3823 
                                  goto ldv_58045; else 
#line 3826 
                                                       goto ldv_58047;
  ldv_58047: 
#line 3827 
  ;
  
#line 3828 
  return;
}


#line 3830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clean_rx_ring(struct igb_ring *rx_ring)
{
  unsigned long size;
  u16 i;
  
#line 3835 
  if (rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.skb != (struct sk_buff *)0) 
    
#line 3836 
    consume_skb(rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.skb); else ;
  
#line 3837 
  rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.skb = (struct sk_buff *)0;
  
#line 3839 
  if (rx_ring->__anonCompField_igb_ring_97.rx_buffer_info == (struct igb_rx_buffer *)0) 
    
#line 3840 
    goto return_label; else ;
  
#line 3843 
  i = (unsigned short)0U;
  
#line 3843 
  goto ldv_58056;
  ldv_58055: 
#line 3844 
  ;
  {
    
#line 3844 
    struct igb_rx_buffer *buffer_info = rx_ring->__anonCompField_igb_ring_97.rx_buffer_info + (int)i;
    
#line 3846 
    if (buffer_info->page == (struct page *)0) 
#line 3847 
                                               goto ldv_58054; else ;
    
#line 3849 
    dma_unmap_page(rx_ring->dev,buffer_info->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 3853 
    __free_pages(buffer_info->page,0U);
    
#line 3855 
    buffer_info->page = (struct page *)0;
  }
  ldv_58054: 
#line 3857 
  ;
  
#line 3843 
  i = (u16)((int)i + 1);
  ldv_58056: 
#line 3844 
  ;
  
#line 3843 
  if ((int)rx_ring->count > (int)i) 
#line 3845 
                                    goto ldv_58055; else 
#line 3848 
                                                         goto ldv_58057;
  ldv_58057: 
#line 3849 
  ;
  
#line 3858 
  size = (unsigned long)rx_ring->count * 24UL;
  
#line 3859 
  memset((void *)rx_ring->__anonCompField_igb_ring_97.rx_buffer_info,0,size);
  
#line 3862 
  memset(rx_ring->desc,0,(unsigned long)rx_ring->size);
  
#line 3864 
  rx_ring->next_to_alloc = (unsigned short)0U;
  
#line 3865 
  rx_ring->next_to_clean = (unsigned short)0U;
  
#line 3866 
  rx_ring->next_to_use = (unsigned short)0U;
  return_label: 
#line 3867 
                return;
}


#line 3873  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clean_all_rx_rings(struct igb_adapter *adapter)
{
  int i;
  
#line 3877 
  i = 0;
  
#line 3877 
  goto ldv_58063;
  ldv_58062: 
#line 3878 
  ;
  
#line 3878 
  if (adapter->rx_ring[i] != (struct igb_ring *)0) 
#line 3879 
                                                   igb_clean_rx_ring(adapter->rx_ring[i]); else ;
  
#line 3877 
  i += 1;
  ldv_58063: 
#line 3878 
  ;
  
#line 3877 
  if (adapter->num_rx_queues > i) 
#line 3879 
                                  goto ldv_58062; else 
#line 3882 
                                                       goto ldv_58064;
  ldv_58064: 
#line 3883 
  ;
  
#line 3884 
  return;
}


#line 3889  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_mac(struct net_device *netdev, void *p)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 3891 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3892 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3893 
  struct sockaddr *addr = (struct sockaddr *)p;
  
#line 3895 
  tmp_0 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 3895 
  if (tmp_0) 
#line 3895 
             tmp_1 = 0; else 
#line 3895 
                             tmp_1 = 1;
  
#line 3895 
  if (tmp_1) {
    
#line 3896 
    __retres = -99;
    
#line 3896 
    goto return_label;
  }
  else ;
  
#line 3898 
  memcpy((void *)netdev->dev_addr,(void const *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  
#line 3899 
  memcpy((void *)(& hw->mac.addr),(void const *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  
#line 3902 
  igb_rar_set_qsel(adapter,(u8 *)(& hw->mac.addr),0U,(unsigned char)((int)((unsigned char)adapter->vfs_allocated_count)));
  
#line 3905 
  __retres = 0;
  return_label: 
#line 3905 
                return __retres;
}


#line 3917  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_write_mc_addr_list(struct net_device *netdev)
{
  int __retres;
  struct netdev_hw_addr *ha;
  u8 *mta_list;
  int i;
  struct netdev_hw_addr *tmp_1;
  int tmp_2;
  struct netdev_hw_addr *tmp_3;
  
#line 3919 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3920 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3925 
  if (netdev->mc.count == 0) {
    
#line 3927 
    igb_update_mc_addr_list(hw,(u8 *)0U,0U);
    
#line 3928 
    igb_restore_vf_multicasts(adapter);
    
#line 3929 
    __retres = 0;
    
#line 3929 
    goto return_label;
  }
  else ;
  
#line 3932 
  mta_list = (u8 *)kzalloc((unsigned long)(netdev->mc.count * 6),32U);
  
#line 3933 
  if (mta_list == (u8 *)0U) {
    
#line 3934 
    __retres = -12;
    
#line 3934 
    goto return_label;
  }
  else ;
  
#line 3937 
  i = 0;
  {
    
#line 3938 
    struct list_head const *__mptr = (struct list_head const *)netdev->mc.list.next;
    
#line 3938 
    tmp_1 = (struct netdev_hw_addr *)__mptr;
  }
  
#line 3938 
  ha = tmp_1;
  
#line 3938 
  goto ldv_58085;
  ldv_58084: 
#line 3939 
  ;
  
#line 3939 
  ;
  
#line 3939 
  tmp_2 = i;
  
#line 3939 
  i += 1;
  
#line 3939 
  ;
  
#line 3939 
  memcpy((void *)(mta_list + tmp_2 * 6),(void const *)(& ha->addr),6UL);
  {
    
#line 3938 
    struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
    
#line 3938 
    tmp_3 = (struct netdev_hw_addr *)__mptr_0;
  }
  
#line 3938 
  ha = tmp_3;
  ldv_58085: 
#line 3940 
  ;
  
#line 3938 
  if (& ha->list != & netdev->mc.list) 
#line 3940 
                                       goto ldv_58084; else 
#line 3943 
                                                            goto ldv_58086;
  ldv_58086: 
#line 3944 
  ;
  
#line 3941 
  igb_update_mc_addr_list(hw,mta_list,(unsigned int)i);
  
#line 3942 
  kfree((void const *)mta_list);
  
#line 3944 
  __retres = netdev->mc.count;
  return_label: 
#line 3944 
                return __retres;
}


#line 3956  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_write_uc_addr_list(struct net_device *netdev)
{
  int __retres;
  
#line 3958 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3959 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3960 
  unsigned int vfn = adapter->vfs_allocated_count;
  
#line 3961 
  unsigned int rar_entries = ((unsigned int)hw->mac.rar_entry_count - vfn) - 1U;
  
#line 3962 
  int count = 0;
  
#line 3965 
  if ((unsigned int)netdev->uc.count > rar_entries) {
    
#line 3966 
    __retres = -12;
    
#line 3966 
    goto return_label;
  }
  else ;
  
#line 3968 
  if (netdev->uc.count != 0 && rar_entries != 0U) {
    struct netdev_hw_addr *ha;
    struct netdev_hw_addr *tmp_0;
    unsigned int tmp_1;
    struct netdev_hw_addr *tmp_2;
    {
      
#line 3971 
      struct list_head const *__mptr = (struct list_head const *)netdev->uc.list.next;
      
#line 3971 
      tmp_0 = (struct netdev_hw_addr *)__mptr;
    }
    
#line 3971 
    ha = tmp_0;
    
#line 3971 
    goto ldv_58102;
    ldv_58101: 
#line 3972 
    ;
    
#line 3972 
    if (rar_entries == 0U) 
#line 3973 
                           goto ldv_58100; else ;
    
#line 3974 
    ;
    
#line 3974 
    tmp_1 = rar_entries;
    
#line 3974 
    rar_entries -= 1U;
    
#line 3974 
    ;
    
#line 3974 
    ;
    
#line 3974 
    ;
    
#line 3974 
    igb_rar_set_qsel(adapter,(u8 *)(& ha->addr),tmp_1,(unsigned char)((int)((unsigned char)vfn)));
    
#line 3977 
    count += 1;
    {
      
#line 3971 
      struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
      
#line 3971 
      tmp_2 = (struct netdev_hw_addr *)__mptr_0;
    }
    
#line 3971 
    ha = tmp_2;
    ldv_58102: 
#line 3973 
    ;
    
#line 3971 
    if (& ha->list != & netdev->uc.list) 
#line 3973 
                                         goto ldv_58101; else 
#line 3976 
                                                              goto ldv_58100;
    ldv_58100: 
#line 3977 
    ;
  }
  else ;
  
#line 3981 
  goto ldv_58110;
  ldv_58109: 
#line 3982 
  ;
  {
    u8 * volatile *tmp_3;
    {
      
#line 3982 
      u8 *__var = (u8 *)0U;
      
#line 3982 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3982 
    u8 *hw_addr = *tmp_3;
    
#line 3982 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      unsigned int tmp_4;
      
#line 3982 
      if (rar_entries <= 15U) 
#line 3982 
                              tmp_4 = rar_entries * 8U + 21508U; else 
                                                                   
#line 3982 
                                                                   tmp_4 = (rar_entries + 536870896U) * 8U + 21732U;
      
#line 3982 
      ;
      
#line 3982 
      writel(0U,(void volatile *)(hw_addr + tmp_4));
    }
    else ;
  }
  {
    u8 * volatile *tmp_5;
    {
      
#line 3983 
      u8 *__var_0 = (u8 *)0U;
      
#line 3983 
      tmp_5 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 3983 
    u8 *hw_addr_0 = *tmp_5;
    
#line 3983 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      unsigned int tmp_6;
      
#line 3983 
      if (rar_entries <= 15U) 
#line 3983 
                              tmp_6 = (rar_entries + 2688U) * 8U; else 
                                                                    
#line 3983 
                                                                    tmp_6 = (rar_entries + 2700U) * 8U;
      
#line 3983 
      ;
      
#line 3983 
      writel(0U,(void volatile *)(hw_addr_0 + tmp_6));
    }
    else ;
  }
  
#line 3981 
  rar_entries -= 1U;
  ldv_58110: 
#line 3982 
  ;
  
#line 3981 
  if (rar_entries != 0U) 
#line 3983 
                         goto ldv_58109; else 
#line 3986 
                                              goto ldv_58111;
  ldv_58111: 
#line 3987 
  ;
  
#line 3985 
  igb_rd32(hw,8U);
  
#line 3987 
  __retres = count;
  return_label: 
#line 3987 
                return __retres;
}


#line 3999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_rx_mode(struct net_device *netdev)
{
  u32 rctl;
  int count;
  u32 tmp_1;
  
#line 4001 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 4002 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4003 
  unsigned int vfn = adapter->vfs_allocated_count;
  
#line 4004 
  u32 vmolr = 0U;
  
#line 4008 
  rctl = igb_rd32(hw,256U);
  
#line 4011 
  rctl &= 4294705127U;
  
#line 4013 
  if ((netdev->flags & 256U) != 0U) {
    
#line 4015 
    if (adapter->vfs_allocated_count != 0U) 
#line 4016 
                                            rctl |= 262144U; else ;
    
#line 4017 
    rctl |= 24U;
    
#line 4018 
    vmolr |= 335544320U;
  }
  else {
    
#line 4020 
    if ((netdev->flags & 512U) != 0U) {
      
#line 4021 
      rctl |= 16U;
      
#line 4022 
      vmolr |= 268435456U;
    }
    else {
      
#line 4028 
      count = igb_write_mc_addr_list(netdev);
      
#line 4029 
      if (count < 0) {
        
#line 4030 
        rctl |= 16U;
        
#line 4031 
        vmolr |= 268435456U;
      }
      else 
        
#line 4032 
        if (count != 0) 
#line 4033 
                        vmolr |= 33554432U; else ;
    }
    
#line 4040 
    count = igb_write_uc_addr_list(netdev);
    
#line 4041 
    if (count < 0) {
      
#line 4042 
      rctl |= 8U;
      
#line 4043 
      vmolr |= 67108864U;
    }
    else ;
    
#line 4045 
    rctl |= 262144U;
  }
  {
    u8 * volatile *tmp_0;
    {
      
#line 4047 
      u8 *__var = (u8 *)0U;
      
#line 4047 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 4047 
    u8 *hw_addr = *tmp_0;
    
#line 4047 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 4047 
                                           writel(rctl,(void volatile *)(hw_addr + 256U)); else ;
  }
  
#line 4054 
  if ((unsigned int)hw->mac.type + 4294967294U > 2U) 
#line 4055 
                                                     goto return_label; else ;
  
#line 4057 
  tmp_1 = igb_rd32(hw,(vfn + 5812U) * 4U);
  
#line 4058 
  vmolr = (tmp_1 & 3925868543U) | vmolr;
  {
    u8 * volatile *tmp_2;
    {
      
#line 4059 
      u8 *__var_0 = (u8 *)0U;
      
#line 4059 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 4059 
    u8 *hw_addr_0 = *tmp_2;
    
#line 4059 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 4059 
                                             writel(vmolr,(void volatile *)(hw_addr_0 + (vfn + 5812U) * 4U)); else ;
  }
  
#line 4060 
  igb_restore_vf_multicasts(adapter);
  return_label: 
#line 4061 
                return;
}


#line 4063  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_check_wvbr(struct igb_adapter *adapter)
{
  
#line 4065 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4066 
  u32 wvbr = 0U;
  
#line 4068 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 4069 
    ;
    case (unsigned int)4: 
#line 4070 
    ;
    
#line 4071 
    wvbr = igb_rd32(hw,13652U);
    
#line 4072 
    if (wvbr == 0U) 
#line 4073 
                    goto return_label; else ;
    
#line 4074 
    goto ldv_58134;
    default: 
#line 4075 
    ;
    
#line 4076 
    goto ldv_58134;
  }
  ldv_58134: 
#line 4079 
  ;
  
#line 4079 
  adapter->wvbr |= wvbr;
  return_label: 
#line 4080 
                return;
}


#line 4084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_spoof_check(struct igb_adapter *adapter)
{
  int j;
  
#line 4088 
  if (adapter->wvbr == 0U) 
#line 4089 
                           goto return_label; else ;
  
#line 4091 
  j = 0;
  
#line 4091 
  goto ldv_58141;
  ldv_58140: 
#line 4092 
  ;
  
#line 4092 
  if ((adapter->wvbr & (unsigned int)(1 << j)) != 0U || (adapter->wvbr & (unsigned int)(1 << (j + 8))) != 0U) {
    
#line 4094 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Spoof event(s) detected on VF %d\n",j);
    
#line 4096 
    adapter->wvbr &= (unsigned int)(~ ((1 << j) | (1 << (j + 8))));
  }
  else ;
  
#line 4091 
  j += 1;
  ldv_58141: 
#line 4092 
  ;
  
#line 4091 
  if (adapter->vfs_allocated_count > (unsigned int)j) 
#line 4093 
                                                      goto ldv_58140; else 
                                                                    
#line 4096 
                                                                    goto ldv_58142;
  ldv_58142: 
#line 4097 
  ;
  return_label: 
#line 4098 
                return;
}


#line 4106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_phy_info(unsigned long data)
{
  
#line 4108 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 4109 
  igb_get_phy_info(& adapter->hw);
  
#line 4110 
  return;
}


#line 4116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
bool igb_has_link(struct igb_adapter *adapter)
{
  bool __retres;
  
#line 4118 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4119 
  bool link_active = (_Bool)0;
  
#line 4126 
  switch ((unsigned int)hw->phy.media_type) {
    case (unsigned int)1: 
#line 4127 
    ;
    
#line 4128 
    if (! hw->mac.get_link_status) {
      
#line 4129 
      __retres = (_Bool)1;
      
#line 4129 
      goto return_label;
    }
    else ;
    case (unsigned int)3: 
#line 4130 
    ;
    
#line 4131 
    (*(hw->mac.ops.check_for_link))(hw);
    
#line 4132 
    link_active = (_Bool)(! ((int)hw->mac.get_link_status != 0));
    
#line 4133 
    goto ldv_58154;
    default: 
#line 4134 
    ;
    case (unsigned int)0: 
#line 4135 
    ;
    
#line 4136 
    goto ldv_58154;
  }
  ldv_58154: 
#line 4139 
  ;
  
#line 4139 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U && hw->phy.id == 21040128U) {
    int tmp_0;
    bool tmp;
    
#line 4142 
    tmp = netif_carrier_ok((struct net_device const *)adapter->netdev);
    
#line 4142 
    if (tmp) 
#line 4142 
             tmp_0 = 0; else 
#line 4142 
                             tmp_0 = 1;
    
#line 4142 
    if (tmp_0) 
#line 4143 
               adapter->flags &= 4294966783U;
    else 
      
#line 4144 
      if ((adapter->flags & 512U) == 0U) {
        
#line 4145 
        adapter->flags |= 512U;
        
#line 4146 
        adapter->link_check_timeout = jiffies;
      }
      else ;
  }
  else ;
  
#line 4150 
  __retres = link_active;
  return_label: 
#line 4150 
                return __retres;
}


#line 4153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_thermal_sensor_event(struct e1000_hw *hw, u32 event)
{
  u32 ctrl_ext;
  u32 thstat;
  
#line 4155 
  bool ret = (_Bool)0;
  
#line 4159 
  if (hw->mac.type == (unsigned int)e1000_i350) {
    
#line 4160 
    thstat = igb_rd32(hw,33040U);
    
#line 4161 
    ctrl_ext = igb_rd32(hw,24U);
    
#line 4163 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (ctrl_ext & 8388608U) == 0U) 
      
#line 4165 
      ret = (_Bool)((thstat & event) != 0U); else ;
  }
  else ;
  
#line 4168 
  return ret;
}


#line 4176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_check_lvmmc(struct igb_adapter *adapter)
{
  u32 lvmmc;
  
#line 4178 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4181 
  lvmmc = igb_rd32(hw,13640U);
  
#line 4182 
  if (lvmmc != 0U) {
    int tmp;
    
#line 4183 
    tmp = net_ratelimit();
    
#line 4183 
    if ((long)(tmp != 0) != 0L) 
#line 4184 
                                netdev_warn((struct net_device const *)adapter->netdev,"malformed Tx packet detected and dropped, LVMMC:0x%08x\n",lvmmc); else ;
  }
  else ;
  
#line 4186 
  return;
}


#line 4195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_watchdog(unsigned long data)
{
  
#line 4197 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 4199 
  ldv_schedule_work_97(& adapter->watchdog_task);
  
#line 4200 
  return;
}


#line 4202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_watchdog_task(struct work_struct *work)
{
  struct igb_adapter *tmp;
  u32 link;
  int i;
  u32 connsw;
  bool tmp_0;
  int tmp_25;
  {
    
#line 4204 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 4204 
    tmp = (struct igb_adapter *)__mptr + 18446744073709550344U;
  }
  
#line 4204 
  struct igb_adapter *adapter = tmp;
  
#line 4207 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4208 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 4209 
  struct net_device *netdev = adapter->netdev;
  
#line 4214 
  tmp_0 = igb_has_link(adapter);
  
#line 4214 
  link = (unsigned int)tmp_0;
  
#line 4216 
  if ((adapter->flags & 512U) != 0U) {
    int tmp_1;
    {
      unsigned long __dummy;
      unsigned long volatile __dummy2;
      
#line 4217 
      tmp_1 = 1;
    }
    
#line 4217 
    if (tmp_1 != 0) {
      int tmp_2;
      {
        unsigned long __dummy_0;
        unsigned long __dummy2_0;
        
#line 4217 
        tmp_2 = 1;
      }
      
#line 4217 
      if (tmp_2 != 0) 
        
#line 4217 
        if ((long)((adapter->link_check_timeout - jiffies) + 250UL) < 0L) 
          
#line 4218 
          adapter->flags &= 4294966783U; else 
#line 4220 
                                              link = 0U;
      else 
#line 4220 
           link = 0U;
    }
    else 
#line 4220 
         link = 0U;
  }
  else ;
  
#line 4224 
  if ((adapter->flags & 4096U) != 0U) {
    
#line 4225 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
      
#line 4226 
      connsw = igb_rd32(hw,52U);
      
#line 4227 
      if ((connsw & 1U) == 0U) 
#line 4228 
                               link = 0U; else ;
    }
    else ;
  }
  else ;
  
#line 4231 
  if (link != 0U) {
    int tmp_11;
    bool tmp_10;
    
#line 4233 
    if ((int)hw->dev_spec._82575.media_changed != 0) {
      
#line 4234 
      hw->dev_spec._82575.media_changed = (_Bool)0;
      
#line 4235 
      adapter->flags |= 1024U;
      
#line 4236 
      igb_reset(adapter);
    }
    else ;
    
#line 4239 
    pm_runtime_resume(netdev->dev.parent);
    
#line 4241 
    tmp_10 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 4241 
    if (tmp_10) 
#line 4241 
                tmp_11 = 0; else 
#line 4241 
                                 tmp_11 = 1;
    
#line 4241 
    if (tmp_11) {
      u32 ctrl;
      char *tmp_5;
      char *tmp_6;
      bool tmp_7;
      int tmp_9;
      
#line 4244 
      (*(hw->mac.ops.get_speed_and_duplex))(hw,& adapter->link_speed,& adapter->link_duplex);
      
#line 4248 
      ctrl = igb_rd32(hw,0U);
      
#line 4255 
      if ((ctrl & 268435456U) == 0U || (ctrl & 134217728U) == 0U) {
        char *tmp_4;
        
#line 4256 
        if ((ctrl & 134217728U) == 0U) {
          char *tmp_3;
          
#line 4258 
          if ((ctrl & 268435456U) != 0U) 
#line 4258 
                                         tmp_3 = (char *)"TX"; else 
#line 4258 
                                                                    tmp_3 = (char *)"None";
          
#line 4256 
          tmp_4 = tmp_3;
        }
        else 
#line 4256 
             tmp_4 = (char *)"RX";
        
#line 4255 
        tmp_5 = tmp_4;
      }
      else 
#line 4255 
           tmp_5 = (char *)"RX/TX";
      
#line 4253 
      if ((unsigned int)adapter->link_duplex == 2U) 
#line 4253 
                                                    tmp_6 = (char *)"Full"; else 
                                                                    
#line 4253 
                                                                    tmp_6 = (char *)"Half";
      
#line 4250 
      ;
      
#line 4250 
      ;
      
#line 4250 
      ;
      
#line 4250 
      netdev_info((struct net_device const *)netdev,"igb: %s NIC Link is Up %d Mbps %s Duplex, Flow Control: %s\n",(char *)(& netdev->name),(int)adapter->link_speed,tmp_6,tmp_5);
      
#line 4262 
      if ((adapter->flags & 16384U) != 0U && (unsigned int)adapter->link_duplex == 1U) {
        
#line 4264 
        _dev_info((struct device const *)(& (adapter->pdev)->dev),"EEE Disabled: unsupported at half duplex. Re-enable using ethtool when at full duplex.\n");
        
#line 4266 
        adapter->hw.dev_spec._82575.eee_disable = (_Bool)1;
        
#line 4267 
        adapter->flags &= 4294950911U;
      }
      else ;
      
#line 4271 
      igb_check_downshift(hw);
      
#line 4272 
      if ((int)phy->speed_downgraded != 0) 
#line 4273 
                                           netdev_warn((struct net_device const *)netdev,"Link Speed was downgraded by SmartSpeed\n"); else ;
      
#line 4276 
      tmp_7 = igb_thermal_sensor_event(hw,2U);
      
#line 4276 
      if ((int)tmp_7 != 0) 
#line 4278 
                           netdev_info((struct net_device const *)netdev,"The network adapter link speed was downshifted because it overheated\n"); else ;
      
#line 4281 
      adapter->tx_timeout_factor = (unsigned char)1U;
      
#line 4282 
      switch ((int)adapter->link_speed) {
        case 10: 
#line 4283 
        ;
        
#line 4284 
        adapter->tx_timeout_factor = (unsigned char)14U;
        
#line 4285 
        goto ldv_58193;
        case 100: 
#line 4286 
        ;
        
#line 4288 
        goto ldv_58193;
      }
      ldv_58193: 
#line 4291 
      ;
      
#line 4291 
      netif_carrier_on(netdev);
      
#line 4293 
      igb_ping_all_vfs(adapter);
      
#line 4294 
      igb_check_vf_rate_limit(adapter);
      
#line 4297 
      tmp_9 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
      
#line 4297 
      if (tmp_9 == 0) {
        unsigned long tmp_8;
        
#line 4298 
        tmp_8 = round_jiffies(jiffies + 500UL);
        
#line 4298 
        ;
        
#line 4298 
        ldv_mod_timer_98(& adapter->phy_info_timer,tmp_8);
      }
      else ;
    }
    else ;
  }
  else {
    bool tmp_17;
    
#line 4302 
    tmp_17 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 4302 
    if ((int)tmp_17 != 0) {
      bool tmp_12;
      int tmp_14;
      
#line 4303 
      adapter->link_speed = (unsigned short)0U;
      
#line 4304 
      adapter->link_duplex = (unsigned short)0U;
      
#line 4307 
      tmp_12 = igb_thermal_sensor_event(hw,1U);
      
#line 4307 
      if ((int)tmp_12 != 0) 
#line 4309 
                            netdev_err((struct net_device const *)netdev,"The network adapter was stopped because it overheated\n"); else ;
      
#line 4313 
      netdev_info((struct net_device const *)netdev,"igb: %s NIC Link is Down\n",(char *)(& netdev->name));
      
#line 4315 
      netif_carrier_off(netdev);
      
#line 4317 
      igb_ping_all_vfs(adapter);
      
#line 4320 
      tmp_14 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
      
#line 4320 
      if (tmp_14 == 0) {
        unsigned long tmp_13;
        
#line 4321 
        tmp_13 = round_jiffies(jiffies + 500UL);
        
#line 4321 
        ;
        
#line 4321 
        ldv_mod_timer_99(& adapter->phy_info_timer,tmp_13);
      }
      else ;
      
#line 4325 
      if ((adapter->flags & 4096U) != 0U) {
        
#line 4326 
        igb_check_swap_media(adapter);
        
#line 4327 
        if ((adapter->flags & 1024U) != 0U) {
          
#line 4328 
          ldv_schedule_work_100(& adapter->reset_task);
          
#line 4330 
          goto return_label;
        }
        else ;
      }
      else ;
      
#line 4333 
      pm_schedule_suspend(netdev->dev.parent,5000U);
    }
    else {
      int tmp_16;
      bool tmp_15;
      
#line 4337 
      tmp_15 = netif_carrier_ok((struct net_device const *)netdev);
      
#line 4337 
      if (tmp_15) 
#line 4337 
                  tmp_16 = 0; else 
#line 4337 
                                   tmp_16 = 1;
      
#line 4337 
      if (tmp_16) {
        
#line 4337 
        if ((adapter->flags & 4096U) != 0U) {
          
#line 4339 
          igb_check_swap_media(adapter);
          
#line 4340 
          if ((adapter->flags & 1024U) != 0U) {
            
#line 4341 
            ldv_schedule_work_101(& adapter->reset_task);
            
#line 4343 
            goto return_label;
          }
          else ;
        }
        else ;
      }
      else ;
    }
  }
  
#line 4348 
  ldv_spin_lock_102(& adapter->stats64_lock);
  
#line 4349 
  igb_update_stats(adapter,& adapter->stats64);
  
#line 4350 
  ldv_spin_unlock_103(& adapter->stats64_lock);
  
#line 4352 
  i = 0;
  
#line 4352 
  goto ldv_58197;
  ldv_58196: 
#line 4353 
  ;
  {
    int tmp_20;
    bool tmp_19;
    
#line 4353 
    struct igb_ring *tx_ring = adapter->tx_ring[i];
    
#line 4354 
    tmp_19 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 4354 
    if (tmp_19) 
#line 4354 
                tmp_20 = 0; else 
#line 4354 
                                 tmp_20 = 1;
    
#line 4354 
    if (tmp_20) {
      int tmp_18;
      
#line 4360 
      tmp_18 = igb_desc_unused(tx_ring);
      
#line 4360 
      ;
      
#line 4360 
      if (tmp_18 + 1 < (int)tx_ring->count) {
        
#line 4361 
        adapter->tx_timeout_count += 1U;
        
#line 4362 
        ldv_schedule_work_104(& adapter->reset_task);
        
#line 4364 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 4369 
    set_bit(3L,(unsigned long volatile *)(& tx_ring->flags));
  }
  
#line 4352 
  i += 1;
  ldv_58197: 
#line 4353 
  ;
  
#line 4352 
  if (adapter->num_tx_queues > i) 
#line 4354 
                                  goto ldv_58196; else 
#line 4357 
                                                       goto ldv_58198;
  ldv_58198: 
#line 4358 
  ;
  
#line 4373 
  if ((adapter->flags & 8192U) != 0U) {
    
#line 4374 
    u32 eics = 0U;
    
#line 4376 
    i = 0;
    
#line 4376 
    goto ldv_58201;
    ldv_58200: 
#line 4377 
    ;
    
#line 4377 
    eics = (adapter->q_vector[i])->eims_value | eics;
    
#line 4376 
    i += 1;
    ldv_58201: 
#line 4377 
    ;
    
#line 4376 
    if (adapter->num_q_vectors > (unsigned int)i) 
#line 4378 
                                                  goto ldv_58200; else 
                                                                    
#line 4381 
                                                                    goto ldv_58202;
    ldv_58202: 
#line 4382 
    ;
    {
      u8 * volatile *tmp_21;
      {
        
#line 4378 
        u8 *__var = (u8 *)0U;
        
#line 4378 
        tmp_21 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 4378 
      u8 *hw_addr = *tmp_21;
      
#line 4378 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 4378 
                                             writel(eics,(void volatile *)(hw_addr + 5408U)); else ;
    }
  }
  else {
    u8 * volatile *tmp_22;
    {
      
#line 4380 
      u8 *__var_0 = (u8 *)0U;
      
#line 4380 
      tmp_22 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 4380 
    u8 *hw_addr_0 = *tmp_22;
    
#line 4380 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 4380 
                                             writel(16U,(void volatile *)(hw_addr_0 + 200U)); else ;
  }
  
#line 4383 
  igb_spoof_check(adapter);
  
#line 4384 
  igb_ptp_rx_hang(adapter);
  
#line 4387 
  if ((unsigned int)adapter->hw.mac.type + 4294967292U <= 1U) 
#line 4389 
                                                              igb_check_lvmmc(adapter); else ;
  
#line 4392 
  tmp_25 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 4392 
  if (tmp_25 == 0) 
    
#line 4393 
    if ((adapter->flags & 512U) != 0U) {
      unsigned long tmp_23;
      
#line 4394 
      tmp_23 = round_jiffies(jiffies + 250UL);
      
#line 4394 
      ;
      
#line 4394 
      ldv_mod_timer_105(& adapter->watchdog_timer,tmp_23);
    }
    else {
      unsigned long tmp_24;
      
#line 4397 
      tmp_24 = round_jiffies(jiffies + 500UL);
      
#line 4397 
      ;
      
#line 4397 
      ldv_mod_timer_106(& adapter->watchdog_timer,tmp_24);
    }
  else ;
  return_label: 
#line 4399 
                return;
}


#line 4424  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_ring_itr(struct igb_q_vector *q_vector)
{
  unsigned int packets;
  int tmp_2;
  
#line 4426 
  int new_val = (int)q_vector->itr_val;
  
#line 4427 
  int avg_wire_size = 0;
  
#line 4428 
  struct igb_adapter *adapter = q_vector->adapter;
  
#line 4434 
  if ((unsigned int)adapter->link_speed != 1000U) {
    
#line 4435 
    new_val = 980;
    
#line 4436 
    goto set_itr_val;
  }
  else ;
  
#line 4439 
  packets = q_vector->rx.total_packets;
  
#line 4440 
  if (packets != 0U) 
#line 4441 
                     avg_wire_size = (int)(q_vector->rx.total_bytes / packets); else ;
  
#line 4443 
  packets = q_vector->tx.total_packets;
  
#line 4444 
  if (packets != 0U) {
    u32 tmp_0;
    {
      u32 tmp;
      
#line 4445 
      u32 __max1 = (unsigned int)avg_wire_size;
      
#line 4445 
      u32 __max2 = q_vector->tx.total_bytes / packets;
      
#line 4445 
      if (__max1 > __max2) 
#line 4445 
                           tmp = __max1; else 
#line 4445 
                                              tmp = __max2;
      
#line 4445 
      tmp_0 = tmp;
    }
    
#line 4445 
    avg_wire_size = (int)tmp_0;
  }
  else ;
  
#line 4449 
  if (avg_wire_size == 0) 
#line 4450 
                          goto clear_counts; else ;
  
#line 4453 
  avg_wire_size += 24;
  {
    int tmp_1;
    
#line 4456 
    int _min1 = avg_wire_size;
    
#line 4456 
    int _min2 = 3000;
    
#line 4456 
    if (_min1 < _min2) 
#line 4456 
                       tmp_1 = _min1; else 
#line 4456 
                                           tmp_1 = _min2;
    
#line 4456 
    tmp_2 = tmp_1;
  }
  
#line 4456 
  avg_wire_size = tmp_2;
  
#line 4459 
  if ((unsigned int)avg_wire_size + 4294966995U <= 898U) 
#line 4460 
                                                         new_val = avg_wire_size / 3; else 
                                                                    
#line 4462 
                                                                    new_val = avg_wire_size / 2;
  
#line 4465 
  if (new_val <= 195 && ((q_vector->rx.ring != (struct igb_ring *)0 && adapter->rx_itr_setting == 3U) || (q_vector->rx.ring == (struct igb_ring *)0 && adapter->tx_itr_setting == 3U))) 
    
#line 4468 
    new_val = 196; else ;
  set_itr_val: 
#line 4470 
  ;
  
#line 4471 
  if ((int)q_vector->itr_val != new_val) {
    
#line 4472 
    q_vector->itr_val = (unsigned short)new_val;
    
#line 4473 
    q_vector->set_itr = (unsigned char)1U;
  }
  else ;
  clear_counts: 
#line 4475 
  ;
  
#line 4476 
  q_vector->rx.total_bytes = 0U;
  
#line 4477 
  q_vector->rx.total_packets = 0U;
  
#line 4478 
  q_vector->tx.total_bytes = 0U;
  
#line 4479 
  q_vector->tx.total_packets = 0U;
  
#line 4480 
  return;
}


#line 4498  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_itr(struct igb_q_vector *q_vector, struct igb_ring_container *ring_container)
{
  
#line 4501 
  unsigned int packets = ring_container->total_packets;
  
#line 4502 
  unsigned int bytes = ring_container->total_bytes;
  
#line 4503 
  u8 itrval = ring_container->itr;
  
#line 4506 
  if (packets == 0U) 
#line 4507 
                     goto return_label; else ;
  
#line 4509 
  switch ((int)itrval) {
    case 0: 
#line 4510 
    ;
    
#line 4512 
    if (bytes / packets > 8000U) 
#line 4513 
                                 itrval = (unsigned char)2U;
    else 
      
#line 4514 
      if (packets <= 4U && bytes > 512U) 
#line 4515 
                                         itrval = (unsigned char)1U; else ;
    
#line 4516 
    goto ldv_58237;
    case 1: 
#line 4517 
    ;
    
#line 4518 
    if (bytes > 10000U) {
      
#line 4520 
      if (bytes / packets > 8000U) 
#line 4521 
                                   itrval = (unsigned char)2U;
      else 
        
#line 4522 
        if (packets <= 9U || bytes / packets > 1200U) 
#line 4523 
                                                      itrval = (unsigned char)2U;
        else 
          
#line 4524 
          if (packets > 35U) 
#line 4525 
                             itrval = (unsigned char)0U; else ;
    }
    else 
      
#line 4526 
      if (bytes / packets > 2000U) 
#line 4527 
                                   itrval = (unsigned char)2U;
      else 
        
#line 4528 
        if (packets <= 2U && bytes <= 511U) 
#line 4529 
                                            itrval = (unsigned char)0U; else ;
    
#line 4531 
    goto ldv_58237;
    case 2: 
#line 4532 
    ;
    
#line 4533 
    if (bytes > 25000U) {
      
#line 4534 
      if (packets > 35U) 
#line 4535 
                         itrval = (unsigned char)1U; else ;
    }
    else 
      
#line 4536 
      if (bytes <= 1499U) 
#line 4537 
                          itrval = (unsigned char)1U; else ;
    
#line 4539 
    goto ldv_58237;
  }
  ldv_58237: 
#line 4543 
  ;
  
#line 4543 
  ring_container->total_bytes = 0U;
  
#line 4544 
  ring_container->total_packets = 0U;
  
#line 4547 
  ring_container->itr = itrval;
  return_label: 
#line 4548 
                return;
}


#line 4550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_itr(struct igb_q_vector *q_vector)
{
  int tmp_0;
  
#line 4552 
  struct igb_adapter *adapter = q_vector->adapter;
  
#line 4553 
  u32 new_itr = (unsigned int)q_vector->itr_val;
  
#line 4554 
  u8 current_itr = (unsigned char)0U;
  
#line 4557 
  if ((unsigned int)adapter->link_speed != 1000U) {
    
#line 4558 
    current_itr = (unsigned char)0U;
    
#line 4559 
    new_itr = 980U;
    
#line 4560 
    goto set_itr_now;
  }
  else ;
  
#line 4563 
  igb_update_itr(q_vector,& q_vector->tx);
  
#line 4564 
  igb_update_itr(q_vector,& q_vector->rx);
  {
    int tmp;
    
#line 4566 
    u8 _max1 = q_vector->rx.itr;
    
#line 4566 
    u8 _max2 = q_vector->tx.itr;
    
#line 4566 
    if ((int)_max1 > (int)_max2) 
#line 4566 
                                 tmp = (int)_max1; else 
#line 4566 
                                                        tmp = (int)_max2;
    
#line 4566 
    tmp_0 = tmp;
  }
  
#line 4566 
  current_itr = (unsigned char)tmp_0;
  
#line 4569 
  if ((unsigned int)current_itr == 0U && ((q_vector->rx.ring != (struct igb_ring *)0 && adapter->rx_itr_setting == 3U) || (q_vector->rx.ring == (struct igb_ring *)0 && adapter->tx_itr_setting == 3U))) 
    
#line 4572 
    current_itr = (unsigned char)1U; else ;
  
#line 4574 
  switch ((int)current_itr) {
    case 0: 
#line 4576 
    ;
    
#line 4577 
    new_itr = 56U;
    
#line 4578 
    goto ldv_58251;
    case 1: 
#line 4579 
    ;
    
#line 4580 
    new_itr = 196U;
    
#line 4581 
    goto ldv_58251;
    case 2: 
#line 4582 
    ;
    
#line 4583 
    new_itr = 980U;
    
#line 4584 
    goto ldv_58251;
    default: 
#line 4585 
    ;
    
#line 4586 
    goto ldv_58251;
  }
  ldv_58251: 
#line 4589 
  ;
  set_itr_now: 
#line 4589 
  ;
  
#line 4590 
  if ((unsigned int)q_vector->itr_val != new_itr) {
    
#line 4595 
    if ((unsigned int)q_vector->itr_val < new_itr) {
      u32 tmp_2;
      {
        u32 tmp_1;
        
#line 4596 
        u32 _max1_0 = ((unsigned int)q_vector->itr_val * new_itr) / ((unsigned int)((int)q_vector->itr_val >> 2) + new_itr);
        
#line 4596 
        u32 _max2_0 = new_itr;
        
#line 4596 
        if (_max1_0 > _max2_0) 
#line 4596 
                               tmp_1 = _max1_0; else 
#line 4596 
                                                     tmp_1 = _max2_0;
        
#line 4596 
        tmp_2 = tmp_1;
      }
      
#line 4595 
      new_itr = tmp_2;
    }
    else 
#line 4595 
         new_itr = new_itr;
    
#line 4605 
    q_vector->itr_val = (unsigned short)new_itr;
    
#line 4606 
    q_vector->set_itr = (unsigned char)1U;
  }
  else ;
  
#line 4608 
  return;
}


#line 4610  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tx_ctxtdesc(struct igb_ring *tx_ring, u32 vlan_macip_lens, u32 type_tucmd, u32 mss_l4len_idx)
{
  struct e1000_adv_tx_context_desc *context_desc;
  int tmp;
  
#line 4614 
  u16 i = tx_ring->next_to_use;
  
#line 4616 
  context_desc = (struct e1000_adv_tx_context_desc *)tx_ring->desc + (int)i;
  
#line 4618 
  i = (u16)((int)i + 1);
  
#line 4619 
  if ((int)tx_ring->count > (int)i) 
#line 4619 
                                    tx_ring->next_to_use = i; else 
#line 4619 
                                                                   tx_ring->next_to_use = (unsigned short)0U;
  
#line 4622 
  type_tucmd |= 538968064U;
  
#line 4625 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& tx_ring->flags));
  
#line 4625 
  if (tmp != 0) 
#line 4626 
                mss_l4len_idx = (unsigned int)((int)tx_ring->reg_idx << 4) | mss_l4len_idx; else ;
  
#line 4628 
  context_desc->vlan_macip_lens = vlan_macip_lens;
  
#line 4629 
  context_desc->seqnum_seed = 0U;
  
#line 4630 
  context_desc->type_tucmd_mlhl = type_tucmd;
  
#line 4631 
  context_desc->mss_l4len_idx = mss_l4len_idx;
  
#line 4632 
  return;
}


#line 4634  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_tso(struct igb_ring *tx_ring, struct igb_tx_buffer *first, u8 *hdr_len)
{
  int __retres;
  u32 vlan_macip_lens;
  u32 type_tucmd;
  u32 mss_l4len_idx;
  u32 l4len;
  int err;
  int tmp_0;
  bool tmp;
  int tmp_10;
  unsigned char *tmp_11;
  unsigned char *tmp_12;
  int tmp_13;
  
#line 4638 
  struct sk_buff *skb = first->skb;
  
#line 4643 
  if ((unsigned int)*((unsigned char *)skb + 145UL) != 6U) {
    
#line 4644 
    __retres = 0;
    
#line 4644 
    goto return_label;
  }
  else ;
  
#line 4646 
  tmp = skb_is_gso((struct sk_buff const *)skb);
  
#line 4646 
  if (tmp) 
#line 4646 
           tmp_0 = 0; else 
#line 4646 
                           tmp_0 = 1;
  
#line 4646 
  if (tmp_0) {
    
#line 4647 
    __retres = 0;
    
#line 4647 
    goto return_label;
  }
  else ;
  
#line 4649 
  err = skb_cow_head(skb,0U);
  
#line 4650 
  if (err < 0) {
    
#line 4651 
    __retres = err;
    
#line 4651 
    goto return_label;
  }
  else ;
  
#line 4654 
  type_tucmd = 2048U;
  
#line 4656 
  if ((unsigned int)first->protocol == 8U) {
    struct tcphdr *tmp_2;
    __sum16 tmp_3;
    
#line 4657 
    struct iphdr *iph = ip_hdr((struct sk_buff const *)skb);
    
#line 4658 
    iph->tot_len = (unsigned short)0U;
    
#line 4659 
    iph->check = (unsigned short)0U;
    
#line 4660 
    tmp_2 = tcp_hdr((struct sk_buff const *)skb);
    
#line 4660 
    tmp_3 = csum_tcpudp_magic(iph->saddr,iph->daddr,(unsigned short)0,(unsigned short)6,0U);
    
#line 4660 
    tmp_2->check = (unsigned short)(~ ((int)tmp_3));
    
#line 4664 
    type_tucmd |= 1024U;
    
#line 4665 
    first->tx_flags |= 50U;
  }
  else {
    bool tmp_9;
    
#line 4668 
    tmp_9 = skb_is_gso_v6((struct sk_buff const *)skb);
    
#line 4668 
    if ((int)tmp_9 != 0) {
      struct ipv6hdr *tmp_4;
      struct tcphdr *tmp_5;
      __sum16 tmp_8;
      struct ipv6hdr *tmp_6;
      struct ipv6hdr *tmp_7;
      
#line 4669 
      tmp_4 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 4669 
      tmp_4->payload_len = (unsigned short)0U;
      
#line 4670 
      tmp_5 = tcp_hdr((struct sk_buff const *)skb);
      
#line 4671 
      tmp_6 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 4670 
      tmp_7 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 4670 
      tmp_8 = csum_ipv6_magic((struct in6_addr const *)(& tmp_7->saddr),(struct in6_addr const *)(& tmp_6->daddr),0U,(unsigned short)6,0U);
      
#line 4670 
      tmp_5->check = (unsigned short)(~ ((int)tmp_8));
      
#line 4673 
      first->tx_flags |= 34U;
    }
    else ;
  }
  
#line 4678 
  l4len = tcp_hdrlen((struct sk_buff const *)skb);
  
#line 4679 
  tmp_10 = skb_transport_offset((struct sk_buff const *)skb);
  
#line 4679 
  *hdr_len = (unsigned char)((int)((unsigned char)tmp_10) + (int)((unsigned char)l4len));
  
#line 4682 
  tmp_11 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 4682 
  first->gso_segs = ((struct skb_shared_info *)tmp_11)->gso_segs;
  
#line 4683 
  first->bytecount += (unsigned int)(((int)first->gso_segs + -1) * (int)*hdr_len);
  
#line 4686 
  mss_l4len_idx = l4len << 8;
  
#line 4687 
  tmp_12 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 4687 
  mss_l4len_idx = (unsigned int)((int)((struct skb_shared_info *)tmp_12)->gso_size << 16) | mss_l4len_idx;
  
#line 4690 
  vlan_macip_lens = skb_network_header_len((struct sk_buff const *)skb);
  
#line 4691 
  tmp_13 = skb_network_offset((struct sk_buff const *)skb);
  
#line 4691 
  vlan_macip_lens = (unsigned int)(tmp_13 << 9) | vlan_macip_lens;
  
#line 4692 
  vlan_macip_lens = (first->tx_flags & 4294901760U) | vlan_macip_lens;
  
#line 4694 
  igb_tx_ctxtdesc(tx_ring,vlan_macip_lens,type_tucmd,mss_l4len_idx);
  
#line 4696 
  __retres = 1;
  return_label: 
#line 4696 
                return __retres;
}


#line 4699  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tx_csum(struct igb_ring *tx_ring, struct igb_tx_buffer *first)
{
  int tmp_6;
  
#line 4701 
  struct sk_buff *skb = first->skb;
  
#line 4702 
  u32 vlan_macip_lens = 0U;
  
#line 4703 
  u32 mss_l4len_idx = 0U;
  
#line 4704 
  u32 type_tucmd = 0U;
  
#line 4706 
  if ((unsigned int)*((unsigned char *)skb + 145UL) != 6U) {
    
#line 4707 
    if ((first->tx_flags & 1U) == 0U) 
#line 4708 
                                      goto return_label; else ;
  }
  else {
    
#line 4710 
    u8 l4_hdr = (unsigned char)0U;
    
#line 4712 
    switch ((int)first->protocol) {
      u32 tmp;
      struct iphdr *tmp_0;
      u32 tmp_1;
      struct ipv6hdr *tmp_2;
      int tmp_3;
      case 8: 
#line 4713 
      ;
      
#line 4714 
      tmp = skb_network_header_len((struct sk_buff const *)skb);
      
#line 4714 
      vlan_macip_lens = tmp | vlan_macip_lens;
      
#line 4715 
      type_tucmd |= 1024U;
      
#line 4716 
      tmp_0 = ip_hdr((struct sk_buff const *)skb);
      
#line 4716 
      l4_hdr = tmp_0->protocol;
      
#line 4717 
      goto ldv_58288;
      case 56710: 
#line 4718 
      ;
      
#line 4719 
      tmp_1 = skb_network_header_len((struct sk_buff const *)skb);
      
#line 4719 
      vlan_macip_lens = tmp_1 | vlan_macip_lens;
      
#line 4720 
      tmp_2 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 4720 
      l4_hdr = tmp_2->nexthdr;
      
#line 4721 
      goto ldv_58288;
      default: 
#line 4722 
      ;
      
#line 4723 
      tmp_3 = net_ratelimit();
      
#line 4723 
      if ((long)(tmp_3 != 0) != 0L) 
#line 4724 
                                    dev_warn((struct device const *)tx_ring->dev,"partial checksum but proto=%x!\n",(int)first->protocol); else ;
      
#line 4728 
      goto ldv_58288;
    }
    ldv_58288: 
#line 4731 
    ;
    
#line 4731 
    switch ((int)l4_hdr) {
      unsigned int tmp_4;
      int tmp_5;
      case 6: 
#line 4732 
      ;
      
#line 4733 
      type_tucmd |= 2048U;
      
#line 4734 
      tmp_4 = tcp_hdrlen((struct sk_buff const *)skb);
      
#line 4734 
      mss_l4len_idx = tmp_4 << 8;
      
#line 4736 
      goto ldv_58292;
      case 132: 
#line 4737 
      ;
      
#line 4738 
      type_tucmd |= 4096U;
      
#line 4739 
      mss_l4len_idx = 3072U;
      
#line 4741 
      goto ldv_58292;
      case 17: 
#line 4742 
      ;
      
#line 4743 
      mss_l4len_idx = 2048U;
      
#line 4745 
      goto ldv_58292;
      default: 
#line 4746 
      ;
      
#line 4747 
      tmp_5 = net_ratelimit();
      
#line 4747 
      if ((long)(tmp_5 != 0) != 0L) 
#line 4748 
                                    dev_warn((struct device const *)tx_ring->dev,"partial checksum but l4 proto=%x!\n",(int)l4_hdr); else ;
      
#line 4752 
      goto ldv_58292;
    }
    ldv_58292: 
#line 4756 
    ;
    
#line 4756 
    first->tx_flags |= 32U;
  }
  
#line 4759 
  tmp_6 = skb_network_offset((struct sk_buff const *)skb);
  
#line 4759 
  vlan_macip_lens = (unsigned int)(tmp_6 << 9) | vlan_macip_lens;
  
#line 4760 
  vlan_macip_lens = (first->tx_flags & 4294901760U) | vlan_macip_lens;
  
#line 4762 
  igb_tx_ctxtdesc(tx_ring,vlan_macip_lens,type_tucmd,mss_l4len_idx);
  return_label: 
#line 4763 
                return;
}


#line 4770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static u32 igb_tx_cmd_type(struct sk_buff *skb, u32 tx_flags)
{
  
#line 4773 
  u32 cmd_type = 573571072U;
  
#line 4778 
  cmd_type = (tx_flags & 1U) * 1073741824U | cmd_type;
  
#line 4782 
  cmd_type = (tx_flags & 2U) * 1073741824U | cmd_type;
  
#line 4786 
  cmd_type = (tx_flags & 4U) * 131072U | cmd_type;
  
#line 4790 
  cmd_type = (unsigned int)skb->no_fcs * 33554432U ^ cmd_type;
  
#line 4792 
  return cmd_type;
}


#line 4795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tx_olinfo_status(struct igb_ring *tx_ring, union e1000_adv_tx_desc *tx_desc, u32 tx_flags, unsigned int paylen)
{
  int tmp;
  
#line 4799 
  u32 olinfo_status = paylen << 14;
  
#line 4802 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& tx_ring->flags));
  
#line 4802 
  if (tmp != 0) 
#line 4803 
                olinfo_status = (unsigned int)((int)tx_ring->reg_idx << 4) | olinfo_status; else ;
  
#line 4806 
  olinfo_status = (tx_flags & 32U) * 16U | olinfo_status;
  
#line 4811 
  olinfo_status = (tx_flags & 16U) * 16U | olinfo_status;
  
#line 4815 
  tx_desc->read.olinfo_status = olinfo_status;
  
#line 4816 
  return;
}


#line 4818  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_maybe_stop_tx(struct igb_ring *tx_ring, u16 const size)
{
  int __retres;
  int tmp;
  
#line 4820 
  struct net_device *netdev = tx_ring->netdev;
  
#line 4822 
  netif_stop_subqueue(netdev,(unsigned short)((int)tx_ring->queue_index));
  
#line 4823 
  ldv_inline_asm();
  
#line 4833 
  tmp = igb_desc_unused(tx_ring);
  
#line 4833 
  ;
  
#line 4833 
  if (tmp < (int)size) {
    
#line 4834 
    __retres = -16;
    
#line 4834 
    goto return_label;
  }
  else ;
  
#line 4837 
  netif_wake_subqueue(netdev,(unsigned short)((int)tx_ring->queue_index));
  
#line 4839 
  u64_stats_init(& tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp2);
  
#line 4840 
  tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.restart_queue2 += 1ULL;
  
#line 4841 
  u64_stats_init(& tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp2);
  
#line 4843 
  __retres = 0;
  return_label: 
#line 4843 
                return __retres;
}


#line 4846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static int igb_maybe_stop_tx(struct igb_ring *tx_ring, u16 const size)
{
  int __retres;
  int tmp;
  int tmp_0;
  
#line 4848 
  tmp = igb_desc_unused(tx_ring);
  
#line 4848 
  ;
  
#line 4848 
  if (tmp >= (int)size) {
    
#line 4849 
    __retres = 0;
    
#line 4849 
    goto return_label;
  }
  else ;
  
#line 4850 
  tmp_0 = __igb_maybe_stop_tx(tx_ring,(unsigned short)((int)size));
  
#line 4850 
  __retres = tmp_0;
  return_label: 
#line 4850 
                return __retres;
}


#line 4853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tx_map(struct igb_ring *tx_ring, struct igb_tx_buffer *first, u8 const hdr_len)
{
  struct igb_tx_buffer *tx_buffer;
  union e1000_adv_tx_desc *tx_desc;
  struct skb_frag_struct *frag;
  dma_addr_t dma;
  unsigned int data_len;
  unsigned int size;
  unsigned char *tmp_0;
  int tmp_1;
  struct netdev_queue *tmp_2;
  bool tmp_4;
  struct netdev_queue *tmp_3;
  
#line 4857 
  struct sk_buff *skb = first->skb;
  
#line 4863 
  u32 tx_flags = first->tx_flags;
  
#line 4864 
  u32 cmd_type = igb_tx_cmd_type(skb,tx_flags);
  
#line 4865 
  u16 i = tx_ring->next_to_use;
  
#line 4867 
  tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc + (int)i;
  
#line 4869 
  igb_tx_olinfo_status(tx_ring,tx_desc,tx_flags,skb->len - (unsigned int)hdr_len);
  
#line 4871 
  size = skb_headlen((struct sk_buff const *)skb);
  
#line 4872 
  data_len = skb->data_len;
  
#line 4874 
  dma = dma_map_single_attrs(tx_ring->dev,(void *)skb->data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
  
#line 4876 
  tx_buffer = first;
  
#line 4878 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 4878 
  frag = & ((struct skb_shared_info *)tmp_0)->frags[0];
  ldv_58337: 
#line 4879 
  ;
  
#line 4879 
  tmp_1 = dma_mapping_error(tx_ring->dev,dma);
  
#line 4879 
  if (tmp_1 != 0) 
#line 4880 
                  goto dma_error; else ;
  
#line 4883 
  tx_buffer->len = size;
  
#line 4884 
  tx_buffer->dma = dma;
  
#line 4886 
  tx_desc->read.buffer_addr = dma;
  
#line 4888 
  goto ldv_58334;
  ldv_58333: 
#line 4889 
  ;
  
#line 4889 
  tx_desc->read.cmd_type_len = cmd_type ^ 32768U;
  
#line 4892 
  i = (u16)((int)i + 1);
  
#line 4893 
  tx_desc += 1;
  
#line 4894 
  if ((int)tx_ring->count == (int)i) {
    
#line 4895 
    tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc;
    
#line 4896 
    i = (unsigned short)0U;
  }
  else ;
  
#line 4898 
  tx_desc->read.olinfo_status = 0U;
  
#line 4900 
  dma += 32768ULL;
  
#line 4901 
  size += 4294934528U;
  
#line 4903 
  tx_desc->read.buffer_addr = dma;
  ldv_58334: 
#line 4904 
  ;
  
#line 4888 
  if ((long)(size > 32768U) != 0L) 
#line 4890 
                                   goto ldv_58333; else 
#line 4893 
                                                        goto ldv_58335;
  ldv_58335: 
#line 4894 
  ;
  
#line 4906 
  if ((long)(data_len == 0U) != 0L) 
#line 4907 
                                    goto ldv_58336; else ;
  
#line 4909 
  tx_desc->read.cmd_type_len = cmd_type ^ size;
  
#line 4911 
  i = (u16)((int)i + 1);
  
#line 4912 
  tx_desc += 1;
  
#line 4913 
  if ((int)tx_ring->count == (int)i) {
    
#line 4914 
    tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc;
    
#line 4915 
    i = (unsigned short)0U;
  }
  else ;
  
#line 4917 
  tx_desc->read.olinfo_status = 0U;
  
#line 4919 
  size = skb_frag_size((skb_frag_t const *)frag);
  
#line 4920 
  data_len -= size;
  
#line 4922 
  dma = skb_frag_dma_map(tx_ring->dev,(skb_frag_t const *)frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 4925 
  tx_buffer = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info + (int)i;
  
#line 4878 
  frag += 1;
  
#line 4879 
  goto ldv_58337;
  ldv_58336: 
#line 4880 
  ;
  
#line 4929 
  cmd_type = (size | cmd_type) | 150994944U;
  
#line 4930 
  tx_desc->read.cmd_type_len = cmd_type;
  
#line 4932 
  ;
  
#line 4932 
  tmp_2 = txring_txq((struct igb_ring const *)tx_ring);
  
#line 4932 
  netdev_tx_sent_queue(tmp_2,first->bytecount);
  
#line 4935 
  first->time_stamp = jiffies;
  
#line 4936 
  ldv_inline_asm();
  
#line 4947 
  first->next_to_watch = tx_desc;
  
#line 4949 
  i = (u16)((int)i + 1);
  
#line 4950 
  if ((int)tx_ring->count == (int)i) 
#line 4951 
                                     i = (unsigned short)0U; else ;
  
#line 4953 
  tx_ring->next_to_use = i;
  
#line 4956 
  igb_maybe_stop_tx(tx_ring,(unsigned short)21);
  
#line 4958 
  tmp_3 = txring_txq((struct igb_ring const *)tx_ring);
  
#line 4958 
  tmp_4 = netif_xmit_stopped((struct netdev_queue const *)tmp_3);
  
#line 4958 
  if ((int)tmp_4 != 0) 
#line 4958 
                       goto _LOR;
  else 
    
#line 4958 
    if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) {
      _LOR: {
              
#line 4959 
              writel((unsigned int)i,(void volatile *)tx_ring->tail);
              
#line 4960 
              ldv_inline_asm();
            }
    }
    else ;
  
#line 4966 
  goto return_label;
  dma_error: 
#line 4968 
  ;
  
#line 4969 
  dev_err((struct device const *)tx_ring->dev,"TX DMA map failed\n");
  ldv_58339: 
#line 4970 
  ;
  
#line 4973 
  tx_buffer = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info + (int)i;
  
#line 4974 
  igb_unmap_and_free_tx_resource(tx_ring,tx_buffer);
  
#line 4975 
  if (tx_buffer == first) 
#line 4976 
                          goto ldv_58338; else ;
  
#line 4977 
  if ((unsigned int)i == 0U) 
#line 4978 
                             i = tx_ring->count; else ;
  
#line 4979 
  i = (u16)((int)i - 1);
  
#line 4973 
  goto ldv_58339;
  ldv_58338: 
#line 4974 
  ;
  
#line 4982 
  tx_ring->next_to_use = i;
  return_label: 
#line 4983 
                return;
}


#line 4985  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
netdev_tx_t igb_xmit_frame_ring(struct sk_buff *skb, struct igb_ring *tx_ring)
{
  netdev_tx_t __retres;
  struct igb_tx_buffer *first;
  int tso;
  unsigned short f;
  unsigned int tmp;
  unsigned char *tmp_1;
  unsigned char *tmp_2;
  int tmp_3;
  unsigned char *tmp_8;
  
#line 4990 
  u32 tx_flags = 0U;
  
#line 4992 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 4992 
  u16 count = (unsigned short)((tmp + 32767U) / 32768U);
  
#line 4993 
  __be16 protocol = vlan_get_protocol(skb);
  
#line 4994 
  u8 hdr_len = (unsigned char)0U;
  
#line 5002 
  f = (unsigned short)0U;
  
#line 5002 
  goto ldv_58352;
  ldv_58351: 
#line 5003 
  ;
  
#line 5003 
  tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 5003 
  count = (unsigned short)((int)((unsigned short)((((struct skb_shared_info *)tmp_1)->frags[(int)f].size + 32767U) / 32768U)) + (int)count);
  
#line 5002 
  f = (unsigned short)((int)f + 1);
  ldv_58352: 
#line 5003 
  ;
  
#line 5002 
  tmp_2 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 5002 
  ;
  
#line 5002 
  if ((int)((unsigned short)((struct skb_shared_info *)tmp_2)->nr_frags) > (int)f) 
    
#line 5004 
    goto ldv_58351; else 
#line 5007 
                         goto ldv_58353;
  ldv_58353: 
#line 5008 
  ;
  
#line 5005 
  tmp_3 = igb_maybe_stop_tx(tx_ring,(unsigned short)((int)((unsigned int)count + 3U)));
  
#line 5005 
  if (tmp_3 != 0) {
    
#line 5007 
    __retres = NETDEV_TX_BUSY;
    
#line 5007 
    goto return_label;
  }
  else ;
  
#line 5011 
  first = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info + (int)tx_ring->next_to_use;
  
#line 5012 
  first->skb = skb;
  
#line 5013 
  first->bytecount = skb->len;
  
#line 5014 
  first->gso_segs = (unsigned short)1U;
  
#line 5016 
  tmp_8 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 5016 
  ;
  
#line 5016 
  if ((long)(((int)((struct skb_shared_info *)tmp_8)->tx_flags & 1) != 0) != 0L) {
    int tmp_7;
    
#line 5017 
    struct igb_adapter *adapter = netdev_priv((struct net_device const *)tx_ring->netdev);
    
#line 5019 
    tmp_7 = test_and_set_bit_lock(3L,(unsigned long volatile *)(& adapter->state));
    
#line 5019 
    if (tmp_7 == 0) {
      unsigned char *tmp_5;
      unsigned char *tmp_6;
      
#line 5021 
      tmp_5 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 5021 
      tmp_6 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 5021 
      ((struct skb_shared_info *)tmp_5)->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)tmp_6)->tx_flags | 4U);
      
#line 5022 
      tx_flags |= 4U;
      
#line 5024 
      adapter->ptp_tx_skb = skb_get_0(skb);
      
#line 5025 
      adapter->ptp_tx_start = jiffies;
      
#line 5026 
      if (adapter->hw.mac.type == (unsigned int)e1000_82576) 
#line 5027 
                                                             ldv_schedule_work_107(& adapter->ptp_tx_work); else ;
    }
    else ;
  }
  else ;
  
#line 5031 
  skb_tx_timestamp(skb);
  
#line 5033 
  if (((int)skb->vlan_tci & 4096) != 0) {
    
#line 5034 
    tx_flags |= 1U;
    
#line 5035 
    tx_flags = ((unsigned int)((int)skb->vlan_tci << 16) & 4026466304U) | tx_flags;
  }
  else ;
  
#line 5039 
  first->tx_flags = tx_flags;
  
#line 5040 
  first->protocol = protocol;
  
#line 5042 
  tso = igb_tso(tx_ring,first,& hdr_len);
  
#line 5043 
  if (tso < 0) 
#line 5044 
               goto out_drop;
  else 
    
#line 5045 
    if (tso == 0) 
#line 5046 
                  igb_tx_csum(tx_ring,first); else ;
  
#line 5048 
  igb_tx_map(tx_ring,first,(unsigned char)((int)hdr_len));
  
#line 5050 
  __retres = NETDEV_TX_OK;
  
#line 5050 
  goto return_label;
  out_drop: 
#line 5052 
  ;
  
#line 5053 
  igb_unmap_and_free_tx_resource(tx_ring,first);
  
#line 5055 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 5055 
                return __retres;
}


#line 5058  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static struct igb_ring *igb_tx_queue_mapping(struct igb_adapter *adapter, struct sk_buff *skb)
{
  struct igb_ring *__retres;
  
#line 5061 
  unsigned int r_idx = (unsigned int)skb->queue_mapping;
  
#line 5063 
  if ((unsigned int)adapter->num_tx_queues <= r_idx) 
#line 5064 
                                                     r_idx %= (unsigned int)adapter->num_tx_queues; else ;
  
#line 5066 
  __retres = adapter->tx_ring[r_idx];
  
#line 5066 
  return __retres;
}


#line 5069  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static netdev_tx_t igb_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  netdev_tx_t __retres;
  int tmp_0;
  int tmp_1;
  netdev_tx_t tmp_3;
  struct igb_ring *tmp_2;
  
#line 5072 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5074 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 5074 
  if (tmp_0 != 0) {
    
#line 5075 
    dev_kfree_skb_any(skb);
    
#line 5076 
    __retres = NETDEV_TX_OK;
    
#line 5076 
    goto return_label;
  }
  else ;
  
#line 5079 
  if (skb->len == 0U) {
    
#line 5080 
    dev_kfree_skb_any(skb);
    
#line 5081 
    __retres = NETDEV_TX_OK;
    
#line 5081 
    goto return_label;
  }
  else ;
  
#line 5087 
  tmp_1 = skb_put_padto(skb,17U);
  
#line 5087 
  if (tmp_1 != 0) {
    
#line 5088 
    __retres = NETDEV_TX_OK;
    
#line 5088 
    goto return_label;
  }
  else ;
  
#line 5090 
  tmp_2 = igb_tx_queue_mapping(adapter,skb);
  
#line 5090 
  ;
  
#line 5090 
  tmp_3 = igb_xmit_frame_ring(skb,tmp_2);
  
#line 5090 
  __retres = tmp_3;
  return_label: 
#line 5090 
                return __retres;
}


#line 5097  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tx_timeout(struct net_device *netdev)
{
  
#line 5099 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5100 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5103 
  adapter->tx_timeout_count += 1U;
  
#line 5105 
  if (hw->mac.type > (unsigned int)e1000_82576) 
#line 5106 
                                                hw->dev_spec._82575.global_device_reset = (_Bool)1; else ;
  
#line 5108 
  ldv_schedule_work_108(& adapter->reset_task);
  {
    u8 * volatile *tmp_0;
    {
      
#line 5109 
      u8 *__var = (u8 *)0U;
      
#line 5109 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5109 
    u8 *hw_addr = *tmp_0;
    
#line 5109 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5109 
                                           writel(adapter->eims_enable_mask & ~ adapter->eims_other,(void volatile *)(hw_addr + 5408U)); else ;
  }
  
#line 5111 
  return;
}


#line 5113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_reset_task(struct work_struct *work)
{
  struct igb_adapter *adapter;
  struct igb_adapter *tmp;
  {
    
#line 5116 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 5116 
    tmp = (struct igb_adapter *)__mptr + 18446744073709550424U;
  }
  
#line 5116 
  adapter = tmp;
  
#line 5118 
  igb_dump(adapter);
  
#line 5119 
  netdev_err((struct net_device const *)adapter->netdev,"Reset adapter\n");
  
#line 5120 
  igb_reinit_locked(adapter);
  
#line 5121 
  return;
}


#line 5128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct rtnl_link_stats64 *igb_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  
#line 5131 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5133 
  ldv_spin_lock_109(& adapter->stats64_lock);
  
#line 5134 
  igb_update_stats(adapter,& adapter->stats64);
  
#line 5135 
  memcpy((void *)stats,(void const *)(& adapter->stats64),184UL);
  
#line 5136 
  ldv_spin_unlock_110(& adapter->stats64_lock);
  
#line 5138 
  return stats;
}


#line 5148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_change_mtu(struct net_device *netdev, int new_mtu)
{
  int __retres;
  int tmp_0;
  bool tmp_1;
  bool tmp_2;
  
#line 5150 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5151 
  struct pci_dev *pdev = adapter->pdev;
  
#line 5152 
  int max_frame = new_mtu + 22;
  
#line 5154 
  if (new_mtu <= 67 || max_frame > 16128) {
    
#line 5155 
    dev_err((struct device const *)(& pdev->dev),"Invalid MTU setting\n");
    
#line 5156 
    __retres = -22;
    
#line 5156 
    goto return_label;
  }
  else ;
  
#line 5160 
  if (max_frame > 9238) {
    
#line 5161 
    dev_err((struct device const *)(& pdev->dev),"MTU > 9216 not supported.\n");
    
#line 5162 
    __retres = -22;
    
#line 5162 
    goto return_label;
  }
  else ;
  
#line 5166 
  if (max_frame <= 1517) 
#line 5167 
                         max_frame = 1518; else ;
  
#line 5169 
  goto ldv_58393;
  ldv_58392: 
#line 5170 
  ;
  
#line 5170 
  usleep_range(1000UL,2000UL);
  ldv_58393: 
#line 5171 
  ;
  
#line 5169 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 5169 
  if (tmp_0 != 0) 
#line 5171 
                  goto ldv_58392; else 
#line 5174 
                                       goto ldv_58394;
  ldv_58394: 
#line 5175 
  ;
  
#line 5173 
  adapter->max_frame_size = (unsigned int)max_frame;
  
#line 5175 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 5175 
  if ((int)tmp_1 != 0) 
#line 5176 
                       igb_down(adapter); else ;
  
#line 5178 
  _dev_info((struct device const *)(& pdev->dev),"changing MTU from %d to %d\n",netdev->mtu,new_mtu);
  
#line 5180 
  netdev->mtu = (unsigned int)new_mtu;
  
#line 5182 
  tmp_2 = netif_running((struct net_device const *)netdev);
  
#line 5182 
  if ((int)tmp_2 != 0) 
#line 5183 
                       igb_up(adapter); else 
#line 5185 
                                             igb_reset(adapter);
  
#line 5187 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 5189 
  __retres = 0;
  return_label: 
#line 5189 
                return __retres;
}


#line 5196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_update_stats(struct igb_adapter *adapter, struct rtnl_link_stats64 *net_stats)
{
  u32 reg;
  u32 mpc;
  int i;
  u64 bytes;
  u64 packets;
  unsigned int start;
  u64 _bytes;
  u64 _packets;
  int tmp;
  u32 tmp_4;
  u32 tmp_5;
  u32 tmp_6;
  u32 tmp_7;
  u32 tmp_8;
  u32 tmp_9;
  u32 tmp_10;
  u32 tmp_11;
  u32 tmp_12;
  u32 tmp_13;
  u32 tmp_14;
  u32 tmp_15;
  u32 tmp_16;
  u32 tmp_17;
  u32 tmp_18;
  u32 tmp_19;
  u32 tmp_20;
  u32 tmp_21;
  u32 tmp_22;
  u32 tmp_23;
  u32 tmp_24;
  u32 tmp_25;
  u32 tmp_26;
  u32 tmp_27;
  u32 tmp_28;
  u32 tmp_29;
  u32 tmp_30;
  u32 tmp_31;
  u32 tmp_32;
  u32 tmp_33;
  u32 tmp_34;
  u32 tmp_35;
  u32 tmp_36;
  u32 tmp_37;
  u32 tmp_38;
  u32 tmp_39;
  u32 tmp_40;
  u32 tmp_41;
  u32 tmp_42;
  u32 tmp_43;
  u32 tmp_44;
  u32 tmp_45;
  u32 tmp_46;
  u32 tmp_47;
  u32 tmp_48;
  u32 tmp_51;
  u32 tmp_52;
  u32 tmp_53;
  u32 tmp_54;
  u32 tmp_55;
  u32 tmp_56;
  u32 tmp_57;
  u32 tmp_58;
  u32 tmp_59;
  u32 tmp_60;
  u32 tmp_61;
  u32 tmp_62;
  u32 tmp_63;
  u32 tmp_64;
  
#line 5199 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5200 
  struct pci_dev *pdev = adapter->pdev;
  
#line 5210 
  if ((unsigned int)adapter->link_speed == 0U) 
#line 5211 
                                               goto return_label; else ;
  
#line 5212 
  tmp = pci_channel_offline(pdev);
  
#line 5212 
  if (tmp != 0) 
#line 5213 
                goto return_label; else ;
  
#line 5215 
  bytes = 0ULL;
  
#line 5216 
  packets = 0ULL;
  
#line 5218 
  rcu_read_lock();
  
#line 5219 
  i = 0;
  
#line 5219 
  goto ldv_58417;
  ldv_58416: 
#line 5220 
  ;
  {
    bool tmp_2;
    
#line 5220 
    struct igb_ring *ring = adapter->rx_ring[i];
    
#line 5221 
    u32 rqdpc = igb_rd32(hw,(unsigned int)(i * 64 + 49200));
    
#line 5222 
    if (hw->mac.type > (unsigned int)e1000_i354) {
      u8 * volatile *tmp_1;
      {
        
#line 5223 
        u8 *__var = (u8 *)0U;
        
#line 5223 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 5223 
      u8 *hw_addr = *tmp_1;
      
#line 5223 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5223 
                                             writel(0U,(void volatile *)(hw_addr + (i * 64 + 49200))); else ;
    }
    else ;
    
#line 5225 
    if (rqdpc != 0U) {
      
#line 5226 
      ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.drops += (unsigned long long)rqdpc;
      
#line 5227 
      net_stats->rx_fifo_errors += (unsigned long long)rqdpc;
    }
    else ;
    ldv_58414: 
#line 5229 
    ;
    
#line 5231 
    start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_syncp));
    
#line 5232 
    _bytes = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.bytes;
    
#line 5233 
    _packets = ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.packets;
    
#line 5234 
    tmp_2 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_syncp),start);
    
#line 5234 
    if ((int)tmp_2 != 0) 
#line 5236 
                         goto ldv_58414; else 
#line 5239 
                                              goto ldv_58415;
    ldv_58415: 
#line 5240 
    ;
    
#line 5235 
    bytes += _bytes;
    
#line 5236 
    packets += _packets;
  }
  
#line 5219 
  i += 1;
  ldv_58417: 
#line 5220 
  ;
  
#line 5219 
  if (adapter->num_rx_queues > i) 
#line 5221 
                                  goto ldv_58416; else 
#line 5224 
                                                       goto ldv_58418;
  ldv_58418: 
#line 5225 
  ;
  
#line 5239 
  net_stats->rx_bytes = bytes;
  
#line 5240 
  net_stats->rx_packets = packets;
  
#line 5242 
  bytes = 0ULL;
  
#line 5243 
  packets = 0ULL;
  
#line 5244 
  i = 0;
  
#line 5244 
  goto ldv_58423;
  ldv_58422: 
#line 5245 
  ;
  {
    bool tmp_3;
    
#line 5245 
    struct igb_ring *ring_0 = adapter->tx_ring[i];
    ldv_58420: 
#line 5246 
    ;
    
#line 5247 
    start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& ring_0->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp));
    
#line 5248 
    _bytes = ring_0->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.bytes;
    
#line 5249 
    _packets = ring_0->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.packets;
    
#line 5250 
    tmp_3 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& ring_0->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp),start);
    
#line 5250 
    if ((int)tmp_3 != 0) 
#line 5252 
                         goto ldv_58420; else 
#line 5255 
                                              goto ldv_58421;
    ldv_58421: 
#line 5256 
    ;
    
#line 5251 
    bytes += _bytes;
    
#line 5252 
    packets += _packets;
  }
  
#line 5244 
  i += 1;
  ldv_58423: 
#line 5245 
  ;
  
#line 5244 
  if (adapter->num_tx_queues > i) 
#line 5246 
                                  goto ldv_58422; else 
#line 5249 
                                                       goto ldv_58424;
  ldv_58424: 
#line 5250 
  ;
  
#line 5254 
  net_stats->tx_bytes = bytes;
  
#line 5255 
  net_stats->tx_packets = packets;
  
#line 5256 
  rcu_read_unlock();
  
#line 5259 
  tmp_4 = igb_rd32(hw,16384U);
  
#line 5259 
  adapter->stats.crcerrs += (unsigned long long)tmp_4;
  
#line 5260 
  tmp_5 = igb_rd32(hw,16500U);
  
#line 5260 
  adapter->stats.gprc += (unsigned long long)tmp_5;
  
#line 5261 
  tmp_6 = igb_rd32(hw,16520U);
  
#line 5261 
  adapter->stats.gorc += (unsigned long long)tmp_6;
  
#line 5262 
  igb_rd32(hw,16524U);
  
#line 5263 
  tmp_7 = igb_rd32(hw,16504U);
  
#line 5263 
  adapter->stats.bprc += (unsigned long long)tmp_7;
  
#line 5264 
  tmp_8 = igb_rd32(hw,16508U);
  
#line 5264 
  adapter->stats.mprc += (unsigned long long)tmp_8;
  
#line 5265 
  tmp_9 = igb_rd32(hw,16556U);
  
#line 5265 
  adapter->stats.roc += (unsigned long long)tmp_9;
  
#line 5267 
  tmp_10 = igb_rd32(hw,16476U);
  
#line 5267 
  adapter->stats.prc64 += (unsigned long long)tmp_10;
  
#line 5268 
  tmp_11 = igb_rd32(hw,16480U);
  
#line 5268 
  adapter->stats.prc127 += (unsigned long long)tmp_11;
  
#line 5269 
  tmp_12 = igb_rd32(hw,16484U);
  
#line 5269 
  adapter->stats.prc255 += (unsigned long long)tmp_12;
  
#line 5270 
  tmp_13 = igb_rd32(hw,16488U);
  
#line 5270 
  adapter->stats.prc511 += (unsigned long long)tmp_13;
  
#line 5271 
  tmp_14 = igb_rd32(hw,16492U);
  
#line 5271 
  adapter->stats.prc1023 += (unsigned long long)tmp_14;
  
#line 5272 
  tmp_15 = igb_rd32(hw,16496U);
  
#line 5272 
  adapter->stats.prc1522 += (unsigned long long)tmp_15;
  
#line 5273 
  tmp_16 = igb_rd32(hw,16392U);
  
#line 5273 
  adapter->stats.symerrs += (unsigned long long)tmp_16;
  
#line 5274 
  tmp_17 = igb_rd32(hw,16440U);
  
#line 5274 
  adapter->stats.sec += (unsigned long long)tmp_17;
  
#line 5276 
  mpc = igb_rd32(hw,16400U);
  
#line 5277 
  adapter->stats.mpc += (unsigned long long)mpc;
  
#line 5278 
  net_stats->rx_fifo_errors += (unsigned long long)mpc;
  
#line 5279 
  tmp_18 = igb_rd32(hw,16404U);
  
#line 5279 
  adapter->stats.scc += (unsigned long long)tmp_18;
  
#line 5280 
  tmp_19 = igb_rd32(hw,16408U);
  
#line 5280 
  adapter->stats.ecol += (unsigned long long)tmp_19;
  
#line 5281 
  tmp_20 = igb_rd32(hw,16412U);
  
#line 5281 
  adapter->stats.mcc += (unsigned long long)tmp_20;
  
#line 5282 
  tmp_21 = igb_rd32(hw,16416U);
  
#line 5282 
  adapter->stats.latecol += (unsigned long long)tmp_21;
  
#line 5283 
  tmp_22 = igb_rd32(hw,16432U);
  
#line 5283 
  adapter->stats.dc += (unsigned long long)tmp_22;
  
#line 5284 
  tmp_23 = igb_rd32(hw,16448U);
  
#line 5284 
  adapter->stats.rlec += (unsigned long long)tmp_23;
  
#line 5285 
  tmp_24 = igb_rd32(hw,16456U);
  
#line 5285 
  adapter->stats.xonrxc += (unsigned long long)tmp_24;
  
#line 5286 
  tmp_25 = igb_rd32(hw,16460U);
  
#line 5286 
  adapter->stats.xontxc += (unsigned long long)tmp_25;
  
#line 5287 
  tmp_26 = igb_rd32(hw,16464U);
  
#line 5287 
  adapter->stats.xoffrxc += (unsigned long long)tmp_26;
  
#line 5288 
  tmp_27 = igb_rd32(hw,16468U);
  
#line 5288 
  adapter->stats.xofftxc += (unsigned long long)tmp_27;
  
#line 5289 
  tmp_28 = igb_rd32(hw,16472U);
  
#line 5289 
  adapter->stats.fcruc += (unsigned long long)tmp_28;
  
#line 5290 
  tmp_29 = igb_rd32(hw,16512U);
  
#line 5290 
  adapter->stats.gptc += (unsigned long long)tmp_29;
  
#line 5291 
  tmp_30 = igb_rd32(hw,16528U);
  
#line 5291 
  adapter->stats.gotc += (unsigned long long)tmp_30;
  
#line 5292 
  igb_rd32(hw,16532U);
  
#line 5293 
  tmp_31 = igb_rd32(hw,16544U);
  
#line 5293 
  adapter->stats.rnbc += (unsigned long long)tmp_31;
  
#line 5294 
  tmp_32 = igb_rd32(hw,16548U);
  
#line 5294 
  adapter->stats.ruc += (unsigned long long)tmp_32;
  
#line 5295 
  tmp_33 = igb_rd32(hw,16552U);
  
#line 5295 
  adapter->stats.rfc += (unsigned long long)tmp_33;
  
#line 5296 
  tmp_34 = igb_rd32(hw,16560U);
  
#line 5296 
  adapter->stats.rjc += (unsigned long long)tmp_34;
  
#line 5297 
  tmp_35 = igb_rd32(hw,16580U);
  
#line 5297 
  adapter->stats.tor += (unsigned long long)tmp_35;
  
#line 5298 
  tmp_36 = igb_rd32(hw,16588U);
  
#line 5298 
  adapter->stats.tot += (unsigned long long)tmp_36;
  
#line 5299 
  tmp_37 = igb_rd32(hw,16592U);
  
#line 5299 
  adapter->stats.tpr += (unsigned long long)tmp_37;
  
#line 5301 
  tmp_38 = igb_rd32(hw,16600U);
  
#line 5301 
  adapter->stats.ptc64 += (unsigned long long)tmp_38;
  
#line 5302 
  tmp_39 = igb_rd32(hw,16604U);
  
#line 5302 
  adapter->stats.ptc127 += (unsigned long long)tmp_39;
  
#line 5303 
  tmp_40 = igb_rd32(hw,16608U);
  
#line 5303 
  adapter->stats.ptc255 += (unsigned long long)tmp_40;
  
#line 5304 
  tmp_41 = igb_rd32(hw,16612U);
  
#line 5304 
  adapter->stats.ptc511 += (unsigned long long)tmp_41;
  
#line 5305 
  tmp_42 = igb_rd32(hw,16616U);
  
#line 5305 
  adapter->stats.ptc1023 += (unsigned long long)tmp_42;
  
#line 5306 
  tmp_43 = igb_rd32(hw,16620U);
  
#line 5306 
  adapter->stats.ptc1522 += (unsigned long long)tmp_43;
  
#line 5308 
  tmp_44 = igb_rd32(hw,16624U);
  
#line 5308 
  adapter->stats.mptc += (unsigned long long)tmp_44;
  
#line 5309 
  tmp_45 = igb_rd32(hw,16628U);
  
#line 5309 
  adapter->stats.bptc += (unsigned long long)tmp_45;
  
#line 5311 
  tmp_46 = igb_rd32(hw,16596U);
  
#line 5311 
  adapter->stats.tpt += (unsigned long long)tmp_46;
  
#line 5312 
  tmp_47 = igb_rd32(hw,16424U);
  
#line 5312 
  adapter->stats.colc += (unsigned long long)tmp_47;
  
#line 5314 
  tmp_48 = igb_rd32(hw,16388U);
  
#line 5314 
  adapter->stats.algnerrc += (unsigned long long)tmp_48;
  
#line 5316 
  reg = igb_rd32(hw,24U);
  
#line 5317 
  if ((reg & 12582912U) == 0U) {
    u32 tmp_49;
    
#line 5318 
    tmp_49 = igb_rd32(hw,16396U);
    
#line 5318 
    adapter->stats.rxerrc += (unsigned long long)tmp_49;
    
#line 5321 
    if ((unsigned int)hw->mac.type + 4294967290U > 1U) {
      u32 tmp_50;
      
#line 5323 
      tmp_50 = igb_rd32(hw,16436U);
      
#line 5323 
      adapter->stats.tncrs += (unsigned long long)tmp_50;
    }
    else ;
  }
  else ;
  
#line 5326 
  tmp_51 = igb_rd32(hw,16632U);
  
#line 5326 
  adapter->stats.tsctc += (unsigned long long)tmp_51;
  
#line 5327 
  tmp_52 = igb_rd32(hw,16636U);
  
#line 5327 
  adapter->stats.tsctfc += (unsigned long long)tmp_52;
  
#line 5329 
  tmp_53 = igb_rd32(hw,16640U);
  
#line 5329 
  adapter->stats.iac += (unsigned long long)tmp_53;
  
#line 5330 
  tmp_54 = igb_rd32(hw,16676U);
  
#line 5330 
  adapter->stats.icrxoc += (unsigned long long)tmp_54;
  
#line 5331 
  tmp_55 = igb_rd32(hw,16644U);
  
#line 5331 
  adapter->stats.icrxptc += (unsigned long long)tmp_55;
  
#line 5332 
  tmp_56 = igb_rd32(hw,16648U);
  
#line 5332 
  adapter->stats.icrxatc += (unsigned long long)tmp_56;
  
#line 5333 
  tmp_57 = igb_rd32(hw,16652U);
  
#line 5333 
  adapter->stats.ictxptc += (unsigned long long)tmp_57;
  
#line 5334 
  tmp_58 = igb_rd32(hw,16656U);
  
#line 5334 
  adapter->stats.ictxatc += (unsigned long long)tmp_58;
  
#line 5335 
  tmp_59 = igb_rd32(hw,16664U);
  
#line 5335 
  adapter->stats.ictxqec += (unsigned long long)tmp_59;
  
#line 5336 
  tmp_60 = igb_rd32(hw,16668U);
  
#line 5336 
  adapter->stats.ictxqmtc += (unsigned long long)tmp_60;
  
#line 5337 
  tmp_61 = igb_rd32(hw,16672U);
  
#line 5337 
  adapter->stats.icrxdmtc += (unsigned long long)tmp_61;
  
#line 5340 
  net_stats->multicast = adapter->stats.mprc;
  
#line 5341 
  net_stats->collisions = adapter->stats.colc;
  
#line 5348 
  net_stats->rx_errors = ((((adapter->stats.rxerrc + adapter->stats.crcerrs) + adapter->stats.algnerrc) + adapter->stats.ruc) + adapter->stats.roc) + adapter->stats.cexterr;
  
#line 5352 
  net_stats->rx_length_errors = adapter->stats.ruc + adapter->stats.roc;
  
#line 5354 
  net_stats->rx_crc_errors = adapter->stats.crcerrs;
  
#line 5355 
  net_stats->rx_frame_errors = adapter->stats.algnerrc;
  
#line 5356 
  net_stats->rx_missed_errors = adapter->stats.mpc;
  
#line 5359 
  net_stats->tx_errors = adapter->stats.ecol + adapter->stats.latecol;
  
#line 5361 
  net_stats->tx_aborted_errors = adapter->stats.ecol;
  
#line 5362 
  net_stats->tx_window_errors = adapter->stats.latecol;
  
#line 5363 
  net_stats->tx_carrier_errors = adapter->stats.tncrs;
  
#line 5368 
  tmp_62 = igb_rd32(hw,16572U);
  
#line 5368 
  adapter->stats.mgptc += (unsigned long long)tmp_62;
  
#line 5369 
  tmp_63 = igb_rd32(hw,16564U);
  
#line 5369 
  adapter->stats.mgprc += (unsigned long long)tmp_63;
  
#line 5370 
  tmp_64 = igb_rd32(hw,16568U);
  
#line 5370 
  adapter->stats.mgpdc += (unsigned long long)tmp_64;
  
#line 5373 
  reg = igb_rd32(hw,22560U);
  
#line 5374 
  if ((reg & 268435456U) != 0U) {
    u32 tmp_65;
    u32 tmp_66;
    u32 tmp_67;
    u32 tmp_68;
    
#line 5375 
    tmp_65 = igb_rd32(hw,36836U);
    
#line 5375 
    adapter->stats.o2bgptc += (unsigned long long)tmp_65;
    
#line 5376 
    tmp_66 = igb_rd32(hw,16732U);
    
#line 5376 
    adapter->stats.o2bspc += (unsigned long long)tmp_66;
    
#line 5377 
    tmp_67 = igb_rd32(hw,36832U);
    
#line 5377 
    adapter->stats.b2ospc += (unsigned long long)tmp_67;
    
#line 5378 
    tmp_68 = igb_rd32(hw,16728U);
    
#line 5378 
    adapter->stats.b2ogprc += (unsigned long long)tmp_68;
  }
  else ;
  return_label: 
#line 5380 
                return;
}


#line 5382  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_tsync_interrupt(struct igb_adapter *adapter)
{
  struct ptp_clock_event event;
  struct timespec ts;
  u32 tsauxc;
  u32 sec;
  u32 nsec;
  
#line 5384 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5387 
  u32 ack = 0U;
  
#line 5387 
  u32 tsicr = igb_rd32(hw,46700U);
  
#line 5389 
  if ((tsicr & 1U) != 0U) {
    
#line 5390 
    event.type = 2;
    
#line 5391 
    if (adapter->ptp_caps.pps != 0) 
#line 5392 
                                    ptp_clock_event(adapter->ptp_clock,& event); else 
                                                                    
#line 5394 
                                                                    dev_err((struct device const *)(& (adapter->pdev)->dev),"unexpected SYS WRAP");
    
#line 5395 
    ack |= 1U;
  }
  else ;
  
#line 5398 
  if ((tsicr & 2U) != 0U) {
    
#line 5400 
    ldv_schedule_work_111(& adapter->ptp_tx_work);
    
#line 5401 
    ack |= 2U;
  }
  else ;
  
#line 5404 
  if ((tsicr & 8U) != 0U) {
    
#line 5405 
    ldv_spin_lock_112(& adapter->tmreg_lock);
    
#line 5406 
    ts = timespec_add(adapter->perout[0].start,adapter->perout[0].period);
    {
      u8 * volatile *tmp_0;
      {
        
#line 5408 
        u8 *__var = (u8 *)0U;
        
#line 5408 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 5408 
      u8 *hw_addr = *tmp_0;
      
#line 5408 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5408 
                                             writel((unsigned int)ts.tv_nsec,(void volatile *)(hw_addr + 46660U)); else ;
    }
    {
      u8 * volatile *tmp_1;
      {
        
#line 5409 
        u8 *__var_0 = (u8 *)0U;
        
#line 5409 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 5409 
      u8 *hw_addr_0 = *tmp_1;
      
#line 5409 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 5409 
                                               writel((unsigned int)ts.tv_sec,(void volatile *)(hw_addr_0 + 46664U)); else ;
    }
    
#line 5410 
    tsauxc = igb_rd32(hw,46656U);
    
#line 5411 
    tsauxc |= 1U;
    {
      u8 * volatile *tmp_2;
      {
        
#line 5412 
        u8 *__var_1 = (u8 *)0U;
        
#line 5412 
        tmp_2 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 5412 
      u8 *hw_addr_1 = *tmp_2;
      
#line 5412 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 5412 
                                               writel(tsauxc,(void volatile *)(hw_addr_1 + 46656U)); else ;
    }
    
#line 5413 
    adapter->perout[0].start = ts;
    
#line 5414 
    ldv_spin_unlock_113(& adapter->tmreg_lock);
    
#line 5415 
    ack |= 8U;
  }
  else ;
  
#line 5418 
  if ((tsicr & 16U) != 0U) {
    
#line 5419 
    ldv_spin_lock_114(& adapter->tmreg_lock);
    
#line 5420 
    ts = timespec_add(adapter->perout[1].start,adapter->perout[1].period);
    {
      u8 * volatile *tmp_3;
      {
        
#line 5422 
        u8 *__var_2 = (u8 *)0U;
        
#line 5422 
        tmp_3 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 5422 
      u8 *hw_addr_2 = *tmp_3;
      
#line 5422 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 5422 
                                               writel((unsigned int)ts.tv_nsec,(void volatile *)(hw_addr_2 + 46668U)); else ;
    }
    {
      u8 * volatile *tmp_4;
      {
        
#line 5423 
        u8 *__var_3 = (u8 *)0U;
        
#line 5423 
        tmp_4 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 5423 
      u8 *hw_addr_3 = *tmp_4;
      
#line 5423 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 5423 
                                               writel((unsigned int)ts.tv_sec,(void volatile *)(hw_addr_3 + 46672U)); else ;
    }
    
#line 5424 
    tsauxc = igb_rd32(hw,46656U);
    
#line 5425 
    tsauxc |= 2U;
    {
      u8 * volatile *tmp_5;
      {
        
#line 5426 
        u8 *__var_4 = (u8 *)0U;
        
#line 5426 
        tmp_5 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 5426 
      u8 *hw_addr_4 = *tmp_5;
      
#line 5426 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 5426 
                                               writel(tsauxc,(void volatile *)(hw_addr_4 + 46656U)); else ;
    }
    
#line 5427 
    adapter->perout[1].start = ts;
    
#line 5428 
    ldv_spin_unlock_115(& adapter->tmreg_lock);
    
#line 5429 
    ack |= 16U;
  }
  else ;
  
#line 5432 
  if ((tsicr & 32U) != 0U) {
    
#line 5433 
    nsec = igb_rd32(hw,46684U);
    
#line 5434 
    sec = igb_rd32(hw,46688U);
    
#line 5435 
    event.type = 1;
    
#line 5436 
    event.index = 0;
    
#line 5437 
    event.__anonCompField_ptp_clock_event_116.timestamp = (unsigned long long)sec * 1000000000ULL + (unsigned long long)nsec;
    
#line 5438 
    ptp_clock_event(adapter->ptp_clock,& event);
    
#line 5439 
    ack |= 32U;
  }
  else ;
  
#line 5442 
  if ((tsicr & 64U) != 0U) {
    
#line 5443 
    nsec = igb_rd32(hw,46692U);
    
#line 5444 
    sec = igb_rd32(hw,46696U);
    
#line 5445 
    event.type = 1;
    
#line 5446 
    event.index = 1;
    
#line 5447 
    event.__anonCompField_ptp_clock_event_116.timestamp = (unsigned long long)sec * 1000000000ULL + (unsigned long long)nsec;
    
#line 5448 
    ptp_clock_event(adapter->ptp_clock,& event);
    
#line 5449 
    ack |= 64U;
  }
  else ;
  {
    u8 * volatile *tmp_6;
    {
      
#line 5453 
      u8 *__var_5 = (u8 *)0U;
      
#line 5453 
      tmp_6 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5453 
    u8 *hw_addr_5 = *tmp_6;
    
#line 5453 
    if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
#line 5453 
                                             writel(ack,(void volatile *)(hw_addr_5 + 46700U)); else ;
  }
  
#line 5455 
  return;
}


#line 5456  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static irqreturn_t igb_msix_other(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 5458 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 5459 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5460 
  u32 icr = igb_rd32(hw,192U);
  
#line 5463 
  if ((icr & 1073741824U) != 0U) 
#line 5464 
                                 ldv_schedule_work_116(& adapter->reset_task); else ;
  
#line 5466 
  if ((icr & 268435456U) != 0U) {
    
#line 5468 
    adapter->stats.doosync += 1ULL;
    
#line 5473 
    igb_check_wvbr(adapter);
  }
  else ;
  
#line 5477 
  if ((icr & 256U) != 0U) 
#line 5478 
                          igb_msg_task(adapter); else ;
  
#line 5480 
  if ((icr & 4U) != 0U) {
    int tmp_0;
    
#line 5481 
    hw->mac.get_link_status = (_Bool)1;
    
#line 5483 
    tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 5483 
    if (tmp_0 == 0) 
#line 5484 
                    ldv_mod_timer_117(& adapter->watchdog_timer,jiffies + 1UL); else ;
  }
  else ;
  
#line 5487 
  if ((icr & 524288U) != 0U) 
#line 5488 
                             igb_tsync_interrupt(adapter); else ;
  {
    u8 * volatile *tmp_1;
    {
      
#line 5490 
      u8 *__var = (u8 *)0U;
      
#line 5490 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5490 
    u8 *hw_addr = *tmp_1;
    
#line 5490 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5490 
                                           writel(adapter->eims_other,(void volatile *)(hw_addr + 5412U)); else ;
  }
  
#line 5492 
  __retres = IRQ_HANDLED;
  
#line 5492 
  return __retres;
}


#line 5495  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_write_itr(struct igb_q_vector *q_vector)
{
  
#line 5497 
  struct igb_adapter *adapter = q_vector->adapter;
  
#line 5498 
  u32 itr_val = (unsigned int)q_vector->itr_val & 32764U;
  
#line 5500 
  if ((unsigned int)q_vector->set_itr == 0U) 
#line 5501 
                                             goto return_label; else ;
  
#line 5503 
  if (itr_val == 0U) 
#line 5504 
                     itr_val = 4U; else ;
  
#line 5506 
  if (adapter->hw.mac.type == (unsigned int)e1000_82575) 
#line 5507 
                                                         itr_val = (itr_val << 16) | itr_val; else 
                                                                    
#line 5509 
                                                                    itr_val |= 2147483648U;
  
#line 5511 
  writel(itr_val,(void volatile *)q_vector->itr_register);
  
#line 5512 
  q_vector->set_itr = (unsigned char)0U;
  return_label: 
#line 5513 
                return;
}


#line 5515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static irqreturn_t igb_msix_ring(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 5517 
  struct igb_q_vector *q_vector = (struct igb_q_vector *)data;
  
#line 5520 
  igb_write_itr(q_vector);
  
#line 5522 
  napi_schedule(& q_vector->napi);
  
#line 5524 
  __retres = IRQ_HANDLED;
  
#line 5524 
  return __retres;
}


#line 5528  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_tx_dca(struct igb_adapter *adapter, struct igb_ring *tx_ring, int cpu)
{
  u8 tmp;
  
#line 5532 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5533 
  tmp = dca3_get_tag(tx_ring->dev,cpu);
  
#line 5533 
  u32 txctrl = (unsigned int)tmp;
  
#line 5535 
  if (hw->mac.type != (unsigned int)e1000_82575) 
#line 5536 
                                                 txctrl <<= 24; else ;
  
#line 5542 
  txctrl |= 8736U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 5546 
      u8 *__var = (u8 *)0U;
      
#line 5546 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5546 
    u8 *hw_addr = *tmp_0;
    
#line 5546 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      int tmp_1;
      
#line 5546 
      if ((unsigned int)tx_ring->reg_idx <= 3U) 
#line 5546 
                                                tmp_1 = (int)tx_ring->reg_idx * 256 + 14356; else 
                                                                    
#line 5546 
                                                                    tmp_1 = (int)tx_ring->reg_idx * 64 + 57364;
      
#line 5546 
      ;
      
#line 5546 
      ;
      
#line 5546 
      writel(txctrl,(void volatile *)(hw_addr + tmp_1));
    }
    else ;
  }
  
#line 5548 
  return;
}


#line 5549  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_rx_dca(struct igb_adapter *adapter, struct igb_ring *rx_ring, int cpu)
{
  u8 tmp;
  
#line 5553 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5554 
  tmp = dca3_get_tag(& (adapter->pdev)->dev,cpu);
  
#line 5554 
  u32 rxctrl = (unsigned int)tmp;
  
#line 5556 
  if (hw->mac.type != (unsigned int)e1000_82575) 
#line 5557 
                                                 rxctrl <<= 24; else ;
  
#line 5563 
  rxctrl |= 544U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 5566 
      u8 *__var = (u8 *)0U;
      
#line 5566 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5566 
    u8 *hw_addr = *tmp_0;
    
#line 5566 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      int tmp_1;
      
#line 5566 
      if ((unsigned int)rx_ring->reg_idx <= 3U) 
#line 5566 
                                                tmp_1 = (int)rx_ring->reg_idx * 256 + 10260; else 
                                                                    
#line 5566 
                                                                    tmp_1 = (int)rx_ring->reg_idx * 64 + 49172;
      
#line 5566 
      ;
      
#line 5566 
      ;
      
#line 5566 
      writel(rxctrl,(void volatile *)(hw_addr + tmp_1));
    }
    else ;
  }
  
#line 5568 
  return;
}


#line 5569  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_update_dca(struct igb_q_vector *q_vector)
{
  int tmp_4;
  
#line 5571 
  struct igb_adapter *adapter = q_vector->adapter;
  {
    int tmp_3;
    
#line 5572 
    __preempt_count_add(1);
    
#line 5573 
    ldv_inline_asm();
    {
      int pscr_ret__;
      {
        
#line 5572 
        void const *__vpp_verify = (void const *)0;
        
#line 5572 
        void const *tmp = __vpp_verify;
      }
      
#line 5572 
      switch (4UL) {
        int tmp_0;
        int tmp_0_0;
        int tmp_1;
        int tmp_2;
        case (unsigned long)1: 
#line 5572 
        ;
        {
          int pfo_ret__;
          
#line 5572 
          switch (4UL) {
            case (unsigned long)1: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58507;
            case (unsigned long)2: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58507;
            case (unsigned long)4: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58507;
            case (unsigned long)8: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58507;
            default: 
#line 5572 
            ;
            
#line 5572 
            __bad_percpu_size();
          }
          ldv_58507: 
#line 5572 
          ;
          
#line 5572 
          tmp_0 = pfo_ret__;
        }
        
#line 5572 
        pscr_ret__ = tmp_0;
        
#line 5572 
        goto ldv_58513;
        case (unsigned long)2: 
#line 5572 
        ;
        {
          int pfo_ret___0;
          
#line 5572 
          switch (4UL) {
            case (unsigned long)1: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58517;
            case (unsigned long)2: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58517;
            case (unsigned long)4: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58517;
            case (unsigned long)8: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58517;
            default: 
#line 5572 
            ;
            
#line 5572 
            __bad_percpu_size();
          }
          ldv_58517: 
#line 5572 
          ;
          
#line 5572 
          tmp_0_0 = pfo_ret___0;
        }
        
#line 5572 
        pscr_ret__ = tmp_0_0;
        
#line 5572 
        goto ldv_58513;
        case (unsigned long)4: 
#line 5572 
        ;
        {
          int pfo_ret___1;
          
#line 5572 
          switch (4UL) {
            case (unsigned long)1: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58526;
            case (unsigned long)2: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58526;
            case (unsigned long)4: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58526;
            case (unsigned long)8: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58526;
            default: 
#line 5572 
            ;
            
#line 5572 
            __bad_percpu_size();
          }
          ldv_58526: 
#line 5572 
          ;
          
#line 5572 
          tmp_1 = pfo_ret___1;
        }
        
#line 5572 
        pscr_ret__ = tmp_1;
        
#line 5572 
        goto ldv_58513;
        case (unsigned long)8: 
#line 5572 
        ;
        {
          int pfo_ret___2;
          
#line 5572 
          switch (4UL) {
            case (unsigned long)1: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58535;
            case (unsigned long)2: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58535;
            case (unsigned long)4: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58535;
            case (unsigned long)8: 
#line 5572 
            ;
            
#line 5573 
            ldv_inline_asm();
            
#line 5572 
            goto ldv_58535;
            default: 
#line 5572 
            ;
            
#line 5572 
            __bad_percpu_size();
          }
          ldv_58535: 
#line 5572 
          ;
          
#line 5572 
          tmp_2 = pfo_ret___2;
        }
        
#line 5572 
        pscr_ret__ = tmp_2;
        
#line 5572 
        goto ldv_58513;
        default: 
#line 5572 
        ;
        
#line 5572 
        __bad_size_call_parameter();
        
#line 5572 
        goto ldv_58513;
      }
      ldv_58513: 
#line 5572 
      ;
      
#line 5572 
      tmp_3 = pscr_ret__;
    }
    
#line 5572 
    tmp_4 = tmp_3;
  }
  
#line 5572 
  int cpu = tmp_4;
  
#line 5574 
  if (q_vector->cpu == cpu) 
#line 5575 
                            goto out_no_update; else ;
  
#line 5577 
  if (q_vector->tx.ring != (struct igb_ring *)0) 
#line 5578 
                                                 igb_update_tx_dca(adapter,q_vector->tx.ring,cpu); else ;
  
#line 5580 
  if (q_vector->rx.ring != (struct igb_ring *)0) 
#line 5581 
                                                 igb_update_rx_dca(adapter,q_vector->rx.ring,cpu); else ;
  
#line 5583 
  q_vector->cpu = cpu;
  out_no_update: 
#line 5584 
  ;
  
#line 5585 
  ldv_inline_asm();
  
#line 5585 
  __preempt_count_sub(1);
  
#line 5586 
  return;
}


#line 5588  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_setup_dca(struct igb_adapter *adapter)
{
  int i;
  
#line 5590 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5593 
  if ((adapter->flags & 2U) == 0U) 
#line 5594 
                                   goto return_label; else ;
  {
    u8 * volatile *tmp;
    {
      
#line 5597 
      u8 *__var = (u8 *)0U;
      
#line 5597 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5597 
    u8 *hw_addr = *tmp;
    
#line 5597 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5597 
                                           writel(2U,(void volatile *)(hw_addr + 23412U)); else ;
  }
  
#line 5599 
  i = 0;
  
#line 5599 
  goto ldv_58554;
  ldv_58553: 
#line 5600 
  ;
  
#line 5600 
  (adapter->q_vector[i])->cpu = -1;
  
#line 5601 
  igb_update_dca(adapter->q_vector[i]);
  
#line 5599 
  i += 1;
  ldv_58554: 
#line 5600 
  ;
  
#line 5599 
  if (adapter->num_q_vectors > (unsigned int)i) 
#line 5601 
                                                goto ldv_58553; else 
                                                                  
#line 5604 
                                                                  goto ldv_58555;
  ldv_58555: 
#line 5605 
  ;
  return_label: 
#line 5606 
                return;
}


#line 5605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_notify_dca(struct device *dev, void *data)
{
  int __retres;
  
#line 5607 
  struct net_device *netdev = dev_get_drvdata((struct device const *)dev);
  
#line 5608 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5609 
  struct pci_dev *pdev = adapter->pdev;
  
#line 5610 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5611 
  unsigned long event = *((unsigned long *)data);
  
#line 5613 
  switch (event) {
    int tmp_1;
    case (unsigned long)1: 
#line 5614 
    ;
    
#line 5616 
    if ((adapter->flags & 2U) != 0U) 
#line 5617 
                                     goto ldv_58566; else ;
    
#line 5618 
    tmp_1 = dca_add_requester(dev);
    
#line 5618 
    if (tmp_1 == 0) {
      
#line 5619 
      adapter->flags |= 2U;
      
#line 5620 
      _dev_info((struct device const *)(& pdev->dev),"DCA enabled\n");
      
#line 5621 
      igb_setup_dca(adapter);
      
#line 5622 
      goto ldv_58566;
    }
    else ;
    case (unsigned long)2: 
#line 5625 
    ;
    
#line 5626 
    if ((adapter->flags & 2U) != 0U) {
      
#line 5630 
      dca_remove_requester(dev);
      
#line 5631 
      _dev_info((struct device const *)(& pdev->dev),"DCA disabled\n");
      
#line 5632 
      adapter->flags &= 4294967293U;
      {
        u8 * volatile *tmp_2;
        {
          
#line 5633 
          u8 *__var = (u8 *)0U;
          
#line 5633 
          tmp_2 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 5633 
        u8 *hw_addr = *tmp_2;
        
#line 5633 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5633 
                                               writel(1U,(void volatile *)(hw_addr + 23412U)); else ;
      }
    }
    else ;
    
#line 5635 
    goto ldv_58566;
  }
  ldv_58566: 
#line 5638 
  ;
  
#line 5638 
  __retres = 0;
  
#line 5638 
  return __retres;
}


#line 5641  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_notify_dca(struct notifier_block *nb, unsigned long event, void *p)
{
  int ret_val;
  int tmp;
  
#line 5646 
  ret_val = driver_for_each_device(& igb_driver.driver,(struct device *)0,(void *)(& event),& __igb_notify_dca);
  
#line 5649 
  if (ret_val != 0) 
#line 5649 
                    tmp = 32770; else 
#line 5649 
                                      tmp = 0;
  
#line 5649 
  return tmp;
}


#line 5654  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_vf_configure(struct igb_adapter *adapter, int vf)
{
  int __retres;
  unsigned char mac_addr[6U];
  
#line 5658 
  eth_zero_addr((u8 *)(& mac_addr));
  
#line 5659 
  igb_set_vf_mac(adapter,vf,(unsigned char *)(& mac_addr));
  
#line 5662 
  (adapter->vf_data + vf)->spoofchk_enabled = (_Bool)1;
  
#line 5664 
  __retres = 0;
  
#line 5664 
  return __retres;
}


#line 5668  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_ping_all_vfs(struct igb_adapter *adapter)
{
  u32 ping;
  int i;
  
#line 5670 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5674 
  i = 0;
  
#line 5674 
  goto ldv_58589;
  ldv_58588: 
#line 5675 
  ;
  
#line 5675 
  ping = 256U;
  
#line 5676 
  if (((adapter->vf_data + i)->flags & 1U) != 0U) 
#line 5677 
                                                  ping |= 536870912U; else ;
  
#line 5678 
  igb_write_mbx(hw,& ping,(unsigned short)1,(unsigned short)((int)((unsigned short)i)));
  
#line 5674 
  i += 1;
  ldv_58589: 
#line 5675 
  ;
  
#line 5674 
  if (adapter->vfs_allocated_count > (unsigned int)i) 
#line 5676 
                                                      goto ldv_58588; else 
                                                                    
#line 5679 
                                                                    goto ldv_58590;
  ldv_58590: 
#line 5680 
  ;
  
#line 5681 
  return;
}


#line 5682  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_promisc(struct igb_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  
#line 5684 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5685 
  u32 vmolr = igb_rd32(hw,(vf + 5812U) * 4U);
  
#line 5686 
  struct vf_data_storage *vf_data = adapter->vf_data + vf;
  
#line 5688 
  vf_data->flags &= 4294967289U;
  
#line 5690 
  vmolr &= 3925868543U;
  
#line 5692 
  if ((*msgbuf & 131072U) != 0U) {
    
#line 5693 
    vmolr |= 268435456U;
    
#line 5694 
    vf_data->flags |= 4U;
    
#line 5695 
    *msgbuf &= 4294836223U;
  }
  else 
    
#line 5701 
    if ((unsigned int)vf_data->num_vf_mc_hashes > 30U) 
#line 5702 
                                                       vmolr |= 268435456U;
    else 
      
#line 5703 
      if ((unsigned int)vf_data->num_vf_mc_hashes != 0U) {
        int j;
        
#line 5706 
        vmolr |= 33554432U;
        
#line 5707 
        j = 0;
        
#line 5707 
        goto ldv_58601;
        ldv_58600: 
#line 5708 
        ;
        
#line 5708 
        igb_mta_set(hw,(unsigned int)vf_data->vf_mc_hashes[j]);
        
#line 5707 
        j += 1;
        ldv_58601: 
#line 5708 
        ;
        
#line 5707 
        if ((int)vf_data->num_vf_mc_hashes > j) 
#line 5709 
                                                goto ldv_58600; else 
                                                                  
#line 5712 
                                                                  goto ldv_58602;
        ldv_58602: 
#line 5713 
        ;
      }
      else ;
  {
    u8 * volatile *tmp_0;
    {
      
#line 5712 
      u8 *__var = (u8 *)0U;
      
#line 5712 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5712 
    u8 *hw_addr = *tmp_0;
    
#line 5712 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5712 
                                           writel(vmolr,(void volatile *)(hw_addr + (vf + 5812U) * 4U)); else ;
  }
  
#line 5715 
  if ((*msgbuf & 16711680U) != 0U) {
    
#line 5716 
    __retres = -22;
    
#line 5716 
    goto return_label;
  }
  else ;
  
#line 5718 
  __retres = 0;
  return_label: 
#line 5718 
                return __retres;
}


#line 5721  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_multicasts(struct igb_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  int i;
  
#line 5724 
  int n = (int)(*msgbuf >> 16) & 255;
  
#line 5725 
  u16 *hash_list = (u16 *)(msgbuf + 1U);
  
#line 5726 
  struct vf_data_storage *vf_data = adapter->vf_data + vf;
  
#line 5733 
  vf_data->num_vf_mc_hashes = (unsigned short)n;
  
#line 5736 
  if (n > 30) 
#line 5737 
              n = 30; else ;
  
#line 5740 
  i = 0;
  
#line 5740 
  goto ldv_58616;
  ldv_58615: 
#line 5741 
  ;
  
#line 5741 
  vf_data->vf_mc_hashes[i] = *(hash_list + i);
  
#line 5740 
  i += 1;
  ldv_58616: 
#line 5741 
  ;
  
#line 5740 
  if (i < n) 
#line 5742 
             goto ldv_58615; else 
#line 5745 
                                  goto ldv_58617;
  ldv_58617: 
#line 5746 
  ;
  
#line 5744 
  igb_set_rx_mode(adapter->netdev);
  
#line 5746 
  __retres = 0;
  
#line 5746 
  return __retres;
}


#line 5749  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_restore_vf_multicasts(struct igb_adapter *adapter)
{
  struct vf_data_storage *vf_data;
  int i;
  int j;
  
#line 5751 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5755 
  i = 0;
  
#line 5755 
  goto ldv_58633;
  ldv_58632: 
#line 5756 
  ;
  {
    
#line 5756 
    u32 vmolr = igb_rd32(hw,(unsigned int)((i + 5812) * 4));
    
#line 5758 
    vmolr &= 3992977407U;
    
#line 5760 
    vf_data = adapter->vf_data + i;
    
#line 5762 
    if ((unsigned int)vf_data->num_vf_mc_hashes > 30U || (vf_data->flags & 4U) != 0U) 
      
#line 5764 
      vmolr |= 268435456U;
    else 
      
#line 5765 
      if ((unsigned int)vf_data->num_vf_mc_hashes != 0U) {
        
#line 5766 
        vmolr |= 33554432U;
        
#line 5767 
        j = 0;
        
#line 5767 
        goto ldv_58627;
        ldv_58626: 
#line 5768 
        ;
        
#line 5768 
        igb_mta_set(hw,(unsigned int)vf_data->vf_mc_hashes[j]);
        
#line 5767 
        j += 1;
        ldv_58627: 
#line 5768 
        ;
        
#line 5767 
        if ((int)vf_data->num_vf_mc_hashes > j) 
#line 5769 
                                                goto ldv_58626; else 
                                                                  
#line 5772 
                                                                  goto ldv_58628;
        ldv_58628: 
#line 5773 
        ;
      }
      else ;
    {
      u8 * volatile *tmp_0;
      {
        
#line 5770 
        u8 *__var = (u8 *)0U;
        
#line 5770 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 5770 
      u8 *hw_addr = *tmp_0;
      
#line 5770 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5770 
                                             writel(vmolr,(void volatile *)(hw_addr + (i + 5812) * 4)); else ;
    }
  }
  
#line 5755 
  i += 1;
  ldv_58633: 
#line 5756 
  ;
  
#line 5755 
  if (adapter->vfs_allocated_count > (unsigned int)i) 
#line 5757 
                                                      goto ldv_58632; else 
                                                                    
#line 5760 
                                                                    goto ldv_58634;
  ldv_58634: 
#line 5761 
  ;
  
#line 5762 
  return;
}


#line 5774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_clear_vf_vfta(struct igb_adapter *adapter, u32 vf)
{
  u32 pool_mask;
  u32 reg;
  u32 vid;
  int i;
  
#line 5776 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5780 
  pool_mask = (unsigned int)(1 << (vf + 12U));
  
#line 5783 
  i = 0;
  
#line 5783 
  goto ldv_58648;
  ldv_58647: 
#line 5784 
  ;
  
#line 5784 
  reg = igb_rd32(hw,(unsigned int)((i + 5952) * 4));
  
#line 5787 
  reg = ~ pool_mask & reg;
  
#line 5790 
  if ((reg & 1044480U) == 0U && reg < (u32)0) {
    
#line 5792 
    reg = 0U;
    
#line 5793 
    vid = reg & 4095U;
    
#line 5794 
    igb_vfta_set(hw,vid,(_Bool)0);
  }
  else ;
  {
    u8 * volatile *tmp;
    {
      
#line 5797 
      u8 *__var = (u8 *)0U;
      
#line 5797 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5797 
    u8 *hw_addr = *tmp;
    
#line 5797 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5797 
                                           writel(reg,(void volatile *)(hw_addr + (i + 5952) * 4)); else ;
  }
  
#line 5783 
  i += 1;
  ldv_58648: 
#line 5784 
  ;
  
#line 5783 
  if (i <= 31) 
#line 5785 
               goto ldv_58647; else 
#line 5788 
                                    goto ldv_58649;
  ldv_58649: 
#line 5789 
  ;
  
#line 5800 
  (adapter->vf_data + vf)->vlans_enabled = (unsigned short)0U;
  
#line 5801 
  return;
}


#line 5803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static s32 igb_vlvf_set(struct igb_adapter *adapter, u32 vid, bool add, u32 vf)
{
  s32 __retres;
  u32 reg;
  u32 i;
  
#line 5805 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5809 
  if (hw->mac.type <= (unsigned int)e1000_82575) {
    
#line 5810 
    __retres = -1;
    
#line 5810 
    goto return_label;
  }
  else ;
  
#line 5813 
  if (adapter->vfs_allocated_count == 0U) {
    
#line 5814 
    __retres = -1;
    
#line 5814 
    goto return_label;
  }
  else ;
  
#line 5817 
  i = 0U;
  
#line 5817 
  goto ldv_58661;
  ldv_58660: 
#line 5818 
  ;
  
#line 5818 
  reg = igb_rd32(hw,(i + 5952U) * 4U);
  
#line 5819 
  if (reg < (u32)0 && (reg & 4095U) == vid) 
#line 5821 
                                            goto ldv_58659; else ;
  
#line 5817 
  i += 1U;
  ldv_58661: 
#line 5818 
  ;
  
#line 5817 
  if (i <= 31U) 
#line 5819 
                goto ldv_58660; else 
#line 5822 
                                     goto ldv_58659;
  ldv_58659: 
#line 5823 
  ;
  
#line 5824 
  if ((int)add != 0) {
    
#line 5825 
    if (i == 32U) {
      
#line 5830 
      i = 0U;
      
#line 5830 
      goto ldv_58664;
      ldv_58663: 
#line 5831 
      ;
      
#line 5831 
      reg = igb_rd32(hw,(i + 5952U) * 4U);
      
#line 5832 
      if (reg >= (u32)0) 
#line 5833 
                         goto ldv_58662; else ;
      
#line 5830 
      i += 1U;
      ldv_58664: 
#line 5831 
      ;
      
#line 5830 
      if (i <= 31U) 
#line 5832 
                    goto ldv_58663; else 
#line 5835 
                                         goto ldv_58662;
      ldv_58662: 
#line 5836 
      ;
    }
    else ;
    
#line 5836 
    if (i <= 31U) {
      
#line 5838 
      reg = (unsigned int)(1 << (vf + 12U)) | reg;
      
#line 5841 
      if (reg >= (u32)0) {
        
#line 5843 
        igb_vfta_set(hw,vid,(_Bool)1);
        
#line 5844 
        reg |= 2147483648U;
      }
      else ;
      
#line 5846 
      reg &= 4294963200U;
      
#line 5847 
      reg |= vid;
      {
        u8 * volatile *tmp;
        {
          
#line 5848 
          u8 *__var = (u8 *)0U;
          
#line 5848 
          tmp = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 5848 
        u8 *hw_addr = *tmp;
        
#line 5848 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5848 
                                               writel(reg,(void volatile *)(hw_addr + (i + 5952U) * 4U)); else ;
      }
      
#line 5851 
      if (adapter->vfs_allocated_count <= vf) {
        
#line 5852 
        __retres = 0;
        
#line 5852 
        goto return_label;
      }
      else ;
      
#line 5854 
      if ((unsigned int)(adapter->vf_data + vf)->vlans_enabled == 0U) {
        u32 size;
        
#line 5857 
        reg = igb_rd32(hw,(vf + 5812U) * 4U);
        
#line 5858 
        size = reg & 16383U;
        
#line 5859 
        size += 4U;
        
#line 5860 
        reg &= 4294950912U;
        
#line 5861 
        reg |= size;
        {
          u8 * volatile *tmp_0;
          {
            
#line 5862 
            u8 *__var_0 = (u8 *)0U;
            
#line 5862 
            tmp_0 = (u8 * volatile *)(& hw->hw_addr);
          }
          
#line 5862 
          u8 *hw_addr_0 = *tmp_0;
          
#line 5862 
          if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 5862 
                                                   writel(reg,(void volatile *)(hw_addr_0 + (vf + 5812U) * 4U)); else ;
        }
      }
      else ;
      
#line 5865 
      (adapter->vf_data + vf)->vlans_enabled = (u16)((int)(adapter->vf_data + vf)->vlans_enabled + 1);
    }
    else ;
  }
  else 
    
#line 5868 
    if (i <= 31U) {
      
#line 5870 
      reg = (unsigned int)(~ (1 << (vf + 12U))) & reg;
      
#line 5872 
      if ((reg & 1044480U) == 0U) {
        
#line 5873 
        reg = 0U;
        
#line 5874 
        igb_vfta_set(hw,vid,(_Bool)0);
      }
      else ;
      {
        u8 * volatile *tmp_1;
        {
          
#line 5876 
          u8 *__var_1 = (u8 *)0U;
          
#line 5876 
          tmp_1 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 5876 
        u8 *hw_addr_1 = *tmp_1;
        
#line 5876 
        if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 5876 
                                                 writel(reg,(void volatile *)(hw_addr_1 + (i + 5952U) * 4U)); else ;
      }
      
#line 5879 
      if (adapter->vfs_allocated_count <= vf) {
        
#line 5880 
        __retres = 0;
        
#line 5880 
        goto return_label;
      }
      else ;
      
#line 5882 
      (adapter->vf_data + vf)->vlans_enabled = (u16)((int)(adapter->vf_data + vf)->vlans_enabled - 1);
      
#line 5883 
      if ((unsigned int)(adapter->vf_data + vf)->vlans_enabled == 0U) {
        u32 size_0;
        
#line 5886 
        reg = igb_rd32(hw,(vf + 5812U) * 4U);
        
#line 5887 
        size_0 = reg & 16383U;
        
#line 5888 
        size_0 += 4294967292U;
        
#line 5889 
        reg &= 4294950912U;
        
#line 5890 
        reg |= size_0;
        {
          u8 * volatile *tmp_2;
          {
            
#line 5891 
            u8 *__var_2 = (u8 *)0U;
            
#line 5891 
            tmp_2 = (u8 * volatile *)(& hw->hw_addr);
          }
          
#line 5891 
          u8 *hw_addr_2 = *tmp_2;
          
#line 5891 
          if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 5891 
                                                   writel(reg,(void volatile *)(hw_addr_2 + (vf + 5812U) * 4U)); else ;
        }
      }
      else ;
    }
    else ;
  
#line 5895 
  __retres = 0;
  return_label: 
#line 5895 
                return __retres;
}


#line 5898  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_vmvir(struct igb_adapter *adapter, u32 vid, u32 vf)
{
  
#line 5900 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5902 
  if (vid != 0U) {
    u8 * volatile *tmp;
    {
      
#line 5903 
      u8 *__var = (u8 *)0U;
      
#line 5903 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5903 
    u8 *hw_addr = *tmp;
    
#line 5903 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 5903 
                                           writel(vid | 1073741824U,(void volatile *)(hw_addr + (vf + 3520U) * 4U)); else ;
  }
  else {
    u8 * volatile *tmp_0;
    {
      
#line 5905 
      u8 *__var_0 = (u8 *)0U;
      
#line 5905 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 5905 
    u8 *hw_addr_0 = *tmp_0;
    
#line 5905 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 5905 
                                             writel(0U,(void volatile *)(hw_addr_0 + (vf + 3520U) * 4U)); else ;
  }
  
#line 5907 
  return;
}


#line 5908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos)
{
  int __retres;
  
#line 5911 
  int err = 0;
  
#line 5912 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5914 
  if (adapter->vfs_allocated_count <= (unsigned int)vf || ((unsigned int)vlan > 4095U || (unsigned int)qos > 7U)) {
    
#line 5915 
    __retres = -22;
    
#line 5915 
    goto return_label;
  }
  else ;
  
#line 5916 
  if ((unsigned int)vlan != 0U || (unsigned int)qos != 0U) {
    int tmp_0;
    
#line 5917 
    err = igb_vlvf_set(adapter,(unsigned int)vlan,(_Bool)((unsigned int)vlan != 0U),(unsigned int)vf);
    
#line 5918 
    if (err != 0) 
#line 5919 
                  goto out; else ;
    
#line 5920 
    igb_set_vmvir(adapter,(unsigned int)((int)vlan | ((int)qos << 13)),(unsigned int)vf);
    
#line 5921 
    igb_set_vmolr(adapter,vf,(_Bool)((unsigned int)vlan == 0U));
    
#line 5922 
    (adapter->vf_data + vf)->pf_vlan = vlan;
    
#line 5923 
    (adapter->vf_data + vf)->pf_qos = (unsigned short)qos;
    
#line 5924 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Setting VLAN %d, QOS 0x%x on VF %d\n",(int)vlan,(int)qos,vf);
    
#line 5926 
    tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 5926 
    if (tmp_0 != 0) {
      
#line 5927 
      dev_warn((struct device const *)(& (adapter->pdev)->dev),"The VF VLAN has been set, but the PF device is not up.\n");
      
#line 5929 
      dev_warn((struct device const *)(& (adapter->pdev)->dev),"Bring the PF device up before attempting to use the VF device.\n");
    }
    else ;
  }
  else {
    
#line 5933 
    igb_vlvf_set(adapter,(unsigned int)(adapter->vf_data + vf)->pf_vlan,(_Bool)0,(unsigned int)vf);
    
#line 5935 
    igb_set_vmvir(adapter,(unsigned int)vlan,(unsigned int)vf);
    
#line 5936 
    igb_set_vmolr(adapter,vf,(_Bool)1);
    
#line 5937 
    (adapter->vf_data + vf)->pf_vlan = (unsigned short)0U;
    
#line 5938 
    (adapter->vf_data + vf)->pf_qos = (unsigned short)0U;
  }
  out: 
#line 5940 
  ;
  
#line 5941 
  __retres = err;
  return_label: 
#line 5941 
                return __retres;
}


#line 5944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_find_vlvf_entry(struct igb_adapter *adapter, int vid)
{
  int i;
  u32 reg;
  
#line 5946 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5951 
  i = 0;
  
#line 5951 
  goto ldv_58709;
  ldv_58708: 
#line 5952 
  ;
  
#line 5952 
  reg = igb_rd32(hw,(unsigned int)((i + 5952) * 4));
  
#line 5953 
  if (reg < (u32)0 && (reg & 4095U) == (unsigned int)vid) 
#line 5955 
                                                          goto ldv_58707; else ;
  
#line 5951 
  i += 1;
  ldv_58709: 
#line 5952 
  ;
  
#line 5951 
  if (i <= 31) 
#line 5953 
               goto ldv_58708; else 
#line 5956 
                                    goto ldv_58707;
  ldv_58707: 
#line 5957 
  ;
  
#line 5958 
  if (i > 31) 
#line 5959 
              i = -1; else ;
  
#line 5961 
  return i;
}


#line 5964  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_vlan(struct igb_adapter *adapter, u32 *msgbuf, u32 vf)
{
  
#line 5966 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5967 
  int add = (int)(*msgbuf >> 16) & 255;
  
#line 5968 
  int vid = (int)*(msgbuf + 1U) & 4095;
  
#line 5969 
  int err = 0;
  
#line 5974 
  if (add != 0 && ((adapter->netdev)->flags & 256U) != 0U) 
#line 5975 
                                                           err = igb_vlvf_set(adapter,(unsigned int)vid,(_Bool)(add != 0),adapter->vfs_allocated_count); else ;
  
#line 5977 
  if (err != 0) 
#line 5978 
                goto out; else ;
  
#line 5980 
  err = igb_vlvf_set(adapter,(unsigned int)vid,(_Bool)(add != 0),vf);
  
#line 5982 
  if (err != 0) 
#line 5983 
                goto out; else ;
  
#line 5988 
  if (add == 0 && ((adapter->netdev)->flags & 256U) != 0U) {
    u32 vlvf;
    u32 bits;
    
#line 5990 
    int regndx = igb_find_vlvf_entry(adapter,vid);
    
#line 5992 
    if (regndx < 0) 
#line 5993 
                    goto out; else ;
    
#line 5997 
    bits = igb_rd32(hw,(unsigned int)((regndx + 5952) * 4));
    
#line 5997 
    vlvf = bits;
    
#line 5998 
    bits = (unsigned int)(1 << (adapter->vfs_allocated_count + 12U)) & bits;
    
#line 6004 
    if ((vlvf & 4095U) == (unsigned int)vid) {
      int tmp_2;
      
#line 6004 
      if (0 != 0) {
        int tmp_0;
        
#line 6005 
        tmp_0 = constant_test_bit((long)vid,(unsigned long const volatile *)(& adapter->active_vlans));
        
#line 6004 
        tmp_2 = tmp_0 == 0;
      }
      else {
        int tmp_1;
        
#line 6004 
        tmp_1 = variable_test_bit((long)vid,(unsigned long const volatile *)(& adapter->active_vlans));
        
#line 6004 
        tmp_2 = tmp_1 == 0;
      }
      
#line 6004 
      if (tmp_2) {
        
#line 6005 
        if (bits == 0U) 
#line 6007 
                        igb_vlvf_set(adapter,(unsigned int)vid,(_Bool)(add != 0),adapter->vfs_allocated_count); else ;
      }
      else ;
    }
    else ;
  }
  else ;
  out: 
#line 6011 
  ;
  
#line 6012 
  return err;
}


#line 6015  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static void igb_vf_reset(struct igb_adapter *adapter, u32 vf)
{
  
#line 6018 
  (adapter->vf_data + vf)->flags &= 8U;
  
#line 6019 
  (adapter->vf_data + vf)->last_nack = jiffies;
  
#line 6022 
  igb_set_vmolr(adapter,(int)vf,(_Bool)1);
  
#line 6025 
  igb_clear_vf_vfta(adapter,vf);
  
#line 6026 
  if ((unsigned int)(adapter->vf_data + vf)->pf_vlan != 0U) 
#line 6027 
                                                            igb_ndo_set_vf_vlan(adapter->netdev,(int)vf,(unsigned short)((int)(adapter->vf_data + vf)->pf_vlan),(unsigned char)((int)((unsigned char)(adapter->vf_data + vf)->pf_qos))); else 
                                                                    
#line 6031 
                                                                    igb_clear_vf_vfta(adapter,vf);
  
#line 6034 
  (adapter->vf_data + vf)->num_vf_mc_hashes = (unsigned short)0U;
  
#line 6037 
  igb_set_rx_mode(adapter->netdev);
  
#line 6038 
  return;
}


#line 6040  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_vf_reset_event(struct igb_adapter *adapter, u32 vf)
{
  
#line 6042 
  unsigned char *vf_mac = (unsigned char *)(& (adapter->vf_data + vf)->vf_mac_addresses);
  
#line 6045 
  if (((adapter->vf_data + vf)->flags & 8U) == 0U) 
#line 6046 
                                                   eth_zero_addr(vf_mac); else ;
  
#line 6049 
  igb_vf_reset(adapter,vf);
  
#line 6050 
  return;
}


#line 6052  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_vf_reset_msg(struct igb_adapter *adapter, u32 vf)
{
  u32 reg;
  u32 msgbuf[3U];
  int tmp_2;
  bool tmp_1;
  
#line 6054 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6055 
  unsigned char *vf_mac = (unsigned char *)(& (adapter->vf_data + vf)->vf_mac_addresses);
  
#line 6056 
  int rar_entry = (int)(((unsigned int)hw->mac.rar_entry_count - vf) - 1U);
  
#line 6058 
  u8 *addr = (u8 *)(& msgbuf[1]);
  
#line 6061 
  igb_vf_reset(adapter,vf);
  
#line 6064 
  igb_rar_set_qsel(adapter,vf_mac,(unsigned int)rar_entry,(unsigned char)((int)((unsigned char)vf)));
  
#line 6067 
  reg = igb_rd32(hw,3216U);
  {
    u8 * volatile *tmp;
    {
      
#line 6068 
      u8 *__var = (u8 *)0U;
      
#line 6068 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 6068 
    u8 *hw_addr = *tmp;
    
#line 6068 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 6068 
                                           writel((unsigned int)(1 << vf) | reg,(void volatile *)(hw_addr + 3216U)); else ;
  }
  
#line 6069 
  reg = igb_rd32(hw,3212U);
  {
    u8 * volatile *tmp_0;
    {
      
#line 6070 
      u8 *__var_0 = (u8 *)0U;
      
#line 6070 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 6070 
    u8 *hw_addr_0 = *tmp_0;
    
#line 6070 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 6070 
                                             writel((unsigned int)(1 << vf) | reg,(void volatile *)(hw_addr_0 + 3212U)); else ;
  }
  
#line 6072 
  (adapter->vf_data + vf)->flags |= 1U;
  
#line 6075 
  tmp_1 = is_zero_ether_addr((u8 const *)vf_mac);
  
#line 6075 
  if (tmp_1) 
#line 6075 
             tmp_2 = 0; else 
#line 6075 
                             tmp_2 = 1;
  
#line 6075 
  if (tmp_2) {
    
#line 6076 
    msgbuf[0] = 2147483649U;
    
#line 6077 
    memcpy((void *)addr,(void const *)vf_mac,6UL);
  }
  else 
#line 6079 
       msgbuf[0] = 1073741825U;
  
#line 6081 
  igb_write_mbx(hw,(u32 *)(& msgbuf),(unsigned short)3,(unsigned short)((int)((unsigned short)vf)));
  
#line 6082 
  return;
}


#line 6084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_mac_addr(struct igb_adapter *adapter, u32 *msg, int vf)
{
  bool tmp;
  
#line 6089 
  unsigned char *addr = (unsigned char *)(msg + 1U);
  
#line 6090 
  int err = -1;
  
#line 6092 
  tmp = is_valid_ether_addr((u8 const *)addr);
  
#line 6092 
  if ((int)tmp != 0) 
#line 6093 
                     err = igb_set_vf_mac(adapter,vf,addr); else ;
  
#line 6095 
  return err;
}


#line 6098  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_rcv_ack_from_vf(struct igb_adapter *adapter, u32 vf)
{
  
#line 6100 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6101 
  struct vf_data_storage *vf_data = adapter->vf_data + vf;
  
#line 6102 
  u32 msg = 1073741824U;
  
#line 6105 
  if ((vf_data->flags & 1U) == 0U) {
    int tmp;
    {
      unsigned long __dummy;
      unsigned long volatile __dummy2;
      
#line 6106 
      tmp = 1;
    }
    
#line 6105 
    if (tmp != 0) {
      int tmp_0;
      {
        unsigned long __dummy_0;
        unsigned long __dummy2_0;
        
#line 6106 
        tmp_0 = 1;
      }
      
#line 6106 
      if (tmp_0 != 0) {
        
#line 6106 
        if ((long)((vf_data->last_nack - jiffies) + 500UL) < 0L) {
          
#line 6107 
          igb_write_mbx(hw,& msg,(unsigned short)1,(unsigned short)((int)((unsigned short)vf)));
          
#line 6108 
          vf_data->last_nack = jiffies;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 6110 
  return;
}


#line 6112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_rcv_msg_from_vf(struct igb_adapter *adapter, u32 vf)
{
  u32 msgbuf[16U];
  s32 retval;
  
#line 6114 
  struct pci_dev *pdev = adapter->pdev;
  
#line 6116 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6117 
  struct vf_data_storage *vf_data = adapter->vf_data + vf;
  
#line 6120 
  retval = igb_read_mbx(hw,(u32 *)(& msgbuf),(unsigned short)16,(unsigned short)((int)((unsigned short)vf)));
  
#line 6122 
  if (retval != 0) {
    int tmp;
    
#line 6124 
    dev_err((struct device const *)(& pdev->dev),"Error receiving message from VF\n");
    
#line 6125 
    vf_data->flags &= 4294967294U;
    {
      unsigned long __dummy;
      unsigned long volatile __dummy2;
      
#line 6126 
      tmp = 1;
    }
    
#line 6126 
    if (tmp == 0) 
#line 6127 
                  goto return_label;
    else {
      int tmp_0;
      {
        unsigned long __dummy_0;
        unsigned long __dummy2_0;
        
#line 6126 
        tmp_0 = 1;
      }
      
#line 6126 
      if (tmp_0 == 0) 
#line 6127 
                      goto return_label;
      else 
        
#line 6126 
        if ((long)((vf_data->last_nack - jiffies) + 500UL) >= 0L) 
#line 6127 
                                                                  goto return_label; else ;
    }
    
#line 6128 
    goto out;
  }
  else ;
  
#line 6132 
  if ((msgbuf[0] & 3221225472U) != 0U) 
#line 6133 
                                       goto return_label; else ;
  
#line 6138 
  if (msgbuf[0] == 1U) {
    
#line 6139 
    igb_vf_reset_msg(adapter,vf);
    
#line 6140 
    goto return_label;
  }
  else ;
  
#line 6143 
  if ((vf_data->flags & 1U) == 0U) {
    int tmp_1;
    {
      unsigned long __dummy_1;
      unsigned long volatile __dummy2_1;
      
#line 6144 
      tmp_1 = 1;
    }
    
#line 6144 
    if (tmp_1 == 0) 
#line 6145 
                    goto return_label;
    else {
      int tmp_2;
      {
        unsigned long __dummy_2;
        unsigned long __dummy2_2;
        
#line 6144 
        tmp_2 = 1;
      }
      
#line 6144 
      if (tmp_2 == 0) 
#line 6145 
                      goto return_label;
      else 
        
#line 6144 
        if ((long)((vf_data->last_nack - jiffies) + 500UL) >= 0L) 
#line 6145 
                                                                  goto return_label; else ;
    }
    
#line 6146 
    retval = -1;
    
#line 6147 
    goto out;
  }
  else ;
  
#line 6150 
  switch (msgbuf[0] & 65535U) {
    case (unsigned int)2: 
#line 6151 
    ;
    
#line 6152 
    retval = -22;
    
#line 6153 
    if ((vf_data->flags & 8U) == 0U) 
#line 6154 
                                     retval = igb_set_vf_mac_addr(adapter,(u32 *)(& msgbuf),(int)vf); else 
                                                                    
#line 6156 
                                                                    dev_warn((struct device const *)(& pdev->dev),"VF %d attempted to override administratively set MAC address\nReload the VF driver to resume operations\n",vf);
    
#line 6159 
    goto ldv_58791;
    case (unsigned int)6: 
#line 6160 
    ;
    
#line 6161 
    retval = igb_set_vf_promisc(adapter,(u32 *)(& msgbuf),vf);
    
#line 6162 
    goto ldv_58791;
    case (unsigned int)3: 
#line 6163 
    ;
    
#line 6164 
    retval = igb_set_vf_multicasts(adapter,(u32 *)(& msgbuf),vf);
    
#line 6165 
    goto ldv_58791;
    case (unsigned int)5: 
#line 6166 
    ;
    
#line 6167 
    retval = igb_set_vf_rlpml(adapter,(int)msgbuf[1],(int)vf);
    
#line 6168 
    goto ldv_58791;
    case (unsigned int)4: 
#line 6169 
    ;
    
#line 6170 
    retval = -1;
    
#line 6171 
    if ((unsigned int)vf_data->pf_vlan != 0U) 
#line 6172 
                                              dev_warn((struct device const *)(& pdev->dev),"VF %d attempted to override administratively set VLAN tag\nReload the VF driver to resume operations\n",vf); else 
                                                                    
#line 6176 
                                                                    retval = igb_set_vf_vlan(adapter,(u32 *)(& msgbuf),vf);
    
#line 6177 
    goto ldv_58791;
    default: 
#line 6178 
    ;
    
#line 6179 
    dev_err((struct device const *)(& pdev->dev),"Unhandled Msg %08x\n",msgbuf[0]);
    
#line 6180 
    retval = -1;
    
#line 6181 
    goto ldv_58791;
  }
  ldv_58791: 
#line 6184 
  ;
  
#line 6184 
  msgbuf[0] |= 536870912U;
  out: 
#line 6185 
  ;
  
#line 6187 
  if (retval != 0) 
#line 6188 
                   msgbuf[0] |= 1073741824U; else 
#line 6190 
                                                  msgbuf[0] |= 2147483648U;
  
#line 6192 
  igb_write_mbx(hw,(u32 *)(& msgbuf),(unsigned short)1,(unsigned short)((int)((unsigned short)vf)));
  return_label: 
#line 6193 
                return;
}


#line 6195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_msg_task(struct igb_adapter *adapter)
{
  u32 vf;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  
#line 6197 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6200 
  vf = 0U;
  
#line 6200 
  goto ldv_58803;
  ldv_58802: 
#line 6201 
  ;
  
#line 6202 
  tmp = igb_check_for_rst(hw,(unsigned short)((int)((unsigned short)vf)));
  
#line 6202 
  if (tmp == 0) 
#line 6203 
                igb_vf_reset_event(adapter,vf); else ;
  
#line 6206 
  tmp_0 = igb_check_for_msg(hw,(unsigned short)((int)((unsigned short)vf)));
  
#line 6206 
  if (tmp_0 == 0) 
#line 6207 
                  igb_rcv_msg_from_vf(adapter,vf); else ;
  
#line 6210 
  tmp_1 = igb_check_for_ack(hw,(unsigned short)((int)((unsigned short)vf)));
  
#line 6210 
  if (tmp_1 == 0) 
#line 6211 
                  igb_rcv_ack_from_vf(adapter,vf); else ;
  
#line 6200 
  vf += 1U;
  ldv_58803: 
#line 6201 
  ;
  
#line 6200 
  if (adapter->vfs_allocated_count > vf) 
#line 6202 
                                         goto ldv_58802; else 
#line 6205 
                                                              goto ldv_58804;
  ldv_58804: 
#line 6206 
  ;
  
#line 6207 
  return;
}


#line 6225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_uta(struct igb_adapter *adapter)
{
  int i;
  
#line 6227 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6231 
  if (hw->mac.type <= (unsigned int)e1000_82575) 
#line 6232 
                                                 goto return_label; else ;
  
#line 6235 
  if (adapter->vfs_allocated_count == 0U) 
#line 6236 
                                          goto return_label; else ;
  
#line 6238 
  i = 0;
  
#line 6238 
  goto ldv_58814;
  ldv_58813: 
#line 6239 
  ;
  {
    u8 * volatile *tmp;
    {
      
#line 6239 
      u8 *__var = (u8 *)0U;
      
#line 6239 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 6239 
    u8 *hw_addr = *tmp;
    
#line 6239 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 6239 
                                           writel(4294967295U,(void volatile *)(hw_addr + ((i << 2) + 40960))); else ;
  }
  
#line 6238 
  i += 1;
  ldv_58814: 
#line 6239 
  ;
  
#line 6238 
  if ((int)hw->mac.uta_reg_count > i) 
#line 6240 
                                      goto ldv_58813; else 
#line 6243 
                                                           goto ldv_58815;
  ldv_58815: 
#line 6244 
  ;
  return_label: 
#line 6245 
                return;
}


#line 6247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static irqreturn_t igb_intr_msi(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 6249 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 6250 
  struct igb_q_vector *q_vector = adapter->q_vector[0];
  
#line 6251 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6253 
  u32 icr = igb_rd32(hw,192U);
  
#line 6255 
  igb_write_itr(q_vector);
  
#line 6257 
  if ((icr & 1073741824U) != 0U) 
#line 6258 
                                 ldv_schedule_work_118(& adapter->reset_task); else ;
  
#line 6260 
  if ((icr & 268435456U) != 0U) 
#line 6262 
                                adapter->stats.doosync += 1ULL; else ;
  
#line 6265 
  if ((icr & 12U) != 0U) {
    int tmp_0;
    
#line 6266 
    hw->mac.get_link_status = (_Bool)1;
    
#line 6267 
    tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 6267 
    if (tmp_0 == 0) 
#line 6268 
                    ldv_mod_timer_119(& adapter->watchdog_timer,jiffies + 1UL); else ;
  }
  else ;
  
#line 6271 
  if ((icr & 524288U) != 0U) 
#line 6272 
                             igb_tsync_interrupt(adapter); else ;
  
#line 6274 
  napi_schedule(& q_vector->napi);
  
#line 6276 
  __retres = IRQ_HANDLED;
  
#line 6276 
  return __retres;
}


#line 6284  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static irqreturn_t igb_intr(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 6286 
  struct igb_adapter *adapter = (struct igb_adapter *)data;
  
#line 6287 
  struct igb_q_vector *q_vector = adapter->q_vector[0];
  
#line 6288 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6292 
  u32 icr = igb_rd32(hw,192U);
  
#line 6297 
  if (icr >= (u32)0) {
    
#line 6298 
    __retres = IRQ_NONE;
    
#line 6298 
    goto return_label;
  }
  else ;
  
#line 6300 
  igb_write_itr(q_vector);
  
#line 6302 
  if ((icr & 1073741824U) != 0U) 
#line 6303 
                                 ldv_schedule_work_120(& adapter->reset_task); else ;
  
#line 6305 
  if ((icr & 268435456U) != 0U) 
#line 6307 
                                adapter->stats.doosync += 1ULL; else ;
  
#line 6310 
  if ((icr & 12U) != 0U) {
    int tmp_0;
    
#line 6311 
    hw->mac.get_link_status = (_Bool)1;
    
#line 6313 
    tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 6313 
    if (tmp_0 == 0) 
#line 6314 
                    ldv_mod_timer_121(& adapter->watchdog_timer,jiffies + 1UL); else ;
  }
  else ;
  
#line 6317 
  if ((icr & 524288U) != 0U) 
#line 6318 
                             igb_tsync_interrupt(adapter); else ;
  
#line 6320 
  napi_schedule(& q_vector->napi);
  
#line 6322 
  __retres = IRQ_HANDLED;
  return_label: 
#line 6322 
                return __retres;
}


#line 6325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_ring_irq_enable(struct igb_q_vector *q_vector)
{
  int tmp_0;
  
#line 6327 
  struct igb_adapter *adapter = q_vector->adapter;
  
#line 6328 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6330 
  if ((q_vector->rx.ring != (struct igb_ring *)0 && (adapter->rx_itr_setting & 3U) != 0U) || (q_vector->rx.ring == (struct igb_ring *)0 && (adapter->tx_itr_setting & 3U) != 0U)) 
    
#line 6332 
    if (adapter->num_q_vectors == 1U && adapter->vf_data == (struct vf_data_storage *)0) 
      
#line 6333 
      igb_set_itr(q_vector); else 
#line 6335 
                                  igb_update_ring_itr(q_vector);
  else ;
  
#line 6338 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 6338 
  if (tmp_0 == 0) 
    
#line 6339 
    if ((adapter->flags & 8192U) != 0U) {
      u8 * volatile *tmp;
      {
        
#line 6340 
        u8 *__var = (u8 *)0U;
        
#line 6340 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 6340 
      u8 *hw_addr = *tmp;
      
#line 6340 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 6340 
                                             writel(q_vector->eims_value,(void volatile *)(hw_addr + 5412U)); else ;
    }
    else 
#line 6342 
         igb_irq_enable(adapter);
  else ;
  
#line 6343 
  return;
}


#line 6351  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_poll(struct napi_struct *napi, int budget)
{
  int __retres;
  struct igb_q_vector *tmp;
  {
    
#line 6353 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 6353 
    tmp = (struct igb_q_vector *)__mptr + 18446744073709551536U;
  }
  
#line 6353 
  struct igb_q_vector *q_vector = tmp;
  
#line 6356 
  bool clean_complete = (_Bool)1;
  
#line 6359 
  if (((q_vector->adapter)->flags & 2U) != 0U) 
#line 6360 
                                               igb_update_dca(q_vector); else ;
  
#line 6362 
  if (q_vector->tx.ring != (struct igb_ring *)0) 
#line 6363 
                                                 clean_complete = igb_clean_tx_irq(q_vector); else ;
  
#line 6365 
  if (q_vector->rx.ring != (struct igb_ring *)0) {
    bool tmp_0;
    
#line 6366 
    tmp_0 = igb_clean_rx_irq(q_vector,budget);
    
#line 6366 
    clean_complete = (_Bool)(((int)clean_complete & (int)tmp_0) != 0);
  }
  else ;
  
#line 6369 
  if (! clean_complete) {
    
#line 6370 
    __retres = budget;
    
#line 6370 
    goto return_label;
  }
  else ;
  
#line 6373 
  napi_complete(napi);
  
#line 6374 
  igb_ring_irq_enable(q_vector);
  
#line 6376 
  __retres = 0;
  return_label: 
#line 6376 
                return __retres;
}


#line 6385  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_clean_tx_irq(struct igb_q_vector *q_vector)
{
  bool __retres;
  struct igb_tx_buffer *tx_buffer;
  union e1000_adv_tx_desc *tx_desc;
  int tmp;
  struct netdev_queue *tmp_0;
  int tmp_7;
  int tmp_11;
  
#line 6387 
  struct igb_adapter *adapter = q_vector->adapter;
  
#line 6388 
  struct igb_ring *tx_ring = q_vector->tx.ring;
  
#line 6391 
  unsigned int total_bytes = 0U;
  
#line 6391 
  unsigned int total_packets = 0U;
  
#line 6392 
  unsigned int budget = (unsigned int)q_vector->tx.work_limit;
  
#line 6393 
  unsigned int i = (unsigned int)tx_ring->next_to_clean;
  
#line 6395 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 6395 
  if (tmp != 0) {
    
#line 6396 
    __retres = (_Bool)1;
    
#line 6396 
    goto return_label;
  }
  else ;
  
#line 6398 
  tx_buffer = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info + i;
  
#line 6399 
  tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc + i;
  
#line 6400 
  i -= (unsigned int)tx_ring->count;
  ldv_58864: 
#line 6401 
  ;
  {
    
#line 6403 
    union e1000_adv_tx_desc *eop_desc = tx_buffer->next_to_watch;
    
#line 6406 
    if (eop_desc == (union e1000_adv_tx_desc *)0) 
#line 6407 
                                                  goto ldv_58860; else ;
    
#line 6413 
    if ((eop_desc->wb.status & 1U) == 0U) 
#line 6414 
                                          goto ldv_58860; else ;
    
#line 6417 
    tx_buffer->next_to_watch = (union e1000_adv_tx_desc *)0;
    
#line 6420 
    total_bytes = tx_buffer->bytecount + total_bytes;
    
#line 6421 
    total_packets = (unsigned int)tx_buffer->gso_segs + total_packets;
    
#line 6424 
    dev_consume_skb_any(tx_buffer->skb);
    
#line 6427 
    dma_unmap_single_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
    
#line 6433 
    tx_buffer->skb = (struct sk_buff *)0;
    
#line 6434 
    tx_buffer->len = 0U;
    
#line 6437 
    goto ldv_58862;
    ldv_58861: 
#line 6438 
    ;
    
#line 6438 
    tx_buffer += 1;
    
#line 6439 
    tx_desc += 1;
    
#line 6440 
    i += 1U;
    
#line 6441 
    if ((long)(i == 0U) != 0L) {
      
#line 6442 
      i -= (unsigned int)tx_ring->count;
      
#line 6443 
      tx_buffer = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info;
      
#line 6444 
      tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc;
    }
    else ;
    
#line 6448 
    if (tx_buffer->len != 0U) {
      
#line 6449 
      dma_unmap_page(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE);
      
#line 6453 
      tx_buffer->len = 0U;
    }
    else ;
    ldv_58862: 
#line 6455 
    ;
    
#line 6437 
    if (tx_desc != eop_desc) 
#line 6439 
                             goto ldv_58861; else 
#line 6442 
                                                  goto ldv_58863;
    ldv_58863: 
#line 6443 
    ;
    
#line 6458 
    tx_buffer += 1;
    
#line 6459 
    tx_desc += 1;
    
#line 6460 
    i += 1U;
    
#line 6461 
    if ((long)(i == 0U) != 0L) {
      
#line 6462 
      i -= (unsigned int)tx_ring->count;
      
#line 6463 
      tx_buffer = tx_ring->__anonCompField_igb_ring_97.tx_buffer_info;
      
#line 6464 
      tx_desc = (union e1000_adv_tx_desc *)tx_ring->desc;
    }
    else ;
    
#line 6468 
    __builtin_prefetch((void const *)tx_desc);
    
#line 6471 
    budget -= 1U;
  }
  
#line 6472 
  if ((long)(budget != 0U) != 0L) 
#line 6474 
                                  goto ldv_58864; else 
#line 6477 
                                                       goto ldv_58860;
  ldv_58860: 
#line 6478 
  ;
  
#line 6474 
  ;
  
#line 6474 
  ;
  
#line 6474 
  tmp_0 = txring_txq((struct igb_ring const *)tx_ring);
  
#line 6474 
  netdev_tx_completed_queue(tmp_0,total_packets,total_bytes);
  
#line 6476 
  i = (unsigned int)tx_ring->count + i;
  
#line 6477 
  tx_ring->next_to_clean = (unsigned short)i;
  
#line 6478 
  u64_stats_init(& tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp);
  
#line 6479 
  tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.bytes += (unsigned long long)total_bytes;
  
#line 6480 
  tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.packets += (unsigned long long)total_packets;
  
#line 6481 
  u64_stats_init(& tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp);
  
#line 6482 
  q_vector->tx.total_bytes += total_bytes;
  
#line 6483 
  q_vector->tx.total_packets += total_packets;
  
#line 6485 
  tmp_7 = constant_test_bit(3L,(unsigned long const volatile *)(& tx_ring->flags));
  
#line 6485 
  if (tmp_7 != 0) {
    
#line 6486 
    struct e1000_hw *hw = & adapter->hw;
    
#line 6491 
    set_bit(3L,(unsigned long volatile *)(& tx_ring->flags));
    
#line 6492 
    if (tx_buffer->next_to_watch != (union e1000_adv_tx_desc *)0) {
      int tmp_4;
      {
        unsigned long __dummy;
        unsigned long volatile __dummy2;
        
#line 6493 
        tmp_4 = 1;
      }
      
#line 6492 
      if (tmp_4 != 0) {
        int tmp_5;
        {
          unsigned long __dummy_0;
          unsigned long __dummy2_0;
          
#line 6493 
          tmp_5 = 1;
        }
        
#line 6493 
        if (tmp_5 != 0) {
          
#line 6493 
          if ((long)((tx_buffer->time_stamp + (unsigned long)((int)adapter->tx_timeout_factor * 250)) - jiffies) < 0L) {
            u32 tmp_6;
            
#line 6494 
            tmp_6 = igb_rd32(hw,8U);
            
#line 6494 
            if ((tmp_6 & 16U) == 0U) {
              unsigned int tmp_1;
              u32 tmp_3;
              int tmp_2;
              
#line 6498 
              ;
              
#line 6498 
              ;
              
#line 6498 
              ;
              
#line 6498 
              ;
              
#line 6498 
              ;
              
#line 6498 
              ;
              
#line 6511 
              tmp_1 = readl((void const volatile *)tx_ring->tail);
              
#line 6511 
              if ((unsigned int)tx_ring->reg_idx <= 3U) 
#line 6511 
                                                        tmp_2 = (int)tx_ring->reg_idx * 256 + 14352; else 
                                                                    
#line 6511 
                                                                    tmp_2 = (int)tx_ring->reg_idx * 64 + 57360;
              
#line 6510 
              ;
              
#line 6510 
              tmp_3 = igb_rd32(hw,(unsigned int)tmp_2);
              
#line 6498 
              ;
              
#line 6498 
              ;
              
#line 6498 
              dev_err((struct device const *)tx_ring->dev,"Detected Tx Unit Hang\n",(int)tx_ring->queue_index,tmp_3,tmp_1,(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,tx_buffer->time_stamp,tx_buffer->next_to_watch,jiffies,(tx_buffer->next_to_watch)->wb.status);
              
#line 6519 
              netif_stop_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
              
#line 6523 
              __retres = (_Bool)1;
              
#line 6523 
              goto return_label;
            }
            else ;
          }
          else ;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 6528 
  if ((long)(total_packets != 0U) != 0L) {
    bool tmp_10;
    
#line 6528 
    tmp_10 = netif_carrier_ok((struct net_device const *)tx_ring->netdev);
    
#line 6528 
    if ((long)((int)tmp_10 != 0) != 0L) 
#line 6528 
                                        tmp_11 = 1; else 
#line 6528 
                                                         tmp_11 = 0;
  }
  else 
#line 6528 
       tmp_11 = 0;
  
#line 6528 
  if (tmp_11 != 0) {
    int tmp_12;
    
#line 6528 
    tmp_12 = igb_desc_unused(tx_ring);
    
#line 6528 
    if ((long)((unsigned int)tmp_12 > 41U) != 0L) {
      bool tmp_8;
      
#line 6530 
      ldv_inline_asm();
      
#line 6535 
      tmp_8 = __netif_subqueue_stopped((struct net_device const *)tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
      
#line 6535 
      if ((int)tmp_8 != 0) {
        int tmp_9;
        
#line 6536 
        tmp_9 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
        
#line 6536 
        if (tmp_9 == 0) {
          
#line 6538 
          netif_wake_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
          
#line 6541 
          u64_stats_init(& tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp);
          
#line 6542 
          tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_stats.restart_queue += 1ULL;
          
#line 6543 
          u64_stats_init(& tx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_98.tx_syncp);
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 6547 
  __retres = (_Bool)(budget != 0U);
  return_label: 
#line 6547 
                return __retres;
}


#line 6557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_reuse_rx_page(struct igb_ring *rx_ring, struct igb_rx_buffer *old_buff)
{
  struct igb_rx_buffer *new_buff;
  
#line 6561 
  u16 nta = rx_ring->next_to_alloc;
  
#line 6563 
  new_buff = rx_ring->__anonCompField_igb_ring_97.rx_buffer_info + (int)nta;
  
#line 6566 
  nta = (u16)((int)nta + 1);
  
#line 6567 
  if ((int)rx_ring->count > (int)nta) 
#line 6567 
                                      rx_ring->next_to_alloc = nta; else 
                                                                    
#line 6567 
                                                                    rx_ring->next_to_alloc = (unsigned short)0U;
  
#line 6570 
  *new_buff = *old_buff;
  
#line 6573 
  dma_sync_single_range_for_device(rx_ring->dev,old_buff->dma,(unsigned long)old_buff->page_offset,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 6575 
  return;
}


#line 6579  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static bool igb_page_is_reserved(struct page *page)
{
  bool __retres;
  int tmp_2;
  int tmp;
  int tmp_0;
  
#line 6581 
  tmp = page_to_nid((struct page const *)page);
  
#line 6581 
  tmp_0 = numa_mem_id();
  
#line 6581 
  if (tmp != tmp_0) 
#line 6581 
                    tmp_2 = 1;
  else {
    bool tmp_1;
    
#line 6581 
    tmp_1 = page_is_pfmemalloc(page);
    
#line 6581 
    if ((int)tmp_1 != 0) 
#line 6581 
                         tmp_2 = 1; else 
#line 6581 
                                         tmp_2 = 0;
  }
  
#line 6581 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 6581 
  return __retres;
}


#line 6584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_can_reuse_rx_page(struct igb_rx_buffer *rx_buffer, struct page *page, unsigned int truesize)
{
  bool __retres;
  bool tmp;
  int tmp_0;
  
#line 6589 
  tmp = igb_page_is_reserved(page);
  
#line 6589 
  if ((long)((int)tmp != 0) != 0L) {
    
#line 6590 
    __retres = (_Bool)0;
    
#line 6590 
    goto return_label;
  }
  else ;
  
#line 6594 
  tmp_0 = page_count(page);
  
#line 6594 
  if ((long)(tmp_0 != 1) != 0L) {
    
#line 6595 
    __retres = (_Bool)0;
    
#line 6595 
    goto return_label;
  }
  else ;
  
#line 6598 
  rx_buffer->page_offset ^= 2048U;
  
#line 6610 
  atomic_inc_0(& page->__anonCompField_page_45.__anonCompField___anonstruct_472_44.__anonCompField___anonunion_474_43._count);
  
#line 6612 
  __retres = (_Bool)1;
  return_label: 
#line 6612 
                return __retres;
}


#line 6630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_add_rx_frag(struct igb_ring *rx_ring, struct igb_rx_buffer *rx_buffer, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  bool __retres;
  unsigned char *tmp_6;
  bool tmp_7;
  
#line 6635 
  struct page *page = rx_buffer->page;
  
#line 6636 
  unsigned int size = (unsigned int)rx_desc->wb.upper.length;
  
#line 6638 
  unsigned int truesize = 2048U;
  
#line 6643 
  if (size <= 256U) {
    int tmp_5;
    bool tmp_4;
    
#line 6643 
    tmp_4 = skb_is_nonlinear((struct sk_buff const *)skb);
    
#line 6643 
    if (tmp_4) 
#line 6643 
               tmp_5 = 0; else 
#line 6643 
                               tmp_5 = 1;
    
#line 6643 
    if (tmp_5) {
      void *tmp;
      __le32 tmp_0;
      unsigned char *tmp_1;
      int tmp_3;
      bool tmp_2;
      
#line 6644 
      tmp = lowmem_page_address((struct page const *)page);
      
#line 6644 
      unsigned char *va = (unsigned char *)(tmp + rx_buffer->page_offset);
      
#line 6646 
      tmp_0 = igb_test_staterr(rx_desc,32768U);
      
#line 6646 
      if (tmp_0 != 0U) {
        
#line 6647 
        igb_ptp_rx_pktstamp(rx_ring->q_vector,va,skb);
        
#line 6648 
        va += 16U;
        
#line 6649 
        size += 4294967280U;
      }
      else ;
      
#line 6652 
      ;
      
#line 6652 
      ;
      
#line 6652 
      tmp_1 = __skb_put(skb,size);
      
#line 6652 
      memcpy((void *)tmp_1,(void const *)va,(unsigned long)(size + 7U) & 4294967288UL);
      
#line 6655 
      tmp_2 = igb_page_is_reserved(page);
      
#line 6655 
      if (tmp_2) 
#line 6655 
                 tmp_3 = 0; else 
#line 6655 
                                 tmp_3 = 1;
      
#line 6655 
      if ((long)tmp_3 != 0L) {
        
#line 6656 
        __retres = (_Bool)1;
        
#line 6656 
        goto return_label;
      }
      else ;
      
#line 6659 
      __free_pages(page,0U);
      
#line 6660 
      __retres = (_Bool)0;
      
#line 6660 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 6663 
  ;
  
#line 6663 
  ;
  
#line 6663 
  ;
  
#line 6663 
  ;
  
#line 6663 
  tmp_6 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 6663 
  ;
  
#line 6663 
  skb_add_rx_frag(skb,(int)((struct skb_shared_info *)tmp_6)->nr_frags,page,(int)rx_buffer->page_offset,(int)size,truesize);
  
#line 6666 
  tmp_7 = igb_can_reuse_rx_page(rx_buffer,page,truesize);
  
#line 6666 
  __retres = tmp_7;
  return_label: 
#line 6666 
                return __retres;
}


#line 6669  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static struct sk_buff *igb_fetch_rx_buffer(struct igb_ring *rx_ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  struct sk_buff *__retres;
  struct igb_rx_buffer *rx_buffer;
  struct page *page;
  bool tmp_0;
  
#line 6676 
  rx_buffer = rx_ring->__anonCompField_igb_ring_97.rx_buffer_info + (int)rx_ring->next_to_clean;
  
#line 6677 
  page = rx_buffer->page;
  
#line 6678 
  prefetchw((void const *)page);
  
#line 6680 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    void *tmp;
    
#line 6681 
    tmp = lowmem_page_address((struct page const *)page);
    
#line 6681 
    void *page_addr = tmp + rx_buffer->page_offset;
    
#line 6685 
    __builtin_prefetch((void const *)page_addr);
    
#line 6687 
    __builtin_prefetch((void const *)(page_addr + 64U));
    
#line 6691 
    skb = napi_alloc_skb(& (rx_ring->q_vector)->napi,256U);
    
#line 6692 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      
#line 6693 
      rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.alloc_failed += 1ULL;
      
#line 6694 
      __retres = (struct sk_buff *)0;
      
#line 6694 
      goto return_label;
    }
    else ;
    
#line 6701 
    prefetchw((void const *)skb->data);
  }
  else ;
  
#line 6705 
  dma_sync_single_range_for_cpu(rx_ring->dev,rx_buffer->dma,(unsigned long)rx_buffer->page_offset,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 6712 
  tmp_0 = igb_add_rx_frag(rx_ring,rx_buffer,rx_desc,skb);
  
#line 6712 
  if ((int)tmp_0 != 0) 
#line 6714 
                       igb_reuse_rx_page(rx_ring,rx_buffer); else 
#line 6717 
                                                                  dma_unmap_page(rx_ring->dev,rx_buffer->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 6722 
  rx_buffer->page = (struct page *)0;
  
#line 6724 
  __retres = skb;
  return_label: 
#line 6724 
                return __retres;
}


#line 6727  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static void igb_rx_checksum(struct igb_ring *ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  __le32 tmp;
  __le32 tmp_1;
  __le32 tmp_2;
  
#line 6731 
  skb_checksum_none_assert((struct sk_buff const *)skb);
  
#line 6734 
  tmp = igb_test_staterr(rx_desc,4U);
  
#line 6734 
  if (tmp != 0U) 
#line 6735 
                 goto return_label; else ;
  
#line 6738 
  if (((ring->netdev)->features & 17179869184ULL) == 0ULL) 
#line 6739 
                                                           goto return_label; else ;
  
#line 6742 
  tmp_1 = igb_test_staterr(rx_desc,1610612736U);
  
#line 6742 
  if (tmp_1 != 0U) {
    
#line 6749 
    if (skb->len != 60U) 
#line 6749 
                         goto _LOR;
    else {
      int tmp_0;
      
#line 6749 
      tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& ring->flags));
      
#line 6749 
      if (tmp_0 == 0) {
        _LOR: {
                
#line 6751 
                u64_stats_init(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_syncp);
                
#line 6752 
                ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.csum_err += 1ULL;
                
#line 6753 
                u64_stats_init(& ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_syncp);
              }
      }
      else ;
    }
    
#line 6756 
    goto return_label;
  }
  else ;
  
#line 6759 
  tmp_2 = igb_test_staterr(rx_desc,48U);
  
#line 6759 
  if (tmp_2 != 0U) 
#line 6761 
                   skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U; else ;
  {
    
#line 6763 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_rx_checksum", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c", .format = "cksum success: bits %08X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))6764U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 6763 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 6763 
                                                        __dynamic_dev_dbg(& descriptor,(struct device const *)ring->dev,"cksum success: bits %08X\n",rx_desc->wb.upper.status_error); else ;
  }
  return_label: 
#line 6765 
                return;
}


#line 6767  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
__inline static void igb_rx_hash(struct igb_ring *ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  
#line 6771 
  if (((ring->netdev)->features & 8589934592ULL) != 0ULL) 
#line 6772 
                                                          skb_set_hash(skb,rx_desc->wb.lower.hi_dword.rss,(enum pkt_hash_types)PKT_HASH_TYPE_L3); else ;
  
#line 6774 
  return;
}


#line 6788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_is_non_eop(struct igb_ring *rx_ring, union e1000_adv_rx_desc *rx_desc)
{
  bool __retres;
  __le32 tmp;
  
#line 6791 
  u32 ntc = (unsigned int)((int)rx_ring->next_to_clean + 1);
  
#line 6794 
  if ((unsigned int)rx_ring->count > ntc) 
#line 6794 
                                          ntc = ntc; else 
#line 6794 
                                                          ntc = 0U;
  
#line 6795 
  rx_ring->next_to_clean = (unsigned short)ntc;
  
#line 6797 
  __builtin_prefetch((void const *)rx_ring->desc + ntc);
  
#line 6799 
  tmp = igb_test_staterr(rx_desc,2U);
  
#line 6799 
  if ((long)(tmp != 0U) != 0L) {
    
#line 6800 
    __retres = (_Bool)0;
    
#line 6800 
    goto return_label;
  }
  else ;
  
#line 6802 
  __retres = (_Bool)1;
  return_label: 
#line 6802 
                return __retres;
}


#line 6818  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_pull_tail(struct igb_ring *rx_ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  unsigned char *tmp;
  unsigned char *va;
  unsigned int pull_len;
  __le32 tmp_1;
  
#line 6822 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 6822 
  struct skb_frag_struct *frag = & ((struct skb_shared_info *)tmp)->frags[0];
  
#line 6830 
  va = (unsigned char *)skb_frag_address((skb_frag_t const *)frag);
  
#line 6832 
  tmp_1 = igb_test_staterr(rx_desc,32768U);
  
#line 6832 
  if (tmp_1 != 0U) {
    
#line 6834 
    igb_ptp_rx_pktstamp(rx_ring->q_vector,va,skb);
    
#line 6837 
    skb_frag_size_sub(frag,16);
    
#line 6838 
    frag->page_offset += 16U;
    
#line 6839 
    skb->data_len += 4294967280U;
    
#line 6840 
    skb->len += 4294967280U;
    
#line 6843 
    va += 16U;
  }
  else ;
  
#line 6849 
  pull_len = eth_get_headlen((void *)va,256U);
  
#line 6852 
  skb_copy_to_linear_data(skb,(void const *)va,(pull_len + 7U) & 4294967288U);
  
#line 6855 
  skb_frag_size_sub(frag,(int)pull_len);
  
#line 6856 
  frag->page_offset += pull_len;
  
#line 6857 
  skb->data_len -= pull_len;
  
#line 6858 
  skb->tail += pull_len;
  
#line 6859 
  return;
}


#line 6875  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_cleanup_headers(struct igb_ring *rx_ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  bool __retres;
  __le32 tmp;
  bool tmp_0;
  int tmp_1;
  
#line 6879 
  tmp = igb_test_staterr(rx_desc,2533359616U);
  
#line 6879 
  if ((long)(tmp != 0U) != 0L) {
    
#line 6881 
    struct net_device *netdev = rx_ring->netdev;
    
#line 6882 
    if ((netdev->features & 274877906944ULL) == 0ULL) {
      
#line 6883 
      dev_kfree_skb_any(skb);
      
#line 6884 
      __retres = (_Bool)1;
      
#line 6884 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 6889 
  tmp_0 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 6889 
  if ((int)tmp_0 != 0) 
#line 6890 
                       igb_pull_tail(rx_ring,rx_desc,skb); else ;
  
#line 6893 
  tmp_1 = eth_skb_pad(skb);
  
#line 6893 
  if (tmp_1 != 0) {
    
#line 6894 
    __retres = (_Bool)1;
    
#line 6894 
    goto return_label;
  }
  else ;
  
#line 6896 
  __retres = (_Bool)0;
  return_label: 
#line 6896 
                return __retres;
}


#line 6909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_process_skb_fields(struct igb_ring *rx_ring, union e1000_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  __le32 tmp;
  
#line 6913 
  struct net_device *dev = rx_ring->netdev;
  
#line 6915 
  igb_rx_hash(rx_ring,rx_desc,skb);
  
#line 6917 
  igb_rx_checksum(rx_ring,rx_desc,skb);
  
#line 6919 
  tmp = igb_test_staterr(rx_desc,65536U);
  
#line 6919 
  if (tmp != 0U) {
    __le32 tmp_0;
    
#line 6919 
    tmp_0 = igb_test_staterr(rx_desc,32768U);
    
#line 6919 
    if (tmp_0 == 0U) 
#line 6921 
                     igb_ptp_rx_rgtstamp(rx_ring->q_vector,skb); else ;
  }
  else ;
  
#line 6923 
  if ((dev->features & 256ULL) != 0ULL) {
    __le32 tmp_4;
    
#line 6923 
    tmp_4 = igb_test_staterr(rx_desc,8U);
    
#line 6923 
    if (tmp_4 != 0U) {
      u16 vid;
      __le32 tmp_2;
      
#line 6927 
      tmp_2 = igb_test_staterr(rx_desc,262144U);
      
#line 6927 
      if (tmp_2 != 0U) {
        int tmp_3;
        
#line 6927 
        tmp_3 = constant_test_bit(1L,(unsigned long const volatile *)(& rx_ring->flags));
        
#line 6927 
        if (tmp_3 != 0) 
          
#line 6929 
          if (0 != 0) 
#line 6929 
                      vid = (unsigned short)(((int)rx_desc->wb.upper.vlan << 8) | ((int)rx_desc->wb.upper.vlan >> 8)); else 
                                                                    
#line 6929 
                                                                    vid = __fswab16((unsigned short)((int)rx_desc->wb.upper.vlan));
        else 
#line 6931 
             vid = rx_desc->wb.upper.vlan;
      }
      else 
#line 6931 
           vid = rx_desc->wb.upper.vlan;
      
#line 6933 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
    }
    else ;
  }
  else ;
  
#line 6936 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->queue_index));
  
#line 6938 
  skb->protocol = eth_type_trans(skb,rx_ring->netdev);
  
#line 6939 
  return;
}


#line 6941  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_clean_rx_irq(struct igb_q_vector *q_vector, int const budget)
{
  bool __retres;
  int tmp;
  
#line 6943 
  struct igb_ring *rx_ring = q_vector->rx.ring;
  
#line 6944 
  struct sk_buff *skb = rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.skb;
  
#line 6945 
  unsigned int total_bytes = 0U;
  
#line 6945 
  unsigned int total_packets = 0U;
  
#line 6946 
  tmp = igb_desc_unused(rx_ring);
  
#line 6946 
  u16 cleaned_count = (unsigned short)tmp;
  
#line 6948 
  goto ldv_58953;
  ldv_58954: 
#line 6949 
  ;
  {
    union e1000_adv_rx_desc *rx_desc;
    bool tmp_0;
    bool tmp_1;
    
#line 6952 
    if ((unsigned int)cleaned_count > 15U) {
      
#line 6953 
      igb_alloc_rx_buffers(rx_ring,(unsigned short)((int)cleaned_count));
      
#line 6954 
      cleaned_count = (unsigned short)0U;
    }
    else ;
    
#line 6957 
    rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (int)rx_ring->next_to_clean;
    
#line 6959 
    if (rx_desc->wb.upper.status_error == 0U) 
#line 6960 
                                              goto ldv_58952; else ;
    
#line 6961 
    ldv_inline_asm();
    
#line 6969 
    skb = igb_fetch_rx_buffer(rx_ring,rx_desc,skb);
    
#line 6972 
    if (skb == (struct sk_buff *)0) 
#line 6973 
                                    goto ldv_58952; else ;
    
#line 6975 
    cleaned_count = (u16)((int)cleaned_count + 1);
    
#line 6978 
    tmp_0 = igb_is_non_eop(rx_ring,rx_desc);
    
#line 6978 
    if ((int)tmp_0 != 0) 
#line 6979 
                         goto ldv_58953; else ;
    
#line 6982 
    tmp_1 = igb_cleanup_headers(rx_ring,rx_desc,skb);
    
#line 6982 
    if ((int)tmp_1 != 0) {
      
#line 6983 
      skb = (struct sk_buff *)0;
      
#line 6984 
      goto ldv_58953;
    }
    else ;
    
#line 6988 
    total_bytes = skb->len + total_bytes;
    
#line 6991 
    igb_process_skb_fields(rx_ring,rx_desc,skb);
    
#line 6993 
    napi_gro_receive(& q_vector->napi,skb);
    
#line 6996 
    skb = (struct sk_buff *)0;
    
#line 6999 
    total_packets += 1U;
  }
  ldv_58953: 
#line 7001 
  ;
  
#line 6948 
  if ((long)(total_packets < (unsigned int)budget) != 0L) 
#line 6950 
                                                          goto ldv_58954; else 
                                                                    
#line 6953 
                                                                    goto ldv_58952;
  ldv_58952: 
#line 6954 
  ;
  
#line 7003 
  rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.skb = skb;
  
#line 7005 
  u64_stats_init(& rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_syncp);
  
#line 7006 
  rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.packets += (unsigned long long)total_packets;
  
#line 7007 
  rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.bytes += (unsigned long long)total_bytes;
  
#line 7008 
  u64_stats_init(& rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_syncp);
  
#line 7009 
  q_vector->rx.total_packets += total_packets;
  
#line 7010 
  q_vector->rx.total_bytes += total_bytes;
  
#line 7012 
  if ((unsigned int)cleaned_count != 0U) 
#line 7013 
                                         igb_alloc_rx_buffers(rx_ring,(unsigned short)((int)cleaned_count)); else ;
  
#line 7015 
  __retres = (_Bool)(total_packets < (unsigned int)budget);
  
#line 7015 
  return __retres;
}


#line 7018  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static bool igb_alloc_mapped_page(struct igb_ring *rx_ring, struct igb_rx_buffer *bi)
{
  bool __retres;
  dma_addr_t dma;
  int tmp;
  
#line 7021 
  struct page *page = bi->page;
  
#line 7025 
  if ((long)(page != (struct page *)0) != 0L) {
    
#line 7026 
    __retres = (_Bool)1;
    
#line 7026 
    goto return_label;
  }
  else ;
  
#line 7029 
  page = dev_alloc_page();
  
#line 7030 
  if ((long)(page == (struct page *)0) != 0L) {
    
#line 7031 
    rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.alloc_failed += 1ULL;
    
#line 7032 
    __retres = (_Bool)0;
    
#line 7032 
    goto return_label;
  }
  else ;
  
#line 7036 
  dma = dma_map_page(rx_ring->dev,page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 7041 
  tmp = dma_mapping_error(rx_ring->dev,dma);
  
#line 7041 
  if (tmp != 0) {
    
#line 7042 
    __free_pages(page,0U);
    
#line 7044 
    rx_ring->__anonCompField_igb_ring_100.__anonCompField___anonunion_644_99.rx_stats.alloc_failed += 1ULL;
    
#line 7045 
    __retres = (_Bool)0;
    
#line 7045 
    goto return_label;
  }
  else ;
  
#line 7048 
  bi->dma = dma;
  
#line 7049 
  bi->page = page;
  
#line 7050 
  bi->page_offset = 0U;
  
#line 7052 
  __retres = (_Bool)1;
  return_label: 
#line 7052 
                return __retres;
}


#line 7059  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_alloc_rx_buffers(struct igb_ring *rx_ring, u16 cleaned_count)
{
  union e1000_adv_rx_desc *rx_desc;
  struct igb_rx_buffer *bi;
  int tmp_0;
  bool tmp;
  
#line 7063 
  u16 i = rx_ring->next_to_use;
  
#line 7066 
  if ((unsigned int)cleaned_count == 0U) 
#line 7067 
                                         goto return_label; else ;
  
#line 7069 
  rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc + (int)i;
  
#line 7070 
  bi = rx_ring->__anonCompField_igb_ring_97.rx_buffer_info + (int)i;
  
#line 7071 
  i = (unsigned short)((int)i - (int)rx_ring->count);
  ldv_58969: 
#line 7072 
  ;
  
#line 7074 
  tmp = igb_alloc_mapped_page(rx_ring,bi);
  
#line 7074 
  if (tmp) 
#line 7074 
           tmp_0 = 0; else 
#line 7074 
                           tmp_0 = 1;
  
#line 7074 
  if (tmp_0) 
#line 7075 
             goto ldv_58968; else ;
  
#line 7080 
  rx_desc->read.pkt_addr = bi->dma + (unsigned long long)bi->page_offset;
  
#line 7082 
  rx_desc += 1;
  
#line 7083 
  bi += 1;
  
#line 7084 
  i = (u16)((int)i + 1);
  
#line 7085 
  if ((long)((unsigned int)i == 0U) != 0L) {
    
#line 7086 
    rx_desc = (union e1000_adv_rx_desc *)rx_ring->desc;
    
#line 7087 
    bi = rx_ring->__anonCompField_igb_ring_97.rx_buffer_info;
    
#line 7088 
    i = (unsigned short)((int)i - (int)rx_ring->count);
  }
  else ;
  
#line 7092 
  rx_desc->wb.upper.status_error = 0U;
  
#line 7094 
  cleaned_count = (u16)((int)cleaned_count - 1);
  
#line 7095 
  if ((unsigned int)cleaned_count != 0U) 
#line 7097 
                                         goto ldv_58969; else 
#line 7100 
                                                              goto ldv_58968;
  ldv_58968: 
#line 7101 
  ;
  
#line 7097 
  i = (unsigned short)((int)rx_ring->count + (int)i);
  
#line 7099 
  if ((int)rx_ring->next_to_use != (int)i) {
    
#line 7101 
    rx_ring->next_to_use = i;
    
#line 7104 
    rx_ring->next_to_alloc = i;
    
#line 7105 
    ldv_inline_asm();
    
#line 7112 
    writel((unsigned int)i,(void volatile *)rx_ring->tail);
  }
  else ;
  return_label: 
#line 7114 
                return;
}


#line 7122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_mii_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  int __retres;
  
#line 7124 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7125 
  struct mii_ioctl_data *data = if_mii(ifr);
  
#line 7127 
  if (adapter->hw.phy.media_type != (unsigned int)e1000_media_type_copper) {
    
#line 7128 
    __retres = -95;
    
#line 7128 
    goto return_label;
  }
  else ;
  
#line 7130 
  switch (cmd) {
    s32 tmp_1;
    case 35143: 
#line 7131 
    ;
    
#line 7132 
    data->phy_id = (unsigned short)adapter->hw.phy.addr;
    
#line 7133 
    goto ldv_58978;
    case 35144: 
#line 7134 
    ;
    
#line 7135 
    tmp_1 = igb_read_phy_reg(& adapter->hw,(unsigned int)data->reg_num & 31U,& data->val_out);
    
#line 7135 
    if (tmp_1 != 0) {
      
#line 7137 
      __retres = -5;
      
#line 7137 
      goto return_label;
    }
    else ;
    
#line 7138 
    goto ldv_58978;
    case 35145: 
#line 7139 
    ;
    default: 
#line 7140 
    ;
    
#line 7141 
    __retres = -95;
    
#line 7141 
    goto return_label;
  }
  ldv_58978: 
#line 7143 
  ;
  
#line 7143 
  __retres = 0;
  return_label: 
#line 7143 
                return __retres;
}


#line 7152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  int __retres;
  
#line 7154 
  switch (cmd) {
    int tmp;
    int tmp_0;
    int tmp_1;
    case 35143: 
#line 7155 
    ;
    case 35144: 
#line 7156 
    ;
    case 35145: 
#line 7157 
    ;
    
#line 7158 
    tmp = igb_mii_ioctl(netdev,ifr,cmd);
    
#line 7158 
    __retres = tmp;
    
#line 7158 
    goto return_label;
    case 35249: 
#line 7159 
    ;
    
#line 7160 
    tmp_0 = igb_ptp_get_ts_config(netdev,ifr);
    
#line 7160 
    __retres = tmp_0;
    
#line 7160 
    goto return_label;
    case 35248: 
#line 7161 
    ;
    
#line 7162 
    tmp_1 = igb_ptp_set_ts_config(netdev,ifr);
    
#line 7162 
    __retres = tmp_1;
    
#line 7162 
    goto return_label;
    default: 
#line 7163 
    ;
    
#line 7164 
    __retres = -95;
    
#line 7164 
    goto return_label;
  }
  return_label: 
#line 7154 
                return __retres;
}


#line 7168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_read_pci_cfg(struct e1000_hw *hw, u32 reg, u16 *value)
{
  
#line 7170 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  
#line 7172 
  pci_read_config_word((struct pci_dev const *)adapter->pdev,(int)reg,value);
  
#line 7173 
  return;
}


#line 7175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
void igb_write_pci_cfg(struct e1000_hw *hw, u32 reg, u16 *value)
{
  
#line 7177 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  
#line 7179 
  pci_write_config_word((struct pci_dev const *)adapter->pdev,(int)reg,(unsigned short)((int)*value));
  
#line 7180 
  return;
}


#line 7182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_read_pcie_cap_reg(struct e1000_hw *hw, u32 reg, u16 *value)
{
  s32 __retres;
  int tmp;
  
#line 7184 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  
#line 7186 
  tmp = pcie_capability_read_word(adapter->pdev,(int)reg,value);
  
#line 7186 
  if (tmp != 0) {
    
#line 7187 
    __retres = -3;
    
#line 7187 
    goto return_label;
  }
  else ;
  
#line 7189 
  __retres = 0;
  return_label: 
#line 7189 
                return __retres;
}


#line 7192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_write_pcie_cap_reg(struct e1000_hw *hw, u32 reg, u16 *value)
{
  s32 __retres;
  int tmp;
  
#line 7194 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  
#line 7196 
  tmp = pcie_capability_write_word(adapter->pdev,(int)reg,(unsigned short)((int)*value));
  
#line 7196 
  if (tmp != 0) {
    
#line 7197 
    __retres = -3;
    
#line 7197 
    goto return_label;
  }
  else ;
  
#line 7199 
  __retres = 0;
  return_label: 
#line 7199 
                return __retres;
}


#line 7202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_vlan_mode(struct net_device *netdev, netdev_features_t features)
{
  u32 ctrl;
  u32 rctl;
  
#line 7204 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7205 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7207 
  bool enable = (_Bool)((features & 256ULL) != 0ULL);
  
#line 7209 
  if ((int)enable != 0) {
    
#line 7211 
    ctrl = igb_rd32(hw,0U);
    
#line 7212 
    ctrl |= 1073741824U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 7213 
        u8 *__var = (u8 *)0U;
        
#line 7213 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7213 
      u8 *hw_addr = *tmp_0;
      
#line 7213 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 7213 
                                             writel(ctrl,(void volatile *)hw_addr); else ;
    }
    
#line 7216 
    rctl = igb_rd32(hw,256U);
    
#line 7217 
    rctl &= 4294443007U;
    {
      u8 * volatile *tmp_1;
      {
        
#line 7218 
        u8 *__var_0 = (u8 *)0U;
        
#line 7218 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7218 
      u8 *hw_addr_0 = *tmp_1;
      
#line 7218 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 7218 
                                               writel(rctl,(void volatile *)(hw_addr_0 + 256U)); else ;
    }
  }
  else {
    
#line 7221 
    ctrl = igb_rd32(hw,0U);
    
#line 7222 
    ctrl &= 3221225471U;
    {
      u8 * volatile *tmp_2;
      {
        
#line 7223 
        u8 *__var_1 = (u8 *)0U;
        
#line 7223 
        tmp_2 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7223 
      u8 *hw_addr_1 = *tmp_2;
      
#line 7223 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 7223 
                                               writel(ctrl,(void volatile *)hw_addr_1); else ;
    }
  }
  
#line 7226 
  igb_rlpml_set(adapter);
  
#line 7227 
  return;
}


#line 7229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  
#line 7232 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7233 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7234 
  int pf_id = (int)adapter->vfs_allocated_count;
  
#line 7237 
  igb_vlvf_set(adapter,(unsigned int)vid,(_Bool)1,(unsigned int)pf_id);
  
#line 7240 
  igb_vfta_set(hw,(unsigned int)vid,(_Bool)1);
  
#line 7242 
  set_bit((long)vid,(unsigned long volatile *)(& adapter->active_vlans));
  
#line 7244 
  __retres = 0;
  
#line 7244 
  return __retres;
}


#line 7247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  s32 err;
  
#line 7250 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7251 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7252 
  int pf_id = (int)adapter->vfs_allocated_count;
  
#line 7256 
  err = igb_vlvf_set(adapter,(unsigned int)vid,(_Bool)0,(unsigned int)pf_id);
  
#line 7259 
  if (err != 0) 
#line 7260 
                igb_vfta_set(hw,(unsigned int)vid,(_Bool)0); else ;
  
#line 7262 
  set_bit((long)vid,(unsigned long volatile *)(& adapter->active_vlans));
  
#line 7264 
  __retres = 0;
  
#line 7264 
  return __retres;
}


#line 7267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_restore_vlan(struct igb_adapter *adapter)
{
  u16 vid;
  unsigned long tmp;
  unsigned long tmp_0;
  
#line 7271 
  igb_vlan_mode(adapter->netdev,(adapter->netdev)->features);
  
#line 7273 
  tmp = find_first_bit((unsigned long const *)(& adapter->active_vlans),4096UL);
  
#line 7273 
  vid = (unsigned short)tmp;
  
#line 7273 
  goto ldv_59057;
  ldv_59056: 
#line 7274 
  ;
  
#line 7274 
  igb_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)((int)vid));
  
#line 7273 
  tmp_0 = find_next_bit((unsigned long const *)(& adapter->active_vlans),4096UL,(unsigned long)((int)vid + 1));
  
#line 7273 
  vid = (unsigned short)tmp_0;
  ldv_59057: 
#line 7274 
  ;
  
#line 7273 
  if ((unsigned int)vid <= 4095U) 
#line 7275 
                                  goto ldv_59056; else 
#line 7278 
                                                       goto ldv_59058;
  ldv_59058: 
#line 7279 
  ;
  
#line 7280 
  return;
}


#line 7277  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_set_spd_dplx(struct igb_adapter *adapter, u32 spd, u8 dplx)
{
  int __retres;
  
#line 7279 
  struct pci_dev *pdev = adapter->pdev;
  
#line 7280 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  
#line 7282 
  mac->autoneg = (_Bool)0;
  
#line 7287 
  if ((spd & 1U) != 0U || ((int)dplx & -2) != 0) 
#line 7288 
                                                 goto err_inval; else ;
  
#line 7293 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_internal_serdes) {
    
#line 7294 
    switch ((unsigned int)dplx + spd) {
      case (unsigned int)10: 
#line 7295 
      ;
      case (unsigned int)11: 
#line 7296 
      ;
      case (unsigned int)100: 
#line 7297 
      ;
      
#line 7298 
      goto err_inval;
      default: 
#line 7299 
      ;
      
#line 7300 
      goto ldv_59071;
    }
    ldv_59071: 
#line 7302 
    ;
  }
  else ;
  
#line 7304 
  switch ((unsigned int)dplx + spd) {
    case (unsigned int)10: 
#line 7305 
    ;
    
#line 7306 
    mac->forced_speed_duplex = (unsigned char)1U;
    
#line 7307 
    goto ldv_59073;
    case (unsigned int)11: 
#line 7308 
    ;
    
#line 7309 
    mac->forced_speed_duplex = (unsigned char)2U;
    
#line 7310 
    goto ldv_59073;
    case (unsigned int)100: 
#line 7311 
    ;
    
#line 7312 
    mac->forced_speed_duplex = (unsigned char)4U;
    
#line 7313 
    goto ldv_59073;
    case (unsigned int)101: 
#line 7314 
    ;
    
#line 7315 
    mac->forced_speed_duplex = (unsigned char)8U;
    
#line 7316 
    goto ldv_59073;
    case (unsigned int)1001: 
#line 7317 
    ;
    
#line 7318 
    mac->autoneg = (_Bool)1;
    
#line 7319 
    adapter->hw.phy.autoneg_advertised = (unsigned short)32U;
    
#line 7320 
    goto ldv_59073;
    case (unsigned int)1000: 
#line 7321 
    ;
    default: 
#line 7322 
    ;
    
#line 7323 
    goto err_inval;
  }
  ldv_59073: 
#line 7327 
  ;
  
#line 7327 
  adapter->hw.phy.mdix = (unsigned char)0U;
  
#line 7329 
  __retres = 0;
  
#line 7329 
  goto return_label;
  err_inval: 
#line 7331 
  ;
  
#line 7332 
  dev_err((struct device const *)(& pdev->dev),"Unsupported Speed/Duplex configuration\n");
  
#line 7333 
  __retres = -22;
  return_label: 
#line 7333 
                return __retres;
}


#line 7336  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int __igb_shutdown(struct pci_dev *pdev, bool *enable_wake, bool runtime)
{
  int __retres;
  u32 ctrl;
  u32 rctl;
  u32 status;
  unsigned int tmp_1;
  bool tmp_2;
  
#line 7339 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 7340 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7341 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7343 
  if (runtime) 
#line 7343 
               tmp_1 = 1U; else 
#line 7343 
                                tmp_1 = adapter->wol;
  
#line 7343 
  u32 wufc = tmp_1;
  
#line 7345 
  int retval = 0;
  
#line 7348 
  netif_device_detach(netdev);
  
#line 7350 
  tmp_2 = netif_running((struct net_device const *)netdev);
  
#line 7350 
  if ((int)tmp_2 != 0) 
#line 7351 
                       __igb_close(netdev,(_Bool)1); else ;
  
#line 7353 
  igb_clear_interrupt_scheme(adapter);
  
#line 7356 
  retval = pci_save_state(pdev);
  
#line 7357 
  if (retval != 0) {
    
#line 7358 
    __retres = retval;
    
#line 7358 
    goto return_label;
  }
  else ;
  
#line 7361 
  status = igb_rd32(hw,8U);
  
#line 7362 
  if ((status & 2U) != 0U) 
#line 7363 
                           wufc &= 4294967294U; else ;
  
#line 7365 
  if (wufc != 0U) {
    
#line 7366 
    igb_setup_rctl(adapter);
    
#line 7367 
    igb_set_rx_mode(netdev);
    
#line 7370 
    if ((wufc & 8U) != 0U) {
      
#line 7371 
      rctl = igb_rd32(hw,256U);
      
#line 7372 
      rctl |= 16U;
      {
        u8 * volatile *tmp_3;
        {
          
#line 7373 
          u8 *__var = (u8 *)0U;
          
#line 7373 
          tmp_3 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 7373 
        u8 *hw_addr = *tmp_3;
        
#line 7373 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 7373 
                                               writel(rctl,(void volatile *)(hw_addr + 256U)); else ;
      }
    }
    else ;
    
#line 7376 
    ctrl = igb_rd32(hw,0U);
    
#line 7381 
    ctrl |= 1048576U;
    {
      u8 * volatile *tmp_4;
      {
        
#line 7382 
        u8 *__var_0 = (u8 *)0U;
        
#line 7382 
        tmp_4 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7382 
      u8 *hw_addr_0 = *tmp_4;
      
#line 7382 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 7382 
                                               writel(ctrl,(void volatile *)hw_addr_0); else ;
    }
    
#line 7385 
    igb_disable_pcie_master(hw);
    {
      u8 * volatile *tmp_5;
      {
        
#line 7387 
        u8 *__var_1 = (u8 *)0U;
        
#line 7387 
        tmp_5 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7387 
      u8 *hw_addr_1 = *tmp_5;
      
#line 7387 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 7387 
                                               writel(2U,(void volatile *)(hw_addr_1 + 22528U)); else ;
    }
    {
      u8 * volatile *tmp_6;
      {
        
#line 7388 
        u8 *__var_2 = (u8 *)0U;
        
#line 7388 
        tmp_6 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7388 
      u8 *hw_addr_2 = *tmp_6;
      
#line 7388 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 7388 
                                               writel(wufc,(void volatile *)(hw_addr_2 + 22536U)); else ;
    }
  }
  else {
    {
      u8 * volatile *tmp_7;
      {
        
#line 7390 
        u8 *__var_3 = (u8 *)0U;
        
#line 7390 
        tmp_7 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7390 
      u8 *hw_addr_3 = *tmp_7;
      
#line 7390 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 7390 
                                               writel(0U,(void volatile *)(hw_addr_3 + 22528U)); else ;
    }
    {
      u8 * volatile *tmp_8;
      {
        
#line 7391 
        u8 *__var_4 = (u8 *)0U;
        
#line 7391 
        tmp_8 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7391 
      u8 *hw_addr_4 = *tmp_8;
      
#line 7391 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 7391 
                                               writel(0U,(void volatile *)(hw_addr_4 + 22536U)); else ;
    }
  }
  
#line 7394 
  *enable_wake = (_Bool)((wufc != 0U || adapter->en_mng_pt != 0U) != 0);
  
#line 7395 
  if (! *enable_wake) 
#line 7396 
                      igb_power_down_link(adapter); else 
#line 7398 
                                                         igb_power_up_link(adapter);
  
#line 7403 
  igb_release_hw_control(adapter);
  
#line 7405 
  pci_disable_device(pdev);
  
#line 7407 
  __retres = 0;
  return_label: 
#line 7407 
                return __retres;
}


#line 7412  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_suspend(struct device *dev)
{
  int __retres;
  int retval;
  bool wake;
  struct pci_dev *tmp;
  {
    
#line 7416 
    struct device const *__mptr = (struct device const *)dev;
    
#line 7416 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 7416 
  struct pci_dev *pdev = tmp;
  
#line 7418 
  retval = __igb_shutdown(pdev,& wake,(_Bool)0);
  
#line 7419 
  if (retval != 0) {
    
#line 7420 
    __retres = retval;
    
#line 7420 
    goto return_label;
  }
  else ;
  
#line 7422 
  if ((int)wake != 0) 
#line 7423 
                      pci_prepare_to_sleep(pdev);
  else {
    
#line 7425 
    pci_wake_from_d3(pdev,(_Bool)0);
    
#line 7426 
    pci_set_power_state(pdev,3);
  }
  
#line 7429 
  __retres = 0;
  return_label: 
#line 7429 
                return __retres;
}


#line 7433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_resume(struct device *dev)
{
  int __retres;
  struct pci_dev *tmp;
  u32 err;
  int tmp_3;
  bool tmp_2;
  int tmp_4;
  int tmp_5;
  {
    
#line 7435 
    struct device const *__mptr = (struct device const *)dev;
    
#line 7435 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 7435 
  struct pci_dev *pdev = tmp;
  
#line 7436 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 7437 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7438 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7441 
  pci_set_power_state(pdev,0);
  
#line 7442 
  pci_restore_state(pdev);
  
#line 7443 
  pci_save_state(pdev);
  
#line 7445 
  tmp_2 = pci_device_is_present(pdev);
  
#line 7445 
  if (tmp_2) 
#line 7445 
             tmp_3 = 0; else 
#line 7445 
                             tmp_3 = 1;
  
#line 7445 
  if (tmp_3) {
    
#line 7446 
    __retres = -19;
    
#line 7446 
    goto return_label;
  }
  else ;
  
#line 7447 
  tmp_4 = pci_enable_device_mem(pdev);
  
#line 7447 
  err = (unsigned int)tmp_4;
  
#line 7448 
  if (err != 0U) {
    
#line 7449 
    dev_err((struct device const *)(& pdev->dev),"igb: Cannot enable PCI device from suspend\n");
    
#line 7451 
    __retres = (int)err;
    
#line 7451 
    goto return_label;
  }
  else ;
  
#line 7453 
  pci_set_master(pdev);
  
#line 7455 
  pci_enable_wake(pdev,3,(_Bool)0);
  
#line 7456 
  pci_enable_wake(pdev,4,(_Bool)0);
  
#line 7458 
  tmp_5 = igb_init_interrupt_scheme(adapter,(_Bool)1);
  
#line 7458 
  if (tmp_5 != 0) {
    
#line 7459 
    dev_err((struct device const *)(& pdev->dev),"Unable to allocate memory for queues\n");
    
#line 7460 
    __retres = -12;
    
#line 7460 
    goto return_label;
  }
  else ;
  
#line 7463 
  igb_reset(adapter);
  
#line 7468 
  igb_get_hw_control(adapter);
  {
    u8 * volatile *tmp_6;
    {
      
#line 7470 
      u8 *__var = (u8 *)0U;
      
#line 7470 
      tmp_6 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 7470 
    u8 *hw_addr = *tmp_6;
    
#line 7470 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 7470 
                                           writel(4294967295U,(void volatile *)(hw_addr + 22544U)); else ;
  }
  
#line 7472 
  if ((netdev->flags & 1U) != 0U) {
    int tmp_7;
    
#line 7473 
    rtnl_lock();
    
#line 7474 
    tmp_7 = __igb_open(netdev,(_Bool)1);
    
#line 7474 
    err = (unsigned int)tmp_7;
    
#line 7475 
    rtnl_unlock();
    
#line 7476 
    if (err != 0U) {
      
#line 7477 
      __retres = (int)err;
      
#line 7477 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 7480 
  netif_device_attach(netdev);
  
#line 7481 
  __retres = 0;
  return_label: 
#line 7481 
                return __retres;
}


#line 7484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_runtime_idle(struct device *dev)
{
  int __retres;
  struct pci_dev *tmp;
  int tmp_3;
  bool tmp_2;
  {
    
#line 7486 
    struct device const *__mptr = (struct device const *)dev;
    
#line 7486 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 7486 
  struct pci_dev *pdev = tmp;
  
#line 7487 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 7488 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7490 
  tmp_2 = igb_has_link(adapter);
  
#line 7490 
  if (tmp_2) 
#line 7490 
             tmp_3 = 0; else 
#line 7490 
                             tmp_3 = 1;
  
#line 7490 
  if (tmp_3) 
#line 7491 
             pm_schedule_suspend(dev,5000U); else ;
  
#line 7493 
  __retres = -16;
  
#line 7493 
  return __retres;
}


#line 7496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_runtime_suspend(struct device *dev)
{
  int __retres;
  struct pci_dev *tmp;
  int retval;
  bool wake;
  {
    
#line 7498 
    struct device const *__mptr = (struct device const *)dev;
    
#line 7498 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 7498 
  struct pci_dev *pdev = tmp;
  
#line 7502 
  retval = __igb_shutdown(pdev,& wake,(_Bool)1);
  
#line 7503 
  if (retval != 0) {
    
#line 7504 
    __retres = retval;
    
#line 7504 
    goto return_label;
  }
  else ;
  
#line 7506 
  if ((int)wake != 0) 
#line 7507 
                      pci_prepare_to_sleep(pdev);
  else {
    
#line 7509 
    pci_wake_from_d3(pdev,(_Bool)0);
    
#line 7510 
    pci_set_power_state(pdev,3);
  }
  
#line 7513 
  __retres = 0;
  return_label: 
#line 7513 
                return __retres;
}


#line 7516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_runtime_resume(struct device *dev)
{
  int tmp;
  
#line 7518 
  tmp = igb_resume(dev);
  
#line 7518 
  return tmp;
}


#line 7522  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_shutdown(struct pci_dev *pdev)
{
  bool wake;
  
#line 7526 
  __igb_shutdown(pdev,& wake,(_Bool)0);
  
#line 7528 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) {
    
#line 7529 
    pci_wake_from_d3(pdev,(_Bool)((bool)((int)wake) != 0));
    
#line 7530 
    pci_set_power_state(pdev,3);
  }
  else ;
  
#line 7532 
  return;
}


#line 7535  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_sriov_reinit(struct pci_dev *dev)
{
  int __retres;
  bool tmp_1;
  int tmp_2;
  bool tmp_3;
  
#line 7537 
  struct net_device *netdev = pci_get_drvdata(dev);
  
#line 7538 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7539 
  struct pci_dev *pdev = adapter->pdev;
  
#line 7541 
  rtnl_lock();
  
#line 7543 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 7543 
  if ((int)tmp_1 != 0) 
#line 7544 
                       igb_close(netdev); else 
#line 7546 
                                               igb_reset(adapter);
  
#line 7548 
  igb_clear_interrupt_scheme(adapter);
  
#line 7550 
  igb_init_queue_configuration(adapter);
  
#line 7552 
  tmp_2 = igb_init_interrupt_scheme(adapter,(_Bool)1);
  
#line 7552 
  if (tmp_2 != 0) {
    
#line 7553 
    dev_err((struct device const *)(& pdev->dev),"Unable to allocate memory for queues\n");
    
#line 7554 
    __retres = -12;
    
#line 7554 
    goto return_label;
  }
  else ;
  
#line 7557 
  tmp_3 = netif_running((struct net_device const *)netdev);
  
#line 7557 
  if ((int)tmp_3 != 0) 
#line 7558 
                       igb_open(netdev); else ;
  
#line 7560 
  rtnl_unlock();
  
#line 7562 
  __retres = 0;
  return_label: 
#line 7562 
                return __retres;
}


#line 7565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_pci_disable_sriov(struct pci_dev *dev)
{
  
#line 7567 
  int err = igb_disable_sriov(dev);
  
#line 7569 
  if (err == 0) 
#line 7570 
                err = igb_sriov_reinit(dev); else ;
  
#line 7572 
  return err;
}


#line 7575  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_pci_enable_sriov(struct pci_dev *dev, int num_vfs)
{
  int __retres;
  
#line 7577 
  int err = igb_enable_sriov(dev,num_vfs);
  
#line 7579 
  if (err != 0) 
#line 7580 
                goto out; else ;
  
#line 7582 
  err = igb_sriov_reinit(dev);
  
#line 7583 
  if (err == 0) {
    
#line 7584 
    __retres = num_vfs;
    
#line 7584 
    goto return_label;
  }
  else ;
  out: 
#line 7586 
  ;
  
#line 7587 
  __retres = err;
  return_label: 
#line 7587 
                return __retres;
}


#line 7591  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_pci_sriov_configure(struct pci_dev *dev, int num_vfs)
{
  int __retres;
  
#line 7594 
  if (num_vfs == 0) {
    int tmp;
    
#line 7595 
    tmp = igb_pci_disable_sriov(dev);
    
#line 7595 
    __retres = tmp;
    
#line 7595 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 7597 
    tmp_0 = igb_pci_enable_sriov(dev,num_vfs);
    
#line 7597 
    __retres = tmp_0;
    
#line 7597 
    goto return_label;
  }
  
#line 7599 
  __retres = 0;
  return_label: 
#line 7599 
                return __retres;
}


#line 7607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_netpoll(struct net_device *netdev)
{
  struct igb_q_vector *q_vector;
  int i;
  
#line 7609 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7610 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7614 
  i = 0;
  
#line 7614 
  goto ldv_59186;
  ldv_59185: 
#line 7615 
  ;
  
#line 7615 
  q_vector = adapter->q_vector[i];
  
#line 7616 
  if ((adapter->flags & 8192U) != 0U) {
    u8 * volatile *tmp_0;
    {
      
#line 7617 
      u8 *__var = (u8 *)0U;
      
#line 7617 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 7617 
    u8 *hw_addr = *tmp_0;
    
#line 7617 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 7617 
                                           writel(q_vector->eims_value,(void volatile *)(hw_addr + 5416U)); else ;
  }
  else 
#line 7619 
       igb_irq_disable(adapter);
  
#line 7620 
  napi_schedule(& q_vector->napi);
  
#line 7614 
  i += 1;
  ldv_59186: 
#line 7615 
  ;
  
#line 7614 
  if (adapter->num_q_vectors > (unsigned int)i) 
#line 7616 
                                                goto ldv_59185; else 
                                                                  
#line 7619 
                                                                  goto ldv_59187;
  ldv_59187: 
#line 7620 
  ;
  
#line 7621 
  return;
}


#line 7633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static pci_ers_result_t igb_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  pci_ers_result_t __retres;
  bool tmp_1;
  
#line 7636 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 7637 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7639 
  netif_device_detach(netdev);
  
#line 7641 
  if (state == 3U) {
    
#line 7642 
    __retres = 4U;
    
#line 7642 
    goto return_label;
  }
  else ;
  
#line 7644 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 7644 
  if ((int)tmp_1 != 0) 
#line 7645 
                       igb_down(adapter); else ;
  
#line 7646 
  pci_disable_device(pdev);
  
#line 7649 
  __retres = 3U;
  return_label: 
#line 7649 
                return __retres;
}


#line 7659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static pci_ers_result_t igb_io_slot_reset(struct pci_dev *pdev)
{
  pci_ers_result_t result;
  int err;
  int tmp_2;
  
#line 7661 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 7662 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7663 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7667 
  tmp_2 = pci_enable_device_mem(pdev);
  
#line 7667 
  if (tmp_2 != 0) {
    
#line 7668 
    dev_err((struct device const *)(& pdev->dev),"Cannot re-enable PCI device after reset.\n");
    
#line 7670 
    result = 4U;
  }
  else {
    
#line 7672 
    pci_set_master(pdev);
    
#line 7673 
    pci_restore_state(pdev);
    
#line 7674 
    pci_save_state(pdev);
    
#line 7676 
    pci_enable_wake(pdev,3,(_Bool)0);
    
#line 7677 
    pci_enable_wake(pdev,4,(_Bool)0);
    
#line 7679 
    igb_reset(adapter);
    {
      u8 * volatile *tmp_1;
      {
        
#line 7680 
        u8 *__var = (u8 *)0U;
        
#line 7680 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7680 
      u8 *hw_addr = *tmp_1;
      
#line 7680 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 7680 
                                             writel(4294967295U,(void volatile *)(hw_addr + 22544U)); else ;
    }
    
#line 7681 
    result = 5U;
  }
  
#line 7684 
  err = pci_cleanup_aer_uncorrect_error_status(pdev);
  
#line 7685 
  if (err != 0) 
#line 7686 
                dev_err((struct device const *)(& pdev->dev),"pci_cleanup_aer_uncorrect_error_status failed 0x%0x\n",err); else ;
  
#line 7692 
  return result;
}


#line 7703  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_io_resume(struct pci_dev *pdev)
{
  bool tmp_2;
  
#line 7705 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 7706 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7708 
  tmp_2 = netif_running((struct net_device const *)netdev);
  
#line 7708 
  if ((int)tmp_2 != 0) {
    int tmp_1;
    
#line 7709 
    tmp_1 = igb_up(adapter);
    
#line 7709 
    if (tmp_1 != 0) {
      
#line 7710 
      dev_err((struct device const *)(& pdev->dev),"igb_up failed after reset\n");
      
#line 7711 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 7715 
  netif_device_attach(netdev);
  
#line 7720 
  igb_get_hw_control(adapter);
  return_label: 
#line 7721 
                return;
}


#line 7723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_rar_set_qsel(struct igb_adapter *adapter, u8 *addr, u32 index, u8 qsel)
{
  u32 rar_low;
  u32 rar_high;
  
#line 7727 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7732 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  
#line 7734 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  
#line 7737 
  rar_high |= 2147483648U;
  
#line 7739 
  if (hw->mac.type == (unsigned int)e1000_82575) 
#line 7740 
                                                 rar_high = (unsigned int)((int)qsel * 262144) | rar_high; else 
                                                                    
#line 7742 
                                                                    rar_high = (unsigned int)(262144 << (int)qsel) | rar_high;
  {
    u8 * volatile *tmp;
    {
      
#line 7744 
      u8 *__var = (u8 *)0U;
      
#line 7744 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 7744 
    u8 *hw_addr = *tmp;
    
#line 7744 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      u32 tmp_0;
      
#line 7744 
      if (index <= 15U) 
#line 7744 
                        tmp_0 = (index + 2688U) * 8U; else 
#line 7744 
                                                           tmp_0 = (index + 2700U) * 8U;
      
#line 7744 
      ;
      
#line 7744 
      ;
      
#line 7744 
      writel(rar_low,(void volatile *)(hw_addr + tmp_0));
    }
    else ;
  }
  
#line 7745 
  igb_rd32(hw,8U);
  {
    u8 * volatile *tmp_1;
    {
      
#line 7746 
      u8 *__var_0 = (u8 *)0U;
      
#line 7746 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 7746 
    u8 *hw_addr_0 = *tmp_1;
    
#line 7746 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      u32 tmp_2;
      
#line 7746 
      if (index <= 15U) 
#line 7746 
                        tmp_2 = index * 8U + 21508U; else 
#line 7746 
                                                          tmp_2 = (index + 536870896U) * 8U + 21732U;
      
#line 7746 
      ;
      
#line 7746 
      ;
      
#line 7746 
      writel(rar_high,(void volatile *)(hw_addr_0 + tmp_2));
    }
    else ;
  }
  
#line 7747 
  igb_rd32(hw,8U);
  
#line 7748 
  return;
}


#line 7750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_set_vf_mac(struct igb_adapter *adapter, int vf, unsigned char *mac_addr)
{
  int __retres;
  
#line 7753 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7757 
  int rar_entry = (int)hw->mac.rar_entry_count - (vf + 1);
  
#line 7759 
  memcpy((void *)(& (adapter->vf_data + vf)->vf_mac_addresses),(void const *)mac_addr,6UL);
  
#line 7761 
  igb_rar_set_qsel(adapter,mac_addr,(unsigned int)rar_entry,(unsigned char)((int)((unsigned char)vf)));
  
#line 7763 
  __retres = 0;
  
#line 7763 
  return __retres;
}


#line 7766  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_set_vf_mac(struct net_device *netdev, int vf, u8 *mac)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  int tmp_2;
  int tmp_3;
  
#line 7768 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7769 
  tmp_0 = is_valid_ether_addr((u8 const *)mac);
  
#line 7769 
  if (tmp_0) 
#line 7769 
             tmp_1 = 0; else 
#line 7769 
                             tmp_1 = 1;
  
#line 7769 
  if (tmp_1) {
    
#line 7770 
    __retres = -22;
    
#line 7770 
    goto return_label;
  }
  else 
    
#line 7769 
    if (adapter->vfs_allocated_count <= (unsigned int)vf) {
      
#line 7770 
      __retres = -22;
      
#line 7770 
      goto return_label;
    }
    else ;
  
#line 7771 
  (adapter->vf_data + vf)->flags |= 8U;
  
#line 7772 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"setting MAC %pM on VF %d\n",mac,vf);
  
#line 7773 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Reload the VF driver to make this change effective.");
  
#line 7775 
  tmp_2 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 7775 
  if (tmp_2 != 0) {
    
#line 7776 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"The VF MAC address has been set, but the PF device is not up.\n");
    
#line 7778 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Bring the PF device up before attempting to use the VF device.\n");
  }
  else ;
  
#line 7781 
  tmp_3 = igb_set_vf_mac(adapter,vf,mac);
  
#line 7781 
  __retres = tmp_3;
  return_label: 
#line 7781 
                return __retres;
}


#line 7784  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_link_mbps(int internal_link_speed)
{
  int __retres;
  
#line 7786 
  switch (internal_link_speed) {
    case 100: 
#line 7787 
    ;
    
#line 7788 
    __retres = 100;
    
#line 7788 
    goto return_label;
    case 1000: 
#line 7789 
    ;
    
#line 7790 
    __retres = 1000;
    
#line 7790 
    goto return_label;
    default: 
#line 7791 
    ;
    
#line 7792 
    __retres = 0;
    
#line 7792 
    goto return_label;
  }
  return_label: 
#line 7786 
                return __retres;
}


#line 7796  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_set_vf_rate_limit(struct e1000_hw *hw, int vf, int tx_rate, int link_speed)
{
  int rf_dec;
  int rf_int;
  u32 bcnrc_val;
  
#line 7802 
  if (tx_rate != 0) {
    
#line 7804 
    rf_int = link_speed / tx_rate;
    
#line 7805 
    rf_dec = link_speed - rf_int * tx_rate;
    
#line 7806 
    rf_dec = (rf_dec * 16384) / tx_rate;
    
#line 7809 
    bcnrc_val = 2147483648U;
    
#line 7810 
    bcnrc_val = ((unsigned int)(rf_int << 14) & 268419072U) | bcnrc_val;
    
#line 7812 
    bcnrc_val = ((unsigned int)rf_dec & 16383U) | bcnrc_val;
  }
  else 
#line 7814 
       bcnrc_val = 0U;
  {
    u8 * volatile *tmp;
    {
      
#line 7817 
      u8 *__var = (u8 *)0U;
      
#line 7817 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 7817 
    u8 *hw_addr = *tmp;
    
#line 7817 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 7817 
                                           writel((unsigned int)vf,(void volatile *)(hw_addr + 13828U)); else ;
  }
  {
    u8 * volatile *tmp_0;
    {
      
#line 7821 
      u8 *__var_0 = (u8 *)0U;
      
#line 7821 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 7821 
    u8 *hw_addr_0 = *tmp_0;
    
#line 7821 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 7821 
                                             writel(20U,(void volatile *)(hw_addr_0 + 13968U)); else ;
  }
  {
    u8 * volatile *tmp_1;
    {
      
#line 7822 
      u8 *__var_1 = (u8 *)0U;
      
#line 7822 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 7822 
    u8 *hw_addr_1 = *tmp_1;
    
#line 7822 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 7822 
                                             writel(bcnrc_val,(void volatile *)(hw_addr_1 + 14000U)); else ;
  }
  
#line 7824 
  return;
}


#line 7825  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_check_vf_rate_limit(struct igb_adapter *adapter)
{
  int actual_link_speed;
  int i;
  
#line 7828 
  bool reset_rate = (_Bool)0;
  
#line 7831 
  if (adapter->vf_rate_link_speed == 0 || adapter->hw.mac.type != (unsigned int)e1000_82576) 
    
#line 7833 
    goto return_label; else ;
  
#line 7835 
  actual_link_speed = igb_link_mbps((int)adapter->link_speed);
  
#line 7836 
  if (adapter->vf_rate_link_speed != actual_link_speed) {
    
#line 7837 
    reset_rate = (_Bool)1;
    
#line 7838 
    adapter->vf_rate_link_speed = 0;
    
#line 7839 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Link speed has been changed. VF Transmit rate is disabled\n");
  }
  else ;
  
#line 7843 
  i = 0;
  
#line 7843 
  goto ldv_59269;
  ldv_59268: 
#line 7844 
  ;
  
#line 7844 
  if ((int)reset_rate != 0) 
#line 7845 
                            (adapter->vf_data + i)->tx_rate = (unsigned short)0U; else ;
  
#line 7847 
  igb_set_vf_rate_limit(& adapter->hw,i,(int)(adapter->vf_data + i)->tx_rate,actual_link_speed);
  
#line 7843 
  i += 1;
  ldv_59269: 
#line 7844 
  ;
  
#line 7843 
  if (adapter->vfs_allocated_count > (unsigned int)i) 
#line 7845 
                                                      goto ldv_59268; else 
                                                                    
#line 7848 
                                                                    goto ldv_59270;
  ldv_59270: 
#line 7849 
  ;
  return_label: 
#line 7850 
                return;
}


#line 7853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_set_vf_bw(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate)
{
  int __retres;
  int actual_link_speed;
  
#line 7856 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7857 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7860 
  if (hw->mac.type != (unsigned int)e1000_82576) {
    
#line 7861 
    __retres = -95;
    
#line 7861 
    goto return_label;
  }
  else ;
  
#line 7863 
  if (min_tx_rate != 0) {
    
#line 7864 
    __retres = -22;
    
#line 7864 
    goto return_label;
  }
  else ;
  
#line 7866 
  actual_link_speed = igb_link_mbps((int)adapter->link_speed);
  
#line 7867 
  if (adapter->vfs_allocated_count <= (unsigned int)vf) {
    
#line 7871 
    __retres = -22;
    
#line 7871 
    goto return_label;
  }
  else {
    u32 tmp_0;
    
#line 7867 
    tmp_0 = igb_rd32(hw,8U);
    
#line 7867 
    if ((tmp_0 & 2U) == 0U) {
      
#line 7871 
      __retres = -22;
      
#line 7871 
      goto return_label;
    }
    else 
      
#line 7869 
      if (max_tx_rate < 0 || max_tx_rate > actual_link_speed) {
        
#line 7871 
        __retres = -22;
        
#line 7871 
        goto return_label;
      }
      else ;
  }
  
#line 7873 
  adapter->vf_rate_link_speed = actual_link_speed;
  
#line 7874 
  (adapter->vf_data + vf)->tx_rate = (unsigned short)max_tx_rate;
  
#line 7875 
  igb_set_vf_rate_limit(hw,vf,max_tx_rate,actual_link_speed);
  
#line 7877 
  __retres = 0;
  return_label: 
#line 7877 
                return __retres;
}


#line 7880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_set_vf_spoofchk(struct net_device *netdev, int vf, bool setting)
{
  int __retres;
  u32 reg_val;
  u32 reg_offset;
  int tmp_0;
  
#line 7883 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7884 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7887 
  if (adapter->vfs_allocated_count == 0U) {
    
#line 7888 
    __retres = -95;
    
#line 7888 
    goto return_label;
  }
  else ;
  
#line 7890 
  if (adapter->vfs_allocated_count <= (unsigned int)vf) {
    
#line 7891 
    __retres = -22;
    
#line 7891 
    goto return_label;
  }
  else ;
  
#line 7893 
  if (hw->mac.type == (unsigned int)e1000_82576) 
#line 7893 
                                                 tmp_0 = 13568; else 
                                                                  
#line 7893 
                                                                  tmp_0 = 23244;
  
#line 7893 
  reg_offset = (unsigned int)tmp_0;
  
#line 7894 
  reg_val = igb_rd32(hw,reg_offset);
  
#line 7895 
  if ((int)setting != 0) 
#line 7896 
                         reg_val = (unsigned int)((1 << vf) | (1 << (vf + 8))) | reg_val; else 
                                                                    
#line 7899 
                                                                    reg_val = (unsigned int)(~ ((1 << vf) | (1 << (vf + 8)))) & reg_val;
  {
    u8 * volatile *tmp_1;
    {
      
#line 7901 
      u8 *__var = (u8 *)0U;
      
#line 7901 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 7901 
    u8 *hw_addr = *tmp_1;
    
#line 7901 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 7901 
                                           writel(reg_val,(void volatile *)(hw_addr + reg_offset)); else ;
  }
  
#line 7903 
  (adapter->vf_data + vf)->spoofchk_enabled = setting;
  
#line 7904 
  __retres = 0;
  return_label: 
#line 7904 
                return __retres;
}


#line 7907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static int igb_ndo_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi)
{
  int __retres;
  
#line 7910 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7911 
  if (adapter->vfs_allocated_count <= (unsigned int)vf) {
    
#line 7912 
    __retres = -22;
    
#line 7912 
    goto return_label;
  }
  else ;
  
#line 7913 
  ivi->vf = (unsigned int)vf;
  
#line 7914 
  memcpy((void *)(& ivi->mac),(void const *)(& (adapter->vf_data + vf)->vf_mac_addresses),6UL);
  
#line 7915 
  ivi->max_tx_rate = (unsigned int)(adapter->vf_data + vf)->tx_rate;
  
#line 7916 
  ivi->min_tx_rate = 0U;
  
#line 7917 
  ivi->vlan = (unsigned int)(adapter->vf_data + vf)->pf_vlan;
  
#line 7918 
  ivi->qos = (unsigned int)(adapter->vf_data + vf)->pf_qos;
  
#line 7919 
  ivi->spoofchk = (unsigned int)(adapter->vf_data + vf)->spoofchk_enabled;
  
#line 7920 
  __retres = 0;
  return_label: 
#line 7920 
                return __retres;
}


#line 7923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_vmm_control(struct igb_adapter *adapter)
{
  u32 reg;
  
#line 7925 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7928 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 7929 
    ;
    case (unsigned int)6: 
#line 7930 
    ;
    case (unsigned int)7: 
#line 7931 
    ;
    case (unsigned int)5: 
#line 7932 
    ;
    default: 
#line 7933 
    ;
    
#line 7935 
    goto return_label;
    case (unsigned int)2: 
#line 7936 
    ;
    
#line 7938 
    reg = igb_rd32(hw,13712U);
    
#line 7939 
    reg |= 8U;
    {
      u8 * volatile *tmp;
      {
        
#line 7940 
        u8 *__var = (u8 *)0U;
        
#line 7940 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7940 
      u8 *hw_addr = *tmp;
      
#line 7940 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 7940 
                                             writel(reg,(void volatile *)(hw_addr + 13712U)); else ;
    }
    case (unsigned int)3: 
#line 7942 
    ;
    
#line 7944 
    reg = igb_rd32(hw,23280U);
    
#line 7945 
    reg |= 1073741824U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 7946 
        u8 *__var_0 = (u8 *)0U;
        
#line 7946 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 7946 
      u8 *hw_addr_0 = *tmp_0;
      
#line 7946 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 7946 
                                               writel(reg,(void volatile *)(hw_addr_0 + 23280U)); else ;
    }
    case (unsigned int)4: 
#line 7948 
    ;
    
#line 7950 
    goto ldv_59317;
  }
  ldv_59317: 
#line 7953 
  ;
  
#line 7953 
  if (adapter->vfs_allocated_count != 0U) {
    
#line 7954 
    igb_vmdq_set_loopback_pf(hw,(_Bool)1);
    
#line 7955 
    igb_vmdq_set_replication_pf(hw,(_Bool)1);
    
#line 7956 
    igb_vmdq_set_anti_spoofing_pf(hw,(_Bool)1,(int)adapter->vfs_allocated_count);
  }
  else {
    
#line 7959 
    igb_vmdq_set_loopback_pf(hw,(_Bool)0);
    
#line 7960 
    igb_vmdq_set_replication_pf(hw,(_Bool)0);
  }
  return_label: 
#line 7962 
                return;
}


#line 7964  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
static void igb_init_dmac(struct igb_adapter *adapter, u32 pba)
{
  u32 dmac_thr;
  u16 hwm;
  
#line 7966 
  struct e1000_hw *hw = & adapter->hw;
  
#line 7970 
  if (hw->mac.type > (unsigned int)e1000_82580) {
    
#line 7971 
    if ((adapter->flags & 16U) != 0U) {
      u32 reg;
      {
        u8 * volatile *tmp;
        {
          
#line 7975 
          u8 *__var = (u8 *)0U;
          
#line 7975 
          tmp = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 7975 
        u8 *hw_addr = *tmp;
        
#line 7975 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 7975 
                                               writel(0U,(void volatile *)(hw_addr + 13648U)); else ;
      }
      
#line 7981 
      hwm = (unsigned short)((unsigned int)((unsigned short)pba) * 64U - (unsigned int)((unsigned short)(adapter->max_frame_size / 16U)));
      
#line 7982 
      if ((unsigned int)hwm < (pba + 67108858U) * 64U) 
#line 7983 
                                                       hwm = (unsigned short)((unsigned int)((unsigned short)(pba + 67108858U)) * 64U); else ;
      
#line 7984 
      reg = igb_rd32(hw,8560U);
      
#line 7985 
      reg &= 4294705167U;
      
#line 7986 
      reg = ((unsigned int)((int)hwm << 4) & 262128U) | reg;
      {
        u8 * volatile *tmp_0;
        {
          
#line 7988 
          u8 *__var_0 = (u8 *)0U;
          
#line 7988 
          tmp_0 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 7988 
        u8 *hw_addr_0 = *tmp_0;
        
#line 7988 
        if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 7988 
                                                 writel(reg,(void volatile *)(hw_addr_0 + 8560U)); else ;
      }
      
#line 7993 
      dmac_thr = pba - adapter->max_frame_size / 512U;
      
#line 7994 
      if (pba + 4294967286U > dmac_thr) 
#line 7995 
                                        dmac_thr = pba + 4294967286U; else ;
      
#line 7996 
      reg = igb_rd32(hw,9480U);
      
#line 7997 
      reg &= 4278255615U;
      
#line 7998 
      reg = ((dmac_thr << 16) & 16711680U) | reg;
      
#line 8002 
      reg |= 2952790016U;
      
#line 8005 
      reg |= 31U;
      
#line 8008 
      if (hw->mac.type != (unsigned int)e1000_i354) 
#line 8009 
                                                    reg &= 4294934527U; else ;
      {
        u8 * volatile *tmp_1;
        {
          
#line 8011 
          u8 *__var_1 = (u8 *)0U;
          
#line 8011 
          tmp_1 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 8011 
        u8 *hw_addr_1 = *tmp_1;
        
#line 8011 
        if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 8011 
                                                 writel(reg,(void volatile *)(hw_addr_1 + 9480U)); else ;
      }
      {
        u8 * volatile *tmp_2;
        {
          
#line 8016 
          u8 *__var_2 = (u8 *)0U;
          
#line 8016 
          tmp_2 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 8016 
        u8 *hw_addr_2 = *tmp_2;
        
#line 8016 
        if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 8016 
                                                 writel(0U,(void volatile *)(hw_addr_2 + 24016U)); else ;
      }
      
#line 8018 
      reg = 2147483652U;
      {
        u8 * volatile *tmp_3;
        {
          
#line 8020 
          u8 *__var_3 = (u8 *)0U;
          
#line 8020 
          tmp_3 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 8020 
        u8 *hw_addr_3 = *tmp_3;
        
#line 8020 
        if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 8020 
                                                 writel(reg,(void volatile *)(hw_addr_3 + 9492U)); else ;
      }
      {
        u8 * volatile *tmp_4;
        {
          
#line 8025 
          u8 *__var_4 = (u8 *)0U;
          
#line 8025 
          tmp_4 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 8025 
        u8 *hw_addr_4 = *tmp_4;
        
#line 8025 
        if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 8025 
                                                 writel((16312U - adapter->max_frame_size) >> 6,(void volatile *)(hw_addr_4 + 13648U)); else ;
      }
      
#line 8031 
      reg = igb_rd32(hw,23480U);
      
#line 8032 
      reg &= 4294967167U;
      {
        u8 * volatile *tmp_5;
        {
          
#line 8033 
          u8 *__var_5 = (u8 *)0U;
          
#line 8033 
          tmp_5 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 8033 
        u8 *hw_addr_5 = *tmp_5;
        
#line 8033 
        if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
#line 8033 
                                                 writel(reg,(void volatile *)(hw_addr_5 + 23480U)); else ;
      }
    }
    else ;
  }
  else 
    
#line 8035 
    if (hw->mac.type == (unsigned int)e1000_82580) {
      
#line 8036 
      u32 reg_0 = igb_rd32(hw,23480U);
      {
        u8 * volatile *tmp_7;
        {
          
#line 8038 
          u8 *__var_6 = (u8 *)0U;
          
#line 8038 
          tmp_7 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 8038 
        u8 *hw_addr_6 = *tmp_7;
        
#line 8038 
        if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
#line 8038 
                                                 writel(reg_0 & 4294967167U,(void volatile *)(hw_addr_6 + 23480U)); else ;
      }
      {
        u8 * volatile *tmp_8;
        {
          
#line 8039 
          u8 *__var_7 = (u8 *)0U;
          
#line 8039 
          tmp_8 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 8039 
        u8 *hw_addr_7 = *tmp_8;
        
#line 8039 
        if ((long)(hw_addr_7 == (u8 *)0U) == 0L) 
#line 8039 
                                                 writel(0U,(void volatile *)(hw_addr_7 + 9480U)); else ;
      }
    }
    else ;
  
#line 8042 
  return;
}


#line 8053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_read_i2c_byte(struct e1000_hw *hw, u8 byte_offset, u8 dev_addr, u8 *data)
{
  s32 __retres;
  struct igb_adapter *tmp;
  s32 status;
  s32 tmp_0;
  {
    
#line 8056 
    struct e1000_hw const *__mptr = (struct e1000_hw const *)hw;
    
#line 8056 
    tmp = (struct igb_adapter *)__mptr + 18446744073709549856U;
  }
  
#line 8056 
  struct igb_adapter *adapter = tmp;
  
#line 8057 
  struct i2c_client *this_client = adapter->i2c_client;
  
#line 8059 
  u16 swfw_mask = (unsigned short)0U;
  
#line 8061 
  if (this_client == (struct i2c_client *)0) {
    
#line 8062 
    __retres = 20;
    
#line 8062 
    goto return_label;
  }
  else ;
  
#line 8064 
  swfw_mask = (unsigned short)2U;
  
#line 8066 
  tmp_0 = (*(hw->mac.ops.acquire_swfw_sync))(hw,(unsigned short)((int)swfw_mask));
  
#line 8066 
  if (tmp_0 != 0) {
    
#line 8067 
    __retres = 13;
    
#line 8067 
    goto return_label;
  }
  else ;
  
#line 8069 
  status = i2c_smbus_read_byte_data((struct i2c_client const *)this_client,(unsigned char)((int)byte_offset));
  
#line 8070 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)((int)swfw_mask));
  
#line 8072 
  if (status < 0) {
    
#line 8073 
    __retres = 20;
    
#line 8073 
    goto return_label;
  }
  else {
    
#line 8075 
    *data = (unsigned char)status;
    
#line 8076 
    __retres = 0;
    
#line 8076 
    goto return_label;
  }
  return_label: 
#line 8072 
                return __retres;
}


#line 8090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
s32 igb_write_i2c_byte(struct e1000_hw *hw, u8 byte_offset, u8 dev_addr, u8 data)
{
  s32 __retres;
  struct igb_adapter *tmp;
  s32 status;
  s32 tmp_0;
  {
    
#line 8093 
    struct e1000_hw const *__mptr = (struct e1000_hw const *)hw;
    
#line 8093 
    tmp = (struct igb_adapter *)__mptr + 18446744073709549856U;
  }
  
#line 8093 
  struct igb_adapter *adapter = tmp;
  
#line 8094 
  struct i2c_client *this_client = adapter->i2c_client;
  
#line 8096 
  u16 swfw_mask = (unsigned short)2U;
  
#line 8098 
  if (this_client == (struct i2c_client *)0) {
    
#line 8099 
    __retres = 20;
    
#line 8099 
    goto return_label;
  }
  else ;
  
#line 8101 
  tmp_0 = (*(hw->mac.ops.acquire_swfw_sync))(hw,(unsigned short)((int)swfw_mask));
  
#line 8101 
  if (tmp_0 != 0) {
    
#line 8102 
    __retres = 13;
    
#line 8102 
    goto return_label;
  }
  else ;
  
#line 8103 
  status = i2c_smbus_write_byte_data((struct i2c_client const *)this_client,(unsigned char)((int)byte_offset),(unsigned char)((int)data));
  
#line 8104 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)((int)swfw_mask));
  
#line 8106 
  if (status != 0) {
    
#line 8107 
    __retres = 20;
    
#line 8107 
    goto return_label;
  }
  else {
    
#line 8109 
    __retres = 0;
    
#line 8109 
    goto return_label;
  }
  return_label: 
#line 8106 
                return __retres;
}


#line 8113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_main.c"
int igb_reinit_queues(struct igb_adapter *adapter)
{
  int __retres;
  bool tmp;
  int tmp_0;
  bool tmp_1;
  
#line 8115 
  struct net_device *netdev = adapter->netdev;
  
#line 8116 
  struct pci_dev *pdev = adapter->pdev;
  
#line 8117 
  int err = 0;
  
#line 8119 
  tmp = netif_running((struct net_device const *)netdev);
  
#line 8119 
  if ((int)tmp != 0) 
#line 8120 
                     igb_close(netdev); else ;
  
#line 8122 
  igb_reset_interrupt_capability(adapter);
  
#line 8124 
  tmp_0 = igb_init_interrupt_scheme(adapter,(_Bool)1);
  
#line 8124 
  if (tmp_0 != 0) {
    
#line 8125 
    dev_err((struct device const *)(& pdev->dev),"Unable to allocate memory for queues\n");
    
#line 8126 
    __retres = -12;
    
#line 8126 
    goto return_label;
  }
  else ;
  
#line 8129 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 8129 
  if ((int)tmp_1 != 0) 
#line 8130 
                       err = igb_open(netdev); else ;
  
#line 8132 
  __retres = err;
  return_label: 
#line 8132 
                return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int (*ldv_emg_alias_eth_validate_addr_33)(struct net_device *) = & eth_validate_addr;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
unsigned long long (*ldv_emg_alias_passthru_features_check_50)(struct sk_buff *, struct net_device *, unsigned long long ) = & passthru_features_check;

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
struct dev_pm_ops *ldv_emg_alias_igb_pm_ops_4 = (struct dev_pm_ops *)(& igb_pm_ops);

#line 59  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
struct pci_driver *ldv_emg_alias_igb_driver_2 = & igb_driver;

#line 62 
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 64 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 65 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 66 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 67 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 68 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 70 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 71 
_Bool ldv_emg_schedule_work(struct work_struct *arg0);


#line 72 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 77  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
void ldv_emg_igb_exit_module(void)
{
  
#line 78 
  igb_exit_module();
  
#line 79 
  return;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
struct rtnl_link_stats64 *ldv_emg_wrapper_igb_get_stats64_4(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  struct rtnl_link_stats64 *tmp;
  
#line 82 
  tmp = igb_get_stats64(arg0,arg1);
  
#line 82 
  return tmp;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
void ldv_emg_wrapper_igb_set_rx_mode_26(struct net_device *arg0)
{
  
#line 87 
  igb_set_rx_mode(arg0);
  
#line 88 
  return;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_runtime_resume_7(struct device *arg0)
{
  int tmp;
  
#line 92 
  tmp = igb_runtime_resume(arg0);
  
#line 92 
  return tmp;
}


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_runtime_idle_3(struct device *arg0)
{
  int tmp;
  
#line 97 
  tmp = igb_runtime_idle(arg0);
  
#line 97 
  return tmp;
}


#line 101  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
void ldv_emg_wrapper_igb_netpoll_58(struct net_device *arg0)
{
  
#line 102 
  igb_netpoll(arg0);
  
#line 103 
  return;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_vlan_rx_add_vid_47(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 107 
  tmp = igb_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 107 
  return tmp;
}


#line 111  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_set_features_35(struct net_device *arg0, unsigned long long arg1)
{
  int tmp;
  
#line 112 
  tmp = igb_set_features(arg0,arg1);
  
#line 112 
  return tmp;
}


#line 116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_runtime_suspend_6(struct device *arg0)
{
  int tmp;
  
#line 117 
  tmp = igb_runtime_suspend(arg0);
  
#line 117 
  return tmp;
}


#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_set_mac_15(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 122 
  tmp = igb_set_mac(arg0,arg1);
  
#line 122 
  return tmp;
}


#line 126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
void ldv_emg_wrapper_igb_remove_5(struct pci_dev *arg0)
{
  
#line 127 
  igb_remove(arg0);
  
#line 128 
  return;
}


#line 131  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 132 
  tmp = igb_open(arg0);
  
#line 132 
  return tmp;
}


#line 136  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_ndo_set_vf_spoofchk_28(struct net_device *arg0, int arg1, _Bool arg2)
{
  int tmp;
  
#line 137 
  tmp = igb_ndo_set_vf_spoofchk(arg0,arg1,(_Bool)((bool)((int)arg2) != 0));
  
#line 137 
  return tmp;
}


#line 141  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_ndo_set_vf_bw_20(struct net_device *arg0, int arg1, int arg2, int arg3)
{
  int tmp;
  
#line 142 
  tmp = igb_ndo_set_vf_bw(arg0,arg1,arg2,arg3);
  
#line 142 
  return tmp;
}


#line 146  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
void ldv_emg_wrapper_igb_shutdown_3(struct pci_dev *arg0)
{
  
#line 147 
  igb_shutdown(arg0);
  
#line 148 
  return;
}


#line 151  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
enum irqreturn ldv_emg_wrapper_igb_intr_msi_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 152 
  tmp = igb_intr_msi(arg0,arg1);
  
#line 152 
  return tmp;
}


#line 156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_resume_5(struct device *arg0)
{
  int tmp;
  
#line 157 
  tmp = igb_resume(arg0);
  
#line 157 
  return tmp;
}


#line 161  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
enum irqreturn ldv_emg_wrapper_igb_msix_other_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 162 
  tmp = igb_msix_other(arg0,arg1);
  
#line 162 
  return tmp;
}


#line 166  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
enum irqreturn ldv_emg_wrapper_igb_msix_ring_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 167 
  tmp = igb_msix_ring(arg0,arg1);
  
#line 167 
  return tmp;
}


#line 171  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_ndo_set_vf_mac_59(struct net_device *arg0, int arg1, unsigned char *arg2)
{
  int tmp;
  
#line 172 
  tmp = igb_ndo_set_vf_mac(arg0,arg1,arg2);
  
#line 172 
  return tmp;
}


#line 176  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_suspend_2(struct device *arg0)
{
  int tmp;
  
#line 177 
  tmp = igb_suspend(arg0);
  
#line 177 
  return tmp;
}


#line 181  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
void ldv_emg_wrapper_igb_tx_timeout_16(struct net_device *arg0)
{
  
#line 182 
  igb_tx_timeout(arg0);
  
#line 183 
  return;
}


#line 186  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_ndo_set_vf_vlan_34(struct net_device *arg0, int arg1, unsigned short arg2, unsigned char arg3)
{
  int tmp;
  
#line 187 
  tmp = igb_ndo_set_vf_vlan(arg0,arg1,(unsigned short)((int)arg2),(unsigned char)((int)arg3));
  
#line 187 
  return tmp;
}


#line 191  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_vlan_rx_kill_vid_57(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 192 
  tmp = igb_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 192 
  return tmp;
}


#line 196  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_ndo_get_vf_config_40(struct net_device *arg0, int arg1, struct ifla_vf_info *arg2)
{
  int tmp;
  
#line 197 
  tmp = igb_ndo_get_vf_config(arg0,arg1,arg2);
  
#line 197 
  return tmp;
}


#line 201  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_ioctl_18(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  int tmp;
  
#line 202 
  tmp = igb_ioctl(arg0,arg1,arg2);
  
#line 202 
  return tmp;
}


#line 206  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
enum netdev_tx ldv_emg_wrapper_igb_xmit_frame_14(struct sk_buff *arg0, struct net_device *arg1)
{
  enum netdev_tx tmp;
  
#line 207 
  tmp = igb_xmit_frame(arg0,arg1);
  
#line 207 
  return tmp;
}


#line 211  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_igb_init_module(void)
{
  int tmp;
  
#line 212 
  tmp = igb_init_module();
  
#line 212 
  return tmp;
}


#line 215  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
unsigned long long ldv_emg_wrapper_igb_fix_features_36(struct net_device *arg0, unsigned long long arg1)
{
  unsigned long long tmp;
  
#line 216 
  tmp = igb_fix_features(arg0,arg1);
  
#line 216 
  return tmp;
}


#line 220  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 221 
  tmp = igb_close(arg0);
  
#line 221 
  return tmp;
}


#line 225  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_change_mtu_6(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 226 
  tmp = igb_change_mtu(arg0,arg1);
  
#line 226 
  return tmp;
}


#line 230  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
enum irqreturn ldv_emg_wrapper_igb_intr_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 231 
  tmp = igb_intr(arg0,arg1);
  
#line 231 
  return tmp;
}


#line 235  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_pci_sriov_configure_2(struct pci_dev *arg0, int arg1)
{
  int tmp;
  
#line 236 
  tmp = igb_pci_sriov_configure(arg0,arg1);
  
#line 236 
  return tmp;
}


#line 240  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
int ldv_emg_wrapper_igb_probe_4(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 241 
  tmp = igb_probe(arg0,(struct pci_device_id const *)arg1);
  
#line 241 
  return tmp;
}


#line 299  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void atomic_inc_0(atomic_t *v)
{
  
#line 302 
  ldv_atomic_inc(v);
  
#line 303 
  return;
}


#line 769  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 772 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 772 
  return tmp;
}


#line 776  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 779 
  tmp = ldv_kzalloc(size,flags);
  
#line 779 
  return tmp;
}


#line 926  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv___pci_register_driver_73(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 930 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 930 
  return tmp;
}


#line 934  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_pci_unregister_driver_74(struct pci_driver *ldv_func_arg1)
{
  
#line 938 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 939 
  return;
}


#line 942  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_request_irq_75_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 946 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 946 
  return tmp;
}


#line 950  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_request_irq_76(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 954 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 954 
  return tmp;
}


#line 958  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_free_irq_77_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 962 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 963 
  return;
}


#line 966  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_free_irq_78(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 970 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 971 
  return;
}


#line 974  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_request_irq_79(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 978 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 978 
  return tmp;
}


#line 982  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_request_irq_80(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 986 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 986 
  return tmp;
}


#line 990  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_free_irq_81(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 994 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 995 
  return;
}


#line 998  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_free_irq_82(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1002 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1003 
  return;
}


#line 1006  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_free_irq_83(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1010 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1011 
  return;
}


#line 1014  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_84(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1018 
  tmp = ldv_emg_schedule_work(work);
  
#line 1018 
  __retres = tmp != 0;
  
#line 1018 
  return __retres;
}


#line 1022  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_del_timer_sync_85(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1026 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1026 
  return tmp;
}


#line 1030  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_del_timer_sync_86(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1034 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1034 
  return tmp;
}


#line 1038  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_lock_87(spinlock_t *lock)
{
  
#line 1042 
  ldv_spin_model_lock((char *)"stats64_lock_of_igb_adapter");
  
#line 1044 
  spin_lock_0(lock);
  
#line 1045 
  return;
}


#line 1048  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_unlock_88(spinlock_t *lock)
{
  
#line 1052 
  ldv_spin_model_unlock((char *)"stats64_lock_of_igb_adapter");
  
#line 1054 
  spin_unlock_0(lock);
  
#line 1055 
  return;
}


#line 1058  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_89(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 1062 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1062 
  return tmp;
}


#line 1066  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_register_netdev_90(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 1070 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 1070 
  return tmp;
}


#line 1074  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_free_netdev_91(struct net_device *ldv_func_arg1)
{
  
#line 1078 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1079 
  return;
}


#line 1082  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_del_timer_sync_92(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1086 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1086 
  return tmp;
}


#line 1090  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_del_timer_sync_93(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1094 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1094 
  return tmp;
}


#line 1098  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_unregister_netdev_94(struct net_device *ldv_func_arg1)
{
  
#line 1102 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1103 
  return;
}


#line 1106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_free_netdev_95(struct net_device *ldv_func_arg1)
{
  
#line 1110 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1111 
  return;
}


#line 1114  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_96(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1118 
  tmp = ldv_emg_schedule_work(work);
  
#line 1118 
  __retres = tmp != 0;
  
#line 1118 
  return __retres;
}


#line 1122  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_97(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1126 
  tmp = ldv_emg_schedule_work(work);
  
#line 1126 
  __retres = tmp != 0;
  
#line 1126 
  return __retres;
}


#line 1130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_mod_timer_98(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1134 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1134 
  return tmp;
}


#line 1138  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_mod_timer_99(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1142 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1142 
  return tmp;
}


#line 1146  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_100(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1150 
  tmp = ldv_emg_schedule_work(work);
  
#line 1150 
  __retres = tmp != 0;
  
#line 1150 
  return __retres;
}


#line 1154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_101(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1158 
  tmp = ldv_emg_schedule_work(work);
  
#line 1158 
  __retres = tmp != 0;
  
#line 1158 
  return __retres;
}


#line 1162  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_lock_102(spinlock_t *lock)
{
  
#line 1166 
  ldv_spin_model_lock((char *)"stats64_lock_of_igb_adapter");
  
#line 1168 
  spin_lock_0(lock);
  
#line 1169 
  return;
}


#line 1172  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_unlock_103(spinlock_t *lock)
{
  
#line 1176 
  ldv_spin_model_unlock((char *)"stats64_lock_of_igb_adapter");
  
#line 1178 
  spin_unlock_0(lock);
  
#line 1179 
  return;
}


#line 1182  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_104(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1186 
  tmp = ldv_emg_schedule_work(work);
  
#line 1186 
  __retres = tmp != 0;
  
#line 1186 
  return __retres;
}


#line 1190  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_mod_timer_105(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1194 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1194 
  return tmp;
}


#line 1198  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_mod_timer_106(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1202 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1202 
  return tmp;
}


#line 1206  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_107(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1210 
  tmp = ldv_emg_schedule_work(work);
  
#line 1210 
  __retres = tmp != 0;
  
#line 1210 
  return __retres;
}


#line 1214  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_108(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1218 
  tmp = ldv_emg_schedule_work(work);
  
#line 1218 
  __retres = tmp != 0;
  
#line 1218 
  return __retres;
}


#line 1222  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_lock_109(spinlock_t *lock)
{
  
#line 1226 
  ldv_spin_model_lock((char *)"stats64_lock_of_igb_adapter");
  
#line 1228 
  spin_lock_0(lock);
  
#line 1229 
  return;
}


#line 1232  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_unlock_110(spinlock_t *lock)
{
  
#line 1236 
  ldv_spin_model_unlock((char *)"stats64_lock_of_igb_adapter");
  
#line 1238 
  spin_unlock_0(lock);
  
#line 1239 
  return;
}


#line 1242  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_111(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1246 
  tmp = ldv_emg_schedule_work(work);
  
#line 1246 
  __retres = tmp != 0;
  
#line 1246 
  return __retres;
}


#line 1250  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_lock_112(spinlock_t *lock)
{
  
#line 1254 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 1256 
  spin_lock_0(lock);
  
#line 1257 
  return;
}


#line 1260  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_unlock_113(spinlock_t *lock)
{
  
#line 1264 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 1266 
  spin_unlock_0(lock);
  
#line 1267 
  return;
}


#line 1270  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_lock_114(spinlock_t *lock)
{
  
#line 1274 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 1276 
  spin_lock_0(lock);
  
#line 1277 
  return;
}


#line 1280  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static void ldv_spin_unlock_115(spinlock_t *lock)
{
  
#line 1284 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 1286 
  spin_unlock_0(lock);
  
#line 1287 
  return;
}


#line 1290  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_116(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1294 
  tmp = ldv_emg_schedule_work(work);
  
#line 1294 
  __retres = tmp != 0;
  
#line 1294 
  return __retres;
}


#line 1298  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_mod_timer_117(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1302 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1302 
  return tmp;
}


#line 1306  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_118(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1310 
  tmp = ldv_emg_schedule_work(work);
  
#line 1310 
  __retres = tmp != 0;
  
#line 1310 
  return __retres;
}


#line 1314  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_mod_timer_119(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1318 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1318 
  return tmp;
}


#line 1322  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static bool ldv_schedule_work_120(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1326 
  tmp = ldv_emg_schedule_work(work);
  
#line 1326 
  __retres = tmp != 0;
  
#line 1326 
  return __retres;
}


#line 1330  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_main.c.aux"
static int ldv_mod_timer_121(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1334 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1334 
  return tmp;
}


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.h"
s32 igb_check_for_copper_link(struct e1000_hw *hw);


#line 43 
s32 igb_get_auto_rd_done(struct e1000_hw *hw);


#line 45 
s32 igb_get_hw_semaphore(struct e1000_hw *hw);


#line 46 
s32 igb_get_speed_and_duplex_copper(struct e1000_hw *hw, u16 *speed, u16 *duplex);


#line 48 
s32 igb_id_led_init(struct e1000_hw *hw);


#line 54 
s32 igb_write_8bit_ctrl_reg(struct e1000_hw *hw, u32 reg, u32 offset, u8 data);


#line 57 
void igb_clear_hw_cntrs_base(struct e1000_hw *hw);


#line 58 
void igb_clear_vfta(struct e1000_hw *hw);


#line 59 
void igb_clear_vfta_i350(struct e1000_hw *hw);


#line 62 
void igb_init_rx_addrs(struct e1000_hw *hw, u16 rar_count);


#line 65 
void igb_rar_set(struct e1000_hw *hw, u8 *addr, u32 index);


#line 66 
s32 igb_check_alt_mac_addr(struct e1000_hw *hw);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_invariants_82575(struct e1000_hw *hw);


#line 39 
static s32 igb_acquire_phy_82575(struct e1000_hw *hw);


#line 40 
static void igb_release_phy_82575(struct e1000_hw *hw);


#line 41 
static s32 igb_acquire_nvm_82575(struct e1000_hw *hw);


#line 42 
static void igb_release_nvm_82575(struct e1000_hw *hw);


#line 43 
static s32 igb_check_for_link_82575(struct e1000_hw *hw);


#line 44 
static s32 igb_get_cfg_done_82575(struct e1000_hw *hw);


#line 45 
static s32 igb_init_hw_82575(struct e1000_hw *hw);


#line 46 
static s32 igb_phy_hw_reset_sgmii_82575(struct e1000_hw *hw);


#line 47 
static s32 igb_read_phy_reg_sgmii_82575(struct e1000_hw *hw, u32 offset, u16 *data);


#line 48 
static s32 igb_read_phy_reg_82580(struct e1000_hw *hw, u32 offset, u16 *data);


#line 49 
static s32 igb_write_phy_reg_82580(struct e1000_hw *hw, u32 offset, u16 data);


#line 50 
static s32 igb_reset_hw_82575(struct e1000_hw *hw);


#line 51 
static s32 igb_reset_hw_82580(struct e1000_hw *hw);


#line 52 
static s32 igb_set_d0_lplu_state_82575(struct e1000_hw *hw, bool active);


#line 53 
static s32 igb_set_d0_lplu_state_82580(struct e1000_hw *hw, bool active);


#line 54 
static s32 igb_set_d3_lplu_state_82580(struct e1000_hw *hw, bool active);


#line 55 
static s32 igb_setup_copper_link_82575(struct e1000_hw *hw);


#line 56 
static s32 igb_setup_serdes_link_82575(struct e1000_hw *hw);


#line 57 
static s32 igb_write_phy_reg_sgmii_82575(struct e1000_hw *hw, u32 offset, u16 data);


#line 58 
static void igb_clear_hw_cntrs_82575(struct e1000_hw *hw);


#line 59 
static s32 igb_acquire_swfw_sync_82575(struct e1000_hw *hw, u16 mask);


#line 60 
static s32 igb_get_pcs_speed_and_duplex_82575(struct e1000_hw *hw, u16 *speed, u16 *duplex);


#line 62 
static s32 igb_get_phy_id_82575(struct e1000_hw *hw);


#line 63 
static void igb_release_swfw_sync_82575(struct e1000_hw *hw, u16 mask);


#line 64 
static bool igb_sgmii_active_82575(struct e1000_hw *hw);


#line 65 
static s32 igb_reset_init_script_82575(struct e1000_hw *hw);


#line 66 
static s32 igb_read_mac_addr_82575(struct e1000_hw *hw);


#line 67 
static s32 igb_set_pcie_completion_timeout(struct e1000_hw *hw);


#line 68 
static s32 igb_reset_mdicnfg_82580(struct e1000_hw *hw);


#line 69 
static s32 igb_validate_nvm_checksum_82580(struct e1000_hw *hw);


#line 70 
static s32 igb_update_nvm_checksum_82580(struct e1000_hw *hw);


#line 71 
static s32 igb_validate_nvm_checksum_i350(struct e1000_hw *hw);


#line 72 
static s32 igb_update_nvm_checksum_i350(struct e1000_hw *hw);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static u16 const e1000_82580_rxpbs_table[11U] = {(unsigned short)36U, (unsigned short)72U, (unsigned short)144U, (unsigned short)1U, (unsigned short)2U, (unsigned short)4U, (unsigned short)8U, (unsigned short)16U, (unsigned short)35U, (unsigned short)70U, (unsigned short)140U};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static bool igb_sgmii_uses_mdio_82575(struct e1000_hw *hw)
{
  
#line 85 
  u32 reg = 0U;
  
#line 86 
  bool ext_mdio = (_Bool)0;
  
#line 88 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 89 
    ;
    case (unsigned int)2: 
#line 90 
    ;
    
#line 91 
    reg = igb_rd32(hw,32U);
    
#line 92 
    ext_mdio = (_Bool)(reg < (u32)0);
    
#line 93 
    goto ldv_44499;
    case (unsigned int)3: 
#line 94 
    ;
    case (unsigned int)4: 
#line 95 
    ;
    case (unsigned int)5: 
#line 96 
    ;
    case (unsigned int)6: 
#line 97 
    ;
    case (unsigned int)7: 
#line 98 
    ;
    
#line 99 
    reg = igb_rd32(hw,3588U);
    
#line 100 
    ext_mdio = (_Bool)(reg < (u32)0);
    
#line 101 
    goto ldv_44499;
    default: 
#line 102 
    ;
    
#line 103 
    goto ldv_44499;
  }
  ldv_44499: 
#line 105 
  ;
  
#line 105 
  return ext_mdio;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_check_for_link_media_swap(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  
#line 116 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 119 
  u8 port = (unsigned char)0U;
  
#line 122 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
  
#line 123 
  if (ret_val != 0) {
    
#line 124 
    __retres = ret_val;
    
#line 124 
    goto return_label;
  }
  else ;
  
#line 126 
  ret_val = (*(phy->ops.read_reg))(hw,1U,& data);
  
#line 127 
  if (ret_val != 0) {
    
#line 128 
    __retres = ret_val;
    
#line 128 
    goto return_label;
  }
  else ;
  
#line 130 
  if (((int)data & 4) != 0) 
#line 131 
                            port = (unsigned char)1U; else ;
  
#line 134 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)1);
  
#line 135 
  if (ret_val != 0) {
    
#line 136 
    __retres = ret_val;
    
#line 136 
    goto return_label;
  }
  else ;
  
#line 138 
  ret_val = (*(phy->ops.read_reg))(hw,1U,& data);
  
#line 139 
  if (ret_val != 0) {
    
#line 140 
    __retres = ret_val;
    
#line 140 
    goto return_label;
  }
  else ;
  
#line 143 
  ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
  
#line 144 
  if (ret_val != 0) {
    
#line 145 
    __retres = ret_val;
    
#line 145 
    goto return_label;
  }
  else ;
  
#line 147 
  if (((int)data & 4) != 0) 
#line 148 
                            port = (unsigned char)2U; else ;
  
#line 151 
  if ((unsigned int)port != 0U && (int)hw->dev_spec._82575.media_port != (int)port) {
    
#line 152 
    hw->dev_spec._82575.media_port = port;
    
#line 153 
    hw->dev_spec._82575.media_changed = (_Bool)1;
  }
  else 
#line 155 
       ret_val = igb_check_for_link_82575(hw);
  
#line 158 
  __retres = 0;
  return_label: 
#line 158 
                return __retres;
}


#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_phy_params_82575(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl_ext;
  bool tmp;
  bool tmp_1;
  u32 tmp_4;
  
#line 167 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 168 
  s32 ret_val = 0;
  
#line 171 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    
#line 172 
    phy->type = e1000_phy_none;
    
#line 173 
    goto out;
  }
  else ;
  
#line 176 
  phy->autoneg_mask = (unsigned short)47U;
  
#line 177 
  phy->reset_delay_us = 100U;
  
#line 179 
  ctrl_ext = igb_rd32(hw,24U);
  
#line 181 
  tmp = igb_sgmii_active_82575(hw);
  
#line 181 
  if ((int)tmp != 0) {
    
#line 182 
    phy->ops.reset = & igb_phy_hw_reset_sgmii_82575;
    
#line 183 
    ctrl_ext |= 33554432U;
  }
  else {
    
#line 185 
    phy->ops.reset = & igb_phy_hw_reset;
    
#line 186 
    ctrl_ext &= 4261412863U;
  }
  {
    u8 * volatile *tmp_0;
    {
      
#line 189 
      u8 *__var = (u8 *)0U;
      
#line 189 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 189 
    u8 *hw_addr = *tmp_0;
    
#line 189 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 189 
                                           writel(ctrl_ext,(void volatile *)(hw_addr + 24U)); else ;
  }
  
#line 190 
  igb_reset_mdicnfg_82580(hw);
  
#line 192 
  tmp_1 = igb_sgmii_active_82575(hw);
  
#line 192 
  if ((int)tmp_1 != 0) {
    int tmp_3;
    bool tmp_2;
    
#line 192 
    tmp_2 = igb_sgmii_uses_mdio_82575(hw);
    
#line 192 
    if (tmp_2) 
#line 192 
               tmp_3 = 0; else 
#line 192 
                               tmp_3 = 1;
    
#line 192 
    if (tmp_3) {
      
#line 193 
      phy->ops.read_reg = & igb_read_phy_reg_sgmii_82575;
      
#line 194 
      phy->ops.write_reg = & igb_write_phy_reg_sgmii_82575;
    }
    else 
#line 192 
         goto _LAND;
  }
  else {
    _LAND: {
             
#line 196 
             switch ((unsigned int)hw->mac.type) {
               case (unsigned int)3: 
#line 197 
               ;
               case (unsigned int)4: 
#line 198 
               ;
               case (unsigned int)5: 
#line 199 
               ;
               
#line 200 
               phy->ops.read_reg = & igb_read_phy_reg_82580;
               
#line 201 
               phy->ops.write_reg = & igb_write_phy_reg_82580;
               
#line 202 
               goto ldv_44526;
               case (unsigned int)6: 
#line 203 
               ;
               case (unsigned int)7: 
#line 204 
               ;
               
#line 205 
               phy->ops.read_reg = & igb_read_phy_reg_gs40g;
               
#line 206 
               phy->ops.write_reg = & igb_write_phy_reg_gs40g;
               
#line 207 
               goto ldv_44526;
               default: 
#line 208 
               ;
               
#line 209 
               phy->ops.read_reg = & igb_read_phy_reg_igp;
               
#line 210 
               phy->ops.write_reg = & igb_write_phy_reg_igp;
             }
             ldv_44526: 
#line 212 
             ;
           }
  }
  
#line 215 
  tmp_4 = igb_rd32(hw,8U);
  
#line 215 
  hw->bus.func = (unsigned short)((unsigned int)((unsigned short)(tmp_4 >> 2)) & 3U);
  
#line 219 
  ret_val = igb_get_phy_id_82575(hw);
  
#line 220 
  if (ret_val != 0) {
    
#line 221 
    __retres = ret_val;
    
#line 221 
    goto return_label;
  }
  else ;
  
#line 224 
  switch (phy->id) {
    case (u32)21040800: 
#line 225 
    ;
    case (u32)21040576: 
#line 226 
    ;
    case (u32)21040272: 
#line 227 
    ;
    case (u32)21040320: 
#line 228 
    ;
    
#line 229 
    phy->type = e1000_phy_m88;
    
#line 230 
    phy->ops.check_polarity = & igb_check_polarity_m88;
    
#line 231 
    phy->ops.get_phy_info = & igb_get_phy_info_m88;
    
#line 232 
    if (phy->id != 21040320U) 
#line 233 
                              phy->ops.get_cable_length = & igb_get_cable_length_m88_gen2; else 
                                                                    
#line 236 
                                                                    phy->ops.get_cable_length = & igb_get_cable_length_m88;
    
#line 237 
    phy->ops.force_speed_duplex = & igb_phy_force_speed_duplex_m88;
    
#line 239 
    if (phy->id == 21040272U) {
      u16 data;
      
#line 242 
      ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)2);
      
#line 245 
      if (ret_val != 0) 
#line 246 
                        goto out; else ;
      
#line 248 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      
#line 251 
      if (ret_val != 0) 
#line 252 
                        goto out; else ;
      
#line 254 
      data = (unsigned short)((unsigned int)((unsigned short)((int)data >> 7)) & 7U);
      
#line 256 
      if ((unsigned int)data + 65534U <= 1U) 
#line 258 
                                             hw->mac.ops.check_for_link = & igb_check_for_link_media_swap; else ;
    }
    else ;
    
#line 261 
    goto ldv_44535;
    case (u32)44565392: 
#line 262 
    ;
    
#line 263 
    phy->type = e1000_phy_igp_3;
    
#line 264 
    phy->ops.get_phy_info = & igb_get_phy_info_igp;
    
#line 265 
    phy->ops.get_cable_length = & igb_get_cable_length_igp_2;
    
#line 266 
    phy->ops.force_speed_duplex = & igb_phy_force_speed_duplex_igp;
    
#line 267 
    phy->ops.set_d0_lplu_state = & igb_set_d0_lplu_state_82575;
    
#line 268 
    phy->ops.set_d3_lplu_state = & igb_set_d3_lplu_state;
    
#line 269 
    goto ldv_44535;
    case (u32)22283168: 
#line 270 
    ;
    case (u32)22283184: 
#line 271 
    ;
    
#line 272 
    phy->type = e1000_phy_82580;
    
#line 273 
    phy->ops.force_speed_duplex = & igb_phy_force_speed_duplex_82580;
    
#line 275 
    phy->ops.get_cable_length = & igb_get_cable_length_82580;
    
#line 276 
    phy->ops.get_phy_info = & igb_get_phy_info_82580;
    
#line 277 
    phy->ops.set_d0_lplu_state = & igb_set_d0_lplu_state_82580;
    
#line 278 
    phy->ops.set_d3_lplu_state = & igb_set_d3_lplu_state_82580;
    
#line 279 
    goto ldv_44535;
    case (u32)21040128: 
#line 280 
    ;
    
#line 281 
    phy->type = e1000_phy_i210;
    
#line 282 
    phy->ops.check_polarity = & igb_check_polarity_m88;
    
#line 283 
    phy->ops.get_phy_info = & igb_get_phy_info_m88;
    
#line 284 
    phy->ops.get_cable_length = & igb_get_cable_length_m88_gen2;
    
#line 285 
    phy->ops.set_d0_lplu_state = & igb_set_d0_lplu_state_82580;
    
#line 286 
    phy->ops.set_d3_lplu_state = & igb_set_d3_lplu_state_82580;
    
#line 287 
    phy->ops.force_speed_duplex = & igb_phy_force_speed_duplex_m88;
    
#line 288 
    goto ldv_44535;
    default: 
#line 289 
    ;
    
#line 290 
    ret_val = -2;
    
#line 291 
    goto out;
  }
  ldv_44535: 
#line 294 
  ;
  out: 
#line 294 
  ;
  
#line 295 
  __retres = ret_val;
  return_label: 
#line 295 
                return __retres;
}


#line 302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_nvm_params_82575(struct e1000_hw *hw)
{
  s32 __retres;
  u16 size;
  
#line 304 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 305 
  u32 eecd = igb_rd32(hw,16U);
  
#line 308 
  size = (unsigned short)((unsigned int)((unsigned short)(eecd >> 11)) & 15U);
  
#line 314 
  size = (unsigned short)((unsigned int)size + 6U);
  
#line 319 
  if ((unsigned int)size > 15U) 
#line 320 
                                size = (unsigned short)15U; else ;
  
#line 322 
  nvm->word_size = (unsigned short)(1 << (int)size);
  
#line 323 
  nvm->opcode_bits = (unsigned short)8U;
  
#line 324 
  nvm->delay_usec = (unsigned short)1U;
  
#line 326 
  switch ((unsigned int)nvm->override) {
    case (unsigned int)2: 
#line 327 
    ;
    
#line 328 
    nvm->page_size = (unsigned short)32U;
    
#line 329 
    nvm->address_bits = (unsigned short)16U;
    
#line 330 
    goto ldv_44548;
    case (unsigned int)1: 
#line 331 
    ;
    
#line 332 
    nvm->page_size = (unsigned short)8U;
    
#line 333 
    nvm->address_bits = (unsigned short)8U;
    
#line 334 
    goto ldv_44548;
    default: 
#line 335 
    ;
    
#line 336 
    if ((eecd & 1024U) != 0U) 
#line 336 
                              nvm->page_size = (unsigned short)32U; else 
                                                                    
#line 336 
                                                                    nvm->page_size = (unsigned short)8U;
    
#line 337 
    if ((eecd & 1024U) != 0U) 
#line 337 
                              nvm->address_bits = (unsigned short)16U; else 
                                                                    
#line 337 
                                                                    nvm->address_bits = (unsigned short)8U;
    
#line 339 
    goto ldv_44548;
  }
  ldv_44548: 
#line 341 
  ;
  
#line 341 
  if ((unsigned int)nvm->word_size == 32768U) 
#line 342 
                                              nvm->page_size = (unsigned short)128U; else ;
  
#line 344 
  nvm->type = e1000_nvm_eeprom_spi;
  
#line 347 
  nvm->ops.acquire = & igb_acquire_nvm_82575;
  
#line 348 
  nvm->ops.release = & igb_release_nvm_82575;
  
#line 349 
  nvm->ops.write = & igb_write_nvm_spi;
  
#line 350 
  nvm->ops.validate = & igb_validate_nvm_checksum;
  
#line 351 
  nvm->ops.update = & igb_update_nvm_checksum;
  
#line 352 
  if ((int)nvm->word_size >= 0) 
#line 353 
                                nvm->ops.read = & igb_read_nvm_eerd; else 
                                                                    
#line 355 
                                                                    nvm->ops.read = & igb_read_nvm_spi;
  
#line 358 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 359 
    ;
    
#line 360 
    nvm->ops.validate = & igb_validate_nvm_checksum_82580;
    
#line 361 
    nvm->ops.update = & igb_update_nvm_checksum_82580;
    
#line 362 
    goto ldv_44552;
    case (unsigned int)5: 
#line 363 
    ;
    case (unsigned int)4: 
#line 364 
    ;
    
#line 365 
    nvm->ops.validate = & igb_validate_nvm_checksum_i350;
    
#line 366 
    nvm->ops.update = & igb_update_nvm_checksum_i350;
    
#line 367 
    goto ldv_44552;
    default: 
#line 368 
    ;
    
#line 369 
    goto ldv_44552;
  }
  ldv_44552: 
#line 372 
  ;
  
#line 372 
  __retres = 0;
  
#line 372 
  return __retres;
}


#line 379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_mac_params_82575(struct e1000_hw *hw)
{
  s32 __retres;
  u32 tmp;
  
#line 381 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 382 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  
#line 385 
  mac->mta_reg_count = (unsigned short)128U;
  
#line 387 
  switch ((unsigned int)mac->type) {
    case (unsigned int)2: 
#line 388 
    ;
    
#line 389 
    mac->rar_entry_count = (unsigned short)24U;
    
#line 390 
    goto ldv_44562;
    case (unsigned int)3: 
#line 391 
    ;
    
#line 392 
    mac->rar_entry_count = (unsigned short)24U;
    
#line 393 
    goto ldv_44562;
    case (unsigned int)4: 
#line 394 
    ;
    case (unsigned int)5: 
#line 395 
    ;
    
#line 396 
    mac->rar_entry_count = (unsigned short)32U;
    
#line 397 
    goto ldv_44562;
    default: 
#line 398 
    ;
    
#line 399 
    mac->rar_entry_count = (unsigned short)16U;
    
#line 400 
    goto ldv_44562;
  }
  ldv_44562: 
#line 403 
  ;
  
#line 403 
  if (mac->type > (unsigned int)e1000_82576) 
#line 404 
                                             mac->ops.reset_hw = & igb_reset_hw_82580; else 
                                                                    
#line 406 
                                                                    mac->ops.reset_hw = & igb_reset_hw_82575;
  
#line 408 
  if (mac->type > (unsigned int)e1000_i354) {
    
#line 409 
    mac->ops.acquire_swfw_sync = & igb_acquire_swfw_sync_i210;
    
#line 410 
    mac->ops.release_swfw_sync = & igb_release_swfw_sync_i210;
  }
  else {
    
#line 413 
    mac->ops.acquire_swfw_sync = & igb_acquire_swfw_sync_82575;
    
#line 414 
    mac->ops.release_swfw_sync = & igb_release_swfw_sync_82575;
  }
  
#line 418 
  mac->asf_firmware_present = (_Bool)1;
  
#line 420 
  tmp = igb_rd32(hw,23380U);
  
#line 420 
  mac->arc_subsystem_valid = (_Bool)((tmp & 14U) != 0U);
  
#line 424 
  if (mac->type > (unsigned int)e1000_82580) 
#line 425 
                                             dev_spec->eee_disable = (_Bool)0; else 
                                                                    
#line 427 
                                                                    dev_spec->eee_disable = (_Bool)1;
  
#line 429 
  if (mac->type > (unsigned int)e1000_i354) 
#line 430 
                                            dev_spec->clear_semaphore_once = (_Bool)1; else ;
  
#line 432 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
#line 432 
                                                                   mac->ops.setup_physical_interface = & igb_setup_copper_link_82575; else 
                                                                    
#line 432 
                                                                    mac->ops.setup_physical_interface = & igb_setup_serdes_link_82575;
  
#line 437 
  if (mac->type == (unsigned int)e1000_82580) {
    
#line 438 
    switch ((int)hw->device_id) {
      case 1080: 
#line 440 
      ;
      case 1082: 
#line 441 
      ;
      case 1084: 
#line 442 
      ;
      case 1088: 
#line 443 
      ;
      
#line 444 
      goto ldv_44571;
      default: 
#line 445 
      ;
      
#line 446 
      hw->dev_spec._82575.mas_capable = (_Bool)1;
      
#line 447 
      goto ldv_44571;
    }
    ldv_44571: 
#line 449 
    ;
  }
  else ;
  
#line 450 
  __retres = 0;
  
#line 450 
  return __retres;
}


#line 460  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_sfp_media_type_82575(struct e1000_hw *hw)
{
  
#line 462 
  s32 ret_val = 3;
  
#line 463 
  u32 ctrl_ext = 0U;
  
#line 464 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  
#line 465 
  struct e1000_sfp_flags *eth_flags = & dev_spec->eth_flags;
  
#line 466 
  u8 tranceiver_type = (unsigned char)0U;
  
#line 467 
  s32 timeout = 3;
  
#line 470 
  ctrl_ext = igb_rd32(hw,24U);
  
#line 471 
  ctrl_ext &= 4294967167U;
  {
    u8 * volatile *tmp;
    {
      
#line 472 
      u8 *__var = (u8 *)0U;
      
#line 472 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 472 
    u8 *hw_addr = *tmp;
    
#line 472 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 472 
                                           writel(ctrl_ext | 33554432U,(void volatile *)(hw_addr + 24U)); else ;
  }
  
#line 474 
  igb_rd32(hw,8U);
  
#line 477 
  goto ldv_44587;
  ldv_44586: 
#line 478 
  ;
  
#line 478 
  ret_val = igb_read_sfp_data_byte(hw,(unsigned short)0,& tranceiver_type);
  
#line 481 
  if (ret_val == 0) 
#line 482 
                    goto ldv_44585; else ;
  
#line 483 
  msleep(100U);
  
#line 484 
  timeout -= 1;
  ldv_44587: 
#line 485 
  ;
  
#line 477 
  if (timeout != 0) 
#line 479 
                    goto ldv_44586; else 
#line 482 
                                         goto ldv_44585;
  ldv_44585: 
#line 483 
  ;
  
#line 486 
  if (ret_val != 0) 
#line 487 
                    goto out; else ;
  
#line 489 
  ret_val = igb_read_sfp_data_byte(hw,(unsigned short)6,(u8 *)eth_flags);
  
#line 492 
  if (ret_val != 0) 
#line 493 
                    goto out; else ;
  
#line 496 
  if ((unsigned int)tranceiver_type + 254U <= 1U) {
    
#line 498 
    dev_spec->module_plugged = (_Bool)1;
    
#line 499 
    if ((unsigned int)*((unsigned char *)eth_flags + 0UL) != 0U || (unsigned int)*((unsigned char *)eth_flags + 0UL) != 0U) 
      
#line 500 
      hw->phy.media_type = e1000_media_type_internal_serdes;
    else 
      
#line 501 
      if ((unsigned int)*((unsigned char *)eth_flags + 0UL) != 0U) {
        
#line 502 
        dev_spec->sgmii_active = (_Bool)1;
        
#line 503 
        hw->phy.media_type = e1000_media_type_internal_serdes;
      }
      else 
        
#line 504 
        if ((unsigned int)*((unsigned char *)eth_flags + 0UL) != 0U) {
          
#line 505 
          dev_spec->sgmii_active = (_Bool)1;
          
#line 506 
          hw->phy.media_type = e1000_media_type_copper;
        }
        else {
          
#line 508 
          hw->phy.media_type = e1000_media_type_unknown;
          {
            
#line 509 
            struct _ddebug descriptor = {.modname = "igb", .function = "igb_set_sfp_media_type_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "PHY module has not been recognized\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))509U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 509 
            if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
              struct net_device *tmp_0;
              
#line 509 
              tmp_0 = igb_get_hw_dev(hw);
              
#line 509 
              __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_0,"PHY module has not been recognized\n");
            }
            else ;
          }
          
#line 510 
          goto out;
        }
  }
  else 
#line 513 
       hw->phy.media_type = e1000_media_type_unknown;
  
#line 515 
  ret_val = 0;
  out: 
#line 516 
  ;
  {
    u8 * volatile *tmp_1;
    {
      
#line 518 
      u8 *__var_0 = (u8 *)0U;
      
#line 518 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 518 
    u8 *hw_addr_0 = *tmp_1;
    
#line 518 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 518 
                                             writel(ctrl_ext,(void volatile *)(hw_addr_0 + 24U)); else ;
  }
  
#line 519 
  return ret_val;
}


#line 522  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_invariants_82575(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  
#line 524 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 525 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  
#line 527 
  u32 ctrl_ext = 0U;
  
#line 528 
  u32 link_mode = 0U;
  
#line 530 
  switch ((int)hw->device_id) {
    case 4263: 
#line 531 
    ;
    case 4265: 
#line 532 
    ;
    case 4310: 
#line 533 
    ;
    
#line 534 
    mac->type = e1000_82575;
    
#line 535 
    goto ldv_44605;
    case 4297: 
#line 536 
    ;
    case 5386: 
#line 537 
    ;
    case 5400: 
#line 538 
    ;
    case 4326: 
#line 539 
    ;
    case 4327: 
#line 540 
    ;
    case 4328: 
#line 541 
    ;
    case 5414: 
#line 542 
    ;
    case 5389: 
#line 543 
    ;
    
#line 544 
    mac->type = e1000_82576;
    
#line 545 
    goto ldv_44605;
    case 5390: 
#line 546 
    ;
    case 5391: 
#line 547 
    ;
    case 5415: 
#line 548 
    ;
    case 5392: 
#line 549 
    ;
    case 5393: 
#line 550 
    ;
    case 5398: 
#line 551 
    ;
    case 1080: 
#line 552 
    ;
    case 1082: 
#line 553 
    ;
    case 1084: 
#line 554 
    ;
    case 1088: 
#line 555 
    ;
    
#line 556 
    mac->type = e1000_82580;
    
#line 557 
    goto ldv_44605;
    case 5409: 
#line 558 
    ;
    case 5410: 
#line 559 
    ;
    case 5411: 
#line 560 
    ;
    case 5412: 
#line 561 
    ;
    
#line 562 
    mac->type = e1000_i350;
    
#line 563 
    goto ldv_44605;
    case 5427: 
#line 564 
    ;
    case 5430: 
#line 565 
    ;
    case 5431: 
#line 566 
    ;
    case 5432: 
#line 567 
    ;
    case 5499: 
#line 568 
    ;
    case 5500: 
#line 569 
    ;
    
#line 570 
    mac->type = e1000_i210;
    
#line 571 
    goto ldv_44605;
    case 5433: 
#line 572 
    ;
    
#line 573 
    mac->type = e1000_i211;
    
#line 574 
    goto ldv_44605;
    case 8000: 
#line 575 
    ;
    case 8001: 
#line 576 
    ;
    case 8005: 
#line 577 
    ;
    
#line 578 
    mac->type = e1000_i354;
    
#line 579 
    goto ldv_44605;
    default: 
#line 580 
    ;
    
#line 581 
    __retres = -5;
    
#line 581 
    goto return_label;
  }
  ldv_44605: 
#line 591 
  ;
  
#line 591 
  hw->phy.media_type = e1000_media_type_copper;
  
#line 592 
  dev_spec->sgmii_active = (_Bool)0;
  
#line 593 
  dev_spec->module_plugged = (_Bool)0;
  
#line 595 
  ctrl_ext = igb_rd32(hw,24U);
  
#line 597 
  link_mode = ctrl_ext & 12582912U;
  
#line 598 
  switch (link_mode) {
    bool tmp;
    case (u32)4194304: 
#line 599 
    ;
    
#line 600 
    hw->phy.media_type = e1000_media_type_internal_serdes;
    
#line 601 
    goto ldv_44640;
    case (u32)8388608: 
#line 602 
    ;
    
#line 604 
    tmp = igb_sgmii_uses_mdio_82575(hw);
    
#line 604 
    if ((int)tmp != 0) {
      
#line 605 
      hw->phy.media_type = e1000_media_type_copper;
      
#line 606 
      dev_spec->sgmii_active = (_Bool)1;
      
#line 607 
      goto ldv_44640;
    }
    else ;
    case (u32)12582912: 
#line 610 
    ;
    
#line 612 
    ret_val = igb_set_sfp_media_type_82575(hw);
    
#line 613 
    if (ret_val != 0 || hw->phy.media_type == (unsigned int)e1000_media_type_unknown) {
      
#line 618 
      hw->phy.media_type = e1000_media_type_internal_serdes;
      
#line 620 
      if (link_mode == 8388608U) {
        
#line 621 
        hw->phy.media_type = e1000_media_type_copper;
        
#line 622 
        dev_spec->sgmii_active = (_Bool)1;
      }
      else ;
      
#line 625 
      goto ldv_44640;
    }
    else ;
    
#line 629 
    if ((unsigned int)*((unsigned char *)(& dev_spec->eth_flags) + 0UL) != 0U) 
      
#line 630 
      goto ldv_44640; else ;
    
#line 633 
    ctrl_ext &= 4282384383U;
    
#line 635 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
      
#line 636 
      ctrl_ext |= 8388608U; else 
#line 638 
                                 ctrl_ext |= 12582912U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 640 
        u8 *__var = (u8 *)0U;
        
#line 640 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 640 
      u8 *hw_addr = *tmp_0;
      
#line 640 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 640 
                                             writel(ctrl_ext,(void volatile *)(hw_addr + 24U)); else ;
    }
    
#line 642 
    goto ldv_44640;
    default: 
#line 643 
    ;
    
#line 644 
    goto ldv_44640;
  }
  ldv_44640: 
#line 648 
  ;
  
#line 648 
  ret_val = igb_init_mac_params_82575(hw);
  
#line 649 
  if (ret_val != 0) 
#line 650 
                    goto out; else ;
  
#line 653 
  ret_val = igb_init_nvm_params_82575(hw);
  
#line 654 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)6: 
#line 655 
    ;
    case (unsigned int)7: 
#line 656 
    ;
    
#line 657 
    ret_val = igb_init_nvm_params_i210(hw);
    
#line 658 
    goto ldv_44650;
    default: 
#line 659 
    ;
    
#line 660 
    goto ldv_44650;
  }
  ldv_44650: 
#line 663 
  ;
  
#line 663 
  if (ret_val != 0) 
#line 664 
                    goto out; else ;
  
#line 667 
  switch ((unsigned int)mac->type) {
    case (unsigned int)2: 
#line 668 
    ;
    case (unsigned int)4: 
#line 669 
    ;
    
#line 670 
    igb_init_mbx_params_pf(hw);
    
#line 671 
    goto ldv_44654;
    default: 
#line 672 
    ;
    
#line 673 
    goto ldv_44654;
  }
  ldv_44654: 
#line 677 
  ;
  
#line 677 
  ret_val = igb_init_phy_params_82575(hw);
  out: 
#line 679 
  ;
  
#line 680 
  __retres = ret_val;
  return_label: 
#line 680 
                return __retres;
}


#line 690  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_acquire_phy_82575(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 692 
  u16 mask = (unsigned short)2U;
  
#line 694 
  if ((unsigned int)hw->bus.func == 1U) 
#line 695 
                                        mask = (unsigned short)4U;
  else 
    
#line 696 
    if ((unsigned int)hw->bus.func == 2U) 
#line 697 
                                          mask = (unsigned short)32U;
    else 
      
#line 698 
      if ((unsigned int)hw->bus.func == 3U) 
#line 699 
                                            mask = (unsigned short)64U; else ;
  
#line 701 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,(unsigned short)((int)mask));
  
#line 701 
  return tmp;
}


#line 711  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static void igb_release_phy_82575(struct e1000_hw *hw)
{
  
#line 713 
  u16 mask = (unsigned short)2U;
  
#line 715 
  if ((unsigned int)hw->bus.func == 1U) 
#line 716 
                                        mask = (unsigned short)4U;
  else 
    
#line 717 
    if ((unsigned int)hw->bus.func == 2U) 
#line 718 
                                          mask = (unsigned short)32U;
    else 
      
#line 719 
      if ((unsigned int)hw->bus.func == 3U) 
#line 720 
                                            mask = (unsigned short)64U; else ;
  
#line 722 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)((int)mask));
  
#line 723 
  return;
}


#line 734  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_read_phy_reg_sgmii_82575(struct e1000_hw *hw, u32 offset, u16 *data)
{
  
#line 737 
  s32 ret_val = -4;
  
#line 739 
  if (offset > 255U) {
    {
      
#line 740 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_read_phy_reg_sgmii_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "PHY Address %u is out of range\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))740U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 740 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 740 
        ;
        
#line 740 
        tmp = igb_get_hw_dev(hw);
        
#line 740 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"PHY Address %u is out of range\n",offset);
      }
      else ;
    }
    
#line 741 
    goto out;
  }
  else ;
  
#line 744 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 745 
  if (ret_val != 0) 
#line 746 
                    goto out; else ;
  
#line 748 
  ret_val = igb_read_phy_reg_i2c(hw,offset,data);
  
#line 750 
  (*(hw->phy.ops.release))(hw);
  out: 
#line 752 
  ;
  
#line 753 
  return ret_val;
}


#line 765  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_write_phy_reg_sgmii_82575(struct e1000_hw *hw, u32 offset, u16 data)
{
  
#line 768 
  s32 ret_val = -4;
  
#line 771 
  if (offset > 255U) {
    {
      
#line 772 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_write_phy_reg_sgmii_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "PHY Address %d is out of range\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))772U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 772 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 772 
        ;
        
#line 772 
        tmp = igb_get_hw_dev(hw);
        
#line 772 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"PHY Address %d is out of range\n",offset);
      }
      else ;
    }
    
#line 773 
    goto out;
  }
  else ;
  
#line 776 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 777 
  if (ret_val != 0) 
#line 778 
                    goto out; else ;
  
#line 780 
  ret_val = igb_write_phy_reg_i2c(hw,offset,(unsigned short)((int)data));
  
#line 782 
  (*(hw->phy.ops.release))(hw);
  out: 
#line 784 
  ;
  
#line 785 
  return ret_val;
}


#line 795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_phy_id_82575(struct e1000_hw *hw)
{
  u16 phy_id;
  u32 ctrl_ext;
  u32 mdic;
  int tmp_0;
  bool tmp;
  bool tmp_1;
  
#line 797 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 798 
  s32 ret_val = 0;
  
#line 804 
  if (hw->mac.type == (unsigned int)e1000_i354) 
#line 805 
                                                igb_get_phy_id(hw); else ;
  
#line 813 
  tmp = igb_sgmii_active_82575(hw);
  
#line 813 
  if (tmp) 
#line 813 
           tmp_0 = 0; else 
#line 813 
                           tmp_0 = 1;
  
#line 813 
  if (tmp_0) {
    
#line 814 
    phy->addr = 1U;
    
#line 815 
    ret_val = igb_get_phy_id(hw);
    
#line 816 
    goto out;
  }
  else ;
  
#line 819 
  tmp_1 = igb_sgmii_uses_mdio_82575(hw);
  
#line 819 
  if ((int)tmp_1 != 0) {
    
#line 820 
    switch ((unsigned int)hw->mac.type) {
      case (unsigned int)1: 
#line 821 
      ;
      case (unsigned int)2: 
#line 822 
      ;
      
#line 823 
      mdic = igb_rd32(hw,32U);
      
#line 824 
      mdic &= 65011712U;
      
#line 825 
      phy->addr = mdic >> 21;
      
#line 826 
      goto ldv_44693;
      case (unsigned int)3: 
#line 827 
      ;
      case (unsigned int)4: 
#line 828 
      ;
      case (unsigned int)5: 
#line 829 
      ;
      case (unsigned int)6: 
#line 830 
      ;
      case (unsigned int)7: 
#line 831 
      ;
      
#line 832 
      mdic = igb_rd32(hw,3588U);
      
#line 833 
      mdic &= 65011712U;
      
#line 834 
      phy->addr = mdic >> 21;
      
#line 835 
      goto ldv_44693;
      default: 
#line 836 
      ;
      
#line 837 
      ret_val = -2;
      
#line 838 
      goto out;
    }
    ldv_44693: 
#line 840 
    ;
    
#line 840 
    ret_val = igb_get_phy_id(hw);
    
#line 841 
    goto out;
  }
  else ;
  
#line 845 
  ctrl_ext = igb_rd32(hw,24U);
  {
    u8 * volatile *tmp_2;
    {
      
#line 846 
      u8 *__var = (u8 *)0U;
      
#line 846 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 846 
    u8 *hw_addr = *tmp_2;
    
#line 846 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 846 
                                           writel(ctrl_ext & 4294967167U,(void volatile *)(hw_addr + 24U)); else ;
  }
  
#line 847 
  igb_rd32(hw,8U);
  
#line 848 
  msleep(300U);
  
#line 853 
  phy->addr = 1U;
  
#line 853 
  goto ldv_44708;
  ldv_44707: 
#line 854 
  ;
  
#line 854 
  ret_val = igb_read_phy_reg_sgmii_82575(hw,2U,& phy_id);
  
#line 855 
  if (ret_val == 0) {
    {
      
#line 856 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_phy_id_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Vendor ID 0x%08X read at address %u\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))857U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 856 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_3;
        
#line 856 
        ;
        
#line 856 
        ;
        
#line 856 
        tmp_3 = igb_get_hw_dev(hw);
        
#line 856 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_3,"Vendor ID 0x%08X read at address %u\n",(int)phy_id,phy->addr);
      }
      else ;
    }
    
#line 861 
    if ((unsigned int)phy_id == 321U) 
#line 862 
                                      goto ldv_44705; else ;
  }
  else {
    
#line 864 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_get_phy_id_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "PHY address %u was unreadable\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))864U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 864 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_4;
      
#line 864 
      ;
      
#line 864 
      tmp_4 = igb_get_hw_dev(hw);
      
#line 864 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_4,"PHY address %u was unreadable\n",phy->addr);
    }
    else ;
  }
  
#line 853 
  phy->addr += 1U;
  ldv_44708: 
#line 854 
  ;
  
#line 853 
  if (phy->addr <= 7U) 
#line 855 
                       goto ldv_44707; else 
#line 858 
                                            goto ldv_44705;
  ldv_44705: 
#line 859 
  ;
  
#line 869 
  if (phy->addr == 8U) {
    
#line 870 
    phy->addr = 0U;
    
#line 871 
    ret_val = -2;
    
#line 872 
    goto out;
  }
  else 
#line 874 
       ret_val = igb_get_phy_id(hw);
  {
    u8 * volatile *tmp_5;
    {
      
#line 878 
      u8 *__var_0 = (u8 *)0U;
      
#line 878 
      tmp_5 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 878 
    u8 *hw_addr_0 = *tmp_5;
    
#line 878 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 878 
                                             writel(ctrl_ext,(void volatile *)(hw_addr_0 + 24U)); else ;
  }
  out: 
#line 880 
  ;
  
#line 881 
  return ret_val;
}


#line 890  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_phy_hw_reset_sgmii_82575(struct e1000_hw *hw)
{
  s32 ret_val;
  {
    
#line 898 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_phy_hw_reset_sgmii_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Soft resetting SGMII attached PHY...\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))898U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 898 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 898 
      tmp = igb_get_hw_dev(hw);
      
#line 898 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Soft resetting SGMII attached PHY...\n");
    }
    else ;
  }
  
#line 903 
  ret_val = (*(hw->phy.ops.write_reg))(hw,27U,(unsigned short)32900);
  
#line 904 
  if (ret_val != 0) 
#line 905 
                    goto out; else ;
  
#line 907 
  ret_val = igb_phy_sw_reset(hw);
  out: 
#line 909 
  ;
  
#line 910 
  return ret_val;
}


#line 926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_d0_lplu_state_82575(struct e1000_hw *hw, bool active)
{
  s32 ret_val;
  u16 data;
  
#line 928 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 932 
  ret_val = (*(phy->ops.read_reg))(hw,25U,& data);
  
#line 933 
  if (ret_val != 0) 
#line 934 
                    goto out; else ;
  
#line 936 
  if ((int)active != 0) {
    
#line 937 
    data = (unsigned short)((unsigned int)data | 2U);
    
#line 938 
    ret_val = (*(phy->ops.write_reg))(hw,25U,(unsigned short)((int)data));
    
#line 940 
    if (ret_val != 0) 
#line 941 
                      goto out; else ;
    
#line 944 
    ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
    
#line 946 
    data = (unsigned short)((unsigned int)data & 65407U);
    
#line 947 
    ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
    
#line 949 
    if (ret_val != 0) 
#line 950 
                      goto out; else ;
  }
  else {
    
#line 952 
    data = (unsigned short)((unsigned int)data & 65533U);
    
#line 953 
    ret_val = (*(phy->ops.write_reg))(hw,25U,(unsigned short)((int)data));
    
#line 960 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      
#line 961 
      ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
      
#line 963 
      if (ret_val != 0) 
#line 964 
                        goto out; else ;
      
#line 966 
      data = (unsigned short)((unsigned int)data | 128U);
      
#line 967 
      ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
      
#line 969 
      if (ret_val != 0) 
#line 970 
                        goto out; else ;
    }
    else 
      
#line 971 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        
#line 972 
        ret_val = (*(phy->ops.read_reg))(hw,16U,& data);
        
#line 974 
        if (ret_val != 0) 
#line 975 
                          goto out; else ;
        
#line 977 
        data = (unsigned short)((unsigned int)data & 65407U);
        
#line 978 
        ret_val = (*(phy->ops.write_reg))(hw,16U,(unsigned short)((int)data));
        
#line 980 
        if (ret_val != 0) 
#line 981 
                          goto out; else ;
      }
      else ;
  }
  out: 
#line 985 
  ;
  
#line 986 
  return ret_val;
}


#line 1002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_d0_lplu_state_82580(struct e1000_hw *hw, bool active)
{
  s32 __retres;
  u16 data;
  u32 tmp;
  
#line 1004 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1007 
  tmp = igb_rd32(hw,3604U);
  
#line 1007 
  data = (unsigned short)tmp;
  
#line 1009 
  if ((int)active != 0) {
    
#line 1010 
    data = (unsigned short)((unsigned int)data | 2U);
    
#line 1013 
    data = (unsigned short)((unsigned int)data & 65534U);
  }
  else {
    
#line 1015 
    data = (unsigned short)((unsigned int)data & 65533U);
    
#line 1022 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) 
#line 1023 
                                                                data = (unsigned short)((unsigned int)data | 1U);
    else 
      
#line 1024 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) 
#line 1025 
                                                                   data = (unsigned short)((unsigned int)data & 65534U); else ;
  }
  {
    u8 * volatile *tmp_0;
    {
      
#line 1027 
      u8 *__var = (u8 *)0U;
      
#line 1027 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1027 
    u8 *hw_addr = *tmp_0;
    
#line 1027 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1027 
                                           writel((unsigned int)data,(void volatile *)(hw_addr + 3604U)); else ;
  }
  
#line 1028 
  __retres = 0;
  
#line 1028 
  return __retres;
}


#line 1045  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_d3_lplu_state_82580(struct e1000_hw *hw, bool active)
{
  s32 __retres;
  u16 data;
  u32 tmp;
  
#line 1047 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1050 
  tmp = igb_rd32(hw,3604U);
  
#line 1050 
  data = (unsigned short)tmp;
  
#line 1052 
  if (! active) {
    
#line 1053 
    data = (unsigned short)((unsigned int)data & 65531U);
    
#line 1059 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) 
#line 1060 
                                                                data = (unsigned short)((unsigned int)data | 1U);
    else 
      
#line 1061 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) 
#line 1062 
                                                                   data = (unsigned short)((unsigned int)data & 65534U); else ;
  }
  else 
    
#line 1063 
    if (((unsigned int)phy->autoneg_advertised == 47U || (unsigned int)phy->autoneg_advertised == 15U) || (unsigned int)phy->autoneg_advertised == 3U) {
      
#line 1066 
      data = (unsigned short)((unsigned int)data | 4U);
      
#line 1068 
      data = (unsigned short)((unsigned int)data & 65534U);
    }
    else ;
  {
    u8 * volatile *tmp_0;
    {
      
#line 1071 
      u8 *__var = (u8 *)0U;
      
#line 1071 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1071 
    u8 *hw_addr = *tmp_0;
    
#line 1071 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1071 
                                           writel((unsigned int)data,(void volatile *)(hw_addr + 3604U)); else ;
  }
  
#line 1072 
  __retres = 0;
  
#line 1072 
  return __retres;
}


#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_acquire_nvm_82575(struct e1000_hw *hw)
{
  s32 ret_val;
  
#line 1088 
  ret_val = (*(hw->mac.ops.acquire_swfw_sync))(hw,(unsigned short)1);
  
#line 1089 
  if (ret_val != 0) 
#line 1090 
                    goto out; else ;
  
#line 1092 
  ret_val = igb_acquire_nvm(hw);
  
#line 1094 
  if (ret_val != 0) 
#line 1095 
                    (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)1); else ;
  out: 
#line 1097 
  ;
  
#line 1098 
  return ret_val;
}


#line 1108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static void igb_release_nvm_82575(struct e1000_hw *hw)
{
  
#line 1110 
  igb_release_nvm(hw);
  
#line 1111 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)1);
  
#line 1112 
  return;
}


#line 1122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_acquire_swfw_sync_82575(struct e1000_hw *hw, u16 mask)
{
  u32 swfw_sync;
  s32 tmp;
  
#line 1125 
  u32 swmask = (unsigned int)mask;
  
#line 1126 
  u32 fwmask = (unsigned int)((int)mask << 16);
  
#line 1127 
  s32 ret_val = 0;
  
#line 1128 
  s32 i = 0;
  
#line 1128 
  s32 timeout = 200;
  
#line 1130 
  goto ldv_44770;
  ldv_44769: 
#line 1131 
  ;
  
#line 1131 
  tmp = igb_get_hw_semaphore(hw);
  
#line 1131 
  if (tmp != 0) {
    
#line 1132 
    ret_val = -13;
    
#line 1133 
    goto out;
  }
  else ;
  
#line 1136 
  swfw_sync = igb_rd32(hw,23388U);
  
#line 1137 
  if (((fwmask | swmask) & swfw_sync) == 0U) 
#line 1138 
                                             goto ldv_44764; else ;
  
#line 1143 
  igb_put_hw_semaphore(hw);
  
#line 1144 
  if (1) 
#line 1144 
         __const_udelay(21475000UL);
  else {
    
#line 1144 
    unsigned long __ms = 5UL;
    {
      unsigned long tmp_0;
      
#line 1144 
      goto ldv_44767;
      ldv_44766: 
#line 1145 
      ;
      
#line 1144 
      __const_udelay(4295000UL);
      ldv_44767: 
#line 1146 
      ;
      
#line 1144 
      tmp_0 = __ms;
      
#line 1144 
      __ms -= 1UL;
      
#line 1144 
      ;
      
#line 1144 
      if (tmp_0 != 0UL) 
#line 1146 
                        goto ldv_44766; else 
#line 1149 
                                             goto ldv_44768;
      ldv_44768: 
#line 1150 
      ;
    }
  }
  
#line 1145 
  i += 1;
  ldv_44770: 
#line 1146 
  ;
  
#line 1130 
  if (i < timeout) 
#line 1132 
                   goto ldv_44769; else 
#line 1135 
                                        goto ldv_44764;
  ldv_44764: 
#line 1136 
  ;
  
#line 1148 
  if (i == timeout) {
    {
      
#line 1149 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_acquire_swfw_sync_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Driver can\'t access resource, SW_FW_SYNC timeout.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1149U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1149 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 1149 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 1149 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_1,"Driver can\'t access resource, SW_FW_SYNC timeout.\n");
      }
      else ;
    }
    
#line 1150 
    ret_val = -13;
    
#line 1151 
    goto out;
  }
  else ;
  
#line 1154 
  swfw_sync |= swmask;
  {
    u8 * volatile *tmp_2;
    {
      
#line 1155 
      u8 *__var = (u8 *)0U;
      
#line 1155 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1155 
    u8 *hw_addr = *tmp_2;
    
#line 1155 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1155 
                                           writel(swfw_sync,(void volatile *)(hw_addr + 23388U)); else ;
  }
  
#line 1157 
  igb_put_hw_semaphore(hw);
  out: 
#line 1159 
  ;
  
#line 1160 
  return ret_val;
}


#line 1171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static void igb_release_swfw_sync_82575(struct e1000_hw *hw, u16 mask)
{
  u32 swfw_sync;
  s32 tmp;
  
#line 1175 
  goto ldv_44782;
  ldv_44781: 
#line 1176 
  ;
  ldv_44782: 
#line 1177 
  ;
  
#line 1175 
  tmp = igb_get_hw_semaphore(hw);
  
#line 1175 
  if (tmp != 0) 
#line 1177 
                goto ldv_44781; else 
#line 1180 
                                     goto ldv_44783;
  ldv_44783: 
#line 1181 
  ;
  
#line 1178 
  swfw_sync = igb_rd32(hw,23388U);
  
#line 1179 
  swfw_sync = (unsigned int)(~ ((int)mask)) & swfw_sync;
  {
    u8 * volatile *tmp_0;
    {
      
#line 1180 
      u8 *__var = (u8 *)0U;
      
#line 1180 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1180 
    u8 *hw_addr = *tmp_0;
    
#line 1180 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1180 
                                           writel(swfw_sync,(void volatile *)(hw_addr + 23388U)); else ;
  }
  
#line 1182 
  igb_put_hw_semaphore(hw);
  
#line 1183 
  return;
}


#line 1195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_cfg_done_82575(struct e1000_hw *hw)
{
  s32 __retres;
  u32 tmp;
  u32 tmp_1;
  
#line 1197 
  s32 timeout = 100;
  
#line 1198 
  u32 mask = 262144U;
  
#line 1200 
  if ((unsigned int)hw->bus.func == 1U) 
#line 1201 
                                        mask = 524288U;
  else 
    
#line 1202 
    if ((unsigned int)hw->bus.func == 2U) 
#line 1203 
                                          mask = 1048576U;
    else 
      
#line 1204 
      if ((unsigned int)hw->bus.func == 3U) 
#line 1205 
                                            mask = 2097152U; else ;
  
#line 1207 
  goto ldv_44794;
  ldv_44793: 
#line 1208 
  ;
  
#line 1208 
  tmp = igb_rd32(hw,4112U);
  
#line 1208 
  ;
  
#line 1208 
  if ((tmp & mask) != 0U) 
#line 1209 
                          goto ldv_44792; else ;
  
#line 1210 
  usleep_range(1000UL,2000UL);
  
#line 1211 
  timeout -= 1;
  ldv_44794: 
#line 1212 
  ;
  
#line 1207 
  if (timeout != 0) 
#line 1209 
                    goto ldv_44793; else 
#line 1212 
                                         goto ldv_44792;
  ldv_44792: 
#line 1213 
  ;
  
#line 1213 
  if (timeout == 0) {
    
#line 1214 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_cfg_done_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "MNG configuration cycle has not completed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1214U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1214 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp_0;
      
#line 1214 
      tmp_0 = igb_get_hw_dev(hw);
      
#line 1214 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_0,"MNG configuration cycle has not completed.\n");
    }
    else ;
  }
  else ;
  
#line 1217 
  tmp_1 = igb_rd32(hw,16U);
  
#line 1217 
  if ((tmp_1 & 256U) == 0U) {
    
#line 1217 
    if (hw->phy.type == (unsigned int)e1000_phy_igp_3) 
#line 1219 
                                                       igb_phy_init_script_igp3(hw); else ;
  }
  else ;
  
#line 1221 
  __retres = 0;
  
#line 1221 
  return __retres;
}


#line 1234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_link_up_info_82575(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  s32 ret_val;
  
#line 1239 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
#line 1240 
                                                                   ret_val = igb_get_pcs_speed_and_duplex_82575(hw,speed,duplex); else 
                                                                    
#line 1243 
                                                                    ret_val = igb_get_speed_and_duplex_copper(hw,speed,duplex);
  
#line 1246 
  return ret_val;
}


#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_check_for_link_82575(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 speed;
  u16 duplex;
  
#line 1261 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    
#line 1262 
    ret_val = igb_get_pcs_speed_and_duplex_82575(hw,& speed,& duplex);
    
#line 1268 
    hw->mac.get_link_status = (_Bool)(! ((int)hw->mac.serdes_has_link != 0));
    
#line 1275 
    ret_val = igb_config_fc_after_link_up(hw);
    
#line 1276 
    if (ret_val != 0) {
      
#line 1277 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_check_for_link_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Error configuring flow control\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1277U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1277 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1277 
        tmp = igb_get_hw_dev(hw);
        
#line 1277 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Error configuring flow control\n");
      }
      else ;
    }
    else ;
  }
  else 
#line 1279 
       ret_val = igb_check_for_copper_link(hw);
  
#line 1282 
  return ret_val;
}


#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_power_up_serdes_link_82575(struct e1000_hw *hw)
{
  u32 reg;
  
#line 1294 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_internal_serdes) {
    int tmp_0;
    bool tmp;
    
#line 1295 
    tmp = igb_sgmii_active_82575(hw);
    
#line 1295 
    if (tmp) 
#line 1295 
             tmp_0 = 0; else 
#line 1295 
                             tmp_0 = 1;
    
#line 1295 
    if (tmp_0) 
#line 1296 
               goto return_label; else ;
  }
  else ;
  
#line 1299 
  reg = igb_rd32(hw,16896U);
  
#line 1300 
  reg |= 8U;
  {
    u8 * volatile *tmp_1;
    {
      
#line 1301 
      u8 *__var = (u8 *)0U;
      
#line 1301 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1301 
    u8 *hw_addr = *tmp_1;
    
#line 1301 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1301 
                                           writel(reg,(void volatile *)(hw_addr + 16896U)); else ;
  }
  
#line 1304 
  reg = igb_rd32(hw,24U);
  
#line 1305 
  reg &= 4294967167U;
  {
    u8 * volatile *tmp_2;
    {
      
#line 1306 
      u8 *__var_0 = (u8 *)0U;
      
#line 1306 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1306 
    u8 *hw_addr_0 = *tmp_2;
    
#line 1306 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1306 
                                             writel(reg,(void volatile *)(hw_addr_0 + 24U)); else ;
  }
  
#line 1309 
  igb_rd32(hw,8U);
  
#line 1310 
  usleep_range(1000UL,2000UL);
  return_label: 
#line 1311 
                return;
}


#line 1322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_pcs_speed_and_duplex_82575(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  s32 __retres;
  u32 pcs;
  u32 status;
  
#line 1325 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1329 
  mac->serdes_has_link = (_Bool)0;
  
#line 1330 
  *speed = (unsigned short)0U;
  
#line 1331 
  *duplex = (unsigned short)0U;
  
#line 1337 
  pcs = igb_rd32(hw,16908U);
  
#line 1343 
  if ((pcs & 1U) != 0U && (pcs & 16U) != 0U) {
    
#line 1344 
    mac->serdes_has_link = (_Bool)1;
    
#line 1347 
    if ((pcs & 4U) != 0U) 
#line 1348 
                          *speed = (unsigned short)1000U;
    else 
      
#line 1349 
      if ((pcs & 2U) != 0U) 
#line 1350 
                            *speed = (unsigned short)100U; else 
#line 1352 
                                                                *speed = (unsigned short)10U;
    
#line 1355 
    if ((pcs & 8U) != 0U) 
#line 1356 
                          *duplex = (unsigned short)2U; else 
#line 1358 
                                                             *duplex = (unsigned short)1U;
    
#line 1361 
    if (mac->type == (unsigned int)e1000_i354) {
      
#line 1362 
      status = igb_rd32(hw,8U);
      
#line 1363 
      if ((status & 4096U) != 0U && (status & 8192U) == 0U) {
        
#line 1365 
        *speed = (unsigned short)2500U;
        
#line 1366 
        *duplex = (unsigned short)2U;
        {
          
#line 1367 
          struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_pcs_speed_and_duplex_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "2500 Mbs, ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1367U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1367 
          if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
            struct net_device *tmp;
            
#line 1367 
            tmp = igb_get_hw_dev(hw);
            
#line 1367 
            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"2500 Mbs, ");
          }
          else ;
        }
        {
          
#line 1368 
          struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_get_pcs_speed_and_duplex_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Full Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1368U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1368 
          if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
            struct net_device *tmp_0;
            
#line 1368 
            tmp_0 = igb_get_hw_dev(hw);
            
#line 1368 
            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Full Duplex\n");
          }
          else ;
        }
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1374 
  __retres = 0;
  
#line 1374 
  return __retres;
}


#line 1384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_shutdown_serdes_link_82575(struct e1000_hw *hw)
{
  u32 reg;
  int tmp_3;
  bool tmp_2;
  
#line 1388 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_internal_serdes) {
    bool tmp;
    
#line 1388 
    tmp = igb_sgmii_active_82575(hw);
    
#line 1388 
    if ((int)tmp != 0) 
#line 1390 
                       goto return_label; else ;
  }
  else ;
  
#line 1392 
  tmp_2 = igb_enable_mng_pass_thru(hw);
  
#line 1392 
  if (tmp_2) 
#line 1392 
             tmp_3 = 0; else 
#line 1392 
                             tmp_3 = 1;
  
#line 1392 
  if (tmp_3) {
    
#line 1394 
    reg = igb_rd32(hw,16896U);
    
#line 1395 
    reg &= 4294967287U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 1396 
        u8 *__var = (u8 *)0U;
        
#line 1396 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1396 
      u8 *hw_addr = *tmp_0;
      
#line 1396 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1396 
                                             writel(reg,(void volatile *)(hw_addr + 16896U)); else ;
    }
    
#line 1399 
    reg = igb_rd32(hw,24U);
    
#line 1400 
    reg |= 128U;
    {
      u8 * volatile *tmp_1;
      {
        
#line 1401 
        u8 *__var_0 = (u8 *)0U;
        
#line 1401 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1401 
      u8 *hw_addr_0 = *tmp_1;
      
#line 1401 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1401 
                                               writel(reg,(void volatile *)(hw_addr_0 + 24U)); else ;
    }
    
#line 1404 
    igb_rd32(hw,8U);
    
#line 1405 
    usleep_range(1000UL,2000UL);
  }
  else ;
  return_label: 
#line 1407 
                return;
}


#line 1416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_reset_hw_82575(struct e1000_hw *hw)
{
  u32 ctrl;
  s32 ret_val;
  u32 tmp_8;
  
#line 1424 
  ret_val = igb_disable_pcie_master(hw);
  
#line 1425 
  if (ret_val != 0) {
    
#line 1426 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_reset_hw_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "PCI-E Master disable polling has failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1426U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1426 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 1426 
      tmp = igb_get_hw_dev(hw);
      
#line 1426 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"PCI-E Master disable polling has failed.\n");
    }
    else ;
  }
  else ;
  
#line 1429 
  ret_val = igb_set_pcie_completion_timeout(hw);
  
#line 1430 
  if (ret_val != 0) {
    
#line 1431 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_reset_hw_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "PCI-E Set completion timeout has failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1431U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1431 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_0;
      
#line 1431 
      tmp_0 = igb_get_hw_dev(hw);
      
#line 1431 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"PCI-E Set completion timeout has failed.\n");
    }
    else ;
  }
  else ;
  {
    
#line 1433 
    struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_reset_hw_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Masking off all interrupts\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1433U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1433 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
      struct net_device *tmp_1;
      
#line 1433 
      tmp_1 = igb_get_hw_dev(hw);
      
#line 1433 
      __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Masking off all interrupts\n");
    }
    else ;
  }
  {
    u8 * volatile *tmp_2;
    {
      
#line 1434 
      u8 *__var = (u8 *)0U;
      
#line 1434 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1434 
    u8 *hw_addr = *tmp_2;
    
#line 1434 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1434 
                                           writel(4294967295U,(void volatile *)(hw_addr + 216U)); else ;
  }
  {
    u8 * volatile *tmp_3;
    {
      
#line 1436 
      u8 *__var_0 = (u8 *)0U;
      
#line 1436 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1436 
    u8 *hw_addr_0 = *tmp_3;
    
#line 1436 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1436 
                                             writel(0U,(void volatile *)(hw_addr_0 + 256U)); else ;
  }
  {
    u8 * volatile *tmp_4;
    {
      
#line 1437 
      u8 *__var_1 = (u8 *)0U;
      
#line 1437 
      tmp_4 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1437 
    u8 *hw_addr_1 = *tmp_4;
    
#line 1437 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1437 
                                             writel(8U,(void volatile *)(hw_addr_1 + 1024U)); else ;
  }
  
#line 1438 
  igb_rd32(hw,8U);
  
#line 1440 
  usleep_range(10000UL,20000UL);
  
#line 1442 
  ctrl = igb_rd32(hw,0U);
  {
    
#line 1444 
    struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_reset_hw_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Issuing a global reset to MAC\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1444U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1444 
    if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
      struct net_device *tmp_5;
      
#line 1444 
      tmp_5 = igb_get_hw_dev(hw);
      
#line 1444 
      __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_5,"Issuing a global reset to MAC\n");
    }
    else ;
  }
  {
    u8 * volatile *tmp_6;
    {
      
#line 1445 
      u8 *__var_2 = (u8 *)0U;
      
#line 1445 
      tmp_6 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1445 
    u8 *hw_addr_2 = *tmp_6;
    
#line 1445 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1445 
                                             writel(ctrl | 67108864U,(void volatile *)hw_addr_2); else ;
  }
  
#line 1447 
  ret_val = igb_get_auto_rd_done(hw);
  
#line 1448 
  if (ret_val != 0) {
    
#line 1453 
    struct _ddebug descriptor_3 = {.modname = "igb", .function = "igb_reset_hw_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Auto Read Done did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1453U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1453 
    if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) {
      struct net_device *tmp_7;
      
#line 1453 
      tmp_7 = igb_get_hw_dev(hw);
      
#line 1453 
      __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)tmp_7,"Auto Read Done did not complete\n");
    }
    else ;
  }
  else ;
  
#line 1457 
  tmp_8 = igb_rd32(hw,16U);
  
#line 1457 
  if ((tmp_8 & 256U) == 0U) 
#line 1458 
                            igb_reset_init_script_82575(hw); else ;
  {
    u8 * volatile *tmp_9;
    {
      
#line 1461 
      u8 *__var_3 = (u8 *)0U;
      
#line 1461 
      tmp_9 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1461 
    u8 *hw_addr_3 = *tmp_9;
    
#line 1461 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1461 
                                             writel(4294967295U,(void volatile *)(hw_addr_3 + 216U)); else ;
  }
  
#line 1462 
  igb_rd32(hw,192U);
  
#line 1465 
  ret_val = igb_check_alt_mac_addr(hw);
  
#line 1467 
  return ret_val;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_hw_82575(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 i;
  
#line 1478 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1480 
  u16 rar_count = mac->rar_entry_count;
  
#line 1482 
  if (hw->mac.type > (unsigned int)e1000_i354) {
    int tmp_0;
    bool tmp;
    
#line 1483 
    tmp = igb_get_flash_presence_i210(hw);
    
#line 1483 
    if (tmp) 
#line 1483 
             tmp_0 = 0; else 
#line 1483 
                             tmp_0 = 1;
    
#line 1483 
    if (tmp_0) {
      
#line 1484 
      ret_val = igb_pll_workaround_i210(hw);
      
#line 1485 
      if (ret_val != 0) {
        
#line 1486 
        __retres = ret_val;
        
#line 1486 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1490 
  ret_val = igb_id_led_init(hw);
  
#line 1491 
  if (ret_val != 0) {
    
#line 1492 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_init_hw_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Error initializing identification LED\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1492U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1492 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp_1;
      
#line 1492 
      tmp_1 = igb_get_hw_dev(hw);
      
#line 1492 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_1,"Error initializing identification LED\n");
    }
    else ;
  }
  else ;
  {
    
#line 1497 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_init_hw_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Initializing the IEEE VLAN\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1497U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1497 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_2;
      
#line 1497 
      tmp_2 = igb_get_hw_dev(hw);
      
#line 1497 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_2,"Initializing the IEEE VLAN\n");
    }
    else ;
  }
  
#line 1498 
  if ((unsigned int)hw->mac.type + 4294967292U <= 1U) 
#line 1499 
                                                      igb_clear_vfta_i350(hw); else 
                                                                    
#line 1501 
                                                                    igb_clear_vfta(hw);
  
#line 1504 
  igb_init_rx_addrs(hw,(unsigned short)((int)rar_count));
  {
    
#line 1507 
    struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_init_hw_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Zeroing the MTA\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1507U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1507 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
      struct net_device *tmp_3;
      
#line 1507 
      tmp_3 = igb_get_hw_dev(hw);
      
#line 1507 
      __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_3,"Zeroing the MTA\n");
    }
    else ;
  }
  
#line 1508 
  i = (unsigned short)0U;
  
#line 1508 
  goto ldv_44883;
  ldv_44882: 
#line 1509 
  ;
  {
    u8 * volatile *tmp_4;
    {
      
#line 1509 
      u8 *__var = (u8 *)0U;
      
#line 1509 
      tmp_4 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1509 
    u8 *hw_addr = *tmp_4;
    
#line 1509 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1509 
                                           writel(0U,(void volatile *)(hw_addr + (((int)i << 2) + 20992))); else ;
  }
  
#line 1508 
  i = (u16)((int)i + 1);
  ldv_44883: 
#line 1509 
  ;
  
#line 1508 
  if ((int)mac->mta_reg_count > (int)i) 
#line 1510 
                                        goto ldv_44882; else 
#line 1513 
                                                             goto ldv_44884;
  ldv_44884: 
#line 1514 
  ;
  {
    
#line 1512 
    struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_init_hw_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Zeroing the UTA\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1512U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1512 
    if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
      struct net_device *tmp_5;
      
#line 1512 
      tmp_5 = igb_get_hw_dev(hw);
      
#line 1512 
      __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_5,"Zeroing the UTA\n");
    }
    else ;
  }
  
#line 1513 
  i = (unsigned short)0U;
  
#line 1513 
  goto ldv_44890;
  ldv_44889: 
#line 1514 
  ;
  {
    u8 * volatile *tmp_6;
    {
      
#line 1514 
      u8 *__var_0 = (u8 *)0U;
      
#line 1514 
      tmp_6 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1514 
    u8 *hw_addr_0 = *tmp_6;
    
#line 1514 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1514 
                                             writel(0U,(void volatile *)(hw_addr_0 + (((int)i << 2) + 40960))); else ;
  }
  
#line 1513 
  i = (u16)((int)i + 1);
  ldv_44890: 
#line 1514 
  ;
  
#line 1513 
  if ((int)mac->uta_reg_count > (int)i) 
#line 1515 
                                        goto ldv_44889; else 
#line 1518 
                                                             goto ldv_44891;
  ldv_44891: 
#line 1519 
  ;
  
#line 1517 
  ret_val = igb_setup_link(hw);
  
#line 1524 
  igb_clear_hw_cntrs_82575(hw);
  
#line 1525 
  __retres = ret_val;
  return_label: 
#line 1525 
                return __retres;
}


#line 1536  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_setup_copper_link_82575(struct e1000_hw *hw)
{
  u32 ctrl;
  s32 ret_val;
  u32 phpm_reg;
  bool tmp_2;
  
#line 1542 
  ctrl = igb_rd32(hw,0U);
  
#line 1543 
  ctrl |= 64U;
  
#line 1544 
  ctrl &= 4294961151U;
  {
    u8 * volatile *tmp;
    {
      
#line 1545 
      u8 *__var = (u8 *)0U;
      
#line 1545 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1545 
    u8 *hw_addr = *tmp;
    
#line 1545 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1545 
                                           writel(ctrl,(void volatile *)hw_addr); else ;
  }
  
#line 1548 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 1549 
    ;
    case (unsigned int)4: 
#line 1550 
    ;
    case (unsigned int)6: 
#line 1551 
    ;
    case (unsigned int)7: 
#line 1552 
    ;
    
#line 1553 
    phpm_reg = igb_rd32(hw,3604U);
    
#line 1554 
    phpm_reg &= 4294967263U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 1555 
        u8 *__var_0 = (u8 *)0U;
        
#line 1555 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1555 
      u8 *hw_addr_0 = *tmp_0;
      
#line 1555 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1555 
                                               writel(phpm_reg,(void volatile *)(hw_addr_0 + 3604U)); else ;
    }
    
#line 1556 
    goto ldv_44908;
    default: 
#line 1557 
    ;
    
#line 1558 
    goto ldv_44908;
  }
  ldv_44908: 
#line 1561 
  ;
  
#line 1561 
  ret_val = igb_setup_serdes_link_82575(hw);
  
#line 1562 
  if (ret_val != 0) 
#line 1563 
                    goto out; else ;
  
#line 1565 
  tmp_2 = igb_sgmii_active_82575(hw);
  
#line 1565 
  if ((int)tmp_2 != 0) {
    
#line 1565 
    if (! hw->phy.reset_disable) {
      
#line 1567 
      msleep(300U);
      
#line 1569 
      ret_val = (*(hw->phy.ops.reset))(hw);
      
#line 1570 
      if (ret_val != 0) {
        {
          
#line 1571 
          struct _ddebug descriptor = {.modname = "igb", .function = "igb_setup_copper_link_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Error resetting the PHY.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1571U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1571 
          if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
            struct net_device *tmp_1;
            
#line 1571 
            tmp_1 = igb_get_hw_dev(hw);
            
#line 1571 
            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_1,"Error resetting the PHY.\n");
          }
          else ;
        }
        
#line 1572 
        goto out;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1575 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)9: 
#line 1576 
    ;
    case (unsigned int)2: 
#line 1577 
    ;
    
#line 1578 
    switch (hw->phy.id) {
      case (u32)21040576: 
#line 1579 
      ;
      case (u32)21040272: 
#line 1580 
      ;
      case (u32)21040800: 
#line 1581 
      ;
      case (u32)21040128: 
#line 1582 
      ;
      
#line 1583 
      ret_val = igb_copper_link_setup_m88_gen2(hw);
      
#line 1584 
      goto ldv_44919;
      default: 
#line 1585 
      ;
      
#line 1586 
      ret_val = igb_copper_link_setup_m88(hw);
      
#line 1587 
      goto ldv_44919;
    }
    ldv_44919: 
#line 1589 
    ;
    
#line 1589 
    goto ldv_44921;
    case (unsigned int)6: 
#line 1590 
    ;
    
#line 1591 
    ret_val = igb_copper_link_setup_igp(hw);
    
#line 1592 
    goto ldv_44921;
    case (unsigned int)8: 
#line 1593 
    ;
    
#line 1594 
    ret_val = igb_copper_link_setup_82580(hw);
    
#line 1595 
    goto ldv_44921;
    default: 
#line 1596 
    ;
    
#line 1597 
    ret_val = -2;
    
#line 1598 
    goto ldv_44921;
  }
  ldv_44921: 
#line 1601 
  ;
  
#line 1601 
  if (ret_val != 0) 
#line 1602 
                    goto out; else ;
  
#line 1604 
  ret_val = igb_setup_copper_link(hw);
  out: 
#line 1605 
  ;
  
#line 1606 
  return ret_val;
}


#line 1618  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_setup_serdes_link_82575(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl_ext;
  u32 ctrl_reg;
  u32 reg;
  u32 anadv_reg;
  bool pcs_autoneg;
  u16 data;
  
#line 1622 
  s32 ret_val = 0;
  
#line 1625 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_internal_serdes) {
    int tmp_0;
    bool tmp;
    
#line 1626 
    tmp = igb_sgmii_active_82575(hw);
    
#line 1626 
    if (tmp) 
#line 1626 
             tmp_0 = 0; else 
#line 1626 
                             tmp_0 = 1;
    
#line 1626 
    if (tmp_0) {
      
#line 1627 
      __retres = ret_val;
      
#line 1627 
      goto return_label;
    }
    else ;
  }
  else ;
  {
    u8 * volatile *tmp_1;
    {
      
#line 1635 
      u8 *__var = (u8 *)0U;
      
#line 1635 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1635 
    u8 *hw_addr = *tmp_1;
    
#line 1635 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1635 
                                           writel(1024U,(void volatile *)(hw_addr + 36U)); else ;
  }
  
#line 1638 
  ctrl_ext = igb_rd32(hw,24U);
  
#line 1639 
  ctrl_ext &= 4294967167U;
  
#line 1640 
  ctrl_ext |= 33554432U;
  {
    u8 * volatile *tmp_2;
    {
      
#line 1641 
      u8 *__var_0 = (u8 *)0U;
      
#line 1641 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1641 
    u8 *hw_addr_0 = *tmp_2;
    
#line 1641 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1641 
                                             writel(ctrl_ext,(void volatile *)(hw_addr_0 + 24U)); else ;
  }
  
#line 1643 
  ctrl_reg = igb_rd32(hw,0U);
  
#line 1644 
  ctrl_reg |= 64U;
  
#line 1646 
  if ((unsigned int)hw->mac.type + 4294967295U <= 1U) {
    
#line 1648 
    ctrl_reg |= 786432U;
    
#line 1651 
    reg = igb_rd32(hw,52U);
    
#line 1652 
    reg |= 4U;
    {
      u8 * volatile *tmp_3;
      {
        
#line 1653 
        u8 *__var_1 = (u8 *)0U;
        
#line 1653 
        tmp_3 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1653 
      u8 *hw_addr_1 = *tmp_3;
      
#line 1653 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1653 
                                               writel(reg,(void volatile *)(hw_addr_1 + 52U)); else ;
    }
  }
  else ;
  
#line 1656 
  reg = igb_rd32(hw,16904U);
  
#line 1659 
  pcs_autoneg = hw->mac.autoneg;
  
#line 1661 
  switch (ctrl_ext & 12582912U) {
    case (unsigned int)8388608: 
#line 1662 
    ;
    
#line 1664 
    pcs_autoneg = (_Bool)1;
    
#line 1666 
    reg &= 4294705151U;
    
#line 1667 
    goto ldv_44945;
    case (unsigned int)4194304: 
#line 1668 
    ;
    
#line 1670 
    pcs_autoneg = (_Bool)0;
    default: 
#line 1671 
    ;
    
#line 1672 
    if ((unsigned int)hw->mac.type + 4294967295U <= 1U) {
      
#line 1674 
      ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)3,(unsigned short)1,& data);
      
#line 1675 
      if (ret_val != 0) {
        {
          
#line 1676 
          struct _ddebug descriptor = {.modname = "igb", .function = "igb_setup_serdes_link_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "\001", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1676U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1676 
          if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
            struct net_device *tmp_4;
            
#line 1676 
            tmp_4 = igb_get_hw_dev(hw);
            
#line 1676 
            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_4,"\001");
          }
          else ;
        }
        
#line 1677 
        __retres = ret_val;
        
#line 1677 
        goto return_label;
      }
      else ;
      
#line 1680 
      if (((int)data & 16384) != 0) 
#line 1681 
                                    pcs_autoneg = (_Bool)0; else ;
    }
    else ;
    
#line 1688 
    ctrl_reg |= 6657U;
    
#line 1692 
    reg |= 12U;
    
#line 1693 
    goto ldv_44945;
  }
  ldv_44945: 
#line 1696 
  ;
  {
    u8 * volatile *tmp_5;
    {
      
#line 1696 
      u8 *__var_2 = (u8 *)0U;
      
#line 1696 
      tmp_5 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1696 
    u8 *hw_addr_2 = *tmp_5;
    
#line 1696 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1696 
                                             writel(ctrl_reg,(void volatile *)hw_addr_2); else ;
  }
  
#line 1703 
  reg &= 4294901710U;
  
#line 1706 
  if ((int)pcs_autoneg != 0) {
    
#line 1708 
    reg |= 196608U;
    
#line 1712 
    reg &= 4294967167U;
    
#line 1715 
    anadv_reg = igb_rd32(hw,16920U);
    
#line 1716 
    anadv_reg &= 4294966911U;
    
#line 1717 
    switch ((unsigned int)hw->fc.requested_mode) {
      case (unsigned int)3: 
#line 1718 
      ;
      case (unsigned int)1: 
#line 1719 
      ;
      
#line 1720 
      anadv_reg |= 256U;
      
#line 1721 
      anadv_reg |= 128U;
      
#line 1722 
      goto ldv_44955;
      case (unsigned int)2: 
#line 1723 
      ;
      
#line 1724 
      anadv_reg |= 256U;
      
#line 1725 
      goto ldv_44955;
      default: 
#line 1726 
      ;
      
#line 1727 
      goto ldv_44955;
    }
    ldv_44955: 
#line 1729 
    ;
    {
      u8 * volatile *tmp_6;
      {
        
#line 1729 
        u8 *__var_3 = (u8 *)0U;
        
#line 1729 
        tmp_6 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1729 
      u8 *hw_addr_3 = *tmp_6;
      
#line 1729 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1729 
                                               writel(anadv_reg,(void volatile *)(hw_addr_3 + 16920U)); else ;
    }
    {
      
#line 1731 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_setup_serdes_link_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Configuring Autoneg:PCS_LCTL=0x%08X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1731U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1731 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_7;
        
#line 1731 
        ;
        
#line 1731 
        tmp_7 = igb_get_hw_dev(hw);
        
#line 1731 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_7,"Configuring Autoneg:PCS_LCTL=0x%08X\n",reg);
      }
      else ;
    }
  }
  else {
    
#line 1734 
    reg |= 16U;
    
#line 1737 
    reg |= 128U;
    {
      
#line 1739 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_setup_serdes_link_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Configuring Forced Link:PCS_LCTL=0x%08X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1739U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1739 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_8;
        
#line 1739 
        ;
        
#line 1739 
        tmp_8 = igb_get_hw_dev(hw);
        
#line 1739 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_8,"Configuring Forced Link:PCS_LCTL=0x%08X\n",reg);
      }
      else ;
    }
  }
  {
    u8 * volatile *tmp_9;
    {
      
#line 1742 
      u8 *__var_4 = (u8 *)0U;
      
#line 1742 
      tmp_9 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1742 
    u8 *hw_addr_4 = *tmp_9;
    
#line 1742 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 1742 
                                             writel(reg,(void volatile *)(hw_addr_4 + 16904U)); else ;
  }
  
#line 1744 
  if (! pcs_autoneg) {
    int tmp_11;
    bool tmp_10;
    
#line 1744 
    tmp_10 = igb_sgmii_active_82575(hw);
    
#line 1744 
    if (tmp_10) 
#line 1744 
                tmp_11 = 0; else 
#line 1744 
                                 tmp_11 = 1;
    
#line 1744 
    if (tmp_11) 
#line 1745 
                igb_force_mac_fc(hw); else ;
  }
  else ;
  
#line 1747 
  __retres = ret_val;
  return_label: 
#line 1747 
                return __retres;
}


#line 1758  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static bool igb_sgmii_active_82575(struct e1000_hw *hw)
{
  bool __retres;
  
#line 1760 
  struct e1000_dev_spec_82575 *dev_spec = & hw->dev_spec._82575;
  
#line 1761 
  __retres = dev_spec->sgmii_active;
  
#line 1761 
  return __retres;
}


#line 1771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_reset_init_script_82575(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 1773 
  if (hw->mac.type == (unsigned int)e1000_82575) {
    {
      
#line 1774 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_reset_init_script_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Running reset init script for 82575\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1774U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1774 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1774 
        tmp = igb_get_hw_dev(hw);
        
#line 1774 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Running reset init script for 82575\n");
      }
      else ;
    }
    
#line 1776 
    igb_write_8bit_ctrl_reg(hw,36U,0U,(unsigned char)12);
    
#line 1777 
    igb_write_8bit_ctrl_reg(hw,36U,1U,(unsigned char)120);
    
#line 1778 
    igb_write_8bit_ctrl_reg(hw,36U,27U,(unsigned char)35);
    
#line 1779 
    igb_write_8bit_ctrl_reg(hw,36U,35U,(unsigned char)21);
    
#line 1782 
    igb_write_8bit_ctrl_reg(hw,23368U,20U,(unsigned char)0);
    
#line 1783 
    igb_write_8bit_ctrl_reg(hw,23368U,16U,(unsigned char)0);
    
#line 1786 
    igb_write_8bit_ctrl_reg(hw,23364U,0U,(unsigned char)236);
    
#line 1787 
    igb_write_8bit_ctrl_reg(hw,23364U,97U,(unsigned char)223);
    
#line 1788 
    igb_write_8bit_ctrl_reg(hw,23364U,52U,(unsigned char)5);
    
#line 1789 
    igb_write_8bit_ctrl_reg(hw,23364U,47U,(unsigned char)129);
    
#line 1792 
    igb_write_8bit_ctrl_reg(hw,23372U,2U,(unsigned char)71);
    
#line 1793 
    igb_write_8bit_ctrl_reg(hw,23372U,20U,(unsigned char)0);
    
#line 1794 
    igb_write_8bit_ctrl_reg(hw,23372U,16U,(unsigned char)0);
  }
  else ;
  
#line 1797 
  __retres = 0;
  
#line 1797 
  return __retres;
}


#line 1804  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_read_mac_addr_82575(struct e1000_hw *hw)
{
  
#line 1806 
  s32 ret_val = 0;
  
#line 1812 
  ret_val = igb_check_alt_mac_addr(hw);
  
#line 1813 
  if (ret_val != 0) 
#line 1814 
                    goto out; else ;
  
#line 1816 
  ret_val = igb_read_mac_addr(hw);
  out: 
#line 1818 
  ;
  
#line 1819 
  return ret_val;
}


#line 1829  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_power_down_phy_copper_82575(struct e1000_hw *hw)
{
  int tmp_0;
  bool tmp;
  
#line 1832 
  tmp = igb_enable_mng_pass_thru(hw);
  
#line 1832 
  if (tmp) 
#line 1832 
           tmp_0 = 0; else 
#line 1832 
                           tmp_0 = 1;
  
#line 1832 
  if (tmp_0) {
    s32 tmp_1;
    
#line 1832 
    tmp_1 = igb_check_reset_block(hw);
    
#line 1832 
    if (tmp_1 == 0) 
#line 1833 
                    igb_power_down_phy_copper(hw); else ;
  }
  else ;
  
#line 1834 
  return;
}


#line 1842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static void igb_clear_hw_cntrs_82575(struct e1000_hw *hw)
{
  
#line 1844 
  igb_clear_hw_cntrs_base(hw);
  
#line 1846 
  igb_rd32(hw,16476U);
  
#line 1847 
  igb_rd32(hw,16480U);
  
#line 1848 
  igb_rd32(hw,16484U);
  
#line 1849 
  igb_rd32(hw,16488U);
  
#line 1850 
  igb_rd32(hw,16492U);
  
#line 1851 
  igb_rd32(hw,16496U);
  
#line 1852 
  igb_rd32(hw,16600U);
  
#line 1853 
  igb_rd32(hw,16604U);
  
#line 1854 
  igb_rd32(hw,16608U);
  
#line 1855 
  igb_rd32(hw,16612U);
  
#line 1856 
  igb_rd32(hw,16616U);
  
#line 1857 
  igb_rd32(hw,16620U);
  
#line 1859 
  igb_rd32(hw,16388U);
  
#line 1860 
  igb_rd32(hw,16396U);
  
#line 1861 
  igb_rd32(hw,16436U);
  
#line 1862 
  igb_rd32(hw,16444U);
  
#line 1863 
  igb_rd32(hw,16632U);
  
#line 1864 
  igb_rd32(hw,16636U);
  
#line 1866 
  igb_rd32(hw,16564U);
  
#line 1867 
  igb_rd32(hw,16568U);
  
#line 1868 
  igb_rd32(hw,16572U);
  
#line 1870 
  igb_rd32(hw,16640U);
  
#line 1871 
  igb_rd32(hw,16676U);
  
#line 1873 
  igb_rd32(hw,16644U);
  
#line 1874 
  igb_rd32(hw,16648U);
  
#line 1875 
  igb_rd32(hw,16652U);
  
#line 1876 
  igb_rd32(hw,16656U);
  
#line 1877 
  igb_rd32(hw,16664U);
  
#line 1878 
  igb_rd32(hw,16668U);
  
#line 1879 
  igb_rd32(hw,16672U);
  
#line 1881 
  igb_rd32(hw,16428U);
  
#line 1882 
  igb_rd32(hw,16444U);
  
#line 1883 
  igb_rd32(hw,16636U);
  
#line 1884 
  igb_rd32(hw,16644U);
  
#line 1885 
  igb_rd32(hw,16664U);
  
#line 1886 
  igb_rd32(hw,16676U);
  
#line 1887 
  igb_rd32(hw,16680U);
  
#line 1888 
  igb_rd32(hw,16684U);
  
#line 1889 
  igb_rd32(hw,16688U);
  
#line 1890 
  igb_rd32(hw,16692U);
  
#line 1891 
  igb_rd32(hw,16696U);
  
#line 1894 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) 
    
#line 1896 
    igb_rd32(hw,16936U);
  else {
    bool tmp;
    
#line 1894 
    tmp = igb_sgmii_active_82575(hw);
    
#line 1894 
    if ((int)tmp != 0) 
#line 1896 
                       igb_rd32(hw,16936U); else ;
  }
  
#line 1897 
  return;
}


#line 1908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_rx_fifo_flush_82575(struct e1000_hw *hw)
{
  u32 rctl;
  u32 rlpml;
  u32 rxdctl[4U];
  u32 rfctl;
  u32 temp_rctl;
  u32 rx_enabled;
  int i;
  int ms_wait;
  int tmp_1;
  u32 tmp_5;
  int tmp_4;
  
#line 1914 
  rfctl = igb_rd32(hw,20488U);
  
#line 1915 
  rfctl |= 65536U;
  {
    u8 * volatile *tmp;
    {
      
#line 1916 
      u8 *__var = (u8 *)0U;
      
#line 1916 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1916 
    u8 *hw_addr = *tmp;
    
#line 1916 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1916 
                                           writel(rfctl,(void volatile *)(hw_addr + 20488U)); else ;
  }
  
#line 1918 
  if (hw->mac.type != (unsigned int)e1000_82575) 
#line 1920 
                                                 goto return_label;
  else {
    u32 tmp_0;
    
#line 1918 
    tmp_0 = igb_rd32(hw,22560U);
    
#line 1918 
    if ((tmp_0 & 131072U) == 0U) 
#line 1920 
                                 goto return_label; else ;
  }
  
#line 1923 
  i = 0;
  
#line 1923 
  goto ldv_45004;
  ldv_45003: 
#line 1924 
  ;
  
#line 1924 
  if (i <= 3) 
#line 1924 
              tmp_1 = i * 256 + 10280; else 
#line 1924 
                                            tmp_1 = i * 64 + 49192;
  
#line 1924 
  ;
  
#line 1924 
  rxdctl[i] = igb_rd32(hw,(unsigned int)tmp_1);
  {
    u8 * volatile *tmp_2;
    {
      
#line 1925 
      u8 *__var_0 = (u8 *)0U;
      
#line 1925 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1925 
    u8 *hw_addr_0 = *tmp_2;
    
#line 1925 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      int tmp_3;
      
#line 1925 
      if (i <= 3) 
#line 1925 
                  tmp_3 = i * 256 + 10280; else 
#line 1925 
                                                tmp_3 = i * 64 + 49192;
      
#line 1925 
      ;
      
#line 1925 
      ;
      
#line 1925 
      writel(rxdctl[i] & 4261412863U,(void volatile *)(hw_addr_0 + tmp_3));
    }
    else ;
  }
  
#line 1923 
  i += 1;
  ldv_45004: 
#line 1924 
  ;
  
#line 1923 
  if (i <= 3) 
#line 1925 
              goto ldv_45003; else 
#line 1928 
                                   goto ldv_45005;
  ldv_45005: 
#line 1929 
  ;
  
#line 1929 
  ms_wait = 0;
  
#line 1929 
  goto ldv_45011;
  ldv_45010: 
#line 1930 
  ;
  
#line 1930 
  usleep_range(1000UL,2000UL);
  
#line 1931 
  rx_enabled = 0U;
  
#line 1932 
  i = 0;
  
#line 1932 
  goto ldv_45007;
  ldv_45006: 
#line 1933 
  ;
  
#line 1933 
  if (i <= 3) 
#line 1933 
              tmp_4 = i * 256 + 10280; else 
#line 1933 
                                            tmp_4 = i * 64 + 49192;
  
#line 1933 
  ;
  
#line 1933 
  tmp_5 = igb_rd32(hw,(unsigned int)tmp_4);
  
#line 1933 
  rx_enabled = tmp_5 | rx_enabled;
  
#line 1932 
  i += 1;
  ldv_45007: 
#line 1933 
  ;
  
#line 1932 
  if (i <= 3) 
#line 1934 
              goto ldv_45006; else 
#line 1937 
                                   goto ldv_45008;
  ldv_45008: 
#line 1938 
  ;
  
#line 1934 
  if ((rx_enabled & 33554432U) == 0U) 
#line 1935 
                                      goto ldv_45009; else ;
  
#line 1929 
  ms_wait += 1;
  ldv_45011: 
#line 1930 
  ;
  
#line 1929 
  if (ms_wait <= 9) 
#line 1931 
                    goto ldv_45010; else 
#line 1934 
                                         goto ldv_45009;
  ldv_45009: 
#line 1935 
  ;
  
#line 1938 
  if (ms_wait == 10) {
    
#line 1939 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_rx_fifo_flush_82575", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Queue disable timed out after 10ms\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1939U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1939 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp_6;
      
#line 1939 
      tmp_6 = igb_get_hw_dev(hw);
      
#line 1939 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_6,"Queue disable timed out after 10ms\n");
    }
    else ;
  }
  else ;
  {
    u8 * volatile *tmp_7;
    {
      
#line 1945 
      u8 *__var_1 = (u8 *)0U;
      
#line 1945 
      tmp_7 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1945 
    u8 *hw_addr_1 = *tmp_7;
    
#line 1945 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1945 
                                             writel(rfctl & 4294705151U,(void volatile *)(hw_addr_1 + 20488U)); else ;
  }
  
#line 1947 
  rlpml = igb_rd32(hw,20484U);
  {
    u8 * volatile *tmp_8;
    {
      
#line 1948 
      u8 *__var_2 = (u8 *)0U;
      
#line 1948 
      tmp_8 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1948 
    u8 *hw_addr_2 = *tmp_8;
    
#line 1948 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1948 
                                             writel(0U,(void volatile *)(hw_addr_2 + 20484U)); else ;
  }
  
#line 1950 
  rctl = igb_rd32(hw,256U);
  
#line 1951 
  temp_rctl = rctl & 4294967289U;
  
#line 1952 
  temp_rctl |= 32U;
  {
    u8 * volatile *tmp_9;
    {
      
#line 1954 
      u8 *__var_3 = (u8 *)0U;
      
#line 1954 
      tmp_9 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1954 
    u8 *hw_addr_3 = *tmp_9;
    
#line 1954 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1954 
                                             writel(temp_rctl,(void volatile *)(hw_addr_3 + 256U)); else ;
  }
  {
    u8 * volatile *tmp_10;
    {
      
#line 1955 
      u8 *__var_4 = (u8 *)0U;
      
#line 1955 
      tmp_10 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1955 
    u8 *hw_addr_4 = *tmp_10;
    
#line 1955 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 1955 
                                             writel(temp_rctl | 2U,(void volatile *)(hw_addr_4 + 256U)); else ;
  }
  
#line 1956 
  igb_rd32(hw,8U);
  
#line 1957 
  usleep_range(2000UL,3000UL);
  
#line 1962 
  i = 0;
  
#line 1962 
  goto ldv_45030;
  ldv_45029: 
#line 1963 
  ;
  {
    u8 * volatile *tmp_11;
    {
      
#line 1963 
      u8 *__var_5 = (u8 *)0U;
      
#line 1963 
      tmp_11 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1963 
    u8 *hw_addr_5 = *tmp_11;
    
#line 1963 
    if ((long)(hw_addr_5 == (u8 *)0U) == 0L) {
      int tmp_12;
      
#line 1963 
      if (i <= 3) 
#line 1963 
                  tmp_12 = i * 256 + 10280; else 
#line 1963 
                                                 tmp_12 = i * 64 + 49192;
      
#line 1963 
      ;
      
#line 1963 
      ;
      
#line 1963 
      writel(rxdctl[i],(void volatile *)(hw_addr_5 + tmp_12));
    }
    else ;
  }
  
#line 1962 
  i += 1;
  ldv_45030: 
#line 1963 
  ;
  
#line 1962 
  if (i <= 3) 
#line 1964 
              goto ldv_45029; else 
#line 1967 
                                   goto ldv_45031;
  ldv_45031: 
#line 1968 
  ;
  {
    u8 * volatile *tmp_13;
    {
      
#line 1964 
      u8 *__var_6 = (u8 *)0U;
      
#line 1964 
      tmp_13 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1964 
    u8 *hw_addr_6 = *tmp_13;
    
#line 1964 
    if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
#line 1964 
                                             writel(rctl,(void volatile *)(hw_addr_6 + 256U)); else ;
  }
  
#line 1965 
  igb_rd32(hw,8U);
  {
    u8 * volatile *tmp_14;
    {
      
#line 1967 
      u8 *__var_7 = (u8 *)0U;
      
#line 1967 
      tmp_14 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1967 
    u8 *hw_addr_7 = *tmp_14;
    
#line 1967 
    if ((long)(hw_addr_7 == (u8 *)0U) == 0L) 
#line 1967 
                                             writel(rlpml,(void volatile *)(hw_addr_7 + 20484U)); else ;
  }
  {
    u8 * volatile *tmp_15;
    {
      
#line 1968 
      u8 *__var_8 = (u8 *)0U;
      
#line 1968 
      tmp_15 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1968 
    u8 *hw_addr_8 = *tmp_15;
    
#line 1968 
    if ((long)(hw_addr_8 == (u8 *)0U) == 0L) 
#line 1968 
                                             writel(rfctl,(void volatile *)(hw_addr_8 + 20488U)); else ;
  }
  
#line 1971 
  igb_rd32(hw,16556U);
  
#line 1972 
  igb_rd32(hw,16544U);
  
#line 1973 
  igb_rd32(hw,16400U);
  return_label: 
#line 1974 
                return;
}


#line 1986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_set_pcie_completion_timeout(struct e1000_hw *hw)
{
  u16 pcie_devctl2;
  
#line 1988 
  u32 gcr = igb_rd32(hw,23296U);
  
#line 1989 
  s32 ret_val = 0;
  
#line 1993 
  if ((gcr & 61440U) != 0U) 
#line 1994 
                            goto out; else ;
  
#line 1999 
  if ((gcr & 262144U) == 0U) {
    
#line 2000 
    gcr |= 4096U;
    
#line 2001 
    goto out;
  }
  else ;
  
#line 2008 
  ret_val = igb_read_pcie_cap_reg(hw,40U,& pcie_devctl2);
  
#line 2010 
  if (ret_val != 0) 
#line 2011 
                    goto out; else ;
  
#line 2013 
  pcie_devctl2 = (unsigned short)((unsigned int)pcie_devctl2 | 5U);
  
#line 2015 
  ret_val = igb_write_pcie_cap_reg(hw,40U,& pcie_devctl2);
  out: 
#line 2017 
  ;
  
#line 2019 
  gcr &= 4294901759U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 2021 
      u8 *__var = (u8 *)0U;
      
#line 2021 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2021 
    u8 *hw_addr = *tmp_0;
    
#line 2021 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2021 
                                           writel(gcr,(void volatile *)(hw_addr + 23296U)); else ;
  }
  
#line 2022 
  return ret_val;
}


#line 2033  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_vmdq_set_anti_spoofing_pf(struct e1000_hw *hw, bool enable, int pf)
{
  u32 reg_val;
  u32 reg_offset;
  
#line 2037 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 2038 
    ;
    
#line 2039 
    reg_offset = 13568U;
    
#line 2040 
    goto ldv_45059;
    case (unsigned int)4: 
#line 2041 
    ;
    case (unsigned int)5: 
#line 2042 
    ;
    
#line 2043 
    reg_offset = 23244U;
    
#line 2044 
    goto ldv_45059;
    default: 
#line 2045 
    ;
    
#line 2046 
    goto return_label;
  }
  ldv_45059: 
#line 2049 
  ;
  
#line 2049 
  reg_val = igb_rd32(hw,reg_offset);
  
#line 2050 
  if ((int)enable != 0) {
    
#line 2051 
    reg_val |= 65535U;
    
#line 2056 
    reg_val = (unsigned int)((1 << pf) | (1 << (pf + 8))) ^ reg_val;
  }
  else 
#line 2058 
       reg_val &= 4294901760U;
  {
    u8 * volatile *tmp;
    {
      
#line 2061 
      u8 *__var = (u8 *)0U;
      
#line 2061 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2061 
    u8 *hw_addr = *tmp;
    
#line 2061 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2061 
                                           writel(reg_val,(void volatile *)(hw_addr + reg_offset)); else ;
  }
  return_label: 
#line 2063 
                return;
}


#line 2071  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_vmdq_set_loopback_pf(struct e1000_hw *hw, bool enable)
{
  u32 dtxswc;
  
#line 2075 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 2076 
    ;
    
#line 2077 
    dtxswc = igb_rd32(hw,13568U);
    
#line 2078 
    if ((int)enable != 0) 
#line 2079 
                          dtxswc |= 2147483648U; else 
#line 2081 
                                                      dtxswc &= 2147483647U;
    {
      u8 * volatile *tmp;
      {
        
#line 2082 
        u8 *__var = (u8 *)0U;
        
#line 2082 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 2082 
      u8 *hw_addr = *tmp;
      
#line 2082 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2082 
                                             writel(dtxswc,(void volatile *)(hw_addr + 13568U)); else ;
    }
    
#line 2083 
    goto ldv_45075;
    case (unsigned int)5: 
#line 2084 
    ;
    case (unsigned int)4: 
#line 2085 
    ;
    
#line 2086 
    dtxswc = igb_rd32(hw,23244U);
    
#line 2087 
    if ((int)enable != 0) 
#line 2088 
                          dtxswc |= 2147483648U; else 
#line 2090 
                                                      dtxswc &= 2147483647U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 2091 
        u8 *__var_0 = (u8 *)0U;
        
#line 2091 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 2091 
      u8 *hw_addr_0 = *tmp_0;
      
#line 2091 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 2091 
                                               writel(dtxswc,(void volatile *)(hw_addr_0 + 23244U)); else ;
    }
    
#line 2092 
    goto ldv_45075;
    default: 
#line 2093 
    ;
    
#line 2095 
    goto ldv_45075;
  }
  ldv_45075: 
#line 2098 
  ;
  
#line 2099 
  return;
}


#line 2107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
void igb_vmdq_set_replication_pf(struct e1000_hw *hw, bool enable)
{
  
#line 2109 
  u32 vt_ctl = igb_rd32(hw,22556U);
  
#line 2111 
  if ((int)enable != 0) 
#line 2112 
                        vt_ctl |= 1073741824U; else 
#line 2114 
                                                    vt_ctl &= 3221225471U;
  {
    u8 * volatile *tmp_0;
    {
      
#line 2116 
      u8 *__var = (u8 *)0U;
      
#line 2116 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2116 
    u8 *hw_addr = *tmp_0;
    
#line 2116 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2116 
                                           writel(vt_ctl,(void volatile *)(hw_addr + 22556U)); else ;
  }
  
#line 2118 
  return;
}


#line 2128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_read_phy_reg_82580(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 ret_val;
  
#line 2132 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2133 
  if (ret_val != 0) 
#line 2134 
                    goto out; else ;
  
#line 2136 
  ret_val = igb_read_phy_reg_mdic(hw,offset,data);
  
#line 2138 
  (*(hw->phy.ops.release))(hw);
  out: 
#line 2140 
  ;
  
#line 2141 
  return ret_val;
}


#line 2152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_write_phy_reg_82580(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 ret_val;
  
#line 2157 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2158 
  if (ret_val != 0) 
#line 2159 
                    goto out; else ;
  
#line 2161 
  ret_val = igb_write_phy_reg_mdic(hw,offset,(unsigned short)((int)data));
  
#line 2163 
  (*(hw->phy.ops.release))(hw);
  out: 
#line 2165 
  ;
  
#line 2166 
  return ret_val;
}


#line 2177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_reset_mdicnfg_82580(struct e1000_hw *hw)
{
  u32 mdicnfg;
  int tmp_0;
  bool tmp;
  unsigned int tmp_1;
  
#line 2179 
  s32 ret_val = 0;
  
#line 2181 
  u16 nvm_data = (unsigned short)0U;
  
#line 2183 
  if (hw->mac.type != (unsigned int)e1000_82580) 
#line 2184 
                                                 goto out; else ;
  
#line 2185 
  tmp = igb_sgmii_active_82575(hw);
  
#line 2185 
  if (tmp) 
#line 2185 
           tmp_0 = 0; else 
#line 2185 
                           tmp_0 = 1;
  
#line 2185 
  if (tmp_0) 
#line 2186 
             goto out; else ;
  
#line 2188 
  if ((unsigned int)hw->bus.func != 0U) 
#line 2188 
                                        tmp_1 = ((unsigned int)hw->bus.func + 1U) * 64U + 36U; else 
                                                                    
#line 2188 
                                                                    tmp_1 = 36U;
  
#line 2188 
  ;
  
#line 2188 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)tmp_1),(unsigned short)1,& nvm_data);
  
#line 2191 
  if (ret_val != 0) {
    {
      
#line 2192 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_reset_mdicnfg_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2192U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2192 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 2192 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 2192 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_2,"NVM Read Error\n");
      }
      else ;
    }
    
#line 2193 
    goto out;
  }
  else ;
  
#line 2196 
  mdicnfg = igb_rd32(hw,3588U);
  
#line 2197 
  if (((int)nvm_data & 4) != 0) 
#line 2198 
                                mdicnfg |= 2147483648U; else ;
  
#line 2199 
  if (((int)nvm_data & 8) != 0) 
#line 2200 
                                mdicnfg |= 1073741824U; else ;
  {
    u8 * volatile *tmp_3;
    {
      
#line 2201 
      u8 *__var = (u8 *)0U;
      
#line 2201 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2201 
    u8 *hw_addr = *tmp_3;
    
#line 2201 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2201 
                                           writel(mdicnfg,(void volatile *)(hw_addr + 3588U)); else ;
  }
  out: 
#line 2202 
  ;
  
#line 2203 
  return ret_val;
}


#line 2213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_reset_hw_82580(struct e1000_hw *hw)
{
  u32 ctrl;
  
#line 2215 
  s32 ret_val = 0;
  
#line 2217 
  u16 swmbsw_mask = (unsigned short)256U;
  
#line 2219 
  bool global_device_reset = hw->dev_spec._82575.global_device_reset;
  
#line 2221 
  hw->dev_spec._82575.global_device_reset = (_Bool)0;
  
#line 2226 
  if (hw->mac.type == (unsigned int)e1000_82580) 
#line 2227 
                                                 global_device_reset = (_Bool)0; else ;
  
#line 2230 
  ctrl = igb_rd32(hw,0U);
  
#line 2235 
  ret_val = igb_disable_pcie_master(hw);
  
#line 2236 
  if (ret_val != 0) {
    
#line 2237 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_reset_hw_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "PCI-E Master disable polling has failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2237U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2237 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 2237 
      tmp = igb_get_hw_dev(hw);
      
#line 2237 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"PCI-E Master disable polling has failed.\n");
    }
    else ;
  }
  else ;
  {
    
#line 2239 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_reset_hw_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Masking off all interrupts\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2239U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2239 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_0;
      
#line 2239 
      tmp_0 = igb_get_hw_dev(hw);
      
#line 2239 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Masking off all interrupts\n");
    }
    else ;
  }
  {
    u8 * volatile *tmp_1;
    {
      
#line 2240 
      u8 *__var = (u8 *)0U;
      
#line 2240 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2240 
    u8 *hw_addr = *tmp_1;
    
#line 2240 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2240 
                                           writel(4294967295U,(void volatile *)(hw_addr + 216U)); else ;
  }
  {
    u8 * volatile *tmp_2;
    {
      
#line 2241 
      u8 *__var_0 = (u8 *)0U;
      
#line 2241 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2241 
    u8 *hw_addr_0 = *tmp_2;
    
#line 2241 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 2241 
                                             writel(0U,(void volatile *)(hw_addr_0 + 256U)); else ;
  }
  {
    u8 * volatile *tmp_3;
    {
      
#line 2242 
      u8 *__var_1 = (u8 *)0U;
      
#line 2242 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2242 
    u8 *hw_addr_1 = *tmp_3;
    
#line 2242 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 2242 
                                             writel(8U,(void volatile *)(hw_addr_1 + 1024U)); else ;
  }
  
#line 2243 
  igb_rd32(hw,8U);
  
#line 2245 
  usleep_range(10000UL,11000UL);
  
#line 2248 
  if ((int)global_device_reset != 0) {
    s32 tmp_4;
    
#line 2248 
    tmp_4 = (*(hw->mac.ops.acquire_swfw_sync))(hw,(unsigned short)((int)swmbsw_mask));
    
#line 2248 
    if (tmp_4 != 0) 
#line 2250 
                    global_device_reset = (_Bool)0; else ;
  }
  else ;
  
#line 2252 
  if ((int)global_device_reset != 0) {
    u32 tmp_5;
    
#line 2252 
    tmp_5 = igb_rd32(hw,8U);
    
#line 2252 
    if ((tmp_5 & 1048576U) == 0U) 
#line 2254 
                                  ctrl |= 536870912U; else 
#line 2256 
                                                           ctrl |= 67108864U;
  }
  else 
#line 2256 
       ctrl |= 67108864U;
  {
    u8 * volatile *tmp_6;
    {
      
#line 2258 
      u8 *__var_2 = (u8 *)0U;
      
#line 2258 
      tmp_6 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2258 
    u8 *hw_addr_2 = *tmp_6;
    
#line 2258 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 2258 
                                             writel(ctrl,(void volatile *)hw_addr_2); else ;
  }
  
#line 2259 
  igb_rd32(hw,8U);
  
#line 2262 
  if ((int)global_device_reset != 0) 
#line 2263 
                                     usleep_range(5000UL,6000UL); else ;
  
#line 2265 
  ret_val = igb_get_auto_rd_done(hw);
  
#line 2266 
  if (ret_val != 0) {
    
#line 2271 
    struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_reset_hw_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Auto Read Done did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2271U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2271 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
      struct net_device *tmp_7;
      
#line 2271 
      tmp_7 = igb_get_hw_dev(hw);
      
#line 2271 
      __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_7,"Auto Read Done did not complete\n");
    }
    else ;
  }
  else ;
  {
    u8 * volatile *tmp_8;
    {
      
#line 2275 
      u8 *__var_3 = (u8 *)0U;
      
#line 2275 
      tmp_8 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2275 
    u8 *hw_addr_3 = *tmp_8;
    
#line 2275 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 2275 
                                             writel(1048576U,(void volatile *)(hw_addr_3 + 8U)); else ;
  }
  {
    u8 * volatile *tmp_9;
    {
      
#line 2278 
      u8 *__var_4 = (u8 *)0U;
      
#line 2278 
      tmp_9 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2278 
    u8 *hw_addr_4 = *tmp_9;
    
#line 2278 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 2278 
                                             writel(4294967295U,(void volatile *)(hw_addr_4 + 216U)); else ;
  }
  
#line 2279 
  igb_rd32(hw,192U);
  
#line 2281 
  ret_val = igb_reset_mdicnfg_82580(hw);
  
#line 2282 
  if (ret_val != 0) {
    
#line 2283 
    struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_reset_hw_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "Could not reset MDICNFG based on EEPROM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2283U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2283 
    if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
      struct net_device *tmp_10;
      
#line 2283 
      tmp_10 = igb_get_hw_dev(hw);
      
#line 2283 
      __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_10,"Could not reset MDICNFG based on EEPROM\n");
    }
    else ;
  }
  else ;
  
#line 2286 
  ret_val = igb_check_alt_mac_addr(hw);
  
#line 2289 
  if ((int)global_device_reset != 0) 
#line 2290 
                                     (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)((int)swmbsw_mask)); else ;
  
#line 2292 
  return ret_val;
}


#line 2305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
u16 igb_rxpbs_adjust_82580(u32 data)
{
  
#line 2307 
  u16 ret_val = (unsigned short)0U;
  
#line 2309 
  if (data <= 10U) 
#line 2310 
                   ret_val = e1000_82580_rxpbs_table[data]; else ;
  
#line 2312 
  return ret_val;
}


#line 2324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_validate_nvm_checksum_with_offset(struct e1000_hw *hw, u16 offset)
{
  u16 i;
  u16 nvm_data;
  
#line 2327 
  s32 ret_val = 0;
  
#line 2328 
  u16 checksum = (unsigned short)0U;
  
#line 2331 
  i = offset;
  
#line 2331 
  goto ldv_45165;
  ldv_45164: 
#line 2332 
  ;
  
#line 2332 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
  
#line 2333 
  if (ret_val != 0) {
    {
      
#line 2334 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_validate_nvm_checksum_with_offset", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2334U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2334 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 2334 
        tmp = igb_get_hw_dev(hw);
        
#line 2334 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error\n");
      }
      else ;
    }
    
#line 2335 
    goto out;
  }
  else ;
  
#line 2337 
  checksum = (unsigned short)((int)checksum + (int)nvm_data);
  
#line 2331 
  i = (u16)((int)i + 1);
  ldv_45165: 
#line 2332 
  ;
  
#line 2331 
  if ((int)i < (int)offset + 64) 
#line 2333 
                                 goto ldv_45164; else 
#line 2336 
                                                      goto ldv_45166;
  ldv_45166: 
#line 2337 
  ;
  
#line 2340 
  if ((unsigned int)checksum != 47802U) {
    {
      
#line 2341 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_validate_nvm_checksum_with_offset", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "NVM Checksum Invalid\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2341U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2341 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 2341 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 2341 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"NVM Checksum Invalid\n");
      }
      else ;
    }
    
#line 2342 
    ret_val = -1;
    
#line 2343 
    goto out;
  }
  else ;
  out: 
#line 2346 
  ;
  
#line 2347 
  return ret_val;
}


#line 2360  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_update_nvm_checksum_with_offset(struct e1000_hw *hw, u16 offset)
{
  s32 ret_val;
  u16 i;
  u16 nvm_data;
  
#line 2363 
  u16 checksum = (unsigned short)0U;
  
#line 2366 
  i = offset;
  
#line 2366 
  goto ldv_45180;
  ldv_45179: 
#line 2367 
  ;
  
#line 2367 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
  
#line 2368 
  if (ret_val != 0) {
    {
      
#line 2369 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_update_nvm_checksum_with_offset", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "NVM Read Error while updating checksum.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2369U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2369 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 2369 
        tmp = igb_get_hw_dev(hw);
        
#line 2369 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error while updating checksum.\n");
      }
      else ;
    }
    
#line 2370 
    goto out;
  }
  else ;
  
#line 2372 
  checksum = (unsigned short)((int)checksum + (int)nvm_data);
  
#line 2366 
  i = (u16)((int)i + 1);
  ldv_45180: 
#line 2367 
  ;
  
#line 2366 
  if ((int)i < (int)offset + 63) 
#line 2368 
                                 goto ldv_45179; else 
#line 2371 
                                                      goto ldv_45181;
  ldv_45181: 
#line 2372 
  ;
  
#line 2374 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  
#line 2375 
  ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)((int)((unsigned int)offset + 63U)),(unsigned short)1,& checksum);
  
#line 2377 
  if (ret_val != 0) {
    
#line 2378 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_update_nvm_checksum_with_offset", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "NVM Write Error while updating checksum.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2378U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2378 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_0;
      
#line 2378 
      tmp_0 = igb_get_hw_dev(hw);
      
#line 2378 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"NVM Write Error while updating checksum.\n");
    }
    else ;
  }
  else ;
  out: 
#line 2380 
  ;
  
#line 2381 
  return ret_val;
}


#line 2392  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_validate_nvm_checksum_82580(struct e1000_hw *hw)
{
  u16 j;
  u16 nvm_data;
  u16 nvm_offset;
  
#line 2394 
  s32 ret_val = 0;
  
#line 2395 
  u16 eeprom_regions_count = (unsigned short)1U;
  
#line 2399 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)3,(unsigned short)1,& nvm_data);
  
#line 2400 
  if (ret_val != 0) {
    {
      
#line 2401 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_validate_nvm_checksum_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2401U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2401 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 2401 
        tmp = igb_get_hw_dev(hw);
        
#line 2401 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error\n");
      }
      else ;
    }
    
#line 2402 
    goto out;
  }
  else ;
  
#line 2405 
  if ((int)nvm_data < 0) 
#line 2409 
                         eeprom_regions_count = (unsigned short)4U; else ;
  
#line 2412 
  j = (unsigned short)0U;
  
#line 2412 
  goto ldv_45195;
  ldv_45194: 
#line 2413 
  ;
  
#line 2413 
  if ((unsigned int)j != 0U) 
#line 2413 
                             nvm_offset = (unsigned short)(((unsigned int)j + 1U) * 64U); else 
                                                                    
#line 2413 
                                                                    nvm_offset = (unsigned short)0U;
  
#line 2414 
  ret_val = igb_validate_nvm_checksum_with_offset(hw,(unsigned short)((int)nvm_offset));
  
#line 2416 
  if (ret_val != 0) 
#line 2417 
                    goto out; else ;
  
#line 2412 
  j = (u16)((int)j + 1);
  ldv_45195: 
#line 2413 
  ;
  
#line 2412 
  if ((int)j < (int)eeprom_regions_count) 
#line 2414 
                                          goto ldv_45194; else 
#line 2417 
                                                               goto ldv_45196;
  ldv_45196: 
#line 2418 
  ;
  out: 
#line 2420 
  ;
  
#line 2421 
  return ret_val;
}


#line 2432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_update_nvm_checksum_82580(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 j;
  u16 nvm_data;
  u16 nvm_offset;
  
#line 2438 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)3,(unsigned short)1,& nvm_data);
  
#line 2439 
  if (ret_val != 0) {
    {
      
#line 2440 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_update_nvm_checksum_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "NVM Read Error while updating checksum compatibility bit.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2440U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2440 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 2440 
        tmp = igb_get_hw_dev(hw);
        
#line 2440 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error while updating checksum compatibility bit.\n");
      }
      else ;
    }
    
#line 2441 
    goto out;
  }
  else ;
  
#line 2444 
  if ((int)nvm_data >= 0) {
    
#line 2446 
    nvm_data = (unsigned short)((unsigned int)nvm_data | 32768U);
    
#line 2447 
    ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)3,(unsigned short)1,& nvm_data);
    
#line 2449 
    if (ret_val != 0) {
      {
        
#line 2450 
        struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_update_nvm_checksum_82580", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "NVM Write Error while updating checksum compatibility bit.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2450U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 2450 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
          struct net_device *tmp_0;
          
#line 2450 
          tmp_0 = igb_get_hw_dev(hw);
          
#line 2450 
          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"NVM Write Error while updating checksum compatibility bit.\n");
        }
        else ;
      }
      
#line 2451 
      goto out;
    }
    else ;
  }
  else ;
  
#line 2455 
  j = (unsigned short)0U;
  
#line 2455 
  goto ldv_45209;
  ldv_45208: 
#line 2456 
  ;
  
#line 2456 
  if ((unsigned int)j != 0U) 
#line 2456 
                             nvm_offset = (unsigned short)(((unsigned int)j + 1U) * 64U); else 
                                                                    
#line 2456 
                                                                    nvm_offset = (unsigned short)0U;
  
#line 2457 
  ret_val = igb_update_nvm_checksum_with_offset(hw,(unsigned short)((int)nvm_offset));
  
#line 2458 
  if (ret_val != 0) 
#line 2459 
                    goto out; else ;
  
#line 2455 
  j = (u16)((int)j + 1);
  ldv_45209: 
#line 2456 
  ;
  
#line 2455 
  if ((unsigned int)j <= 3U) 
#line 2457 
                             goto ldv_45208; else 
#line 2460 
                                                  goto ldv_45210;
  ldv_45210: 
#line 2461 
  ;
  out: 
#line 2462 
  ;
  
#line 2463 
  return ret_val;
}


#line 2474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_validate_nvm_checksum_i350(struct e1000_hw *hw)
{
  u16 j;
  u16 nvm_offset;
  
#line 2476 
  s32 ret_val = 0;
  
#line 2480 
  j = (unsigned short)0U;
  
#line 2480 
  goto ldv_45219;
  ldv_45218: 
#line 2481 
  ;
  
#line 2481 
  if ((unsigned int)j != 0U) 
#line 2481 
                             nvm_offset = (unsigned short)(((unsigned int)j + 1U) * 64U); else 
                                                                    
#line 2481 
                                                                    nvm_offset = (unsigned short)0U;
  
#line 2482 
  ret_val = igb_validate_nvm_checksum_with_offset(hw,(unsigned short)((int)nvm_offset));
  
#line 2484 
  if (ret_val != 0) 
#line 2485 
                    goto out; else ;
  
#line 2480 
  j = (u16)((int)j + 1);
  ldv_45219: 
#line 2481 
  ;
  
#line 2480 
  if ((unsigned int)j <= 3U) 
#line 2482 
                             goto ldv_45218; else 
#line 2485 
                                                  goto ldv_45220;
  ldv_45220: 
#line 2486 
  ;
  out: 
#line 2488 
  ;
  
#line 2489 
  return ret_val;
}


#line 2500  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_update_nvm_checksum_i350(struct e1000_hw *hw)
{
  u16 j;
  u16 nvm_offset;
  
#line 2502 
  s32 ret_val = 0;
  
#line 2506 
  j = (unsigned short)0U;
  
#line 2506 
  goto ldv_45229;
  ldv_45228: 
#line 2507 
  ;
  
#line 2507 
  if ((unsigned int)j != 0U) 
#line 2507 
                             nvm_offset = (unsigned short)(((unsigned int)j + 1U) * 64U); else 
                                                                    
#line 2507 
                                                                    nvm_offset = (unsigned short)0U;
  
#line 2508 
  ret_val = igb_update_nvm_checksum_with_offset(hw,(unsigned short)((int)nvm_offset));
  
#line 2509 
  if (ret_val != 0) 
#line 2510 
                    goto out; else ;
  
#line 2506 
  j = (u16)((int)j + 1);
  ldv_45229: 
#line 2507 
  ;
  
#line 2506 
  if ((unsigned int)j <= 3U) 
#line 2508 
                             goto ldv_45228; else 
#line 2511 
                                                  goto ldv_45230;
  ldv_45230: 
#line 2512 
  ;
  out: 
#line 2513 
  ;
  
#line 2514 
  return ret_val;
}


#line 2524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 __igb_access_emi_reg(struct e1000_hw *hw, u16 address, u16 *data, bool read)
{
  s32 __retres;
  
#line 2527 
  s32 ret_val = 0;
  
#line 2529 
  ret_val = (*(hw->phy.ops.write_reg))(hw,16U,(unsigned short)((int)address));
  
#line 2530 
  if (ret_val != 0) {
    
#line 2531 
    __retres = ret_val;
    
#line 2531 
    goto return_label;
  }
  else ;
  
#line 2533 
  if ((int)read != 0) 
#line 2534 
                      ret_val = (*(hw->phy.ops.read_reg))(hw,17U,data); else 
                                                                    
#line 2536 
                                                                    ret_val = (*(hw->phy.ops.write_reg))(hw,17U,(unsigned short)((int)*data));
  
#line 2538 
  __retres = ret_val;
  return_label: 
#line 2538 
                return __retres;
}


#line 2547  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_read_emi_reg(struct e1000_hw *hw, u16 addr, u16 *data)
{
  s32 tmp;
  
#line 2549 
  tmp = __igb_access_emi_reg(hw,(unsigned short)((int)addr),data,(_Bool)1);
  
#line 2549 
  return tmp;
}


#line 2561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_set_eee_i350(struct e1000_hw *hw, bool adv1G, bool adv100M)
{
  s32 __retres;
  u32 ipcnfg;
  u32 eeer;
  
#line 2565 
  if (hw->mac.type <= (unsigned int)e1000_82580 || hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
    
#line 2567 
    goto out; else ;
  
#line 2568 
  ipcnfg = igb_rd32(hw,3640U);
  
#line 2569 
  eeer = igb_rd32(hw,3632U);
  
#line 2572 
  if (! hw->dev_spec._82575.eee_disable) {
    
#line 2573 
    u32 eee_su = igb_rd32(hw,3636U);
    
#line 2575 
    if ((int)adv100M != 0) 
#line 2576 
                           ipcnfg |= 4U; else 
#line 2578 
                                              ipcnfg &= 4294967291U;
    
#line 2580 
    if ((int)adv1G != 0) 
#line 2581 
                         ipcnfg |= 8U; else 
#line 2583 
                                            ipcnfg &= 4294967287U;
    
#line 2585 
    eeer |= 458752U;
    
#line 2589 
    if ((eee_su & 8388608U) != 0U) {
      
#line 2590 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_set_eee_i350", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c", .format = "LPI Clock Stop Bit should not be set!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2590U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2590 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 2590 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 2590 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_0,"LPI Clock Stop Bit should not be set!\n");
      }
      else ;
    }
    else ;
  }
  else {
    
#line 2593 
    ipcnfg &= 4294967283U;
    
#line 2595 
    eeer &= 4294508543U;
  }
  {
    u8 * volatile *tmp_1;
    {
      
#line 2599 
      u8 *__var = (u8 *)0U;
      
#line 2599 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2599 
    u8 *hw_addr = *tmp_1;
    
#line 2599 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 2599 
                                           writel(ipcnfg,(void volatile *)(hw_addr + 3640U)); else ;
  }
  {
    u8 * volatile *tmp_2;
    {
      
#line 2600 
      u8 *__var_0 = (u8 *)0U;
      
#line 2600 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 2600 
    u8 *hw_addr_0 = *tmp_2;
    
#line 2600 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 2600 
                                             writel(eeer,(void volatile *)(hw_addr_0 + 3632U)); else ;
  }
  
#line 2601 
  igb_rd32(hw,3640U);
  
#line 2602 
  igb_rd32(hw,3632U);
  out: 
#line 2603 
  ;
  
#line 2605 
  __retres = 0;
  
#line 2605 
  return __retres;
}


#line 2617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_set_eee_i354(struct e1000_hw *hw, bool adv1G, bool adv100M)
{
  u16 phy_data;
  
#line 2619 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2620 
  s32 ret_val = 0;
  
#line 2623 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper || phy->id != 21040800U) 
    
#line 2625 
    goto out; else ;
  
#line 2627 
  if (! hw->dev_spec._82575.eee_disable) {
    
#line 2629 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)18);
    
#line 2630 
    if (ret_val != 0) 
#line 2631 
                      goto out; else ;
    
#line 2633 
    ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_data);
    
#line 2635 
    if (ret_val != 0) 
#line 2636 
                      goto out; else ;
    
#line 2638 
    phy_data = (unsigned short)((unsigned int)phy_data | 1U);
    
#line 2639 
    ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_data));
    
#line 2641 
    if (ret_val != 0) 
#line 2642 
                      goto out; else ;
    
#line 2645 
    ret_val = (*(phy->ops.write_reg))(hw,22U,(unsigned short)0);
    
#line 2646 
    if (ret_val != 0) 
#line 2647 
                      goto out; else ;
    
#line 2650 
    ret_val = igb_read_xmdio_reg(hw,(unsigned short)60,(unsigned char)7,& phy_data);
    
#line 2653 
    if (ret_val != 0) 
#line 2654 
                      goto out; else ;
    
#line 2656 
    if ((int)adv100M != 0) 
#line 2657 
                           phy_data = (unsigned short)((unsigned int)phy_data | 2U); else 
                                                                    
#line 2659 
                                                                    phy_data = (unsigned short)((unsigned int)phy_data & 65533U);
    
#line 2661 
    if ((int)adv1G != 0) 
#line 2662 
                         phy_data = (unsigned short)((unsigned int)phy_data | 4U); else 
                                                                    
#line 2664 
                                                                    phy_data = (unsigned short)((unsigned int)phy_data & 65531U);
    
#line 2666 
    ret_val = igb_write_xmdio_reg(hw,(unsigned short)60,(unsigned char)7,(unsigned short)((int)phy_data));
  }
  else {
    
#line 2671 
    ret_val = igb_read_xmdio_reg(hw,(unsigned short)60,(unsigned char)7,& phy_data);
    
#line 2674 
    if (ret_val != 0) 
#line 2675 
                      goto out; else ;
    
#line 2677 
    phy_data = (unsigned short)((unsigned int)phy_data & 65529U);
    
#line 2679 
    ret_val = igb_write_xmdio_reg(hw,(unsigned short)60,(unsigned char)7,(unsigned short)((int)phy_data));
  }
  out: 
#line 2684 
  ;
  
#line 2685 
  return ret_val;
}


#line 2696  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
s32 igb_get_eee_status_i354(struct e1000_hw *hw, bool *status)
{
  u16 phy_data;
  
#line 2698 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2699 
  s32 ret_val = 0;
  
#line 2703 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper || phy->id != 21040800U) 
    
#line 2705 
    goto out; else ;
  
#line 2707 
  ret_val = igb_read_xmdio_reg(hw,(unsigned short)1,(unsigned char)3,& phy_data);
  
#line 2710 
  if (ret_val != 0) 
#line 2711 
                    goto out; else ;
  
#line 2713 
  *status = (_Bool)(((int)phy_data & 3072) != 0);
  out: 
#line 2716 
  ;
  
#line 2717 
  return ret_val;
}


#line 2720  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static u8 const e1000_emc_temp_data[4U] = {(unsigned char)0U, (unsigned char)1U, (unsigned char)35U, (unsigned char)42U};

#line 2726  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static u8 const e1000_emc_therm_limit[4U] = {(unsigned char)32U, (unsigned char)25U, (unsigned char)26U, (unsigned char)48U};

#line 2740  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_get_thermal_sensor_data_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u16 ets_offset;
  u16 ets_cfg;
  u16 ets_sensor;
  u8 num_sensors;
  u8 sensor_index;
  u8 sensor_location;
  u8 i;
  u32 tmp;
  
#line 2749 
  struct e1000_thermal_sensor_data *data = & hw->mac.thermal_sensor_data;
  
#line 2751 
  if (hw->mac.type != (unsigned int)e1000_i350 || (unsigned int)hw->bus.func != 0U) {
    
#line 2752 
    __retres = 14;
    
#line 2752 
    goto return_label;
  }
  else ;
  
#line 2754 
  tmp = igb_rd32(hw,33024U);
  
#line 2754 
  data->sensor[0].temp = (unsigned char)tmp;
  
#line 2757 
  (*(hw->nvm.ops.read))(hw,(unsigned short)62,(unsigned short)1,& ets_offset);
  
#line 2758 
  if ((unsigned int)ets_offset + 65535U > 65533U) {
    
#line 2759 
    __retres = 0;
    
#line 2759 
    goto return_label;
  }
  else ;
  
#line 2761 
  (*(hw->nvm.ops.read))(hw,(unsigned short)((int)ets_offset),(unsigned short)1,& ets_cfg);
  
#line 2762 
  if ((((int)ets_cfg >> 3) & 7) != 0) {
    
#line 2764 
    __retres = 14;
    
#line 2764 
    goto return_label;
  }
  else ;
  
#line 2766 
  num_sensors = (unsigned char)((unsigned int)((unsigned char)ets_cfg) & 7U);
  
#line 2767 
  if ((unsigned int)num_sensors > 3U) 
#line 2768 
                                      num_sensors = (unsigned char)3U; else ;
  
#line 2770 
  i = (unsigned char)1U;
  
#line 2770 
  goto ldv_45291;
  ldv_45290: 
#line 2771 
  ;
  
#line 2771 
  (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)i) + (int)ets_offset),(unsigned short)1,& ets_sensor);
  
#line 2772 
  sensor_index = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 8)) & 3U);
  
#line 2774 
  sensor_location = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 10)) & 15U);
  
#line 2777 
  if ((unsigned int)sensor_location != 0U) 
#line 2778 
                                           (*(hw->phy.ops.read_i2c_byte))(hw,(unsigned char)((int)e1000_emc_temp_data[(int)sensor_index]),(unsigned char)248,& data->sensor[(int)i].temp); else ;
  
#line 2770 
  i = (u8)((int)i + 1);
  ldv_45291: 
#line 2771 
  ;
  
#line 2770 
  if ((int)i < (int)num_sensors) 
#line 2772 
                                 goto ldv_45290; else 
#line 2775 
                                                      goto ldv_45292;
  ldv_45292: 
#line 2776 
  ;
  
#line 2783 
  __retres = 0;
  return_label: 
#line 2783 
                return __retres;
}


#line 2793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static s32 igb_init_thermal_sensor_thresh_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u16 ets_offset;
  u16 ets_cfg;
  u16 ets_sensor;
  u8 low_thresh_delta;
  u8 num_sensors;
  u8 sensor_index;
  u8 sensor_location;
  u8 therm_limit;
  u8 i;
  u32 tmp;
  u32 tmp_0;
  
#line 2804 
  struct e1000_thermal_sensor_data *data = & hw->mac.thermal_sensor_data;
  
#line 2806 
  if (hw->mac.type != (unsigned int)e1000_i350 || (unsigned int)hw->bus.func != 0U) {
    
#line 2807 
    __retres = 14;
    
#line 2807 
    goto return_label;
  }
  else ;
  
#line 2809 
  memset((void *)data,0,12UL);
  
#line 2811 
  data->sensor[0].location = (unsigned char)1U;
  
#line 2812 
  tmp = igb_rd32(hw,33036U);
  
#line 2812 
  data->sensor[0].caution_thresh = (unsigned char)tmp;
  
#line 2814 
  tmp_0 = igb_rd32(hw,33028U);
  
#line 2814 
  data->sensor[0].max_op_thresh = (unsigned char)tmp_0;
  
#line 2818 
  (*(hw->nvm.ops.read))(hw,(unsigned short)62,(unsigned short)1,& ets_offset);
  
#line 2819 
  if ((unsigned int)ets_offset + 65535U > 65533U) {
    
#line 2820 
    __retres = 0;
    
#line 2820 
    goto return_label;
  }
  else ;
  
#line 2822 
  (*(hw->nvm.ops.read))(hw,(unsigned short)((int)ets_offset),(unsigned short)1,& ets_cfg);
  
#line 2823 
  if ((((int)ets_cfg >> 3) & 7) != 0) {
    
#line 2825 
    __retres = 14;
    
#line 2825 
    goto return_label;
  }
  else ;
  
#line 2827 
  low_thresh_delta = (unsigned char)((unsigned int)((unsigned char)((int)ets_cfg >> 6)) & 31U);
  
#line 2829 
  num_sensors = (unsigned char)((unsigned int)((unsigned char)ets_cfg) & 7U);
  
#line 2831 
  i = (unsigned char)1U;
  
#line 2831 
  goto ldv_45307;
  ldv_45306: 
#line 2832 
  ;
  
#line 2832 
  (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)i) + (int)ets_offset),(unsigned short)1,& ets_sensor);
  
#line 2833 
  sensor_index = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 8)) & 3U);
  
#line 2835 
  sensor_location = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 10)) & 15U);
  
#line 2837 
  therm_limit = (unsigned char)ets_sensor;
  
#line 2839 
  (*(hw->phy.ops.write_i2c_byte))(hw,(unsigned char)((int)e1000_emc_therm_limit[(int)sensor_index]),(unsigned char)248,(unsigned char)((int)therm_limit));
  
#line 2844 
  if ((unsigned int)i <= 2U && (unsigned int)sensor_location != 0U) {
    
#line 2845 
    data->sensor[(int)i].location = sensor_location;
    
#line 2846 
    data->sensor[(int)i].caution_thresh = therm_limit;
    
#line 2847 
    data->sensor[(int)i].max_op_thresh = (unsigned char)((int)therm_limit - (int)low_thresh_delta);
  }
  else ;
  
#line 2831 
  i = (u8)((int)i + 1);
  ldv_45307: 
#line 2832 
  ;
  
#line 2831 
  if ((int)i <= (int)num_sensors) 
#line 2833 
                                  goto ldv_45306; else 
#line 2836 
                                                       goto ldv_45308;
  ldv_45308: 
#line 2837 
  ;
  
#line 2851 
  __retres = 0;
  return_label: 
#line 2851 
                return __retres;
}


#line 2855  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static struct e1000_mac_operations e1000_mac_ops_82575 = {.check_for_link = & igb_check_for_link_82575, .reset_hw = (s32 (*)(struct e1000_hw *))0, .init_hw = & igb_init_hw_82575, .check_mng_mode = (bool (*)(struct e1000_hw *))0, .setup_physical_interface = (s32 (*)(struct e1000_hw *))0, .rar_set = & igb_rar_set, .read_mac_addr = & igb_read_mac_addr_82575, .get_speed_and_duplex = & igb_get_link_up_info_82575, .acquire_swfw_sync = (s32 (*)(struct e1000_hw *, u16 ))0, .release_swfw_sync = (void (*)(struct e1000_hw *, u16 ))0, .get_thermal_sensor_data = & igb_get_thermal_sensor_data_generic, .init_thermal_sensor_thresh = & igb_init_thermal_sensor_thresh_generic};

#line 2867  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static struct e1000_phy_operations e1000_phy_ops_82575 = {.acquire = & igb_acquire_phy_82575, .check_polarity = (s32 (*)(struct e1000_hw *))0, .check_reset_block = (s32 (*)(struct e1000_hw *))0, .force_speed_duplex = (s32 (*)(struct e1000_hw *))0, .get_cfg_done = & igb_get_cfg_done_82575, .get_cable_length = (s32 (*)(struct e1000_hw *))0, .get_phy_info = (s32 (*)(struct e1000_hw *))0, .read_reg = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .release = & igb_release_phy_82575, .reset = (s32 (*)(struct e1000_hw *))0, .set_d0_lplu_state = (s32 (*)(struct e1000_hw *, bool ))0, .set_d3_lplu_state = (s32 (*)(struct e1000_hw *, bool ))0, .write_reg = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .read_i2c_byte = & igb_read_i2c_byte, .write_i2c_byte = & igb_write_i2c_byte};

#line 2875  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
static struct e1000_nvm_operations e1000_nvm_ops_82575 = {.acquire = & igb_acquire_nvm_82575, .read = & igb_read_nvm_eerd, .release = & igb_release_nvm_82575, .write = & igb_write_nvm_spi, .update = (s32 (*)(struct e1000_hw *))0, .validate = (s32 (*)(struct e1000_hw *))0, .valid_led_default = (s32 (*)(struct e1000_hw *, u16 *))0};

#line 2882  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_82575.c"
struct e1000_info const e1000_82575_info = {.get_invariants = & igb_get_invariants_82575, .mac_ops = & e1000_mac_ops_82575, .phy_ops = & e1000_phy_ops_82575, .nvm_ops = & e1000_nvm_ops_82575};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
static s32 igb_set_default_fc(struct e1000_hw *hw);


#line 35 
static s32 igb_set_fc_watermarks(struct e1000_hw *hw);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_get_bus_info_pcie(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u32 reg;
  u16 pcie_link_status;
  
#line 47 
  struct e1000_bus_info *bus = & hw->bus;
  
#line 52 
  bus->type = e1000_bus_type_pci_express;
  
#line 54 
  ret_val = igb_read_pcie_cap_reg(hw,18U,& pcie_link_status);
  
#line 57 
  if (ret_val != 0) {
    
#line 58 
    bus->width = e1000_bus_width_unknown;
    
#line 59 
    bus->speed = e1000_bus_speed_unknown;
  }
  else {
    
#line 61 
    switch ((int)pcie_link_status & 15) {
      case 1: 
#line 62 
      ;
      
#line 63 
      bus->speed = e1000_bus_speed_2500;
      
#line 64 
      goto ldv_47526;
      case 2: 
#line 65 
      ;
      
#line 66 
      bus->speed = e1000_bus_speed_5000;
      
#line 67 
      goto ldv_47526;
      default: 
#line 68 
      ;
      
#line 69 
      bus->speed = e1000_bus_speed_unknown;
      
#line 70 
      goto ldv_47526;
    }
    ldv_47526: 
#line 73 
    ;
    
#line 73 
    bus->width = (enum e1000_bus_width)(((int)pcie_link_status >> 4) & 63);
  }
  
#line 78 
  reg = igb_rd32(hw,8U);
  
#line 79 
  bus->func = (unsigned short)((unsigned int)((unsigned short)(reg >> 2)) & 3U);
  
#line 81 
  __retres = 0;
  
#line 81 
  return __retres;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_clear_vfta(struct e1000_hw *hw)
{
  u32 offset;
  
#line 95 
  offset = 0U;
  
#line 95 
  goto ldv_47537;
  ldv_47536: 
#line 96 
  ;
  {
    u8 * volatile *tmp;
    {
      
#line 96 
      u8 *__var = (u8 *)0U;
      
#line 96 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 96 
    u8 *hw_addr = *tmp;
    
#line 96 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 96 
                                           writel(0U,(void volatile *)(hw_addr + ((offset << 2) + 22016U))); else ;
  }
  
#line 97 
  igb_rd32(hw,8U);
  
#line 95 
  offset += 1U;
  ldv_47537: 
#line 96 
  ;
  
#line 95 
  if (offset <= 127U) 
#line 97 
                      goto ldv_47536; else 
#line 100 
                                           goto ldv_47538;
  ldv_47538: 
#line 101 
  ;
  
#line 102 
  return;
}


#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
static void igb_write_vfta(struct e1000_hw *hw, u32 offset, u32 value)
{
  {
    u8 * volatile *tmp;
    {
      
#line 112 
      u8 *__var = (u8 *)0U;
      
#line 112 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 112 
    u8 *hw_addr = *tmp;
    
#line 112 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 112 
                                           writel(value,(void volatile *)(hw_addr + ((offset << 2) + 22016U))); else ;
  }
  
#line 113 
  igb_rd32(hw,8U);
  
#line 114 
  return;
}


#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_clear_vfta_i350(struct e1000_hw *hw)
{
  u32 offset;
  int i;
  
#line 133 
  offset = 0U;
  
#line 133 
  goto ldv_47559;
  ldv_47558: 
#line 134 
  ;
  
#line 134 
  i = 0;
  
#line 134 
  goto ldv_47556;
  ldv_47555: 
#line 135 
  ;
  {
    u8 * volatile *tmp;
    {
      
#line 135 
      u8 *__var = (u8 *)0U;
      
#line 135 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 135 
    u8 *hw_addr = *tmp;
    
#line 135 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 135 
                                           writel(0U,(void volatile *)(hw_addr + ((offset << 2) + 22016U))); else ;
  }
  
#line 134 
  i += 1;
  ldv_47556: 
#line 135 
  ;
  
#line 134 
  if (i <= 9) 
#line 136 
              goto ldv_47555; else 
#line 139 
                                   goto ldv_47557;
  ldv_47557: 
#line 140 
  ;
  
#line 137 
  igb_rd32(hw,8U);
  
#line 133 
  offset += 1U;
  ldv_47559: 
#line 134 
  ;
  
#line 133 
  if (offset <= 127U) 
#line 135 
                      goto ldv_47558; else 
#line 138 
                                           goto ldv_47560;
  ldv_47560: 
#line 139 
  ;
  
#line 140 
  return;
}


#line 150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
static void igb_write_vfta_i350(struct e1000_hw *hw, u32 offset, u32 value)
{
  int i;
  
#line 154 
  i = 0;
  
#line 154 
  goto ldv_47571;
  ldv_47570: 
#line 155 
  ;
  {
    u8 * volatile *tmp;
    {
      
#line 155 
      u8 *__var = (u8 *)0U;
      
#line 155 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 155 
    u8 *hw_addr = *tmp;
    
#line 155 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 155 
                                           writel(value,(void volatile *)(hw_addr + ((offset << 2) + 22016U))); else ;
  }
  
#line 154 
  i += 1;
  ldv_47571: 
#line 155 
  ;
  
#line 154 
  if (i <= 9) 
#line 156 
              goto ldv_47570; else 
#line 159 
                                   goto ldv_47572;
  ldv_47572: 
#line 160 
  ;
  
#line 157 
  igb_rd32(hw,8U);
  
#line 158 
  return;
}


#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_init_rx_addrs(struct e1000_hw *hw, u16 rar_count)
{
  u32 i;
  
#line 172 
  u8 mac_addr[6U] = {(unsigned char)0U};
  {
    
#line 175 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_init_rx_addrs", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Programming MAC Address into RAR[0]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))175U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 175 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 175 
      tmp = igb_get_hw_dev(hw);
      
#line 175 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Programming MAC Address into RAR[0]\n");
    }
    else ;
  }
  
#line 177 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& hw->mac.addr),0U);
  {
    
#line 180 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_init_rx_addrs", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Clearing RAR[1-%u]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))180U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 180 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_0;
      
#line 180 
      ;
      
#line 180 
      tmp_0 = igb_get_hw_dev(hw);
      
#line 180 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Clearing RAR[1-%u]\n",(int)rar_count + -1);
    }
    else ;
  }
  
#line 181 
  i = 1U;
  
#line 181 
  goto ldv_47583;
  ldv_47582: 
#line 182 
  ;
  
#line 182 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& mac_addr),i);
  
#line 181 
  i += 1U;
  ldv_47583: 
#line 182 
  ;
  
#line 181 
  if ((unsigned int)rar_count > i) 
#line 183 
                                   goto ldv_47582; else 
#line 186 
                                                        goto ldv_47584;
  ldv_47584: 
#line 187 
  ;
  
#line 188 
  return;
}


#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_vfta_set(struct e1000_hw *hw, u32 vid, bool add)
{
  u32 vfta;
  
#line 196 
  u32 index = (vid >> 5) & 127U;
  
#line 197 
  u32 mask = (unsigned int)(1 << (vid & 31U));
  
#line 199 
  struct igb_adapter *adapter = (struct igb_adapter *)hw->back;
  
#line 200 
  s32 ret_val = 0;
  
#line 202 
  vfta = *(adapter->shadow_vfta + index);
  
#line 205 
  if (((vfta & mask) != 0U) == (int)add) 
#line 206 
                                         ret_val = -3;
  else 
    
#line 208 
    if ((int)add != 0) 
#line 209 
                       vfta |= mask; else 
#line 211 
                                          vfta = ~ mask & vfta;
  
#line 213 
  if ((unsigned int)hw->mac.type + 4294967292U <= 1U) 
#line 214 
                                                      igb_write_vfta_i350(hw,index,vfta); else 
                                                                    
#line 216 
                                                                    igb_write_vfta(hw,index,vfta);
  
#line 217 
  *(adapter->shadow_vfta + index) = vfta;
  
#line 219 
  return ret_val;
}


#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_check_alt_mac_addr(struct e1000_hw *hw)
{
  u32 i;
  u16 offset;
  u16 nvm_alt_mac_addr_offset;
  u16 nvm_data;
  u8 alt_mac_addr[6U];
  bool tmp_2;
  
#line 236 
  s32 ret_val = 0;
  
#line 243 
  if (hw->mac.type > (unsigned int)e1000_82576) 
#line 244 
                                                goto out; else ;
  
#line 246 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)55,(unsigned short)1,& nvm_alt_mac_addr_offset);
  
#line 248 
  if (ret_val != 0) {
    {
      
#line 249 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_check_alt_mac_addr", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))249U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 249 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 249 
        tmp = igb_get_hw_dev(hw);
        
#line 249 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error\n");
      }
      else ;
    }
    
#line 250 
    goto out;
  }
  else ;
  
#line 253 
  if ((unsigned int)nvm_alt_mac_addr_offset + 65535U > 65533U) 
#line 256 
                                                               goto out; else ;
  
#line 258 
  if ((unsigned int)hw->bus.func == 1U) 
#line 259 
                                        nvm_alt_mac_addr_offset = (unsigned short)((unsigned int)nvm_alt_mac_addr_offset + 3U); else ;
  
#line 260 
  if ((unsigned int)hw->bus.func == 2U) 
#line 261 
                                        nvm_alt_mac_addr_offset = (unsigned short)((unsigned int)nvm_alt_mac_addr_offset + 6U); else ;
  
#line 263 
  if ((unsigned int)hw->bus.func == 3U) 
#line 264 
                                        nvm_alt_mac_addr_offset = (unsigned short)((unsigned int)nvm_alt_mac_addr_offset + 9U); else ;
  
#line 265 
  i = 0U;
  
#line 265 
  goto ldv_47609;
  ldv_47608: 
#line 266 
  ;
  
#line 266 
  offset = (unsigned short)((int)((unsigned short)(i >> 1)) + (int)nvm_alt_mac_addr_offset);
  
#line 267 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)offset),(unsigned short)1,& nvm_data);
  
#line 268 
  if (ret_val != 0) {
    {
      
#line 269 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_check_alt_mac_addr", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))269U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 269 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 269 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 269 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"NVM Read Error\n");
      }
      else ;
    }
    
#line 270 
    goto out;
  }
  else ;
  
#line 273 
  alt_mac_addr[i] = (unsigned char)nvm_data;
  
#line 274 
  alt_mac_addr[i + 1U] = (unsigned char)((int)nvm_data >> 8);
  
#line 265 
  i += 2U;
  ldv_47609: 
#line 266 
  ;
  
#line 265 
  if (i <= 5U) 
#line 267 
               goto ldv_47608; else 
#line 270 
                                    goto ldv_47610;
  ldv_47610: 
#line 271 
  ;
  
#line 278 
  tmp_2 = is_multicast_ether_addr((u8 const *)(& alt_mac_addr));
  
#line 278 
  if ((int)tmp_2 != 0) {
    {
      
#line 279 
      struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_check_alt_mac_addr", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Ignoring Alternate Mac Address with MC bit set\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))279U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 279 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 279 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 279 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Ignoring Alternate Mac Address with MC bit set\n");
      }
      else ;
    }
    
#line 280 
    goto out;
  }
  else ;
  
#line 287 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& alt_mac_addr),0U);
  out: 
#line 289 
  ;
  
#line 290 
  return ret_val;
}


#line 302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_rar_set(struct e1000_hw *hw, u8 *addr, u32 index)
{
  u32 rar_low;
  u32 rar_high;
  
#line 309 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  
#line 313 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  
#line 316 
  if (rar_low != 0U || rar_high != 0U) 
#line 317 
                                       rar_high |= 2147483648U; else ;
  {
    u8 * volatile *tmp;
    {
      
#line 323 
      u8 *__var = (u8 *)0U;
      
#line 323 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 323 
    u8 *hw_addr = *tmp;
    
#line 323 
    if ((long)(hw_addr == (u8 *)0U) == 0L) {
      u32 tmp_0;
      
#line 323 
      if (index <= 15U) 
#line 323 
                        tmp_0 = (index + 2688U) * 8U; else 
#line 323 
                                                           tmp_0 = (index + 2700U) * 8U;
      
#line 323 
      ;
      
#line 323 
      ;
      
#line 323 
      writel(rar_low,(void volatile *)(hw_addr + tmp_0));
    }
    else ;
  }
  
#line 324 
  igb_rd32(hw,8U);
  {
    u8 * volatile *tmp_1;
    {
      
#line 325 
      u8 *__var_0 = (u8 *)0U;
      
#line 325 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 325 
    u8 *hw_addr_0 = *tmp_1;
    
#line 325 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) {
      u32 tmp_2;
      
#line 325 
      if (index <= 15U) 
#line 325 
                        tmp_2 = index * 8U + 21508U; else 
#line 325 
                                                          tmp_2 = (index + 536870896U) * 8U + 21732U;
      
#line 325 
      ;
      
#line 325 
      ;
      
#line 325 
      writel(rar_high,(void volatile *)(hw_addr_0 + tmp_2));
    }
    else ;
  }
  
#line 326 
  igb_rd32(hw,8U);
  
#line 327 
  return;
}


#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_mta_set(struct e1000_hw *hw, u32 hash_value)
{
  u32 hash_bit;
  u32 hash_reg;
  u32 mta;
  
#line 352 
  hash_reg = (hash_value >> 5) & (unsigned int)((int)hw->mac.mta_reg_count + -1);
  
#line 353 
  hash_bit = hash_value & 31U;
  
#line 355 
  mta = readl((void const volatile *)(hw->hw_addr + ((hash_reg << 2) + 20992U)));
  
#line 357 
  mta = (unsigned int)(1 << hash_bit) | mta;
  {
    u8 * volatile *tmp;
    {
      
#line 359 
      u8 *__var = (u8 *)0U;
      
#line 359 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 359 
    u8 *hw_addr = *tmp;
    
#line 359 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 359 
                                           writel(mta,(void volatile *)(hw_addr + ((hash_reg << 2) + 20992U))); else ;
  }
  
#line 360 
  igb_rd32(hw,8U);
  
#line 361 
  return;
}


#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
static u32 igb_hash_mc_addr(struct e1000_hw *hw, u8 *mc_addr)
{
  u32 hash_value;
  u32 hash_mask;
  
#line 375 
  u8 bit_shift = (unsigned char)0U;
  
#line 378 
  hash_mask = (unsigned int)((int)hw->mac.mta_reg_count * 32 + -1);
  
#line 383 
  goto ldv_47643;
  ldv_47642: 
#line 384 
  ;
  
#line 384 
  bit_shift = (u8)((int)bit_shift + 1);
  ldv_47643: 
#line 385 
  ;
  
#line 383 
  if (hash_mask >> (int)bit_shift != 255U) 
#line 385 
                                           goto ldv_47642; else 
#line 388 
                                                                goto ldv_47644;
  ldv_47644: 
#line 389 
  ;
  
#line 411 
  switch (hw->mac.mc_filter_type) {
    default: 
#line 412 
    ;
    case (u32)0: 
#line 413 
    ;
    
#line 414 
    goto ldv_47647;
    case (u32)1: 
#line 415 
    ;
    
#line 416 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 1U);
    
#line 417 
    goto ldv_47647;
    case (u32)2: 
#line 418 
    ;
    
#line 419 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 2U);
    
#line 420 
    goto ldv_47647;
    case (u32)3: 
#line 421 
    ;
    
#line 422 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 4U);
    
#line 423 
    goto ldv_47647;
  }
  ldv_47647: 
#line 426 
  ;
  
#line 426 
  hash_value = (unsigned int)(((int)*(mc_addr + 4U) >> (8 - (int)bit_shift)) | ((int)*(mc_addr + 5U) << (int)bit_shift)) & hash_mask;
  
#line 429 
  return hash_value;
}


#line 441  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_update_mc_addr_list(struct e1000_hw *hw, u8 *mc_addr_list, u32 mc_addr_count)
{
  u32 hash_value;
  u32 hash_bit;
  u32 hash_reg;
  int i;
  
#line 448 
  memset((void *)(& hw->mac.mta_shadow),0,512UL);
  
#line 451 
  i = 0;
  
#line 451 
  goto ldv_47661;
  ldv_47660: 
#line 452 
  ;
  
#line 452 
  hash_value = igb_hash_mc_addr(hw,mc_addr_list);
  
#line 454 
  hash_reg = (hash_value >> 5) & (unsigned int)((int)hw->mac.mta_reg_count + -1);
  
#line 455 
  hash_bit = hash_value & 31U;
  
#line 457 
  hw->mac.mta_shadow[hash_reg] |= (unsigned int)(1 << hash_bit);
  
#line 458 
  mc_addr_list += 6U;
  
#line 451 
  i += 1;
  ldv_47661: 
#line 452 
  ;
  
#line 451 
  if ((unsigned int)i < mc_addr_count) 
#line 453 
                                       goto ldv_47660; else 
#line 456 
                                                            goto ldv_47662;
  ldv_47662: 
#line 457 
  ;
  
#line 462 
  i = (int)hw->mac.mta_reg_count + -1;
  
#line 462 
  goto ldv_47667;
  ldv_47666: 
#line 463 
  ;
  {
    u8 * volatile *tmp;
    {
      
#line 463 
      u8 *__var = (u8 *)0U;
      
#line 463 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 463 
    u8 *hw_addr = *tmp;
    
#line 463 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 463 
                                           writel(hw->mac.mta_shadow[i],(void volatile *)(hw_addr + ((i << 2) + 20992))); else ;
  }
  
#line 462 
  i -= 1;
  ldv_47667: 
#line 463 
  ;
  
#line 462 
  if (i >= 0) 
#line 464 
              goto ldv_47666; else 
#line 467 
                                   goto ldv_47668;
  ldv_47668: 
#line 468 
  ;
  
#line 464 
  igb_rd32(hw,8U);
  
#line 465 
  return;
}


#line 473  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_clear_hw_cntrs_base(struct e1000_hw *hw)
{
  
#line 475 
  igb_rd32(hw,16384U);
  
#line 476 
  igb_rd32(hw,16392U);
  
#line 477 
  igb_rd32(hw,16400U);
  
#line 478 
  igb_rd32(hw,16404U);
  
#line 479 
  igb_rd32(hw,16408U);
  
#line 480 
  igb_rd32(hw,16412U);
  
#line 481 
  igb_rd32(hw,16416U);
  
#line 482 
  igb_rd32(hw,16424U);
  
#line 483 
  igb_rd32(hw,16432U);
  
#line 484 
  igb_rd32(hw,16440U);
  
#line 485 
  igb_rd32(hw,16448U);
  
#line 486 
  igb_rd32(hw,16456U);
  
#line 487 
  igb_rd32(hw,16460U);
  
#line 488 
  igb_rd32(hw,16464U);
  
#line 489 
  igb_rd32(hw,16468U);
  
#line 490 
  igb_rd32(hw,16472U);
  
#line 491 
  igb_rd32(hw,16500U);
  
#line 492 
  igb_rd32(hw,16504U);
  
#line 493 
  igb_rd32(hw,16508U);
  
#line 494 
  igb_rd32(hw,16512U);
  
#line 495 
  igb_rd32(hw,16520U);
  
#line 496 
  igb_rd32(hw,16524U);
  
#line 497 
  igb_rd32(hw,16528U);
  
#line 498 
  igb_rd32(hw,16532U);
  
#line 499 
  igb_rd32(hw,16544U);
  
#line 500 
  igb_rd32(hw,16548U);
  
#line 501 
  igb_rd32(hw,16552U);
  
#line 502 
  igb_rd32(hw,16556U);
  
#line 503 
  igb_rd32(hw,16560U);
  
#line 504 
  igb_rd32(hw,16576U);
  
#line 505 
  igb_rd32(hw,16580U);
  
#line 506 
  igb_rd32(hw,16584U);
  
#line 507 
  igb_rd32(hw,16588U);
  
#line 508 
  igb_rd32(hw,16592U);
  
#line 509 
  igb_rd32(hw,16596U);
  
#line 510 
  igb_rd32(hw,16624U);
  
#line 511 
  igb_rd32(hw,16628U);
  
#line 512 
  return;
}


#line 522  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_check_for_copper_link(struct e1000_hw *hw)
{
  s32 ret_val;
  bool link;
  
#line 524 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 533 
  if (! mac->get_link_status) {
    
#line 534 
    ret_val = 0;
    
#line 535 
    goto out;
  }
  else ;
  
#line 542 
  ret_val = igb_phy_has_link(hw,1U,0U,& link);
  
#line 543 
  if (ret_val != 0) 
#line 544 
                    goto out; else ;
  
#line 546 
  if (! link) 
#line 547 
              goto out; else ;
  
#line 549 
  mac->get_link_status = (_Bool)0;
  
#line 554 
  igb_check_downshift(hw);
  
#line 559 
  if (! mac->autoneg) {
    
#line 560 
    ret_val = -3;
    
#line 561 
    goto out;
  }
  else ;
  
#line 568 
  igb_config_collision_dist(hw);
  
#line 575 
  ret_val = igb_config_fc_after_link_up(hw);
  
#line 576 
  if (ret_val != 0) {
    
#line 577 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_check_for_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Error configuring flow control\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))577U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 577 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 577 
      tmp = igb_get_hw_dev(hw);
      
#line 577 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Error configuring flow control\n");
    }
    else ;
  }
  else ;
  out: 
#line 579 
  ;
  
#line 580 
  return ret_val;
}


#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_setup_link(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 595 
  s32 ret_val = 0;
  
#line 600 
  tmp = igb_check_reset_block(hw);
  
#line 600 
  if (tmp != 0) 
#line 601 
                goto out; else ;
  
#line 606 
  if (hw->fc.requested_mode == (unsigned int)e1000_fc_default) {
    
#line 607 
    ret_val = igb_set_default_fc(hw);
    
#line 608 
    if (ret_val != 0) 
#line 609 
                      goto out; else ;
  }
  else ;
  
#line 616 
  hw->fc.current_mode = hw->fc.requested_mode;
  {
    
#line 618 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_setup_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "After fix-ups FlowControl is now = %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))618U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 618 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp_0;
      
#line 618 
      ;
      
#line 618 
      tmp_0 = igb_get_hw_dev(hw);
      
#line 618 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_0,"After fix-ups FlowControl is now = %x\n",(unsigned int)hw->fc.current_mode);
    }
    else ;
  }
  
#line 621 
  ret_val = (*(hw->mac.ops.setup_physical_interface))(hw);
  
#line 622 
  if (ret_val != 0) 
#line 623 
                    goto out; else ;
  {
    
#line 630 
    struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_setup_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Initializing the Flow Control address, type and timer regs\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))630U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 630 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct net_device *tmp_1;
      
#line 630 
      tmp_1 = igb_get_hw_dev(hw);
      
#line 630 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_1,"Initializing the Flow Control address, type and timer regs\n");
    }
    else ;
  }
  {
    u8 * volatile *tmp_2;
    {
      
#line 631 
      u8 *__var = (u8 *)0U;
      
#line 631 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 631 
    u8 *hw_addr = *tmp_2;
    
#line 631 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 631 
                                           writel(34824U,(void volatile *)(hw_addr + 48U)); else ;
  }
  {
    u8 * volatile *tmp_3;
    {
      
#line 632 
      u8 *__var_0 = (u8 *)0U;
      
#line 632 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 632 
    u8 *hw_addr_0 = *tmp_3;
    
#line 632 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 632 
                                             writel(256U,(void volatile *)(hw_addr_0 + 44U)); else ;
  }
  {
    u8 * volatile *tmp_4;
    {
      
#line 633 
      u8 *__var_1 = (u8 *)0U;
      
#line 633 
      tmp_4 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 633 
    u8 *hw_addr_1 = *tmp_4;
    
#line 633 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 633 
                                             writel(12746753U,(void volatile *)(hw_addr_1 + 40U)); else ;
  }
  {
    u8 * volatile *tmp_5;
    {
      
#line 635 
      u8 *__var_2 = (u8 *)0U;
      
#line 635 
      tmp_5 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 635 
    u8 *hw_addr_2 = *tmp_5;
    
#line 635 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 635 
                                             writel((unsigned int)hw->fc.pause_time,(void volatile *)(hw_addr_2 + 368U)); else ;
  }
  
#line 637 
  ret_val = igb_set_fc_watermarks(hw);
  out: 
#line 639 
  ;
  
#line 641 
  return ret_val;
}


#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_config_collision_dist(struct e1000_hw *hw)
{
  u32 tctl;
  
#line 656 
  tctl = igb_rd32(hw,1024U);
  
#line 658 
  tctl &= 4290777087U;
  
#line 659 
  tctl |= 258048U;
  {
    u8 * volatile *tmp;
    {
      
#line 661 
      u8 *__var = (u8 *)0U;
      
#line 661 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 661 
    u8 *hw_addr = *tmp;
    
#line 661 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 661 
                                           writel(tctl,(void volatile *)(hw_addr + 1024U)); else ;
  }
  
#line 662 
  igb_rd32(hw,8U);
  
#line 663 
  return;
}


#line 673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
static s32 igb_set_fc_watermarks(struct e1000_hw *hw)
{
  
#line 675 
  s32 ret_val = 0;
  
#line 676 
  u32 fcrtl = 0U;
  
#line 676 
  u32 fcrth = 0U;
  
#line 684 
  if (((unsigned int)hw->fc.current_mode & 2U) != 0U) {
    
#line 689 
    fcrtl = hw->fc.low_water;
    
#line 690 
    if ((int)hw->fc.send_xon != 0) 
#line 691 
                                   fcrtl |= 2147483648U; else ;
    
#line 693 
    fcrth = hw->fc.high_water;
  }
  else ;
  {
    u8 * volatile *tmp;
    {
      
#line 695 
      u8 *__var = (u8 *)0U;
      
#line 695 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 695 
    u8 *hw_addr = *tmp;
    
#line 695 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 695 
                                           writel(fcrtl,(void volatile *)(hw_addr + 8544U)); else ;
  }
  {
    u8 * volatile *tmp_0;
    {
      
#line 696 
      u8 *__var_0 = (u8 *)0U;
      
#line 696 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 696 
    u8 *hw_addr_0 = *tmp_0;
    
#line 696 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 696 
                                             writel(fcrth,(void volatile *)(hw_addr_0 + 8552U)); else ;
  }
  
#line 698 
  return ret_val;
}


#line 708  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
static s32 igb_set_default_fc(struct e1000_hw *hw)
{
  u16 lan_offset;
  u16 nvm_data;
  
#line 710 
  s32 ret_val = 0;
  
#line 722 
  if (hw->mac.type == (unsigned int)e1000_i350) {
    
#line 723 
    if ((unsigned int)hw->bus.func != 0U) 
#line 723 
                                          lan_offset = (unsigned short)(((unsigned int)hw->bus.func + 1U) * 64U); else 
                                                                    
#line 723 
                                                                    lan_offset = (unsigned short)0U;
    
#line 724 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned int)lan_offset + 15U)),(unsigned short)1,& nvm_data);
  }
  else 
#line 727 
       ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)15,(unsigned short)1,& nvm_data);
  
#line 731 
  if (ret_val != 0) {
    {
      
#line 732 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_set_default_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))732U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 732 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 732 
        tmp = igb_get_hw_dev(hw);
        
#line 732 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error\n");
      }
      else ;
    }
    
#line 733 
    goto out;
  }
  else ;
  
#line 736 
  if (((int)nvm_data & 12288) == 0) 
#line 737 
                                    hw->fc.requested_mode = e1000_fc_none;
  else 
    
#line 738 
    if (((int)nvm_data & 12288) == 8192) 
#line 740 
                                         hw->fc.requested_mode = e1000_fc_tx_pause; else 
                                                                    
#line 742 
                                                                    hw->fc.requested_mode = e1000_fc_full;
  out: 
#line 744 
  ;
  
#line 745 
  return ret_val;
}


#line 758  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_force_mac_fc(struct e1000_hw *hw)
{
  u32 ctrl;
  
#line 761 
  s32 ret_val = 0;
  
#line 763 
  ctrl = igb_rd32(hw,0U);
  {
    
#line 782 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_force_mac_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "hw->fc.current_mode = %u\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))782U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 782 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct net_device *tmp;
      
#line 782 
      ;
      
#line 782 
      tmp = igb_get_hw_dev(hw);
      
#line 782 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"hw->fc.current_mode = %u\n",(unsigned int)hw->fc.current_mode);
    }
    else ;
  }
  
#line 784 
  switch ((unsigned int)hw->fc.current_mode) {
    case (unsigned int)0: 
#line 785 
    ;
    
#line 786 
    ctrl &= 3892314111U;
    
#line 787 
    goto ldv_47737;
    case (unsigned int)1: 
#line 788 
    ;
    
#line 789 
    ctrl &= 4026531839U;
    
#line 790 
    ctrl |= 134217728U;
    
#line 791 
    goto ldv_47737;
    case (unsigned int)2: 
#line 792 
    ;
    
#line 793 
    ctrl &= 4160749567U;
    
#line 794 
    ctrl |= 268435456U;
    
#line 795 
    goto ldv_47737;
    case (unsigned int)3: 
#line 796 
    ;
    
#line 797 
    ctrl |= 402653184U;
    
#line 798 
    goto ldv_47737;
    default: 
#line 799 
    ;
    {
      
#line 800 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_force_mac_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow control param set incorrectly\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))800U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 800 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 800 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 800 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Flow control param set incorrectly\n");
      }
      else ;
    }
    
#line 801 
    ret_val = -3;
    
#line 802 
    goto out;
  }
  ldv_47737: 
#line 805 
  ;
  {
    u8 * volatile *tmp_1;
    {
      
#line 805 
      u8 *__var = (u8 *)0U;
      
#line 805 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 805 
    u8 *hw_addr = *tmp_1;
    
#line 805 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 805 
                                           writel(ctrl,(void volatile *)hw_addr); else ;
  }
  out: 
#line 807 
  ;
  
#line 808 
  return ret_val;
}


#line 821  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_config_fc_after_link_up(struct e1000_hw *hw)
{
  s32 __retres;
  u32 pcs_status_reg;
  u32 pcs_adv_reg;
  u32 pcs_lp_ability_reg;
  u32 pcs_ctrl_reg;
  u16 mii_status_reg;
  u16 mii_nway_adv_reg;
  u16 mii_nway_lp_ability_reg;
  u16 speed;
  u16 duplex;
  
#line 823 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 824 
  s32 ret_val = 0;
  
#line 833 
  if ((int)mac->autoneg_failed != 0) {
    
#line 834 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) 
      
#line 835 
      ret_val = igb_force_mac_fc(hw); else ;
  }
  else 
    
#line 837 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
      
#line 838 
      ret_val = igb_force_mac_fc(hw); else ;
  
#line 841 
  if (ret_val != 0) {
    {
      
#line 842 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Error forcing flow control settings\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))842U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 842 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 842 
        tmp = igb_get_hw_dev(hw);
        
#line 842 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Error forcing flow control settings\n");
      }
      else ;
    }
    
#line 843 
    goto out;
  }
  else ;
  
#line 851 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (int)mac->autoneg != 0) {
    
#line 856 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& mii_status_reg);
    
#line 858 
    if (ret_val != 0) 
#line 859 
                      goto out; else ;
    
#line 860 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& mii_status_reg);
    
#line 862 
    if (ret_val != 0) 
#line 863 
                      goto out; else ;
    
#line 865 
    if (((int)mii_status_reg & 32) == 0) {
      {
        
#line 866 
        struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Copper PHY and Auto Neg has not completed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))866U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 866 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
          struct net_device *tmp_0;
          
#line 866 
          tmp_0 = igb_get_hw_dev(hw);
          
#line 866 
          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"Copper PHY and Auto Neg has not completed.\n");
        }
        else ;
      }
      
#line 867 
      goto out;
    }
    else ;
    
#line 876 
    ret_val = (*(hw->phy.ops.read_reg))(hw,4U,& mii_nway_adv_reg);
    
#line 878 
    if (ret_val != 0) 
#line 879 
                      goto out; else ;
    
#line 880 
    ret_val = (*(hw->phy.ops.read_reg))(hw,5U,& mii_nway_lp_ability_reg);
    
#line 882 
    if (ret_val != 0) 
#line 883 
                      goto out; else ;
    
#line 918 
    if (((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_lp_ability_reg & 1024) != 0) 
      
#line 926 
      if (hw->fc.requested_mode == (unsigned int)e1000_fc_full) {
        
#line 927 
        hw->fc.current_mode = e1000_fc_full;
        {
          
#line 928 
          struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = FULL.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))928U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 928 
          if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
            struct net_device *tmp_1;
            
#line 928 
            tmp_1 = igb_get_hw_dev(hw);
            
#line 928 
            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"Flow Control = FULL.\n");
          }
          else ;
        }
      }
      else {
        
#line 930 
        hw->fc.current_mode = e1000_fc_rx_pause;
        {
          
#line 931 
          struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))931U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 931 
          if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
            struct net_device *tmp_2;
            
#line 931 
            tmp_2 = igb_get_hw_dev(hw);
            
#line 931 
            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_2,"Flow Control = RX PAUSE frames only.\n");
          }
          else ;
        }
      }
    else 
      
#line 941 
      if (((((int)mii_nway_adv_reg & 1024) == 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) != 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
        
#line 945 
        hw->fc.current_mode = e1000_fc_tx_pause;
        {
          
#line 946 
          struct _ddebug descriptor_3 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = TX PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))946U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 946 
          if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) {
            struct net_device *tmp_3;
            
#line 946 
            tmp_3 = igb_get_hw_dev(hw);
            
#line 946 
            __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)tmp_3,"Flow Control = TX PAUSE frames only.\n");
          }
          else ;
        }
      }
      else 
        
#line 955 
        if (((((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) == 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
          
#line 959 
          hw->fc.current_mode = e1000_fc_rx_pause;
          {
            
#line 960 
            struct _ddebug descriptor_4 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))960U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 960 
            if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) {
              struct net_device *tmp_4;
              
#line 960 
              tmp_4 = igb_get_hw_dev(hw);
              
#line 960 
              __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)tmp_4,"Flow Control = RX PAUSE frames only.\n");
            }
            else ;
          }
        }
        else 
          
#line 982 
          if ((hw->fc.requested_mode == (unsigned int)e1000_fc_none || hw->fc.requested_mode == (unsigned int)e1000_fc_tx_pause) || (int)hw->fc.strict_ieee != 0) {
            
#line 985 
            hw->fc.current_mode = e1000_fc_none;
            {
              
#line 986 
              struct _ddebug descriptor_5 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = NONE.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))986U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
              
#line 986 
              if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) {
                struct net_device *tmp_5;
                
#line 986 
                tmp_5 = igb_get_hw_dev(hw);
                
#line 986 
                __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)tmp_5,"Flow Control = NONE.\n");
              }
              else ;
            }
          }
          else {
            
#line 988 
            hw->fc.current_mode = e1000_fc_rx_pause;
            {
              
#line 989 
              struct _ddebug descriptor_6 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))989U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
              
#line 989 
              if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) {
                struct net_device *tmp_6;
                
#line 989 
                tmp_6 = igb_get_hw_dev(hw);
                
#line 989 
                __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)tmp_6,"Flow Control = RX PAUSE frames only.\n");
              }
              else ;
            }
          }
    
#line 996 
    ret_val = (*(hw->mac.ops.get_speed_and_duplex))(hw,& speed,& duplex);
    
#line 997 
    if (ret_val != 0) {
      {
        
#line 998 
        struct _ddebug descriptor_7 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Error getting link speed and duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))998U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 998 
        if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) {
          struct net_device *tmp_7;
          
#line 998 
          tmp_7 = igb_get_hw_dev(hw);
          
#line 998 
          __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)tmp_7,"Error getting link speed and duplex\n");
        }
        else ;
      }
      
#line 999 
      goto out;
    }
    else ;
    
#line 1002 
    if ((unsigned int)duplex == 1U) 
#line 1003 
                                    hw->fc.current_mode = e1000_fc_none; else ;
    
#line 1008 
    ret_val = igb_force_mac_fc(hw);
    
#line 1009 
    if (ret_val != 0) {
      {
        
#line 1010 
        struct _ddebug descriptor_8 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Error forcing flow control settings\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1010U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1010 
        if ((long)(((int)descriptor_8.flags & 1) != 0) != 0L) {
          struct net_device *tmp_8;
          
#line 1010 
          tmp_8 = igb_get_hw_dev(hw);
          
#line 1010 
          __dynamic_netdev_dbg(& descriptor_8,(struct net_device const *)tmp_8,"Error forcing flow control settings\n");
        }
        else ;
      }
      
#line 1011 
      goto out;
    }
    else ;
  }
  else ;
  
#line 1019 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes && (int)mac->autoneg != 0) {
    
#line 1024 
    pcs_status_reg = igb_rd32(hw,16908U);
    
#line 1026 
    if ((pcs_status_reg & 65536U) == 0U) {
      {
        
#line 1027 
        struct _ddebug descriptor_9 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "PCS Auto Neg has not completed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1027U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1027 
        if ((long)(((int)descriptor_9.flags & 1) != 0) != 0L) {
          struct net_device *tmp_9;
          
#line 1027 
          tmp_9 = igb_get_hw_dev(hw);
          
#line 1027 
          __dynamic_netdev_dbg(& descriptor_9,(struct net_device const *)tmp_9,"PCS Auto Neg has not completed.\n");
        }
        else ;
      }
      
#line 1028 
      __retres = ret_val;
      
#line 1028 
      goto return_label;
    }
    else ;
    
#line 1037 
    pcs_adv_reg = igb_rd32(hw,16920U);
    
#line 1038 
    pcs_lp_ability_reg = igb_rd32(hw,16924U);
    
#line 1073 
    if ((pcs_adv_reg & 128U) != 0U && (pcs_lp_ability_reg & 128U) != 0U) 
      
#line 1081 
      if (hw->fc.requested_mode == (unsigned int)e1000_fc_full) {
        
#line 1082 
        hw->fc.current_mode = e1000_fc_full;
        {
          
#line 1083 
          struct _ddebug descriptor_10 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = FULL.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1083U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1083 
          if ((long)(((int)descriptor_10.flags & 1) != 0) != 0L) {
            struct net_device *tmp_10;
            
#line 1083 
            tmp_10 = igb_get_hw_dev(hw);
            
#line 1083 
            __dynamic_netdev_dbg(& descriptor_10,(struct net_device const *)tmp_10,"Flow Control = FULL.\n");
          }
          else ;
        }
      }
      else {
        
#line 1085 
        hw->fc.current_mode = e1000_fc_rx_pause;
        {
          
#line 1086 
          struct _ddebug descriptor_11 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1086U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1086 
          if ((long)(((int)descriptor_11.flags & 1) != 0) != 0L) {
            struct net_device *tmp_11;
            
#line 1086 
            tmp_11 = igb_get_hw_dev(hw);
            
#line 1086 
            __dynamic_netdev_dbg(& descriptor_11,(struct net_device const *)tmp_11,"Flow Control = Rx PAUSE frames only.\n");
          }
          else ;
        }
      }
    else 
      
#line 1096 
      if ((((pcs_adv_reg & 128U) == 0U && (pcs_adv_reg & 256U) != 0U) && (pcs_lp_ability_reg & 128U) != 0U) && (pcs_lp_ability_reg & 256U) != 0U) {
        
#line 1100 
        hw->fc.current_mode = e1000_fc_tx_pause;
        {
          
#line 1101 
          struct _ddebug descriptor_12 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = Tx PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1101U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1101 
          if ((long)(((int)descriptor_12.flags & 1) != 0) != 0L) {
            struct net_device *tmp_12;
            
#line 1101 
            tmp_12 = igb_get_hw_dev(hw);
            
#line 1101 
            __dynamic_netdev_dbg(& descriptor_12,(struct net_device const *)tmp_12,"Flow Control = Tx PAUSE frames only.\n");
          }
          else ;
        }
      }
      else 
        
#line 1110 
        if ((((pcs_adv_reg & 128U) != 0U && (pcs_adv_reg & 256U) != 0U) && (pcs_lp_ability_reg & 128U) == 0U) && (pcs_lp_ability_reg & 256U) != 0U) {
          
#line 1114 
          hw->fc.current_mode = e1000_fc_rx_pause;
          {
            
#line 1115 
            struct _ddebug descriptor_13 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1115U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1115 
            if ((long)(((int)descriptor_13.flags & 1) != 0) != 0L) {
              struct net_device *tmp_13;
              
#line 1115 
              tmp_13 = igb_get_hw_dev(hw);
              
#line 1115 
              __dynamic_netdev_dbg(& descriptor_13,(struct net_device const *)tmp_13,"Flow Control = Rx PAUSE frames only.\n");
            }
            else ;
          }
        }
        else {
          
#line 1120 
          hw->fc.current_mode = e1000_fc_none;
          {
            
#line 1121 
            struct _ddebug descriptor_14 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Flow Control = NONE.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1121U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1121 
            if ((long)(((int)descriptor_14.flags & 1) != 0) != 0L) {
              struct net_device *tmp_14;
              
#line 1121 
              tmp_14 = igb_get_hw_dev(hw);
              
#line 1121 
              __dynamic_netdev_dbg(& descriptor_14,(struct net_device const *)tmp_14,"Flow Control = NONE.\n");
            }
            else ;
          }
        }
    
#line 1127 
    pcs_ctrl_reg = igb_rd32(hw,16904U);
    
#line 1128 
    pcs_ctrl_reg |= 128U;
    {
      u8 * volatile *tmp_15;
      {
        
#line 1129 
        u8 *__var = (u8 *)0U;
        
#line 1129 
        tmp_15 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1129 
      u8 *hw_addr = *tmp_15;
      
#line 1129 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1129 
                                             writel(pcs_ctrl_reg,(void volatile *)(hw_addr + 16904U)); else ;
    }
    
#line 1131 
    ret_val = igb_force_mac_fc(hw);
    
#line 1132 
    if (ret_val != 0) {
      {
        
#line 1133 
        struct _ddebug descriptor_15 = {.modname = "igb", .function = "igb_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Error forcing flow control settings\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1133U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1133 
        if ((long)(((int)descriptor_15.flags & 1) != 0) != 0L) {
          struct net_device *tmp_16;
          
#line 1133 
          tmp_16 = igb_get_hw_dev(hw);
          
#line 1133 
          __dynamic_netdev_dbg(& descriptor_15,(struct net_device const *)tmp_16,"Error forcing flow control settings\n");
        }
        else ;
      }
      
#line 1134 
      __retres = ret_val;
      
#line 1134 
      goto return_label;
    }
    else ;
  }
  else ;
  out: 
#line 1138 
  ;
  
#line 1139 
  __retres = ret_val;
  return_label: 
#line 1139 
                return __retres;
}


#line 1151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_get_speed_and_duplex_copper(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  s32 __retres;
  u32 status;
  
#line 1156 
  status = igb_rd32(hw,8U);
  
#line 1157 
  if ((status & 128U) != 0U) {
    
#line 1158 
    *speed = (unsigned short)1000U;
    {
      
#line 1159 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_speed_and_duplex_copper", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "1000 Mbs, ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1159U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1159 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1159 
        tmp = igb_get_hw_dev(hw);
        
#line 1159 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"1000 Mbs, ");
      }
      else ;
    }
  }
  else 
    
#line 1160 
    if ((status & 64U) != 0U) {
      
#line 1161 
      *speed = (unsigned short)100U;
      {
        
#line 1162 
        struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_get_speed_and_duplex_copper", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "100 Mbs, ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1162U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1162 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
          struct net_device *tmp_0;
          
#line 1162 
          tmp_0 = igb_get_hw_dev(hw);
          
#line 1162 
          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_0,"100 Mbs, ");
        }
        else ;
      }
    }
    else {
      
#line 1164 
      *speed = (unsigned short)10U;
      {
        
#line 1165 
        struct _ddebug descriptor_1 = {.modname = "igb", .function = "igb_get_speed_and_duplex_copper", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "10 Mbs, ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1165U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1165 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
          struct net_device *tmp_1;
          
#line 1165 
          tmp_1 = igb_get_hw_dev(hw);
          
#line 1165 
          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)tmp_1,"10 Mbs, ");
        }
        else ;
      }
    }
  
#line 1168 
  if ((status & 1U) != 0U) {
    
#line 1169 
    *duplex = (unsigned short)2U;
    {
      
#line 1170 
      struct _ddebug descriptor_2 = {.modname = "igb", .function = "igb_get_speed_and_duplex_copper", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Full Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1170U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1170 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 1170 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 1170 
        __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)tmp_2,"Full Duplex\n");
      }
      else ;
    }
  }
  else {
    
#line 1172 
    *duplex = (unsigned short)1U;
    {
      
#line 1173 
      struct _ddebug descriptor_3 = {.modname = "igb", .function = "igb_get_speed_and_duplex_copper", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Half Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1173U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1173 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) {
        struct net_device *tmp_3;
        
#line 1173 
        tmp_3 = igb_get_hw_dev(hw);
        
#line 1173 
        __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)tmp_3,"Half Duplex\n");
      }
      else ;
    }
  }
  
#line 1176 
  __retres = 0;
  
#line 1176 
  return __retres;
}


#line 1185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_get_hw_semaphore(struct e1000_hw *hw)
{
  u32 swsm;
  u32 tmp_1;
  
#line 1188 
  s32 ret_val = 0;
  
#line 1189 
  s32 timeout = (int)hw->nvm.word_size + 1;
  
#line 1190 
  s32 i = 0;
  
#line 1193 
  goto ldv_47804;
  ldv_47803: 
#line 1194 
  ;
  
#line 1194 
  swsm = igb_rd32(hw,23376U);
  
#line 1195 
  if ((swsm & 1U) == 0U) 
#line 1196 
                         goto ldv_47802; else ;
  
#line 1198 
  __const_udelay(214750UL);
  
#line 1199 
  i += 1;
  ldv_47804: 
#line 1200 
  ;
  
#line 1193 
  if (i < timeout) 
#line 1195 
                   goto ldv_47803; else 
#line 1198 
                                        goto ldv_47802;
  ldv_47802: 
#line 1199 
  ;
  
#line 1202 
  if (i == timeout) {
    {
      
#line 1203 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_hw_semaphore", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Driver can\'t access device - SMBI bit is set.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1203U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1203 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1203 
        tmp = igb_get_hw_dev(hw);
        
#line 1203 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Driver can\'t access device - SMBI bit is set.\n");
      }
      else ;
    }
    
#line 1204 
    ret_val = -1;
    
#line 1205 
    goto out;
  }
  else ;
  
#line 1209 
  i = 0;
  
#line 1209 
  goto ldv_47813;
  ldv_47812: 
#line 1210 
  ;
  
#line 1210 
  swsm = igb_rd32(hw,23376U);
  {
    u8 * volatile *tmp_0;
    {
      
#line 1211 
      u8 *__var = (u8 *)0U;
      
#line 1211 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1211 
    u8 *hw_addr = *tmp_0;
    
#line 1211 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1211 
                                           writel(swsm | 2U,(void volatile *)(hw_addr + 23376U)); else ;
  }
  
#line 1214 
  tmp_1 = igb_rd32(hw,23376U);
  
#line 1214 
  if ((tmp_1 & 2U) != 0U) 
#line 1215 
                          goto ldv_47811; else ;
  
#line 1217 
  __const_udelay(214750UL);
  
#line 1209 
  i += 1;
  ldv_47813: 
#line 1210 
  ;
  
#line 1209 
  if (i < timeout) 
#line 1211 
                   goto ldv_47812; else 
#line 1214 
                                        goto ldv_47811;
  ldv_47811: 
#line 1215 
  ;
  
#line 1220 
  if (i == timeout) {
    
#line 1222 
    igb_put_hw_semaphore(hw);
    {
      
#line 1223 
      struct _ddebug descriptor_0 = {.modname = "igb", .function = "igb_get_hw_semaphore", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Driver can\'t access the NVM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1223U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1223 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct net_device *tmp_2;
        
#line 1223 
        tmp_2 = igb_get_hw_dev(hw);
        
#line 1223 
        __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)tmp_2,"Driver can\'t access the NVM\n");
      }
      else ;
    }
    
#line 1224 
    ret_val = -1;
    
#line 1225 
    goto out;
  }
  else ;
  out: 
#line 1228 
  ;
  
#line 1229 
  return ret_val;
}


#line 1238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
void igb_put_hw_semaphore(struct e1000_hw *hw)
{
  u32 swsm;
  
#line 1242 
  swsm = igb_rd32(hw,23376U);
  
#line 1244 
  swsm &= 4294967292U;
  {
    u8 * volatile *tmp;
    {
      
#line 1246 
      u8 *__var = (u8 *)0U;
      
#line 1246 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1246 
    u8 *hw_addr = *tmp;
    
#line 1246 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1246 
                                           writel(swsm,(void volatile *)(hw_addr + 23376U)); else ;
  }
  
#line 1248 
  return;
}


#line 1255  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_get_auto_rd_done(struct e1000_hw *hw)
{
  u32 tmp;
  
#line 1257 
  s32 i = 0;
  
#line 1258 
  s32 ret_val = 0;
  
#line 1261 
  goto ldv_47829;
  ldv_47828: 
#line 1262 
  ;
  
#line 1262 
  tmp = igb_rd32(hw,16U);
  
#line 1262 
  if ((tmp & 512U) != 0U) 
#line 1263 
                          goto ldv_47827; else ;
  
#line 1264 
  usleep_range(1000UL,2000UL);
  
#line 1265 
  i += 1;
  ldv_47829: 
#line 1266 
  ;
  
#line 1261 
  if (i <= 9) 
#line 1263 
              goto ldv_47828; else 
#line 1266 
                                   goto ldv_47827;
  ldv_47827: 
#line 1267 
  ;
  
#line 1268 
  if (i == 10) {
    {
      
#line 1269 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_get_auto_rd_done", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Auto read by HW from NVM has not completed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1269U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1269 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 1269 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 1269 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_0,"Auto read by HW from NVM has not completed.\n");
      }
      else ;
    }
    
#line 1270 
    ret_val = -9;
    
#line 1271 
    goto out;
  }
  else ;
  out: 
#line 1274 
  ;
  
#line 1275 
  return ret_val;
}


#line 1286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
static s32 igb_valid_led_default(struct e1000_hw *hw, u16 *data)
{
  s32 ret_val;
  
#line 1290 
  ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)4,(unsigned short)1,data);
  
#line 1291 
  if (ret_val != 0) {
    {
      
#line 1292 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_valid_led_default", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1292U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1292 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1292 
        tmp = igb_get_hw_dev(hw);
        
#line 1292 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"NVM Read Error\n");
      }
      else ;
    }
    
#line 1293 
    goto out;
  }
  else ;
  
#line 1296 
  if ((unsigned int)*data + 65535U > 65533U) {
    
#line 1297 
    switch ((unsigned int)hw->phy.media_type) {
      case (unsigned int)3: 
#line 1298 
      ;
      
#line 1299 
      *data = (unsigned short)4376U;
      
#line 1300 
      goto ldv_47842;
      case (unsigned int)1: 
#line 1301 
      ;
      default: 
#line 1302 
      ;
      
#line 1303 
      *data = (unsigned short)35089U;
      
#line 1304 
      goto ldv_47842;
    }
    ldv_47842: 
#line 1306 
    ;
  }
  else ;
  out: 
#line 1307 
  ;
  
#line 1308 
  return ret_val;
}


#line 1316  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_id_led_init(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 data;
  u16 i;
  u16 temp;
  
#line 1318 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1320 
  u32 const ledctl_mask = 255U;
  
#line 1321 
  u32 const ledctl_on = 14U;
  
#line 1322 
  u32 const ledctl_off = 15U;
  
#line 1324 
  u16 const led_mask = (unsigned short)15U;
  
#line 1327 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U) 
#line 1329 
                                                      ret_val = igb_valid_led_default_i210(hw,& data); else 
                                                                    
#line 1331 
                                                                    ret_val = igb_valid_led_default(hw,& data);
  
#line 1333 
  if (ret_val != 0) 
#line 1334 
                    goto out; else ;
  
#line 1336 
  mac->ledctl_default = igb_rd32(hw,3584U);
  
#line 1337 
  mac->ledctl_mode1 = mac->ledctl_default;
  
#line 1338 
  mac->ledctl_mode2 = mac->ledctl_default;
  
#line 1340 
  i = (unsigned short)0U;
  
#line 1340 
  goto ldv_47875;
  ldv_47874: 
#line 1341 
  ;
  
#line 1341 
  temp = (unsigned short)((unsigned int)((unsigned short)((int)data >> ((int)i << 2))) & 15U);
  
#line 1342 
  switch ((int)temp) {
    case 4: 
#line 1343 
    ;
    case 5: 
#line 1344 
    ;
    case 6: 
#line 1345 
    ;
    
#line 1346 
    mac->ledctl_mode1 &= ~ (255U << ((int)i << 3));
    
#line 1347 
    mac->ledctl_mode1 |= 14U << ((int)i << 3);
    
#line 1348 
    goto ldv_47861;
    case 7: 
#line 1349 
    ;
    case 8: 
#line 1350 
    ;
    case 9: 
#line 1351 
    ;
    
#line 1352 
    mac->ledctl_mode1 &= ~ (255U << ((int)i << 3));
    
#line 1353 
    mac->ledctl_mode1 |= 15U << ((int)i << 3);
    
#line 1354 
    goto ldv_47861;
    default: 
#line 1355 
    ;
    
#line 1357 
    goto ldv_47861;
  }
  ldv_47861: 
#line 1359 
  ;
  
#line 1359 
  switch ((int)temp) {
    case 2: 
#line 1360 
    ;
    case 5: 
#line 1361 
    ;
    case 8: 
#line 1362 
    ;
    
#line 1363 
    mac->ledctl_mode2 &= ~ (255U << ((int)i << 3));
    
#line 1364 
    mac->ledctl_mode2 |= 14U << ((int)i << 3);
    
#line 1365 
    goto ldv_47869;
    case 3: 
#line 1366 
    ;
    case 6: 
#line 1367 
    ;
    case 9: 
#line 1368 
    ;
    
#line 1369 
    mac->ledctl_mode2 &= ~ (255U << ((int)i << 3));
    
#line 1370 
    mac->ledctl_mode2 |= 15U << ((int)i << 3);
    
#line 1371 
    goto ldv_47869;
    default: 
#line 1372 
    ;
    
#line 1374 
    goto ldv_47869;
  }
  ldv_47869: 
#line 1376 
  ;
  
#line 1340 
  i = (u16)((int)i + 1);
  ldv_47875: 
#line 1341 
  ;
  
#line 1340 
  if ((unsigned int)i <= 3U) 
#line 1342 
                             goto ldv_47874; else 
#line 1345 
                                                  goto ldv_47876;
  ldv_47876: 
#line 1346 
  ;
  out: 
#line 1378 
  ;
  
#line 1379 
  return ret_val;
}


#line 1389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_cleanup_led(struct e1000_hw *hw)
{
  s32 __retres;
  {
    u8 * volatile *tmp;
    {
      
#line 1391 
      u8 *__var = (u8 *)0U;
      
#line 1391 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1391 
    u8 *hw_addr = *tmp;
    
#line 1391 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1391 
                                           writel(hw->mac.ledctl_default,(void volatile *)(hw_addr + 3584U)); else ;
  }
  
#line 1392 
  __retres = 0;
  
#line 1392 
  return __retres;
}


#line 1401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_blink_led(struct e1000_hw *hw)
{
  s32 __retres;
  u32 i;
  
#line 1403 
  u32 ledctl_blink = 0U;
  
#line 1406 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) 
#line 1408 
                                                                  ledctl_blink = 142U;
  else {
    
#line 1417 
    ledctl_blink = hw->mac.ledctl_mode2;
    
#line 1418 
    i = 0U;
    
#line 1418 
    goto ldv_47891;
    ldv_47890: 
#line 1419 
    ;
    {
      
#line 1419 
      u32 mode = (hw->mac.ledctl_mode2 >> i) & 15U;
      
#line 1421 
      u32 led_default = hw->mac.ledctl_default >> i;
      
#line 1423 
      if (((led_default & 64U) == 0U && mode == 14U) || ((led_default & 64U) != 0U && mode == 15U)) {
        
#line 1427 
        ledctl_blink = (unsigned int)(~ (15 << i)) & ledctl_blink;
        
#line 1429 
        ledctl_blink = (unsigned int)(142 << i) | ledctl_blink;
      }
      else ;
    }
    
#line 1418 
    i += 8U;
    ldv_47891: 
#line 1419 
    ;
    
#line 1418 
    if (i <= 31U) 
#line 1420 
                  goto ldv_47890; else 
#line 1423 
                                       goto ldv_47892;
    ldv_47892: 
#line 1424 
    ;
  }
  {
    u8 * volatile *tmp;
    {
      
#line 1435 
      u8 *__var = (u8 *)0U;
      
#line 1435 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1435 
    u8 *hw_addr = *tmp;
    
#line 1435 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1435 
                                           writel(ledctl_blink,(void volatile *)(hw_addr + 3584U)); else ;
  }
  
#line 1437 
  __retres = 0;
  
#line 1437 
  return __retres;
}


#line 1446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_led_off(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 1448 
  switch ((unsigned int)hw->phy.media_type) {
    case (unsigned int)1: 
#line 1449 
    ;
    {
      u8 * volatile *tmp;
      {
        
#line 1450 
        u8 *__var = (u8 *)0U;
        
#line 1450 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1450 
      u8 *hw_addr = *tmp;
      
#line 1450 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1450 
                                             writel(hw->mac.ledctl_mode1,(void volatile *)(hw_addr + 3584U)); else ;
    }
    
#line 1451 
    goto ldv_47903;
    default: 
#line 1452 
    ;
    
#line 1453 
    goto ldv_47903;
  }
  ldv_47903: 
#line 1456 
  ;
  
#line 1456 
  __retres = 0;
  
#line 1456 
  return __retres;
}


#line 1470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_disable_pcie_master(struct e1000_hw *hw)
{
  u32 ctrl;
  u32 tmp_0;
  
#line 1473 
  s32 timeout = 800;
  
#line 1474 
  s32 ret_val = 0;
  
#line 1476 
  if (hw->bus.type != (unsigned int)e1000_bus_type_pci_express) 
#line 1477 
                                                                goto out; else ;
  
#line 1479 
  ctrl = igb_rd32(hw,0U);
  
#line 1480 
  ctrl |= 4U;
  {
    u8 * volatile *tmp;
    {
      
#line 1481 
      u8 *__var = (u8 *)0U;
      
#line 1481 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1481 
    u8 *hw_addr = *tmp;
    
#line 1481 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1481 
                                           writel(ctrl,(void volatile *)hw_addr); else ;
  }
  
#line 1483 
  goto ldv_47917;
  ldv_47916: 
#line 1484 
  ;
  
#line 1484 
  tmp_0 = igb_rd32(hw,8U);
  
#line 1484 
  if ((tmp_0 & 524288U) == 0U) 
#line 1486 
                               goto ldv_47915; else ;
  
#line 1487 
  __const_udelay(429500UL);
  
#line 1488 
  timeout -= 1;
  ldv_47917: 
#line 1489 
  ;
  
#line 1483 
  if (timeout != 0) 
#line 1485 
                    goto ldv_47916; else 
#line 1488 
                                         goto ldv_47915;
  ldv_47915: 
#line 1489 
  ;
  
#line 1491 
  if (timeout == 0) {
    {
      
#line 1492 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_disable_pcie_master", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Master requests are pending.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1492U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1492 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_1;
        
#line 1492 
        tmp_1 = igb_get_hw_dev(hw);
        
#line 1492 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_1,"Master requests are pending.\n");
      }
      else ;
    }
    
#line 1493 
    ret_val = -10;
    
#line 1494 
    goto out;
  }
  else ;
  out: 
#line 1497 
  ;
  
#line 1498 
  return ret_val;
}


#line 1508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_validate_mdi_setting(struct e1000_hw *hw)
{
  
#line 1510 
  s32 ret_val = 0;
  
#line 1513 
  if (hw->mac.type > (unsigned int)e1000_82576) 
#line 1514 
                                                goto out; else ;
  
#line 1516 
  if (! hw->mac.autoneg && ((unsigned int)hw->phy.mdix == 0U || (unsigned int)hw->phy.mdix == 3U)) {
    {
      
#line 1517 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_validate_mdi_setting", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Invalid MDI setting detected\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1517U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1517 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp;
        
#line 1517 
        tmp = igb_get_hw_dev(hw);
        
#line 1517 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp,"Invalid MDI setting detected\n");
      }
      else ;
    }
    
#line 1518 
    hw->phy.mdix = (unsigned char)1U;
    
#line 1519 
    ret_val = -3;
    
#line 1520 
    goto out;
  }
  else ;
  out: 
#line 1523 
  ;
  
#line 1524 
  return ret_val;
}


#line 1538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
s32 igb_write_8bit_ctrl_reg(struct e1000_hw *hw, u32 reg, u32 offset, u8 data)
{
  u32 i;
  
#line 1541 
  u32 regvalue = 0U;
  
#line 1542 
  s32 ret_val = 0;
  
#line 1545 
  regvalue = (unsigned int)data | (offset << 8);
  {
    u8 * volatile *tmp;
    {
      
#line 1546 
      u8 *__var = (u8 *)0U;
      
#line 1546 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 1546 
    u8 *hw_addr = *tmp;
    
#line 1546 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1546 
                                           writel(regvalue,(void volatile *)(hw_addr + reg)); else ;
  }
  
#line 1549 
  i = 0U;
  
#line 1549 
  goto ldv_47941;
  ldv_47940: 
#line 1550 
  ;
  
#line 1550 
  __const_udelay(21475UL);
  
#line 1551 
  regvalue = igb_rd32(hw,reg);
  
#line 1552 
  if (regvalue < (u32)0) 
#line 1553 
                         goto ldv_47939; else ;
  
#line 1549 
  i += 1U;
  ldv_47941: 
#line 1550 
  ;
  
#line 1549 
  if (i <= 639U) 
#line 1551 
                 goto ldv_47940; else 
#line 1554 
                                      goto ldv_47939;
  ldv_47939: 
#line 1555 
  ;
  
#line 1555 
  if (regvalue >= (u32)0) {
    {
      
#line 1556 
      struct _ddebug descriptor = {.modname = "igb", .function = "igb_write_8bit_ctrl_reg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c", .format = "Reg %08x did not indicate ready\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1556U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1556 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct net_device *tmp_0;
        
#line 1556 
        ;
        
#line 1556 
        tmp_0 = igb_get_hw_dev(hw);
        
#line 1556 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tmp_0,"Reg %08x did not indicate ready\n",reg);
      }
      else ;
    }
    
#line 1557 
    ret_val = -2;
    
#line 1558 
    goto out;
  }
  else ;
  out: 
#line 1561 
  ;
  
#line 1562 
  return ret_val;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/e1000_mac.c"
bool igb_enable_mng_pass_thru(struct e1000_hw *hw)
{
  u32 manc;
  u32 fwsm;
  u32 factps;
  
#line 1576 
  bool ret_val = (_Bool)0;
  
#line 1578 
  if (! hw->mac.asf_firmware_present) 
#line 1579 
                                      goto out; else ;
  
#line 1581 
  manc = igb_rd32(hw,22560U);
  
#line 1583 
  if ((manc & 131072U) == 0U) 
#line 1584 
                              goto out; else ;
  
#line 1586 
  if ((int)hw->mac.arc_subsystem_valid != 0) {
    
#line 1587 
    fwsm = igb_rd32(hw,23380U);
    
#line 1588 
    factps = igb_rd32(hw,23344U);
    
#line 1590 
    if ((factps & 536870912U) == 0U && (fwsm & 14U) == 4U) {
      
#line 1593 
      ret_val = (_Bool)1;
      
#line 1594 
      goto out;
    }
    else ;
  }
  else 
    
#line 1597 
    if ((manc & 1U) != 0U && (manc & 2U) == 0U) {
      
#line 1599 
      ret_val = (_Bool)1;
      
#line 1600 
      goto out;
    }
    else ;
  out: 
#line 1604 
  ;
  
#line 1605 
  return ret_val;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void clear_bit_unlock(long nr, unsigned long volatile *addr)
{
  
#line 133 
  ldv_inline_asm();
  
#line 134 
  set_bit(nr,addr);
  
#line 135 
  return;
}


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_pr_debug(struct _ddebug *, char const * , ...);


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_fault(char const *, int);


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  u64 __retres;
  
#line 20 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  
#line 21 
  __retres = dividend / (unsigned long long)divisor;
  
#line 21 
  return __retres;
}


#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  u32 remainder;
  u64 tmp;
  
#line 100 
  tmp = div_u64_rem(dividend,divisor,& remainder);
  
#line 100 
  return tmp;
}


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static bool IS_ERR_0(void const *ptr);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 444 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 445 
  return;
}


#line 474 
static void ldv_spin_unlock_irqrestore_73(spinlock_t *lock, unsigned long flags);


#line 478 
static void ldv_spin_unlock_irqrestore_75(spinlock_t *lock, unsigned long flags);


#line 482 
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_79(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_81(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_85(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_87(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_89(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_91(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_96(spinlock_t *lock, unsigned long flags);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 70 
static void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1);


#line 106 
static void ldv___ldv_spin_lock_90(spinlock_t *ldv_func_arg1);


#line 110 
static void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1);


#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/time.h"
__inline static s64 timespec_to_ns(struct timespec const *ts)
{
  s64 __retres;
  
#line 193 
  __retres = (long long)ts->tv_sec * 1000000000LL + (long long)ts->tv_nsec;
  
#line 193 
  return __retres;
}


#line 215 
struct timespec ns_to_timespec(s64 const);


#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
__inline static ktime_t ktime_set(s64 const secs, unsigned long const nsecs)
{
  ktime_t __retres;
  
#line 52 
  if ((long)(secs > 9223372035LL) != 0L) {
    
#line 53 
    ktime_t __constr_expr_10 = {.tv64 = 9223372036854775807LL};
    
#line 53 
    __retres = __constr_expr_10;
    
#line 53 
    goto return_label;
  }
  else ;
  
#line 55 
  ktime_t __constr_expr_11 = {.tv64 = secs * 1000000000LL + (long long)nsecs};
  
#line 55 
  __retres = __constr_expr_11;
  return_label: 
#line 55 
                return __retres;
}


#line 283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  
#line 285 
  ktime_t const ktime_zero = {.tv64 = 0LL};
  
#line 287 
  ktime_t __constr_expr_17 = {.tv64 = (long long)((unsigned long long)ktime_zero.tv64 + ns)};
  
#line 287 
  return __constr_expr_17;
}


#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
ktime_t ktime_get_with_offset(enum tk_offsets);


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  ktime_t tmp;
  
#line 172 
  tmp = ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
  
#line 172 
  return tmp;
}


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void delayed_work_timer_fn(unsigned long);


#line 448 
bool cancel_delayed_work_sync(struct delayed_work *);


#line 560 
static bool ldv_schedule_work_92(struct work_struct *work);


#line 597 
static bool ldv_schedule_delayed_work_93(struct delayed_work *dwork, unsigned long delay);


#line 601 
static bool ldv_schedule_delayed_work_94(struct delayed_work *dwork, unsigned long delay);


#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
unsigned long _copy_from_user(void *, void const *, unsigned int);


#line 652 
unsigned long _copy_to_user(void *, void const *, unsigned int);


#line 662 
void copy_from_user_overflow(void);


#line 664 
void copy_to_user_overflow(void);


#line 672 
void __copy_from_user_overflow(void);


#line 677 
void __copy_to_user_overflow(void);


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void const *from, unsigned long n)
{
  
#line 695 
  int sz = -1;
  
#line 697 
  __might_fault("./arch/x86/include/asm/uaccess.h",697);
  
#line 717 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 718 
                                                                    n = _copy_from_user(to,from,(unsigned int)n);
  else 
    
#line 719 
    if (0 != 0) 
#line 720 
                copy_from_user_overflow(); else 
#line 722 
                                                __copy_from_user_overflow();
  
#line 724 
  return n;
}


#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void const *from, unsigned long n)
{
  
#line 730 
  int sz = -1;
  
#line 732 
  __might_fault("./arch/x86/include/asm/uaccess.h",732);
  
#line 735 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 736 
                                                                    n = _copy_to_user(to,from,(unsigned int)n);
  else 
    
#line 737 
    if (0 != 0) 
#line 738 
                copy_to_user_overflow(); else 
#line 740 
                                              __copy_to_user_overflow();
  
#line 742 
  return n;
}


#line 1000  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  struct skb_shared_hwtstamps *__retres;
  unsigned char *tmp;
  
#line 1002 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1002 
  __retres = & ((struct skb_shared_info *)tmp)->hwtstamps;
  
#line 1002 
  return __retres;
}


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
__inline static void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
  
#line 95 
  tc->nsec += (unsigned long long)delta;
  
#line 96 
  return;
}


#line 108 
void timecounter_init(struct timecounter *, struct cyclecounter const *, u64);


#line 120 
u64 timecounter_read(struct timecounter *);


#line 136 
u64 timecounter_cyc2time(struct timecounter *, cycle_t);


#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);


#line 133 
int ptp_clock_unregister(struct ptp_clock *);


#line 189 
int ptp_find_pin(struct ptp_clock *, enum ptp_pin_function, unsigned int);


#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_tx_hwtstamp(struct igb_adapter *adapter);


#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static cycle_t igb_ptp_read_82576(struct cyclecounter const *cc)
{
  struct igb_adapter *tmp;
  u64 val;
  u32 lo;
  u32 hi;
  {
    
#line 82 
    struct cyclecounter const *__mptr = cc;
    
#line 82 
    tmp = (struct igb_adapter *)__mptr + 18446744073709538672U;
  }
  
#line 82 
  struct igb_adapter *igb = tmp;
  
#line 83 
  struct e1000_hw *hw = & igb->hw;
  
#line 87 
  lo = igb_rd32(hw,46592U);
  
#line 88 
  hi = igb_rd32(hw,46596U);
  
#line 90 
  val = (unsigned long long)hi << 32;
  
#line 91 
  val = (unsigned long long)lo | val;
  
#line 93 
  return val;
}


#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static cycle_t igb_ptp_read_82580(struct cyclecounter const *cc)
{
  struct igb_adapter *tmp;
  u32 lo;
  u32 hi;
  u64 val;
  {
    
#line 99 
    struct cyclecounter const *__mptr = cc;
    
#line 99 
    tmp = (struct igb_adapter *)__mptr + 18446744073709538672U;
  }
  
#line 99 
  struct igb_adapter *igb = tmp;
  
#line 100 
  struct e1000_hw *hw = & igb->hw;
  
#line 108 
  igb_rd32(hw,46840U);
  
#line 109 
  lo = igb_rd32(hw,46592U);
  
#line 110 
  hi = igb_rd32(hw,46596U);
  
#line 112 
  val = (unsigned long long)hi << 32;
  
#line 113 
  val = (unsigned long long)lo | val;
  
#line 115 
  return val;
}


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_read_i210(struct igb_adapter *adapter, struct timespec *ts)
{
  u32 sec;
  u32 nsec;
  
#line 122 
  struct e1000_hw *hw = & adapter->hw;
  
#line 129 
  igb_rd32(hw,46840U);
  
#line 130 
  nsec = igb_rd32(hw,46592U);
  
#line 131 
  sec = igb_rd32(hw,46596U);
  
#line 133 
  ts->tv_sec = (long)sec;
  
#line 134 
  ts->tv_nsec = (long)nsec;
  
#line 135 
  return;
}


#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_write_i210(struct igb_adapter *adapter, struct timespec const *ts)
{
  
#line 140 
  struct e1000_hw *hw = & adapter->hw;
  {
    u8 * volatile *tmp;
    {
      
#line 145 
      u8 *__var = (u8 *)0U;
      
#line 145 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 145 
    u8 *hw_addr = *tmp;
    
#line 145 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 145 
                                           writel((unsigned int)ts->tv_nsec,(void volatile *)(hw_addr + 46592U)); else ;
  }
  {
    u8 * volatile *tmp_0;
    {
      
#line 146 
      u8 *__var_0 = (u8 *)0U;
      
#line 146 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 146 
    u8 *hw_addr_0 = *tmp_0;
    
#line 146 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 146 
                                             writel((unsigned int)ts->tv_sec,(void volatile *)(hw_addr_0 + 46596U)); else ;
  }
  
#line 148 
  return;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_systim_to_hwtstamp(struct igb_adapter *adapter, struct skb_shared_hwtstamps *hwtstamps, u64 systim)
{
  unsigned long flags;
  u64 ns;
  
#line 173 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 174 
    ;
    case (unsigned int)3: 
#line 175 
    ;
    case (unsigned int)5: 
#line 176 
    ;
    case (unsigned int)4: 
#line 177 
    ;
    
#line 178 
    ldv___ldv_spin_lock_72(& adapter->tmreg_lock);
    
#line 180 
    ns = timecounter_cyc2time(& adapter->tc,systim);
    
#line 182 
    ldv_spin_unlock_irqrestore_73(& adapter->tmreg_lock,flags);
    
#line 184 
    memset((void *)hwtstamps,0,8UL);
    
#line 185 
    hwtstamps->hwtstamp = ns_to_ktime(ns);
    
#line 186 
    goto ldv_48694;
    case (unsigned int)6: 
#line 187 
    ;
    case (unsigned int)7: 
#line 188 
    ;
    
#line 189 
    memset((void *)hwtstamps,0,8UL);
    
#line 191 
    hwtstamps->hwtstamp = ktime_set((long long)(systim >> 32),(unsigned long)systim & 4294967295UL);
    
#line 193 
    goto ldv_48694;
    default: 
#line 194 
    ;
    
#line 195 
    goto ldv_48694;
  }
  ldv_48694: 
#line 197 
  ;
  
#line 198 
  return;
}


#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_adjfreq_82576(struct ptp_clock_info *ptp, s32 ppb)
{
  int __retres;
  struct igb_adapter *tmp;
  u64 rate;
  u32 incvalue;
  {
    
#line 202 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 202 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539200U;
  }
  
#line 202 
  struct igb_adapter *igb = tmp;
  
#line 204 
  struct e1000_hw *hw = & igb->hw;
  
#line 205 
  int neg_adj = 0;
  
#line 209 
  if (ppb < 0) {
    
#line 210 
    neg_adj = 1;
    
#line 211 
    ppb = - ppb;
  }
  else ;
  
#line 213 
  rate = (unsigned long long)ppb;
  
#line 214 
  rate <<= 14;
  
#line 215 
  rate = div_u64(rate,1953125U);
  
#line 217 
  incvalue = 8388608U;
  
#line 219 
  if (neg_adj != 0) 
#line 220 
                    incvalue -= (unsigned int)rate; else 
#line 222 
                                                         incvalue = (unsigned int)rate + incvalue;
  {
    u8 * volatile *tmp_0;
    {
      
#line 224 
      u8 *__var = (u8 *)0U;
      
#line 224 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 224 
    u8 *hw_addr = *tmp_0;
    
#line 224 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 224 
                                           writel((incvalue & 16777215U) | 16777216U,(void volatile *)(hw_addr + 46600U)); else ;
  }
  
#line 226 
  __retres = 0;
  
#line 226 
  return __retres;
}


#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_adjfreq_82580(struct ptp_clock_info *ptp, s32 ppb)
{
  int __retres;
  struct igb_adapter *tmp;
  u64 rate;
  u32 inca;
  {
    
#line 231 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 231 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539200U;
  }
  
#line 231 
  struct igb_adapter *igb = tmp;
  
#line 233 
  struct e1000_hw *hw = & igb->hw;
  
#line 234 
  int neg_adj = 0;
  
#line 238 
  if (ppb < 0) {
    
#line 239 
    neg_adj = 1;
    
#line 240 
    ppb = - ppb;
  }
  else ;
  
#line 242 
  rate = (unsigned long long)ppb;
  
#line 243 
  rate <<= 26;
  
#line 244 
  rate = div_u64(rate,1953125U);
  
#line 246 
  inca = (unsigned int)rate & 2147483647U;
  
#line 247 
  if (neg_adj != 0) 
#line 248 
                    inca |= 2147483648U; else ;
  {
    u8 * volatile *tmp_0;
    {
      
#line 250 
      u8 *__var = (u8 *)0U;
      
#line 250 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 250 
    u8 *hw_addr = *tmp_0;
    
#line 250 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 250 
                                           writel(inca,(void volatile *)(hw_addr + 46600U)); else ;
  }
  
#line 252 
  __retres = 0;
  
#line 252 
  return __retres;
}


#line 255  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_adjtime_82576(struct ptp_clock_info *ptp, s64 delta)
{
  int __retres;
  struct igb_adapter *tmp;
  unsigned long flags;
  {
    
#line 257 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 257 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539200U;
  }
  
#line 257 
  struct igb_adapter *igb = tmp;
  
#line 261 
  ldv___ldv_spin_lock_74(& igb->tmreg_lock);
  
#line 262 
  timecounter_adjtime(& igb->tc,delta);
  
#line 263 
  ldv_spin_unlock_irqrestore_75(& igb->tmreg_lock,flags);
  
#line 265 
  __retres = 0;
  
#line 265 
  return __retres;
}


#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_adjtime_i210(struct ptp_clock_info *ptp, s64 delta)
{
  int __retres;
  struct igb_adapter *tmp;
  unsigned long flags;
  struct timespec now;
  {
    
#line 270 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 270 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539200U;
  }
  
#line 270 
  struct igb_adapter *igb = tmp;
  
#line 273 
  struct timespec then = ns_to_timespec(delta);
  
#line 275 
  ldv___ldv_spin_lock_76(& igb->tmreg_lock);
  
#line 277 
  igb_ptp_read_i210(igb,& now);
  
#line 278 
  now = timespec_add(now,then);
  
#line 279 
  igb_ptp_write_i210(igb,(struct timespec const *)(& now));
  
#line 281 
  ldv_spin_unlock_irqrestore_77(& igb->tmreg_lock,flags);
  
#line 283 
  __retres = 0;
  
#line 283 
  return __retres;
}


#line 286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_gettime_82576(struct ptp_clock_info *ptp, struct timespec *ts)
{
  int __retres;
  struct igb_adapter *tmp;
  unsigned long flags;
  u64 ns;
  {
    
#line 289 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 289 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539200U;
  }
  
#line 289 
  struct igb_adapter *igb = tmp;
  
#line 294 
  ldv___ldv_spin_lock_78(& igb->tmreg_lock);
  
#line 296 
  ns = timecounter_read(& igb->tc);
  
#line 298 
  ldv_spin_unlock_irqrestore_79(& igb->tmreg_lock,flags);
  
#line 300 
  *ts = ns_to_timespec((long long)ns);
  
#line 302 
  __retres = 0;
  
#line 302 
  return __retres;
}


#line 305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_gettime_i210(struct ptp_clock_info *ptp, struct timespec *ts)
{
  int __retres;
  struct igb_adapter *tmp;
  unsigned long flags;
  {
    
#line 308 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 308 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539200U;
  }
  
#line 308 
  struct igb_adapter *igb = tmp;
  
#line 312 
  ldv___ldv_spin_lock_80(& igb->tmreg_lock);
  
#line 314 
  igb_ptp_read_i210(igb,ts);
  
#line 316 
  ldv_spin_unlock_irqrestore_81(& igb->tmreg_lock,flags);
  
#line 318 
  __retres = 0;
  
#line 318 
  return __retres;
}


#line 321  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_settime_82576(struct ptp_clock_info *ptp, struct timespec const *ts)
{
  int __retres;
  struct igb_adapter *tmp;
  unsigned long flags;
  u64 ns;
  s64 tmp_0;
  {
    
#line 324 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 324 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539200U;
  }
  
#line 324 
  struct igb_adapter *igb = tmp;
  
#line 329 
  tmp_0 = timespec_to_ns(ts);
  
#line 329 
  ns = (unsigned long long)tmp_0;
  
#line 331 
  ldv___ldv_spin_lock_82(& igb->tmreg_lock);
  
#line 333 
  timecounter_init(& igb->tc,(struct cyclecounter const *)(& igb->cc),ns);
  
#line 335 
  ldv_spin_unlock_irqrestore_83(& igb->tmreg_lock,flags);
  
#line 337 
  __retres = 0;
  
#line 337 
  return __retres;
}


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_settime_i210(struct ptp_clock_info *ptp, struct timespec const *ts)
{
  int __retres;
  struct igb_adapter *tmp;
  unsigned long flags;
  {
    
#line 343 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 343 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539200U;
  }
  
#line 343 
  struct igb_adapter *igb = tmp;
  
#line 347 
  ldv___ldv_spin_lock_84(& igb->tmreg_lock);
  
#line 349 
  igb_ptp_write_i210(igb,ts);
  
#line 351 
  ldv_spin_unlock_irqrestore_85(& igb->tmreg_lock,flags);
  
#line 353 
  __retres = 0;
  
#line 353 
  return __retres;
}


#line 356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_pin_direction(int pin, int input, u32 *ctrl, u32 *ctrl_ext)
{
  u32 *tmp;
  
#line 358 
  if (pin <= 1) 
#line 358 
                tmp = ctrl; else 
#line 358 
                                 tmp = ctrl_ext;
  
#line 358 
  u32 *ptr = tmp;
  
#line 359 
  u32 const mask[4U] = {4194304U, 8388608U, 1024U, 2048U};
  
#line 366 
  if (input != 0) 
#line 367 
                  *ptr &= ~ mask[pin]; else 
#line 369 
                                            *ptr |= mask[pin];
  
#line 370 
  return;
}


#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_pin_extts(struct igb_adapter *igb, int chan, int pin)
{
  u32 ctrl;
  u32 ctrl_ext;
  
#line 374 
  u32 const aux0_sel_sdp[4U] = {0U, 1U, 2U, 3U};
  
#line 377 
  u32 const aux1_sel_sdp[4U] = {0U, 8U, 16U, 24U};
  
#line 380 
  u32 const ts_sdp_en[4U] = {256U, 2048U, 16384U, 131072U};
  
#line 383 
  struct e1000_hw *hw = & igb->hw;
  
#line 384 
  u32 tssdp = 0U;
  
#line 386 
  ctrl = igb_rd32(hw,0U);
  
#line 387 
  ctrl_ext = igb_rd32(hw,24U);
  
#line 388 
  tssdp = igb_rd32(hw,60U);
  
#line 390 
  igb_pin_direction(pin,1,& ctrl,& ctrl_ext);
  
#line 393 
  tssdp = ~ ts_sdp_en[pin] & tssdp;
  
#line 395 
  if (chan == 1) {
    
#line 396 
    tssdp &= 4294967271U;
    
#line 397 
    tssdp = (aux1_sel_sdp[pin] | tssdp) | 32U;
  }
  else {
    
#line 399 
    tssdp &= 4294967292U;
    
#line 400 
    tssdp = (aux0_sel_sdp[pin] | tssdp) | 4U;
  }
  {
    u8 * volatile *tmp;
    {
      
#line 403 
      u8 *__var = (u8 *)0U;
      
#line 403 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 403 
    u8 *hw_addr = *tmp;
    
#line 403 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 403 
                                           writel(tssdp,(void volatile *)(hw_addr + 60U)); else ;
  }
  {
    u8 * volatile *tmp_0;
    {
      
#line 404 
      u8 *__var_0 = (u8 *)0U;
      
#line 404 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 404 
    u8 *hw_addr_0 = *tmp_0;
    
#line 404 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 404 
                                             writel(ctrl,(void volatile *)hw_addr_0); else ;
  }
  {
    u8 * volatile *tmp_1;
    {
      
#line 405 
      u8 *__var_1 = (u8 *)0U;
      
#line 405 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 405 
    u8 *hw_addr_1 = *tmp_1;
    
#line 405 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 405 
                                             writel(ctrl_ext,(void volatile *)(hw_addr_1 + 24U)); else ;
  }
  
#line 407 
  return;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_pin_perout(struct igb_adapter *igb, int chan, int pin)
{
  u32 ctrl;
  u32 ctrl_ext;
  
#line 410 
  u32 const aux0_sel_sdp[4U] = {0U, 1U, 2U, 3U};
  
#line 413 
  u32 const aux1_sel_sdp[4U] = {0U, 8U, 16U, 24U};
  
#line 416 
  u32 const ts_sdp_en[4U] = {256U, 2048U, 16384U, 131072U};
  
#line 419 
  u32 const ts_sdp_sel_tt0[4U] = {0U, 0U, 0U, 0U};
  
#line 423 
  u32 const ts_sdp_sel_tt1[4U] = {64U, 512U, 4096U, 32768U};
  
#line 427 
  u32 const ts_sdp_sel_clr[4U] = {192U, 1536U, 12288U, 98304U};
  
#line 431 
  struct e1000_hw *hw = & igb->hw;
  
#line 432 
  u32 tssdp = 0U;
  
#line 434 
  ctrl = igb_rd32(hw,0U);
  
#line 435 
  ctrl_ext = igb_rd32(hw,24U);
  
#line 436 
  tssdp = igb_rd32(hw,60U);
  
#line 438 
  igb_pin_direction(pin,0,& ctrl,& ctrl_ext);
  
#line 441 
  if ((tssdp & 3U) == aux0_sel_sdp[pin]) 
#line 442 
                                         tssdp &= 4294967291U; else ;
  
#line 444 
  if ((tssdp & 24U) == aux1_sel_sdp[pin]) 
#line 445 
                                          tssdp &= 4294967263U; else ;
  
#line 447 
  tssdp = ~ ts_sdp_sel_clr[pin] & tssdp;
  
#line 448 
  if (chan == 1) 
#line 449 
                 tssdp = ts_sdp_sel_tt1[pin] | tssdp; else 
#line 451 
                                                           tssdp = ts_sdp_sel_tt0[pin] | tssdp;
  
#line 453 
  tssdp = ts_sdp_en[pin] | tssdp;
  {
    u8 * volatile *tmp;
    {
      
#line 455 
      u8 *__var = (u8 *)0U;
      
#line 455 
      tmp = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 455 
    u8 *hw_addr = *tmp;
    
#line 455 
    if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 455 
                                           writel(tssdp,(void volatile *)(hw_addr + 60U)); else ;
  }
  {
    u8 * volatile *tmp_0;
    {
      
#line 456 
      u8 *__var_0 = (u8 *)0U;
      
#line 456 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 456 
    u8 *hw_addr_0 = *tmp_0;
    
#line 456 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 456 
                                             writel(ctrl,(void volatile *)hw_addr_0); else ;
  }
  {
    u8 * volatile *tmp_1;
    {
      
#line 457 
      u8 *__var_1 = (u8 *)0U;
      
#line 457 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 457 
    u8 *hw_addr_1 = *tmp_1;
    
#line 457 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 457 
                                             writel(ctrl_ext,(void volatile *)(hw_addr_1 + 24U)); else ;
  }
  
#line 459 
  return;
}


#line 460  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_feature_enable_i210(struct ptp_clock_info *ptp, struct ptp_clock_request *rq, int on)
{
  int __retres;
  struct igb_adapter *tmp;
  u32 tsauxc;
  u32 tsim;
  u32 tsauxc_mask;
  u32 tsim_mask;
  u32 trgttiml;
  u32 trgttimh;
  unsigned long flags;
  struct timespec ts;
  s64 ns;
  {
    
#line 464 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 464 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539200U;
  }
  
#line 463 
  struct igb_adapter *igb = tmp;
  
#line 465 
  struct e1000_hw *hw = & igb->hw;
  
#line 469 
  int pin = -1;
  
#line 472 
  switch ((unsigned int)rq->type) {
    case (unsigned int)0: 
#line 473 
    ;
    
#line 474 
    if (on != 0) {
      
#line 475 
      pin = ptp_find_pin(igb->ptp_clock,(enum ptp_pin_function)PTP_PF_EXTTS,rq->__anonCompField_ptp_clock_request_94.extts.index);
      
#line 477 
      if (pin < 0) {
        
#line 478 
        __retres = -16;
        
#line 478 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 480 
    if (rq->__anonCompField_ptp_clock_request_94.extts.index == 1U) {
      
#line 481 
      tsauxc_mask = 1024U;
      
#line 482 
      tsim_mask = 64U;
    }
    else {
      
#line 484 
      tsauxc_mask = 256U;
      
#line 485 
      tsim_mask = 32U;
    }
    
#line 487 
    ldv___ldv_spin_lock_86(& igb->tmreg_lock);
    
#line 488 
    tsauxc = igb_rd32(hw,46656U);
    
#line 489 
    tsim = igb_rd32(hw,46708U);
    
#line 490 
    if (on != 0) {
      
#line 491 
      igb_pin_extts(igb,(int)rq->__anonCompField_ptp_clock_request_94.extts.index,pin);
      
#line 492 
      tsauxc |= tsauxc_mask;
      
#line 493 
      tsim |= tsim_mask;
    }
    else {
      
#line 495 
      tsauxc = ~ tsauxc_mask & tsauxc;
      
#line 496 
      tsim = ~ tsim_mask & tsim;
    }
    {
      u8 * volatile *tmp_0;
      {
        
#line 498 
        u8 *__var = (u8 *)0U;
        
#line 498 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 498 
      u8 *hw_addr = *tmp_0;
      
#line 498 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 498 
                                             writel(tsauxc,(void volatile *)(hw_addr + 46656U)); else ;
    }
    {
      u8 * volatile *tmp_1;
      {
        
#line 499 
        u8 *__var_0 = (u8 *)0U;
        
#line 499 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 499 
      u8 *hw_addr_0 = *tmp_1;
      
#line 499 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 499 
                                               writel(tsim,(void volatile *)(hw_addr_0 + 46708U)); else ;
    }
    
#line 500 
    ldv_spin_unlock_irqrestore_87(& igb->tmreg_lock,flags);
    
#line 501 
    __retres = 0;
    
#line 501 
    goto return_label;
    case (unsigned int)1: 
#line 503 
    ;
    
#line 504 
    if (on != 0) {
      
#line 505 
      pin = ptp_find_pin(igb->ptp_clock,(enum ptp_pin_function)PTP_PF_PEROUT,rq->__anonCompField_ptp_clock_request_94.perout.index);
      
#line 507 
      if (pin < 0) {
        
#line 508 
        __retres = -16;
        
#line 508 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 510 
    ts.tv_sec = (long)rq->__anonCompField_ptp_clock_request_94.perout.period.sec;
    
#line 511 
    ts.tv_nsec = (long)rq->__anonCompField_ptp_clock_request_94.perout.period.nsec;
    
#line 512 
    ns = timespec_to_ns((struct timespec const *)(& ts));
    
#line 513 
    ns >>= 1;
    
#line 514 
    if (on != 0 && ns <= 499999LL) {
      
#line 516 
      __retres = -22;
      
#line 516 
      goto return_label;
    }
    else ;
    
#line 518 
    ts = ns_to_timespec(ns);
    
#line 519 
    if (rq->__anonCompField_ptp_clock_request_94.perout.index == 1U) {
      
#line 520 
      tsauxc_mask = 2U;
      
#line 521 
      tsim_mask = 16U;
      
#line 522 
      trgttiml = 46668U;
      
#line 523 
      trgttimh = 46672U;
    }
    else {
      
#line 525 
      tsauxc_mask = 1U;
      
#line 526 
      tsim_mask = 8U;
      
#line 527 
      trgttiml = 46660U;
      
#line 528 
      trgttimh = 46664U;
    }
    
#line 530 
    ldv___ldv_spin_lock_88(& igb->tmreg_lock);
    
#line 531 
    tsauxc = igb_rd32(hw,46656U);
    
#line 532 
    tsim = igb_rd32(hw,46708U);
    
#line 533 
    if (on != 0) {
      
#line 534 
      int i = (int)rq->__anonCompField_ptp_clock_request_94.perout.index;
      
#line 536 
      igb_pin_perout(igb,i,pin);
      
#line 537 
      igb->perout[i].start.tv_sec = (long)rq->__anonCompField_ptp_clock_request_94.perout.start.sec;
      
#line 538 
      igb->perout[i].start.tv_nsec = (long)rq->__anonCompField_ptp_clock_request_94.perout.start.nsec;
      
#line 539 
      igb->perout[i].period.tv_sec = ts.tv_sec;
      
#line 540 
      igb->perout[i].period.tv_nsec = ts.tv_nsec;
      {
        u8 * volatile *tmp_2;
        {
          
#line 541 
          u8 *__var_1 = (u8 *)0U;
          
#line 541 
          tmp_2 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 541 
        u8 *hw_addr_1 = *tmp_2;
        
#line 541 
        if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 541 
                                                 writel((unsigned int)rq->__anonCompField_ptp_clock_request_94.perout.start.sec,(void volatile *)(hw_addr_1 + trgttimh)); else ;
      }
      {
        u8 * volatile *tmp_3;
        {
          
#line 542 
          u8 *__var_2 = (u8 *)0U;
          
#line 542 
          tmp_3 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 542 
        u8 *hw_addr_2 = *tmp_3;
        
#line 542 
        if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 542 
                                                 writel(rq->__anonCompField_ptp_clock_request_94.perout.start.nsec,(void volatile *)(hw_addr_2 + trgttiml)); else ;
      }
      
#line 543 
      tsauxc |= tsauxc_mask;
      
#line 544 
      tsim |= tsim_mask;
    }
    else {
      
#line 546 
      tsauxc = ~ tsauxc_mask & tsauxc;
      
#line 547 
      tsim = ~ tsim_mask & tsim;
    }
    {
      u8 * volatile *tmp_4;
      {
        
#line 549 
        u8 *__var_3 = (u8 *)0U;
        
#line 549 
        tmp_4 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 549 
      u8 *hw_addr_3 = *tmp_4;
      
#line 549 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 549 
                                               writel(tsauxc,(void volatile *)(hw_addr_3 + 46656U)); else ;
    }
    {
      u8 * volatile *tmp_5;
      {
        
#line 550 
        u8 *__var_4 = (u8 *)0U;
        
#line 550 
        tmp_5 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 550 
      u8 *hw_addr_4 = *tmp_5;
      
#line 550 
      if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 550 
                                               writel(tsim,(void volatile *)(hw_addr_4 + 46708U)); else ;
    }
    
#line 551 
    ldv_spin_unlock_irqrestore_89(& igb->tmreg_lock,flags);
    
#line 552 
    __retres = 0;
    
#line 552 
    goto return_label;
    case (unsigned int)2: 
#line 554 
    ;
    
#line 555 
    ldv___ldv_spin_lock_90(& igb->tmreg_lock);
    
#line 556 
    tsim = igb_rd32(hw,46708U);
    
#line 557 
    if (on != 0) 
#line 558 
                 tsim |= 1U; else 
#line 560 
                                  tsim &= 4294967294U;
    {
      u8 * volatile *tmp_6;
      {
        
#line 561 
        u8 *__var_5 = (u8 *)0U;
        
#line 561 
        tmp_6 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 561 
      u8 *hw_addr_5 = *tmp_6;
      
#line 561 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
#line 561 
                                               writel(tsim,(void volatile *)(hw_addr_5 + 46708U)); else ;
    }
    
#line 562 
    ldv_spin_unlock_irqrestore_91(& igb->tmreg_lock,flags);
    
#line 563 
    __retres = 0;
    
#line 563 
    goto return_label;
  }
  
#line 566 
  __retres = -95;
  return_label: 
#line 566 
                return __retres;
}


#line 569  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_feature_enable(struct ptp_clock_info *ptp, struct ptp_clock_request *rq, int on)
{
  int __retres;
  
#line 572 
  __retres = -95;
  
#line 572 
  return __retres;
}


#line 575  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_verify_pin(struct ptp_clock_info *ptp, unsigned int pin, enum ptp_pin_function func, unsigned int chan)
{
  int __retres;
  
#line 578 
  switch ((unsigned int)func) {
    case (unsigned int)0: 
#line 579 
    ;
    case (unsigned int)1: 
#line 580 
    ;
    case (unsigned int)2: 
#line 581 
    ;
    
#line 582 
    goto ldv_48889;
    case (unsigned int)3: 
#line 583 
    ;
    
#line 584 
    __retres = -1;
    
#line 584 
    goto return_label;
  }
  ldv_48889: 
#line 586 
  ;
  
#line 586 
  __retres = 0;
  return_label: 
#line 586 
                return __retres;
}


#line 596  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_tx_work(struct work_struct *work)
{
  struct igb_adapter *tmp;
  u32 tsynctxctl;
  int tmp_0;
  {
    
#line 598 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 598 
    tmp = (struct igb_adapter *)__mptr + 18446744073709538872U;
  }
  
#line 598 
  struct igb_adapter *adapter = tmp;
  
#line 600 
  struct e1000_hw *hw = & adapter->hw;
  
#line 603 
  if (adapter->ptp_tx_skb == (struct sk_buff *)0) 
#line 604 
                                                  goto return_label; else ;
  {
    unsigned long __dummy;
    unsigned long volatile __dummy2;
    
#line 606 
    tmp_0 = 1;
  }
  
#line 606 
  if (tmp_0 != 0) {
    int tmp_1;
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
#line 606 
      tmp_1 = 1;
    }
    
#line 606 
    if (tmp_1 != 0) {
      
#line 606 
      if ((long)((adapter->ptp_tx_start - jiffies) + 3750UL) < 0L) {
        
#line 608 
        dev_kfree_skb_any(adapter->ptp_tx_skb);
        
#line 609 
        adapter->ptp_tx_skb = (struct sk_buff *)0;
        
#line 610 
        clear_bit_unlock(3L,(unsigned long volatile *)(& adapter->state));
        
#line 611 
        adapter->tx_hwtstamp_timeouts += 1U;
        
#line 612 
        dev_warn((struct device const *)(& (adapter->pdev)->dev),"clearing Tx timestamp hang\n");
        
#line 613 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 616 
  tsynctxctl = igb_rd32(hw,46612U);
  
#line 617 
  if ((tsynctxctl & 1U) != 0U) 
#line 618 
                               igb_ptp_tx_hwtstamp(adapter); else 
#line 621 
                                                                  ldv_schedule_work_92(& adapter->ptp_tx_work);
  return_label: 
#line 622 
                return;
}


#line 624  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_overflow_check(struct work_struct *work)
{
  struct igb_adapter *tmp;
  struct timespec ts;
  {
    
#line 627 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 627 
    tmp = (struct igb_adapter *)__mptr + 18446744073709539096U;
  }
  
#line 626 
  struct igb_adapter *igb = tmp;
  
#line 630 
  (*(igb->ptp_caps.gettime64))(& igb->ptp_caps,& ts);
  {
    
#line 632 
    struct _ddebug descriptor = {.modname = "igb", .function = "igb_ptp_overflow_check", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c", .format = "igb overflow check at %lld.%09lu\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))633U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 632 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 632 
                                                        __dynamic_pr_debug(& descriptor,"igb overflow check at %lld.%09lu\n",(long long)ts.tv_sec,ts.tv_nsec); else ;
  }
  
#line 635 
  ldv_schedule_delayed_work_93(& igb->ptp_overflow_work,135000UL);
  
#line 636 
  return;
}


#line 648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_rx_hang(struct igb_adapter *adapter)
{
  unsigned long rx_event;
  int tmp_0;
  int tmp_2;
  
#line 650 
  struct e1000_hw *hw = & adapter->hw;
  
#line 651 
  u32 tsyncrxctl = igb_rd32(hw,46624U);
  
#line 654 
  if (hw->mac.type != (unsigned int)e1000_82576) 
#line 655 
                                                 goto return_label; else ;
  
#line 660 
  if ((tsyncrxctl & 1U) == 0U) {
    
#line 661 
    adapter->last_rx_ptp_check = jiffies;
    
#line 662 
    goto return_label;
  }
  else ;
  
#line 666 
  rx_event = adapter->last_rx_ptp_check;
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
#line 667 
    tmp_0 = 1;
  }
  
#line 667 
  if (tmp_0 != 0) {
    int tmp_1;
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
#line 667 
      tmp_1 = 1;
    }
    
#line 667 
    if (tmp_1 != 0) {
      
#line 667 
      if ((long)(rx_event - adapter->last_rx_timestamp) < 0L) 
#line 668 
                                                              rx_event = adapter->last_rx_timestamp; else ;
    }
    else ;
  }
  else ;
  {
    unsigned long __dummy_1;
    unsigned long volatile __dummy2_1;
    
#line 671 
    tmp_2 = 1;
  }
  
#line 671 
  if (tmp_2 != 0) {
    int tmp_3;
    {
      unsigned long __dummy_2;
      unsigned long __dummy2_2;
      
#line 671 
      tmp_3 = 1;
    }
    
#line 671 
    if (tmp_3 != 0) {
      
#line 671 
      if ((long)((rx_event - jiffies) + 1250UL) < 0L) {
        
#line 672 
        igb_rd32(hw,46632U);
        
#line 673 
        adapter->last_rx_ptp_check = jiffies;
        
#line 674 
        adapter->rx_hwtstamp_cleared += 1U;
        
#line 675 
        dev_warn((struct device const *)(& (adapter->pdev)->dev),"clearing Rx timestamp hang\n");
      }
      else ;
    }
    else ;
  }
  else ;
  return_label: 
#line 677 
                return;
}


#line 687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static void igb_ptp_tx_hwtstamp(struct igb_adapter *adapter)
{
  struct skb_shared_hwtstamps shhwtstamps;
  u64 regval;
  u32 tmp;
  u32 tmp_0;
  
#line 689 
  struct e1000_hw *hw = & adapter->hw;
  
#line 693 
  tmp = igb_rd32(hw,46616U);
  
#line 693 
  regval = (unsigned long long)tmp;
  
#line 694 
  tmp_0 = igb_rd32(hw,46620U);
  
#line 694 
  regval = ((unsigned long long)tmp_0 << 32) | regval;
  
#line 696 
  igb_ptp_systim_to_hwtstamp(adapter,& shhwtstamps,regval);
  
#line 697 
  skb_tstamp_tx(adapter->ptp_tx_skb,& shhwtstamps);
  
#line 698 
  dev_kfree_skb_any(adapter->ptp_tx_skb);
  
#line 699 
  adapter->ptp_tx_skb = (struct sk_buff *)0;
  
#line 700 
  clear_bit_unlock(3L,(unsigned long volatile *)(& adapter->state));
  
#line 701 
  return;
}


#line 713  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_rx_pktstamp(struct igb_q_vector *q_vector, unsigned char *va, struct sk_buff *skb)
{
  struct skb_shared_hwtstamps *tmp;
  
#line 717 
  __le64 *regval = (__le64 *)va;
  
#line 723 
  ;
  
#line 723 
  tmp = skb_hwtstamps(skb);
  
#line 723 
  ;
  
#line 723 
  igb_ptp_systim_to_hwtstamp(q_vector->adapter,tmp,*(regval + 1U));
  
#line 725 
  return;
}


#line 735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_rx_rgtstamp(struct igb_q_vector *q_vector, struct sk_buff *skb)
{
  u64 regval;
  u32 tmp;
  u32 tmp_0;
  u32 tmp_1;
  struct skb_shared_hwtstamps *tmp_2;
  
#line 738 
  struct igb_adapter *adapter = q_vector->adapter;
  
#line 739 
  struct e1000_hw *hw = & adapter->hw;
  
#line 752 
  tmp = igb_rd32(hw,46624U);
  
#line 752 
  if ((tmp & 1U) == 0U) 
#line 753 
                        goto return_label; else ;
  
#line 755 
  tmp_0 = igb_rd32(hw,46628U);
  
#line 755 
  regval = (unsigned long long)tmp_0;
  
#line 756 
  tmp_1 = igb_rd32(hw,46632U);
  
#line 756 
  regval = ((unsigned long long)tmp_1 << 32) | regval;
  
#line 758 
  ;
  
#line 758 
  tmp_2 = skb_hwtstamps(skb);
  
#line 758 
  ;
  
#line 758 
  igb_ptp_systim_to_hwtstamp(adapter,tmp_2,regval);
  
#line 763 
  adapter->last_rx_timestamp = jiffies;
  return_label: 
#line 764 
                return;
}


#line 775  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
int igb_ptp_get_ts_config(struct net_device *netdev, struct ifreq *ifr)
{
  int tmp_1;
  unsigned long tmp_0;
  
#line 777 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 778 
  struct hwtstamp_config *config = & adapter->tstamp_config;
  
#line 781 
  tmp_0 = copy_to_user(ifr->ifr_ifru.ifru_data,(void const *)config,12UL);
  
#line 781 
  if (tmp_0 != 0UL) 
#line 781 
                    tmp_1 = -14; else 
#line 781 
                                      tmp_1 = 0;
  
#line 781 
  return tmp_1;
}


#line 801  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
static int igb_ptp_set_timestamp_mode(struct igb_adapter *adapter, struct hwtstamp_config *config)
{
  int __retres;
  u32 regval;
  
#line 804 
  struct e1000_hw *hw = & adapter->hw;
  
#line 805 
  u32 tsync_tx_ctl = 16U;
  
#line 806 
  u32 tsync_rx_ctl = 16U;
  
#line 807 
  u32 tsync_rx_cfg = 0U;
  
#line 808 
  bool is_l4 = (_Bool)0;
  
#line 809 
  bool is_l2 = (_Bool)0;
  
#line 813 
  if (config->flags != 0) {
    
#line 814 
    __retres = -22;
    
#line 814 
    goto return_label;
  }
  else ;
  
#line 816 
  switch (config->tx_type) {
    case 0: 
#line 817 
    ;
    
#line 818 
    tsync_tx_ctl = 0U;
    case 1: 
#line 819 
    ;
    
#line 820 
    goto ldv_48970;
    default: 
#line 821 
    ;
    
#line 822 
    __retres = -34;
    
#line 822 
    goto return_label;
  }
  ldv_48970: 
#line 825 
  ;
  
#line 825 
  switch (config->rx_filter) {
    case 0: 
#line 826 
    ;
    
#line 827 
    tsync_rx_ctl = 0U;
    
#line 828 
    goto ldv_48973;
    case 4: 
#line 829 
    ;
    
#line 830 
    tsync_rx_ctl |= 2U;
    
#line 831 
    tsync_rx_cfg = 0U;
    
#line 832 
    is_l4 = (_Bool)1;
    
#line 833 
    goto ldv_48973;
    case 5: 
#line 834 
    ;
    
#line 835 
    tsync_rx_ctl |= 2U;
    
#line 836 
    tsync_rx_cfg = 1U;
    
#line 837 
    is_l4 = (_Bool)1;
    
#line 838 
    goto ldv_48973;
    case 12: 
#line 839 
    ;
    case 9: 
#line 840 
    ;
    case 6: 
#line 841 
    ;
    case 13: 
#line 842 
    ;
    case 10: 
#line 843 
    ;
    case 7: 
#line 844 
    ;
    case 14: 
#line 845 
    ;
    case 11: 
#line 846 
    ;
    case 8: 
#line 847 
    ;
    
#line 848 
    tsync_rx_ctl |= 10U;
    
#line 849 
    config->rx_filter = 12;
    
#line 850 
    is_l2 = (_Bool)1;
    
#line 851 
    is_l4 = (_Bool)1;
    
#line 852 
    goto ldv_48973;
    case 3: 
#line 853 
    ;
    case 1: 
#line 854 
    ;
    
#line 858 
    if (hw->mac.type != (unsigned int)e1000_82576) {
      
#line 859 
      tsync_rx_ctl |= 8U;
      
#line 860 
      config->rx_filter = 1;
      
#line 861 
      goto ldv_48973;
    }
    else ;
    default: 
#line 864 
    ;
    
#line 865 
    config->rx_filter = 0;
    
#line 866 
    __retres = -34;
    
#line 866 
    goto return_label;
  }
  ldv_48973: 
#line 869 
  ;
  
#line 869 
  if (hw->mac.type == (unsigned int)e1000_82575) {
    
#line 870 
    if ((tsync_rx_ctl | tsync_tx_ctl) != 0U) {
      
#line 871 
      __retres = -22;
      
#line 871 
      goto return_label;
    }
    else ;
    
#line 872 
    __retres = 0;
    
#line 872 
    goto return_label;
  }
  else ;
  
#line 879 
  if (hw->mac.type > (unsigned int)e1000_82576 && tsync_rx_ctl != 0U) {
    
#line 880 
    tsync_rx_ctl = 16U;
    
#line 881 
    tsync_rx_ctl |= 8U;
    
#line 882 
    config->rx_filter = 1;
    
#line 883 
    is_l2 = (_Bool)1;
    
#line 884 
    is_l4 = (_Bool)1;
    
#line 886 
    if ((unsigned int)hw->mac.type + 4294967290U <= 1U) {
      
#line 888 
      regval = igb_rd32(hw,9220U);
      
#line 889 
      regval |= 2147483648U;
      {
        u8 * volatile *tmp;
        {
          
#line 890 
          u8 *__var = (u8 *)0U;
          
#line 890 
          tmp = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 890 
        u8 *hw_addr = *tmp;
        
#line 890 
        if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 890 
                                               writel(regval,(void volatile *)(hw_addr + 9220U)); else ;
      }
    }
    else ;
  }
  else ;
  
#line 895 
  regval = igb_rd32(hw,46612U);
  
#line 896 
  regval &= 4294967279U;
  
#line 897 
  regval |= tsync_tx_ctl;
  {
    u8 * volatile *tmp_0;
    {
      
#line 898 
      u8 *__var_0 = (u8 *)0U;
      
#line 898 
      tmp_0 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 898 
    u8 *hw_addr_0 = *tmp_0;
    
#line 898 
    if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 898 
                                             writel(regval,(void volatile *)(hw_addr_0 + 46612U)); else ;
  }
  
#line 901 
  regval = igb_rd32(hw,46624U);
  
#line 902 
  regval &= 4294967265U;
  
#line 903 
  regval |= tsync_rx_ctl;
  {
    u8 * volatile *tmp_1;
    {
      
#line 904 
      u8 *__var_1 = (u8 *)0U;
      
#line 904 
      tmp_1 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 904 
    u8 *hw_addr_1 = *tmp_1;
    
#line 904 
    if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 904 
                                             writel(regval,(void volatile *)(hw_addr_1 + 46624U)); else ;
  }
  {
    u8 * volatile *tmp_2;
    {
      
#line 907 
      u8 *__var_2 = (u8 *)0U;
      
#line 907 
      tmp_2 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 907 
    u8 *hw_addr_2 = *tmp_2;
    
#line 907 
    if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 907 
                                             writel(tsync_rx_cfg,(void volatile *)(hw_addr_2 + 24400U)); else ;
  }
  
#line 910 
  if ((int)is_l2 != 0) {
    u8 * volatile *tmp_3;
    {
      
#line 911 
      u8 *__var_3 = (u8 *)0U;
      
#line 911 
      tmp_3 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 911 
    u8 *hw_addr_3 = *tmp_3;
    
#line 911 
    if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 911 
                                             writel(1140885751U,(void volatile *)(hw_addr_3 + 23740U)); else ;
  }
  else {
    u8 * volatile *tmp_4;
    {
      
#line 916 
      u8 *__var_4 = (u8 *)0U;
      
#line 916 
      tmp_4 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 916 
    u8 *hw_addr_4 = *tmp_4;
    
#line 916 
    if ((long)(hw_addr_4 == (u8 *)0U) == 0L) 
#line 916 
                                             writel(0U,(void volatile *)(hw_addr_4 + 23740U)); else ;
  }
  
#line 919 
  if ((int)is_l4 != 0) {
    
#line 920 
    u32 ftqf = 4160782353U;
    
#line 924 
    ftqf &= 4026531839U;
    {
      u8 * volatile *tmp_5;
      {
        
#line 926 
        u8 *__var_5 = (u8 *)0U;
        
#line 926 
        tmp_5 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 926 
      u8 *hw_addr_5 = *tmp_5;
      
#line 926 
      if ((long)(hw_addr_5 == (u8 *)0U) == 0L) 
#line 926 
                                               writel(16129U,(void volatile *)(hw_addr_5 + 23180U)); else ;
    }
    {
      u8 * volatile *tmp_6;
      {
        
#line 927 
        u8 *__var_6 = (u8 *)0U;
        
#line 927 
        tmp_6 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 927 
      u8 *hw_addr_6 = *tmp_6;
      
#line 927 
      if ((long)(hw_addr_6 == (u8 *)0U) == 0L) 
#line 927 
                                               writel(528384U,(void volatile *)(hw_addr_6 + 23212U)); else ;
    }
    
#line 929 
    if (hw->mac.type == (unsigned int)e1000_82576) {
      {
        u8 * volatile *tmp_7;
        {
          
#line 931 
          u8 *__var_7 = (u8 *)0U;
          
#line 931 
          tmp_7 = (u8 * volatile *)(& hw->hw_addr);
        }
        
#line 931 
        u8 *hw_addr_7 = *tmp_7;
        
#line 931 
        if ((long)(hw_addr_7 == (u8 *)0U) == 0L) 
#line 931 
                                                 writel(16129U,(void volatile *)(hw_addr_7 + 22988U)); else ;
      }
      
#line 932 
      ftqf &= 2147483647U;
    }
    else ;
    {
      u8 * volatile *tmp_8;
      {
        
#line 934 
        u8 *__var_8 = (u8 *)0U;
        
#line 934 
        tmp_8 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 934 
      u8 *hw_addr_8 = *tmp_8;
      
#line 934 
      if ((long)(hw_addr_8 == (u8 *)0U) == 0L) 
#line 934 
                                               writel(ftqf,(void volatile *)(hw_addr_8 + 23020U)); else ;
    }
  }
  else {
    u8 * volatile *tmp_9;
    {
      
#line 936 
      u8 *__var_9 = (u8 *)0U;
      
#line 936 
      tmp_9 = (u8 * volatile *)(& hw->hw_addr);
    }
    
#line 936 
    u8 *hw_addr_9 = *tmp_9;
    
#line 936 
    if ((long)(hw_addr_9 == (u8 *)0U) == 0L) 
#line 936 
                                             writel(4026531840U,(void volatile *)(hw_addr_9 + 23020U)); else ;
  }
  
#line 938 
  igb_rd32(hw,8U);
  
#line 941 
  regval = igb_rd32(hw,46616U);
  
#line 942 
  regval = igb_rd32(hw,46620U);
  
#line 943 
  regval = igb_rd32(hw,46628U);
  
#line 944 
  regval = igb_rd32(hw,46632U);
  
#line 946 
  __retres = 0;
  return_label: 
#line 946 
                return __retres;
}


#line 955  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
int igb_ptp_set_ts_config(struct net_device *netdev, struct ifreq *ifr)
{
  int __retres;
  struct hwtstamp_config config;
  int err;
  unsigned long tmp_0;
  int tmp_2;
  unsigned long tmp_1;
  
#line 957 
  struct igb_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 961 
  tmp_0 = copy_from_user((void *)(& config),(void const *)ifr->ifr_ifru.ifru_data,12UL);
  
#line 961 
  if (tmp_0 != 0UL) {
    
#line 962 
    __retres = -14;
    
#line 962 
    goto return_label;
  }
  else ;
  
#line 964 
  err = igb_ptp_set_timestamp_mode(adapter,& config);
  
#line 965 
  if (err != 0) {
    
#line 966 
    __retres = err;
    
#line 966 
    goto return_label;
  }
  else ;
  
#line 969 
  memcpy((void *)(& adapter->tstamp_config),(void const *)(& config),12UL);
  
#line 973 
  tmp_1 = copy_to_user(ifr->ifr_ifru.ifru_data,(void const *)(& config),12UL);
  
#line 973 
  if (tmp_1 != 0UL) 
#line 973 
                    tmp_2 = -14; else 
#line 973 
                                      tmp_2 = 0;
  
#line 973 
  __retres = tmp_2;
  return_label: 
#line 973 
                return __retres;
}


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_init(struct igb_adapter *adapter)
{
  int i;
  bool tmp_7;
  
#line 978 
  struct e1000_hw *hw = & adapter->hw;
  
#line 979 
  struct net_device *netdev = adapter->netdev;
  
#line 982 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 983 
    ;
    
#line 984 
    snprintf((char *)(& adapter->ptp_caps.name),16UL,"%pm",netdev->dev_addr);
    
#line 985 
    adapter->ptp_caps.owner = & __this_module;
    
#line 986 
    adapter->ptp_caps.max_adj = 999999881;
    
#line 987 
    adapter->ptp_caps.n_ext_ts = 0;
    
#line 988 
    adapter->ptp_caps.pps = 0;
    
#line 989 
    adapter->ptp_caps.adjfreq = & igb_ptp_adjfreq_82576;
    
#line 990 
    adapter->ptp_caps.adjtime = & igb_ptp_adjtime_82576;
    
#line 991 
    adapter->ptp_caps.gettime64 = & igb_ptp_gettime_82576;
    
#line 992 
    adapter->ptp_caps.settime64 = & igb_ptp_settime_82576;
    
#line 993 
    adapter->ptp_caps.enable = & igb_ptp_feature_enable;
    
#line 994 
    adapter->cc.read = & igb_ptp_read_82576;
    
#line 995 
    adapter->cc.mask = 18446744073709551615ULL;
    
#line 996 
    adapter->cc.mult = 1U;
    
#line 997 
    adapter->cc.shift = 19U;
    {
      u8 * volatile *tmp;
      {
        
#line 999 
        u8 *__var = (u8 *)0U;
        
#line 999 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 999 
      u8 *hw_addr = *tmp;
      
#line 999 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 999 
                                             writel(25165824U,(void volatile *)(hw_addr + 46600U)); else ;
    }
    
#line 1000 
    goto ldv_49039;
    case (unsigned int)3: 
#line 1001 
    ;
    case (unsigned int)5: 
#line 1002 
    ;
    case (unsigned int)4: 
#line 1003 
    ;
    
#line 1004 
    snprintf((char *)(& adapter->ptp_caps.name),16UL,"%pm",netdev->dev_addr);
    
#line 1005 
    adapter->ptp_caps.owner = & __this_module;
    
#line 1006 
    adapter->ptp_caps.max_adj = 62499999;
    
#line 1007 
    adapter->ptp_caps.n_ext_ts = 0;
    
#line 1008 
    adapter->ptp_caps.pps = 0;
    
#line 1009 
    adapter->ptp_caps.adjfreq = & igb_ptp_adjfreq_82580;
    
#line 1010 
    adapter->ptp_caps.adjtime = & igb_ptp_adjtime_82576;
    
#line 1011 
    adapter->ptp_caps.gettime64 = & igb_ptp_gettime_82576;
    
#line 1012 
    adapter->ptp_caps.settime64 = & igb_ptp_settime_82576;
    
#line 1013 
    adapter->ptp_caps.enable = & igb_ptp_feature_enable;
    
#line 1014 
    adapter->cc.read = & igb_ptp_read_82580;
    
#line 1015 
    adapter->cc.mask = 1099511627775ULL;
    
#line 1016 
    adapter->cc.mult = 1U;
    
#line 1017 
    adapter->cc.shift = 0U;
    {
      u8 * volatile *tmp_0;
      {
        
#line 1019 
        u8 *__var_0 = (u8 *)0U;
        
#line 1019 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1019 
      u8 *hw_addr_0 = *tmp_0;
      
#line 1019 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1019 
                                               writel(0U,(void volatile *)(hw_addr_0 + 46656U)); else ;
    }
    
#line 1020 
    goto ldv_49039;
    case (unsigned int)6: 
#line 1021 
    ;
    case (unsigned int)7: 
#line 1022 
    ;
    
#line 1023 
    i = 0;
    
#line 1023 
    goto ldv_49050;
    ldv_49049: 
#line 1024 
    ;
    {
      
#line 1024 
      struct ptp_pin_desc *ppd = & adapter->sdp_config[i];
      
#line 1026 
      snprintf((char *)(& ppd->name),64UL,"SDP%d",i);
      
#line 1027 
      ppd->index = (unsigned int)i;
      
#line 1028 
      ppd->func = 0U;
    }
    
#line 1023 
    i += 1;
    ldv_49050: 
#line 1024 
    ;
    
#line 1023 
    if (i <= 3) 
#line 1025 
                goto ldv_49049; else 
#line 1028 
                                     goto ldv_49051;
    ldv_49051: 
#line 1029 
    ;
    
#line 1030 
    snprintf((char *)(& adapter->ptp_caps.name),16UL,"%pm",netdev->dev_addr);
    
#line 1031 
    adapter->ptp_caps.owner = & __this_module;
    
#line 1032 
    adapter->ptp_caps.max_adj = 62499999;
    
#line 1033 
    adapter->ptp_caps.n_ext_ts = 2;
    
#line 1034 
    adapter->ptp_caps.n_per_out = 2;
    
#line 1035 
    adapter->ptp_caps.n_pins = 4;
    
#line 1036 
    adapter->ptp_caps.pps = 1;
    
#line 1037 
    adapter->ptp_caps.pin_config = (struct ptp_pin_desc *)(& adapter->sdp_config);
    
#line 1038 
    adapter->ptp_caps.adjfreq = & igb_ptp_adjfreq_82580;
    
#line 1039 
    adapter->ptp_caps.adjtime = & igb_ptp_adjtime_i210;
    
#line 1040 
    adapter->ptp_caps.gettime64 = & igb_ptp_gettime_i210;
    
#line 1041 
    adapter->ptp_caps.settime64 = & igb_ptp_settime_i210;
    
#line 1042 
    adapter->ptp_caps.enable = & igb_ptp_feature_enable_i210;
    
#line 1043 
    adapter->ptp_caps.verify = & igb_ptp_verify_pin;
    {
      u8 * volatile *tmp_1;
      {
        
#line 1045 
        u8 *__var_1 = (u8 *)0U;
        
#line 1045 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1045 
      u8 *hw_addr_1 = *tmp_1;
      
#line 1045 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1045 
                                               writel(0U,(void volatile *)(hw_addr_1 + 46656U)); else ;
    }
    
#line 1046 
    goto ldv_49039;
    default: 
#line 1047 
    ;
    
#line 1048 
    adapter->ptp_clock = (struct ptp_clock *)0;
    
#line 1049 
    goto return_label;
  }
  ldv_49039: 
#line 1052 
  ;
  
#line 1052 
  igb_rd32(hw,8U);
  
#line 1054 
  spinlock_check(& adapter->tmreg_lock);
  {
    struct lock_class_key __key;
    
#line 1054 
    __raw_spin_lock_init(& adapter->tmreg_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->tmreg_lock)->rlock",& __key);
  }
  {
    struct lock_class_key __key_0;
    
#line 1055 
    __init_work(& adapter->ptp_tx_work,0);
    
#line 1055 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 1055 
    adapter->ptp_tx_work.data = __constr_expr_37;
    
#line 1055 
    lockdep_init_map(& adapter->ptp_tx_work.lockdep_map,"(&adapter->ptp_tx_work)",& __key_0,0);
    
#line 1055 
    INIT_LIST_HEAD(& adapter->ptp_tx_work.entry);
    
#line 1055 
    adapter->ptp_tx_work.func = & igb_ptp_tx_work;
  }
  
#line 1058 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U) {
    struct timespec tmp_3;
    ktime_t tmp_2;
    
#line 1059 
    tmp_2 = ktime_get_real();
    
#line 1059 
    tmp_3 = ns_to_timespec(tmp_2.tv64);
    
#line 1059 
    struct timespec ts = tmp_3;
    
#line 1061 
    igb_ptp_settime_i210(& adapter->ptp_caps,(struct timespec const *)(& ts));
  }
  else {
    ktime_t tmp_4;
    
#line 1064 
    tmp_4 = ktime_get_real();
    
#line 1063 
    ;
    
#line 1063 
    ;
    
#line 1063 
    timecounter_init(& adapter->tc,(struct cyclecounter const *)(& adapter->cc),(unsigned long long)tmp_4.tv64);
    {
      struct lock_class_key __key_1;
      
#line 1066 
      __init_work(& adapter->ptp_overflow_work.work,0);
      
#line 1066 
      atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL_0};
      
#line 1066 
      adapter->ptp_overflow_work.work.data = __constr_expr_38;
      
#line 1066 
      lockdep_init_map(& adapter->ptp_overflow_work.work.lockdep_map,"(&(&adapter->ptp_overflow_work)->work)",& __key_1,0);
      
#line 1066 
      INIT_LIST_HEAD(& adapter->ptp_overflow_work.work.entry);
      
#line 1066 
      adapter->ptp_overflow_work.work.func = & igb_ptp_overflow_check;
    }
    {
      struct lock_class_key __key_2;
      
#line 1066 
      init_timer_key(& adapter->ptp_overflow_work.timer,2097152U,"(&(&adapter->ptp_overflow_work)->timer)",& __key_2);
    }
    
#line 1066 
    adapter->ptp_overflow_work.timer.function = & delayed_work_timer_fn;
    
#line 1066 
    adapter->ptp_overflow_work.timer.data = (unsigned long)(& adapter->ptp_overflow_work);
    
#line 1069 
    ldv_schedule_delayed_work_94(& adapter->ptp_overflow_work,135000UL);
  }
  
#line 1074 
  if (hw->mac.type > (unsigned int)e1000_82576) {
    {
      u8 * volatile *tmp_5;
      {
        
#line 1075 
        u8 *__var_2 = (u8 *)0U;
        
#line 1075 
        tmp_5 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1075 
      u8 *hw_addr_2 = *tmp_5;
      
#line 1075 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1075 
                                               writel(2U,(void volatile *)(hw_addr_2 + 46708U)); else ;
    }
    {
      u8 * volatile *tmp_6;
      {
        
#line 1076 
        u8 *__var_3 = (u8 *)0U;
        
#line 1076 
        tmp_6 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1076 
      u8 *hw_addr_3 = *tmp_6;
      
#line 1076 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1076 
                                               writel(524288U,(void volatile *)(hw_addr_3 + 208U)); else ;
    }
  }
  else ;
  
#line 1079 
  adapter->tstamp_config.rx_filter = 0;
  
#line 1080 
  adapter->tstamp_config.tx_type = 0;
  
#line 1082 
  adapter->ptp_clock = ptp_clock_register(& adapter->ptp_caps,& (adapter->pdev)->dev);
  
#line 1084 
  tmp_7 = IS_ERR_0((void const *)adapter->ptp_clock);
  
#line 1084 
  if ((int)tmp_7 != 0) {
    
#line 1085 
    adapter->ptp_clock = (struct ptp_clock *)0;
    
#line 1086 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"ptp_clock_register failed\n");
  }
  else {
    
#line 1088 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"added PHC on %s\n",(char *)(& (adapter->netdev)->name));
    
#line 1090 
    adapter->flags |= 32U;
  }
  return_label: 
#line 1092 
                return;
}


#line 1100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_stop(struct igb_adapter *adapter)
{
  
#line 1102 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 1103 
    ;
    case (unsigned int)3: 
#line 1104 
    ;
    case (unsigned int)5: 
#line 1105 
    ;
    case (unsigned int)4: 
#line 1106 
    ;
    
#line 1107 
    cancel_delayed_work_sync(& adapter->ptp_overflow_work);
    
#line 1108 
    goto ldv_49076;
    case (unsigned int)6: 
#line 1109 
    ;
    case (unsigned int)7: 
#line 1110 
    ;
    
#line 1112 
    goto ldv_49076;
    default: 
#line 1113 
    ;
    
#line 1114 
    goto return_label;
  }
  ldv_49076: 
#line 1117 
  ;
  
#line 1117 
  cancel_work_sync(& adapter->ptp_tx_work);
  
#line 1118 
  if (adapter->ptp_tx_skb != (struct sk_buff *)0) {
    
#line 1119 
    dev_kfree_skb_any(adapter->ptp_tx_skb);
    
#line 1120 
    adapter->ptp_tx_skb = (struct sk_buff *)0;
    
#line 1121 
    clear_bit_unlock(3L,(unsigned long volatile *)(& adapter->state));
  }
  else ;
  
#line 1124 
  if (adapter->ptp_clock != (struct ptp_clock *)0) {
    
#line 1125 
    ptp_clock_unregister(adapter->ptp_clock);
    
#line 1126 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"removed PHC on %s\n",(char *)(& (adapter->netdev)->name));
    
#line 1128 
    adapter->flags &= 4294967263U;
  }
  else ;
  return_label: 
#line 1130 
                return;
}


#line 1138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/igb/igb_ptp.c"
void igb_ptp_reset(struct igb_adapter *adapter)
{
  unsigned long flags;
  
#line 1140 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1143 
  if ((adapter->flags & 32U) == 0U) 
#line 1144 
                                    goto return_label; else ;
  
#line 1147 
  igb_ptp_set_timestamp_mode(adapter,& adapter->tstamp_config);
  
#line 1149 
  ldv___ldv_spin_lock_95(& adapter->tmreg_lock);
  
#line 1151 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 1152 
    ;
    {
      u8 * volatile *tmp;
      {
        
#line 1154 
        u8 *__var = (u8 *)0U;
        
#line 1154 
        tmp = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1154 
      u8 *hw_addr = *tmp;
      
#line 1154 
      if ((long)(hw_addr == (u8 *)0U) == 0L) 
#line 1154 
                                             writel(25165824U,(void volatile *)(hw_addr + 46600U)); else ;
    }
    
#line 1155 
    goto ldv_49089;
    case (unsigned int)3: 
#line 1156 
    ;
    case (unsigned int)5: 
#line 1157 
    ;
    case (unsigned int)4: 
#line 1158 
    ;
    case (unsigned int)6: 
#line 1159 
    ;
    case (unsigned int)7: 
#line 1160 
    ;
    {
      u8 * volatile *tmp_0;
      {
        
#line 1161 
        u8 *__var_0 = (u8 *)0U;
        
#line 1161 
        tmp_0 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1161 
      u8 *hw_addr_0 = *tmp_0;
      
#line 1161 
      if ((long)(hw_addr_0 == (u8 *)0U) == 0L) 
#line 1161 
                                               writel(0U,(void volatile *)(hw_addr_0 + 46656U)); else ;
    }
    {
      u8 * volatile *tmp_1;
      {
        
#line 1162 
        u8 *__var_1 = (u8 *)0U;
        
#line 1162 
        tmp_1 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1162 
      u8 *hw_addr_1 = *tmp_1;
      
#line 1162 
      if ((long)(hw_addr_1 == (u8 *)0U) == 0L) 
#line 1162 
                                               writel(0U,(void volatile *)(hw_addr_1 + 60U)); else ;
    }
    {
      u8 * volatile *tmp_2;
      {
        
#line 1163 
        u8 *__var_2 = (u8 *)0U;
        
#line 1163 
        tmp_2 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1163 
      u8 *hw_addr_2 = *tmp_2;
      
#line 1163 
      if ((long)(hw_addr_2 == (u8 *)0U) == 0L) 
#line 1163 
                                               writel(2U,(void volatile *)(hw_addr_2 + 46708U)); else ;
    }
    {
      u8 * volatile *tmp_3;
      {
        
#line 1164 
        u8 *__var_3 = (u8 *)0U;
        
#line 1164 
        tmp_3 = (u8 * volatile *)(& hw->hw_addr);
      }
      
#line 1164 
      u8 *hw_addr_3 = *tmp_3;
      
#line 1164 
      if ((long)(hw_addr_3 == (u8 *)0U) == 0L) 
#line 1164 
                                               writel(524288U,(void volatile *)(hw_addr_3 + 208U)); else ;
    }
    
#line 1165 
    goto ldv_49089;
    default: 
#line 1166 
    ;
    
#line 1168 
    goto out;
  }
  ldv_49089: 
#line 1172 
  ;
  
#line 1172 
  if ((unsigned int)hw->mac.type + 4294967290U <= 1U) {
    struct timespec tmp_5;
    ktime_t tmp_4;
    
#line 1173 
    tmp_4 = ktime_get_real();
    
#line 1173 
    tmp_5 = ns_to_timespec(tmp_4.tv64);
    
#line 1173 
    struct timespec ts = tmp_5;
    
#line 1175 
    igb_ptp_write_i210(adapter,(struct timespec const *)(& ts));
  }
  else {
    ktime_t tmp_6;
    
#line 1178 
    tmp_6 = ktime_get_real();
    
#line 1177 
    ;
    
#line 1177 
    ;
    
#line 1177 
    timecounter_init(& adapter->tc,(struct cyclecounter const *)(& adapter->cc),(unsigned long long)tmp_6.tv64);
  }
  out: 
#line 1180 
  ;
  
#line 1181 
  ldv_spin_unlock_irqrestore_96(& adapter->tmreg_lock,flags);
  return_label: 
#line 1182 
                return;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);


#line 84  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static bool IS_ERR_0(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 88 
  ret = ldv_is_err(ptr);
  
#line 89 
  __retres = (_Bool)(ret != 0L);
  
#line 89 
  return __retres;
}


#line 740  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1)
{
  
#line 744 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 746 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 747 
  return;
}


#line 750  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_73(spinlock_t *lock, unsigned long flags)
{
  
#line 754 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 756 
  spin_unlock_irqrestore(lock,flags);
  
#line 757 
  return;
}


#line 760  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1)
{
  
#line 764 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 766 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 767 
  return;
}


#line 770  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_75(spinlock_t *lock, unsigned long flags)
{
  
#line 774 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 776 
  spin_unlock_irqrestore(lock,flags);
  
#line 777 
  return;
}


#line 780  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1)
{
  
#line 784 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 786 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 787 
  return;
}


#line 790  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags)
{
  
#line 794 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 796 
  spin_unlock_irqrestore(lock,flags);
  
#line 797 
  return;
}


#line 800  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1)
{
  
#line 804 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 806 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 807 
  return;
}


#line 810  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_79(spinlock_t *lock, unsigned long flags)
{
  
#line 814 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 816 
  spin_unlock_irqrestore(lock,flags);
  
#line 817 
  return;
}


#line 820  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1)
{
  
#line 824 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 826 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 827 
  return;
}


#line 830  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_81(spinlock_t *lock, unsigned long flags)
{
  
#line 834 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 836 
  spin_unlock_irqrestore(lock,flags);
  
#line 837 
  return;
}


#line 840  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1)
{
  
#line 844 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 846 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 847 
  return;
}


#line 850  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags)
{
  
#line 854 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 856 
  spin_unlock_irqrestore(lock,flags);
  
#line 857 
  return;
}


#line 860  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1)
{
  
#line 864 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 866 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 867 
  return;
}


#line 870  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_85(spinlock_t *lock, unsigned long flags)
{
  
#line 874 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 876 
  spin_unlock_irqrestore(lock,flags);
  
#line 877 
  return;
}


#line 880  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1)
{
  
#line 884 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 886 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 887 
  return;
}


#line 890  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_87(spinlock_t *lock, unsigned long flags)
{
  
#line 894 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 896 
  spin_unlock_irqrestore(lock,flags);
  
#line 897 
  return;
}


#line 900  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1)
{
  
#line 904 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 906 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 907 
  return;
}


#line 910  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_89(spinlock_t *lock, unsigned long flags)
{
  
#line 914 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 916 
  spin_unlock_irqrestore(lock,flags);
  
#line 917 
  return;
}


#line 920  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_90(spinlock_t *ldv_func_arg1)
{
  
#line 924 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 926 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 927 
  return;
}


#line 930  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_91(spinlock_t *lock, unsigned long flags)
{
  
#line 934 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 936 
  spin_unlock_irqrestore(lock,flags);
  
#line 937 
  return;
}


#line 940  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static bool ldv_schedule_work_92(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 944 
  tmp = ldv_emg_schedule_work(work);
  
#line 944 
  __retres = tmp != 0;
  
#line 944 
  return __retres;
}


#line 948  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static bool ldv_schedule_delayed_work_93(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 952 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 952 
  __retres = tmp != 0;
  
#line 952 
  return __retres;
}


#line 956  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static bool ldv_schedule_delayed_work_94(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 960 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 960 
  __retres = tmp != 0;
  
#line 960 
  return __retres;
}


#line 964  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1)
{
  
#line 968 
  ldv_spin_model_lock((char *)"tmreg_lock_of_igb_adapter");
  
#line 970 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 971 
  return;
}


#line 974  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/weaver/.tmp_igb_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_96(spinlock_t *lock, unsigned long flags)
{
  
#line 978 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_igb_adapter");
  
#line 980 
  spin_unlock_irqrestore(lock,flags);
  
#line 981 
  return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0);


#line 127 
void *ldv_interrupt_scenario_18(void *arg0);


#line 128 
void *ldv_interrupt_scenario_19(void *arg0);


#line 130 
int main(void);


#line 132 
void ldv_dispatch_register_10_3(struct pci_driver *arg0);


#line 133 
void ldv_dispatch_register_9_4(struct net_device *arg0);


#line 135 
void *ldv_interrupt_scenario_16(void *arg0);


#line 136 
void *ldv_timer_scenario_21(void *arg0);


#line 138 
void *ldv_initialization_1(void *arg0);


#line 139 
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 140 
void *ldv_pm_ops_scenario_15(void *arg0);


#line 141 
void ldv_dispatch_deregister_8_1(struct pci_driver *arg0);


#line 144 
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0);


#line 145 
void ldv_dispatch_irq_deregister_6_1(int arg0);


#line 146 
void *ldv_pci_scenario_17(void *arg0);


#line 149 
void ldv_dispatch_instance_deregister_12_1(struct timer_list *arg0);


#line 151 
void *ldv_random_allocationless_scenario_22(void *arg0);


#line 152 
void *ldv_interrupt_scenario_20(void *arg0);


#line 154 
void *ldv_interrupt_scenario_14(void *arg0);


#line 158  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 159  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 160  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_21;

#line 161  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 162  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_22;

#line 164  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 165  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_20;

#line 166  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 170  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_22 *cf_arg_22;
  int tmp;
  
#line 173 
  tmp = ldv_undef_int();
  
#line 173 
  switch (tmp) {
    case 0: 
#line 174 
    ;
    
#line 175 
    ret = pthread_join(ldv_thread_22,(void **)0);
    
#line 176 
    __VERIFIER_assume(ret == 0);
    
#line 177 
    goto ldv_44881;
    default: 
#line 179 
    ;
    
#line 179 
    __VERIFIER_assume(0);
  }
  ldv_44881: 
#line 180 
  ;
  
#line 181 
  return;
}


#line 185  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  _Bool __retres;
  struct work_struct *ldv_7_ldv_param_0_2;
  struct delayed_work *ldv_7_delayed_work;
  int tmp_0;
  
#line 193 
  tmp_0 = ldv_undef_int();
  
#line 193 
  if (tmp_0 != 0) {
    
#line 195 
    ldv_7_delayed_work = arg0;
    
#line 199 
    ldv_7_ldv_param_0_2 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    
#line 203 
    if (ldv_7_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      
#line 205 
      (*(ldv_7_delayed_work->work.func))(ldv_7_ldv_param_0_2); else ;
    
#line 210 
    ldv_free((void *)ldv_7_ldv_param_0_2);
    
#line 214 
    __retres = (_Bool)1;
    
#line 214 
    goto return_label;
  }
  else {
    
#line 221 
    __retres = (_Bool)0;
    
#line 221 
    goto return_label;
  }
  return_label: 
#line 193 
                return __retres;
}


#line 231  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_18(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_18_ret_val;
  int ldv_18_line;
  void *ldv_18_data;
  enum irqreturn (*ldv_18_thread)(int , void *);
  int tmp;
  
#line 237 
  enum irqreturn (*ldv_18_callback)(int , void *) = & ldv_emg_wrapper_igb_intr_2;
  
#line 240 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 245 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 246 
    ldv_18_line = data->arg0;
    
#line 247 
    ldv_18_callback = data->arg1;
    
#line 248 
    ldv_18_thread = data->arg2;
    
#line 249 
    ldv_18_data = data->arg3;
    
#line 250 
    ldv_free((void *)data);
  }
  else ;
  
#line 256 
  ldv_switch_to_interrupt_context();
  
#line 258 
  ldv_18_ret_val = ldv_emg_wrapper_igb_intr_2(ldv_18_line,ldv_18_data);
  
#line 260 
  ldv_switch_to_process_context();
  
#line 263 
  tmp = ldv_undef_int();
  
#line 263 
  if (tmp != 0) {
    
#line 265 
    __VERIFIER_assume(ldv_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 269 
    if (ldv_18_thread != (enum irqreturn (*)(int , void *))0) 
#line 271 
                                                              (*ldv_18_thread)(ldv_18_line,ldv_18_data); else ;
  }
  else 
#line 278 
       __VERIFIER_assume(ldv_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 287 
  __retres = (void *)0;
  
#line 287 
  goto return_label;
  
#line 289 
  __retres = (void *)0;
  return_label: 
#line 289 
                return __retres;
}


#line 294  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_9_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_22 *cf_arg_22;
  int tmp;
  
#line 297 
  tmp = ldv_undef_int();
  
#line 297 
  switch (tmp) {
    case 0: 
#line 298 
    ;
    
#line 299 
    cf_arg_22 = (struct ldv_struct_random_allocationless_scenario_22 *)ldv_xmalloc(16UL);
    
#line 300 
    cf_arg_22->arg0 = arg0;
    
#line 301 
    ret = pthread_create(& ldv_thread_22,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_22,(void *)cf_arg_22);
    
#line 302 
    __VERIFIER_assume(ret == 0);
    
#line 303 
    goto ldv_44908;
    default: 
#line 305 
    ;
    
#line 305 
    __VERIFIER_assume(0);
  }
  ldv_44908: 
#line 306 
  ;
  
#line 307 
  return;
}


#line 311  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 314 
  struct pci_driver *ldv_10_pci_driver = ldv_emg_alias_igb_driver_2;
  
#line 318 
  tmp_0 = ldv_undef_int();
  
#line 318 
  if (tmp_0 != 0) {
    
#line 320 
    ldv_10_pci_driver = arg0;
    
#line 324 
    ldv_dispatch_register_10_3(ldv_10_pci_driver);
    
#line 328 
    __retres = 0;
    
#line 328 
    goto return_label;
  }
  else {
    int tmp;
    
#line 335 
    tmp = ldv_undef_int_negative();
    
#line 335 
    __retres = tmp;
    
#line 335 
    goto return_label;
  }
  return_label: 
#line 318 
                return __retres;
}


#line 345  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 348 
  ldv_initialize();
  
#line 351 
  ldv_initialization_1((void *)0);
  
#line 353 
  __retres = 0;
  
#line 353 
  return __retres;
}


#line 358  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_4_netdev;
  int tmp_0;
  
#line 365 
  tmp_0 = ldv_undef_int();
  
#line 365 
  if (tmp_0 != 0) {
    
#line 367 
    ldv_4_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 371 
    __retres = ldv_4_netdev;
    
#line 371 
    goto return_label;
  }
  else {
    
#line 378 
    __retres = (struct net_device *)0;
    
#line 378 
    goto return_label;
  }
  return_label: 
#line 365 
                return __retres;
}


#line 388  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_10_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_17 *cf_arg_17;
  int tmp;
  
#line 391 
  tmp = ldv_undef_int();
  
#line 391 
  switch (tmp) {
    case 0: 
#line 392 
    ;
    
#line 393 
    cf_arg_17 = (struct ldv_struct_pci_scenario_17 *)ldv_xmalloc(16UL);
    
#line 394 
    cf_arg_17->arg0 = arg0;
    
#line 395 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_pci_scenario_17,(void *)cf_arg_17);
    
#line 396 
    __VERIFIER_assume(ret == 0);
    
#line 397 
    goto ldv_44931;
    default: 
#line 399 
    ;
    
#line 399 
    __VERIFIER_assume(0);
  }
  ldv_44931: 
#line 400 
  ;
  
#line 401 
  return;
}


#line 405  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_19(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_19_ret_val;
  int ldv_19_line;
  void *ldv_19_data;
  enum irqreturn (*ldv_19_thread)(int , void *);
  int tmp;
  
#line 411 
  enum irqreturn (*ldv_19_callback)(int , void *) = & ldv_emg_wrapper_igb_intr_msi_2;
  
#line 414 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 419 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 420 
    ldv_19_line = data->arg0;
    
#line 421 
    ldv_19_callback = data->arg1;
    
#line 422 
    ldv_19_thread = data->arg2;
    
#line 423 
    ldv_19_data = data->arg3;
    
#line 424 
    ldv_free((void *)data);
  }
  else ;
  
#line 430 
  ldv_switch_to_interrupt_context();
  
#line 432 
  ldv_19_ret_val = ldv_emg_wrapper_igb_intr_msi_2(ldv_19_line,ldv_19_data);
  
#line 434 
  ldv_switch_to_process_context();
  
#line 437 
  tmp = ldv_undef_int();
  
#line 437 
  if (tmp != 0) {
    
#line 439 
    __VERIFIER_assume(ldv_19_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 443 
    if (ldv_19_thread != (enum irqreturn (*)(int , void *))0) 
#line 445 
                                                              (*ldv_19_thread)(ldv_19_line,ldv_19_data); else ;
  }
  else 
#line 452 
       __VERIFIER_assume(ldv_19_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 461 
  __retres = (void *)0;
  
#line 461 
  goto return_label;
  
#line 463 
  __retres = (void *)0;
  return_label: 
#line 463 
                return __retres;
}


#line 468  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_13_line;
  void *ldv_13_data;
  enum irqreturn (*ldv_13_thread)(int , void *);
  int tmp_0;
  
#line 473 
  enum irqreturn (*ldv_13_callback)(int , void *) = & ldv_emg_wrapper_igb_msix_other_2;
  
#line 478 
  tmp_0 = ldv_undef_int();
  
#line 478 
  if (tmp_0 != 0) {
    
#line 480 
    ldv_13_line = (int)arg0;
    
#line 481 
    ldv_13_callback = arg1;
    
#line 482 
    ldv_13_thread = (enum irqreturn (*)(int , void *))0;
    
#line 483 
    ldv_13_data = arg4;
    
#line 487 
    ldv_dispatch_irq_register_13_3(ldv_13_line,ldv_13_callback,ldv_13_thread,ldv_13_data);
    
#line 491 
    __retres = 0;
    
#line 491 
    goto return_label;
  }
  else {
    int tmp;
    
#line 498 
    tmp = ldv_undef_int_negative();
    
#line 498 
    __retres = tmp;
    
#line 498 
    goto return_label;
  }
  return_label: 
#line 478 
                return __retres;
}


#line 508  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_16(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_16_ret_val;
  int ldv_16_line;
  void *ldv_16_data;
  enum irqreturn (*ldv_16_thread)(int , void *);
  int tmp;
  
#line 514 
  enum irqreturn (*ldv_16_callback)(int , void *) = & ldv_emg_wrapper_igb_test_intr_2;
  
#line 517 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 522 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 523 
    ldv_16_line = data->arg0;
    
#line 524 
    ldv_16_callback = data->arg1;
    
#line 525 
    ldv_16_thread = data->arg2;
    
#line 526 
    ldv_16_data = data->arg3;
    
#line 527 
    ldv_free((void *)data);
  }
  else ;
  
#line 533 
  ldv_switch_to_interrupt_context();
  
#line 535 
  ldv_16_ret_val = ldv_emg_wrapper_igb_test_intr_2(ldv_16_line,ldv_16_data);
  
#line 537 
  ldv_switch_to_process_context();
  
#line 540 
  tmp = ldv_undef_int();
  
#line 540 
  if (tmp != 0) {
    
#line 542 
    __VERIFIER_assume(ldv_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 546 
    if (ldv_16_thread != (enum irqreturn (*)(int , void *))0) 
#line 548 
                                                              (*ldv_16_thread)(ldv_16_line,ldv_16_data); else ;
  }
  else 
#line 555 
       __VERIFIER_assume(ldv_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 564 
  __retres = (void *)0;
  
#line 564 
  goto return_label;
  
#line 566 
  __retres = (void *)0;
  return_label: 
#line 566 
                return __retres;
}


#line 571  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_21(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_21_container;
  
#line 576 
  struct ldv_struct_timer_scenario_21 *data = (struct ldv_struct_timer_scenario_21 *)arg0;
  
#line 581 
  if (data != (struct ldv_struct_timer_scenario_21 *)0) {
    
#line 582 
    ldv_21_container = data->arg0;
    
#line 583 
    ldv_free((void *)data);
  }
  else ;
  
#line 588 
  if (ldv_21_container->function != (void (*)(unsigned long ))0) {
    
#line 590 
    ldv_switch_to_interrupt_context();
    
#line 592 
    (*(ldv_21_container->function))(ldv_21_container->data);
    
#line 594 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 603 
  __retres = (void *)0;
  
#line 603 
  goto return_label;
  
#line 605 
  __retres = (void *)0;
  return_label: 
#line 605 
                return __retres;
}


#line 610  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_work(struct work_struct *arg0)
{
  _Bool __retres;
  struct work_struct *ldv_11_work_struct;
  int tmp;
  
#line 617 
  tmp = ldv_undef_int();
  
#line 617 
  if (tmp != 0) {
    
#line 619 
    ldv_11_work_struct = arg0;
    
#line 623 
    if (ldv_11_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 625 
      (*(ldv_11_work_struct->func))(ldv_11_work_struct); else ;
    
#line 630 
    __retres = (_Bool)1;
    
#line 630 
    goto return_label;
  }
  else {
    
#line 637 
    __retres = (_Bool)0;
    
#line 637 
    goto return_label;
  }
  return_label: 
#line 617 
                return __retres;
}


#line 647  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 654 
  ldv_1_ret = ldv_emg_igb_init_module();
  
#line 655 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 658 
  tmp = ldv_undef_int();
  
#line 658 
  if (tmp != 0) {
    
#line 660 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 664 
    __retres = (void *)0;
    
#line 664 
    goto return_label;
  }
  else {
    
#line 668 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 673 
    ldv_emg_igb_exit_module();
    
#line 677 
    __retres = (void *)0;
    
#line 677 
    goto return_label;
  }
  
#line 680 
  __retres = (void *)0;
  return_label: 
#line 680 
                return __retres;
}


#line 685  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_16;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_18;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_19;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_20;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_14;
  int tmp;
  
#line 692 
  tmp = ldv_undef_int();
  
#line 692 
  switch (tmp) {
    case 0: 
#line 693 
    ;
    
#line 694 
    cf_arg_16 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 695 
    cf_arg_16->arg0 = arg0;
    
#line 696 
    cf_arg_16->arg1 = arg1;
    
#line 697 
    cf_arg_16->arg2 = arg2;
    
#line 698 
    cf_arg_16->arg3 = arg3;
    
#line 699 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_interrupt_scenario_16,(void *)cf_arg_16);
    
#line 700 
    __VERIFIER_assume(ret == 0);
    
#line 701 
    goto ldv_45006;
    case 1: 
#line 703 
    ;
    
#line 704 
    cf_arg_18 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 705 
    cf_arg_18->arg0 = arg0;
    
#line 706 
    cf_arg_18->arg1 = arg1;
    
#line 707 
    cf_arg_18->arg2 = arg2;
    
#line 708 
    cf_arg_18->arg3 = arg3;
    
#line 709 
    ret = pthread_create(& ldv_thread_18,(pthread_attr_t const *)0,& ldv_interrupt_scenario_18,(void *)cf_arg_18);
    
#line 710 
    __VERIFIER_assume(ret == 0);
    
#line 711 
    goto ldv_45006;
    case 2: 
#line 713 
    ;
    
#line 714 
    cf_arg_19 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 715 
    cf_arg_19->arg0 = arg0;
    
#line 716 
    cf_arg_19->arg1 = arg1;
    
#line 717 
    cf_arg_19->arg2 = arg2;
    
#line 718 
    cf_arg_19->arg3 = arg3;
    
#line 719 
    ret = pthread_create(& ldv_thread_19,(pthread_attr_t const *)0,& ldv_interrupt_scenario_19,(void *)cf_arg_19);
    
#line 720 
    __VERIFIER_assume(ret == 0);
    
#line 721 
    goto ldv_45006;
    case 3: 
#line 723 
    ;
    
#line 724 
    cf_arg_20 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 725 
    cf_arg_20->arg0 = arg0;
    
#line 726 
    cf_arg_20->arg1 = arg1;
    
#line 727 
    cf_arg_20->arg2 = arg2;
    
#line 728 
    cf_arg_20->arg3 = arg3;
    
#line 729 
    ret = pthread_create(& ldv_thread_20,(pthread_attr_t const *)0,& ldv_interrupt_scenario_20,(void *)cf_arg_20);
    
#line 730 
    __VERIFIER_assume(ret == 0);
    
#line 731 
    goto ldv_45006;
    case 4: 
#line 733 
    ;
    
#line 734 
    cf_arg_14 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 735 
    cf_arg_14->arg0 = arg0;
    
#line 736 
    cf_arg_14->arg1 = arg1;
    
#line 737 
    cf_arg_14->arg2 = arg2;
    
#line 738 
    cf_arg_14->arg3 = arg3;
    
#line 739 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_interrupt_scenario_14,(void *)cf_arg_14);
    
#line 740 
    __VERIFIER_assume(ret == 0);
    
#line 741 
    goto ldv_45006;
    default: 
#line 743 
    ;
    
#line 743 
    __VERIFIER_assume(0);
  }
  ldv_45006: 
#line 744 
  ;
  
#line 745 
  return;
}


#line 749  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pm_ops_scenario_15(void *arg0)
{
  void *__retres;
  struct device *ldv_15_device;
  int tmp;
  
#line 752 
  struct dev_pm_ops *ldv_15_pm_ops = ldv_emg_alias_igb_pm_ops_4;
  
#line 763 
  goto ldv_do_15;
  
#line 765 
  __retres = (void *)0;
  
#line 765 
  goto return_label;
  ldv_do_15: 
#line 768 
  ;
  
#line 771 
  tmp = ldv_undef_int();
  
#line 771 
  switch (tmp) {
    int tmp_0;
    case 1: 
#line 772 
    ;
    
#line 775 
    ldv_emg_wrapper_igb_runtime_idle_3(ldv_15_device);
    
#line 782 
    goto ldv_do_15;
    case 2: 
#line 785 
    ;
    
#line 788 
    ldv_emg_wrapper_igb_runtime_suspend_6(ldv_15_device);
    
#line 793 
    ldv_emg_wrapper_igb_runtime_resume_7(ldv_15_device);
    
#line 800 
    goto ldv_do_15;
    case 3: 
#line 803 
    ;
    
#line 805 
    if (ldv_15_pm_ops->prepare != (int (*)(struct device *))0) 
#line 807 
                                                               (*(ldv_15_pm_ops->prepare))(ldv_15_device); else ;
    
#line 811 
    tmp_0 = ldv_undef_int();
    
#line 811 
    switch (tmp_0) {
      int tmp_1;
      int tmp_2;
      int tmp_3;
      case 1: 
#line 812 
      ;
      
#line 815 
      ldv_emg_wrapper_igb_suspend_2(ldv_15_device);
      
#line 818 
      tmp_1 = ldv_undef_int();
      
#line 818 
      if (tmp_1 != 0) {
        
#line 820 
        if (ldv_15_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
          
#line 822 
          (*(ldv_15_pm_ops->suspend_noirq))(ldv_15_device); else ;
        
#line 827 
        if (ldv_15_pm_ops->resume_noirq != (int (*)(struct device *))0) 
          
#line 829 
          (*(ldv_15_pm_ops->resume_noirq))(ldv_15_device); else ;
      }
      else {
        
#line 836 
        if (ldv_15_pm_ops->suspend_late != (int (*)(struct device *))0) 
          
#line 838 
          (*(ldv_15_pm_ops->suspend_late))(ldv_15_device); else ;
        
#line 843 
        if (ldv_15_pm_ops->resume_early != (int (*)(struct device *))0) 
          
#line 845 
          (*(ldv_15_pm_ops->resume_early))(ldv_15_device); else ;
      }
      
#line 852 
      ldv_emg_wrapper_igb_resume_5(ldv_15_device);
      
#line 855 
      goto ldv_45022;
      case 2: 
#line 857 
      ;
      
#line 860 
      ldv_emg_wrapper_igb_suspend_2(ldv_15_device);
      
#line 863 
      tmp_2 = ldv_undef_int();
      
#line 863 
      if (tmp_2 != 0) {
        
#line 865 
        if (ldv_15_pm_ops->freeze_late != (int (*)(struct device *))0) 
          
#line 867 
          (*(ldv_15_pm_ops->freeze_late))(ldv_15_device); else ;
        
#line 872 
        if (ldv_15_pm_ops->thaw_early != (int (*)(struct device *))0) 
          
#line 874 
          (*(ldv_15_pm_ops->thaw_early))(ldv_15_device); else ;
      }
      else {
        
#line 881 
        if (ldv_15_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
          
#line 883 
          (*(ldv_15_pm_ops->freeze_noirq))(ldv_15_device); else ;
        
#line 888 
        if (ldv_15_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
          
#line 890 
          (*(ldv_15_pm_ops->thaw_noirq))(ldv_15_device); else ;
      }
      
#line 897 
      ldv_emg_wrapper_igb_resume_5(ldv_15_device);
      
#line 900 
      goto ldv_45022;
      case 3: 
#line 902 
      ;
      
#line 905 
      ldv_emg_wrapper_igb_suspend_2(ldv_15_device);
      
#line 908 
      tmp_3 = ldv_undef_int();
      
#line 908 
      if (tmp_3 != 0) {
        
#line 910 
        if (ldv_15_pm_ops->poweroff_late != (int (*)(struct device *))0) 
          
#line 912 
          (*(ldv_15_pm_ops->poweroff_late))(ldv_15_device); else ;
        
#line 917 
        if (ldv_15_pm_ops->restore_early != (int (*)(struct device *))0) 
          
#line 919 
          (*(ldv_15_pm_ops->restore_early))(ldv_15_device); else ;
      }
      else {
        
#line 926 
        if (ldv_15_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
          
#line 928 
          (*(ldv_15_pm_ops->poweroff_noirq))(ldv_15_device); else ;
        
#line 933 
        if (ldv_15_pm_ops->restore_noirq != (int (*)(struct device *))0) 
          
#line 935 
          (*(ldv_15_pm_ops->restore_noirq))(ldv_15_device); else ;
      }
      
#line 942 
      ldv_emg_wrapper_igb_resume_5(ldv_15_device);
      
#line 945 
      goto ldv_45022;
      default: 
#line 947 
      ;
      
#line 947 
      __VERIFIER_assume(0);
    }
    ldv_45022: 
#line 950 
    ;
    
#line 950 
    if (ldv_15_pm_ops->complete != (void (*)(struct device *))0) 
#line 952 
                                                                 (*(ldv_15_pm_ops->complete))(ldv_15_device); else ;
    
#line 960 
    goto ldv_do_15;
    case 4: 
#line 963 
    ;
    
#line 969 
    __retres = (void *)0;
    
#line 969 
    goto return_label;
    default: 
#line 972 
    ;
    
#line 972 
    __VERIFIER_assume(0);
  }
  
#line 975 
  __retres = (void *)0;
  return_label: 
#line 975 
                return __retres;
}


#line 980  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_8_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_17 *cf_arg_17;
  int tmp;
  
#line 983 
  tmp = ldv_undef_int();
  
#line 983 
  switch (tmp) {
    case 0: 
#line 984 
    ;
    
#line 985 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 986 
    __VERIFIER_assume(ret == 0);
    
#line 987 
    goto ldv_45034;
    default: 
#line 989 
    ;
    
#line 989 
    __VERIFIER_assume(0);
  }
  ldv_45034: 
#line 990 
  ;
  
#line 991 
  return;
}


#line 995  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_12_timer_list;
  
#line 1001 
  ldv_12_timer_list = arg0;
  
#line 1005 
  ldv_dispatch_instance_deregister_12_1(ldv_12_timer_list);
  
#line 1006 
  ;
  
#line 1006 
  __retres = 0;
  
#line 1006 
  return __retres;
}


#line 1014  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 1017 
  struct pci_driver *ldv_8_pci_driver = ldv_emg_alias_igb_driver_2;
  
#line 1020 
  ldv_8_pci_driver = arg0;
  
#line 1024 
  ldv_dispatch_deregister_8_1(ldv_8_pci_driver);
  
#line 1028 
  goto return_label;
  return_label: 
#line 1030 
                return;
}


#line 1035  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_21 *cf_arg_21;
  int tmp;
  
#line 1038 
  tmp = ldv_undef_int();
  
#line 1038 
  switch (tmp) {
    case 0: 
#line 1039 
    ;
    
#line 1040 
    cf_arg_21 = (struct ldv_struct_timer_scenario_21 *)ldv_xmalloc(16UL);
    
#line 1041 
    cf_arg_21->arg0 = arg0;
    
#line 1042 
    ret = pthread_create(& ldv_thread_21,(pthread_attr_t const *)0,& ldv_timer_scenario_21,(void *)cf_arg_21);
    
#line 1043 
    __VERIFIER_assume(ret == 0);
    
#line 1044 
    goto ldv_45050;
    default: 
#line 1046 
    ;
    
#line 1046 
    __VERIFIER_assume(0);
  }
  ldv_45050: 
#line 1047 
  ;
  
#line 1048 
  return;
}


#line 1052  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_6_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_6 *cf_arg_16;
  struct ldv_struct_free_irq_6 *cf_arg_18;
  struct ldv_struct_free_irq_6 *cf_arg_19;
  struct ldv_struct_free_irq_6 *cf_arg_20;
  struct ldv_struct_free_irq_6 *cf_arg_14;
  int tmp;
  
#line 1059 
  tmp = ldv_undef_int();
  
#line 1059 
  switch (tmp) {
    case 0: 
#line 1060 
    ;
    
#line 1061 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 1062 
    __VERIFIER_assume(ret == 0);
    
#line 1063 
    goto ldv_45062;
    case 1: 
#line 1065 
    ;
    
#line 1066 
    ret = pthread_join(ldv_thread_18,(void **)0);
    
#line 1067 
    __VERIFIER_assume(ret == 0);
    
#line 1068 
    goto ldv_45062;
    case 2: 
#line 1070 
    ;
    
#line 1071 
    ret = pthread_join(ldv_thread_19,(void **)0);
    
#line 1072 
    __VERIFIER_assume(ret == 0);
    
#line 1073 
    goto ldv_45062;
    case 3: 
#line 1075 
    ;
    
#line 1076 
    ret = pthread_join(ldv_thread_20,(void **)0);
    
#line 1077 
    __VERIFIER_assume(ret == 0);
    
#line 1078 
    goto ldv_45062;
    case 4: 
#line 1080 
    ;
    
#line 1081 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 1082 
    __VERIFIER_assume(ret == 0);
    
#line 1083 
    goto ldv_45062;
    default: 
#line 1085 
    ;
    
#line 1085 
    __VERIFIER_assume(0);
  }
  ldv_45062: 
#line 1086 
  ;
  
#line 1087 
  return;
}


#line 1091  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_17(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_17_resource_1;
  struct pci_device_id *ldv_17_ldv_param_1_2;
  int ldv_17_ldv_param_1_3;
  struct pm_message ldv_17_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 1097 
  struct pci_driver *ldv_17_container = ldv_emg_alias_igb_driver_2;
  
#line 1098 
  int ldv_17_ret = ldv_undef_int();
  
#line 1101 
  struct ldv_struct_pci_scenario_17 *data = (struct ldv_struct_pci_scenario_17 *)arg0;
  
#line 1105 
  ldv_17_ret = ldv_undef_int();
  
#line 1108 
  if (data != (struct ldv_struct_pci_scenario_17 *)0) {
    
#line 1109 
    ldv_17_container = data->arg0;
    
#line 1110 
    ldv_free((void *)data);
  }
  else ;
  
#line 1121 
  goto ldv_main_17;
  
#line 1123 
  __retres = (void *)0;
  
#line 1123 
  goto return_label;
  ldv_main_17: 
#line 1126 
  ;
  
#line 1129 
  tmp_2 = ldv_undef_int();
  
#line 1129 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 1131 
    ldv_17_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 1136 
    ldv_pre_probe();
    
#line 1138 
    ldv_17_ret = ldv_emg_wrapper_igb_probe_4(ldv_17_resource_1,ldv_17_ldv_param_1_2);
    
#line 1140 
    ldv_17_ret = ldv_post_probe(ldv_17_ret);
    
#line 1144 
    ldv_free((void *)ldv_17_ldv_param_1_2);
    
#line 1147 
    tmp_1 = ldv_undef_int();
    
#line 1147 
    if (tmp_1 != 0) {
      
#line 1149 
      __VERIFIER_assume(ldv_17_ret == 0);
      
#line 1156 
      goto ldv_call_17;
    }
    else {
      
#line 1160 
      __VERIFIER_assume(ldv_17_ret != 0);
      
#line 1167 
      goto ldv_main_17;
    }
  }
  else {
    
#line 1179 
    __retres = (void *)0;
    
#line 1179 
    goto return_label;
  }
  
#line 1182 
  __retres = (void *)0;
  
#line 1182 
  goto return_label;
  ldv_call_17: 
#line 1185 
  ;
  
#line 1188 
  tmp_3 = ldv_undef_int();
  
#line 1188 
  switch (tmp_3) {
    case 1: 
#line 1189 
    ;
    
#line 1195 
    ldv_emg_wrapper_igb_pci_sriov_configure_2(ldv_17_resource_1,ldv_17_ldv_param_1_3);
    
#line 1205 
    goto ldv_call_17;
    case 2: 
#line 1208 
    ;
    
#line 1210 
    if (ldv_17_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 1212 
      ldv_17_ret = (*(ldv_17_container->suspend))(ldv_17_resource_1,ldv_17_resource_0);
      
#line 1214 
      ldv_17_ret = ldv_filter_err_code(ldv_17_ret);
    }
    else 
#line 1216 
         ldv_17_ret = ldv_undef_int();
    
#line 1221 
    if (ldv_17_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 1223 
      ldv_17_ret = (*(ldv_17_container->suspend_late))(ldv_17_resource_1,ldv_17_resource_0);
      
#line 1225 
      ldv_17_ret = ldv_filter_err_code(ldv_17_ret);
    }
    else 
#line 1227 
         ldv_17_ret = ldv_undef_int();
    
#line 1232 
    if (ldv_17_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 1234 
      (*(ldv_17_container->resume_early))(ldv_17_resource_1); else ;
    
#line 1239 
    if (ldv_17_container->resume != (int (*)(struct pci_dev *))0) 
#line 1241 
                                                                  (*(ldv_17_container->resume))(ldv_17_resource_1); else ;
    
#line 1249 
    goto ldv_call_17;
    case 3: 
#line 1252 
    ;
    
#line 1255 
    ldv_emg_wrapper_igb_shutdown_3(ldv_17_resource_1);
    
#line 1260 
    ldv_emg_wrapper_igb_remove_5(ldv_17_resource_1);
    
#line 1267 
    goto ldv_main_17;
    default: 
#line 1270 
    ;
    
#line 1270 
    __VERIFIER_assume(0);
  }
  
#line 1273 
  __retres = (void *)0;
  return_label: 
#line 1273 
                return __retres;
}


#line 1278  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_5_netdev;
  
#line 1284 
  ldv_5_netdev = arg0;
  
#line 1289 
  ldv_emg_wrapper_igb_close_2(ldv_5_netdev);
  
#line 1293 
  ldv_dispatch_deregister_5_1(ldv_5_netdev);
  
#line 1297 
  goto return_label;
  return_label: 
#line 1299 
                return;
}


#line 1304  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_6_line;
  
#line 1310 
  ldv_6_line = (int)arg0;
  
#line 1314 
  ldv_dispatch_irq_deregister_6_1(ldv_6_line);
  
#line 1318 
  goto return_label;
  return_label: 
#line 1320 
                return;
}


#line 1325  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_12_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_21 *cf_arg_21;
  int tmp;
  
#line 1328 
  tmp = ldv_undef_int();
  
#line 1328 
  switch (tmp) {
    case 0: 
#line 1329 
    ;
    
#line 1330 
    ret = pthread_join(ldv_thread_21,(void **)0);
    
#line 1331 
    __VERIFIER_assume(ret == 0);
    
#line 1332 
    goto ldv_45099;
    default: 
#line 1334 
    ;
    
#line 1334 
    __VERIFIER_assume(0);
  }
  ldv_45099: 
#line 1335 
  ;
  
#line 1336 
  return;
}


#line 1340  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_9_netdev;
  int tmp_3;
  
#line 1344 
  int ldv_9_ret = ldv_undef_int();
  
#line 1347 
  ldv_9_ret = ldv_undef_int();
  
#line 1350 
  tmp_3 = ldv_undef_int();
  
#line 1350 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 1352 
    ldv_9_netdev = arg0;
    
#line 1357 
    ldv_9_ret = ldv_emg_wrapper_igb_open_2(ldv_9_netdev);
    
#line 1360 
    tmp_1 = ldv_undef_int();
    
#line 1360 
    if (tmp_1 != 0) {
      
#line 1362 
      __VERIFIER_assume(ldv_9_ret == 0);
      
#line 1366 
      ldv_dispatch_register_9_4(ldv_9_netdev);
      
#line 1370 
      __retres = 0;
      
#line 1370 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 1377 
      __VERIFIER_assume(ldv_9_ret != 0);
      
#line 1378 
      ldv_failed_register_netdev();
      
#line 1379 
      tmp_0 = ldv_undef_int_negative();
      
#line 1379 
      __retres = tmp_0;
      
#line 1379 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 1387 
    ldv_failed_register_netdev();
    
#line 1388 
    tmp_2 = ldv_undef_int_negative();
    
#line 1388 
    __retres = tmp_2;
    
#line 1388 
    goto return_label;
  }
  return_label: 
#line 1350 
                return __retres;
}


#line 1398  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_22(void *arg0)
{
  void *__retres;
  struct ethtool_eee *ldv_22_ldv_param_1_40;
  struct ethtool_eeprom *ldv_22_ldv_param_1_10;
  unsigned char ldv_22_ldv_param_3_50;
  int ldv_22_ldv_param_1_28;
  struct sk_buff *ldv_22_ldv_param_0_14;
  struct ethtool_coalesce *ldv_22_ldv_param_1_60;
  unsigned short ldv_22_ldv_param_2_43;
  struct ifla_vf_info *ldv_22_ldv_param_2_52;
  unsigned int *ldv_22_ldv_param_1_48;
  struct rtnl_link_stats64 *ldv_22_ldv_param_1_4;
  unsigned short ldv_22_ldv_param_1_58;
  struct ethtool_wolinfo *ldv_22_ldv_param_1_57;
  int ldv_22_ldv_param_1_51;
  unsigned char *ldv_22_ldv_param_2_31;
  struct ethtool_rxnfc *ldv_22_ldv_param_1_26;
  unsigned int *ldv_22_ldv_param_1_30;
  struct ethtool_eee *ldv_22_ldv_param_1_12;
  int ldv_22_ldv_param_1_16;
  unsigned short ldv_22_ldv_param_2_70;
  unsigned long long ldv_22_ldv_param_2_62;
  unsigned char *ldv_22_ldv_param_3_32;
  struct ethtool_pauseparam *ldv_22_ldv_param_1_68;
  struct ethtool_stats *ldv_22_ldv_param_1_33;
  unsigned char ldv_22_ldv_param_3_44;
  struct ethtool_pauseparam *ldv_22_ldv_param_1_35;
  struct ethtool_modinfo *ldv_22_ldv_param_1_56;
  struct ethtool_test *ldv_22_ldv_param_1_17;
  unsigned char *ldv_22_ldv_param_2_66;
  unsigned long long ldv_22_ldv_param_1_46;
  int ldv_22_ldv_param_1_36;
  struct ethtool_cmd *ldv_22_ldv_param_1_53;
  struct ethtool_ringparam *ldv_22_ldv_param_1_39;
  struct net_device *ldv_22_container;
  unsigned char *ldv_22_ldv_param_2_55;
  int ldv_22_ldv_param_3_25;
  unsigned char *ldv_22_ldv_param_2_29;
  int ldv_22_ldv_param_2_21;
  enum ethtool_phys_id_state *ldv_22_ldv_param_1_3;
  struct ethtool_ringparam *ldv_22_ldv_param_1_13;
  void *ldv_22_ldv_param_1_15;
  unsigned char *ldv_22_ldv_param_2_49;
  int ldv_22_ldv_param_2_24;
  unsigned int *ldv_22_ldv_param_2_27;
  unsigned int ldv_22_ldv_param_1_65;
  int ldv_22_ldv_param_1_42;
  struct ethtool_cmd *ldv_22_ldv_param_1_2;
  struct ethtool_coalesce *ldv_22_ldv_param_1_67;
  unsigned short ldv_22_ldv_param_2_59;
  struct ethtool_eeprom *ldv_22_ldv_param_1_54;
  unsigned char *ldv_22_ldv_param_2_11;
  struct ethtool_ts_info *ldv_22_ldv_param_1_38;
  struct ethtool_rxnfc *ldv_22_ldv_param_1_8;
  _Bool ldv_22_ldv_param_2_37;
  struct ethtool_eeprom *ldv_22_ldv_param_1_5;
  int ldv_22_ldv_param_1_23;
  struct ifreq *ldv_22_ldv_param_1_20;
  unsigned int ldv_22_ldv_param_1_19;
  struct ethtool_regs *ldv_22_ldv_param_1_63;
  struct ethtool_channels *ldv_22_ldv_param_1_41;
  unsigned long long *ldv_22_ldv_param_2_18;
  int ldv_22_ldv_param_1_7;
  struct ethtool_channels *ldv_22_ldv_param_1_47;
  unsigned short ldv_22_ldv_param_1_69;
  unsigned long long *ldv_22_ldv_param_2_34;
  struct ethtool_drvinfo *ldv_22_ldv_param_1_9;
  unsigned long long ldv_22_ldv_param_1_45;
  struct sk_buff *ldv_22_ldv_param_0_61;
  unsigned char *ldv_22_ldv_param_2_6;
  struct ethtool_wolinfo *ldv_22_ldv_param_1_22;
  void *ldv_22_ldv_param_2_64;
  int tmp_44;
  
#line 1472 
  struct ldv_struct_random_allocationless_scenario_22 *data = (struct ldv_struct_random_allocationless_scenario_22 *)arg0;
  
#line 1477 
  if (data != (struct ldv_struct_random_allocationless_scenario_22 *)0) {
    
#line 1478 
    ldv_22_container = data->arg0;
    
#line 1479 
    ldv_free((void *)data);
  }
  else ;
  
#line 1487 
  goto ldv_call_22;
  
#line 1489 
  __retres = (void *)0;
  
#line 1489 
  goto return_label;
  ldv_call_22: 
#line 1492 
  ;
  
#line 1495 
  tmp_44 = ldv_undef_int();
  
#line 1495 
  if (tmp_44 != 0) {
    int tmp_0;
    
#line 1497 
    ldv_22_ldv_param_1_2 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
    
#line 1500 
    tmp_0 = ldv_undef_int();
    
#line 1500 
    switch (tmp_0) {
      case 1: 
#line 1501 
      ;
      
#line 1504 
      ldv_emg_wrapper_igb_set_settings_2(ldv_22_container,ldv_22_ldv_param_1_2);
      
#line 1507 
      goto ldv_45182;
      case 2: 
#line 1509 
      ;
      
#line 1512 
      ldv_emg_wrapper_igb_get_eeprom_len_38(ldv_22_container);
      
#line 1515 
      goto ldv_45182;
      case 3: 
#line 1517 
      ;
      
#line 1520 
      ldv_emg_wrapper_igb_netpoll_58(ldv_22_container);
      
#line 1523 
      goto ldv_45182;
      case 4: 
#line 1525 
      ;
      
#line 1531 
      ldv_emg_wrapper_igb_vlan_rx_kill_vid_57(ldv_22_container,(unsigned short)((int)ldv_22_ldv_param_1_69),(unsigned short)((int)ldv_22_ldv_param_2_70));
      
#line 1537 
      goto ldv_45182;
      case 5: 
#line 1539 
      ;
      
#line 1541 
      ldv_22_ldv_param_1_68 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1546 
      ldv_emg_wrapper_igb_set_pauseparam_56(ldv_22_container,ldv_22_ldv_param_1_68);
      
#line 1550 
      ldv_free((void *)ldv_22_ldv_param_1_68);
      
#line 1553 
      goto ldv_45182;
      case 6: 
#line 1555 
      ;
      
#line 1557 
      ldv_22_ldv_param_1_67 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1562 
      ldv_emg_wrapper_igb_set_coalesce_55(ldv_22_container,ldv_22_ldv_param_1_67);
      
#line 1566 
      ldv_free((void *)ldv_22_ldv_param_1_67);
      
#line 1569 
      goto ldv_45182;
      case 7: 
#line 1571 
      ;
      
#line 1574 
      ldv_emg_wrapper_igb_get_regs_len_54(ldv_22_container);
      
#line 1577 
      goto ldv_45182;
      case 8: 
#line 1579 
      ;
      
#line 1581 
      ldv_22_ldv_param_2_66 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1586 
      ldv_emg_wrapper_igb_get_strings_45(ldv_22_container,ldv_22_ldv_param_1_65,ldv_22_ldv_param_2_66);
      
#line 1590 
      ldv_free((void *)ldv_22_ldv_param_2_66);
      
#line 1593 
      goto ldv_45182;
      case 9: 
#line 1595 
      ;
      
#line 1598 
      ldv_emg_wrapper_igb_tx_timeout_16(ldv_22_container);
      
#line 1601 
      goto ldv_45182;
      case 10: 
#line 1603 
      ;
      
#line 1605 
      ldv_22_ldv_param_2_64 = ldv_xmalloc_unknown_size(0UL);
      
#line 1606 
      ldv_22_ldv_param_1_63 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
      
#line 1611 
      ldv_emg_wrapper_igb_get_regs_51(ldv_22_container,ldv_22_ldv_param_1_63,ldv_22_ldv_param_2_64);
      
#line 1615 
      ldv_free(ldv_22_ldv_param_2_64);
      
#line 1616 
      ldv_free((void *)ldv_22_ldv_param_1_63);
      
#line 1619 
      goto ldv_45182;
      case 11: 
#line 1621 
      ;
      
#line 1623 
      ldv_22_ldv_param_0_61 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1628 
      (*ldv_emg_alias_passthru_features_check_50)(ldv_22_ldv_param_0_61,ldv_22_container,ldv_22_ldv_param_2_62);
      
#line 1632 
      ldv_free((void *)ldv_22_ldv_param_0_61);
      
#line 1635 
      goto ldv_45182;
      case 12: 
#line 1637 
      ;
      
#line 1640 
      ldv_emg_wrapper_igb_ethtool_begin_49(ldv_22_container);
      
#line 1643 
      goto ldv_45182;
      case 13: 
#line 1645 
      ;
      
#line 1647 
      ldv_22_ldv_param_1_60 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1652 
      ldv_emg_wrapper_igb_get_coalesce_48(ldv_22_container,ldv_22_ldv_param_1_60);
      
#line 1656 
      ldv_free((void *)ldv_22_ldv_param_1_60);
      
#line 1659 
      goto ldv_45182;
      case 14: 
#line 1661 
      ;
      
#line 1667 
      ldv_emg_wrapper_igb_vlan_rx_add_vid_47(ldv_22_container,(unsigned short)((int)ldv_22_ldv_param_1_58),(unsigned short)((int)ldv_22_ldv_param_2_59));
      
#line 1673 
      goto ldv_45182;
      case 15: 
#line 1675 
      ;
      
#line 1677 
      ldv_22_ldv_param_1_57 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1682 
      ldv_emg_wrapper_igb_get_wol_46(ldv_22_container,ldv_22_ldv_param_1_57);
      
#line 1686 
      ldv_free((void *)ldv_22_ldv_param_1_57);
      
#line 1689 
      goto ldv_45182;
      case 16: 
#line 1691 
      ;
      
#line 1693 
      ldv_22_ldv_param_1_56 = (struct ethtool_modinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1698 
      ldv_emg_wrapper_igb_get_module_info_44(ldv_22_container,ldv_22_ldv_param_1_56);
      
#line 1702 
      ldv_free((void *)ldv_22_ldv_param_1_56);
      
#line 1705 
      goto ldv_45182;
      case 17: 
#line 1707 
      ;
      
#line 1709 
      ldv_22_ldv_param_2_55 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1710 
      ldv_22_ldv_param_1_54 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1715 
      ldv_emg_wrapper_igb_get_eeprom_43(ldv_22_container,ldv_22_ldv_param_1_54,ldv_22_ldv_param_2_55);
      
#line 1719 
      ldv_free((void *)ldv_22_ldv_param_2_55);
      
#line 1720 
      ldv_free((void *)ldv_22_ldv_param_1_54);
      
#line 1723 
      goto ldv_45182;
      case 18: 
#line 1725 
      ;
      
#line 1728 
      ldv_emg_wrapper_igb_ethtool_complete_42(ldv_22_container);
      
#line 1731 
      goto ldv_45182;
      case 19: 
#line 1733 
      ;
      
#line 1735 
      ldv_22_ldv_param_1_53 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1740 
      ldv_emg_wrapper_igb_get_settings_41(ldv_22_container,ldv_22_ldv_param_1_53);
      
#line 1744 
      ldv_free((void *)ldv_22_ldv_param_1_53);
      
#line 1747 
      goto ldv_45182;
      case 20: 
#line 1749 
      ;
      
#line 1751 
      ldv_22_ldv_param_2_52 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
      
#line 1756 
      ldv_emg_wrapper_igb_ndo_get_vf_config_40(ldv_22_container,ldv_22_ldv_param_1_51,ldv_22_ldv_param_2_52);
      
#line 1760 
      ldv_free((void *)ldv_22_ldv_param_2_52);
      
#line 1763 
      goto ldv_45182;
      case 21: 
#line 1765 
      ;
      
#line 1767 
      ldv_22_ldv_param_1_48 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 1768 
      ldv_22_ldv_param_2_49 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1773 
      ldv_emg_wrapper_igb_set_rxfh_11(ldv_22_container,ldv_22_ldv_param_1_48,ldv_22_ldv_param_2_49,(unsigned char)((int)ldv_22_ldv_param_3_50));
      
#line 1777 
      ldv_free((void *)ldv_22_ldv_param_1_48);
      
#line 1778 
      ldv_free((void *)ldv_22_ldv_param_2_49);
      
#line 1781 
      goto ldv_45182;
      case 22: 
#line 1783 
      ;
      
#line 1785 
      ldv_22_ldv_param_1_47 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 1790 
      ldv_emg_wrapper_igb_set_channels_37(ldv_22_container,ldv_22_ldv_param_1_47);
      
#line 1794 
      ldv_free((void *)ldv_22_ldv_param_1_47);
      
#line 1797 
      goto ldv_45182;
      case 23: 
#line 1799 
      ;
      
#line 1805 
      ldv_emg_wrapper_igb_fix_features_36(ldv_22_container,ldv_22_ldv_param_1_46);
      
#line 1811 
      goto ldv_45182;
      case 24: 
#line 1813 
      ;
      
#line 1819 
      ldv_emg_wrapper_igb_set_features_35(ldv_22_container,ldv_22_ldv_param_1_45);
      
#line 1825 
      goto ldv_45182;
      case 25: 
#line 1827 
      ;
      
#line 1833 
      ldv_emg_wrapper_igb_ndo_set_vf_vlan_34(ldv_22_container,ldv_22_ldv_param_1_42,(unsigned short)((int)ldv_22_ldv_param_2_43),(unsigned char)((int)ldv_22_ldv_param_3_44));
      
#line 1839 
      goto ldv_45182;
      case 26: 
#line 1841 
      ;
      
#line 1843 
      ldv_22_ldv_param_1_41 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 1848 
      ldv_emg_wrapper_igb_get_channels_32(ldv_22_container,ldv_22_ldv_param_1_41);
      
#line 1852 
      ldv_free((void *)ldv_22_ldv_param_1_41);
      
#line 1855 
      goto ldv_45182;
      case 27: 
#line 1857 
      ;
      
#line 1859 
      ldv_22_ldv_param_1_40 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
      
#line 1864 
      ldv_emg_wrapper_igb_set_eee_39(ldv_22_container,ldv_22_ldv_param_1_40);
      
#line 1868 
      ldv_free((void *)ldv_22_ldv_param_1_40);
      
#line 1871 
      goto ldv_45182;
      case 28: 
#line 1873 
      ;
      
#line 1875 
      ldv_22_ldv_param_1_39 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1880 
      ldv_emg_wrapper_igb_get_ringparam_22(ldv_22_container,ldv_22_ldv_param_1_39);
      
#line 1884 
      ldv_free((void *)ldv_22_ldv_param_1_39);
      
#line 1887 
      goto ldv_45182;
      case 29: 
#line 1889 
      ;
      
#line 1891 
      ldv_22_ldv_param_1_38 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
      
#line 1896 
      ldv_emg_wrapper_igb_get_ts_info_53(ldv_22_container,ldv_22_ldv_param_1_38);
      
#line 1900 
      ldv_free((void *)ldv_22_ldv_param_1_38);
      
#line 1903 
      goto ldv_45182;
      case 30: 
#line 1905 
      ;
      
#line 1908 
      ldv_emg_wrapper_igb_get_rxfh_indir_size_30(ldv_22_container);
      
#line 1911 
      goto ldv_45182;
      case 31: 
#line 1913 
      ;
      
#line 1916 
      ldv_emg_wrapper_igb_get_link_29(ldv_22_container);
      
#line 1919 
      goto ldv_45182;
      case 32: 
#line 1921 
      ;
      
#line 1927 
      ldv_emg_wrapper_igb_ndo_set_vf_spoofchk_28(ldv_22_container,ldv_22_ldv_param_1_36,(_Bool)((_Bool)((int)ldv_22_ldv_param_2_37) != 0));
      
#line 1933 
      goto ldv_45182;
      case 33: 
#line 1935 
      ;
      
#line 1937 
      ldv_22_ldv_param_1_35 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1942 
      ldv_emg_wrapper_igb_get_pauseparam_27(ldv_22_container,ldv_22_ldv_param_1_35);
      
#line 1946 
      ldv_free((void *)ldv_22_ldv_param_1_35);
      
#line 1949 
      goto ldv_45182;
      case 34: 
#line 1951 
      ;
      
#line 1954 
      ldv_emg_wrapper_igb_set_rx_mode_26(ldv_22_container);
      
#line 1957 
      goto ldv_45182;
      case 35: 
#line 1959 
      ;
      
#line 1962 
      ldv_emg_wrapper_igb_nway_reset_25(ldv_22_container);
      
#line 1965 
      goto ldv_45182;
      case 36: 
#line 1967 
      ;
      
#line 1969 
      ldv_22_ldv_param_1_33 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 1970 
      ldv_22_ldv_param_2_34 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1975 
      ldv_emg_wrapper_igb_get_ethtool_stats_24(ldv_22_container,ldv_22_ldv_param_1_33,ldv_22_ldv_param_2_34);
      
#line 1979 
      ldv_free((void *)ldv_22_ldv_param_1_33);
      
#line 1980 
      ldv_free((void *)ldv_22_ldv_param_2_34);
      
#line 1983 
      goto ldv_45182;
      case 37: 
#line 1985 
      ;
      
#line 1987 
      ldv_22_ldv_param_3_32 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1988 
      ldv_22_ldv_param_2_31 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1989 
      ldv_22_ldv_param_1_30 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 1994 
      ldv_emg_wrapper_igb_get_rxfh_23(ldv_22_container,ldv_22_ldv_param_1_30,ldv_22_ldv_param_2_31,ldv_22_ldv_param_3_32);
      
#line 1998 
      ldv_free((void *)ldv_22_ldv_param_3_32);
      
#line 1999 
      ldv_free((void *)ldv_22_ldv_param_2_31);
      
#line 2000 
      ldv_free((void *)ldv_22_ldv_param_1_30);
      
#line 2003 
      goto ldv_45182;
      case 38: 
#line 2005 
      ;
      
#line 2007 
      ldv_22_ldv_param_2_29 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2012 
      ldv_emg_wrapper_igb_ndo_set_vf_mac_59(ldv_22_container,ldv_22_ldv_param_1_28,ldv_22_ldv_param_2_29);
      
#line 2016 
      ldv_free((void *)ldv_22_ldv_param_2_29);
      
#line 2019 
      goto ldv_45182;
      case 39: 
#line 2021 
      ;
      
#line 2023 
      ldv_22_ldv_param_2_27 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 2024 
      ldv_22_ldv_param_1_26 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 2029 
      ldv_emg_wrapper_igb_get_rxnfc_21(ldv_22_container,ldv_22_ldv_param_1_26,ldv_22_ldv_param_2_27);
      
#line 2033 
      ldv_free((void *)ldv_22_ldv_param_2_27);
      
#line 2034 
      ldv_free((void *)ldv_22_ldv_param_1_26);
      
#line 2037 
      goto ldv_45182;
      case 40: 
#line 2039 
      ;
      
#line 2045 
      ldv_emg_wrapper_igb_ndo_set_vf_bw_20(ldv_22_container,ldv_22_ldv_param_1_23,ldv_22_ldv_param_2_24,ldv_22_ldv_param_3_25);
      
#line 2051 
      goto ldv_45182;
      case 41: 
#line 2053 
      ;
      
#line 2055 
      ldv_22_ldv_param_1_22 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 2060 
      ldv_emg_wrapper_igb_set_wol_19(ldv_22_container,ldv_22_ldv_param_1_22);
      
#line 2064 
      ldv_free((void *)ldv_22_ldv_param_1_22);
      
#line 2067 
      goto ldv_45182;
      case 42: 
#line 2069 
      ;
      
#line 2072 
      (*ldv_emg_alias_eth_validate_addr_33)(ldv_22_container);
      
#line 2075 
      goto ldv_45182;
      case 43: 
#line 2077 
      ;
      
#line 2079 
      ldv_22_ldv_param_1_20 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
      
#line 2084 
      ldv_emg_wrapper_igb_ioctl_18(ldv_22_container,ldv_22_ldv_param_1_20,ldv_22_ldv_param_2_21);
      
#line 2088 
      ldv_free((void *)ldv_22_ldv_param_1_20);
      
#line 2091 
      goto ldv_45182;
      case 44: 
#line 2093 
      ;
      
#line 2099 
      ldv_emg_wrapper_igb_set_msglevel_31(ldv_22_container,ldv_22_ldv_param_1_19);
      
#line 2105 
      goto ldv_45182;
      case 45: 
#line 2107 
      ;
      
#line 2109 
      ldv_22_ldv_param_1_17 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
      
#line 2110 
      ldv_22_ldv_param_2_18 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 2115 
      ldv_emg_wrapper_igb_diag_test_17(ldv_22_container,ldv_22_ldv_param_1_17,ldv_22_ldv_param_2_18);
      
#line 2119 
      ldv_free((void *)ldv_22_ldv_param_1_17);
      
#line 2120 
      ldv_free((void *)ldv_22_ldv_param_2_18);
      
#line 2123 
      goto ldv_45182;
      case 46: 
#line 2125 
      ;
      
#line 2131 
      ldv_emg_wrapper_igb_get_sset_count_52(ldv_22_container,ldv_22_ldv_param_1_16);
      
#line 2137 
      goto ldv_45182;
      case 47: 
#line 2139 
      ;
      
#line 2141 
      ldv_22_ldv_param_1_15 = ldv_xmalloc_unknown_size(0UL);
      
#line 2146 
      ldv_emg_wrapper_igb_set_mac_15(ldv_22_container,ldv_22_ldv_param_1_15);
      
#line 2150 
      ldv_free(ldv_22_ldv_param_1_15);
      
#line 2153 
      goto ldv_45182;
      case 48: 
#line 2155 
      ;
      
#line 2157 
      ldv_22_ldv_param_0_14 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 2162 
      ldv_emg_wrapper_igb_xmit_frame_14(ldv_22_ldv_param_0_14,ldv_22_container);
      
#line 2166 
      ldv_free((void *)ldv_22_ldv_param_0_14);
      
#line 2169 
      goto ldv_45182;
      case 49: 
#line 2171 
      ;
      
#line 2174 
      ldv_emg_wrapper_igb_get_msglevel_13(ldv_22_container);
      
#line 2177 
      goto ldv_45182;
      case 50: 
#line 2179 
      ;
      
#line 2181 
      ldv_22_ldv_param_1_13 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 2186 
      ldv_emg_wrapper_igb_set_ringparam_12(ldv_22_container,ldv_22_ldv_param_1_13);
      
#line 2190 
      ldv_free((void *)ldv_22_ldv_param_1_13);
      
#line 2193 
      goto ldv_45182;
      case 51: 
#line 2195 
      ;
      
#line 2197 
      ldv_22_ldv_param_1_12 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
      
#line 2202 
      ldv_emg_wrapper_igb_get_eee_10(ldv_22_container,ldv_22_ldv_param_1_12);
      
#line 2206 
      ldv_free((void *)ldv_22_ldv_param_1_12);
      
#line 2209 
      goto ldv_45182;
      case 52: 
#line 2211 
      ;
      
#line 2213 
      ldv_22_ldv_param_2_11 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2214 
      ldv_22_ldv_param_1_10 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 2219 
      ldv_emg_wrapper_igb_set_eeprom_9(ldv_22_container,ldv_22_ldv_param_1_10,ldv_22_ldv_param_2_11);
      
#line 2223 
      ldv_free((void *)ldv_22_ldv_param_2_11);
      
#line 2224 
      ldv_free((void *)ldv_22_ldv_param_1_10);
      
#line 2227 
      goto ldv_45182;
      case 53: 
#line 2229 
      ;
      
#line 2231 
      ldv_22_ldv_param_1_9 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 2236 
      ldv_emg_wrapper_igb_get_drvinfo_8(ldv_22_container,ldv_22_ldv_param_1_9);
      
#line 2240 
      ldv_free((void *)ldv_22_ldv_param_1_9);
      
#line 2243 
      goto ldv_45182;
      case 54: 
#line 2245 
      ;
      
#line 2247 
      ldv_22_ldv_param_1_8 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 2252 
      ldv_emg_wrapper_igb_set_rxnfc_7(ldv_22_container,ldv_22_ldv_param_1_8);
      
#line 2256 
      ldv_free((void *)ldv_22_ldv_param_1_8);
      
#line 2259 
      goto ldv_45182;
      case 55: 
#line 2261 
      ;
      
#line 2267 
      ldv_emg_wrapper_igb_change_mtu_6(ldv_22_container,ldv_22_ldv_param_1_7);
      
#line 2273 
      goto ldv_45182;
      case 56: 
#line 2275 
      ;
      
#line 2277 
      ldv_22_ldv_param_1_5 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 2278 
      ldv_22_ldv_param_2_6 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2283 
      ldv_emg_wrapper_igb_get_module_eeprom_5(ldv_22_container,ldv_22_ldv_param_1_5,ldv_22_ldv_param_2_6);
      
#line 2287 
      ldv_free((void *)ldv_22_ldv_param_1_5);
      
#line 2288 
      ldv_free((void *)ldv_22_ldv_param_2_6);
      
#line 2291 
      goto ldv_45182;
      case 57: 
#line 2293 
      ;
      
#line 2295 
      ldv_22_ldv_param_1_4 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
      
#line 2300 
      ldv_emg_wrapper_igb_get_stats64_4(ldv_22_container,ldv_22_ldv_param_1_4);
      
#line 2304 
      ldv_free((void *)ldv_22_ldv_param_1_4);
      
#line 2307 
      goto ldv_45182;
      case 58: 
#line 2309 
      ;
      
#line 2311 
      ldv_22_ldv_param_1_3 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
      
#line 2316 
      ldv_emg_wrapper_igb_set_phys_id_3(ldv_22_container,*ldv_22_ldv_param_1_3);
      
#line 2320 
      ldv_free((void *)ldv_22_ldv_param_1_3);
      
#line 2323 
      goto ldv_45182;
      default: 
#line 2325 
      ;
      
#line 2325 
      __VERIFIER_assume(0);
    }
    ldv_45182: 
#line 2328 
    ;
    
#line 2328 
    ldv_free((void *)ldv_22_ldv_param_1_2);
    
#line 2335 
    goto ldv_call_22;
  }
  else {
    
#line 2343 
    __retres = (void *)0;
    
#line 2343 
    goto return_label;
  }
  
#line 2346 
  __retres = (void *)0;
  return_label: 
#line 2346 
                return __retres;
}


#line 2351  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_20(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_20_ret_val;
  int ldv_20_line;
  void *ldv_20_data;
  enum irqreturn (*ldv_20_thread)(int , void *);
  int tmp;
  
#line 2357 
  enum irqreturn (*ldv_20_callback)(int , void *) = & ldv_emg_wrapper_igb_msix_other_2;
  
#line 2360 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 2365 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 2366 
    ldv_20_line = data->arg0;
    
#line 2367 
    ldv_20_callback = data->arg1;
    
#line 2368 
    ldv_20_thread = data->arg2;
    
#line 2369 
    ldv_20_data = data->arg3;
    
#line 2370 
    ldv_free((void *)data);
  }
  else ;
  
#line 2376 
  ldv_switch_to_interrupt_context();
  
#line 2378 
  ldv_20_ret_val = ldv_emg_wrapper_igb_msix_other_2(ldv_20_line,ldv_20_data);
  
#line 2380 
  ldv_switch_to_process_context();
  
#line 2383 
  tmp = ldv_undef_int();
  
#line 2383 
  if (tmp != 0) {
    
#line 2385 
    __VERIFIER_assume(ldv_20_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 2389 
    if (ldv_20_thread != (enum irqreturn (*)(int , void *))0) 
#line 2391 
                                                              (*ldv_20_thread)(ldv_20_line,ldv_20_data); else ;
  }
  else 
#line 2398 
       __VERIFIER_assume(ldv_20_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 2407 
  __retres = (void *)0;
  
#line 2407 
  goto return_label;
  
#line 2409 
  __retres = (void *)0;
  return_label: 
#line 2409 
                return __retres;
}


#line 2414  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 2420 
  ldv_2_netdev = arg0;
  
#line 2421 
  ldv_free((void *)ldv_2_netdev);
  
#line 2425 
  goto return_label;
  return_label: 
#line 2427 
                return;
}


#line 2432  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_14(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_14_ret_val;
  int ldv_14_line;
  void *ldv_14_data;
  enum irqreturn (*ldv_14_thread)(int , void *);
  int tmp;
  
#line 2438 
  enum irqreturn (*ldv_14_callback)(int , void *) = & ldv_emg_wrapper_igb_msix_ring_2;
  
#line 2441 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 2446 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 2447 
    ldv_14_line = data->arg0;
    
#line 2448 
    ldv_14_callback = data->arg1;
    
#line 2449 
    ldv_14_thread = data->arg2;
    
#line 2450 
    ldv_14_data = data->arg3;
    
#line 2451 
    ldv_free((void *)data);
  }
  else ;
  
#line 2457 
  ldv_switch_to_interrupt_context();
  
#line 2459 
  ldv_14_ret_val = ldv_emg_wrapper_igb_msix_ring_2(ldv_14_line,ldv_14_data);
  
#line 2461 
  ldv_switch_to_process_context();
  
#line 2464 
  tmp = ldv_undef_int();
  
#line 2464 
  if (tmp != 0) {
    
#line 2466 
    __VERIFIER_assume(ldv_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 2470 
    if (ldv_14_thread != (enum irqreturn (*)(int , void *))0) 
#line 2472 
                                                              (*ldv_14_thread)(ldv_14_line,ldv_14_data); else ;
  }
  else 
#line 2479 
       __VERIFIER_assume(ldv_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 2488 
  __retres = (void *)0;
  
#line 2488 
  goto return_label;
  
#line 2490 
  __retres = (void *)0;
  return_label: 
#line 2490 
                return __retres;
}


#line 2495  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igb/igb.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_3_timer_list;
  int tmp_0;
  
#line 2502 
  tmp_0 = ldv_undef_int();
  
#line 2502 
  if (tmp_0 != 0) {
    
#line 2504 
    ldv_3_timer_list = arg0;
    
#line 2508 
    ldv_dispatch_instance_register_3_3(ldv_3_timer_list);
    
#line 2512 
    __retres = 0;
    
#line 2512 
    goto return_label;
  }
  else {
    int tmp;
    
#line 2519 
    tmp = ldv_undef_int_negative();
    
#line 2519 
    __retres = tmp;
    
#line 2519 
    goto return_label;
  }
  return_label: 
#line 2502 
                return __retres;
}


