/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __le64;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104 
struct pollfd;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_46 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_46 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_47 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_47 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct vm_area_struct;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_48 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_48 nodemask_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 193 
struct rw_semaphore;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 251 
enum hrtimer_restart;

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_50 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_49 {
   struct __anonstruct_50 __anonCompField___anonunion_49_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_49 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11758 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_115 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_115 mm_context_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmod.h"
struct cred;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/elf.h"
struct inode;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_148 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_149 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_147 {
   struct __anonstruct_148 __anonCompField___anonunion_147_33 ;
   struct __anonstruct_149 __anonCompField___anonunion_147_34 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_147 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_150 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_152 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_156 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_155 {
   atomic_t _mapcount ;
   struct __anonstruct_156 __anonCompField___anonunion_155_38 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_154 {
   union __anonunion_155 __anonCompField___anonstruct_154_39 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_153 {
   unsigned long counters ;
   struct __anonstruct_154 __anonCompField___anonunion_153_40 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_151 {
   union __anonunion_152 __anonCompField___anonstruct_151_37 ;
   union __anonunion_153 __anonCompField___anonstruct_151_41 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_158 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_159 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_157 {
   struct list_head lru ;
   struct __anonstruct_158 __anonCompField___anonunion_157_43 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_159 __anonCompField___anonunion_157_44 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_160 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_150 __anonCompField_page_36 ;
   struct __anonstruct_151 __anonCompField_page_42 ;
   union __anonunion_157 __anonCompField_page_45 ;
   union __anonunion_160 __anonCompField_page_46 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_161 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
union __anonunion_166 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_166 __anonCompField_idr_layer_47 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_171 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_171 __anonCompField_kernfs_node_48 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
struct sock;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_172 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_172 __anonCompField_kernel_param_49 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_183 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_183 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_185 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_186 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_187 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_188 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_190 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_189 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_190 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_191 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_192 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_184 {
   int _pad[28U] ;
   struct __anonstruct__kill_185 _kill ;
   struct __anonstruct__timer_186 _timer ;
   struct __anonstruct__rt_187 _rt ;
   struct __anonstruct__sigchld_188 _sigchld ;
   struct __anonstruct__sigfault_189 _sigfault ;
   struct __anonstruct__sigpoll_191 _sigpoll ;
   struct __anonstruct__sigsys_192 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_184 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_199 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_200 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_202 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_201 {
   struct keyring_index_key index_key ;
   struct __anonstruct_202 __anonCompField___anonunion_201_52 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_203 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_205 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_204 {
   union __anonunion_payload_205 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_199 __anonCompField_key_50 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_200 __anonCompField_key_51 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_201 __anonCompField_key_53 ;
   union __anonunion_type_data_203 type_data ;
   union __anonunion_204 __anonCompField_key_54 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct backing_dev_info;

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1138 
struct io_context;

#line 1172 
struct pipe_inode_info;

#line 1173 
struct uts_namespace;

#line 1174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct proc_dir_entry;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_220 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_220 __anonCompField_pci_dev_58 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 66 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 1249 
struct kvec;

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_224 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_223 {
   struct __anonstruct_224 __anonCompField___anonunion_223_59 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_223 __anonCompField_lockref_60 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_226 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_225 {
   struct __anonstruct_226 __anonCompField___anonunion_225_61 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_225 __anonCompField_qstr_62 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_227 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_227 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_231 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_230 {
   struct __anonstruct_231 __anonCompField___anonunion_230_63 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_230 __anonCompField_radix_tree_node_64 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 47 
struct block_device;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 62 
struct iovec;

#line 63 
struct kiocb;

#line 64 
struct poll_table_struct;

#line 65 
struct kstatfs;

#line 66 
struct swap_info_struct;

#line 67 
struct iov_iter;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_235 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_235 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_236 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_236 __anonCompField_kqid_66 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_239 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_240 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_241 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_239 __anonCompField_inode_67 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_240 __anonCompField_inode_68 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_241 __anonCompField_inode_69 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_242 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_242 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_244 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_243 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_244 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_243 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqhandler.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_253 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_253 __anonCompField_iov_iter_77 ;
   unsigned long nr_segs ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
enum ldv_26977 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_26977 socket_state;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_254 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_254 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_27378 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_259 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_260 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_27378 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_259 __anonCompField_nf_bridge_info_81 ;
   union __anonunion_260 __anonCompField_nf_bridge_info_82 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 215 
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_261 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_261 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_263 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_262 {
   u64 v64 ;
   struct __anonstruct_263 __anonCompField___anonunion_262_83 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_262 __anonCompField_skb_mstamp_84 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_266 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_265 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_266 __anonCompField___anonstruct_265_85 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_264 {
   struct __anonstruct_265 __anonCompField___anonunion_264_86 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_268 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_267 {
   __wsum csum ;
   struct __anonstruct_268 __anonCompField___anonunion_267_88 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_269 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_270 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_271 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_264 __anonCompField_sk_buff_87 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_267 __anonCompField_sk_buff_89 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_269 __anonCompField_sk_buff_90 ;
   __u32 secmark ;
   union __anonunion_270 __anonCompField_sk_buff_91 ;
   union __anonunion_271 __anonCompField_sk_buff_92 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 767 
struct rtable;

#line 3470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_274 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_274 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_275 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_275 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_276 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_276 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_277 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_277 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_278 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_278 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_279 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_279 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_280 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_280 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_281 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_281 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_282 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_283 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_282 ifr_ifrn ;
   union __anonunion_ifr_ifru_283 ifr_ifru ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_307 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_307 possible_net_t;

#line 376 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_30030 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_30030 phy_interface_t;

#line 126 
enum ldv_30083 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_30083 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 1628 
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 331 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_31793 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_31794 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_317 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_318 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_319 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_317 adj_list ;
   struct __anonstruct_all_adj_list_318 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_31793 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_31794 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_319 __anonCompField_net_device_95 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/icmpv6.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/memcontrol.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_330 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_330 __anonCompField_bpf_prog_100 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_341 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_341 __anonCompField_dst_entry_101 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_342 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_342 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_344 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_343 {
   __addrpair skc_addrpair ;
   struct __anonstruct_344 __anonCompField___anonunion_343_102 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_345 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_347 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_346 {
   __portpair skc_portpair ;
   struct __anonstruct_347 __anonCompField___anonunion_346_105 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_348 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_349 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_343 __anonCompField_sock_common_103 ;
   union __anonunion_345 __anonCompField_sock_common_104 ;
   union __anonunion_346 __anonCompField_sock_common_106 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_348 __anonCompField_sock_common_107 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_349 __anonCompField_sock_common_108 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_350 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_350 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_353 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_353 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_timewait_sock.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) res1 : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) doff : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fin : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syn : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rst : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) psh : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ack : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) urg : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ece : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};

#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   __u8 addr_gen_mode ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
union __anonunion_377 {
   __be32 a4 ;
   __be32 a6[4U] ;
   struct in6_addr in6 ;
};

#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
struct inetpeer_addr_base {
   union __anonunion_377 __anonCompField_inetpeer_addr_base_110 ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_378 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct __anonstruct_380 {
   atomic_t rid ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_379 {
   struct __anonstruct_380 __anonCompField___anonunion_379_112 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[16U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_378 __anonCompField_inet_peer_111 ;
   union __anonunion_379 __anonCompField_inet_peer_113 ;
   __u32 dtime ;
   atomic_t refcnt ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   int total ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct uncached_list;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};

#line 848  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ip6_checksum.h"
struct mbox_params {
   u32 mbox_in[16U] ;
   u32 mbox_out[16U] ;
   int in_count ;
   int out_count ;
};

#line 987  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct flash_params_8012 {
   u8 dev_id_str[4U] ;
   __le16 size ;
   __le16 csum ;
   __le16 ver ;
   __le16 sub_dev_id ;
   u8 mac_addr[6U] ;
   __le16 res ;
};

#line 997  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct flash_params_8000 {
   u8 dev_id_str[4U] ;
   __le16 ver ;
   __le16 size ;
   __le16 csum ;
   __le16 reserved0 ;
   __le16 total_size ;
   __le16 entry_count ;
   u8 data_type0 ;
   u8 data_size0 ;
   u8 mac_addr[6U] ;
   u8 data_type1 ;
   u8 data_size1 ;
   u8 mac_addr1[6U] ;
   u8 data_type2 ;
   u8 data_size2 ;
   __le16 vlan_id ;
   u8 data_type3 ;
   u8 data_size3 ;
   __le16 last ;
   u8 reserved1[464U] ;
   __le16 subsys_ven_id ;
   __le16 subsys_dev_id ;
   u8 reserved2[4U] ;
};

#line 1030  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
union flash_params {
   struct flash_params_8012 flash_params_8012 ;
   struct flash_params_8000 flash_params_8000 ;
};

#line 1057  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct tx_buf_desc {
   __le64 addr ;
   __le32 len ;
};

#line 1063  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ob_mac_iocb_req {
   u8 opcode ;
   u8 flags1 ;
   u8 flags2 ;
   u8 flags3 ;
   __le32 reserved1[2U] ;
   __le16 frame_len ;
   __le16 reserved2 ;
   u32 tid ;
   u32 txq_idx ;
   __le32 reserved3 ;
   __le16 vlan_tci ;
   __le16 reserved4 ;
   struct tx_buf_desc tbd[8U] ;
};

#line 1099  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ob_mac_iocb_rsp {
   u8 opcode ;
   u8 flags1 ;
   u8 flags2 ;
   u8 flags3 ;
   u32 tid ;
   u32 txq_idx ;
   __le32 reserved[13U] ;
};

#line 1116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ob_mac_tso_iocb_req {
   u8 opcode ;
   u8 flags1 ;
   u8 flags2 ;
   u8 flags3 ;
   __le32 reserved1[2U] ;
   __le32 frame_len ;
   u32 tid ;
   u32 txq_idx ;
   __le16 total_hdrs_len ;
   __le16 net_trans_offset ;
   __le16 vlan_tci ;
   __le16 mss ;
   struct tx_buf_desc tbd[8U] ;
};

#line 1161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ib_mac_iocb_rsp {
   u8 opcode ;
   u8 flags1 ;
   u8 flags2 ;
   u8 flags3 ;
   __le32 data_len ;
   __le64 data_addr ;
   __le32 rss ;
   __le16 vlan_id ;
   __le16 reserved1 ;
   __le32 reserved2[6U] ;
   u8 reserved3[3U] ;
   u8 flags4 ;
   __le32 hdr_len ;
   __le64 hdr_addr ;
};

#line 1220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ib_ae_iocb_rsp {
   u8 opcode ;
   u8 flags1 ;
   u8 event ;
   u8 q_id ;
   __le32 reserved[15U] ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ql_net_rsp_iocb {
   u8 opcode ;
   u8 flags0 ;
   __le16 length ;
   __le32 tid ;
   __le32 reserved[14U] ;
};

#line 1261  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct wqicb {
   __le16 len ;
   __le16 flags ;
   __le16 cq_id_rss ;
   __le16 rid ;
   __le64 addr ;
   __le64 cnsmr_idx_addr ;
};

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct cqicb {
   u8 msix_vect ;
   u8 reserved1 ;
   u8 reserved2 ;
   u8 flags ;
   __le16 len ;
   __le16 rid ;
   __le64 addr ;
   __le64 prod_idx_addr ;
   __le16 pkt_delay ;
   __le16 irq_delay ;
   __le64 lbq_addr ;
   __le16 lbq_buf_size ;
   __le16 lbq_len ;
   __le64 sbq_addr ;
   __le16 sbq_buf_size ;
   __le16 sbq_len ;
};

#line 1321  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ricb {
   u8 base_cq ;
   u8 flags ;
   __le16 mask ;
   u8 hash_cq_id[1024U] ;
   __le32 ipv6_hash_key[10U] ;
   __le32 ipv4_hash_key[4U] ;
};

#line 1339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct oal {
   struct tx_buf_desc oal[11U] ;
};

#line 1345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct map_list {
   dma_addr_t mapaddr ;
   __u32 maplen ;
};

#line 1350  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct tx_ring_desc {
   struct sk_buff *skb ;
   struct ob_mac_iocb_req *queue_entry ;
   u32 index ;
   struct oal oal ;
   struct map_list map[19U] ;
   int map_cnt ;
   struct tx_ring_desc *next ;
};

#line 1360  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct page_chunk {
   struct page *page ;
   char *va ;
   u64 map ;
   unsigned int offset ;
   unsigned int last_flag ;
};

#line 1368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
union __anonunion_p_382 {
   struct page_chunk pg_chunk ;
   struct sk_buff *skb ;
};

#line 1368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct bq_desc {
   union __anonunion_p_382 p ;
   __le64 *addr ;
   u32 index ;
   dma_addr_t mapaddr ;
   __u32 maplen ;
};

#line 1379 
struct ql_adapter;

#line 1379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct tx_ring {
   struct wqicb wqicb ;
   void *wq_base ;
   dma_addr_t wq_base_dma ;
   __le32 *cnsmr_idx_sh_reg ;
   dma_addr_t cnsmr_idx_sh_reg_dma ;
   u32 wq_size ;
   u32 wq_len ;
   void *prod_idx_db_reg ;
   void *valid_db_reg ;
   u16 prod_idx ;
   u16 cq_id ;
   u8 wq_id ;
   u8 reserved1[3U] ;
   struct tx_ring_desc *q ;
   spinlock_t lock ;
   atomic_t tx_count ;
   struct delayed_work tx_work ;
   struct ql_adapter *qdev ;
   u64 tx_packets ;
   u64 tx_bytes ;
   u64 tx_errors ;
};

#line 1414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct rx_ring {
   struct cqicb cqicb ;
   void *cq_base ;
   dma_addr_t cq_base_dma ;
   u32 cq_size ;
   u32 cq_len ;
   u16 cq_id ;
   __le32 *prod_idx_sh_reg ;
   dma_addr_t prod_idx_sh_reg_dma ;
   void *cnsmr_idx_db_reg ;
   u32 cnsmr_idx ;
   struct ql_net_rsp_iocb *curr_entry ;
   void *valid_db_reg ;
   u32 lbq_len ;
   u32 lbq_size ;
   u32 lbq_buf_size ;
   void *lbq_base ;
   dma_addr_t lbq_base_dma ;
   void *lbq_base_indirect ;
   dma_addr_t lbq_base_indirect_dma ;
   struct page_chunk pg_chunk ;
   struct bq_desc *lbq ;
   void *lbq_prod_idx_db_reg ;
   u32 lbq_prod_idx ;
   u32 lbq_curr_idx ;
   u32 lbq_clean_idx ;
   u32 lbq_free_cnt ;
   u32 sbq_len ;
   u32 sbq_size ;
   u32 sbq_buf_size ;
   void *sbq_base ;
   dma_addr_t sbq_base_dma ;
   void *sbq_base_indirect ;
   dma_addr_t sbq_base_indirect_dma ;
   struct bq_desc *sbq ;
   void *sbq_prod_idx_db_reg ;
   u32 sbq_prod_idx ;
   u32 sbq_curr_idx ;
   u32 sbq_clean_idx ;
   u32 sbq_free_cnt ;
   u32 type ;
   u32 irq ;
   u32 cpu ;
   char name[21U] ;
   struct napi_struct napi ;
   u8 reserved ;
   struct ql_adapter *qdev ;
   u64 rx_packets ;
   u64 rx_multicast ;
   u64 rx_bytes ;
   u64 rx_dropped ;
   u64 rx_errors ;
};

#line 1486  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct nic_stats {
   u64 tx_pkts ;
   u64 tx_bytes ;
   u64 tx_mcast_pkts ;
   u64 tx_bcast_pkts ;
   u64 tx_ucast_pkts ;
   u64 tx_ctl_pkts ;
   u64 tx_pause_pkts ;
   u64 tx_64_pkt ;
   u64 tx_65_to_127_pkt ;
   u64 tx_128_to_255_pkt ;
   u64 tx_256_511_pkt ;
   u64 tx_512_to_1023_pkt ;
   u64 tx_1024_to_1518_pkt ;
   u64 tx_1519_to_max_pkt ;
   u64 tx_undersize_pkt ;
   u64 tx_oversize_pkt ;
   u64 rx_bytes ;
   u64 rx_bytes_ok ;
   u64 rx_pkts ;
   u64 rx_pkts_ok ;
   u64 rx_bcast_pkts ;
   u64 rx_mcast_pkts ;
   u64 rx_ucast_pkts ;
   u64 rx_undersize_pkts ;
   u64 rx_oversize_pkts ;
   u64 rx_jabber_pkts ;
   u64 rx_undersize_fcerr_pkts ;
   u64 rx_drop_events ;
   u64 rx_fcerr_pkts ;
   u64 rx_align_err ;
   u64 rx_symbol_err ;
   u64 rx_mac_err ;
   u64 rx_ctl_pkts ;
   u64 rx_pause_pkts ;
   u64 rx_64_pkts ;
   u64 rx_65_to_127_pkts ;
   u64 rx_128_255_pkts ;
   u64 rx_256_511_pkts ;
   u64 rx_512_to_1023_pkts ;
   u64 rx_1024_to_1518_pkts ;
   u64 rx_1519_to_max_pkts ;
   u64 rx_len_err_pkts ;
   u64 rx_code_err ;
   u64 rx_oversize_err ;
   u64 rx_undersize_err ;
   u64 rx_preamble_err ;
   u64 rx_frame_len_err ;
   u64 rx_crc_err ;
   u64 rx_err_count ;
   u64 tx_cbfc_pause_frames0 ;
   u64 tx_cbfc_pause_frames1 ;
   u64 tx_cbfc_pause_frames2 ;
   u64 tx_cbfc_pause_frames3 ;
   u64 tx_cbfc_pause_frames4 ;
   u64 tx_cbfc_pause_frames5 ;
   u64 tx_cbfc_pause_frames6 ;
   u64 tx_cbfc_pause_frames7 ;
   u64 rx_cbfc_pause_frames0 ;
   u64 rx_cbfc_pause_frames1 ;
   u64 rx_cbfc_pause_frames2 ;
   u64 rx_cbfc_pause_frames3 ;
   u64 rx_cbfc_pause_frames4 ;
   u64 rx_cbfc_pause_frames5 ;
   u64 rx_cbfc_pause_frames6 ;
   u64 rx_cbfc_pause_frames7 ;
   u64 rx_nic_fifo_drop ;
};

#line 1604  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct mpi_coredump_global_header {
   u32 cookie ;
   u8 idString[16U] ;
   u32 timeLo ;
   u32 timeHi ;
   u32 imageSize ;
   u32 headerSize ;
   u8 info[220U] ;
};

#line 1616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct mpi_coredump_segment_header {
   u32 cookie ;
   u32 segNum ;
   u32 segSize ;
   u32 extra ;
   u8 description[16U] ;
};

#line 1673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ql_nic_misc {
   u32 rx_ring_count ;
   u32 tx_ring_count ;
   u32 intr_count ;
   u32 function ;
};

#line 1777  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ql_mpi_coredump {
   struct mpi_coredump_global_header mpi_global_header ;
   struct mpi_coredump_segment_header core_regs_seg_hdr ;
   u32 mpi_core_regs[127U] ;
   u32 mpi_core_sh_regs[16U] ;
   struct mpi_coredump_segment_header test_logic_regs_seg_hdr ;
   u32 test_logic_regs[23U] ;
   struct mpi_coredump_segment_header rmii_regs_seg_hdr ;
   u32 rmii_regs[64U] ;
   struct mpi_coredump_segment_header fcmac1_regs_seg_hdr ;
   u32 fcmac1_regs[64U] ;
   struct mpi_coredump_segment_header fcmac2_regs_seg_hdr ;
   u32 fcmac2_regs[64U] ;
   struct mpi_coredump_segment_header fc1_mbx_regs_seg_hdr ;
   u32 fc1_mbx_regs[64U] ;
   struct mpi_coredump_segment_header ide_regs_seg_hdr ;
   u32 ide_regs[64U] ;
   struct mpi_coredump_segment_header nic1_mbx_regs_seg_hdr ;
   u32 nic1_mbx_regs[64U] ;
   struct mpi_coredump_segment_header smbus_regs_seg_hdr ;
   u32 smbus_regs[64U] ;
   struct mpi_coredump_segment_header fc2_mbx_regs_seg_hdr ;
   u32 fc2_mbx_regs[64U] ;
   struct mpi_coredump_segment_header nic2_mbx_regs_seg_hdr ;
   u32 nic2_mbx_regs[64U] ;
   struct mpi_coredump_segment_header i2c_regs_seg_hdr ;
   u32 i2c_regs[64U] ;
   struct mpi_coredump_segment_header memc_regs_seg_hdr ;
   u32 memc_regs[256U] ;
   struct mpi_coredump_segment_header pbus_regs_seg_hdr ;
   u32 pbus_regs[256U] ;
   struct mpi_coredump_segment_header mde_regs_seg_hdr ;
   u32 mde_regs[6U] ;
   struct mpi_coredump_segment_header nic_regs_seg_hdr ;
   u32 nic_regs[64U] ;
   struct mpi_coredump_segment_header nic2_regs_seg_hdr ;
   u32 nic2_regs[64U] ;
   struct mpi_coredump_segment_header xgmac1_seg_hdr ;
   u32 xgmac1[464U] ;
   struct mpi_coredump_segment_header xgmac2_seg_hdr ;
   u32 xgmac2[464U] ;
   struct mpi_coredump_segment_header code_ram_seg_hdr ;
   u32 code_ram[8192U] ;
   struct mpi_coredump_segment_header memc_ram_seg_hdr ;
   u32 memc_ram[8192U] ;
   struct mpi_coredump_segment_header xaui_an_hdr ;
   u32 serdes_xaui_an[14U] ;
   struct mpi_coredump_segment_header xaui_hss_pcs_hdr ;
   u32 serdes_xaui_hss_pcs[33U] ;
   struct mpi_coredump_segment_header xfi_an_hdr ;
   u32 serdes_xfi_an[14U] ;
   struct mpi_coredump_segment_header xfi_train_hdr ;
   u32 serdes_xfi_train[12U] ;
   struct mpi_coredump_segment_header xfi_hss_pcs_hdr ;
   u32 serdes_xfi_hss_pcs[15U] ;
   struct mpi_coredump_segment_header xfi_hss_tx_hdr ;
   u32 serdes_xfi_hss_tx[32U] ;
   struct mpi_coredump_segment_header xfi_hss_rx_hdr ;
   u32 serdes_xfi_hss_rx[32U] ;
   struct mpi_coredump_segment_header xfi_hss_pll_hdr ;
   u32 serdes_xfi_hss_pll[32U] ;
   struct mpi_coredump_segment_header misc_nic_seg_hdr ;
   struct ql_nic_misc misc_nic_info ;
   struct mpi_coredump_segment_header intr_states_seg_hdr ;
   u32 intr_states[17U] ;
   struct mpi_coredump_segment_header cam_entries_seg_hdr ;
   u32 cam_entries[144U] ;
   struct mpi_coredump_segment_header nic_routing_words_seg_hdr ;
   u32 nic_routing_words[16U] ;
   struct mpi_coredump_segment_header ets_seg_hdr ;
   u32 ets[10U] ;
   struct mpi_coredump_segment_header probe_dump_seg_hdr ;
   u32 probe_dump[4386U] ;
   struct mpi_coredump_segment_header routing_reg_seg_hdr ;
   u32 routing_regs[192U] ;
   struct mpi_coredump_segment_header mac_prot_reg_seg_hdr ;
   u32 mac_prot_regs[19712U] ;
   struct mpi_coredump_segment_header xaui2_an_hdr ;
   u32 serdes2_xaui_an[14U] ;
   struct mpi_coredump_segment_header xaui2_hss_pcs_hdr ;
   u32 serdes2_xaui_hss_pcs[33U] ;
   struct mpi_coredump_segment_header xfi2_an_hdr ;
   u32 serdes2_xfi_an[14U] ;
   struct mpi_coredump_segment_header xfi2_train_hdr ;
   u32 serdes2_xfi_train[12U] ;
   struct mpi_coredump_segment_header xfi2_hss_pcs_hdr ;
   u32 serdes2_xfi_hss_pcs[15U] ;
   struct mpi_coredump_segment_header xfi2_hss_tx_hdr ;
   u32 serdes2_xfi_hss_tx[32U] ;
   struct mpi_coredump_segment_header xfi2_hss_rx_hdr ;
   u32 serdes2_xfi_hss_rx[32U] ;
   struct mpi_coredump_segment_header xfi2_hss_pll_hdr ;
   u32 serdes2_xfi_hss_pll[32U] ;
   struct mpi_coredump_segment_header sem_regs_seg_hdr ;
   u32 sem_regs[4U] ;
};

#line 1970  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct intr_context {
   struct ql_adapter *qdev ;
   u32 intr ;
   u32 irq_mask ;
   u32 hooked ;
   u32 intr_en_mask ;
   u32 intr_dis_mask ;
   u32 intr_read_mask ;
   char name[32U] ;
   atomic_t irq_cnt ;
   irqreturn_t (*handler)(int , void *) ;
};

#line 2042  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct nic_operations {
   int (*get_flash)(struct ql_adapter *) ;
   int (*port_initialize)(struct ql_adapter *) ;
};

#line 2051  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ql_adapter {
   struct ricb ricb ;
   unsigned long flags ;
   u32 wol ;
   struct nic_stats nic_stats ;
   unsigned long active_vlans[64U] ;
   struct pci_dev *pdev ;
   struct net_device *ndev ;
   u32 chip_rev_id ;
   u32 fw_rev_id ;
   u32 func ;
   u32 alt_func ;
   u32 port ;
   spinlock_t adapter_lock ;
   spinlock_t hw_lock ;
   spinlock_t stats_lock ;
   void *reg_base ;
   void *doorbell_area ;
   u32 doorbell_area_size ;
   u32 msg_enable ;
   void *rx_ring_shadow_reg_area ;
   dma_addr_t rx_ring_shadow_reg_dma ;
   void *tx_ring_shadow_reg_area ;
   dma_addr_t tx_ring_shadow_reg_dma ;
   u32 mailbox_in ;
   u32 mailbox_out ;
   struct mbox_params idc_mbc ;
   struct mutex mpi_mutex ;
   int tx_ring_size ;
   int rx_ring_size ;
   u32 intr_count ;
   struct msix_entry *msi_x_entry ;
   struct intr_context intr_context[17U] ;
   int tx_ring_count ;
   u32 rss_ring_count ;
   int rx_ring_count ;
   int ring_mem_size ;
   void *ring_mem ;
   struct rx_ring rx_ring[17U] ;
   struct tx_ring tx_ring[8U] ;
   unsigned int lbq_buf_order ;
   int rx_csum ;
   u32 default_rx_queue ;
   u16 rx_coalesce_usecs ;
   u16 rx_max_coalesced_frames ;
   u16 tx_coalesce_usecs ;
   u16 tx_max_coalesced_frames ;
   u32 xg_sem_mask ;
   u32 port_link_up ;
   u32 port_init ;
   u32 link_status ;
   struct ql_mpi_coredump *mpi_coredump ;
   u32 core_is_dumped ;
   u32 link_config ;
   u32 led_config ;
   u32 max_frame_size ;
   union flash_params flash ;
   struct workqueue_struct *workqueue ;
   struct delayed_work asic_reset_work ;
   struct delayed_work mpi_reset_work ;
   struct delayed_work mpi_work ;
   struct delayed_work mpi_port_cfg_work ;
   struct delayed_work mpi_idc_work ;
   struct delayed_work mpi_core_to_log ;
   struct completion ide_completion ;
   struct nic_operations const *nic_ops ;
   u16 device_id ;
   struct timer_list timer ;
   atomic_t lb_count ;
   char current_mac_addr[6U] ;
};

#line 2255  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ql_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};

#line 1743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
struct ql_reg_dump {
   struct mpi_coredump_global_header mpi_global_header ;
   struct mpi_coredump_segment_header nic_regs_seg_hdr ;
   u32 nic_regs[64U] ;
   struct mpi_coredump_segment_header misc_nic_seg_hdr ;
   struct ql_nic_misc misc_nic_info ;
   struct mpi_coredump_segment_header intr_states_seg_hdr ;
   u32 intr_states[8U] ;
   struct mpi_coredump_segment_header cam_entries_seg_hdr ;
   u32 cam_entries[144U] ;
   struct mpi_coredump_segment_header nic_routing_words_seg_hdr ;
   u32 nic_routing_words[16U] ;
   struct mpi_coredump_segment_header ets_seg_hdr ;
   u32 ets[10U] ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_free_irq_7 {
   int arg0 ;
   int signal_pending ;
};

#line 19  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_17 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_15 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_14 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_16 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
unsigned short __builtin_bswap16(unsigned short);

void __builtin_prefetch(void const * , ...);

void __builtin_unreachable(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/fvtp/.tmp_qlge_main.c"
void ldv_inline_asm(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 8 
void ldv_atomic_dec(atomic_t *v);


#line 9 
int ldv_atomic_dec_and_test(atomic_t *v);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls(int x)
{
  int __retres;
  int r;
  
#line 440 
  ldv_inline_asm();
  
#line 464 
  __retres = r + 1;
  
#line 464 
  return __retres;
}


#line 479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  int __retres;
  
#line 481 
  int bitpos = -1;
  
#line 482 
  ldv_inline_asm();
  
#line 490 
  __retres = bitpos + 1;
  
#line 490 
  return __retres;
}


#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_next_bit(unsigned long const *, unsigned long, unsigned long);


#line 42 
unsigned long find_first_bit(unsigned long const *, unsigned long);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  unsigned long tmp_0;
  
#line 80 
  if (0 != 0) 
#line 80 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)((((((((((unsigned long long)(w >> 32) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 32) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 40) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 40) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 48) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 48) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 56) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 56) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 128ULL) != 0ULL))))); else 
                                                                    
#line 80 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  
#line 80 
  return tmp_0;
}


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
int ____ilog2_NaN(void);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  int __retres;
  int tmp;
  
#line 34 
  tmp = fls((int)n);
  
#line 34 
  __retres = tmp + -1;
  
#line 34 
  return __retres;
}


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_null(char const *, int const);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/getorder.h"
__inline static int __get_order(unsigned long size)
{
  int order;
  
#line 17 
  size -= 1UL;
  
#line 18 
  size >>= 12;
  
#line 22 
  order = fls64((unsigned long long)size);
  
#line 24 
  return order;
}


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
int strncmp(char const *, char const *, __kernel_size_t);


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int __bitmap_weight(unsigned long const *, unsigned int);


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  int tmp_0;
  
#line 300 
  if (0 != 0 && nbits <= 64U) {
    unsigned long tmp;
    
#line 301 
    tmp = hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
    
#line 301 
    __retres = (int)tmp;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 302 
  tmp_0 = __bitmap_weight(src,nbits);
  
#line 302 
  __retres = tmp_0;
  return_label: 
#line 302 
                return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
extern int nr_cpu_ids;


#line 89 
extern struct cpumask const * const cpu_online_mask;


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask const *srcp)
{
  unsigned int __retres;
  int tmp;
  
#line 476 
  tmp = bitmap_weight((unsigned long const *)(& srcp->bits),(unsigned int)nr_cpu_ids);
  
#line 476 
  __retres = (unsigned int)tmp;
  
#line 476 
  return __retres;
}


#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
__inline static void rep_nop(void)
{
  
#line 567 
  ldv_inline_asm();
  
#line 568 
  return;
}


#line 570  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
__inline static void cpu_relax(void)
{
  
#line 572 
  rep_nop();
  
#line 573 
  return;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  
#line 39 
  v->counter = i;
  
#line 40 
  return;
}


#line 98 
static void atomic_inc(atomic_t *v);


#line 114 
static void atomic_dec(atomic_t *v);


#line 120 
static int atomic_dec_and_test(atomic_t *v);


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 45 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_78(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_83(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_79(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_84(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_85(spinlock_t *lock);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 460 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 461 
  return;
}


#line 490 
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 70 
static void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1);


#line 78 
void ldv_spin_model_lock(char *);


#line 79 
void ldv_spin_model_unlock(char *);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmdebug.h"
void dump_page(struct page *, char const *);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
void __init_waitqueue_head(wait_queue_head_t *, char const *, struct lock_class_key *);


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
void __mutex_init(struct mutex *, char const *, struct lock_class_key *);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/completion.h"
__inline static void init_completion(struct completion *x)
{
  
#line 75 
  x->done = 0U;
  {
    struct lock_class_key __key;
    
#line 76 
    __init_waitqueue_head(& x->wait,"&x->wait",& __key);
  }
  
#line 78 
  return;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 285 
unsigned int jiffies_to_usecs(unsigned long const);


#line 365 
unsigned long __usecs_to_jiffies(unsigned int const);


#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int const u)
{
  unsigned long __retres;
  
#line 369 
  __retres = (unsigned long)(((long)u + 3999L) / 4000L);
  
#line 369 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int const u)
{
  unsigned long __retres;
  
#line 410 
  if (0 != 0) {
    unsigned int tmp;
    unsigned long tmp_0;
    
#line 411 
    tmp = jiffies_to_usecs(4611686018427387902UL);
    
#line 411 
    ;
    
#line 411 
    if (tmp < u) {
      
#line 412 
      __retres = 4611686018427387902UL;
      
#line 412 
      goto return_label;
    }
    else ;
    
#line 413 
    tmp_0 = _usecs_to_jiffies(u);
    
#line 413 
    __retres = tmp_0;
    
#line 413 
    goto return_label;
  }
  else {
    unsigned long tmp_1;
    
#line 415 
    tmp_1 = __usecs_to_jiffies(u);
    
#line 415 
    __retres = tmp_1;
    
#line 415 
    goto return_label;
  }
  return_label: 
#line 410 
                return __retres;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 173 
static int ldv_mod_timer_92(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_101(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 181 
static int ldv_mod_timer_103(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 224 
void add_timer(struct timer_list *);


#line 232 
static int ldv_del_timer_sync_97(struct timer_list *ldv_func_arg1);


#line 236 
static int ldv_del_timer_sync_100(struct timer_list *ldv_func_arg1);


#line 240 
static int ldv_del_timer_sync_102(struct timer_list *ldv_func_arg1);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void delayed_work_timer_fn(unsigned long);


#line 181 
void __init_work(struct work_struct *, int);


#line 361 
struct workqueue_struct *__alloc_workqueue_key(char const *, unsigned int, int, struct lock_class_key *, char const * , ...);


#line 421 
void destroy_workqueue(struct workqueue_struct *);


#line 443 
static bool ldv_queue_delayed_work_on_86(int ldv_func_arg1, struct workqueue_struct *ldv_func_arg2, struct delayed_work *ldv_func_arg3, unsigned long ldv_func_arg4);


#line 460 
bool cancel_delayed_work_sync(struct delayed_work *);


#line 505 
static bool ldv_queue_delayed_work_80(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 509 
static bool ldv_queue_delayed_work_81(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 513 
static bool ldv_queue_delayed_work_82(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 517 
static bool ldv_queue_delayed_work_91(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void volatile *addr)
{
  
#line 68 
  ldv_inline_asm();
  
#line 69 
  return;
}


#line 181 
void *ioremap_nocache(resource_size_t, unsigned long);


#line 195 
void iounmap(void volatile *);


#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct page *alloc_pages_current(gfp_t, unsigned int);


#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp;
  
#line 327 
  tmp = alloc_pages_current(gfp_mask,order);
  
#line 327 
  return tmp;
}


#line 366 
void __free_pages(struct page *, unsigned int);


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 1083 
void dev_err(struct device const *, char const * , ...);


#line 1089 
void _dev_info(struct device const *, char const * , ...);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 418 
static void *kmalloc(size_t size, gfp_t flags);


#line 525 
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 542 
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  int __retres;
  
#line 403 
  __retres = pdev->error_state != 1U;
  
#line 403 
  return __retres;
}


#line 951 
int pci_enable_device(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 992 
int pcie_set_readrq(struct pci_dev *, int);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1040 
int pci_set_power_state(struct pci_dev *, pci_power_t);


#line 1041 
pci_power_t pci_choose_state(struct pci_dev *, pm_message_t);


#line 1044 
int __pci_enable_wake(struct pci_dev *, pci_power_t, bool, bool);


#line 1053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_wake(struct pci_dev *dev, pci_power_t state, bool enable)
{
  int tmp;
  
#line 1056 
  tmp = __pci_enable_wake(dev,state,(_Bool)0,(_Bool)((bool)((int)enable) != 0));
  
#line 1056 
  return tmp;
}


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_104(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_105(struct pci_driver *ldv_func_arg1);


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page-flags.h"
__inline static int PageTail(struct page const *page)
{
  int tmp;
  
#line 400 
  tmp = constant_test_bit(15L,(unsigned long const volatile *)(& page->flags));
  
#line 400 
  return tmp;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head_by_tail(struct page *tail)
{
  struct page *__retres;
  int tmp;
  
#line 442 
  struct page *head = tail->__anonCompField_page_46.first_page;
  
#line 443 
  ldv_inline_asm();
  
#line 450 
  tmp = PageTail((struct page const *)tail);
  
#line 450 
  if ((long)(tmp != 0) != 0L) {
    
#line 451 
    __retres = head;
    
#line 451 
    goto return_label;
  }
  else ;
  
#line 452 
  __retres = tail;
  return_label: 
#line 452 
                return __retres;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head(struct page *page)
{
  struct page *__retres;
  int tmp_0;
  
#line 463 
  tmp_0 = PageTail((struct page const *)page);
  
#line 463 
  if ((long)(tmp_0 != 0) != 0L) {
    struct page *tmp;
    
#line 464 
    tmp = compound_head_by_tail(page);
    
#line 464 
    __retres = tmp;
    
#line 464 
    goto return_label;
  }
  else ;
  
#line 465 
  __retres = page;
  return_label: 
#line 465 
                return __retres;
}


#line 532 
bool __get_page_tail(struct page *);


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  int tmp_0;
  int tmp_1;
  
#line 536 
  tmp_0 = PageTail((struct page const *)page);
  
#line 536 
  if ((long)(tmp_0 != 0) != 0L) {
    bool tmp;
    
#line 537 
    tmp = __get_page_tail(page);
    
#line 537 
    if ((long)((int)tmp != 0) != 0L) 
#line 538 
                                     goto return_label; else ;
  }
  else ;
  
#line 543 
  tmp_1 = atomic_read((atomic_t const *)(& page->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count));
  
#line 543 
  if ((long)(tmp_1 <= 0) != 0L) {
    
#line 543 
    dump_page(page,"VM_BUG_ON_PAGE(");
    
#line 544 
    ldv_inline_asm();
    
#line 543 
    ;
  }
  else ;
  
#line 544 
  atomic_inc(& page->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count);
  return_label: 
#line 545 
                return;
}


#line 569 
void put_page(struct page *);


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  bool __retres;
  
#line 1037 
  __retres = (_Bool)(page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index == 18446744073709551615UL);
  
#line 1037 
  return __retres;
}


#line 1212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
void pci_disable_msi(struct pci_dev *);


#line 1216 
void pci_disable_msix(struct pci_dev *);


#line 1219 
int pci_enable_msi_range(struct pci_dev *, int, int);


#line 1220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{
  int __retres;
  
#line 1222 
  int rc = pci_enable_msi_range(dev,nvec,nvec);
  
#line 1223 
  if (rc < 0) {
    
#line 1224 
    __retres = rc;
    
#line 1224 
    goto return_label;
  }
  else ;
  
#line 1225 
  __retres = 0;
  return_label: 
#line 1225 
                return __retres;
}


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 59 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);


#line 63 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 106 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 108 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 108 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 110 
    ldv_inline_asm();
    
#line 108 
    ;
  }
  else ;
  
#line 109 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 110 
    (*(ops->sync_single_for_cpu))(dev,addr,size,dir); else ;
  
#line 111 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  
#line 112 
  return;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 118 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 120 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 120 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 122 
    ldv_inline_asm();
    
#line 120 
    ;
  }
  else ;
  
#line 121 
  if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 122 
    (*(ops->sync_single_for_device))(dev,addr,size,dir); else ;
  
#line 123 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  
#line 124 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 60 
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 131 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static void *dma_zalloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t flag)
{
  
#line 186 
  void *ret = dma_alloc_attrs(dev,size,dma_handle,flag | 32768U,(struct dma_attrs *)0);
  
#line 188 
  return ret;
}


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  void *tmp_0;
  struct device *tmp;
  
#line 19 
  ;
  
#line 19 
  ;
  
#line 19 
  if (hwdev != (struct pci_dev *)0) 
#line 19 
                                    tmp = & hwdev->dev; else 
#line 19 
                                                             tmp = (struct device *)0;
  
#line 19 
  tmp_0 = dma_alloc_attrs(tmp,size,dma_handle,32U,(struct dma_attrs *)0);
  
#line 19 
  return tmp_0;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void *pci_zalloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  void *tmp_0;
  struct device *tmp;
  
#line 26 
  ;
  
#line 26 
  ;
  
#line 26 
  if (hwdev != (struct pci_dev *)0) 
#line 26 
                                    tmp = & hwdev->dev; else 
#line 26 
                                                             tmp = (struct device *)0;
  
#line 26 
  tmp_0 = dma_zalloc_coherent(tmp,size,dma_handle,32U);
  
#line 26 
  return tmp_0;
}


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  struct device *tmp;
  
#line 34 
  ;
  
#line 34 
  ;
  
#line 34 
  ;
  
#line 34 
  if (hwdev != (struct pci_dev *)0) 
#line 34 
                                    tmp = & hwdev->dev; else 
#line 34 
                                                             tmp = (struct device *)0;
  
#line 34 
  dma_free_attrs(tmp,size,vaddr,dma_handle,(struct dma_attrs *)0);
  
#line 35 
  return;
}


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  dma_addr_t tmp_0;
  struct device *tmp;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  if (hwdev != (struct pci_dev *)0) 
#line 40 
                                    tmp = & hwdev->dev; else 
#line 40 
                                                             tmp = (struct device *)0;
  
#line 40 
  tmp_0 = dma_map_single_attrs(tmp,ptr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 40 
  return tmp_0;
}


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  struct device *tmp;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  if (hwdev != (struct pci_dev *)0) 
#line 47 
                                    tmp = & hwdev->dev; else 
#line 47 
                                                             tmp = (struct device *)0;
  
#line 47 
  dma_unmap_single_attrs(tmp,dma_addr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 48 
  return;
}


#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static dma_addr_t pci_map_page(struct pci_dev *hwdev, struct page *page, unsigned long offset, size_t size, int direction)
{
  dma_addr_t tmp_0;
  struct device *tmp;
  
#line 54 
  ;
  
#line 54 
  ;
  
#line 54 
  ;
  
#line 54 
  ;
  
#line 54 
  if (hwdev != (struct pci_dev *)0) 
#line 54 
                                    tmp = & hwdev->dev; else 
#line 54 
                                                             tmp = (struct device *)0;
  
#line 54 
  tmp_0 = dma_map_page(tmp,page,offset,size,(enum dma_data_direction)direction);
  
#line 54 
  return tmp_0;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  struct device *tmp;
  
#line 61 
  ;
  
#line 61 
  ;
  
#line 61 
  ;
  
#line 61 
  if (hwdev != (struct pci_dev *)0) 
#line 61 
                                    tmp = & hwdev->dev; else 
#line 61 
                                                             tmp = (struct device *)0;
  
#line 61 
  dma_unmap_page(tmp,dma_address,size,(enum dma_data_direction)direction);
  
#line 62 
  return;
}


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  struct device *tmp;
  
#line 82 
  ;
  
#line 82 
  ;
  
#line 82 
  ;
  
#line 82 
  if (hwdev != (struct pci_dev *)0) 
#line 82 
                                    tmp = & hwdev->dev; else 
#line 82 
                                                             tmp = (struct device *)0;
  
#line 82 
  dma_sync_single_for_cpu(tmp,dma_handle,size,(enum dma_data_direction)direction);
  
#line 83 
  return;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  struct device *tmp;
  
#line 89 
  ;
  
#line 89 
  ;
  
#line 89 
  ;
  
#line 89 
  if (hwdev != (struct pci_dev *)0) 
#line 89 
                                    tmp = & hwdev->dev; else 
#line 89 
                                                             tmp = (struct device *)0;
  
#line 89 
  dma_sync_single_for_device(tmp,dma_handle,size,(enum dma_data_direction)direction);
  
#line 90 
  return;
}


#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  int tmp;
  
#line 109 
  tmp = dma_mapping_error(& pdev->dev,dma_addr);
  
#line 109 
  return tmp;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 115 
  tmp = dma_set_mask(& dev->dev,mask);
  
#line 115 
  return tmp;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 120 
  tmp = dma_set_coherent_mask(& dev->dev,mask);
  
#line 120 
  return tmp;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_89(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_90(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static void ldv_free_irq_87(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 161 
static void ldv_free_irq_88(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  __sum16 __retres;
  
#line 24 
  ldv_inline_asm();
  
#line 29 
  __retres = (unsigned short)(~ sum >> 16);
  
#line 29 
  return __retres;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  
#line 89 
  ldv_inline_asm();
  
#line 97 
  return sum;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  __sum16 tmp_0;
  __wsum tmp;
  
#line 116 
  tmp = csum_tcpudp_nofold(saddr,daddr,(unsigned short)((int)len),(unsigned short)((int)proto),sum);
  
#line 116 
  tmp_0 = csum_fold(tmp);
  
#line 116 
  return tmp_0;
}


#line 179 
__sum16 csum_ipv6_magic(struct in6_addr const *, struct in6_addr const *, __u32, unsigned short, __wsum);


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  
#line 237 
  frag->size = size;
  
#line 238 
  return;
}


#line 775 
void consume_skb(struct sk_buff *);


#line 852 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);


#line 862 
int skb_pad(struct sk_buff *, int);


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff const *skb)
{
  int __retres;
  int dataref;
  unsigned char *tmp;
  
#line 1131 
  if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) {
    
#line 1132 
    __retres = 0;
    
#line 1132 
    goto return_label;
  }
  else ;
  
#line 1134 
  tmp = skb_end_pointer(skb);
  
#line 1134 
  dataref = atomic_read((atomic_t const *)(& ((struct skb_shared_info *)tmp)->dataref));
  
#line 1135 
  dataref = (dataref & 65535) - (dataref >> 16);
  
#line 1136 
  __retres = dataref != 1;
  return_label: 
#line 1136 
                return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1599  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  unsigned char *tmp;
  bool tmp_0;
  
#line 1602 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1602 
  skb_frag_t *frag = & ((struct skb_shared_info *)tmp)->frags[i];
  
#line 1609 
  frag->page.p = page;
  
#line 1610 
  frag->page_offset = (unsigned int)off;
  
#line 1611 
  skb_frag_size_set(frag,(unsigned int)size);
  
#line 1613 
  page = compound_head(page);
  
#line 1614 
  tmp_0 = page_is_pfmemalloc(page);
  
#line 1614 
  if ((int)tmp_0 != 0) 
#line 1615 
                       skb->pfmemalloc = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
  
#line 1616 
  return;
}


#line 1632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  unsigned char *tmp;
  
#line 1635 
  __skb_fill_page_desc(skb,i,page,off,size);
  
#line 1636 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1636 
  ((struct skb_shared_info *)tmp)->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  
#line 1637 
  return;
}


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 1719 
unsigned char *__pskb_pull_tail(struct sk_buff *, int);


#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  unsigned int tmp;
  unsigned char *tmp_1;
  unsigned int tmp_0;
  
#line 1737 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 1737 
  ;
  
#line 1737 
  if ((long)(tmp >= len) != 0L) {
    
#line 1738 
    __retres = 1;
    
#line 1738 
    goto return_label;
  }
  else ;
  
#line 1739 
  if ((long)(skb->len < len) != 0L) {
    
#line 1740 
    __retres = 0;
    
#line 1740 
    goto return_label;
  }
  else ;
  
#line 1741 
  tmp_0 = skb_headlen((struct sk_buff const *)skb);
  
#line 1741 
  ;
  
#line 1741 
  ;
  
#line 1741 
  tmp_1 = __pskb_pull_tail(skb,(int)(len - tmp_0));
  
#line 1741 
  __retres = tmp_1 != (unsigned char *)0U;
  return_label: 
#line 1741 
                return __retres;
}


#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1752 
  __retres = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1752 
  return __retres;
}


#line 1789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  
#line 1791 
  skb->data += len;
  
#line 1792 
  skb->tail += (unsigned int)len;
  
#line 1793 
  return;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1899 
  __retres = skb->head + (int)skb->network_header;
  
#line 1899 
  return __retres;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1969 
  tmp = skb_transport_header(skb);
  
#line 1969 
  ;
  
#line 1969 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1969 
  return __retres;
}


#line 1982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1984 
  tmp = skb_network_header(skb);
  
#line 1984 
  ;
  
#line 1984 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1984 
  return __retres;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2159 
  tmp = __netdev_alloc_skb(dev,length,32U);
  
#line 2159 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  int __retres;
  unsigned int tmp_0;
  
#line 2430 
  int delta = 0;
  
#line 2432 
  tmp_0 = skb_headroom((struct sk_buff const *)skb);
  
#line 2432 
  ;
  
#line 2432 
  if (tmp_0 < headroom) {
    unsigned int tmp;
    
#line 2433 
    tmp = skb_headroom((struct sk_buff const *)skb);
    
#line 2433 
    delta = (int)(headroom - tmp);
  }
  else ;
  
#line 2435 
  if (delta != 0 || cloned != 0) {
    int tmp_5;
    int tmp_2;
    int tmp_4;
    {
      int tmp_1;
      
#line 2436 
      int _max1 = 32;
      
#line 2436 
      int _max2 = 64;
      
#line 2436 
      if (_max1 > _max2) 
#line 2436 
                         tmp_1 = _max1; else 
#line 2436 
                                             tmp_1 = _max2;
      
#line 2436 
      tmp_2 = tmp_1;
    }
    {
      int tmp_3;
      
#line 2436 
      int _max1_0 = 32;
      
#line 2436 
      int _max2_0 = 64;
      
#line 2436 
      if (_max1_0 > _max2_0) 
#line 2436 
                             tmp_3 = _max1_0; else 
#line 2436 
                                                   tmp_3 = _max2_0;
      
#line 2436 
      tmp_4 = tmp_3;
    }
    
#line 2436 
    ;
    
#line 2436 
    ;
    
#line 2436 
    tmp_5 = pskb_expand_head(skb,((tmp_2 + -1) + delta) & ~ (tmp_4 + -1),0,32U);
    
#line 2436 
    __retres = tmp_5;
    
#line 2436 
    goto return_label;
  }
  else ;
  
#line 2438 
  __retres = 0;
  return_label: 
#line 2438 
                return __retres;
}


#line 2468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  int tmp_0;
  int tmp;
  
#line 2470 
  tmp = skb_header_cloned((struct sk_buff const *)skb);
  
#line 2470 
  ;
  
#line 2470 
  ;
  
#line 2470 
  tmp_0 = __skb_cow(skb,headroom,tmp);
  
#line 2470 
  return tmp_0;
}


#line 2483  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_padto(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  int tmp;
  
#line 2485 
  unsigned int size = skb->len;
  
#line 2486 
  if ((long)(size >= len) != 0L) {
    
#line 2487 
    __retres = 0;
    
#line 2487 
    goto return_label;
  }
  else ;
  
#line 2488 
  tmp = skb_pad(skb,(int)(len - size));
  
#line 2488 
  __retres = tmp;
  return_label: 
#line 2488 
                return __retres;
}


#line 2803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void const *from, unsigned int const len)
{
  
#line 2807 
  memcpy((void *)skb->data,from,(unsigned long)len);
  
#line 2808 
  return;
}


#line 3305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  
#line 3307 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  
#line 3308 
  return;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3386 
  tmp = skb_end_pointer(skb);
  
#line 3386 
  ;
  
#line 3386 
  __retres = (_Bool)((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U);
  
#line 3386 
  return __retres;
}


#line 3426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff const *skb)
{
  
#line 3428 
  return;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 25 
  tmp = (struct iphdr *)skb_network_header(skb);
  
#line 25 
  return tmp;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __const_udelay(unsigned long);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
__inline static void ssleep(unsigned int seconds)
{
  
#line 52 
  msleep(seconds * 1000U);
  
#line 53 
  return;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 1920 
void netif_napi_del(struct napi_struct *);


#line 2183 
int dev_close(struct net_device *);


#line 2205 
static void ldv_free_netdev_94(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_96(struct net_device *ldv_func_arg1);


#line 2213 
static void ldv_free_netdev_99(struct net_device *ldv_func_arg1);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2535 
  i = 0U;
  
#line 2535 
  goto ldv_45915;
  ldv_45914: 
#line 2536 
  ;
  {
    
#line 2536 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2537 
    netif_tx_start_queue(txq);
  }
  
#line 2535 
  i += 1U;
  ldv_45915: 
#line 2536 
  ;
  
#line 2535 
  if (dev->num_tx_queues > i) 
#line 2537 
                              goto ldv_45914; else 
#line 2540 
                                                   goto ldv_45916;
  ldv_45916: 
#line 2541 
  ;
  
#line 2542 
  return;
}


#line 2577  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  struct netdev_queue *tmp;
  
#line 2579 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2579 
  netif_tx_start_queue(tmp);
  
#line 2580 
  return;
}


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 2802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  
#line 2804 
  struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,(unsigned int)queue_index);
  
#line 2805 
  netif_tx_start_queue(txq);
  
#line 2806 
  return;
}


#line 2815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device const *dev, u16 queue_index)
{
  bool tmp_0;
  
#line 2818 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  
#line 2820 
  tmp_0 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
  
#line 2820 
  return tmp_0;
}


#line 2829 
void netif_wake_subqueue(struct net_device *, u16);


#line 2892 
int netif_get_num_default_rss_queues(void);


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2943 
int netif_receive_skb_sk(struct sock *, struct sk_buff *);


#line 2944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netif_receive_skb(struct sk_buff *skb)
{
  int tmp;
  
#line 2946 
  tmp = netif_receive_skb_sk(skb->sk,skb);
  
#line 2946 
  return tmp;
}


#line 2948 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 2950 
struct sk_buff *napi_get_frags(struct napi_struct *);


#line 2951 
gro_result_t napi_gro_frags(struct napi_struct *);


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  u32 __retres;
  
#line 3162 
  if ((unsigned int)debug_value > 31U) {
    
#line 3163 
    __retres = (unsigned int)default_msg_enable_bits;
    
#line 3163 
    goto return_label;
  }
  else ;
  
#line 3164 
  if (debug_value == 0) {
    
#line 3165 
    __retres = 0U;
    
#line 3165 
    goto return_label;
  }
  else ;
  
#line 3167 
  __retres = (unsigned int)((1 << debug_value) + -1);
  return_label: 
#line 3167 
                return __retres;
}


#line 3355 
static int ldv_register_netdev_95(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_98(struct net_device *ldv_func_arg1);


#line 3819 
void netdev_printk(char const *, struct net_device const *, char const * , ...);


#line 3824 
void netdev_alert(struct net_device const *, char const * , ...);


#line 3826 
void netdev_crit(struct net_device const *, char const * , ...);


#line 3828 
void netdev_err(struct net_device const *, char const * , ...);


#line 3830 
void netdev_warn(struct net_device const *, char const * , ...);


#line 3834 
void netdev_info(struct net_device const *, char const * , ...);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
void rtnl_lock(void);


#line 28 
void rtnl_unlock(void);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 29 
  tmp = (struct tcphdr *)skb_transport_header(skb);
  
#line 29 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  struct tcphdr *tmp;
  
#line 34 
  tmp = tcp_hdr(skb);
  
#line 34 
  ;
  
#line 34 
  __retres = (unsigned int)((int)tmp->doff * 4);
  
#line 34 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/udp.h"
__inline static struct udphdr *udp_hdr(struct sk_buff const *skb)
{
  struct udphdr *tmp;
  
#line 27 
  tmp = (struct udphdr *)skb_transport_header(skb);
  
#line 27 
  return tmp;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 76 
  tmp = (struct ipv6hdr *)skb_network_header(skb);
  
#line 76 
  return tmp;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 47 
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_93(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  
#line 246 
  memset((void *)addr,0,6UL);
  
#line 247 
  return;
}


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  __be16 __retres;
  
#line 484 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  
#line 490 
  if ((unsigned int)type == 129U || (unsigned int)type == 43144U) {
    
#line 491 
    if (vlan_depth != 0U) {
      int tmp;
      {
        
#line 492 
        int __ret_warn_on = vlan_depth <= 3U;
        
#line 492 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 492 
                                              warn_slowpath_null("include/linux/if_vlan.h",492); else ;
        
#line 492 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 492 
      if ((long)tmp != 0L) {
        
#line 493 
        __retres = (unsigned short)0U;
        
#line 493 
        goto return_label;
      }
      else ;
      
#line 494 
      vlan_depth += 4294967292U;
    }
    else 
#line 496 
         vlan_depth = 14U;
    ldv_53164: 
#line 497 
    ;
    {
      struct vlan_hdr *vh;
      int tmp_0;
      
#line 501 
      tmp_0 = pskb_may_pull(skb,vlan_depth + 4U);
      
#line 501 
      if ((long)(tmp_0 == 0) != 0L) {
        
#line 503 
        __retres = (unsigned short)0U;
        
#line 503 
        goto return_label;
      }
      else ;
      
#line 505 
      vh = (struct vlan_hdr *)(skb->data + vlan_depth);
      
#line 506 
      type = vh->h_vlan_encapsulated_proto;
      
#line 507 
      vlan_depth += 4U;
    }
    
#line 509 
    if ((unsigned int)type == 129U || (unsigned int)type == 43144U) 
#line 511 
                                                                    goto ldv_53164; else 
                                                                    
#line 514 
                                                                    goto ldv_53165;
    ldv_53165: 
#line 515 
    ;
  }
  else ;
  
#line 512 
  if (depth != (int *)0) 
#line 513 
                         *depth = (int)vlan_depth; else ;
  
#line 515 
  __retres = type;
  return_label: 
#line 515 
                return __retres;
}


#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  __be16 tmp;
  
#line 527 
  tmp = __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
  
#line 527 
  return tmp;
}


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vmalloc(unsigned long);


#line 83 
void vfree(void const *);


#line 2158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
__inline static u32 ql_read32(struct ql_adapter const *qdev, int reg)
{
  u32 tmp;
  
#line 2160 
  tmp = readl((void const volatile *)(qdev->reg_base + reg));
  
#line 2160 
  return tmp;
}


#line 2166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
__inline static void ql_write32(struct ql_adapter const *qdev, int reg, u32 val)
{
  
#line 2168 
  writel(val,(void volatile *)(qdev->reg_base + reg));
  
#line 2169 
  return;
}


#line 2181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
__inline static void ql_write_db_reg(u32 val, void *addr)
{
  
#line 2183 
  writel(val,(void volatile *)addr);
  
#line 2184 
  ldv_inline_asm();
  
#line 2185 
  return;
}


#line 2197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
__inline static u32 ql_read_sh_reg(__le32 *addr)
{
  u32 reg;
  
#line 2200 
  reg = *addr;
  
#line 2201 
  ldv_inline_asm();
  
#line 2202 
  return reg;
}


#line 2205 
char qlge_driver_name[5U];


#line 2206 
char const qlge_driver_version[11U];


#line 2207 
struct ethtool_ops const qlge_ethtool_ops;


#line 2209 
int ql_sem_spinlock(struct ql_adapter *qdev, u32 sem_mask);


#line 2210 
void ql_sem_unlock(struct ql_adapter *qdev, u32 sem_mask);


#line 2211 
int ql_read_xgmac_reg(struct ql_adapter *qdev, u32 reg, u32 *data);


#line 2212 
int ql_get_mac_addr_reg(struct ql_adapter *qdev, u32 type, u16 index, u32 *value);


#line 2214 
int ql_get_routing_reg(struct ql_adapter *qdev, u32 index, u32 *value);


#line 2215 
int ql_write_cfg(struct ql_adapter *qdev, void *ptr, int size, u32 bit, u16 q_id);


#line 2217 
void ql_queue_fw_error(struct ql_adapter *qdev);


#line 2218 
void ql_mpi_work(struct work_struct *work);


#line 2219 
void ql_mpi_reset_work(struct work_struct *work);


#line 2220 
void ql_mpi_core_to_log(struct work_struct *work);


#line 2221 
int ql_wait_reg_rdy(struct ql_adapter *qdev, u32 reg, u32 bit, u32 err_bit);


#line 2222 
void ql_queue_asic_error(struct ql_adapter *qdev);


#line 2223 
u32 ql_enable_completion_interrupt(struct ql_adapter *qdev, u32 intr);


#line 2225 
int ql_read_xgmac_reg64(struct ql_adapter *qdev, u32 reg, u64 *data);


#line 2226 
void ql_mpi_idc_work(struct work_struct *work);


#line 2227 
void ql_mpi_port_cfg_work(struct work_struct *work);


#line 2228 
int ql_mb_get_fw_state(struct ql_adapter *qdev);


#line 2229 
int ql_cam_route_initialize(struct ql_adapter *qdev);


#line 2230 
int ql_read_mpi_reg(struct ql_adapter *qdev, u32 reg, u32 *data);


#line 2239 
int ql_mb_about_fw(struct ql_adapter *qdev);


#line 2240 
int ql_mb_wol_set_magic(struct ql_adapter *qdev, u32 enable_wol);


#line 2241 
int ql_mb_wol_mode(struct ql_adapter *qdev, u32 wol);


#line 2244 
void ql_link_on(struct ql_adapter *qdev);


#line 2245 
void ql_link_off(struct ql_adapter *qdev);


#line 2246 
int ql_mb_set_mgmnt_traffic_ctl(struct ql_adapter *qdev, u32 control);


#line 2249 
int ql_wait_fifo_empty(struct ql_adapter *qdev);


#line 2251 
netdev_tx_t ql_lb_send(struct sk_buff *skb, struct net_device *ndev);


#line 2252 
void ql_check_lb_frame(struct ql_adapter *qdev, struct sk_buff *skb);


#line 2254 
int ql_clean_lb_rx_ring(struct rx_ring *rx_ring, int budget);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
char qlge_driver_name[5U] = {(char)'q', (char)'l', (char)'g', (char)'e', (char)'\000'};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
char const qlge_driver_version[11U] = {(char)'1', (char)'.', (char)'0', (char)'0', (char)'.', (char)'0', (char)'0', (char)'.', (char)'3', (char)'4', (char)'\000'};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static u32 const default_msg = 24823U;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int debug = -1;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_irq_type = 0;

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_mpi_coredump;

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_force_coredump;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct pci_device_id const qlge_pci_tbl[3U] = {{.vendor = 4215U, .device = 32786U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4215U, .device = 32768U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
struct pci_device_id const __mod_pci__qlge_pci_tbl_device_table[3U];

#line 98 
static int ql_wol(struct ql_adapter *qdev);


#line 99 
static void qlge_set_multicast_list(struct net_device *ndev);


#line 100 
static int ql_adapter_down(struct ql_adapter *qdev);


#line 101 
static int ql_adapter_up(struct ql_adapter *qdev);


#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_sem_trylock(struct ql_adapter *qdev, u32 sem_mask)
{
  int __retres;
  u32 tmp;
  
#line 109 
  u32 sem_bits = 0U;
  
#line 111 
  switch (sem_mask) {
    case (u32)196608: 
#line 112 
    ;
    
#line 113 
    sem_bits = 1U;
    
#line 114 
    goto ldv_55773;
    case (u32)786432: 
#line 115 
    ;
    
#line 116 
    sem_bits = 4U;
    
#line 117 
    goto ldv_55773;
    case (u32)3145728: 
#line 118 
    ;
    
#line 119 
    sem_bits = 16U;
    
#line 120 
    goto ldv_55773;
    case (u32)12582912: 
#line 121 
    ;
    
#line 122 
    sem_bits = 64U;
    
#line 123 
    goto ldv_55773;
    case (u32)50331648: 
#line 124 
    ;
    
#line 125 
    sem_bits = 256U;
    
#line 126 
    goto ldv_55773;
    case (u32)201326592: 
#line 127 
    ;
    
#line 128 
    sem_bits = 1024U;
    
#line 129 
    goto ldv_55773;
    case (u32)805306368: 
#line 130 
    ;
    
#line 131 
    sem_bits = 4096U;
    
#line 132 
    goto ldv_55773;
    case (u32)(-1073741824): 
#line 133 
    ;
    
#line 134 
    sem_bits = 16384U;
    
#line 135 
    goto ldv_55773;
    default: 
#line 136 
    ;
    
#line 137 
    if ((qdev->msg_enable & 2U) != 0U) 
#line 137 
                                       netdev_alert((struct net_device const *)qdev->ndev,"bad Semaphore mask!.\n"); else ;
    
#line 138 
    __retres = -22;
    
#line 138 
    goto return_label;
  }
  ldv_55773: 
#line 141 
  ;
  
#line 141 
  ql_write32((struct ql_adapter const *)qdev,100,sem_bits | sem_mask);
  
#line 142 
  tmp = ql_read32((struct ql_adapter const *)qdev,100);
  
#line 142 
  ;
  
#line 142 
  __retres = (tmp & sem_bits) == 0U;
  return_label: 
#line 142 
                return __retres;
}


#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
int ql_sem_spinlock(struct ql_adapter *qdev, u32 sem_mask)
{
  int __retres;
  int tmp;
  
#line 147 
  unsigned int wait_count = 30U;
  ldv_55787: 
#line 148 
  ;
  
#line 149 
  tmp = ql_sem_trylock(qdev,sem_mask);
  
#line 149 
  if (tmp == 0) {
    
#line 150 
    __retres = 0;
    
#line 150 
    goto return_label;
  }
  else ;
  
#line 151 
  __const_udelay(429500UL);
  
#line 152 
  wait_count -= 1U;
  
#line 152 
  if (wait_count != 0U) 
#line 154 
                        goto ldv_55787; else 
#line 157 
                                             goto ldv_55788;
  ldv_55788: 
#line 158 
  ;
  
#line 153 
  __retres = -110;
  return_label: 
#line 153 
                return __retres;
}


#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
void ql_sem_unlock(struct ql_adapter *qdev, u32 sem_mask)
{
  
#line 158 
  ql_write32((struct ql_adapter const *)qdev,100,sem_mask);
  
#line 159 
  ql_read32((struct ql_adapter const *)qdev,100);
  
#line 160 
  return;
}


#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
int ql_wait_reg_rdy(struct ql_adapter *qdev, u32 reg, u32 bit, u32 err_bit)
{
  int __retres;
  u32 temp;
  
#line 170 
  int count = 3;
  
#line 172 
  goto ldv_55802;
  ldv_55801: 
#line 173 
  ;
  
#line 173 
  temp = ql_read32((struct ql_adapter const *)qdev,(int)reg);
  
#line 176 
  if ((temp & err_bit) != 0U) {
    
#line 177 
    if ((qdev->msg_enable & 2U) != 0U) 
#line 177 
                                       netdev_alert((struct net_device const *)qdev->ndev,"register 0x%.08x access error, value = 0x%.08x!.\n",reg,temp); else ;
    
#line 180 
    __retres = -5;
    
#line 180 
    goto return_label;
  }
  else 
    
#line 181 
    if ((temp & bit) != 0U) {
      
#line 182 
      __retres = 0;
      
#line 182 
      goto return_label;
    }
    else ;
  
#line 183 
  __const_udelay(429500UL);
  
#line 184 
  count -= 1;
  ldv_55802: 
#line 185 
  ;
  
#line 172 
  if (count != 0) 
#line 174 
                  goto ldv_55801; else 
#line 177 
                                       goto ldv_55803;
  ldv_55803: 
#line 178 
  ;
  
#line 186 
  if ((qdev->msg_enable & 2U) != 0U) 
#line 186 
                                     netdev_alert((struct net_device const *)qdev->ndev,"Timed out waiting for reg %x to come ready.\n",reg); else ;
  
#line 188 
  __retres = -110;
  return_label: 
#line 188 
                return __retres;
}


#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_wait_cfg(struct ql_adapter *qdev, u32 bit)
{
  int __retres;
  u32 temp;
  
#line 196 
  int count = 3;
  
#line 199 
  goto ldv_55811;
  ldv_55810: 
#line 200 
  ;
  
#line 200 
  temp = ql_read32((struct ql_adapter const *)qdev,40);
  
#line 201 
  if ((temp & 32U) != 0U) {
    
#line 202 
    __retres = -5;
    
#line 202 
    goto return_label;
  }
  else ;
  
#line 203 
  if ((temp & bit) == 0U) {
    
#line 204 
    __retres = 0;
    
#line 204 
    goto return_label;
  }
  else ;
  
#line 205 
  __const_udelay(429500UL);
  
#line 206 
  count -= 1;
  ldv_55811: 
#line 207 
  ;
  
#line 199 
  if (count != 0) 
#line 201 
                  goto ldv_55810; else 
#line 204 
                                       goto ldv_55812;
  ldv_55812: 
#line 205 
  ;
  
#line 208 
  __retres = -110;
  return_label: 
#line 208 
                return __retres;
}


#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
int ql_write_cfg(struct ql_adapter *qdev, void *ptr, int size, u32 bit, u16 q_id)
{
  int __retres;
  u64 map;
  int direction;
  u32 mask;
  u32 value;
  int tmp;
  
#line 219 
  int status = 0;
  
#line 224 
  if ((bit & 69U) != 0U) 
#line 224 
                         direction = 1; else 
#line 224 
                                             direction = 2;
  
#line 228 
  map = pci_map_single(qdev->pdev,ptr,(unsigned long)size,direction);
  
#line 229 
  tmp = pci_dma_mapping_error(qdev->pdev,map);
  
#line 229 
  if (tmp != 0) {
    
#line 230 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 230 
                                        netdev_err((struct net_device const *)qdev->ndev,"Couldn\'t map DMA area.\n"); else ;
    
#line 231 
    __retres = -12;
    
#line 231 
    goto return_label;
  }
  else ;
  
#line 234 
  status = ql_sem_spinlock(qdev,3145728U);
  
#line 235 
  if (status != 0) {
    
#line 236 
    __retres = status;
    
#line 236 
    goto return_label;
  }
  else ;
  
#line 238 
  status = ql_wait_cfg(qdev,bit);
  
#line 239 
  if (status != 0) {
    
#line 240 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 240 
                                        netdev_err((struct net_device const *)qdev->ndev,"Timed out waiting for CFG to come ready.\n"); else ;
    
#line 242 
    goto exit;
  }
  else ;
  
#line 245 
  ql_write32((struct ql_adapter const *)qdev,32,(unsigned int)map);
  
#line 246 
  ql_write32((struct ql_adapter const *)qdev,36,(unsigned int)(map >> 32));
  
#line 248 
  mask = (bit << 16) | 2130706432U;
  
#line 249 
  value = (unsigned int)((int)q_id << 8) | bit;
  
#line 250 
  ql_write32((struct ql_adapter const *)qdev,40,mask | value);
  
#line 255 
  status = ql_wait_cfg(qdev,bit);
  exit: 
#line 256 
  ;
  
#line 257 
  ql_sem_unlock(qdev,3145728U);
  
#line 258 
  pci_unmap_single(qdev->pdev,map,(unsigned long)size,direction);
  
#line 259 
  __retres = status;
  return_label: 
#line 259 
                return __retres;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
int ql_get_mac_addr_reg(struct ql_adapter *qdev, u32 type, u16 index, u32 *value)
{
  int status;
  
#line 266 
  u32 offset = 0U;
  
#line 269 
  switch (type) {
    u32 tmp;
    u32 *tmp_0;
    u32 tmp_1;
    u32 *tmp_2;
    case (u32)65536: 
#line 270 
    ;
    case (u32)0: 
#line 271 
    ;
    
#line 273 
    status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
    
#line 276 
    if (status != 0) 
#line 277 
                     goto exit; else ;
    
#line 278 
    tmp = offset;
    
#line 278 
    offset += 1U;
    
#line 278 
    ;
    
#line 278 
    ;
    
#line 278 
    ql_write32((struct ql_adapter const *)qdev,168,((tmp | (unsigned int)((int)index << 4)) | type) | 100663296U);
    
#line 281 
    status = ql_wait_reg_rdy(qdev,168U,1073741824U,0U);
    
#line 284 
    if (status != 0) 
#line 285 
                     goto exit; else ;
    
#line 286 
    tmp_0 = value;
    
#line 286 
    value += 1;
    
#line 286 
    *tmp_0 = ql_read32((struct ql_adapter const *)qdev,172);
    
#line 287 
    status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
    
#line 290 
    if (status != 0) 
#line 291 
                     goto exit; else ;
    
#line 292 
    tmp_1 = offset;
    
#line 292 
    offset += 1U;
    
#line 292 
    ;
    
#line 292 
    ;
    
#line 292 
    ql_write32((struct ql_adapter const *)qdev,168,((tmp_1 | (unsigned int)((int)index << 4)) | type) | 100663296U);
    
#line 295 
    status = ql_wait_reg_rdy(qdev,168U,1073741824U,0U);
    
#line 298 
    if (status != 0) 
#line 299 
                     goto exit; else ;
    
#line 300 
    tmp_2 = value;
    
#line 300 
    value += 1;
    
#line 300 
    *tmp_2 = ql_read32((struct ql_adapter const *)qdev,172);
    
#line 301 
    if (type == 0U) {
      u32 tmp_3;
      u32 *tmp_4;
      
#line 302 
      status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
      
#line 305 
      if (status != 0) 
#line 306 
                       goto exit; else ;
      
#line 307 
      tmp_3 = offset;
      
#line 307 
      offset += 1U;
      
#line 307 
      ;
      
#line 307 
      ;
      
#line 307 
      ql_write32((struct ql_adapter const *)qdev,168,((tmp_3 | (unsigned int)((int)index << 4)) | type) | 100663296U);
      
#line 310 
      status = ql_wait_reg_rdy(qdev,168U,1073741824U,0U);
      
#line 313 
      if (status != 0) 
#line 314 
                       goto exit; else ;
      
#line 315 
      tmp_4 = value;
      
#line 315 
      value += 1;
      
#line 315 
      *tmp_4 = ql_read32((struct ql_adapter const *)qdev,172);
    }
    else ;
    
#line 317 
    goto ldv_55837;
    case (u32)131072: 
#line 319 
    ;
    case (u32)196608: 
#line 320 
    ;
    default: 
#line 321 
    ;
    
#line 322 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 322 
                                        netdev_crit((struct net_device const *)qdev->ndev,"Address type %d not yet supported.\n",type); else ;
    
#line 324 
    status = -1;
  }
  ldv_55837: 
#line 326 
  ;
  exit: 
#line 326 
  ;
  
#line 327 
  return status;
}


#line 333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_set_mac_addr_reg(struct ql_adapter *qdev, u8 *addr, u32 type, u16 index)
{
  
#line 336 
  u32 offset = 0U;
  
#line 337 
  int status = 0;
  
#line 339 
  switch (type) {
    case (u32)65536: 
#line 340 
    ;
    {
      u32 tmp;
      u32 tmp_0;
      
#line 342 
      u32 upper = (unsigned int)(((int)*addr << 8) | (int)*(addr + 1U));
      
#line 343 
      u32 lower = (unsigned int)(((((int)*(addr + 2U) << 24) | ((int)*(addr + 3U) << 16)) | ((int)*(addr + 4U) << 8)) | (int)*(addr + 5U));
      
#line 346 
      status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
      
#line 349 
      if (status != 0) 
#line 350 
                       goto exit; else ;
      
#line 351 
      tmp = offset;
      
#line 351 
      offset += 1U;
      
#line 351 
      ;
      
#line 351 
      ;
      
#line 351 
      ql_write32((struct ql_adapter const *)qdev,168,((tmp | (unsigned int)((int)index << 4)) | type) | 134217728U);
      
#line 354 
      ql_write32((struct ql_adapter const *)qdev,172,lower);
      
#line 355 
      status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
      
#line 358 
      if (status != 0) 
#line 359 
                       goto exit; else ;
      
#line 360 
      tmp_0 = offset;
      
#line 360 
      offset += 1U;
      
#line 360 
      ;
      
#line 360 
      ;
      
#line 360 
      ql_write32((struct ql_adapter const *)qdev,168,((tmp_0 | (unsigned int)((int)index << 4)) | type) | 134217728U);
      
#line 364 
      ql_write32((struct ql_adapter const *)qdev,172,upper);
      
#line 365 
      status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
      
#line 368 
      if (status != 0) 
#line 369 
                       goto exit; else ;
      
#line 370 
      goto ldv_55853;
    }
    case (u32)0: 
#line 372 
    ;
    {
      u32 cam_output;
      u32 tmp_1;
      u32 tmp_2;
      
#line 375 
      u32 upper_0 = (unsigned int)(((int)*addr << 8) | (int)*(addr + 1U));
      
#line 376 
      u32 lower_0 = (unsigned int)(((((int)*(addr + 2U) << 24) | ((int)*(addr + 3U) << 16)) | ((int)*(addr + 4U) << 8)) | (int)*(addr + 5U));
      
#line 379 
      status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
      
#line 382 
      if (status != 0) 
#line 383 
                       goto exit; else ;
      
#line 384 
      tmp_1 = offset;
      
#line 384 
      offset += 1U;
      
#line 384 
      ;
      
#line 384 
      ;
      
#line 384 
      ql_write32((struct ql_adapter const *)qdev,168,(tmp_1 | (unsigned int)((int)index << 4)) | type);
      
#line 387 
      ql_write32((struct ql_adapter const *)qdev,172,lower_0);
      
#line 388 
      status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
      
#line 391 
      if (status != 0) 
#line 392 
                       goto exit; else ;
      
#line 393 
      tmp_2 = offset;
      
#line 393 
      offset += 1U;
      
#line 393 
      ;
      
#line 393 
      ;
      
#line 393 
      ql_write32((struct ql_adapter const *)qdev,168,(tmp_2 | (unsigned int)((int)index << 4)) | type);
      
#line 396 
      ql_write32((struct ql_adapter const *)qdev,172,upper_0);
      
#line 397 
      status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
      
#line 400 
      if (status != 0) 
#line 401 
                       goto exit; else ;
      
#line 402 
      ql_write32((struct ql_adapter const *)qdev,168,((unsigned int)((int)index << 4) | offset) | type);
      
#line 409 
      cam_output = (qdev->func << 2) | 1U;
      
#line 413 
      if (((qdev->ndev)->features & 256ULL) != 0ULL) 
#line 414 
                                                     cam_output |= 16U; else ;
      
#line 416 
      ql_write32((struct ql_adapter const *)qdev,172,cam_output);
      
#line 417 
      goto ldv_55853;
    }
    case (u32)131072: 
#line 419 
    ;
    {
      
#line 421 
      u32 enable_bit = *((u32 *)addr);
      
#line 427 
      status = ql_wait_reg_rdy(qdev,168U,2147483648U,0U);
      
#line 430 
      if (status != 0) 
#line 431 
                       goto exit; else ;
      
#line 432 
      ql_write32((struct ql_adapter const *)qdev,168,(((unsigned int)((int)index << 4) | offset) | type) | enable_bit);
      
#line 436 
      goto ldv_55853;
    }
    case (u32)196608: 
#line 438 
    ;
    default: 
#line 439 
    ;
    
#line 440 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 440 
                                        netdev_crit((struct net_device const *)qdev->ndev,"Address type %d not yet supported.\n",type); else ;
    
#line 442 
    status = -1;
  }
  ldv_55853: 
#line 444 
  ;
  exit: 
#line 444 
  ;
  
#line 445 
  return status;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_set_mac_addr(struct ql_adapter *qdev, int set)
{
  int __retres;
  int status;
  char zero_mac_addr[6U];
  char *addr;
  
#line 458 
  if (set != 0) {
    
#line 459 
    addr = & qdev->current_mac_addr[0];
    
#line 460 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 460 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"Set Mac addr %pM\n",addr); else ;
  }
  else {
    
#line 463 
    eth_zero_addr((u8 *)(& zero_mac_addr));
    
#line 464 
    addr = &(zero_mac_addr[0]);
    
#line 465 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 465 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"Clearing MAC address\n"); else ;
  }
  
#line 468 
  status = ql_sem_spinlock(qdev,12582912U);
  
#line 469 
  if (status != 0) {
    
#line 470 
    __retres = status;
    
#line 470 
    goto return_label;
  }
  else ;
  
#line 471 
  status = ql_set_mac_addr_reg(qdev,(u8 *)addr,0U,(unsigned short)((int)((unsigned int)((unsigned short)qdev->func) * 128U)));
  
#line 473 
  ql_sem_unlock(qdev,12582912U);
  
#line 474 
  if (status != 0) {
    
#line 475 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 475 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init mac address.\n"); else ;
  }
  else ;
  
#line 477 
  __retres = status;
  return_label: 
#line 477 
                return __retres;
}


#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
void ql_link_on(struct ql_adapter *qdev)
{
  
#line 482 
  if ((qdev->msg_enable & 4U) != 0U) 
#line 482 
                                     netdev_err((struct net_device const *)qdev->ndev,"Link is up.\n"); else ;
  
#line 483 
  netif_carrier_on(qdev->ndev);
  
#line 484 
  ql_set_mac_addr(qdev,1);
  
#line 485 
  return;
}


#line 487  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
void ql_link_off(struct ql_adapter *qdev)
{
  
#line 489 
  if ((qdev->msg_enable & 4U) != 0U) 
#line 489 
                                     netdev_err((struct net_device const *)qdev->ndev,"Link is down.\n"); else ;
  
#line 490 
  netif_carrier_off(qdev->ndev);
  
#line 491 
  ql_set_mac_addr(qdev,0);
  
#line 492 
  return;
}


#line 497  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
int ql_get_routing_reg(struct ql_adapter *qdev, u32 index, u32 *value)
{
  
#line 499 
  int status = 0;
  
#line 501 
  status = ql_wait_reg_rdy(qdev,228U,2147483648U,0U);
  
#line 502 
  if (status != 0) 
#line 503 
                   goto exit; else ;
  
#line 505 
  ql_write32((struct ql_adapter const *)qdev,228,(index << 8) | 67239936U);
  
#line 507 
  status = ql_wait_reg_rdy(qdev,228U,1073741824U,0U);
  
#line 508 
  if (status != 0) 
#line 509 
                   goto exit; else ;
  
#line 510 
  *value = ql_read32((struct ql_adapter const *)qdev,232);
  exit: 
#line 511 
  ;
  
#line 512 
  return status;
}


#line 520  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_set_routing_reg(struct ql_adapter *qdev, u32 index, u32 mask, int enable)
{
  
#line 523 
  int status = -22;
  
#line 524 
  u32 value = 0U;
  
#line 526 
  switch (mask) {
    case (u32)128: 
#line 527 
    ;
    
#line 529 
    value = 1182720U;
    
#line 532 
    goto ldv_55891;
    case (u32)8388608: 
#line 534 
    ;
    
#line 536 
    value = 3280640U;
    
#line 539 
    goto ldv_55891;
    case (u32)4194304: 
#line 541 
    ;
    
#line 543 
    value = 3276800U;
    
#line 546 
    goto ldv_55891;
    case (u32)33554432: 
#line 548 
    ;
    
#line 550 
    value = 3277056U;
    
#line 554 
    goto ldv_55891;
    case (u32)16777216: 
#line 556 
    ;
    
#line 558 
    value = 3277312U;
    
#line 562 
    goto ldv_55891;
    case (u32)1: 
#line 564 
    ;
    
#line 566 
    value = 3277568U;
    
#line 569 
    goto ldv_55891;
    case (u32)2: 
#line 571 
    ;
    
#line 573 
    value = 3278080U;
    
#line 576 
    goto ldv_55891;
    case (u32)4: 
#line 578 
    ;
    
#line 580 
    value = 3277824U;
    
#line 583 
    goto ldv_55891;
    case -2147483648: 
#line 585 
    ;
    
#line 587 
    value = 133120U;
    
#line 590 
    goto ldv_55891;
    case (u32)0: 
#line 592 
    ;
    
#line 594 
    value = (index << 8) | 3276800U;
    
#line 597 
    goto ldv_55891;
    default: 
#line 599 
    ;
    
#line 600 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 600 
                                        netdev_err((struct net_device const *)qdev->ndev,"Mask type %d not yet supported.\n",mask); else ;
    
#line 602 
    status = -1;
    
#line 603 
    goto exit;
  }
  ldv_55891: 
#line 606 
  ;
  
#line 606 
  if (value != 0U) {
    int tmp;
    u32 tmp_0;
    
#line 607 
    status = ql_wait_reg_rdy(qdev,228U,2147483648U,0U);
    
#line 608 
    if (status != 0) 
#line 609 
                     goto exit; else ;
    
#line 610 
    if (enable != 0) 
#line 610 
                     tmp = 134217728; else 
#line 610 
                                           tmp = 0;
    
#line 610 
    value = (unsigned int)tmp | value;
    
#line 611 
    ql_write32((struct ql_adapter const *)qdev,228,value);
    
#line 612 
    if (enable != 0) 
#line 612 
                     tmp_0 = mask; else 
#line 612 
                                        tmp_0 = 0U;
    
#line 612 
    ;
    
#line 612 
    ql_write32((struct ql_adapter const *)qdev,232,tmp_0);
  }
  else ;
  exit: 
#line 614 
  ;
  
#line 615 
  return status;
}


#line 618  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_enable_interrupts(struct ql_adapter *qdev)
{
  
#line 620 
  ql_write32((struct ql_adapter const *)qdev,52,1073758208U);
  
#line 621 
  return;
}


#line 623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_disable_interrupts(struct ql_adapter *qdev)
{
  
#line 625 
  ql_write32((struct ql_adapter const *)qdev,52,1073741824U);
  
#line 626 
  return;
}


#line 634  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
u32 ql_enable_completion_interrupt(struct ql_adapter *qdev, u32 intr)
{
  u32 __retres;
  int tmp;
  int tmp_0;
  
#line 636 
  u32 var = 0U;
  
#line 637 
  unsigned long hw_flags = 0UL;
  
#line 638 
  struct intr_context *ctx = (struct intr_context *)(& qdev->intr_context) + intr;
  
#line 640 
  tmp = constant_test_bit(3L,(unsigned long const volatile *)(& qdev->flags));
  
#line 640 
  if ((long)(tmp != 0) != 0L) {
    
#line 640 
    if ((long)(intr != 0U) != 0L) {
      
#line 644 
      ql_write32((struct ql_adapter const *)qdev,52,ctx->intr_en_mask);
      
#line 646 
      var = ql_read32((struct ql_adapter const *)qdev,48);
      
#line 647 
      __retres = var;
      
#line 647 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 650 
  ldv___ldv_spin_lock_76(& qdev->hw_lock);
  
#line 651 
  tmp_0 = atomic_dec_and_test(& ctx->irq_cnt);
  
#line 651 
  if (tmp_0 != 0) {
    
#line 652 
    ql_write32((struct ql_adapter const *)qdev,52,ctx->intr_en_mask);
    
#line 654 
    var = ql_read32((struct ql_adapter const *)qdev,48);
  }
  else ;
  
#line 656 
  ldv_spin_unlock_irqrestore_77(& qdev->hw_lock,hw_flags);
  
#line 657 
  __retres = var;
  return_label: 
#line 657 
                return __retres;
}


#line 660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static u32 ql_disable_completion_interrupt(struct ql_adapter *qdev, u32 intr)
{
  u32 __retres;
  struct intr_context *ctx;
  int tmp;
  int tmp_0;
  
#line 662 
  u32 var = 0U;
  
#line 668 
  tmp = constant_test_bit(3L,(unsigned long const volatile *)(& qdev->flags));
  
#line 668 
  if ((long)(tmp != 0) != 0L) {
    
#line 668 
    if ((long)(intr != 0U) != 0L) {
      
#line 669 
      __retres = 0U;
      
#line 669 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 671 
  ctx = (struct intr_context *)(& qdev->intr_context) + intr;
  
#line 672 
  ldv_spin_lock_78(& qdev->hw_lock);
  
#line 673 
  tmp_0 = atomic_read((atomic_t const *)(& ctx->irq_cnt));
  
#line 673 
  if (tmp_0 == 0) {
    
#line 674 
    ql_write32((struct ql_adapter const *)qdev,52,ctx->intr_dis_mask);
    
#line 676 
    var = ql_read32((struct ql_adapter const *)qdev,48);
  }
  else ;
  
#line 678 
  atomic_inc(& ctx->irq_cnt);
  
#line 679 
  ldv_spin_unlock_79(& qdev->hw_lock);
  
#line 680 
  __retres = var;
  return_label: 
#line 680 
                return __retres;
}


#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_enable_all_completion_interrupts(struct ql_adapter *qdev)
{
  int i;
  int tmp;
  
#line 686 
  i = 0;
  
#line 686 
  goto ldv_55927;
  ldv_55926: 
#line 687 
  ;
  
#line 691 
  tmp = constant_test_bit(3L,(unsigned long const volatile *)(& qdev->flags));
  
#line 691 
  if ((long)(tmp == 0) != 0L) 
#line 693 
                              atomic_set(& qdev->intr_context[i].irq_cnt,1);
  else 
    
#line 691 
    if ((long)(i == 0) != 0L) 
#line 693 
                              atomic_set(& qdev->intr_context[i].irq_cnt,1); else ;
  
#line 694 
  ql_enable_completion_interrupt(qdev,(unsigned int)i);
  
#line 686 
  i += 1;
  ldv_55927: 
#line 687 
  ;
  
#line 686 
  if (qdev->intr_count > (unsigned int)i) 
#line 688 
                                          goto ldv_55926; else 
#line 691 
                                                               goto ldv_55928;
  ldv_55928: 
#line 692 
  ;
  
#line 693 
  return;
}


#line 699  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_validate_flash(struct ql_adapter *qdev, u32 size, char const *str)
{
  int __retres;
  int status;
  int i;
  __le16 *tmp;
  
#line 702 
  u16 csum = (unsigned short)0U;
  
#line 703 
  __le16 *flash = (__le16 *)(& qdev->flash);
  
#line 705 
  status = strncmp((char const *)(& qdev->flash),str,4UL);
  
#line 706 
  if (status != 0) {
    
#line 707 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 707 
                                        netdev_err((struct net_device const *)qdev->ndev,"Invalid flash signature.\n"); else ;
    
#line 708 
    __retres = status;
    
#line 708 
    goto return_label;
  }
  else ;
  
#line 711 
  i = 0;
  
#line 711 
  goto ldv_55939;
  ldv_55938: 
#line 712 
  ;
  
#line 712 
  tmp = flash;
  
#line 712 
  flash += 1;
  
#line 712 
  csum = (unsigned short)((int)*tmp + (int)csum);
  
#line 711 
  i += 1;
  ldv_55939: 
#line 712 
  ;
  
#line 711 
  if ((unsigned int)i < size) 
#line 713 
                              goto ldv_55938; else 
#line 716 
                                                   goto ldv_55940;
  ldv_55940: 
#line 717 
  ;
  
#line 714 
  if ((unsigned int)csum != 0U) {
    
#line 715 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 715 
                                        netdev_err((struct net_device const *)qdev->ndev,"Invalid flash checksum, csum = 0x%.04x.\n",(int)csum); else ;
  }
  else ;
  
#line 718 
  __retres = (int)csum;
  return_label: 
#line 718 
                return __retres;
}


#line 721  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_read_flash_word(struct ql_adapter *qdev, int offset, __le32 *data)
{
  
#line 723 
  int status = 0;
  
#line 725 
  status = ql_wait_reg_rdy(qdev,136U,2147483648U,536870912U);
  
#line 727 
  if (status != 0) 
#line 728 
                   goto exit; else ;
  
#line 730 
  ql_write32((struct ql_adapter const *)qdev,136,(unsigned int)(offset | 1073741824));
  
#line 732 
  status = ql_wait_reg_rdy(qdev,136U,2147483648U,536870912U);
  
#line 734 
  if (status != 0) 
#line 735 
                   goto exit; else ;
  
#line 740 
  *data = ql_read32((struct ql_adapter const *)qdev,140);
  exit: 
#line 741 
  ;
  
#line 742 
  return status;
}


#line 745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_get_8000_flash_params(struct ql_adapter *qdev)
{
  int __retres;
  u32 i;
  u32 size;
  int status;
  u32 offset;
  u8 mac_addr[6U];
  int tmp;
  int tmp_1;
  bool tmp_0;
  
#line 749 
  __le32 *p = (__le32 *)(& qdev->flash);
  
#line 756 
  if (qdev->port == 0U) 
#line 757 
                        offset = 327808U; else 
#line 759 
                                               offset = 328064U;
  
#line 761 
  tmp = ql_sem_spinlock(qdev,50331648U);
  
#line 761 
  if (tmp != 0) {
    
#line 762 
    __retres = -110;
    
#line 762 
    goto return_label;
  }
  else ;
  
#line 764 
  size = 128U;
  
#line 765 
  i = 0U;
  
#line 765 
  goto ldv_55959;
  ldv_55958: 
#line 766 
  ;
  
#line 766 
  status = ql_read_flash_word(qdev,(int)(i + offset),p);
  
#line 767 
  if (status != 0) {
    
#line 768 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 768 
                                        netdev_err((struct net_device const *)qdev->ndev,"Error reading flash.\n"); else ;
    
#line 770 
    goto exit;
  }
  else ;
  
#line 765 
  i += 1U;
  
#line 765 
  p += 1;
  ldv_55959: 
#line 766 
  ;
  
#line 765 
  if (i < size) 
#line 767 
                goto ldv_55958; else 
#line 770 
                                     goto ldv_55960;
  ldv_55960: 
#line 771 
  ;
  
#line 774 
  status = ql_validate_flash(qdev,256U,"8000");
  
#line 777 
  if (status != 0) {
    
#line 778 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 778 
                                        netdev_err((struct net_device const *)qdev->ndev,"Invalid flash.\n"); else ;
    
#line 779 
    status = -22;
    
#line 780 
    goto exit;
  }
  else ;
  
#line 786 
  if ((unsigned int)qdev->flash.flash_params_8000.data_type1 == 2U) 
#line 787 
                                                                    memcpy((void *)(& mac_addr),(void const *)(& qdev->flash.flash_params_8000.mac_addr1),(unsigned long)(qdev->ndev)->addr_len); else 
                                                                    
#line 791 
                                                                    memcpy((void *)(& mac_addr),(void const *)(& qdev->flash.flash_params_8000.mac_addr),(unsigned long)(qdev->ndev)->addr_len);
  
#line 795 
  tmp_0 = is_valid_ether_addr((u8 const *)(& mac_addr));
  
#line 795 
  if (tmp_0) 
#line 795 
             tmp_1 = 0; else 
#line 795 
                             tmp_1 = 1;
  
#line 795 
  if (tmp_1) {
    
#line 796 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 796 
                                        netdev_err((struct net_device const *)qdev->ndev,"Invalid MAC address.\n"); else ;
    
#line 797 
    status = -22;
    
#line 798 
    goto exit;
  }
  else ;
  
#line 801 
  memcpy((void *)(qdev->ndev)->dev_addr,(void const *)(& mac_addr),(unsigned long)(qdev->ndev)->addr_len);
  exit: 
#line 805 
  ;
  
#line 806 
  ql_sem_unlock(qdev,50331648U);
  
#line 807 
  __retres = status;
  return_label: 
#line 807 
                return __retres;
}


#line 810  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_get_8012_flash_params(struct ql_adapter *qdev)
{
  int __retres;
  int i;
  int status;
  int tmp;
  int tmp_1;
  bool tmp_0;
  
#line 814 
  __le32 *p = (__le32 *)(& qdev->flash);
  
#line 815 
  u32 offset = 0U;
  
#line 816 
  u32 size = 5U;
  
#line 821 
  if (qdev->port != 0U) 
#line 822 
                        offset = size; else ;
  
#line 824 
  tmp = ql_sem_spinlock(qdev,50331648U);
  
#line 824 
  if (tmp != 0) {
    
#line 825 
    __retres = -110;
    
#line 825 
    goto return_label;
  }
  else ;
  
#line 827 
  i = 0;
  
#line 827 
  goto ldv_55971;
  ldv_55970: 
#line 828 
  ;
  
#line 828 
  status = ql_read_flash_word(qdev,(int)((unsigned int)i + offset),p);
  
#line 829 
  if (status != 0) {
    
#line 830 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 830 
                                        netdev_err((struct net_device const *)qdev->ndev,"Error reading flash.\n"); else ;
    
#line 832 
    goto exit;
  }
  else ;
  
#line 827 
  i += 1;
  
#line 827 
  p += 1;
  ldv_55971: 
#line 828 
  ;
  
#line 827 
  if ((unsigned int)i < size) 
#line 829 
                              goto ldv_55970; else 
#line 832 
                                                   goto ldv_55972;
  ldv_55972: 
#line 833 
  ;
  
#line 837 
  status = ql_validate_flash(qdev,10U,"8012");
  
#line 840 
  if (status != 0) {
    
#line 841 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 841 
                                        netdev_err((struct net_device const *)qdev->ndev,"Invalid flash.\n"); else ;
    
#line 842 
    status = -22;
    
#line 843 
    goto exit;
  }
  else ;
  
#line 846 
  tmp_0 = is_valid_ether_addr((u8 const *)(& qdev->flash.flash_params_8012.mac_addr));
  
#line 846 
  if (tmp_0) 
#line 846 
             tmp_1 = 0; else 
#line 846 
                             tmp_1 = 1;
  
#line 846 
  if (tmp_1) {
    
#line 847 
    status = -22;
    
#line 848 
    goto exit;
  }
  else ;
  
#line 851 
  memcpy((void *)(qdev->ndev)->dev_addr,(void const *)(& qdev->flash.flash_params_8012.mac_addr),(unsigned long)(qdev->ndev)->addr_len);
  exit: 
#line 855 
  ;
  
#line 856 
  ql_sem_unlock(qdev,50331648U);
  
#line 857 
  __retres = status;
  return_label: 
#line 857 
                return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_write_xgmac_reg(struct ql_adapter *qdev, u32 reg, u32 data)
{
  int __retres;
  int status;
  
#line 868 
  status = ql_wait_reg_rdy(qdev,120U,2147483648U,536870912U);
  
#line 870 
  if (status != 0) {
    
#line 871 
    __retres = status;
    
#line 871 
    goto return_label;
  }
  else ;
  
#line 873 
  ql_write32((struct ql_adapter const *)qdev,124,data);
  
#line 875 
  ql_write32((struct ql_adapter const *)qdev,120,reg);
  
#line 876 
  __retres = status;
  return_label: 
#line 876 
                return __retres;
}


#line 883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
int ql_read_xgmac_reg(struct ql_adapter *qdev, u32 reg, u32 *data)
{
  
#line 885 
  int status = 0;
  
#line 887 
  status = ql_wait_reg_rdy(qdev,120U,2147483648U,536870912U);
  
#line 889 
  if (status != 0) 
#line 890 
                   goto exit; else ;
  
#line 892 
  ql_write32((struct ql_adapter const *)qdev,120,reg | 1073741824U);
  
#line 894 
  status = ql_wait_reg_rdy(qdev,120U,2147483648U,536870912U);
  
#line 896 
  if (status != 0) 
#line 897 
                   goto exit; else ;
  
#line 899 
  *data = ql_read32((struct ql_adapter const *)qdev,124);
  exit: 
#line 900 
  ;
  
#line 901 
  return status;
}


#line 905  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
int ql_read_xgmac_reg64(struct ql_adapter *qdev, u32 reg, u64 *data)
{
  
#line 907 
  int status = 0;
  
#line 908 
  u32 hi = 0U;
  
#line 909 
  u32 lo = 0U;
  
#line 911 
  status = ql_read_xgmac_reg(qdev,reg,& lo);
  
#line 912 
  if (status != 0) 
#line 913 
                   goto exit; else ;
  
#line 915 
  status = ql_read_xgmac_reg(qdev,reg + 4U,& hi);
  
#line 916 
  if (status != 0) 
#line 917 
                   goto exit; else ;
  
#line 919 
  *data = (unsigned long long)lo | ((unsigned long long)hi << 32);
  exit: 
#line 921 
  ;
  
#line 922 
  return status;
}


#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_8000_port_initialize(struct ql_adapter *qdev)
{
  int status;
  
#line 932 
  status = ql_mb_about_fw(qdev);
  
#line 933 
  if (status != 0) 
#line 934 
                   goto exit; else ;
  
#line 935 
  status = ql_mb_get_fw_state(qdev);
  
#line 936 
  if (status != 0) 
#line 937 
                   goto exit; else ;
  
#line 939 
  ldv_queue_delayed_work_80(qdev->workqueue,& qdev->mpi_port_cfg_work,0UL);
  exit: 
#line 940 
  ;
  
#line 941 
  return status;
}


#line 950  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_8012_port_initialize(struct ql_adapter *qdev)
{
  int __retres;
  u32 data;
  int tmp;
  
#line 952 
  int status = 0;
  
#line 955 
  tmp = ql_sem_trylock(qdev,qdev->xg_sem_mask);
  
#line 955 
  if (tmp != 0) {
    
#line 959 
    if ((qdev->msg_enable & 4U) != 0U) 
#line 959 
                                       netdev_info((struct net_device const *)qdev->ndev,"Another function has the semaphore, so wait for the port init bit to come ready.\n"); else ;
    
#line 961 
    status = ql_wait_reg_rdy(qdev,48U,qdev->port_init,0U);
    
#line 962 
    if (status != 0) {
      
#line 963 
      if ((qdev->msg_enable & 4U) != 0U) 
#line 963 
                                         netdev_crit((struct net_device const *)qdev->ndev,"Port initialize timed out.\n"); else ;
    }
    else ;
    
#line 966 
    __retres = status;
    
#line 966 
    goto return_label;
  }
  else ;
  
#line 969 
  if ((qdev->msg_enable & 4U) != 0U) 
#line 969 
                                     netdev_info((struct net_device const *)qdev->ndev,"Got xgmac semaphore!.\n"); else ;
  
#line 971 
  status = ql_read_xgmac_reg(qdev,264U,& data);
  
#line 972 
  if (status != 0) 
#line 973 
                   goto end; else ;
  
#line 974 
  data |= 1U;
  
#line 975 
  status = ql_write_xgmac_reg(qdev,264U,data);
  
#line 976 
  if (status != 0) 
#line 977 
                   goto end; else ;
  
#line 980 
  data &= 4294967294U;
  
#line 981 
  data |= 64U;
  
#line 982 
  data |= 1024U;
  
#line 983 
  data |= 2048U;
  
#line 984 
  status = ql_write_xgmac_reg(qdev,264U,data);
  
#line 985 
  if (status != 0) 
#line 986 
                   goto end; else ;
  
#line 989 
  status = ql_read_xgmac_reg(qdev,268U,& data);
  
#line 990 
  if (status != 0) 
#line 991 
                   goto end; else ;
  
#line 992 
  data &= 4294967294U;
  
#line 993 
  data |= 2U;
  
#line 994 
  status = ql_write_xgmac_reg(qdev,268U,data);
  
#line 995 
  if (status != 0) 
#line 996 
                   goto end; else ;
  
#line 999 
  status = ql_read_xgmac_reg(qdev,272U,& data);
  
#line 1000 
  if (status != 0) 
#line 1001 
                   goto end; else ;
  
#line 1002 
  data &= 4294967294U;
  
#line 1003 
  data |= 2U;
  
#line 1004 
  status = ql_write_xgmac_reg(qdev,272U,data);
  
#line 1005 
  if (status != 0) 
#line 1006 
                   goto end; else ;
  
#line 1009 
  status = ql_write_xgmac_reg(qdev,308U,2776629248U);
  
#line 1011 
  if (status != 0) 
#line 1012 
                   goto end; else ;
  
#line 1013 
  status = ql_write_xgmac_reg(qdev,312U,9600U);
  
#line 1015 
  if (status != 0) 
#line 1016 
                   goto end; else ;
  
#line 1019 
  ql_write32((struct ql_adapter const *)qdev,48,(qdev->port_init << 16) | qdev->port_init);
  end: 
#line 1020 
  ;
  
#line 1021 
  ql_sem_unlock(qdev,qdev->xg_sem_mask);
  
#line 1022 
  __retres = status;
  return_label: 
#line 1022 
                return __retres;
}


#line 1025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
__inline static unsigned int ql_lbq_block_size(struct ql_adapter *qdev)
{
  unsigned int __retres;
  
#line 1027 
  __retres = (unsigned int)(4096UL << qdev->lbq_buf_order);
  
#line 1027 
  return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct bq_desc *ql_get_curr_lbuf(struct rx_ring *rx_ring)
{
  
#line 1033 
  struct bq_desc *lbq_desc = rx_ring->lbq + rx_ring->lbq_curr_idx;
  
#line 1034 
  rx_ring->lbq_curr_idx += 1U;
  
#line 1035 
  if (rx_ring->lbq_curr_idx == rx_ring->lbq_len) 
#line 1036 
                                                 rx_ring->lbq_curr_idx = 0U; else ;
  
#line 1037 
  rx_ring->lbq_free_cnt += 1U;
  
#line 1038 
  return lbq_desc;
}


#line 1041  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct bq_desc *ql_get_curr_lchunk(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  unsigned int tmp_1;
  
#line 1044 
  struct bq_desc *lbq_desc = ql_get_curr_lbuf(rx_ring);
  
#line 1046 
  pci_dma_sync_single_for_cpu(qdev->pdev,lbq_desc->mapaddr,(unsigned long)rx_ring->lbq_buf_size,2);
  
#line 1055 
  tmp_1 = ql_lbq_block_size(qdev);
  
#line 1054 
  ;
  
#line 1054 
  if (lbq_desc->p.pg_chunk.offset + rx_ring->lbq_buf_size == tmp_1) {
    unsigned int tmp_0;
    
#line 1058 
    tmp_0 = ql_lbq_block_size(qdev);
    
#line 1056 
    ;
    
#line 1056 
    ;
    
#line 1056 
    pci_unmap_page(qdev->pdev,lbq_desc->p.pg_chunk.map,(unsigned long)tmp_0,2);
  }
  else ;
  
#line 1060 
  return lbq_desc;
}


#line 1064  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct bq_desc *ql_get_curr_sbuf(struct rx_ring *rx_ring)
{
  
#line 1066 
  struct bq_desc *sbq_desc = rx_ring->sbq + rx_ring->sbq_curr_idx;
  
#line 1067 
  rx_ring->sbq_curr_idx += 1U;
  
#line 1068 
  if (rx_ring->sbq_curr_idx == rx_ring->sbq_len) 
#line 1069 
                                                 rx_ring->sbq_curr_idx = 0U; else ;
  
#line 1070 
  rx_ring->sbq_free_cnt += 1U;
  
#line 1071 
  return sbq_desc;
}


#line 1075  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_update_cq(struct rx_ring *rx_ring)
{
  
#line 1077 
  rx_ring->cnsmr_idx += 1U;
  
#line 1078 
  rx_ring->curr_entry += 1;
  
#line 1079 
  if ((long)(rx_ring->cnsmr_idx == rx_ring->cq_len) != 0L) {
    
#line 1080 
    rx_ring->cnsmr_idx = 0U;
    
#line 1081 
    rx_ring->curr_entry = (struct ql_net_rsp_iocb *)rx_ring->cq_base;
  }
  else ;
  
#line 1083 
  return;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_write_cq_idx(struct rx_ring *rx_ring)
{
  
#line 1087 
  ql_write_db_reg(rx_ring->cnsmr_idx,rx_ring->cnsmr_idx_db_reg);
  
#line 1088 
  return;
}


#line 1090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_get_next_chunk(struct ql_adapter *qdev, struct rx_ring *rx_ring, struct bq_desc *lbq_desc)
{
  int __retres;
  unsigned int tmp_2;
  
#line 1093 
  if (rx_ring->pg_chunk.page == (struct page *)0) {
    u64 map;
    unsigned int tmp;
    int tmp_0;
    
#line 1095 
    rx_ring->pg_chunk.page = alloc_pages(16672U,qdev->lbq_buf_order);
    
#line 1098 
    if ((long)(rx_ring->pg_chunk.page == (struct page *)0) != 0L) {
      
#line 1099 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 1099 
                                         netdev_err((struct net_device const *)qdev->ndev,"page allocation failed.\n"); else ;
      
#line 1101 
      __retres = -12;
      
#line 1101 
      goto return_label;
    }
    else ;
    
#line 1103 
    rx_ring->pg_chunk.offset = 0U;
    
#line 1105 
    tmp = ql_lbq_block_size(qdev);
    
#line 1104 
    ;
    
#line 1104 
    ;
    
#line 1104 
    map = pci_map_page(qdev->pdev,rx_ring->pg_chunk.page,0UL,(unsigned long)tmp,2);
    
#line 1107 
    tmp_0 = pci_dma_mapping_error(qdev->pdev,map);
    
#line 1107 
    if (tmp_0 != 0) {
      
#line 1108 
      __free_pages(rx_ring->pg_chunk.page,qdev->lbq_buf_order);
      
#line 1110 
      rx_ring->pg_chunk.page = (struct page *)0;
      
#line 1111 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 1111 
                                         netdev_err((struct net_device const *)qdev->ndev,"PCI mapping failed.\n"); else ;
      
#line 1113 
      __retres = -12;
      
#line 1113 
      goto return_label;
    }
    else ;
    
#line 1115 
    rx_ring->pg_chunk.map = map;
    
#line 1116 
    rx_ring->pg_chunk.va = (char *)lowmem_page_address((struct page const *)rx_ring->pg_chunk.page);
  }
  else ;
  
#line 1122 
  lbq_desc->p.pg_chunk = rx_ring->pg_chunk;
  
#line 1127 
  rx_ring->pg_chunk.offset += rx_ring->lbq_buf_size;
  
#line 1128 
  tmp_2 = ql_lbq_block_size(qdev);
  
#line 1128 
  ;
  
#line 1128 
  if (rx_ring->pg_chunk.offset == tmp_2) {
    
#line 1129 
    rx_ring->pg_chunk.page = (struct page *)0;
    
#line 1130 
    lbq_desc->p.pg_chunk.last_flag = 1U;
  }
  else {
    
#line 1132 
    rx_ring->pg_chunk.va += rx_ring->lbq_buf_size;
    
#line 1133 
    get_page(rx_ring->pg_chunk.page);
    
#line 1134 
    lbq_desc->p.pg_chunk.last_flag = 0U;
  }
  
#line 1136 
  __retres = 0;
  return_label: 
#line 1136 
                return __retres;
}


#line 1139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_update_lbq(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  struct bq_desc *lbq_desc;
  u64 map;
  int i;
  int tmp;
  
#line 1141 
  u32 clean_idx = rx_ring->lbq_clean_idx;
  
#line 1142 
  u32 start_idx = clean_idx;
  
#line 1147 
  goto ldv_56047;
  ldv_56046: 
#line 1148 
  ;
  
#line 1148 
  i = (int)rx_ring->lbq_clean_idx & 15;
  
#line 1148 
  goto ldv_56044;
  ldv_56043: 
#line 1149 
  ;
  
#line 1149 
  if ((qdev->msg_enable & 2048U) != 0U) 
#line 1149 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"lbq: try cleaning clean_idx = %d.\n",clean_idx); else ;
  
#line 1152 
  lbq_desc = rx_ring->lbq + clean_idx;
  
#line 1153 
  tmp = ql_get_next_chunk(qdev,rx_ring,lbq_desc);
  
#line 1153 
  if (tmp != 0) {
    
#line 1154 
    rx_ring->lbq_clean_idx = clean_idx;
    
#line 1155 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 1155 
                                        netdev_err((struct net_device const *)qdev->ndev,"Could not get a page chunk, i=%d, clean_idx =%d .\n",i,clean_idx); else ;
    
#line 1158 
    goto return_label;
  }
  else ;
  
#line 1161 
  map = lbq_desc->p.pg_chunk.map + (unsigned long long)lbq_desc->p.pg_chunk.offset;
  
#line 1163 
  lbq_desc->mapaddr = map;
  
#line 1164 
  lbq_desc->maplen = rx_ring->lbq_buf_size;
  
#line 1166 
  *(lbq_desc->addr) = map;
  
#line 1168 
  pci_dma_sync_single_for_device(qdev->pdev,map,(unsigned long)rx_ring->lbq_buf_size,2);
  
#line 1171 
  clean_idx += 1U;
  
#line 1172 
  if (rx_ring->lbq_len == clean_idx) 
#line 1173 
                                     clean_idx = 0U; else ;
  
#line 1148 
  i += 1;
  ldv_56044: 
#line 1149 
  ;
  
#line 1148 
  if (i <= 15) 
#line 1150 
               goto ldv_56043; else 
#line 1153 
                                    goto ldv_56045;
  ldv_56045: 
#line 1154 
  ;
  
#line 1176 
  rx_ring->lbq_clean_idx = clean_idx;
  
#line 1177 
  rx_ring->lbq_prod_idx += 16U;
  
#line 1178 
  if (rx_ring->lbq_prod_idx == rx_ring->lbq_len) 
#line 1179 
                                                 rx_ring->lbq_prod_idx = 0U; else ;
  
#line 1180 
  rx_ring->lbq_free_cnt += 4294967280U;
  ldv_56047: 
#line 1181 
  ;
  
#line 1147 
  if (rx_ring->lbq_free_cnt > 32U) 
#line 1149 
                                   goto ldv_56046; else 
#line 1152 
                                                        goto ldv_56048;
  ldv_56048: 
#line 1153 
  ;
  
#line 1183 
  if (start_idx != clean_idx) {
    
#line 1184 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 1184 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"lbq: updating prod idx = %d.\n",rx_ring->lbq_prod_idx); else ;
    
#line 1187 
    ql_write_db_reg(rx_ring->lbq_prod_idx,rx_ring->lbq_prod_idx_db_reg);
  }
  else ;
  return_label: 
#line 1190 
                return;
}


#line 1193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_update_sbq(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  struct bq_desc *sbq_desc;
  u64 map;
  int i;
  
#line 1195 
  u32 clean_idx = rx_ring->sbq_clean_idx;
  
#line 1196 
  u32 start_idx = clean_idx;
  
#line 1201 
  goto ldv_56062;
  ldv_56061: 
#line 1202 
  ;
  
#line 1202 
  i = (int)rx_ring->sbq_clean_idx & 15;
  
#line 1202 
  goto ldv_56059;
  ldv_56058: 
#line 1203 
  ;
  
#line 1203 
  sbq_desc = rx_ring->sbq + clean_idx;
  
#line 1204 
  if ((qdev->msg_enable & 2048U) != 0U) 
#line 1204 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"sbq: try cleaning clean_idx = %d.\n",clean_idx); else ;
  
#line 1207 
  if (sbq_desc->p.skb == (struct sk_buff *)0) {
    int tmp;
    
#line 1208 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 1208 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"sbq: getting new skb for index %d.\n",sbq_desc->index); else ;
    
#line 1212 
    sbq_desc->p.skb = netdev_alloc_skb(qdev->ndev,256U);
    
#line 1215 
    if (sbq_desc->p.skb == (struct sk_buff *)0) {
      
#line 1216 
      rx_ring->sbq_clean_idx = clean_idx;
      
#line 1217 
      goto return_label;
    }
    else ;
    
#line 1219 
    skb_reserve(sbq_desc->p.skb,0);
    
#line 1220 
    map = pci_map_single(qdev->pdev,(void *)(sbq_desc->p.skb)->data,(unsigned long)rx_ring->sbq_buf_size,2);
    
#line 1224 
    tmp = pci_dma_mapping_error(qdev->pdev,map);
    
#line 1224 
    if (tmp != 0) {
      
#line 1225 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 1225 
                                          netdev_err((struct net_device const *)qdev->ndev,"PCI mapping failed.\n"); else ;
      
#line 1227 
      rx_ring->sbq_clean_idx = clean_idx;
      
#line 1228 
      dev_kfree_skb_any(sbq_desc->p.skb);
      
#line 1229 
      sbq_desc->p.skb = (struct sk_buff *)0;
      
#line 1230 
      goto return_label;
    }
    else ;
    
#line 1232 
    sbq_desc->mapaddr = map;
    
#line 1233 
    sbq_desc->maplen = rx_ring->sbq_buf_size;
    
#line 1235 
    *(sbq_desc->addr) = map;
  }
  else ;
  
#line 1238 
  clean_idx += 1U;
  
#line 1239 
  if (rx_ring->sbq_len == clean_idx) 
#line 1240 
                                     clean_idx = 0U; else ;
  
#line 1202 
  i += 1;
  ldv_56059: 
#line 1203 
  ;
  
#line 1202 
  if (i <= 15) 
#line 1204 
               goto ldv_56058; else 
#line 1207 
                                    goto ldv_56060;
  ldv_56060: 
#line 1208 
  ;
  
#line 1242 
  rx_ring->sbq_clean_idx = clean_idx;
  
#line 1243 
  rx_ring->sbq_prod_idx += 16U;
  
#line 1244 
  if (rx_ring->sbq_prod_idx == rx_ring->sbq_len) 
#line 1245 
                                                 rx_ring->sbq_prod_idx = 0U; else ;
  
#line 1246 
  rx_ring->sbq_free_cnt += 4294967280U;
  ldv_56062: 
#line 1247 
  ;
  
#line 1201 
  if (rx_ring->sbq_free_cnt > 16U) 
#line 1203 
                                   goto ldv_56061; else 
#line 1206 
                                                        goto ldv_56063;
  ldv_56063: 
#line 1207 
  ;
  
#line 1249 
  if (start_idx != clean_idx) {
    
#line 1250 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 1250 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"sbq: updating prod idx = %d.\n",rx_ring->sbq_prod_idx); else ;
    
#line 1253 
    ql_write_db_reg(rx_ring->sbq_prod_idx,rx_ring->sbq_prod_idx_db_reg);
  }
  else ;
  return_label: 
#line 1256 
                return;
}


#line 1258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_update_buffer_queues(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  
#line 1261 
  ql_update_sbq(qdev,rx_ring);
  
#line 1262 
  ql_update_lbq(qdev,rx_ring);
  
#line 1263 
  return;
}


#line 1268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_unmap_send(struct ql_adapter *qdev, struct tx_ring_desc *tx_ring_desc, int mapped)
{
  int i;
  
#line 1272 
  i = 0;
  
#line 1272 
  goto ldv_56075;
  ldv_56074: 
#line 1273 
  ;
  
#line 1273 
  if (i == 0 || (i == 7 && mapped > 7)) {
    
#line 1283 
    if (i == 7) {
      
#line 1284 
      if ((qdev->msg_enable & 1024U) != 0U) 
#line 1284 
                                            netdev_printk("\001",(struct net_device const *)qdev->ndev,"unmapping OAL area.\n"); else ;
    }
    else ;
    
#line 1288 
    pci_unmap_single(qdev->pdev,tx_ring_desc->map[i].mapaddr,(unsigned long)tx_ring_desc->map[i].maplen,1);
  }
  else {
    
#line 1295 
    if ((qdev->msg_enable & 1024U) != 0U) 
#line 1295 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"unmapping frag %d.\n",i); else ;
    
#line 1297 
    pci_unmap_page(qdev->pdev,tx_ring_desc->map[i].mapaddr,(unsigned long)tx_ring_desc->map[i].maplen,1);
  }
  
#line 1272 
  i += 1;
  ldv_56075: 
#line 1273 
  ;
  
#line 1272 
  if (i < mapped) 
#line 1274 
                  goto ldv_56074; else 
#line 1277 
                                       goto ldv_56076;
  ldv_56076: 
#line 1278 
  ;
  
#line 1279 
  return;
}


#line 1310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_map_send(struct ql_adapter *qdev, struct ob_mac_iocb_req *mac_iocb_ptr, struct sk_buff *skb, struct tx_ring_desc *tx_ring_desc)
{
  int __retres;
  unsigned int tmp;
  dma_addr_t map;
  int frag_idx;
  int err;
  unsigned char *tmp_0;
  
#line 1314 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 1314 
  int len = (int)tmp;
  
#line 1316 
  int map_idx = 0;
  
#line 1317 
  struct tx_buf_desc *tbd = (struct tx_buf_desc *)(& mac_iocb_ptr->tbd);
  
#line 1318 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1318 
  int frag_cnt = (int)((struct skb_shared_info *)tmp_0)->nr_frags;
  
#line 1320 
  if (frag_cnt != 0) {
    
#line 1321 
    if ((qdev->msg_enable & 256U) != 0U) 
#line 1321 
                                         netdev_printk("\001",(struct net_device const *)qdev->ndev,"frag_cnt = %d.\n",frag_cnt); else ;
  }
  else ;
  
#line 1327 
  map = pci_map_single(qdev->pdev,(void *)skb->data,(unsigned long)len,1);
  
#line 1329 
  err = pci_dma_mapping_error(qdev->pdev,map);
  
#line 1330 
  if (err != 0) {
    
#line 1331 
    if ((qdev->msg_enable & 256U) != 0U) 
#line 1331 
                                         netdev_err((struct net_device const *)qdev->ndev,"PCI mapping failed with error: %d\n",err); else ;
    
#line 1334 
    __retres = 16;
    
#line 1334 
    goto return_label;
  }
  else ;
  
#line 1337 
  tbd->len = (unsigned int)len;
  
#line 1338 
  tbd->addr = map;
  
#line 1339 
  tx_ring_desc->map[map_idx].mapaddr = map;
  
#line 1340 
  tx_ring_desc->map[map_idx].maplen = (unsigned int)len;
  
#line 1341 
  map_idx += 1;
  
#line 1350 
  frag_idx = 0;
  
#line 1350 
  goto ldv_56093;
  ldv_56092: 
#line 1351 
  ;
  {
    unsigned char *tmp_1;
    unsigned int tmp_2;
    
#line 1351 
    tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 1351 
    skb_frag_t *frag = & ((struct skb_shared_info *)tmp_1)->frags[frag_idx];
    
#line 1352 
    tbd += 1;
    
#line 1353 
    if (frag_idx == 6 && frag_cnt > 7) {
      
#line 1373 
      map = pci_map_single(qdev->pdev,(void *)(& tx_ring_desc->oal),132UL,1);
      
#line 1376 
      err = pci_dma_mapping_error(qdev->pdev,map);
      
#line 1377 
      if (err != 0) {
        
#line 1378 
        if ((qdev->msg_enable & 256U) != 0U) 
#line 1378 
                                             netdev_err((struct net_device const *)qdev->ndev,"PCI mapping outbound address list with error: %d\n",err); else ;
        
#line 1381 
        goto map_error;
      }
      else ;
      
#line 1384 
      tbd->addr = map;
      
#line 1390 
      tbd->len = (unsigned int)((unsigned long)(frag_cnt - frag_idx)) * 12U | 1073741824U;
      
#line 1393 
      tx_ring_desc->map[map_idx].mapaddr = map;
      
#line 1395 
      tx_ring_desc->map[map_idx].maplen = 132U;
      
#line 1397 
      tbd = (struct tx_buf_desc *)(& tx_ring_desc->oal);
      
#line 1398 
      map_idx += 1;
    }
    else ;
    
#line 1401 
    tmp_2 = skb_frag_size((skb_frag_t const *)frag);
    
#line 1401 
    ;
    
#line 1401 
    ;
    
#line 1401 
    map = skb_frag_dma_map(& (qdev->pdev)->dev,(skb_frag_t const *)frag,0UL,(unsigned long)tmp_2,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 1404 
    err = dma_mapping_error(& (qdev->pdev)->dev,map);
    
#line 1405 
    if (err != 0) {
      
#line 1406 
      if ((qdev->msg_enable & 256U) != 0U) 
#line 1406 
                                           netdev_err((struct net_device const *)qdev->ndev,"PCI mapping frags failed with error: %d.\n",err); else ;
      
#line 1409 
      goto map_error;
    }
    else ;
    
#line 1412 
    tbd->addr = map;
    
#line 1413 
    tbd->len = skb_frag_size((skb_frag_t const *)frag);
    
#line 1414 
    tx_ring_desc->map[map_idx].mapaddr = map;
    
#line 1415 
    tx_ring_desc->map[map_idx].maplen = skb_frag_size((skb_frag_t const *)frag);
  }
  
#line 1350 
  frag_idx += 1;
  
#line 1350 
  map_idx += 1;
  ldv_56093: 
#line 1351 
  ;
  
#line 1350 
  if (frag_idx < frag_cnt) 
#line 1352 
                           goto ldv_56092; else 
#line 1355 
                                                goto ldv_56094;
  ldv_56094: 
#line 1356 
  ;
  
#line 1420 
  tx_ring_desc->map_cnt = map_idx;
  
#line 1422 
  tbd->len |= 2147483648U;
  
#line 1423 
  __retres = 0;
  
#line 1423 
  goto return_label;
  map_error: 
#line 1425 
  ;
  
#line 1432 
  ql_unmap_send(qdev,tx_ring_desc,map_idx);
  
#line 1433 
  __retres = 16;
  return_label: 
#line 1433 
                return __retres;
}


#line 1437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_categorize_rx_err(struct ql_adapter *qdev, u8 rx_err, struct rx_ring *rx_ring)
{
  
#line 1440 
  struct nic_stats *stats = & qdev->nic_stats;
  
#line 1442 
  stats->rx_err_count += 1ULL;
  
#line 1443 
  rx_ring->rx_errors += 1ULL;
  
#line 1445 
  switch ((int)rx_err & 28) {
    case 4: 
#line 1446 
    ;
    
#line 1447 
    stats->rx_code_err += 1ULL;
    
#line 1448 
    goto ldv_56102;
    case 8: 
#line 1449 
    ;
    
#line 1450 
    stats->rx_oversize_err += 1ULL;
    
#line 1451 
    goto ldv_56102;
    case 16: 
#line 1452 
    ;
    
#line 1453 
    stats->rx_undersize_err += 1ULL;
    
#line 1454 
    goto ldv_56102;
    case 20: 
#line 1455 
    ;
    
#line 1456 
    stats->rx_preamble_err += 1ULL;
    
#line 1457 
    goto ldv_56102;
    case 24: 
#line 1458 
    ;
    
#line 1459 
    stats->rx_frame_len_err += 1ULL;
    
#line 1460 
    goto ldv_56102;
    case 28: 
#line 1461 
    ;
    
#line 1462 
    stats->rx_crc_err += 1ULL;
    default: 
#line 1463 
    ;
    
#line 1464 
    goto ldv_56102;
  }
  ldv_56102: 
#line 1466 
  ;
  
#line 1467 
  return;
}


#line 1472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_update_mac_hdr_len(struct ql_adapter *qdev, struct ib_mac_iocb_rsp *ib_mac_rsp, void *page, size_t *len)
{
  u16 *tags;
  
#line 1478 
  if (((qdev->ndev)->features & 256ULL) != 0ULL) 
#line 1479 
                                                 goto return_label; else ;
  
#line 1480 
  if (((int)ib_mac_rsp->flags2 & 2) != 0) {
    
#line 1481 
    tags = (u16 *)page;
    
#line 1483 
    if ((unsigned int)*(tags + 6U) == 33024U && (unsigned int)*(tags + 8U) == 33024U) 
      
#line 1485 
      *len += 8UL; else 
#line 1487 
                        *len += 4UL;
  }
  else ;
  return_label: 
#line 1489 
                return;
}


#line 1492  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_process_mac_rx_gro_page(struct ql_adapter *qdev, struct rx_ring *rx_ring, struct ib_mac_iocb_rsp *ib_mac_rsp, u32 length, u16 vlan_id)
{
  struct sk_buff *skb;
  unsigned char *tmp_0;
  unsigned char *tmp_1;
  
#line 1499 
  struct bq_desc *lbq_desc = ql_get_curr_lchunk(qdev,rx_ring);
  
#line 1500 
  struct napi_struct *napi = & rx_ring->napi;
  
#line 1503 
  if (((int)ib_mac_rsp->flags2 & 28) != 0) {
    
#line 1504 
    ql_categorize_rx_err(qdev,(unsigned char)((int)ib_mac_rsp->flags2),rx_ring);
    
#line 1505 
    put_page(lbq_desc->p.pg_chunk.page);
    
#line 1506 
    goto return_label;
  }
  else ;
  
#line 1508 
  napi->dev = qdev->ndev;
  
#line 1510 
  skb = napi_get_frags(napi);
  
#line 1511 
  if (skb == (struct sk_buff *)0) {
    
#line 1512 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1512 
                                       netdev_err((struct net_device const *)qdev->ndev,"Couldn\'t get an skb, exiting.\n"); else ;
    
#line 1514 
    rx_ring->rx_dropped += 1ULL;
    
#line 1515 
    put_page(lbq_desc->p.pg_chunk.page);
    
#line 1516 
    goto return_label;
  }
  else ;
  
#line 1518 
  __builtin_prefetch((void const *)lbq_desc->p.pg_chunk.va);
  
#line 1519 
  ;
  
#line 1519 
  ;
  
#line 1519 
  ;
  
#line 1519 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1519 
  ;
  
#line 1519 
  __skb_fill_page_desc(skb,(int)((struct skb_shared_info *)tmp_0)->nr_frags,lbq_desc->p.pg_chunk.page,(int)lbq_desc->p.pg_chunk.offset,(int)length);
  
#line 1524 
  skb->len += length;
  
#line 1525 
  skb->data_len += length;
  
#line 1526 
  skb->truesize += length;
  
#line 1527 
  tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1527 
  ((struct skb_shared_info *)tmp_1)->nr_frags = (unsigned char)((int)((struct skb_shared_info *)tmp_1)->nr_frags + 1);
  
#line 1529 
  rx_ring->rx_packets += 1ULL;
  
#line 1530 
  rx_ring->rx_bytes += (unsigned long long)length;
  
#line 1531 
  skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  
#line 1532 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->cq_id));
  
#line 1533 
  if ((unsigned int)vlan_id != 65535U) 
#line 1534 
                                       __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_id)); else ;
  
#line 1535 
  napi_gro_frags(napi);
  return_label: 
#line 1536 
                return;
}


#line 1539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_process_mac_rx_page(struct ql_adapter *qdev, struct rx_ring *rx_ring, struct ib_mac_iocb_rsp *ib_mac_rsp, u32 length, u16 vlan_id)
{
  void *addr;
  unsigned char *tmp_0;
  
#line 1545 
  struct net_device *ndev = qdev->ndev;
  
#line 1546 
  struct sk_buff *skb = (struct sk_buff *)0;
  
#line 1548 
  struct bq_desc *lbq_desc = ql_get_curr_lchunk(qdev,rx_ring);
  
#line 1549 
  struct napi_struct *napi = & rx_ring->napi;
  
#line 1550 
  size_t hlen = 14UL;
  
#line 1552 
  skb = netdev_alloc_skb(ndev,length);
  
#line 1553 
  if (skb == (struct sk_buff *)0) {
    
#line 1554 
    rx_ring->rx_dropped += 1ULL;
    
#line 1555 
    put_page(lbq_desc->p.pg_chunk.page);
    
#line 1556 
    goto return_label;
  }
  else ;
  
#line 1559 
  addr = (void *)lbq_desc->p.pg_chunk.va;
  
#line 1560 
  __builtin_prefetch((void const *)addr);
  
#line 1563 
  if (((int)ib_mac_rsp->flags2 & 28) != 0) {
    
#line 1564 
    ql_categorize_rx_err(qdev,(unsigned char)((int)ib_mac_rsp->flags2),rx_ring);
    
#line 1565 
    goto err_out;
  }
  else ;
  
#line 1569 
  ql_update_mac_hdr_len(qdev,ib_mac_rsp,addr,& hlen);
  
#line 1574 
  if ((unsigned long)skb->len > (unsigned long)ndev->mtu + hlen) {
    
#line 1575 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1575 
                                       netdev_err((struct net_device const *)qdev->ndev,"Segment too small, dropping.\n"); else ;
    
#line 1577 
    rx_ring->rx_dropped += 1ULL;
    
#line 1578 
    goto err_out;
  }
  else ;
  
#line 1580 
  ;
  
#line 1580 
  ;
  
#line 1580 
  tmp_0 = skb_put(skb,(unsigned int)hlen);
  
#line 1580 
  memcpy((void *)tmp_0,(void const *)addr,hlen);
  
#line 1581 
  if ((qdev->msg_enable & 2048U) != 0U) 
#line 1581 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"%d bytes of headers and data in large. Chain page to new skb and pull tail.\n",length); else ;
  
#line 1584 
  skb_fill_page_desc(skb,0,lbq_desc->p.pg_chunk.page,(int)((size_t)lbq_desc->p.pg_chunk.offset + hlen),(int)((size_t)length - hlen));
  
#line 1587 
  skb->len += length - (unsigned int)hlen;
  
#line 1588 
  skb->data_len += length - (unsigned int)hlen;
  
#line 1589 
  skb->truesize += length - (unsigned int)hlen;
  
#line 1591 
  rx_ring->rx_packets += 1ULL;
  
#line 1592 
  rx_ring->rx_bytes += (unsigned long long)skb->len;
  
#line 1593 
  skb->protocol = eth_type_trans(skb,ndev);
  
#line 1594 
  skb_checksum_none_assert((struct sk_buff const *)skb);
  
#line 1596 
  if ((ndev->features & 17179869184ULL) != 0ULL && ((int)ib_mac_rsp->flags1 & 28) == 0) {
    
#line 1599 
    if (((int)ib_mac_rsp->flags2 & 64) != 0) {
      
#line 1600 
      if ((qdev->msg_enable & 2048U) != 0U) 
#line 1600 
                                            netdev_printk("\001",(struct net_device const *)qdev->ndev,"TCP checksum done!\n"); else ;
      
#line 1602 
      skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
    }
    else 
      
#line 1603 
      if (((int)ib_mac_rsp->flags2 & 32) != 0 && ((int)ib_mac_rsp->flags3 & 8) != 0) {
        
#line 1606 
        struct iphdr *iph = (struct iphdr *)addr + hlen;
        
#line 1608 
        if (((int)iph->frag_off & 65343) == 0) {
          
#line 1610 
          skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
          
#line 1611 
          if ((qdev->msg_enable & 2048U) != 0U) 
#line 1611 
                                                netdev_printk("\001",(struct net_device const *)qdev->ndev,"UDP checksum done!\n"); else ;
        }
        else ;
      }
      else ;
  }
  else ;
  
#line 1618 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->cq_id));
  
#line 1619 
  if ((unsigned int)vlan_id != 65535U) 
#line 1620 
                                       __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_id)); else ;
  
#line 1621 
  if ((unsigned int)*((unsigned char *)skb + 145UL) == 2U) 
#line 1622 
                                                           napi_gro_receive(napi,skb); else 
                                                                    
#line 1624 
                                                                    netif_receive_skb(skb);
  
#line 1625 
  goto return_label;
  err_out: 
#line 1626 
  ;
  
#line 1627 
  dev_kfree_skb_any(skb);
  
#line 1628 
  put_page(lbq_desc->p.pg_chunk.page);
  return_label: 
#line 1629 
                return;
}


#line 1632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_process_mac_rx_skb(struct ql_adapter *qdev, struct rx_ring *rx_ring, struct ib_mac_iocb_rsp *ib_mac_rsp, u32 length, u16 vlan_id)
{
  unsigned char *tmp_0;
  int tmp_1;
  
#line 1638 
  struct net_device *ndev = qdev->ndev;
  
#line 1639 
  struct sk_buff *skb = (struct sk_buff *)0;
  
#line 1640 
  struct sk_buff *new_skb = (struct sk_buff *)0;
  
#line 1641 
  struct bq_desc *sbq_desc = ql_get_curr_sbuf(rx_ring);
  
#line 1643 
  skb = sbq_desc->p.skb;
  
#line 1645 
  new_skb = netdev_alloc_skb(qdev->ndev,length);
  
#line 1646 
  if (new_skb == (struct sk_buff *)0) {
    
#line 1647 
    rx_ring->rx_dropped += 1ULL;
    
#line 1648 
    goto return_label;
  }
  else ;
  
#line 1650 
  skb_reserve(new_skb,0);
  
#line 1651 
  ;
  
#line 1651 
  ;
  
#line 1651 
  tmp_0 = skb_put(new_skb,length);
  
#line 1651 
  memcpy((void *)tmp_0,(void const *)skb->data,(unsigned long)length);
  
#line 1652 
  skb = new_skb;
  
#line 1655 
  if (((int)ib_mac_rsp->flags2 & 28) != 0) {
    
#line 1656 
    ql_categorize_rx_err(qdev,(unsigned char)((int)ib_mac_rsp->flags2),rx_ring);
    
#line 1657 
    dev_kfree_skb_any(skb);
    
#line 1658 
    goto return_label;
  }
  else ;
  
#line 1662 
  tmp_1 = constant_test_bit(9L,(unsigned long const volatile *)(& qdev->flags));
  
#line 1662 
  if (tmp_1 != 0) {
    
#line 1663 
    ql_check_lb_frame(qdev,skb);
    
#line 1664 
    dev_kfree_skb_any(skb);
    
#line 1665 
    goto return_label;
  }
  else ;
  
#line 1671 
  if (skb->len > ndev->mtu + 14U) {
    
#line 1672 
    dev_kfree_skb_any(skb);
    
#line 1673 
    rx_ring->rx_dropped += 1ULL;
    
#line 1674 
    goto return_label;
  }
  else ;
  
#line 1677 
  __builtin_prefetch((void const *)skb->data);
  
#line 1678 
  if (((int)ib_mac_rsp->flags1 & 96) != 0) {
    
#line 1679 
    if ((qdev->msg_enable & 2048U) != 0U) {
      char *tmp_4;
      
#line 1679 
      if (((int)ib_mac_rsp->flags1 & 96) != 32) {
        char *tmp_3;
        
#line 1679 
        if (((int)ib_mac_rsp->flags1 & 96) != 64) {
          char *tmp_2;
          
#line 1679 
          if (((int)ib_mac_rsp->flags1 & 96) == 96) 
#line 1679 
                                                    tmp_2 = (char *)"Promiscuous"; else 
                                                                    
#line 1679 
                                                                    tmp_2 = (char *)"";
          
#line 1679 
          tmp_3 = tmp_2;
        }
        else 
#line 1679 
             tmp_3 = (char *)"Registered";
        
#line 1679 
        tmp_4 = tmp_3;
      }
      else 
#line 1679 
           tmp_4 = (char *)"Hash";
      
#line 1679 
      ;
      
#line 1679 
      netdev_printk("\001",(struct net_device const *)qdev->ndev,"%s Multicast.\n",tmp_4);
    }
    else ;
  }
  else ;
  
#line 1688 
  if (((int)ib_mac_rsp->flags2 & 1) != 0) {
    
#line 1689 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 1689 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"Promiscuous Packet.\n"); else ;
  }
  else ;
  
#line 1692 
  rx_ring->rx_packets += 1ULL;
  
#line 1693 
  rx_ring->rx_bytes += (unsigned long long)skb->len;
  
#line 1694 
  skb->protocol = eth_type_trans(skb,ndev);
  
#line 1695 
  skb_checksum_none_assert((struct sk_buff const *)skb);
  
#line 1700 
  if ((ndev->features & 17179869184ULL) != 0ULL && ((int)ib_mac_rsp->flags1 & 28) == 0) {
    
#line 1703 
    if (((int)ib_mac_rsp->flags2 & 64) != 0) {
      
#line 1704 
      if ((qdev->msg_enable & 2048U) != 0U) 
#line 1704 
                                            netdev_printk("\001",(struct net_device const *)qdev->ndev,"TCP checksum done!\n"); else ;
      
#line 1706 
      skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
    }
    else 
      
#line 1707 
      if (((int)ib_mac_rsp->flags2 & 32) != 0 && ((int)ib_mac_rsp->flags3 & 8) != 0) {
        
#line 1710 
        struct iphdr *iph = (struct iphdr *)skb->data;
        
#line 1711 
        if (((int)iph->frag_off & 65343) == 0) {
          
#line 1713 
          skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
          
#line 1714 
          if ((qdev->msg_enable & 2048U) != 0U) 
#line 1714 
                                                netdev_printk("\001",(struct net_device const *)qdev->ndev,"UDP checksum done!\n"); else ;
        }
        else ;
      }
      else ;
  }
  else ;
  
#line 1721 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->cq_id));
  
#line 1722 
  if ((unsigned int)vlan_id != 65535U) 
#line 1723 
                                       __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_id)); else ;
  
#line 1724 
  if ((unsigned int)*((unsigned char *)skb + 145UL) == 2U) 
#line 1725 
                                                           napi_gro_receive(& rx_ring->napi,skb); else 
                                                                    
#line 1727 
                                                                    netif_receive_skb(skb);
  return_label: 
#line 1728 
                return;
}


#line 1730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_realign_skb(struct sk_buff *skb, int len)
{
  
#line 1732 
  void *temp_addr = (void *)skb->data;
  
#line 1738 
  skb->data = skb->data;
  
#line 1739 
  skb->tail = skb->tail;
  
#line 1740 
  skb_copy_to_linear_data(skb,(void const *)temp_addr,(unsigned int)len);
  
#line 1742 
  return;
}


#line 1749  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct sk_buff *ql_build_rx_skb(struct ql_adapter *qdev, struct rx_ring *rx_ring, struct ib_mac_iocb_rsp *ib_mac_rsp)
{
  struct sk_buff *__retres;
  struct bq_desc *lbq_desc;
  struct bq_desc *sbq_desc;
  
#line 1755 
  struct sk_buff *skb = (struct sk_buff *)0;
  
#line 1756 
  u32 length = ib_mac_rsp->data_len;
  
#line 1757 
  u32 hdr_len = ib_mac_rsp->hdr_len;
  
#line 1758 
  size_t hlen = 14UL;
  
#line 1763 
  if (((int)ib_mac_rsp->flags4 & 32) != 0 && ((int)ib_mac_rsp->flags4 & 64) != 0) {
    
#line 1765 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 1765 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"Header of %d bytes in small buffer.\n",hdr_len); else ;
    
#line 1770 
    sbq_desc = ql_get_curr_sbuf(rx_ring);
    
#line 1771 
    pci_unmap_single(qdev->pdev,sbq_desc->mapaddr,(unsigned long)sbq_desc->maplen,2);
    
#line 1775 
    skb = sbq_desc->p.skb;
    
#line 1776 
    ql_realign_skb(skb,(int)hdr_len);
    
#line 1777 
    skb_put(skb,hdr_len);
    
#line 1778 
    sbq_desc->p.skb = (struct sk_buff *)0;
  }
  else ;
  
#line 1784 
  if ((long)(length == 0U) != 0L) {
    
#line 1785 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 1785 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"No Data buffer in this packet.\n"); else ;
    
#line 1787 
    __retres = skb;
    
#line 1787 
    goto return_label;
  }
  else ;
  
#line 1790 
  if (((int)ib_mac_rsp->flags3 & 64) != 0) 
    
#line 1791 
    if (((int)ib_mac_rsp->flags4 & 64) != 0) {
      unsigned char *tmp;
      
#line 1792 
      if ((qdev->msg_enable & 2048U) != 0U) 
#line 1792 
                                            netdev_printk("\001",(struct net_device const *)qdev->ndev,"Headers in small, data of %d bytes in small, combine them.\n",length); else ;
      
#line 1802 
      sbq_desc = ql_get_curr_sbuf(rx_ring);
      
#line 1803 
      pci_dma_sync_single_for_cpu(qdev->pdev,sbq_desc->mapaddr,(unsigned long)sbq_desc->maplen,2);
      
#line 1809 
      ;
      
#line 1809 
      ;
      
#line 1809 
      tmp = skb_put(skb,length);
      
#line 1809 
      memcpy((void *)tmp,(void const *)(sbq_desc->p.skb)->data,(unsigned long)length);
      
#line 1811 
      pci_dma_sync_single_for_device(qdev->pdev,sbq_desc->mapaddr,(unsigned long)sbq_desc->maplen,2);
    }
    else {
      
#line 1820 
      if ((qdev->msg_enable & 2048U) != 0U) 
#line 1820 
                                            netdev_printk("\001",(struct net_device const *)qdev->ndev,"%d bytes in a single small buffer.\n",length); else ;
      
#line 1823 
      sbq_desc = ql_get_curr_sbuf(rx_ring);
      
#line 1824 
      skb = sbq_desc->p.skb;
      
#line 1825 
      ql_realign_skb(skb,(int)length);
      
#line 1826 
      skb_put(skb,length);
      
#line 1827 
      pci_unmap_single(qdev->pdev,sbq_desc->mapaddr,(unsigned long)sbq_desc->maplen,2);
      
#line 1833 
      sbq_desc->p.skb = (struct sk_buff *)0;
    }
  else 
    
#line 1835 
    if ((int)ib_mac_rsp->flags3 < 0) 
      
#line 1836 
      if (((int)ib_mac_rsp->flags4 & 64) != 0) {
        
#line 1837 
        if ((qdev->msg_enable & 2048U) != 0U) 
#line 1837 
                                              netdev_printk("\001",(struct net_device const *)qdev->ndev,"Header in small, %d bytes in large. Chain large to small!\n",length); else ;
        
#line 1845 
        lbq_desc = ql_get_curr_lchunk(qdev,rx_ring);
        
#line 1846 
        if ((qdev->msg_enable & 2048U) != 0U) 
#line 1846 
                                              netdev_printk("\001",(struct net_device const *)qdev->ndev,"Chaining page at offset = %d, for %d bytes  to skb.\n",lbq_desc->p.pg_chunk.offset,length); else ;
        
#line 1849 
        skb_fill_page_desc(skb,0,lbq_desc->p.pg_chunk.page,(int)lbq_desc->p.pg_chunk.offset,(int)length);
        
#line 1852 
        skb->len += length;
        
#line 1853 
        skb->data_len += length;
        
#line 1854 
        skb->truesize += length;
      }
      else {
        
#line 1861 
        lbq_desc = ql_get_curr_lchunk(qdev,rx_ring);
        
#line 1862 
        skb = netdev_alloc_skb(qdev->ndev,length);
        
#line 1863 
        if (skb == (struct sk_buff *)0) {
          
#line 1864 
          if ((qdev->msg_enable & 2U) != 0U) 
#line 1864 
                                             netdev_printk("\001",(struct net_device const *)qdev->ndev,"No skb available, drop the packet.\n"); else ;
          
#line 1866 
          __retres = (struct sk_buff *)0;
          
#line 1866 
          goto return_label;
        }
        else ;
        
#line 1868 
        pci_unmap_page(qdev->pdev,lbq_desc->mapaddr,(unsigned long)lbq_desc->maplen,2);
        
#line 1873 
        skb_reserve(skb,0);
        
#line 1874 
        if ((qdev->msg_enable & 2048U) != 0U) 
#line 1874 
                                              netdev_printk("\001",(struct net_device const *)qdev->ndev,"%d bytes of headers and data in large. Chain page to new skb and pull tail.\n",length); else ;
        
#line 1877 
        skb_fill_page_desc(skb,0,lbq_desc->p.pg_chunk.page,(int)lbq_desc->p.pg_chunk.offset,(int)length);
        
#line 1881 
        skb->len += length;
        
#line 1882 
        skb->data_len += length;
        
#line 1883 
        skb->truesize += length;
        
#line 1884 
        length = 0U;
        
#line 1885 
        ql_update_mac_hdr_len(qdev,ib_mac_rsp,(void *)lbq_desc->p.pg_chunk.va,& hlen);
        
#line 1888 
        __pskb_pull_tail(skb,(int)hlen);
      }
    else {
      int size;
      u32 tmp_0;
      
#line 1902 
      int i = 0;
      
#line 1903 
      sbq_desc = ql_get_curr_sbuf(rx_ring);
      
#line 1904 
      pci_unmap_single(qdev->pdev,sbq_desc->mapaddr,(unsigned long)sbq_desc->maplen,2);
      
#line 1908 
      if (((int)ib_mac_rsp->flags4 & 64) == 0) {
        
#line 1918 
        if ((qdev->msg_enable & 2048U) != 0U) 
#line 1918 
                                              netdev_printk("\001",(struct net_device const *)qdev->ndev,"%d bytes of headers & data in chain of large.\n",length); else ;
        
#line 1921 
        skb = sbq_desc->p.skb;
        
#line 1922 
        sbq_desc->p.skb = (struct sk_buff *)0;
        
#line 1923 
        skb_reserve(skb,0);
      }
      else ;
      ldv_56171: 
#line 1925 
      ;
      
#line 1926 
      lbq_desc = ql_get_curr_lchunk(qdev,rx_ring);
      
#line 1927 
      if (length < rx_ring->lbq_buf_size) 
#line 1927 
                                          tmp_0 = length; else 
#line 1927 
                                                               tmp_0 = rx_ring->lbq_buf_size;
      
#line 1927 
      size = (int)tmp_0;
      
#line 1930 
      if ((qdev->msg_enable & 2048U) != 0U) 
#line 1930 
                                            netdev_printk("\001",(struct net_device const *)qdev->ndev,"Adding page %d to skb for %d bytes.\n",i,size); else ;
      
#line 1933 
      skb_fill_page_desc(skb,i,lbq_desc->p.pg_chunk.page,(int)lbq_desc->p.pg_chunk.offset,size);
      
#line 1937 
      skb->len += (unsigned int)size;
      
#line 1938 
      skb->data_len += (unsigned int)size;
      
#line 1939 
      skb->truesize += (unsigned int)size;
      
#line 1940 
      length -= (unsigned int)size;
      
#line 1941 
      i += 1;
      
#line 1942 
      if (length != 0U) 
#line 1944 
                        goto ldv_56171; else 
#line 1947 
                                             goto ldv_56172;
      ldv_56172: 
#line 1948 
      ;
      
#line 1943 
      ql_update_mac_hdr_len(qdev,ib_mac_rsp,(void *)lbq_desc->p.pg_chunk.va,& hlen);
      
#line 1945 
      __pskb_pull_tail(skb,(int)hlen);
    }
  
#line 1947 
  __retres = skb;
  return_label: 
#line 1947 
                return __retres;
}


#line 1951  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_process_mac_split_rx_intr(struct ql_adapter *qdev, struct rx_ring *rx_ring, struct ib_mac_iocb_rsp *ib_mac_rsp, u16 vlan_id)
{
  int tmp;
  
#line 1956 
  struct net_device *ndev = qdev->ndev;
  
#line 1957 
  struct sk_buff *skb = (struct sk_buff *)0;
  
#line 1961 
  skb = ql_build_rx_skb(qdev,rx_ring,ib_mac_rsp);
  
#line 1962 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    
#line 1963 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 1963 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"No skb available, drop packet.\n"); else ;
    
#line 1965 
    rx_ring->rx_dropped += 1ULL;
    
#line 1966 
    goto return_label;
  }
  else ;
  
#line 1970 
  if (((int)ib_mac_rsp->flags2 & 28) != 0) {
    
#line 1971 
    ql_categorize_rx_err(qdev,(unsigned char)((int)ib_mac_rsp->flags2),rx_ring);
    
#line 1972 
    dev_kfree_skb_any(skb);
    
#line 1973 
    goto return_label;
  }
  else ;
  
#line 1979 
  if (skb->len > ndev->mtu + 14U) {
    
#line 1980 
    dev_kfree_skb_any(skb);
    
#line 1981 
    rx_ring->rx_dropped += 1ULL;
    
#line 1982 
    goto return_label;
  }
  else ;
  
#line 1986 
  tmp = constant_test_bit(9L,(unsigned long const volatile *)(& qdev->flags));
  
#line 1986 
  if (tmp != 0) {
    
#line 1987 
    ql_check_lb_frame(qdev,skb);
    
#line 1988 
    dev_kfree_skb_any(skb);
    
#line 1989 
    goto return_label;
  }
  else ;
  
#line 1992 
  __builtin_prefetch((void const *)skb->data);
  
#line 1993 
  if (((int)ib_mac_rsp->flags1 & 96) != 0) {
    
#line 1994 
    if ((qdev->msg_enable & 2048U) != 0U) {
      char *tmp_2;
      
#line 1994 
      if (((int)ib_mac_rsp->flags1 & 96) != 32) {
        char *tmp_1;
        
#line 1994 
        if (((int)ib_mac_rsp->flags1 & 96) != 64) {
          char *tmp_0;
          
#line 1994 
          if (((int)ib_mac_rsp->flags1 & 96) == 96) 
#line 1994 
                                                    tmp_0 = (char *)"Promiscuous"; else 
                                                                    
#line 1994 
                                                                    tmp_0 = (char *)"";
          
#line 1994 
          tmp_1 = tmp_0;
        }
        else 
#line 1994 
             tmp_1 = (char *)"Registered";
        
#line 1994 
        tmp_2 = tmp_1;
      }
      else 
#line 1994 
           tmp_2 = (char *)"Hash";
      
#line 1994 
      ;
      
#line 1994 
      netdev_printk("\001",(struct net_device const *)qdev->ndev,"%s Multicast.\n",tmp_2);
    }
    else ;
    
#line 2001 
    rx_ring->rx_multicast += 1ULL;
  }
  else ;
  
#line 2003 
  if (((int)ib_mac_rsp->flags2 & 1) != 0) {
    
#line 2004 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 2004 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"Promiscuous Packet.\n"); else ;
  }
  else ;
  
#line 2008 
  skb->protocol = eth_type_trans(skb,ndev);
  
#line 2009 
  skb_checksum_none_assert((struct sk_buff const *)skb);
  
#line 2014 
  if ((ndev->features & 17179869184ULL) != 0ULL && ((int)ib_mac_rsp->flags1 & 28) == 0) {
    
#line 2017 
    if (((int)ib_mac_rsp->flags2 & 64) != 0) {
      
#line 2018 
      if ((qdev->msg_enable & 2048U) != 0U) 
#line 2018 
                                            netdev_printk("\001",(struct net_device const *)qdev->ndev,"TCP checksum done!\n"); else ;
      
#line 2020 
      skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
    }
    else 
      
#line 2021 
      if (((int)ib_mac_rsp->flags2 & 32) != 0 && ((int)ib_mac_rsp->flags3 & 8) != 0) {
        
#line 2024 
        struct iphdr *iph = (struct iphdr *)skb->data;
        
#line 2025 
        if (((int)iph->frag_off & 65343) == 0) {
          
#line 2027 
          skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
          
#line 2028 
          if ((qdev->msg_enable & 2048U) != 0U) 
#line 2028 
                                                netdev_printk("\001",(struct net_device const *)qdev->ndev,"TCP checksum done!\n"); else ;
        }
        else ;
      }
      else ;
  }
  else ;
  
#line 2034 
  rx_ring->rx_packets += 1ULL;
  
#line 2035 
  rx_ring->rx_bytes += (unsigned long long)skb->len;
  
#line 2036 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->cq_id));
  
#line 2037 
  if ((unsigned int)vlan_id != 65535U) 
#line 2038 
                                       __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_id)); else ;
  
#line 2039 
  if ((unsigned int)*((unsigned char *)skb + 145UL) == 2U) 
#line 2040 
                                                           napi_gro_receive(& rx_ring->napi,skb); else 
                                                                    
#line 2042 
                                                                    netif_receive_skb(skb);
  return_label: 
#line 2043 
                return;
}


#line 2046  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static unsigned long ql_process_mac_rx_intr(struct ql_adapter *qdev, struct rx_ring *rx_ring, struct ib_mac_iocb_rsp *ib_mac_rsp)
{
  unsigned long __retres;
  unsigned int tmp;
  
#line 2050 
  u32 length = ib_mac_rsp->data_len;
  
#line 2051 
  if (((int)ib_mac_rsp->flags2 & 2) != 0 && ((qdev->ndev)->features & 256ULL) != 0ULL) 
    
#line 2051 
    tmp = (unsigned int)ib_mac_rsp->vlan_id; else 
#line 2051 
                                                  tmp = 65535U;
  
#line 2051 
  u16 vlan_id = (unsigned short)tmp;
  
#line 2058 
  if (((int)ib_mac_rsp->flags4 & 32) != 0) 
#line 2062 
                                           ql_process_mac_split_rx_intr(qdev,rx_ring,ib_mac_rsp,(unsigned short)((int)vlan_id));
  else 
    
#line 2064 
    if (((int)ib_mac_rsp->flags3 & 64) != 0) 
#line 2069 
                                             ql_process_mac_rx_skb(qdev,rx_ring,ib_mac_rsp,length,(unsigned short)((int)vlan_id));
    else 
      
#line 2071 
      if (((int)ib_mac_rsp->flags3 < 0 && ((int)ib_mac_rsp->flags1 & 28) == 0) && ((int)ib_mac_rsp->flags2 & 64) != 0) 
        
#line 2077 
        ql_process_mac_rx_gro_page(qdev,rx_ring,ib_mac_rsp,length,(unsigned short)((int)vlan_id));
      else 
        
#line 2079 
        if ((int)ib_mac_rsp->flags3 < 0) 
#line 2083 
                                         ql_process_mac_rx_page(qdev,rx_ring,ib_mac_rsp,length,(unsigned short)((int)vlan_id)); else 
                                                                    
#line 2089 
                                                                    ql_process_mac_split_rx_intr(qdev,rx_ring,ib_mac_rsp,(unsigned short)((int)vlan_id));
  
#line 2093 
  __retres = (unsigned long)length;
  
#line 2093 
  return __retres;
}


#line 2097  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_process_mac_tx_intr(struct ql_adapter *qdev, struct ob_mac_iocb_rsp *mac_rsp)
{
  struct tx_ring *tx_ring;
  struct tx_ring_desc *tx_ring_desc;
  
#line 2104 
  tx_ring = & qdev->tx_ring[mac_rsp->txq_idx];
  
#line 2105 
  tx_ring_desc = tx_ring->q + mac_rsp->tid;
  
#line 2106 
  ql_unmap_send(qdev,tx_ring_desc,tx_ring_desc->map_cnt);
  
#line 2107 
  tx_ring->tx_bytes += (unsigned long long)(tx_ring_desc->skb)->len;
  
#line 2108 
  tx_ring->tx_packets += 1ULL;
  
#line 2109 
  consume_skb(tx_ring_desc->skb);
  
#line 2110 
  tx_ring_desc->skb = (struct sk_buff *)0;
  
#line 2112 
  if ((long)(((int)mac_rsp->flags1 & 248) != 0) != 0L) {
    
#line 2116 
    if (((int)mac_rsp->flags1 & 8) != 0) {
      
#line 2117 
      if ((qdev->msg_enable & 1024U) != 0U) 
#line 2117 
                                            netdev_warn((struct net_device const *)qdev->ndev,"Total descriptor length did not match transfer length.\n"); else ;
    }
    else ;
    
#line 2120 
    if (((int)mac_rsp->flags1 & 16) != 0) {
      
#line 2121 
      if ((qdev->msg_enable & 1024U) != 0U) 
#line 2121 
                                            netdev_warn((struct net_device const *)qdev->ndev,"Frame too short to be valid, not sent.\n"); else ;
    }
    else ;
    
#line 2124 
    if (((int)mac_rsp->flags1 & 32) != 0) {
      
#line 2125 
      if ((qdev->msg_enable & 1024U) != 0U) 
#line 2125 
                                            netdev_warn((struct net_device const *)qdev->ndev,"Frame too long, but sent anyway.\n"); else ;
    }
    else ;
    
#line 2128 
    if ((int)mac_rsp->flags1 < 0) {
      
#line 2129 
      if ((qdev->msg_enable & 1024U) != 0U) 
#line 2129 
                                            netdev_warn((struct net_device const *)qdev->ndev,"PCI backplane error. Frame not sent.\n"); else ;
    }
    else ;
  }
  else ;
  
#line 2133 
  atomic_inc(& tx_ring->tx_count);
  
#line 2134 
  return;
}


#line 2137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
void ql_queue_fw_error(struct ql_adapter *qdev)
{
  
#line 2139 
  ql_link_off(qdev);
  
#line 2140 
  ldv_queue_delayed_work_81(qdev->workqueue,& qdev->mpi_reset_work,0UL);
  
#line 2141 
  return;
}


#line 2143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
void ql_queue_asic_error(struct ql_adapter *qdev)
{
  
#line 2145 
  ql_link_off(qdev);
  
#line 2146 
  ql_disable_interrupts(qdev);
  
#line 2151 
  set_bit(0L,(unsigned long volatile *)(& qdev->flags));
  
#line 2155 
  set_bit(14L,(unsigned long volatile *)(& qdev->flags));
  
#line 2156 
  ldv_queue_delayed_work_82(qdev->workqueue,& qdev->asic_reset_work,0UL);
  
#line 2157 
  return;
}


#line 2159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_process_chip_ae_intr(struct ql_adapter *qdev, struct ib_ae_iocb_rsp *ib_ae_rsp)
{
  
#line 2162 
  switch ((int)ib_ae_rsp->event) {
    case 8: 
#line 2163 
    ;
    
#line 2164 
    if ((qdev->msg_enable & 64U) != 0U) 
#line 2164 
                                        netdev_err((struct net_device const *)qdev->ndev,"Management Processor Fatal Error.\n"); else ;
    
#line 2166 
    ql_queue_fw_error(qdev);
    
#line 2167 
    goto return_label;
    case 6: 
#line 2169 
    ;
    
#line 2170 
    netdev_err((struct net_device const *)qdev->ndev,"Multiple CAM hits lookup occurred.\n");
    
#line 2171 
    netdev_err((struct net_device const *)qdev->ndev,"This event shouldn\'t occur.\n");
    
#line 2172 
    ql_queue_asic_error(qdev);
    
#line 2173 
    goto return_label;
    case 7: 
#line 2175 
    ;
    
#line 2176 
    netdev_err((struct net_device const *)qdev->ndev,"Soft ECC error detected.\n");
    
#line 2177 
    ql_queue_asic_error(qdev);
    
#line 2178 
    goto ldv_56208;
    case 64: 
#line 2180 
    ;
    
#line 2181 
    netdev_err((struct net_device const *)qdev->ndev,"PCI error occurred when reading ",(int)ib_ae_rsp->q_id);
    
#line 2184 
    ql_queue_asic_error(qdev);
    
#line 2185 
    goto ldv_56208;
    default: 
#line 2187 
    ;
    
#line 2188 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 2188 
                                       netdev_err((struct net_device const *)qdev->ndev,"Unexpected event %d.\n",(int)ib_ae_rsp->event); else ;
    
#line 2190 
    ql_queue_asic_error(qdev);
    
#line 2191 
    goto ldv_56208;
  }
  ldv_56208: 
#line 2193 
  ;
  return_label: 
#line 2194 
                return;
}


#line 2195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_clean_outbound_rx_ring(struct rx_ring *rx_ring)
{
  int __retres;
  struct tx_ring *tx_ring;
  bool tmp_1;
  
#line 2197 
  struct ql_adapter *qdev = rx_ring->qdev;
  
#line 2198 
  u32 prod = ql_read_sh_reg(rx_ring->prod_idx_sh_reg);
  
#line 2199 
  struct ob_mac_iocb_rsp *net_rsp = (struct ob_mac_iocb_rsp *)0;
  
#line 2200 
  int count = 0;
  
#line 2204 
  goto ldv_56224;
  ldv_56223: 
#line 2205 
  ;
  
#line 2206 
  if ((qdev->msg_enable & 2048U) != 0U) 
#line 2206 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"cq_id = %d, prod = %d, cnsmr = %d.\n.",(int)rx_ring->cq_id,prod,rx_ring->cnsmr_idx); else ;
  
#line 2210 
  net_rsp = (struct ob_mac_iocb_rsp *)rx_ring->curr_entry;
  
#line 2211 
  ldv_inline_asm();
  
#line 2212 
  switch ((int)net_rsp->opcode) {
    case 2: 
#line 2214 
    ;
    case 1: 
#line 2215 
    ;
    
#line 2216 
    ql_process_mac_tx_intr(qdev,net_rsp);
    
#line 2217 
    goto ldv_56221;
    default: 
#line 2218 
    ;
    
#line 2219 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 2219 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"Hit default case, not handled! dropping the packet, opcode = %x.\n",(int)net_rsp->opcode); else ;
  }
  ldv_56221: 
#line 2223 
  ;
  
#line 2223 
  count += 1;
  
#line 2224 
  ql_update_cq(rx_ring);
  
#line 2225 
  prod = ql_read_sh_reg(rx_ring->prod_idx_sh_reg);
  ldv_56224: 
#line 2226 
  ;
  
#line 2204 
  if (rx_ring->cnsmr_idx != prod) 
#line 2206 
                                  goto ldv_56223; else 
#line 2209 
                                                       goto ldv_56225;
  ldv_56225: 
#line 2210 
  ;
  
#line 2227 
  if (net_rsp == (struct ob_mac_iocb_rsp *)0) {
    
#line 2228 
    __retres = 0;
    
#line 2228 
    goto return_label;
  }
  else ;
  
#line 2229 
  ql_write_cq_idx(rx_ring);
  
#line 2230 
  tx_ring = & qdev->tx_ring[net_rsp->txq_idx];
  
#line 2231 
  tmp_1 = __netif_subqueue_stopped((struct net_device const *)qdev->ndev,(unsigned short)((int)tx_ring->wq_id));
  
#line 2231 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 2232 
    tmp_0 = atomic_read((atomic_t const *)(& tx_ring->tx_count));
    
#line 2232 
    ;
    
#line 2232 
    if ((unsigned int)tmp_0 > tx_ring->wq_len / 4U) 
#line 2237 
                                                    netif_wake_subqueue(qdev->ndev,(unsigned short)((int)tx_ring->wq_id)); else ;
  }
  else ;
  
#line 2240 
  __retres = count;
  return_label: 
#line 2240 
                return __retres;
}


#line 2243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_clean_inbound_rx_ring(struct rx_ring *rx_ring, int budget)
{
  struct ql_net_rsp_iocb *net_rsp;
  
#line 2245 
  struct ql_adapter *qdev = rx_ring->qdev;
  
#line 2246 
  u32 prod = ql_read_sh_reg(rx_ring->prod_idx_sh_reg);
  
#line 2248 
  int count = 0;
  
#line 2251 
  goto ldv_56240;
  ldv_56239: 
#line 2252 
  ;
  
#line 2253 
  if ((qdev->msg_enable & 2048U) != 0U) 
#line 2253 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"cq_id = %d, prod = %d, cnsmr = %d.\n.",(int)rx_ring->cq_id,prod,rx_ring->cnsmr_idx); else ;
  
#line 2257 
  net_rsp = rx_ring->curr_entry;
  
#line 2258 
  ldv_inline_asm();
  
#line 2259 
  switch ((int)net_rsp->opcode) {
    case 32: 
#line 2260 
    ;
    
#line 2261 
    ql_process_mac_rx_intr(qdev,rx_ring,(struct ib_mac_iocb_rsp *)net_rsp);
    
#line 2264 
    goto ldv_56235;
    case 63: 
#line 2266 
    ;
    
#line 2267 
    ql_process_chip_ae_intr(qdev,(struct ib_ae_iocb_rsp *)net_rsp);
    
#line 2269 
    goto ldv_56235;
    default: 
#line 2270 
    ;
    
#line 2271 
    if ((qdev->msg_enable & 2048U) != 0U) 
#line 2271 
                                          netdev_printk("\001",(struct net_device const *)qdev->ndev,"Hit default case, not handled! dropping the packet, opcode = %x.\n",(int)net_rsp->opcode); else ;
    
#line 2274 
    goto ldv_56235;
  }
  ldv_56235: 
#line 2276 
  ;
  
#line 2276 
  count += 1;
  
#line 2277 
  ql_update_cq(rx_ring);
  
#line 2278 
  prod = ql_read_sh_reg(rx_ring->prod_idx_sh_reg);
  
#line 2279 
  if (count == budget) 
#line 2280 
                       goto ldv_56238; else ;
  ldv_56240: 
#line 2281 
  ;
  
#line 2251 
  if (rx_ring->cnsmr_idx != prod) 
#line 2253 
                                  goto ldv_56239; else 
#line 2256 
                                                       goto ldv_56238;
  ldv_56238: 
#line 2257 
  ;
  
#line 2282 
  ql_update_buffer_queues(qdev,rx_ring);
  
#line 2283 
  ql_write_cq_idx(rx_ring);
  
#line 2284 
  return count;
}


#line 2287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_napi_poll_msix(struct napi_struct *napi, int budget)
{
  struct rx_ring *tmp;
  struct rx_ring *trx_ring;
  int i;
  u32 tmp_1;
  {
    
#line 2289 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 2289 
    tmp = (struct rx_ring *)__mptr + 18446744073709551248U;
  }
  
#line 2289 
  struct rx_ring *rx_ring = tmp;
  
#line 2290 
  struct ql_adapter *qdev = rx_ring->qdev;
  
#line 2292 
  int work_done = 0;
  
#line 2293 
  struct intr_context *ctx = & qdev->intr_context[(int)rx_ring->cq_id];
  
#line 2295 
  if ((qdev->msg_enable & 2048U) != 0U) 
#line 2295 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"Enter, NAPI POLL cq_id = %d.\n",(int)rx_ring->cq_id); else ;
  
#line 2300 
  i = (int)qdev->rss_ring_count;
  
#line 2300 
  goto ldv_56255;
  ldv_56254: 
#line 2301 
  ;
  
#line 2301 
  trx_ring = & qdev->rx_ring[i];
  
#line 2305 
  if ((ctx->irq_mask & (unsigned int)(1 << (int)trx_ring->cq_id)) != 0U) {
    u32 tmp_0;
    
#line 2305 
    tmp_0 = ql_read_sh_reg(trx_ring->prod_idx_sh_reg);
    
#line 2305 
    ;
    
#line 2305 
    if (tmp_0 != trx_ring->cnsmr_idx) {
      
#line 2308 
      if ((qdev->msg_enable & 512U) != 0U) 
#line 2308 
                                           netdev_printk("\001",(struct net_device const *)qdev->ndev,"%s: Servicing TX completion ring %d.\n","ql_napi_poll_msix",(int)trx_ring->cq_id); else ;
      
#line 2311 
      ql_clean_outbound_rx_ring(trx_ring);
    }
    else ;
  }
  else ;
  
#line 2300 
  i += 1;
  ldv_56255: 
#line 2301 
  ;
  
#line 2300 
  if (qdev->rx_ring_count > i) 
#line 2302 
                               goto ldv_56254; else 
#line 2305 
                                                    goto ldv_56256;
  ldv_56256: 
#line 2306 
  ;
  
#line 2318 
  tmp_1 = ql_read_sh_reg(rx_ring->prod_idx_sh_reg);
  
#line 2318 
  ;
  
#line 2318 
  if (tmp_1 != rx_ring->cnsmr_idx) {
    
#line 2320 
    if ((qdev->msg_enable & 512U) != 0U) 
#line 2320 
                                         netdev_printk("\001",(struct net_device const *)qdev->ndev,"%s: Servicing RX completion ring %d.\n","ql_napi_poll_msix",(int)rx_ring->cq_id); else ;
    
#line 2323 
    work_done = ql_clean_inbound_rx_ring(rx_ring,budget);
  }
  else ;
  
#line 2326 
  if (work_done < budget) {
    
#line 2327 
    napi_complete(napi);
    
#line 2328 
    ql_enable_completion_interrupt(qdev,rx_ring->irq);
  }
  else ;
  
#line 2330 
  return work_done;
}


#line 2333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void qlge_vlan_mode(struct net_device *ndev, netdev_features_t features)
{
  
#line 2335 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 2337 
  if ((features & 256ULL) != 0ULL) 
#line 2338 
                                   ql_write32((struct ql_adapter const *)qdev,212,393220U); else 
                                                                    
#line 2341 
                                                                    ql_write32((struct ql_adapter const *)qdev,212,393216U);
  
#line 2342 
  return;
}


#line 2349  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_update_hw_vlan_features(struct net_device *ndev, netdev_features_t features)
{
  int __retres;
  
#line 2352 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 2353 
  int status = 0;
  
#line 2354 
  bool need_restart = netif_running((struct net_device const *)ndev);
  
#line 2356 
  if ((int)need_restart != 0) {
    
#line 2357 
    status = ql_adapter_down(qdev);
    
#line 2358 
    if (status != 0) {
      
#line 2359 
      if ((qdev->msg_enable & 4U) != 0U) 
#line 2359 
                                         netdev_err((struct net_device const *)qdev->ndev,"Failed to bring down the adapter\n"); else ;
      
#line 2361 
      __retres = status;
      
#line 2361 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2366 
  ndev->features = features;
  
#line 2368 
  if ((int)need_restart != 0) {
    
#line 2369 
    status = ql_adapter_up(qdev);
    
#line 2370 
    if (status != 0) {
      
#line 2371 
      if ((qdev->msg_enable & 4U) != 0U) 
#line 2371 
                                         netdev_err((struct net_device const *)qdev->ndev,"Failed to bring up the adapter\n"); else ;
      
#line 2373 
      __retres = status;
      
#line 2373 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2377 
  __retres = status;
  return_label: 
#line 2377 
                return __retres;
}


#line 2380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static netdev_features_t qlge_fix_features(struct net_device *ndev, netdev_features_t features)
{
  netdev_features_t __retres;
  int err;
  
#line 2386 
  err = qlge_update_hw_vlan_features(ndev,features);
  
#line 2387 
  if (err != 0) {
    
#line 2388 
    __retres = (unsigned long long)err;
    
#line 2388 
    goto return_label;
  }
  else ;
  
#line 2390 
  __retres = features;
  return_label: 
#line 2390 
                return __retres;
}


#line 2393  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_set_features(struct net_device *ndev, netdev_features_t features)
{
  int __retres;
  
#line 2396 
  netdev_features_t changed = ndev->features ^ features;
  
#line 2398 
  if ((changed & 256ULL) != 0ULL) 
#line 2399 
                                  qlge_vlan_mode(ndev,features); else ;
  
#line 2401 
  __retres = 0;
  
#line 2401 
  return __retres;
}


#line 2404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int __qlge_vlan_rx_add_vid(struct ql_adapter *qdev, u16 vid)
{
  int err;
  
#line 2406 
  u32 enable_bit = 134217728U;
  
#line 2409 
  err = ql_set_mac_addr_reg(qdev,(u8 *)(& enable_bit),131072U,(unsigned short)((int)vid));
  
#line 2411 
  if (err != 0) {
    
#line 2412 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 2412 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init vlan address.\n"); else ;
  }
  else ;
  
#line 2414 
  return err;
}


#line 2417  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_vlan_rx_add_vid(struct net_device *ndev, __be16 proto, u16 vid)
{
  int __retres;
  int status;
  int err;
  
#line 2419 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 2423 
  status = ql_sem_spinlock(qdev,12582912U);
  
#line 2424 
  if (status != 0) {
    
#line 2425 
    __retres = status;
    
#line 2425 
    goto return_label;
  }
  else ;
  
#line 2427 
  err = __qlge_vlan_rx_add_vid(qdev,(unsigned short)((int)vid));
  
#line 2428 
  set_bit((long)vid,(unsigned long volatile *)(& qdev->active_vlans));
  
#line 2430 
  ql_sem_unlock(qdev,12582912U);
  
#line 2432 
  __retres = err;
  return_label: 
#line 2432 
                return __retres;
}


#line 2435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int __qlge_vlan_rx_kill_vid(struct ql_adapter *qdev, u16 vid)
{
  int err;
  
#line 2437 
  u32 enable_bit = 0U;
  
#line 2440 
  err = ql_set_mac_addr_reg(qdev,(u8 *)(& enable_bit),131072U,(unsigned short)((int)vid));
  
#line 2442 
  if (err != 0) {
    
#line 2443 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 2443 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to clear vlan address.\n"); else ;
  }
  else ;
  
#line 2445 
  return err;
}


#line 2448  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_vlan_rx_kill_vid(struct net_device *ndev, __be16 proto, u16 vid)
{
  int __retres;
  int status;
  int err;
  
#line 2450 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 2454 
  status = ql_sem_spinlock(qdev,12582912U);
  
#line 2455 
  if (status != 0) {
    
#line 2456 
    __retres = status;
    
#line 2456 
    goto return_label;
  }
  else ;
  
#line 2458 
  err = __qlge_vlan_rx_kill_vid(qdev,(unsigned short)((int)vid));
  
#line 2459 
  set_bit((long)vid,(unsigned long volatile *)(& qdev->active_vlans));
  
#line 2461 
  ql_sem_unlock(qdev,12582912U);
  
#line 2463 
  __retres = err;
  return_label: 
#line 2463 
                return __retres;
}


#line 2466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void qlge_restore_vlan(struct ql_adapter *qdev)
{
  int status;
  u16 vid;
  unsigned long tmp;
  unsigned long tmp_0;
  
#line 2471 
  status = ql_sem_spinlock(qdev,12582912U);
  
#line 2472 
  if (status != 0) 
#line 2473 
                   goto return_label; else ;
  
#line 2475 
  tmp = find_first_bit((unsigned long const *)(& qdev->active_vlans),4096UL);
  
#line 2475 
  vid = (unsigned short)tmp;
  
#line 2475 
  goto ldv_56313;
  ldv_56312: 
#line 2476 
  ;
  
#line 2476 
  __qlge_vlan_rx_add_vid(qdev,(unsigned short)((int)vid));
  
#line 2475 
  tmp_0 = find_next_bit((unsigned long const *)(& qdev->active_vlans),4096UL,(unsigned long)((int)vid + 1));
  
#line 2475 
  vid = (unsigned short)tmp_0;
  ldv_56313: 
#line 2476 
  ;
  
#line 2475 
  if ((unsigned int)vid <= 4095U) 
#line 2477 
                                  goto ldv_56312; else 
#line 2480 
                                                       goto ldv_56314;
  ldv_56314: 
#line 2481 
  ;
  
#line 2478 
  ql_sem_unlock(qdev,12582912U);
  return_label: 
#line 2479 
                return;
}


#line 2482  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static irqreturn_t qlge_msix_rx_isr(int irq, void *dev_id)
{
  irqreturn_t __retres;
  
#line 2484 
  struct rx_ring *rx_ring = (struct rx_ring *)dev_id;
  
#line 2485 
  napi_schedule(& rx_ring->napi);
  
#line 2486 
  __retres = IRQ_HANDLED;
  
#line 2486 
  return __retres;
}


#line 2494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static irqreturn_t qlge_isr(int irq, void *dev_id)
{
  irqreturn_t __retres;
  u32 var;
  int tmp;
  
#line 2496 
  struct rx_ring *rx_ring = (struct rx_ring *)dev_id;
  
#line 2497 
  struct ql_adapter *qdev = rx_ring->qdev;
  
#line 2498 
  struct intr_context *intr_context = & qdev->intr_context[0];
  
#line 2500 
  int work_done = 0;
  
#line 2502 
  ldv_spin_lock_83(& qdev->hw_lock);
  
#line 2503 
  tmp = atomic_read((atomic_t const *)(& qdev->intr_context[0].irq_cnt));
  
#line 2503 
  if (tmp != 0) {
    
#line 2504 
    if ((qdev->msg_enable & 512U) != 0U) 
#line 2504 
                                         netdev_printk("\001",(struct net_device const *)qdev->ndev,"Shared Interrupt, Not ours!\n"); else ;
    
#line 2506 
    ldv_spin_unlock_84(& qdev->hw_lock);
    
#line 2507 
    __retres = IRQ_NONE;
    
#line 2507 
    goto return_label;
  }
  else ;
  
#line 2509 
  ldv_spin_unlock_85(& qdev->hw_lock);
  
#line 2511 
  var = ql_disable_completion_interrupt(qdev,intr_context->intr);
  
#line 2516 
  if ((var & 1U) != 0U) {
    
#line 2517 
    ql_queue_asic_error(qdev);
    
#line 2518 
    netdev_err((struct net_device const *)qdev->ndev,"Got fatal error, STS = %x.\n",var);
    
#line 2519 
    var = ql_read32((struct ql_adapter const *)qdev,84);
    
#line 2520 
    netdev_err((struct net_device const *)qdev->ndev,"Resetting chip. ",var);
    
#line 2522 
    __retres = IRQ_HANDLED;
    
#line 2522 
    goto return_label;
  }
  else ;
  
#line 2528 
  if ((var & 2U) != 0U) {
    u32 tmp_5;
    
#line 2528 
    tmp_5 = ql_read32((struct ql_adapter const *)qdev,56);
    
#line 2528 
    if ((tmp_5 & 1U) != 0U) {
      int tmp_4;
      
#line 2534 
      if ((qdev->msg_enable & 512U) != 0U) 
#line 2534 
                                           netdev_err((struct net_device const *)qdev->ndev,"Got MPI processor interrupt.\n"); else ;
      
#line 2536 
      ql_disable_completion_interrupt(qdev,intr_context->intr);
      
#line 2537 
      ql_write32((struct ql_adapter const *)qdev,56,65536U);
      
#line 2538 
      ;
      
#line 2538 
      ;
      {
        int pscr_ret__;
        {
          
#line 2538 
          void const *__vpp_verify = (void const *)0;
          
#line 2538 
          void const *tmp_2 = __vpp_verify;
        }
        
#line 2538 
        switch (4UL) {
          int tmp_0;
          int tmp_1;
          int tmp_2_0;
          int tmp_3;
          case (unsigned long)1: 
#line 2538 
          ;
          {
            int pfo_ret__;
            
#line 2538 
            switch (4UL) {
              case (unsigned long)1: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56334;
              case (unsigned long)2: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56334;
              case (unsigned long)4: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56334;
              case (unsigned long)8: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56334;
              default: 
#line 2538 
              ;
              
#line 2538 
              __bad_percpu_size();
            }
            ldv_56334: 
#line 2538 
            ;
            
#line 2538 
            tmp_0 = pfo_ret__;
          }
          
#line 2538 
          pscr_ret__ = tmp_0;
          
#line 2538 
          goto ldv_56340;
          case (unsigned long)2: 
#line 2538 
          ;
          {
            int pfo_ret___0;
            
#line 2538 
            switch (4UL) {
              case (unsigned long)1: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56344;
              case (unsigned long)2: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56344;
              case (unsigned long)4: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56344;
              case (unsigned long)8: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56344;
              default: 
#line 2538 
              ;
              
#line 2538 
              __bad_percpu_size();
            }
            ldv_56344: 
#line 2538 
            ;
            
#line 2538 
            tmp_1 = pfo_ret___0;
          }
          
#line 2538 
          pscr_ret__ = tmp_1;
          
#line 2538 
          goto ldv_56340;
          case (unsigned long)4: 
#line 2538 
          ;
          {
            int pfo_ret___1;
            
#line 2538 
            switch (4UL) {
              case (unsigned long)1: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56353;
              case (unsigned long)2: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56353;
              case (unsigned long)4: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56353;
              case (unsigned long)8: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56353;
              default: 
#line 2538 
              ;
              
#line 2538 
              __bad_percpu_size();
            }
            ldv_56353: 
#line 2538 
            ;
            
#line 2538 
            tmp_2_0 = pfo_ret___1;
          }
          
#line 2538 
          pscr_ret__ = tmp_2_0;
          
#line 2538 
          goto ldv_56340;
          case (unsigned long)8: 
#line 2538 
          ;
          {
            int pfo_ret___2;
            
#line 2538 
            switch (4UL) {
              case (unsigned long)1: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56362;
              case (unsigned long)2: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56362;
              case (unsigned long)4: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56362;
              case (unsigned long)8: 
#line 2538 
              ;
              
#line 2539 
              ldv_inline_asm();
              
#line 2538 
              goto ldv_56362;
              default: 
#line 2538 
              ;
              
#line 2538 
              __bad_percpu_size();
            }
            ldv_56362: 
#line 2538 
            ;
            
#line 2538 
            tmp_3 = pfo_ret___2;
          }
          
#line 2538 
          pscr_ret__ = tmp_3;
          
#line 2538 
          goto ldv_56340;
          default: 
#line 2538 
          ;
          
#line 2538 
          __bad_size_call_parameter();
          
#line 2538 
          goto ldv_56340;
        }
        ldv_56340: 
#line 2538 
        ;
        
#line 2538 
        tmp_4 = pscr_ret__;
      }
      
#line 2538 
      ldv_queue_delayed_work_on_86(tmp_4,qdev->workqueue,& qdev->mpi_work,0UL);
      
#line 2540 
      work_done += 1;
    }
    else ;
  }
  else ;
  
#line 2548 
  var = ql_read32((struct ql_adapter const *)qdev,60);
  
#line 2549 
  if ((intr_context->irq_mask & var) != 0U) {
    
#line 2550 
    if ((qdev->msg_enable & 512U) != 0U) 
#line 2550 
                                         netdev_info((struct net_device const *)qdev->ndev,"Waking handler for rx_ring[0].\n"); else ;
    
#line 2552 
    ql_disable_completion_interrupt(qdev,intr_context->intr);
    
#line 2553 
    napi_schedule(& rx_ring->napi);
    
#line 2554 
    work_done += 1;
  }
  else ;
  
#line 2556 
  ql_enable_completion_interrupt(qdev,intr_context->intr);
  
#line 2557 
  __retres = (enum irqreturn)(work_done != 0);
  return_label: 
#line 2557 
                return __retres;
}


#line 2560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_tso(struct sk_buff *skb, struct ob_mac_tso_iocb_req *mac_iocb_ptr)
{
  int __retres;
  bool tmp_12;
  
#line 2563 
  tmp_12 = skb_is_gso((struct sk_buff const *)skb);
  
#line 2563 
  if ((int)tmp_12 != 0) {
    int err;
    int tmp_0;
    unsigned int tmp_1;
    int tmp_2;
    int tmp_3;
    unsigned char *tmp_4;
    
#line 2565 
    __be16 l3_proto = vlan_get_protocol(skb);
    
#line 2567 
    err = skb_cow_head(skb,0U);
    
#line 2568 
    if (err < 0) {
      
#line 2569 
      __retres = err;
      
#line 2569 
      goto return_label;
    }
    else ;
    
#line 2571 
    mac_iocb_ptr->opcode = (unsigned char)2U;
    
#line 2572 
    mac_iocb_ptr->flags3 = (unsigned char)((unsigned int)mac_iocb_ptr->flags3 | 1U);
    
#line 2573 
    mac_iocb_ptr->frame_len = skb->len;
    
#line 2574 
    tmp_0 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 2575 
    tmp_1 = tcp_hdrlen((struct sk_buff const *)skb);
    
#line 2574 
    mac_iocb_ptr->total_hdrs_len = (unsigned short)((int)((unsigned short)tmp_0) + (int)((unsigned short)tmp_1));
    
#line 2577 
    tmp_2 = skb_network_offset((struct sk_buff const *)skb);
    
#line 2577 
    tmp_3 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 2576 
    mac_iocb_ptr->net_trans_offset = (unsigned short)(tmp_2 | (tmp_3 << 6));
    
#line 2580 
    tmp_4 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2580 
    mac_iocb_ptr->mss = ((struct skb_shared_info *)tmp_4)->gso_size;
    
#line 2581 
    mac_iocb_ptr->flags2 = (unsigned char)((unsigned int)mac_iocb_ptr->flags2 | 32U);
    
#line 2582 
    if ((long)((unsigned int)l3_proto == 8U) != 0L) {
      struct tcphdr *tmp_6;
      __sum16 tmp_7;
      
#line 2583 
      struct iphdr *iph = ip_hdr((struct sk_buff const *)skb);
      
#line 2584 
      iph->check = (unsigned short)0U;
      
#line 2585 
      mac_iocb_ptr->flags1 = (unsigned char)((unsigned int)mac_iocb_ptr->flags1 | 64U);
      
#line 2586 
      tmp_6 = tcp_hdr((struct sk_buff const *)skb);
      
#line 2586 
      tmp_7 = csum_tcpudp_magic(iph->saddr,iph->daddr,(unsigned short)0,(unsigned short)6,0U);
      
#line 2586 
      tmp_6->check = (unsigned short)(~ ((int)tmp_7));
    }
    else 
      
#line 2590 
      if ((unsigned int)l3_proto == 56710U) {
        struct tcphdr *tmp_8;
        __sum16 tmp_11;
        struct ipv6hdr *tmp_9;
        struct ipv6hdr *tmp_10;
        
#line 2591 
        mac_iocb_ptr->flags1 = (unsigned char)((unsigned int)mac_iocb_ptr->flags1 | 128U);
        
#line 2592 
        tmp_8 = tcp_hdr((struct sk_buff const *)skb);
        
#line 2594 
        tmp_9 = ipv6_hdr((struct sk_buff const *)skb);
        
#line 2593 
        tmp_10 = ipv6_hdr((struct sk_buff const *)skb);
        
#line 2592 
        tmp_11 = csum_ipv6_magic((struct in6_addr const *)(& tmp_10->saddr),(struct in6_addr const *)(& tmp_9->daddr),0U,(unsigned short)6,0U);
        
#line 2592 
        tmp_8->check = (unsigned short)(~ ((int)tmp_11));
      }
      else ;
    
#line 2597 
    __retres = 1;
    
#line 2597 
    goto return_label;
  }
  else ;
  
#line 2599 
  __retres = 0;
  return_label: 
#line 2599 
                return __retres;
}


#line 2602  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_hw_csum_setup(struct sk_buff *skb, struct ob_mac_tso_iocb_req *mac_iocb_ptr)
{
  int len;
  __sum16 *check;
  int tmp_0;
  int tmp_1;
  int tmp_3;
  __sum16 tmp_9;
  
#line 2606 
  struct iphdr *iph = ip_hdr((struct sk_buff const *)skb);
  
#line 2608 
  mac_iocb_ptr->opcode = (unsigned char)2U;
  
#line 2609 
  mac_iocb_ptr->frame_len = skb->len;
  
#line 2611 
  tmp_0 = skb_network_offset((struct sk_buff const *)skb);
  
#line 2611 
  tmp_1 = skb_transport_offset((struct sk_buff const *)skb);
  
#line 2610 
  mac_iocb_ptr->net_trans_offset = (unsigned short)(tmp_0 | (tmp_1 << 6));
  
#line 2614 
  mac_iocb_ptr->flags1 = (unsigned char)((unsigned int)mac_iocb_ptr->flags1 | 64U);
  
#line 2615 
  if (0 != 0) 
#line 2615 
              tmp_3 = (int)((unsigned short)(((int)iph->tot_len << 8) | ((int)iph->tot_len >> 8)));
  else {
    __u16 tmp_2;
    
#line 2615 
    tmp_2 = __fswab16((unsigned short)((int)iph->tot_len));
    
#line 2615 
    tmp_3 = (int)tmp_2;
  }
  
#line 2615 
  len = tmp_3 - ((int)iph->ihl << 2);
  
#line 2616 
  if ((long)((unsigned int)iph->protocol == 6U) != 0L) {
    struct tcphdr *tmp_4;
    int tmp_5;
    struct tcphdr *tmp_6;
    
#line 2617 
    tmp_4 = tcp_hdr((struct sk_buff const *)skb);
    
#line 2617 
    check = & tmp_4->check;
    
#line 2618 
    mac_iocb_ptr->flags2 = (unsigned char)((unsigned int)mac_iocb_ptr->flags2 | 128U);
    
#line 2619 
    tmp_5 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 2620 
    tmp_6 = tcp_hdr((struct sk_buff const *)skb);
    
#line 2619 
    mac_iocb_ptr->total_hdrs_len = (unsigned short)((int)((unsigned short)tmp_5) + ((int)((unsigned short)tmp_6->doff) << 2U));
  }
  else {
    struct udphdr *tmp_7;
    int tmp_8;
    
#line 2623 
    tmp_7 = udp_hdr((struct sk_buff const *)skb);
    
#line 2623 
    check = & tmp_7->check;
    
#line 2624 
    mac_iocb_ptr->flags2 = (unsigned char)((unsigned int)mac_iocb_ptr->flags2 | 64U);
    
#line 2625 
    tmp_8 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 2625 
    mac_iocb_ptr->total_hdrs_len = (unsigned short)((unsigned int)((unsigned short)tmp_8) + 8U);
  }
  
#line 2629 
  tmp_9 = csum_tcpudp_magic(iph->saddr,iph->daddr,(unsigned short)((int)((unsigned short)len)),(unsigned short)((int)iph->protocol),0U);
  
#line 2629 
  *check = (unsigned short)(~ ((int)tmp_9));
  
#line 2631 
  return;
}


#line 2633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static netdev_tx_t qlge_send(struct sk_buff *skb, struct net_device *ndev)
{
  netdev_tx_t __retres;
  struct tx_ring_desc *tx_ring_desc;
  struct ob_mac_iocb_req *mac_iocb_ptr;
  int tso;
  struct tx_ring *tx_ring;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_4;
  
#line 2637 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 2640 
  u32 tx_ring_idx = (unsigned int)skb->queue_mapping;
  
#line 2642 
  tx_ring = & qdev->tx_ring[tx_ring_idx];
  
#line 2644 
  tmp_0 = skb_padto(skb,60U);
  
#line 2644 
  if (tmp_0 != 0) {
    
#line 2645 
    __retres = NETDEV_TX_OK;
    
#line 2645 
    goto return_label;
  }
  else ;
  
#line 2647 
  tmp_1 = atomic_read((atomic_t const *)(& tx_ring->tx_count));
  
#line 2647 
  if ((long)(tmp_1 <= 1) != 0L) {
    
#line 2648 
    if ((qdev->msg_enable & 256U) != 0U) 
#line 2648 
                                         netdev_info((struct net_device const *)qdev->ndev,"%s: BUG! shutting down tx queue %d due to lack of resources.\n","qlge_send",tx_ring_idx); else ;
    
#line 2651 
    netif_stop_subqueue(ndev,(unsigned short)((int)tx_ring->wq_id));
    
#line 2652 
    tx_ring->tx_errors += 1ULL;
    
#line 2653 
    __retres = NETDEV_TX_BUSY;
    
#line 2653 
    goto return_label;
  }
  else ;
  
#line 2655 
  tx_ring_desc = tx_ring->q + (int)tx_ring->prod_idx;
  
#line 2656 
  mac_iocb_ptr = tx_ring_desc->queue_entry;
  
#line 2657 
  memset((void *)mac_iocb_ptr,0,128UL);
  
#line 2659 
  mac_iocb_ptr->opcode = (unsigned char)1U;
  
#line 2660 
  mac_iocb_ptr->tid = tx_ring_desc->index;
  
#line 2664 
  mac_iocb_ptr->txq_idx = tx_ring_idx;
  
#line 2665 
  tx_ring_desc->skb = skb;
  
#line 2667 
  mac_iocb_ptr->frame_len = (unsigned short)skb->len;
  
#line 2669 
  if (((int)skb->vlan_tci & 4096) != 0) {
    
#line 2670 
    if ((qdev->msg_enable & 256U) != 0U) 
#line 2670 
                                         netdev_printk("\001",(struct net_device const *)qdev->ndev,"Adding a vlan tag %d.\n",(int)skb->vlan_tci & -4097); else ;
    
#line 2672 
    mac_iocb_ptr->flags3 = (unsigned char)((unsigned int)mac_iocb_ptr->flags3 | 4U);
    
#line 2673 
    mac_iocb_ptr->vlan_tci = (unsigned short)((unsigned int)skb->vlan_tci & 61439U);
  }
  else ;
  
#line 2675 
  tso = ql_tso(skb,(struct ob_mac_tso_iocb_req *)mac_iocb_ptr);
  
#line 2676 
  if (tso < 0) {
    
#line 2677 
    dev_kfree_skb_any(skb);
    
#line 2678 
    __retres = NETDEV_TX_OK;
    
#line 2678 
    goto return_label;
  }
  else 
    
#line 2679 
    if ((long)(tso == 0) != 0L && (unsigned int)*((unsigned char *)skb + 145UL) == 6U) 
      
#line 2680 
      ql_hw_csum_setup(skb,(struct ob_mac_tso_iocb_req *)mac_iocb_ptr); else ;
  
#line 2683 
  tmp_2 = ql_map_send(qdev,mac_iocb_ptr,skb,tx_ring_desc);
  
#line 2683 
  if (tmp_2 != 0) {
    
#line 2685 
    if ((qdev->msg_enable & 256U) != 0U) 
#line 2685 
                                         netdev_err((struct net_device const *)qdev->ndev,"Could not map the segments.\n"); else ;
    
#line 2687 
    tx_ring->tx_errors += 1ULL;
    
#line 2688 
    __retres = NETDEV_TX_BUSY;
    
#line 2688 
    goto return_label;
  }
  else ;
  
#line 2691 
  tx_ring->prod_idx = (u16)((int)tx_ring->prod_idx + 1);
  
#line 2692 
  if ((unsigned int)tx_ring->prod_idx == tx_ring->wq_len) 
#line 2693 
                                                          tx_ring->prod_idx = (unsigned short)0U; else ;
  
#line 2694 
  ldv_inline_asm();
  
#line 2696 
  ql_write_db_reg((unsigned int)tx_ring->prod_idx,tx_ring->prod_idx_db_reg);
  
#line 2697 
  if ((qdev->msg_enable & 256U) != 0U) 
#line 2697 
                                       netdev_printk("\001",(struct net_device const *)qdev->ndev,"tx queued, slot %d, len %d\n",(int)tx_ring->prod_idx,skb->len); else ;
  
#line 2701 
  atomic_dec(& tx_ring->tx_count);
  
#line 2703 
  tmp_4 = atomic_read((atomic_t const *)(& tx_ring->tx_count));
  
#line 2703 
  if ((long)(tmp_4 <= 1) != 0L) {
    int tmp_3;
    
#line 2704 
    netif_stop_subqueue(ndev,(unsigned short)((int)tx_ring->wq_id));
    
#line 2705 
    tmp_3 = atomic_read((atomic_t const *)(& tx_ring->tx_count));
    
#line 2705 
    ;
    
#line 2705 
    if ((unsigned int)tmp_3 > tx_ring->wq_len / 4U) 
#line 2710 
                                                    netif_wake_subqueue(qdev->ndev,(unsigned short)((int)tx_ring->wq_id)); else ;
  }
  else ;
  
#line 2712 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 2712 
                return __retres;
}


#line 2716  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_free_shadow_space(struct ql_adapter *qdev)
{
  
#line 2718 
  if (qdev->rx_ring_shadow_reg_area != (void *)0) {
    
#line 2719 
    pci_free_consistent(qdev->pdev,4096UL,qdev->rx_ring_shadow_reg_area,qdev->rx_ring_shadow_reg_dma);
    
#line 2723 
    qdev->rx_ring_shadow_reg_area = (void *)0;
  }
  else ;
  
#line 2725 
  if (qdev->tx_ring_shadow_reg_area != (void *)0) {
    
#line 2726 
    pci_free_consistent(qdev->pdev,4096UL,qdev->tx_ring_shadow_reg_area,qdev->tx_ring_shadow_reg_dma);
    
#line 2730 
    qdev->tx_ring_shadow_reg_area = (void *)0;
  }
  else ;
  
#line 2732 
  return;
}


#line 2734  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_alloc_shadow_space(struct ql_adapter *qdev)
{
  int __retres;
  
#line 2736 
  qdev->rx_ring_shadow_reg_area = pci_zalloc_consistent(qdev->pdev,4096UL,& qdev->rx_ring_shadow_reg_dma);
  
#line 2739 
  if (qdev->rx_ring_shadow_reg_area == (void *)0) {
    
#line 2740 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 2740 
                                        netdev_err((struct net_device const *)qdev->ndev,"Allocation of RX shadow space failed.\n"); else ;
    
#line 2742 
    __retres = -12;
    
#line 2742 
    goto return_label;
  }
  else ;
  
#line 2745 
  qdev->tx_ring_shadow_reg_area = pci_zalloc_consistent(qdev->pdev,4096UL,& qdev->tx_ring_shadow_reg_dma);
  
#line 2748 
  if (qdev->tx_ring_shadow_reg_area == (void *)0) {
    
#line 2749 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 2749 
                                        netdev_err((struct net_device const *)qdev->ndev,"Allocation of TX shadow space failed.\n"); else ;
    
#line 2751 
    goto err_wqp_sh_area;
  }
  else ;
  
#line 2753 
  __retres = 0;
  
#line 2753 
  goto return_label;
  err_wqp_sh_area: 
#line 2755 
  ;
  
#line 2756 
  pci_free_consistent(qdev->pdev,4096UL,qdev->rx_ring_shadow_reg_area,qdev->rx_ring_shadow_reg_dma);
  
#line 2760 
  __retres = -12;
  return_label: 
#line 2760 
                return __retres;
}


#line 2763  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_init_tx_ring(struct ql_adapter *qdev, struct tx_ring *tx_ring)
{
  struct tx_ring_desc *tx_ring_desc;
  int i;
  struct ob_mac_iocb_req *mac_iocb_ptr;
  
#line 2769 
  mac_iocb_ptr = (struct ob_mac_iocb_req *)tx_ring->wq_base;
  
#line 2770 
  tx_ring_desc = tx_ring->q;
  
#line 2771 
  i = 0;
  
#line 2771 
  goto ldv_56410;
  ldv_56409: 
#line 2772 
  ;
  
#line 2772 
  tx_ring_desc->index = (unsigned int)i;
  
#line 2773 
  tx_ring_desc->skb = (struct sk_buff *)0;
  
#line 2774 
  tx_ring_desc->queue_entry = mac_iocb_ptr;
  
#line 2775 
  mac_iocb_ptr += 1;
  
#line 2776 
  tx_ring_desc += 1;
  
#line 2771 
  i += 1;
  ldv_56410: 
#line 2772 
  ;
  
#line 2771 
  if (tx_ring->wq_len > (unsigned int)i) 
#line 2773 
                                         goto ldv_56409; else 
#line 2776 
                                                              goto ldv_56411;
  ldv_56411: 
#line 2777 
  ;
  
#line 2778 
  atomic_set(& tx_ring->tx_count,(int)tx_ring->wq_len);
  
#line 2779 
  return;
}


#line 2781  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_free_tx_resources(struct ql_adapter *qdev, struct tx_ring *tx_ring)
{
  
#line 2784 
  if (tx_ring->wq_base != (void *)0) {
    
#line 2785 
    pci_free_consistent(qdev->pdev,(unsigned long)tx_ring->wq_size,tx_ring->wq_base,tx_ring->wq_base_dma);
    
#line 2787 
    tx_ring->wq_base = (void *)0;
  }
  else ;
  
#line 2789 
  kfree((void const *)tx_ring->q);
  
#line 2790 
  tx_ring->q = (struct tx_ring_desc *)0;
  
#line 2791 
  return;
}


#line 2793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_alloc_tx_resources(struct ql_adapter *qdev, struct tx_ring *tx_ring)
{
  int __retres;
  
#line 2796 
  tx_ring->wq_base = pci_alloc_consistent(qdev->pdev,(unsigned long)tx_ring->wq_size,& tx_ring->wq_base_dma);
  
#line 2800 
  if (tx_ring->wq_base == (void *)0 || (tx_ring->wq_base_dma & 3ULL) != 0ULL) 
    
#line 2802 
    goto pci_alloc_err; else ;
  
#line 2805 
  tx_ring->q = (struct tx_ring_desc *)kmalloc((unsigned long)tx_ring->wq_len * 472UL,208U);
  
#line 2806 
  if (tx_ring->q == (struct tx_ring_desc *)0) 
#line 2807 
                                              goto err; else ;
  
#line 2809 
  __retres = 0;
  
#line 2809 
  goto return_label;
  err: 
#line 2810 
  ;
  
#line 2811 
  pci_free_consistent(qdev->pdev,(unsigned long)tx_ring->wq_size,tx_ring->wq_base,tx_ring->wq_base_dma);
  
#line 2813 
  tx_ring->wq_base = (void *)0;
  pci_alloc_err: 
#line 2814 
  ;
  
#line 2815 
  if ((qdev->msg_enable & 32U) != 0U) 
#line 2815 
                                      netdev_err((struct net_device const *)qdev->ndev,"tx_ring alloc failed.\n"); else ;
  
#line 2816 
  __retres = -12;
  return_label: 
#line 2816 
                return __retres;
}


#line 2819  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_free_lbq_buffers(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  struct bq_desc *lbq_desc;
  uint32_t curr_idx;
  uint32_t clean_idx;
  
#line 2825 
  curr_idx = rx_ring->lbq_curr_idx;
  
#line 2826 
  clean_idx = rx_ring->lbq_clean_idx;
  
#line 2827 
  goto ldv_56430;
  ldv_56429: 
#line 2828 
  ;
  
#line 2828 
  lbq_desc = rx_ring->lbq + curr_idx;
  
#line 2830 
  if (lbq_desc->p.pg_chunk.last_flag != 0U) {
    unsigned int tmp;
    
#line 2833 
    tmp = ql_lbq_block_size(qdev);
    
#line 2831 
    ;
    
#line 2831 
    ;
    
#line 2831 
    pci_unmap_page(qdev->pdev,lbq_desc->p.pg_chunk.map,(unsigned long)tmp,2);
    
#line 2835 
    lbq_desc->p.pg_chunk.last_flag = 0U;
  }
  else ;
  
#line 2838 
  put_page(lbq_desc->p.pg_chunk.page);
  
#line 2839 
  lbq_desc->p.pg_chunk.page = (struct page *)0;
  
#line 2841 
  curr_idx += 1U;
  
#line 2841 
  ;
  
#line 2841 
  if (curr_idx == rx_ring->lbq_len) 
#line 2842 
                                    curr_idx = 0U; else ;
  ldv_56430: 
#line 2843 
  ;
  
#line 2827 
  if (curr_idx != clean_idx) 
#line 2829 
                             goto ldv_56429; else 
#line 2832 
                                                  goto ldv_56431;
  ldv_56431: 
#line 2833 
  ;
  
#line 2845 
  if (rx_ring->pg_chunk.page != (struct page *)0) {
    unsigned int tmp_0;
    
#line 2847 
    tmp_0 = ql_lbq_block_size(qdev);
    
#line 2846 
    ;
    
#line 2846 
    ;
    
#line 2846 
    pci_unmap_page(qdev->pdev,rx_ring->pg_chunk.map,(unsigned long)tmp_0,2);
    
#line 2848 
    put_page(rx_ring->pg_chunk.page);
    
#line 2849 
    rx_ring->pg_chunk.page = (struct page *)0;
  }
  else ;
  
#line 2851 
  return;
}


#line 2853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_free_sbq_buffers(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  int i;
  struct bq_desc *sbq_desc;
  
#line 2858 
  i = 0;
  
#line 2858 
  goto ldv_56439;
  ldv_56438: 
#line 2859 
  ;
  
#line 2859 
  sbq_desc = rx_ring->sbq + i;
  
#line 2860 
  if (sbq_desc == (struct bq_desc *)0) {
    
#line 2861 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 2861 
                                        netdev_err((struct net_device const *)qdev->ndev,"sbq_desc %d is NULL.\n",i); else ;
    
#line 2863 
    goto return_label;
  }
  else ;
  
#line 2865 
  if (sbq_desc->p.skb != (struct sk_buff *)0) {
    
#line 2866 
    pci_unmap_single(qdev->pdev,sbq_desc->mapaddr,(unsigned long)sbq_desc->maplen,2);
    
#line 2870 
    consume_skb(sbq_desc->p.skb);
    
#line 2871 
    sbq_desc->p.skb = (struct sk_buff *)0;
  }
  else ;
  
#line 2858 
  i += 1;
  ldv_56439: 
#line 2859 
  ;
  
#line 2858 
  if (rx_ring->sbq_len > (unsigned int)i) 
#line 2860 
                                          goto ldv_56438; else 
#line 2863 
                                                               goto ldv_56440;
  ldv_56440: 
#line 2864 
  ;
  return_label: 
#line 2865 
                return;
}


#line 2879  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_free_rx_buffers(struct ql_adapter *qdev)
{
  int i;
  struct rx_ring *rx_ring;
  
#line 2884 
  i = 0;
  
#line 2884 
  goto ldv_56447;
  ldv_56446: 
#line 2885 
  ;
  
#line 2885 
  rx_ring = & qdev->rx_ring[i];
  
#line 2886 
  if (rx_ring->lbq != (struct bq_desc *)0) 
#line 2887 
                                           ql_free_lbq_buffers(qdev,rx_ring); else ;
  
#line 2888 
  if (rx_ring->sbq != (struct bq_desc *)0) 
#line 2889 
                                           ql_free_sbq_buffers(qdev,rx_ring); else ;
  
#line 2884 
  i += 1;
  ldv_56447: 
#line 2885 
  ;
  
#line 2884 
  if (qdev->rx_ring_count > i) 
#line 2886 
                               goto ldv_56446; else 
#line 2889 
                                                    goto ldv_56448;
  ldv_56448: 
#line 2890 
  ;
  
#line 2891 
  return;
}


#line 2893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_alloc_rx_buffers(struct ql_adapter *qdev)
{
  struct rx_ring *rx_ring;
  int i;
  
#line 2898 
  i = 0;
  
#line 2898 
  goto ldv_56455;
  ldv_56454: 
#line 2899 
  ;
  
#line 2899 
  rx_ring = & qdev->rx_ring[i];
  
#line 2900 
  if (rx_ring->type != 3U) 
#line 2901 
                           ql_update_buffer_queues(qdev,rx_ring); else ;
  
#line 2898 
  i += 1;
  ldv_56455: 
#line 2899 
  ;
  
#line 2898 
  if (qdev->rx_ring_count > i) 
#line 2900 
                               goto ldv_56454; else 
#line 2903 
                                                    goto ldv_56456;
  ldv_56456: 
#line 2904 
  ;
  
#line 2905 
  return;
}


#line 2905  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_init_lbq_ring(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  int i;
  struct bq_desc *lbq_desc;
  
#line 2910 
  __le64 *bq = (__le64 *)rx_ring->lbq_base;
  
#line 2912 
  memset((void *)rx_ring->lbq,0,(unsigned long)rx_ring->lbq_len * 64UL);
  
#line 2913 
  i = 0;
  
#line 2913 
  goto ldv_56465;
  ldv_56464: 
#line 2914 
  ;
  
#line 2914 
  lbq_desc = rx_ring->lbq + i;
  
#line 2915 
  memset((void *)lbq_desc,0,64UL);
  
#line 2916 
  lbq_desc->index = (unsigned int)i;
  
#line 2917 
  lbq_desc->addr = bq;
  
#line 2918 
  bq += 1;
  
#line 2913 
  i += 1;
  ldv_56465: 
#line 2914 
  ;
  
#line 2913 
  if (rx_ring->lbq_len > (unsigned int)i) 
#line 2915 
                                          goto ldv_56464; else 
#line 2918 
                                                               goto ldv_56466;
  ldv_56466: 
#line 2919 
  ;
  
#line 2920 
  return;
}


#line 2922  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_init_sbq_ring(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  int i;
  struct bq_desc *sbq_desc;
  
#line 2927 
  __le64 *bq = (__le64 *)rx_ring->sbq_base;
  
#line 2929 
  memset((void *)rx_ring->sbq,0,(unsigned long)rx_ring->sbq_len * 64UL);
  
#line 2930 
  i = 0;
  
#line 2930 
  goto ldv_56475;
  ldv_56474: 
#line 2931 
  ;
  
#line 2931 
  sbq_desc = rx_ring->sbq + i;
  
#line 2932 
  memset((void *)sbq_desc,0,64UL);
  
#line 2933 
  sbq_desc->index = (unsigned int)i;
  
#line 2934 
  sbq_desc->addr = bq;
  
#line 2935 
  bq += 1;
  
#line 2930 
  i += 1;
  ldv_56475: 
#line 2931 
  ;
  
#line 2930 
  if (rx_ring->sbq_len > (unsigned int)i) 
#line 2932 
                                          goto ldv_56474; else 
#line 2935 
                                                               goto ldv_56476;
  ldv_56476: 
#line 2936 
  ;
  
#line 2937 
  return;
}


#line 2939  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_free_rx_resources(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  
#line 2943 
  if (rx_ring->sbq_base != (void *)0) {
    
#line 2944 
    pci_free_consistent(qdev->pdev,(unsigned long)rx_ring->sbq_size,rx_ring->sbq_base,rx_ring->sbq_base_dma);
    
#line 2947 
    rx_ring->sbq_base = (void *)0;
  }
  else ;
  
#line 2951 
  kfree((void const *)rx_ring->sbq);
  
#line 2952 
  rx_ring->sbq = (struct bq_desc *)0;
  
#line 2955 
  if (rx_ring->lbq_base != (void *)0) {
    
#line 2956 
    pci_free_consistent(qdev->pdev,(unsigned long)rx_ring->lbq_size,rx_ring->lbq_base,rx_ring->lbq_base_dma);
    
#line 2959 
    rx_ring->lbq_base = (void *)0;
  }
  else ;
  
#line 2963 
  kfree((void const *)rx_ring->lbq);
  
#line 2964 
  rx_ring->lbq = (struct bq_desc *)0;
  
#line 2967 
  if (rx_ring->cq_base != (void *)0) {
    
#line 2968 
    pci_free_consistent(qdev->pdev,(unsigned long)rx_ring->cq_size,rx_ring->cq_base,rx_ring->cq_base_dma);
    
#line 2971 
    rx_ring->cq_base = (void *)0;
  }
  else ;
  
#line 2973 
  return;
}


#line 2977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_alloc_rx_resources(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  int __retres;
  
#line 2984 
  rx_ring->cq_base = pci_alloc_consistent(qdev->pdev,(unsigned long)rx_ring->cq_size,& rx_ring->cq_base_dma);
  
#line 2988 
  if (rx_ring->cq_base == (void *)0) {
    
#line 2989 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 2989 
                                        netdev_err((struct net_device const *)qdev->ndev,"rx_ring alloc failed.\n"); else ;
    
#line 2990 
    __retres = -12;
    
#line 2990 
    goto return_label;
  }
  else ;
  
#line 2993 
  if (rx_ring->sbq_len != 0U) {
    
#line 2997 
    rx_ring->sbq_base = pci_alloc_consistent(qdev->pdev,(unsigned long)rx_ring->sbq_size,& rx_ring->sbq_base_dma);
    
#line 3001 
    if (rx_ring->sbq_base == (void *)0) {
      
#line 3002 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 3002 
                                          netdev_err((struct net_device const *)qdev->ndev,"Small buffer queue allocation failed.\n"); else ;
      
#line 3004 
      goto err_mem;
    }
    else ;
    
#line 3010 
    rx_ring->sbq = (struct bq_desc *)kmalloc_array((unsigned long)rx_ring->sbq_len,64UL,208U);
    
#line 3013 
    if (rx_ring->sbq == (struct bq_desc *)0) 
#line 3014 
                                             goto err_mem; else ;
    
#line 3016 
    ql_init_sbq_ring(qdev,rx_ring);
  }
  else ;
  
#line 3019 
  if (rx_ring->lbq_len != 0U) {
    
#line 3023 
    rx_ring->lbq_base = pci_alloc_consistent(qdev->pdev,(unsigned long)rx_ring->lbq_size,& rx_ring->lbq_base_dma);
    
#line 3027 
    if (rx_ring->lbq_base == (void *)0) {
      
#line 3028 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 3028 
                                          netdev_err((struct net_device const *)qdev->ndev,"Large buffer queue allocation failed.\n"); else ;
      
#line 3030 
      goto err_mem;
    }
    else ;
    
#line 3035 
    rx_ring->lbq = (struct bq_desc *)kmalloc_array((unsigned long)rx_ring->lbq_len,64UL,208U);
    
#line 3038 
    if (rx_ring->lbq == (struct bq_desc *)0) 
#line 3039 
                                             goto err_mem; else ;
    
#line 3041 
    ql_init_lbq_ring(qdev,rx_ring);
  }
  else ;
  
#line 3044 
  __retres = 0;
  
#line 3044 
  goto return_label;
  err_mem: 
#line 3046 
  ;
  
#line 3047 
  ql_free_rx_resources(qdev,rx_ring);
  
#line 3048 
  __retres = -12;
  return_label: 
#line 3048 
                return __retres;
}


#line 3051  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_tx_ring_clean(struct ql_adapter *qdev)
{
  struct tx_ring *tx_ring;
  struct tx_ring_desc *tx_ring_desc;
  int i;
  int j;
  
#line 3061 
  j = 0;
  
#line 3061 
  goto ldv_56497;
  ldv_56496: 
#line 3062 
  ;
  
#line 3062 
  tx_ring = & qdev->tx_ring[j];
  
#line 3063 
  i = 0;
  
#line 3063 
  goto ldv_56494;
  ldv_56493: 
#line 3064 
  ;
  
#line 3064 
  tx_ring_desc = tx_ring->q + i;
  
#line 3065 
  if (tx_ring_desc != (struct tx_ring_desc *)0 && tx_ring_desc->skb != (struct sk_buff *)0) {
    
#line 3066 
    if ((qdev->msg_enable & 16U) != 0U) 
#line 3066 
                                        netdev_err((struct net_device const *)qdev->ndev,"Freeing lost SKB %p, from queue %d, index %d.\n",tx_ring_desc->skb,j,tx_ring_desc->index); else ;
    
#line 3070 
    ql_unmap_send(qdev,tx_ring_desc,tx_ring_desc->map_cnt);
    
#line 3072 
    consume_skb(tx_ring_desc->skb);
    
#line 3073 
    tx_ring_desc->skb = (struct sk_buff *)0;
  }
  else ;
  
#line 3063 
  i += 1;
  ldv_56494: 
#line 3064 
  ;
  
#line 3063 
  if (tx_ring->wq_len > (unsigned int)i) 
#line 3065 
                                         goto ldv_56493; else 
#line 3068 
                                                              goto ldv_56495;
  ldv_56495: 
#line 3069 
  ;
  
#line 3061 
  j += 1;
  ldv_56497: 
#line 3062 
  ;
  
#line 3061 
  if (qdev->tx_ring_count > j) 
#line 3063 
                               goto ldv_56496; else 
#line 3066 
                                                    goto ldv_56498;
  ldv_56498: 
#line 3067 
  ;
  
#line 3068 
  return;
}


#line 3079  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_free_mem_resources(struct ql_adapter *qdev)
{
  int i;
  
#line 3083 
  i = 0;
  
#line 3083 
  goto ldv_56504;
  ldv_56503: 
#line 3084 
  ;
  
#line 3084 
  ql_free_tx_resources(qdev,& qdev->tx_ring[i]);
  
#line 3083 
  i += 1;
  ldv_56504: 
#line 3084 
  ;
  
#line 3083 
  if (qdev->tx_ring_count > i) 
#line 3085 
                               goto ldv_56503; else 
#line 3088 
                                                    goto ldv_56505;
  ldv_56505: 
#line 3089 
  ;
  
#line 3085 
  i = 0;
  
#line 3085 
  goto ldv_56507;
  ldv_56506: 
#line 3086 
  ;
  
#line 3086 
  ql_free_rx_resources(qdev,& qdev->rx_ring[i]);
  
#line 3085 
  i += 1;
  ldv_56507: 
#line 3086 
  ;
  
#line 3085 
  if (qdev->rx_ring_count > i) 
#line 3087 
                               goto ldv_56506; else 
#line 3090 
                                                    goto ldv_56508;
  ldv_56508: 
#line 3091 
  ;
  
#line 3087 
  ql_free_shadow_space(qdev);
  
#line 3088 
  return;
}


#line 3090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_alloc_mem_resources(struct ql_adapter *qdev)
{
  int __retres;
  int i;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 3095 
  tmp = ql_alloc_shadow_space(qdev);
  
#line 3095 
  if (tmp != 0) {
    
#line 3096 
    __retres = -12;
    
#line 3096 
    goto return_label;
  }
  else ;
  
#line 3098 
  i = 0;
  
#line 3098 
  goto ldv_56515;
  ldv_56514: 
#line 3099 
  ;
  
#line 3099 
  tmp_0 = ql_alloc_rx_resources(qdev,& qdev->rx_ring[i]);
  
#line 3099 
  if (tmp_0 != 0) {
    
#line 3100 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3100 
                                        netdev_err((struct net_device const *)qdev->ndev,"RX resource allocation failed.\n"); else ;
    
#line 3102 
    goto err_mem;
  }
  else ;
  
#line 3098 
  i += 1;
  ldv_56515: 
#line 3099 
  ;
  
#line 3098 
  if (qdev->rx_ring_count > i) 
#line 3100 
                               goto ldv_56514; else 
#line 3103 
                                                    goto ldv_56516;
  ldv_56516: 
#line 3104 
  ;
  
#line 3106 
  i = 0;
  
#line 3106 
  goto ldv_56518;
  ldv_56517: 
#line 3107 
  ;
  
#line 3107 
  tmp_1 = ql_alloc_tx_resources(qdev,& qdev->tx_ring[i]);
  
#line 3107 
  if (tmp_1 != 0) {
    
#line 3108 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3108 
                                        netdev_err((struct net_device const *)qdev->ndev,"TX resource allocation failed.\n"); else ;
    
#line 3110 
    goto err_mem;
  }
  else ;
  
#line 3106 
  i += 1;
  ldv_56518: 
#line 3107 
  ;
  
#line 3106 
  if (qdev->tx_ring_count > i) 
#line 3108 
                               goto ldv_56517; else 
#line 3111 
                                                    goto ldv_56519;
  ldv_56519: 
#line 3112 
  ;
  
#line 3113 
  __retres = 0;
  
#line 3113 
  goto return_label;
  err_mem: 
#line 3115 
  ;
  
#line 3116 
  ql_free_mem_resources(qdev);
  
#line 3117 
  __retres = -12;
  return_label: 
#line 3117 
                return __retres;
}


#line 3124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_start_rx_ring(struct ql_adapter *qdev, struct rx_ring *rx_ring)
{
  int __retres;
  u16 bq_len;
  u64 tmp;
  __le64 *base_indirect_ptr;
  int page_entries;
  
#line 3126 
  struct cqicb *cqicb = & rx_ring->cqicb;
  
#line 3127 
  void *shadow_reg = qdev->rx_ring_shadow_reg_area + (unsigned long)rx_ring->cq_id * 24UL;
  
#line 3129 
  u64 shadow_reg_dma = qdev->rx_ring_shadow_reg_dma + (unsigned long long)((unsigned long)rx_ring->cq_id * 24UL);
  
#line 3131 
  void *doorbell_area = qdev->doorbell_area + ((int)rx_ring->cq_id + 128) * 4096;
  
#line 3133 
  int err = 0;
  
#line 3140 
  rx_ring->prod_idx_sh_reg = (__le32 *)shadow_reg;
  
#line 3141 
  rx_ring->prod_idx_sh_reg_dma = shadow_reg_dma;
  
#line 3142 
  *(rx_ring->prod_idx_sh_reg) = 0U;
  
#line 3143 
  shadow_reg += 8U;
  
#line 3144 
  shadow_reg_dma += 8ULL;
  
#line 3145 
  rx_ring->lbq_base_indirect = shadow_reg;
  
#line 3146 
  rx_ring->lbq_base_indirect_dma = shadow_reg_dma;
  
#line 3147 
  shadow_reg += (((unsigned long)rx_ring->lbq_len * 8UL) / 4096UL + (unsigned long)(((unsigned long)rx_ring->lbq_len * 8UL & 4088UL) != 0UL)) * 8UL;
  
#line 3148 
  shadow_reg_dma = (unsigned long long)((((unsigned long)rx_ring->lbq_len * 8UL) / 4096UL + (unsigned long)(((unsigned long)rx_ring->lbq_len * 8UL & 4088UL) != 0UL)) * 8UL) + shadow_reg_dma;
  
#line 3149 
  rx_ring->sbq_base_indirect = shadow_reg;
  
#line 3150 
  rx_ring->sbq_base_indirect_dma = shadow_reg_dma;
  
#line 3153 
  rx_ring->cnsmr_idx_db_reg = doorbell_area;
  
#line 3154 
  rx_ring->cnsmr_idx = 0U;
  
#line 3155 
  rx_ring->curr_entry = (struct ql_net_rsp_iocb *)rx_ring->cq_base;
  
#line 3158 
  rx_ring->valid_db_reg = doorbell_area + 4U;
  
#line 3161 
  rx_ring->lbq_prod_idx_db_reg = doorbell_area + 24U;
  
#line 3164 
  rx_ring->sbq_prod_idx_db_reg = doorbell_area + 28U;
  
#line 3166 
  memset((void *)cqicb,0,52UL);
  
#line 3167 
  cqicb->msix_vect = (unsigned char)rx_ring->irq;
  
#line 3169 
  if (rx_ring->cq_len != 65536U) 
#line 3169 
                                 bq_len = (unsigned short)rx_ring->cq_len; else 
                                                                    
#line 3169 
                                                                    bq_len = (unsigned short)0U;
  
#line 3170 
  cqicb->len = (unsigned short)((unsigned int)bq_len | 16U);
  
#line 3172 
  cqicb->addr = rx_ring->cq_base_dma;
  
#line 3174 
  cqicb->prod_idx_addr = rx_ring->prod_idx_sh_reg_dma;
  
#line 3179 
  cqicb->flags = (unsigned char)200U;
  
#line 3182 
  if (rx_ring->lbq_len != 0U) {
    
#line 3183 
    cqicb->flags = (unsigned char)((unsigned int)cqicb->flags | 32U);
    
#line 3184 
    tmp = rx_ring->lbq_base_dma;
    
#line 3185 
    base_indirect_ptr = (__le64 *)rx_ring->lbq_base_indirect;
    
#line 3186 
    page_entries = 0;
    ldv_56533: 
#line 3187 
    ;
    
#line 3188 
    *base_indirect_ptr = tmp;
    
#line 3189 
    tmp += 4096ULL;
    
#line 3190 
    base_indirect_ptr += 1;
    
#line 3191 
    page_entries += 1;
    
#line 3192 
    if ((unsigned long)page_entries < ((unsigned long)rx_ring->lbq_len * 8UL) / 4096UL + (unsigned long)(((unsigned long)rx_ring->lbq_len * 8UL & 4088UL) != 0UL)) 
      
#line 3194 
      goto ldv_56533; else 
#line 3197 
                           goto ldv_56534;
    ldv_56534: 
#line 3198 
    ;
    
#line 3193 
    cqicb->lbq_addr = rx_ring->lbq_base_indirect_dma;
    
#line 3195 
    if (rx_ring->lbq_buf_size != 65536U) 
#line 3195 
                                         bq_len = (unsigned short)rx_ring->lbq_buf_size; else 
                                                                    
#line 3195 
                                                                    bq_len = (unsigned short)0U;
    
#line 3197 
    cqicb->lbq_buf_size = bq_len;
    
#line 3198 
    if (rx_ring->lbq_len != 65536U) 
#line 3198 
                                    bq_len = (unsigned short)rx_ring->lbq_len; else 
                                                                    
#line 3198 
                                                                    bq_len = (unsigned short)0U;
    
#line 3200 
    cqicb->lbq_len = bq_len;
    
#line 3201 
    rx_ring->lbq_prod_idx = 0U;
    
#line 3202 
    rx_ring->lbq_curr_idx = 0U;
    
#line 3203 
    rx_ring->lbq_clean_idx = 0U;
    
#line 3204 
    rx_ring->lbq_free_cnt = rx_ring->lbq_len;
  }
  else ;
  
#line 3206 
  if (rx_ring->sbq_len != 0U) {
    
#line 3207 
    cqicb->flags = (unsigned char)((unsigned int)cqicb->flags | 16U);
    
#line 3208 
    tmp = rx_ring->sbq_base_dma;
    
#line 3209 
    base_indirect_ptr = (__le64 *)rx_ring->sbq_base_indirect;
    
#line 3210 
    page_entries = 0;
    ldv_56535: 
#line 3211 
    ;
    
#line 3212 
    *base_indirect_ptr = tmp;
    
#line 3213 
    tmp += 4096ULL;
    
#line 3214 
    base_indirect_ptr += 1;
    
#line 3215 
    page_entries += 1;
    
#line 3216 
    if ((unsigned long)page_entries < ((unsigned long)rx_ring->sbq_len * 8UL) / 4096UL + (unsigned long)(((unsigned long)rx_ring->sbq_len * 8UL & 4088UL) != 0UL)) 
      
#line 3218 
      goto ldv_56535; else 
#line 3221 
                           goto ldv_56536;
    ldv_56536: 
#line 3222 
    ;
    
#line 3217 
    cqicb->sbq_addr = rx_ring->sbq_base_indirect_dma;
    
#line 3219 
    cqicb->sbq_buf_size = (unsigned short)rx_ring->sbq_buf_size;
    
#line 3221 
    if (rx_ring->sbq_len != 65536U) 
#line 3221 
                                    bq_len = (unsigned short)rx_ring->sbq_len; else 
                                                                    
#line 3221 
                                                                    bq_len = (unsigned short)0U;
    
#line 3223 
    cqicb->sbq_len = bq_len;
    
#line 3224 
    rx_ring->sbq_prod_idx = 0U;
    
#line 3225 
    rx_ring->sbq_curr_idx = 0U;
    
#line 3226 
    rx_ring->sbq_clean_idx = 0U;
    
#line 3227 
    rx_ring->sbq_free_cnt = rx_ring->sbq_len;
  }
  else ;
  
#line 3229 
  switch (rx_ring->type) {
    case (u32)3: 
#line 3230 
    ;
    
#line 3231 
    cqicb->irq_delay = qdev->tx_coalesce_usecs;
    
#line 3232 
    cqicb->pkt_delay = qdev->tx_max_coalesced_frames;
    
#line 3233 
    goto ldv_56538;
    case (u32)4: 
#line 3234 
    ;
    
#line 3238 
    netif_napi_add(qdev->ndev,& rx_ring->napi,& ql_napi_poll_msix,64);
    
#line 3240 
    cqicb->irq_delay = qdev->rx_coalesce_usecs;
    
#line 3241 
    cqicb->pkt_delay = qdev->rx_max_coalesced_frames;
    
#line 3242 
    goto ldv_56538;
    default: 
#line 3243 
    ;
    
#line 3244 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3244 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"Invalid rx_ring->type = %d.\n",rx_ring->type); else ;
  }
  ldv_56538: 
#line 3247 
  ;
  
#line 3247 
  err = ql_write_cfg(qdev,(void *)cqicb,52,64U,(unsigned short)((int)rx_ring->cq_id));
  
#line 3249 
  if (err != 0) {
    
#line 3250 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3250 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to load CQICB.\n"); else ;
    
#line 3251 
    __retres = err;
    
#line 3251 
    goto return_label;
  }
  else ;
  
#line 3253 
  __retres = err;
  return_label: 
#line 3253 
                return __retres;
}


#line 3256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_start_tx_ring(struct ql_adapter *qdev, struct tx_ring *tx_ring)
{
  int __retres;
  
#line 3258 
  struct wqicb *wqicb = (struct wqicb *)tx_ring;
  
#line 3259 
  void *doorbell_area = qdev->doorbell_area + (int)tx_ring->wq_id * 4096;
  
#line 3261 
  void *shadow_reg = qdev->tx_ring_shadow_reg_area + (unsigned long)tx_ring->wq_id * 8UL;
  
#line 3263 
  u64 shadow_reg_dma = qdev->tx_ring_shadow_reg_dma + (unsigned long long)((unsigned long)tx_ring->wq_id * 8UL);
  
#line 3265 
  int err = 0;
  
#line 3271 
  tx_ring->prod_idx_db_reg = doorbell_area;
  
#line 3272 
  tx_ring->prod_idx = (unsigned short)0U;
  
#line 3274 
  tx_ring->valid_db_reg = doorbell_area + 4U;
  
#line 3279 
  tx_ring->cnsmr_idx_sh_reg = (__le32 *)shadow_reg;
  
#line 3280 
  tx_ring->cnsmr_idx_sh_reg_dma = shadow_reg_dma;
  
#line 3282 
  wqicb->len = (unsigned short)((unsigned int)((unsigned short)tx_ring->wq_len) | 16U);
  
#line 3283 
  wqicb->flags = (unsigned short)61440U;
  
#line 3285 
  wqicb->cq_id_rss = tx_ring->cq_id;
  
#line 3286 
  wqicb->rid = (unsigned short)0U;
  
#line 3287 
  wqicb->addr = tx_ring->wq_base_dma;
  
#line 3289 
  wqicb->cnsmr_idx_addr = tx_ring->cnsmr_idx_sh_reg_dma;
  
#line 3291 
  ql_init_tx_ring(qdev,tx_ring);
  
#line 3293 
  err = ql_write_cfg(qdev,(void *)wqicb,24,1U,(unsigned short)((int)tx_ring->wq_id));
  
#line 3295 
  if (err != 0) {
    
#line 3296 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3296 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to load tx_ring.\n"); else ;
    
#line 3297 
    __retres = err;
    
#line 3297 
    goto return_label;
  }
  else ;
  
#line 3299 
  __retres = err;
  return_label: 
#line 3299 
                return __retres;
}


#line 3302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_disable_msix(struct ql_adapter *qdev)
{
  int tmp_0;
  
#line 3304 
  tmp_0 = constant_test_bit(3L,(unsigned long const volatile *)(& qdev->flags));
  
#line 3304 
  if (tmp_0 != 0) {
    
#line 3305 
    pci_disable_msix(qdev->pdev);
    
#line 3306 
    set_bit(3L,(unsigned long volatile *)(& qdev->flags));
    
#line 3307 
    kfree((void const *)qdev->msi_x_entry);
    
#line 3308 
    qdev->msi_x_entry = (struct msix_entry *)0;
  }
  else {
    int tmp;
    
#line 3309 
    tmp = constant_test_bit(2L,(unsigned long const volatile *)(& qdev->flags));
    
#line 3309 
    if (tmp != 0) {
      
#line 3310 
      pci_disable_msi(qdev->pdev);
      
#line 3311 
      set_bit(2L,(unsigned long volatile *)(& qdev->flags));
    }
    else ;
  }
  
#line 3313 
  return;
}


#line 3319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_enable_msix(struct ql_adapter *qdev)
{
  int i;
  int err;
  
#line 3324 
  if (qlge_irq_type == 0) {
    
#line 3328 
    qdev->msi_x_entry = (struct msix_entry *)kcalloc((unsigned long)qdev->intr_count,8UL,208U);
    
#line 3331 
    if (qdev->msi_x_entry == (struct msix_entry *)0) {
      
#line 3332 
      qlge_irq_type = 1;
      
#line 3333 
      goto msi;
    }
    else ;
    
#line 3336 
    i = 0;
    
#line 3336 
    goto ldv_56560;
    ldv_56559: 
#line 3337 
    ;
    
#line 3337 
    (qdev->msi_x_entry + i)->entry = (unsigned short)i;
    
#line 3336 
    i += 1;
    ldv_56560: 
#line 3337 
    ;
    
#line 3336 
    if (qdev->intr_count > (unsigned int)i) 
#line 3338 
                                            goto ldv_56559; else 
#line 3341 
                                                                 goto ldv_56561;
    ldv_56561: 
#line 3342 
    ;
    
#line 3339 
    err = pci_enable_msix_range(qdev->pdev,qdev->msi_x_entry,1,(int)qdev->intr_count);
    
#line 3341 
    if (err < 0) {
      
#line 3342 
      kfree((void const *)qdev->msi_x_entry);
      
#line 3343 
      qdev->msi_x_entry = (struct msix_entry *)0;
      
#line 3344 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 3344 
                                          netdev_warn((struct net_device const *)qdev->ndev,"MSI-X Enable failed, trying MSI.\n"); else ;
      
#line 3346 
      qlge_irq_type = 1;
    }
    else {
      
#line 3348 
      qdev->intr_count = (unsigned int)err;
      
#line 3349 
      set_bit(3L,(unsigned long volatile *)(& qdev->flags));
      
#line 3350 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 3350 
                                          netdev_info((struct net_device const *)qdev->ndev,"MSI-X Enabled, got %d vectors.\n",qdev->intr_count); else ;
      
#line 3353 
      goto return_label;
    }
  }
  else ;
  msi: 
#line 3356 
  ;
  
#line 3357 
  qdev->intr_count = 1U;
  
#line 3358 
  if (qlge_irq_type == 1) {
    int tmp_0;
    
#line 3359 
    tmp_0 = pci_enable_msi_exact(qdev->pdev,1);
    
#line 3359 
    if (tmp_0 == 0) {
      
#line 3360 
      set_bit(2L,(unsigned long volatile *)(& qdev->flags));
      
#line 3361 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 3361 
                                          netdev_info((struct net_device const *)qdev->ndev,"Running with MSI interrupts.\n"); else ;
      
#line 3363 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 3366 
  qlge_irq_type = 2;
  
#line 3367 
  if ((qdev->msg_enable & 32U) != 0U) 
#line 3367 
                                      netdev_printk("\001",(struct net_device const *)qdev->ndev,"Running with legacy interrupts.\n"); else ;
  return_label: 
#line 3368 
                return;
}


#line 3380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_set_tx_vect(struct ql_adapter *qdev)
{
  int i;
  int j;
  int vect;
  int tmp;
  
#line 3383 
  u32 tx_rings_per_vector = (unsigned int)qdev->tx_ring_count / qdev->intr_count;
  
#line 3385 
  tmp = constant_test_bit(3L,(unsigned long const volatile *)(& qdev->flags));
  
#line 3385 
  if ((long)(tmp != 0) != 0L) {
    
#line 3387 
    vect = 0;
    
#line 3387 
    j = 0;
    
#line 3387 
    i = (int)qdev->rss_ring_count;
    
#line 3387 
    goto ldv_56570;
    ldv_56569: 
#line 3388 
    ;
    
#line 3389 
    if ((unsigned int)j == tx_rings_per_vector) {
      
#line 3390 
      vect += 1;
      
#line 3391 
      j = 0;
    }
    else ;
    
#line 3393 
    qdev->rx_ring[i].irq = (unsigned int)vect;
    
#line 3394 
    j += 1;
    
#line 3388 
    i += 1;
    ldv_56570: 
#line 3389 
    ;
    
#line 3387 
    if (qdev->rx_ring_count > i) 
#line 3390 
                                 goto ldv_56569; else 
#line 3393 
                                                      goto ldv_56571;
    ldv_56571: 
#line 3394 
    ;
  }
  else {
    
#line 3400 
    i = 0;
    
#line 3400 
    goto ldv_56573;
    ldv_56572: 
#line 3401 
    ;
    
#line 3401 
    qdev->rx_ring[i].irq = 0U;
    
#line 3400 
    i += 1;
    ldv_56573: 
#line 3401 
    ;
    
#line 3400 
    if (qdev->rx_ring_count > i) 
#line 3402 
                                 goto ldv_56572; else 
#line 3405 
                                                      goto ldv_56574;
    ldv_56574: 
#line 3406 
    ;
  }
  
#line 3408 
  return;
}


#line 3410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_set_irq_mask(struct ql_adapter *qdev, struct intr_context *ctx)
{
  int j;
  int tmp;
  
#line 3412 
  int vect = (int)ctx->intr;
  
#line 3413 
  u32 tx_rings_per_vector = (unsigned int)qdev->tx_ring_count / qdev->intr_count;
  
#line 3415 
  tmp = constant_test_bit(3L,(unsigned long const volatile *)(& qdev->flags));
  
#line 3415 
  if ((long)(tmp != 0) != 0L) {
    
#line 3419 
    ctx->irq_mask = (unsigned int)(1 << (int)qdev->rx_ring[vect].cq_id);
    
#line 3422 
    j = 0;
    
#line 3422 
    goto ldv_56583;
    ldv_56582: 
#line 3423 
    ;
    
#line 3423 
    ctx->irq_mask |= (unsigned int)(1 << (int)qdev->rx_ring[(qdev->rss_ring_count + (unsigned int)vect * tx_rings_per_vector) + (unsigned int)j].cq_id);
    
#line 3422 
    j += 1;
    ldv_56583: 
#line 3423 
    ;
    
#line 3422 
    if ((unsigned int)j < tx_rings_per_vector) 
#line 3424 
                                               goto ldv_56582; else 
#line 3427 
                                                                    goto ldv_56584;
    ldv_56584: 
#line 3428 
    ;
  }
  else {
    
#line 3431 
    j = 0;
    
#line 3431 
    goto ldv_56586;
    ldv_56585: 
#line 3432 
    ;
    
#line 3432 
    ctx->irq_mask |= (unsigned int)(1 << (int)qdev->rx_ring[j].cq_id);
    
#line 3431 
    j += 1;
    ldv_56586: 
#line 3432 
    ;
    
#line 3431 
    if (qdev->rx_ring_count > j) 
#line 3433 
                                 goto ldv_56585; else 
#line 3436 
                                                      goto ldv_56587;
    ldv_56587: 
#line 3437 
    ;
  }
  
#line 3439 
  return;
}


#line 3442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_resolve_queues_to_irqs(struct ql_adapter *qdev)
{
  int tmp;
  
#line 3444 
  int i = 0;
  
#line 3445 
  struct intr_context *intr_context = & qdev->intr_context[0];
  
#line 3447 
  tmp = constant_test_bit(3L,(unsigned long const volatile *)(& qdev->flags));
  
#line 3447 
  if ((long)(tmp != 0) != 0L) {
    
#line 3452 
    i = 0;
    
#line 3452 
    goto ldv_56594;
    ldv_56593: 
#line 3453 
    ;
    
#line 3453 
    qdev->rx_ring[i].irq = (unsigned int)i;
    
#line 3454 
    intr_context->intr = (unsigned int)i;
    
#line 3455 
    intr_context->qdev = qdev;
    
#line 3459 
    ql_set_irq_mask(qdev,intr_context);
    
#line 3464 
    intr_context->intr_en_mask = (unsigned int)(i | 595534080);
    
#line 3468 
    intr_context->intr_dis_mask = (unsigned int)(i | 595534336);
    
#line 3472 
    intr_context->intr_read_mask = (unsigned int)(i | 595534592);
    
#line 3476 
    if (i == 0) {
      
#line 3482 
      intr_context->handler = & qlge_isr;
      
#line 3483 
      sprintf((char *)(& intr_context->name),"%s-rx-%d",(char *)(& (qdev->ndev)->name),i);
    }
    else {
      
#line 3489 
      intr_context->handler = & qlge_msix_rx_isr;
      
#line 3490 
      sprintf((char *)(& intr_context->name),"%s-rx-%d",(char *)(& (qdev->ndev)->name),i);
    }
    
#line 3452 
    i += 1;
    
#line 3452 
    intr_context += 1;
    ldv_56594: 
#line 3453 
    ;
    
#line 3452 
    if (qdev->intr_count > (unsigned int)i) 
#line 3454 
                                            goto ldv_56593; else 
#line 3457 
                                                                 goto ldv_56595;
    ldv_56595: 
#line 3458 
    ;
  }
  else {
    
#line 3499 
    intr_context->intr = 0U;
    
#line 3500 
    intr_context->qdev = qdev;
    
#line 3505 
    intr_context->intr_en_mask = 58654976U;
    
#line 3507 
    intr_context->intr_dis_mask = 58655232U;
    
#line 3510 
    intr_context->intr_read_mask = 58655488U;
    
#line 3515 
    intr_context->handler = & qlge_isr;
    
#line 3516 
    sprintf((char *)(& intr_context->name),"%s-single_irq",(char *)(& (qdev->ndev)->name));
    
#line 3522 
    ql_set_irq_mask(qdev,intr_context);
  }
  
#line 3527 
  ql_set_tx_vect(qdev);
  
#line 3528 
  return;
}


#line 3530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_free_irq(struct ql_adapter *qdev)
{
  int i;
  
#line 3533 
  struct intr_context *intr_context = & qdev->intr_context[0];
  
#line 3535 
  i = 0;
  
#line 3535 
  goto ldv_56602;
  ldv_56601: 
#line 3536 
  ;
  
#line 3536 
  if (intr_context->hooked != 0U) {
    int tmp;
    
#line 3537 
    tmp = constant_test_bit(3L,(unsigned long const volatile *)(& qdev->flags));
    
#line 3537 
    if (tmp != 0) 
#line 3538 
                  ldv_free_irq_87((qdev->msi_x_entry + i)->vector,(void *)(& qdev->rx_ring[i])); else 
                                                                    
#line 3541 
                                                                    ldv_free_irq_88((qdev->pdev)->irq,(void *)(& qdev->rx_ring[0]));
  }
  else ;
  
#line 3535 
  i += 1;
  
#line 3535 
  intr_context += 1;
  ldv_56602: 
#line 3536 
  ;
  
#line 3535 
  if (qdev->intr_count > (unsigned int)i) 
#line 3537 
                                          goto ldv_56601; else 
#line 3540 
                                                               goto ldv_56603;
  ldv_56603: 
#line 3541 
  ;
  
#line 3545 
  ql_disable_msix(qdev);
  
#line 3546 
  return;
}


#line 3548  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_request_irq(struct ql_adapter *qdev)
{
  int __retres;
  int i;
  int tmp_4;
  
#line 3551 
  int status = 0;
  
#line 3552 
  struct pci_dev *pdev = qdev->pdev;
  
#line 3553 
  struct intr_context *intr_context = & qdev->intr_context[0];
  
#line 3555 
  ql_resolve_queues_to_irqs(qdev);
  
#line 3557 
  i = 0;
  
#line 3557 
  goto ldv_56614;
  ldv_56613: 
#line 3558 
  ;
  
#line 3558 
  atomic_set(& intr_context->irq_cnt,0);
  
#line 3559 
  tmp_4 = constant_test_bit(3L,(unsigned long const volatile *)(& qdev->flags));
  
#line 3559 
  if (tmp_4 != 0) {
    
#line 3560 
    status = ldv_request_irq_89((qdev->msi_x_entry + i)->vector,intr_context->handler,0UL,(char const *)(& intr_context->name),(void *)(& qdev->rx_ring[i]));
    
#line 3565 
    if (status != 0) {
      
#line 3566 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 3566 
                                          netdev_err((struct net_device const *)qdev->ndev,"Failed request for MSIX interrupt %d.\n",i); else ;
      
#line 3569 
      goto err_irq;
    }
    else ;
  }
  else {
    int tmp_0;
    int tmp;
    
#line 3572 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3572 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"trying msi or legacy interrupts.\n"); else ;
    
#line 3574 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3574 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"%s: irq = %d.\n","ql_request_irq",pdev->irq); else ;
    
#line 3576 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3576 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"%s: context->name = %s.\n","ql_request_irq",(char *)(& intr_context->name)); else ;
    
#line 3579 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3579 
                                        netdev_printk("\001",(struct net_device const *)qdev->ndev,"%s: dev_id = 0x%p.\n","ql_request_irq",& qdev->rx_ring[0]); else ;
    
#line 3582 
    ;
    
#line 3582 
    ;
    
#line 3586 
    tmp = constant_test_bit(2L,(unsigned long const volatile *)(& qdev->flags));
    
#line 3586 
    if (tmp != 0) 
#line 3586 
                  tmp_0 = 0; else 
#line 3586 
                                  tmp_0 = 128;
    
#line 3582 
    ;
    
#line 3582 
    status = ldv_request_irq_90(pdev->irq,& qlge_isr,(unsigned long)tmp_0,(char const *)(& intr_context->name),(void *)(& qdev->rx_ring[0]));
    
#line 3588 
    if (status != 0) 
#line 3589 
                     goto err_irq; else ;
    
#line 3591 
    if ((qdev->msg_enable & 32U) != 0U) {
      char *tmp_3;
      
#line 3591 
      ;
      
#line 3591 
      if (qdev->rx_ring[0].type != 2U) {
        char *tmp_2;
        
#line 3591 
        if (qdev->rx_ring[0].type != 3U) {
          char *tmp_1;
          
#line 3591 
          if (qdev->rx_ring[0].type == 4U) 
#line 3591 
                                           tmp_1 = (char *)"RX_Q"; else 
                                                                    
#line 3591 
                                                                    tmp_1 = (char *)"";
          
#line 3591 
          tmp_2 = tmp_1;
        }
        else 
#line 3591 
             tmp_2 = (char *)"TX_Q";
        
#line 3591 
        tmp_3 = tmp_2;
      }
      else 
#line 3591 
           tmp_3 = (char *)"DEFAULT_Q";
      
#line 3591 
      ;
      
#line 3591 
      ;
      
#line 3591 
      netdev_err((struct net_device const *)qdev->ndev,"Hooked intr %d, queue type %s, with name %s.\n",i,tmp_3,(char *)(& intr_context->name));
    }
    else ;
  }
  
#line 3600 
  intr_context->hooked = 1U;
  
#line 3557 
  i += 1;
  
#line 3557 
  intr_context += 1;
  ldv_56614: 
#line 3558 
  ;
  
#line 3557 
  if (qdev->intr_count > (unsigned int)i) 
#line 3559 
                                          goto ldv_56613; else 
#line 3562 
                                                               goto ldv_56615;
  ldv_56615: 
#line 3563 
  ;
  
#line 3602 
  __retres = status;
  
#line 3602 
  goto return_label;
  err_irq: 
#line 3603 
  ;
  
#line 3604 
  if ((qdev->msg_enable & 32U) != 0U) 
#line 3604 
                                      netdev_err((struct net_device const *)qdev->ndev,"Failed to get the interrupts!!!\n"); else ;
  
#line 3605 
  ql_free_irq(qdev);
  
#line 3606 
  __retres = status;
  return_label: 
#line 3606 
                return __retres;
}


#line 3609  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_start_rss(struct ql_adapter *qdev)
{
  int __retres;
  int i;
  
#line 3611 
  u8 const init_hash_seed[40U] = {(unsigned char)109U, (unsigned char)90U, (unsigned char)86U, (unsigned char)218U, (unsigned char)37U, (unsigned char)91U, (unsigned char)14U, (unsigned char)194U, (unsigned char)65U, (unsigned char)103U, (unsigned char)37U, (unsigned char)61U, (unsigned char)67U, (unsigned char)163U, (unsigned char)143U, (unsigned char)176U, (unsigned char)208U, (unsigned char)202U, (unsigned char)43U, (unsigned char)203U, (unsigned char)174U, (unsigned char)123U, (unsigned char)48U, (unsigned char)180U, (unsigned char)119U, (unsigned char)203U, (unsigned char)45U, (unsigned char)163U, (unsigned char)128U, (unsigned char)48U, (unsigned char)242U, (unsigned char)12U, (unsigned char)106U, (unsigned char)66U, (unsigned char)183U, (unsigned char)59U, (unsigned char)190U, (unsigned char)172U, (unsigned char)1U, (unsigned char)250U};
  
#line 3618 
  struct ricb *ricb = & qdev->ricb;
  
#line 3619 
  int status = 0;
  
#line 3621 
  u8 *hash_id = (u8 *)(& ricb->hash_cq_id);
  
#line 3623 
  memset((void *)ricb,0,1084UL);
  
#line 3625 
  ricb->base_cq = (unsigned char)128U;
  
#line 3626 
  ricb->flags = (unsigned char)175U;
  
#line 3628 
  ricb->mask = (unsigned short)1023U;
  
#line 3633 
  i = 0;
  
#line 3633 
  goto ldv_56625;
  ldv_56624: 
#line 3634 
  ;
  
#line 3634 
  *(hash_id + i) = (unsigned char)(((unsigned int)((unsigned char)qdev->rss_ring_count) + 255U) & (unsigned int)((unsigned char)i));
  
#line 3633 
  i += 1;
  ldv_56625: 
#line 3634 
  ;
  
#line 3633 
  if (i <= 1023) 
#line 3635 
                 goto ldv_56624; else 
#line 3638 
                                      goto ldv_56626;
  ldv_56626: 
#line 3639 
  ;
  
#line 3636 
  memcpy((void *)(& ricb->ipv6_hash_key[0]),(void const *)(& init_hash_seed),40UL);
  
#line 3637 
  memcpy((void *)(& ricb->ipv4_hash_key[0]),(void const *)(& init_hash_seed),16UL);
  
#line 3639 
  status = ql_write_cfg(qdev,(void *)ricb,1084,4U,(unsigned short)0);
  
#line 3640 
  if (status != 0) {
    
#line 3641 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3641 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to load RICB.\n"); else ;
    
#line 3642 
    __retres = status;
    
#line 3642 
    goto return_label;
  }
  else ;
  
#line 3644 
  __retres = status;
  return_label: 
#line 3644 
                return __retres;
}


#line 3647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_clear_routing_entries(struct ql_adapter *qdev)
{
  int __retres;
  int i;
  
#line 3649 
  int status = 0;
  
#line 3651 
  status = ql_sem_spinlock(qdev,805306368U);
  
#line 3652 
  if (status != 0) {
    
#line 3653 
    __retres = status;
    
#line 3653 
    goto return_label;
  }
  else ;
  
#line 3655 
  i = 0;
  
#line 3655 
  goto ldv_56634;
  ldv_56633: 
#line 3656 
  ;
  
#line 3656 
  status = ql_set_routing_reg(qdev,(unsigned int)i,0U,0);
  
#line 3657 
  if (status != 0) {
    
#line 3658 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3658 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init routing register for CAM packets.\n"); else ;
    
#line 3660 
    goto ldv_56632;
  }
  else ;
  
#line 3655 
  i += 1;
  ldv_56634: 
#line 3656 
  ;
  
#line 3655 
  if (i <= 15) 
#line 3657 
               goto ldv_56633; else 
#line 3660 
                                    goto ldv_56632;
  ldv_56632: 
#line 3661 
  ;
  
#line 3663 
  ql_sem_unlock(qdev,805306368U);
  
#line 3664 
  __retres = status;
  return_label: 
#line 3664 
                return __retres;
}


#line 3668  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_route_initialize(struct ql_adapter *qdev)
{
  int __retres;
  
#line 3670 
  int status = 0;
  
#line 3673 
  status = ql_clear_routing_entries(qdev);
  
#line 3674 
  if (status != 0) {
    
#line 3675 
    __retres = status;
    
#line 3675 
    goto return_label;
  }
  else ;
  
#line 3677 
  status = ql_sem_spinlock(qdev,805306368U);
  
#line 3678 
  if (status != 0) {
    
#line 3679 
    __retres = status;
    
#line 3679 
    goto return_label;
  }
  else ;
  
#line 3681 
  status = ql_set_routing_reg(qdev,1U,33554432U,1);
  
#line 3683 
  if (status != 0) {
    
#line 3684 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3684 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init routing register "); else ;
    
#line 3687 
    goto exit;
  }
  else ;
  
#line 3689 
  status = ql_set_routing_reg(qdev,2U,16777216U,1);
  
#line 3691 
  if (status != 0) {
    
#line 3692 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3692 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init routing register "); else ;
    
#line 3695 
    goto exit;
  }
  else ;
  
#line 3697 
  status = ql_set_routing_reg(qdev,3U,1U,1);
  
#line 3698 
  if (status != 0) {
    
#line 3699 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3699 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init routing register for broadcast packets.\n"); else ;
    
#line 3701 
    goto exit;
  }
  else ;
  
#line 3706 
  if (qdev->rss_ring_count > 1U) {
    
#line 3707 
    status = ql_set_routing_reg(qdev,8U,2147483648U,1);
    
#line 3709 
    if (status != 0) {
      
#line 3710 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 3710 
                                          netdev_err((struct net_device const *)qdev->ndev,"Failed to init routing register for MATCH RSS packets.\n"); else ;
      
#line 3712 
      goto exit;
    }
    else ;
  }
  else ;
  
#line 3716 
  status = ql_set_routing_reg(qdev,12U,128U,1);
  
#line 3718 
  if (status != 0) {
    
#line 3719 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3719 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init routing register for CAM packets.\n"); else ;
  }
  else ;
  exit: 
#line 3721 
  ;
  
#line 3722 
  ql_sem_unlock(qdev,805306368U);
  
#line 3723 
  __retres = status;
  return_label: 
#line 3723 
                return __retres;
}


#line 3726  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
int ql_cam_route_initialize(struct ql_adapter *qdev)
{
  int __retres;
  int status;
  int set;
  u32 tmp;
  
#line 3734 
  tmp = ql_read32((struct ql_adapter const *)qdev,48);
  
#line 3734 
  set = (int)tmp;
  
#line 3735 
  set = (int)(qdev->port_link_up & (unsigned int)set);
  
#line 3736 
  status = ql_set_mac_addr(qdev,set);
  
#line 3737 
  if (status != 0) {
    
#line 3738 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3738 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init mac address.\n"); else ;
    
#line 3739 
    __retres = status;
    
#line 3739 
    goto return_label;
  }
  else ;
  
#line 3742 
  status = ql_route_initialize(qdev);
  
#line 3743 
  if (status != 0) {
    
#line 3744 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3744 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init routing table.\n"); else ;
  }
  else ;
  
#line 3746 
  __retres = status;
  return_label: 
#line 3746 
                return __retres;
}


#line 3749  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_adapter_initialize(struct ql_adapter *qdev)
{
  int __retres;
  u32 value;
  u32 mask;
  int i;
  
#line 3753 
  int status = 0;
  
#line 3758 
  value = 3U;
  
#line 3759 
  mask = value << 16;
  
#line 3760 
  ql_write32((struct ql_adapter const *)qdev,8,mask | value);
  
#line 3763 
  value = 0U;
  
#line 3764 
  mask = 2130706432U;
  
#line 3765 
  if (((qdev->ndev)->features & 256ULL) != 0ULL) {
    
#line 3766 
    value |= 8U;
    
#line 3767 
    mask |= 524288U;
  }
  else ;
  
#line 3769 
  ql_write32((struct ql_adapter const *)qdev,212,mask | value);
  
#line 3772 
  ql_write32((struct ql_adapter const *)qdev,56,65537U);
  
#line 3775 
  value = 33504U;
  
#line 3777 
  value |= 3U;
  
#line 3780 
  mask = (value << 16) | 119472128U;
  
#line 3782 
  ql_write32((struct ql_adapter const *)qdev,16,mask | value);
  
#line 3784 
  ql_write32((struct ql_adapter const *)qdev,192,0U);
  
#line 3791 
  ql_write32((struct ql_adapter const *)qdev,12,393222U);
  
#line 3796 
  value = ql_read32((struct ql_adapter const *)qdev,224);
  
#line 3797 
  value &= 4294963199U;
  
#line 3798 
  mask = 4294901760U;
  
#line 3801 
  ql_write32((struct ql_adapter const *)qdev,224,mask);
  
#line 3802 
  ql_write32((struct ql_adapter const *)qdev,224,mask | value);
  
#line 3805 
  if ((unsigned int)(qdev->pdev)->subsystem_device == 104U || (unsigned int)(qdev->pdev)->subsystem_device == 384U) 
    
#line 3807 
    qdev->wol = 32U; else ;
  
#line 3810 
  i = 0;
  
#line 3810 
  goto ldv_56653;
  ldv_56652: 
#line 3811 
  ;
  
#line 3811 
  status = ql_start_rx_ring(qdev,& qdev->rx_ring[i]);
  
#line 3812 
  if (status != 0) {
    
#line 3813 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3813 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to start rx ring[%d].\n",i); else ;
    
#line 3815 
    __retres = status;
    
#line 3815 
    goto return_label;
  }
  else ;
  
#line 3810 
  i += 1;
  ldv_56653: 
#line 3811 
  ;
  
#line 3810 
  if (qdev->rx_ring_count > i) 
#line 3812 
                               goto ldv_56652; else 
#line 3815 
                                                    goto ldv_56654;
  ldv_56654: 
#line 3816 
  ;
  
#line 3822 
  if (qdev->rss_ring_count > 1U) {
    
#line 3823 
    status = ql_start_rss(qdev);
    
#line 3824 
    if (status != 0) {
      
#line 3825 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 3825 
                                          netdev_err((struct net_device const *)qdev->ndev,"Failed to start RSS.\n"); else ;
      
#line 3826 
      __retres = status;
      
#line 3826 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 3831 
  i = 0;
  
#line 3831 
  goto ldv_56656;
  ldv_56655: 
#line 3832 
  ;
  
#line 3832 
  status = ql_start_tx_ring(qdev,& qdev->tx_ring[i]);
  
#line 3833 
  if (status != 0) {
    
#line 3834 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3834 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to start tx ring[%d].\n",i); else ;
    
#line 3836 
    __retres = status;
    
#line 3836 
    goto return_label;
  }
  else ;
  
#line 3831 
  i += 1;
  ldv_56656: 
#line 3832 
  ;
  
#line 3831 
  if (qdev->tx_ring_count > i) 
#line 3833 
                               goto ldv_56655; else 
#line 3836 
                                                    goto ldv_56657;
  ldv_56657: 
#line 3837 
  ;
  
#line 3841 
  status = (*((qdev->nic_ops)->port_initialize))(qdev);
  
#line 3842 
  if (status != 0) {
    
#line 3843 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3843 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to start port.\n"); else ;
  }
  else ;
  
#line 3846 
  status = ql_cam_route_initialize(qdev);
  
#line 3847 
  if (status != 0) {
    
#line 3848 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3848 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to init CAM/Routing tables.\n"); else ;
    
#line 3850 
    __retres = status;
    
#line 3850 
    goto return_label;
  }
  else ;
  
#line 3854 
  i = 0;
  
#line 3854 
  goto ldv_56659;
  ldv_56658: 
#line 3855 
  ;
  
#line 3855 
  napi_enable(& qdev->rx_ring[i].napi);
  
#line 3854 
  i += 1;
  ldv_56659: 
#line 3855 
  ;
  
#line 3854 
  if (qdev->rss_ring_count > (unsigned int)i) 
#line 3856 
                                              goto ldv_56658; else 
#line 3859 
                                                                   goto ldv_56660;
  ldv_56660: 
#line 3860 
  ;
  
#line 3857 
  __retres = status;
  return_label: 
#line 3857 
                return __retres;
}


#line 3861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_adapter_reset(struct ql_adapter *qdev)
{
  int __retres;
  u32 value;
  unsigned long end_jiffies;
  int tmp;
  unsigned long tmp_0;
  int tmp_1;
  
#line 3864 
  int status = 0;
  
#line 3868 
  status = ql_clear_routing_entries(qdev);
  
#line 3869 
  if (status != 0) {
    
#line 3870 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 3870 
                                        netdev_err((struct net_device const *)qdev->ndev,"Failed to clear routing bits.\n"); else ;
    
#line 3871 
    __retres = status;
    
#line 3871 
    goto return_label;
  }
  else ;
  
#line 3877 
  tmp = constant_test_bit(14L,(unsigned long const volatile *)(& qdev->flags));
  
#line 3877 
  if (tmp == 0) {
    
#line 3879 
    ql_mb_set_mgmnt_traffic_ctl(qdev,1U);
    
#line 3882 
    ql_wait_fifo_empty(qdev);
  }
  else 
#line 3884 
       set_bit(14L,(unsigned long volatile *)(& qdev->flags));
  
#line 3886 
  ql_write32((struct ql_adapter const *)qdev,12,2147516416U);
  
#line 3888 
  tmp_0 = usecs_to_jiffies(30U);
  
#line 3888 
  end_jiffies = tmp_0 + jiffies;
  ldv_56674: 
#line 3889 
  ;
  
#line 3890 
  value = ql_read32((struct ql_adapter const *)qdev,12);
  
#line 3891 
  if ((value & 32768U) == 0U) 
#line 3892 
                              goto ldv_56667; else ;
  
#line 3893 
  cpu_relax();
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
#line 3894 
    tmp_1 = 1;
  }
  
#line 3894 
  if (tmp_1 != 0) {
    int tmp_2;
    {
      unsigned long __dummy_0;
      unsigned long volatile __dummy2_0;
      
#line 3894 
      tmp_2 = 1;
    }
    
#line 3894 
    if (tmp_2 != 0) {
      
#line 3894 
      if ((long)(jiffies - end_jiffies) < 0L) 
#line 3896 
                                              goto ldv_56674; else 
#line 3899 
                                                                   goto ldv_56667;
    }
    else 
#line 3899 
         goto ldv_56667;
  }
  else 
#line 3899 
       goto ldv_56667;
  ldv_56667: 
#line 3900 
  ;
  
#line 3896 
  if ((value & 32768U) != 0U) {
    
#line 3897 
    if ((qdev->msg_enable & 16U) != 0U) 
#line 3897 
                                        netdev_err((struct net_device const *)qdev->ndev,"ETIMEDOUT!!! errored out of resetting the chip!\n"); else ;
    
#line 3899 
    status = -110;
  }
  else ;
  
#line 3903 
  ql_mb_set_mgmnt_traffic_ctl(qdev,2U);
  
#line 3904 
  __retres = status;
  return_label: 
#line 3904 
                return __retres;
}


#line 3907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_display_dev_info(struct net_device *ndev)
{
  
#line 3909 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 3911 
  if ((qdev->msg_enable & 2U) != 0U) 
#line 3911 
                                     netdev_info((struct net_device const *)qdev->ndev,"Function #%d, Port %d, NIC Roll %d, NIC Rev = %d, ",qdev->func,qdev->port,qdev->chip_rev_id & 15U,(qdev->chip_rev_id >> 4) & 15U,(qdev->chip_rev_id >> 8) & 15U,(qdev->chip_rev_id >> 12) & 15U); else ;
  
#line 3920 
  if ((qdev->msg_enable & 2U) != 0U) 
#line 3920 
                                     netdev_info((struct net_device const *)qdev->ndev,"MAC address %pM\n",ndev->dev_addr); else ;
  
#line 3921 
  return;
}


#line 3924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_wol(struct ql_adapter *qdev)
{
  int __retres;
  
#line 3926 
  int status = 0;
  
#line 3927 
  u32 wol = 0U;
  
#line 3936 
  if ((qdev->wol & 95U) != 0U) {
    
#line 3938 
    if ((qdev->msg_enable & 16U) != 0U) 
#line 3938 
                                        netdev_err((struct net_device const *)qdev->ndev,"Unsupported WOL parameter. qdev->wol = 0x%x.\n",qdev->wol); else ;
    
#line 3941 
    __retres = -22;
    
#line 3941 
    goto return_label;
  }
  else ;
  
#line 3944 
  if ((qdev->wol & 32U) != 0U) {
    
#line 3945 
    status = ql_mb_wol_set_magic(qdev,1U);
    
#line 3946 
    if (status != 0) {
      
#line 3947 
      if ((qdev->msg_enable & 16U) != 0U) 
#line 3947 
                                          netdev_err((struct net_device const *)qdev->ndev,"Failed to set magic packet on %s.\n",(char *)(& (qdev->ndev)->name)); else ;
      
#line 3950 
      __retres = status;
      
#line 3950 
      goto return_label;
    }
    else 
      
#line 3952 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 3952 
                                         netdev_info((struct net_device const *)qdev->ndev,"Enabled magic packet successfully on %s.\n",(char *)(& (qdev->ndev)->name)); else ;
    
#line 3956 
    wol |= 2U;
  }
  else ;
  
#line 3959 
  if (qdev->wol != 0U) {
    
#line 3960 
    wol |= 65536U;
    
#line 3961 
    status = ql_mb_wol_mode(qdev,wol);
    
#line 3962 
    if ((qdev->msg_enable & 1U) != 0U) {
      char *tmp;
      
#line 3962 
      ;
      
#line 3962 
      ;
      
#line 3962 
      if (status == 0) 
#line 3962 
                       tmp = (char *)"Successfully set"; else 
#line 3962 
                                                              tmp = (char *)"Failed";
      
#line 3962 
      ;
      
#line 3962 
      netdev_err((struct net_device const *)qdev->ndev,"WOL %s (wol code 0x%x) on %s\n",tmp,wol,(char *)(& (qdev->ndev)->name));
    }
    else ;
  }
  else ;
  
#line 3968 
  __retres = status;
  return_label: 
#line 3968 
                return __retres;
}


#line 3971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_cancel_all_work_sync(struct ql_adapter *qdev)
{
  int tmp;
  
#line 3977 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& qdev->flags));
  
#line 3977 
  if (tmp != 0) 
#line 3978 
                cancel_delayed_work_sync(& qdev->asic_reset_work); else ;
  
#line 3979 
  cancel_delayed_work_sync(& qdev->mpi_reset_work);
  
#line 3980 
  cancel_delayed_work_sync(& qdev->mpi_work);
  
#line 3981 
  cancel_delayed_work_sync(& qdev->mpi_idc_work);
  
#line 3982 
  cancel_delayed_work_sync(& qdev->mpi_core_to_log);
  
#line 3983 
  cancel_delayed_work_sync(& qdev->mpi_port_cfg_work);
  
#line 3984 
  return;
}


#line 3986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_adapter_down(struct ql_adapter *qdev)
{
  int i;
  
#line 3988 
  int status = 0;
  
#line 3990 
  ql_link_off(qdev);
  
#line 3992 
  ql_cancel_all_work_sync(qdev);
  
#line 3994 
  i = 0;
  
#line 3994 
  goto ldv_56693;
  ldv_56692: 
#line 3995 
  ;
  
#line 3995 
  napi_disable(& qdev->rx_ring[i].napi);
  
#line 3994 
  i += 1;
  ldv_56693: 
#line 3995 
  ;
  
#line 3994 
  if (qdev->rss_ring_count > (unsigned int)i) 
#line 3996 
                                              goto ldv_56692; else 
#line 3999 
                                                                   goto ldv_56694;
  ldv_56694: 
#line 4000 
  ;
  
#line 3997 
  set_bit(0L,(unsigned long volatile *)(& qdev->flags));
  
#line 3999 
  ql_disable_interrupts(qdev);
  
#line 4001 
  ql_tx_ring_clean(qdev);
  
#line 4005 
  i = 0;
  
#line 4005 
  goto ldv_56696;
  ldv_56695: 
#line 4006 
  ;
  
#line 4006 
  netif_napi_del(& qdev->rx_ring[i].napi);
  
#line 4005 
  i += 1;
  ldv_56696: 
#line 4006 
  ;
  
#line 4005 
  if (qdev->rss_ring_count > (unsigned int)i) 
#line 4007 
                                              goto ldv_56695; else 
#line 4010 
                                                                   goto ldv_56697;
  ldv_56697: 
#line 4011 
  ;
  
#line 4008 
  status = ql_adapter_reset(qdev);
  
#line 4009 
  if (status != 0) {
    
#line 4010 
    if ((qdev->msg_enable & 16U) != 0U) 
#line 4010 
                                        netdev_err((struct net_device const *)qdev->ndev,"reset(func #%d) FAILED!\n",qdev->func); else ;
  }
  else ;
  
#line 4012 
  ql_free_rx_buffers(qdev);
  
#line 4014 
  return status;
}


#line 4017  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_adapter_up(struct ql_adapter *qdev)
{
  int __retres;
  u32 tmp;
  
#line 4019 
  int err = 0;
  
#line 4021 
  err = ql_adapter_initialize(qdev);
  
#line 4022 
  if (err != 0) {
    
#line 4023 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 4023 
                                        netdev_info((struct net_device const *)qdev->ndev,"Unable to initialize adapter.\n"); else ;
    
#line 4024 
    goto err_init;
  }
  else ;
  
#line 4026 
  set_bit(0L,(unsigned long volatile *)(& qdev->flags));
  
#line 4027 
  ql_alloc_rx_buffers(qdev);
  
#line 4031 
  tmp = ql_read32((struct ql_adapter const *)qdev,48);
  
#line 4031 
  ;
  
#line 4031 
  if ((tmp & qdev->port_init) != 0U) {
    u32 tmp_0;
    
#line 4031 
    tmp_0 = ql_read32((struct ql_adapter const *)qdev,48);
    
#line 4031 
    ;
    
#line 4031 
    if ((tmp_0 & qdev->port_link_up) != 0U) 
#line 4033 
                                            ql_link_on(qdev); else ;
  }
  else ;
  
#line 4035 
  set_bit(6L,(unsigned long volatile *)(& qdev->flags));
  
#line 4036 
  set_bit(5L,(unsigned long volatile *)(& qdev->flags));
  
#line 4037 
  qlge_set_multicast_list(qdev->ndev);
  
#line 4040 
  qlge_restore_vlan(qdev);
  
#line 4042 
  ql_enable_interrupts(qdev);
  
#line 4043 
  ql_enable_all_completion_interrupts(qdev);
  
#line 4044 
  netif_tx_start_all_queues(qdev->ndev);
  
#line 4046 
  __retres = 0;
  
#line 4046 
  goto return_label;
  err_init: 
#line 4047 
  ;
  
#line 4048 
  ql_adapter_reset(qdev);
  
#line 4049 
  __retres = err;
  return_label: 
#line 4049 
                return __retres;
}


#line 4052  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_release_adapter_resources(struct ql_adapter *qdev)
{
  
#line 4054 
  ql_free_mem_resources(qdev);
  
#line 4055 
  ql_free_irq(qdev);
  
#line 4056 
  return;
}


#line 4058  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_get_adapter_resources(struct ql_adapter *qdev)
{
  int __retres;
  int tmp;
  
#line 4060 
  int status = 0;
  
#line 4062 
  tmp = ql_alloc_mem_resources(qdev);
  
#line 4062 
  if (tmp != 0) {
    
#line 4063 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 4063 
                                        netdev_err((struct net_device const *)qdev->ndev,"Unable to  allocate memory.\n"); else ;
    
#line 4064 
    __retres = -12;
    
#line 4064 
    goto return_label;
  }
  else ;
  
#line 4066 
  status = ql_request_irq(qdev);
  
#line 4067 
  __retres = status;
  return_label: 
#line 4067 
                return __retres;
}


#line 4070  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_close(struct net_device *ndev)
{
  int __retres;
  int tmp_0;
  int tmp_1;
  
#line 4072 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4078 
  tmp_0 = constant_test_bit(12L,(unsigned long const volatile *)(& qdev->flags));
  
#line 4078 
  if (tmp_0 != 0) {
    
#line 4079 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 4079 
                                       netdev_err((struct net_device const *)qdev->ndev,"EEH fatal did unload.\n"); else ;
    
#line 4080 
    set_bit(12L,(unsigned long volatile *)(& qdev->flags));
    
#line 4081 
    __retres = 0;
    
#line 4081 
    goto return_label;
  }
  else ;
  
#line 4088 
  goto ldv_56715;
  ldv_56714: 
#line 4089 
  ;
  
#line 4089 
  msleep(1U);
  ldv_56715: 
#line 4090 
  ;
  
#line 4088 
  tmp_1 = constant_test_bit(0L,(unsigned long const volatile *)(& qdev->flags));
  
#line 4088 
  if (tmp_1 == 0) 
#line 4090 
                  goto ldv_56714; else 
#line 4093 
                                       goto ldv_56716;
  ldv_56716: 
#line 4094 
  ;
  
#line 4090 
  ql_adapter_down(qdev);
  
#line 4091 
  ql_release_adapter_resources(qdev);
  
#line 4092 
  __retres = 0;
  return_label: 
#line 4092 
                return __retres;
}


#line 4095  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_configure_rings(struct ql_adapter *qdev)
{
  int __retres;
  int i;
  struct rx_ring *rx_ring;
  struct tx_ring *tx_ring;
  int tmp_1;
  int tmp_2;
  int tmp_74;
  {
    unsigned int tmp;
    int tmp_0;
    
#line 4100 
    int _min1 = 8;
    
#line 4100 
    tmp = cpumask_weight(cpu_online_mask);
    
#line 4100 
    int _min2 = (int)tmp;
    
#line 4100 
    if (_min1 < _min2) 
#line 4100 
                       tmp_0 = _min1; else 
#line 4100 
                                           tmp_0 = _min2;
    
#line 4100 
    tmp_1 = tmp_0;
  }
  
#line 4100 
  int cpu_cnt = tmp_1;
  
#line 4102 
  if ((qdev->ndev)->mtu > 1500U) 
#line 4102 
                                 tmp_2 = 8192; else 
#line 4102 
                                                    tmp_2 = 2048;
  
#line 4101 
  unsigned int lbq_buf_len = (unsigned int)tmp_2;
  
#line 4104 
  if (0 != 0) {
    int tmp_72;
    
#line 4104 
    if (lbq_buf_len != 0U) {
      int tmp_71;
      
#line 4104 
      if (lbq_buf_len > 4095U) {
        int tmp_70;
        
#line 4104 
        if (0 != 0) {
          int tmp_68;
          
#line 4104 
          if (lbq_buf_len == 1U) {
            int tmp_3;
            
#line 4104 
            tmp_3 = ____ilog2_NaN();
            
#line 4104 
            tmp_68 = tmp_3 + -11;
          }
          else {
            int tmp_67;
            
#line 4104 
            if (((unsigned long long)(lbq_buf_len + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              int tmp_66;
              
#line 4104 
              if (((unsigned long long)(lbq_buf_len + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                int tmp_65;
                
#line 4104 
                if (((unsigned long long)(lbq_buf_len + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  int tmp_64;
                  
#line 4104 
                  if (((unsigned long long)(lbq_buf_len + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    int tmp_63;
                    
#line 4104 
                    if (((unsigned long long)(lbq_buf_len + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      int tmp_62;
                      
#line 4104 
                      if (((unsigned long long)(lbq_buf_len + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        int tmp_61;
                        
#line 4104 
                        if (((unsigned long long)(lbq_buf_len + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          int tmp_60;
                          
#line 4104 
                          if (((unsigned long long)(lbq_buf_len + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            int tmp_59;
                            
#line 4104 
                            if (((unsigned long long)(lbq_buf_len + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              int tmp_58;
                              
#line 4104 
                              if (((unsigned long long)(lbq_buf_len + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                int tmp_57;
                                
#line 4104 
                                if (((unsigned long long)(lbq_buf_len + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  int tmp_56;
                                  
#line 4104 
                                  if (((unsigned long long)(lbq_buf_len + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    int tmp_55;
                                    
#line 4104 
                                    if (((unsigned long long)(lbq_buf_len + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      int tmp_54;
                                      
#line 4104 
                                      if (((unsigned long long)(lbq_buf_len + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        int tmp_53;
                                        
#line 4104 
                                        if (((unsigned long long)(lbq_buf_len + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          int tmp_52;
                                          
#line 4104 
                                          if (((unsigned long long)(lbq_buf_len + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            int tmp_51;
                                            
#line 4104 
                                            if (((unsigned long long)(lbq_buf_len + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              int tmp_50;
                                              
#line 4104 
                                              if (((unsigned long long)(lbq_buf_len + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                int tmp_49;
                                                
#line 4104 
                                                if (((unsigned long long)(lbq_buf_len + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  int tmp_48;
                                                  
#line 4104 
                                                  if (((unsigned long long)(lbq_buf_len + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    int tmp_47;
                                                    
#line 4104 
                                                    if (((unsigned long long)(lbq_buf_len + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      int tmp_46;
                                                      
#line 4104 
                                                      if (((unsigned long long)(lbq_buf_len + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        int tmp_45;
                                                        
#line 4104 
                                                        if (((unsigned long long)(lbq_buf_len + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          int tmp_44;
                                                          
#line 4104 
                                                          if (((unsigned long long)(lbq_buf_len + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            int tmp_43;
                                                            
#line 4104 
                                                            if (((unsigned long long)(lbq_buf_len + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              int tmp_42;
                                                              
#line 4104 
                                                              if (((unsigned long long)(lbq_buf_len + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                int tmp_41;
                                                                
#line 4104 
                                                                if (((unsigned long long)(lbq_buf_len + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  int tmp_40;
                                                                  
#line 4104 
                                                                  if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    int tmp_39;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    int tmp_38;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    int tmp_37;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    int tmp_36;
                                                                    
#line 4104 
                                                                    if (
                                                                    lbq_buf_len + 4294967295U >= (unsigned int)0) {
                                                                    int tmp_35;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    int tmp_34;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    int tmp_33;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    int tmp_32;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    int tmp_31;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    int tmp_30;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    int tmp_29;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    int tmp_28;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    int tmp_27;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    int tmp_26;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    int tmp_25;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    int tmp_24;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    int tmp_23;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    int tmp_22;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    int tmp_21;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    int tmp_20;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    int tmp_19;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    int tmp_18;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    int tmp_17;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    int tmp_16;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    int tmp_15;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    int tmp_14;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 512ULL) == 0ULL) {
                                                                    int tmp_13;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 256ULL) == 0ULL) {
                                                                    int tmp_12;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 128ULL) == 0ULL) {
                                                                    int tmp_11;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 64ULL) == 0ULL) {
                                                                    int tmp_10;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 32ULL) == 0ULL) {
                                                                    int tmp_9;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 16ULL) == 0ULL) {
                                                                    int tmp_8;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 8ULL) == 0ULL) {
                                                                    int tmp_7;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 4ULL) == 0ULL) {
                                                                    int tmp_6;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 2ULL) == 0ULL) {
                                                                    int tmp_5;
                                                                    
#line 4104 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 1ULL) == 0ULL) {
                                                                    int tmp_4;
                                                                    
#line 4104 
                                                                    tmp_4 = ____ilog2_NaN();
                                                                    
#line 4104 
                                                                    tmp_5 = tmp_4 + -11;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_5 = -11;
                                                                    
#line 4104 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_6 = -10;
                                                                    
#line 4104 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_7 = -9;
                                                                    
#line 4104 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_8 = -8;
                                                                    
#line 4104 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_9 = -7;
                                                                    
#line 4104 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_10 = -6;
                                                                    
#line 4104 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_11 = -5;
                                                                    
#line 4104 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_12 = -4;
                                                                    
#line 4104 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_13 = -3;
                                                                    
#line 4104 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_14 = -2;
                                                                    
#line 4104 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_15 = -1;
                                                                    
#line 4104 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_16 = 0;
                                                                    
#line 4104 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_17 = 1;
                                                                    
#line 4104 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_18 = 2;
                                                                    
#line 4104 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_19 = 3;
                                                                    
#line 4104 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_20 = 4;
                                                                    
#line 4104 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_21 = 5;
                                                                    
#line 4104 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_22 = 6;
                                                                    
#line 4104 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_23 = 7;
                                                                    
#line 4104 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_24 = 8;
                                                                    
#line 4104 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_25 = 9;
                                                                    
#line 4104 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_26 = 10;
                                                                    
#line 4104 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_27 = 11;
                                                                    
#line 4104 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_28 = 12;
                                                                    
#line 4104 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_29 = 13;
                                                                    
#line 4104 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_30 = 14;
                                                                    
#line 4104 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_31 = 15;
                                                                    
#line 4104 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_32 = 16;
                                                                    
#line 4104 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_33 = 17;
                                                                    
#line 4104 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_34 = 18;
                                                                    
#line 4104 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_35 = 19;
                                                                    
#line 4104 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_36 = 20;
                                                                    
#line 4104 
                                                                    tmp_37 = tmp_36;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_37 = 21;
                                                                    
#line 4104 
                                                                    tmp_38 = tmp_37;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_38 = 22;
                                                                    
#line 4104 
                                                                    tmp_39 = tmp_38;
                                                                    }
                                                                    else 
                                                                    
#line 4104 
                                                                    tmp_39 = 23;
                                                                    
#line 4104 
                                                                    tmp_40 = tmp_39;
                                                                  }
                                                                  else 
                                                                    
#line 4104 
                                                                    tmp_40 = 24;
                                                                  
#line 4104 
                                                                  tmp_41 = tmp_40;
                                                                }
                                                                else 
                                                                  
#line 4104 
                                                                  tmp_41 = 25;
                                                                
#line 4104 
                                                                tmp_42 = tmp_41;
                                                              }
                                                              else 
#line 4104 
                                                                   tmp_42 = 26;
                                                              
#line 4104 
                                                              tmp_43 = tmp_42;
                                                            }
                                                            else 
#line 4104 
                                                                 tmp_43 = 27;
                                                            
#line 4104 
                                                            tmp_44 = tmp_43;
                                                          }
                                                          else 
#line 4104 
                                                               tmp_44 = 28;
                                                          
#line 4104 
                                                          tmp_45 = tmp_44;
                                                        }
                                                        else 
#line 4104 
                                                             tmp_45 = 29;
                                                        
#line 4104 
                                                        tmp_46 = tmp_45;
                                                      }
                                                      else 
#line 4104 
                                                           tmp_46 = 30;
                                                      
#line 4104 
                                                      tmp_47 = tmp_46;
                                                    }
                                                    else 
#line 4104 
                                                         tmp_47 = 31;
                                                    
#line 4104 
                                                    tmp_48 = tmp_47;
                                                  }
                                                  else 
#line 4104 
                                                       tmp_48 = 32;
                                                  
#line 4104 
                                                  tmp_49 = tmp_48;
                                                }
                                                else 
#line 4104 
                                                     tmp_49 = 33;
                                                
#line 4104 
                                                tmp_50 = tmp_49;
                                              }
                                              else 
#line 4104 
                                                   tmp_50 = 34;
                                              
#line 4104 
                                              tmp_51 = tmp_50;
                                            }
                                            else 
#line 4104 
                                                 tmp_51 = 35;
                                            
#line 4104 
                                            tmp_52 = tmp_51;
                                          }
                                          else 
#line 4104 
                                               tmp_52 = 36;
                                          
#line 4104 
                                          tmp_53 = tmp_52;
                                        }
                                        else 
#line 4104 
                                             tmp_53 = 37;
                                        
#line 4104 
                                        tmp_54 = tmp_53;
                                      }
                                      else 
#line 4104 
                                           tmp_54 = 38;
                                      
#line 4104 
                                      tmp_55 = tmp_54;
                                    }
                                    else 
#line 4104 
                                         tmp_55 = 39;
                                    
#line 4104 
                                    tmp_56 = tmp_55;
                                  }
                                  else 
#line 4104 
                                       tmp_56 = 40;
                                  
#line 4104 
                                  tmp_57 = tmp_56;
                                }
                                else 
#line 4104 
                                     tmp_57 = 41;
                                
#line 4104 
                                tmp_58 = tmp_57;
                              }
                              else 
#line 4104 
                                   tmp_58 = 42;
                              
#line 4104 
                              tmp_59 = tmp_58;
                            }
                            else 
#line 4104 
                                 tmp_59 = 43;
                            
#line 4104 
                            tmp_60 = tmp_59;
                          }
                          else 
#line 4104 
                               tmp_60 = 44;
                          
#line 4104 
                          tmp_61 = tmp_60;
                        }
                        else 
#line 4104 
                             tmp_61 = 45;
                        
#line 4104 
                        tmp_62 = tmp_61;
                      }
                      else 
#line 4104 
                           tmp_62 = 46;
                      
#line 4104 
                      tmp_63 = tmp_62;
                    }
                    else 
#line 4104 
                         tmp_63 = 47;
                    
#line 4104 
                    tmp_64 = tmp_63;
                  }
                  else 
#line 4104 
                       tmp_64 = 48;
                  
#line 4104 
                  tmp_65 = tmp_64;
                }
                else 
#line 4104 
                     tmp_65 = 49;
                
#line 4104 
                tmp_66 = tmp_65;
              }
              else 
#line 4104 
                   tmp_66 = 50;
              
#line 4104 
              tmp_67 = tmp_66;
            }
            else 
#line 4104 
                 tmp_67 = 51;
            
#line 4104 
            tmp_68 = tmp_67;
          }
          
#line 4104 
          tmp_70 = tmp_68;
        }
        else {
          int tmp_69;
          
#line 4104 
          tmp_69 = __ilog2_u32(lbq_buf_len + 4294967295U);
          
#line 4104 
          tmp_70 = tmp_69 + -11;
        }
        
#line 4104 
        tmp_71 = tmp_70;
      }
      else 
#line 4104 
           tmp_71 = 0;
      
#line 4104 
      tmp_72 = tmp_71;
    }
    else 
#line 4104 
         tmp_72 = 52;
    
#line 4104 
    tmp_74 = tmp_72;
  }
  else 
#line 4104 
       tmp_74 = __get_order((unsigned long)lbq_buf_len);
  
#line 4104 
  qdev->lbq_buf_order = (unsigned int)tmp_74;
  
#line 4113 
  qdev->intr_count = (unsigned int)cpu_cnt;
  
#line 4114 
  ql_enable_msix(qdev);
  
#line 4116 
  qdev->rss_ring_count = qdev->intr_count;
  
#line 4117 
  qdev->tx_ring_count = cpu_cnt;
  
#line 4118 
  qdev->rx_ring_count = (int)((unsigned int)qdev->tx_ring_count + qdev->rss_ring_count);
  
#line 4120 
  i = 0;
  
#line 4120 
  goto ldv_56729;
  ldv_56728: 
#line 4121 
  ;
  
#line 4121 
  tx_ring = & qdev->tx_ring[i];
  
#line 4122 
  memset((void *)tx_ring,0,432UL);
  
#line 4123 
  tx_ring->qdev = qdev;
  
#line 4124 
  tx_ring->wq_id = (unsigned char)i;
  
#line 4125 
  tx_ring->wq_len = (unsigned int)qdev->tx_ring_size;
  
#line 4126 
  tx_ring->wq_size = tx_ring->wq_len * 128U;
  
#line 4133 
  tx_ring->cq_id = (unsigned short)((int)((unsigned short)qdev->rss_ring_count) + (int)((unsigned short)i));
  
#line 4120 
  i += 1;
  ldv_56729: 
#line 4121 
  ;
  
#line 4120 
  if (qdev->tx_ring_count > i) 
#line 4122 
                               goto ldv_56728; else 
#line 4125 
                                                    goto ldv_56730;
  ldv_56730: 
#line 4126 
  ;
  
#line 4136 
  i = 0;
  
#line 4136 
  goto ldv_56732;
  ldv_56731: 
#line 4137 
  ;
  
#line 4137 
  rx_ring = & qdev->rx_ring[i];
  
#line 4138 
  memset((void *)rx_ring,0,704UL);
  
#line 4139 
  rx_ring->qdev = qdev;
  
#line 4140 
  rx_ring->cq_id = (unsigned short)i;
  
#line 4141 
  rx_ring->cpu = (unsigned int)(i % cpu_cnt);
  
#line 4142 
  if (qdev->rss_ring_count > (unsigned int)i) {
    
#line 4146 
    rx_ring->cq_len = (unsigned int)qdev->rx_ring_size;
    
#line 4147 
    rx_ring->cq_size = rx_ring->cq_len * 64U;
    
#line 4149 
    rx_ring->lbq_len = 512U;
    
#line 4150 
    rx_ring->lbq_size = rx_ring->lbq_len * 8U;
    
#line 4152 
    rx_ring->lbq_buf_size = (unsigned int)((unsigned short)lbq_buf_len);
    
#line 4153 
    rx_ring->sbq_len = 512U;
    
#line 4154 
    rx_ring->sbq_size = rx_ring->sbq_len * 8U;
    
#line 4156 
    rx_ring->sbq_buf_size = 256U;
    
#line 4157 
    rx_ring->type = 4U;
  }
  else {
    
#line 4163 
    rx_ring->cq_len = (unsigned int)qdev->tx_ring_size;
    
#line 4164 
    rx_ring->cq_size = rx_ring->cq_len * 64U;
    
#line 4166 
    rx_ring->lbq_len = 0U;
    
#line 4167 
    rx_ring->lbq_size = 0U;
    
#line 4168 
    rx_ring->lbq_buf_size = 0U;
    
#line 4169 
    rx_ring->sbq_len = 0U;
    
#line 4170 
    rx_ring->sbq_size = 0U;
    
#line 4171 
    rx_ring->sbq_buf_size = 0U;
    
#line 4172 
    rx_ring->type = 3U;
  }
  
#line 4136 
  i += 1;
  ldv_56732: 
#line 4137 
  ;
  
#line 4136 
  if (qdev->rx_ring_count > i) 
#line 4138 
                               goto ldv_56731; else 
#line 4141 
                                                    goto ldv_56733;
  ldv_56733: 
#line 4142 
  ;
  
#line 4175 
  __retres = 0;
  
#line 4175 
  return __retres;
}


#line 4178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_open(struct net_device *ndev)
{
  int __retres;
  
#line 4180 
  int err = 0;
  
#line 4181 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4183 
  err = ql_adapter_reset(qdev);
  
#line 4184 
  if (err != 0) {
    
#line 4185 
    __retres = err;
    
#line 4185 
    goto return_label;
  }
  else ;
  
#line 4187 
  err = ql_configure_rings(qdev);
  
#line 4188 
  if (err != 0) {
    
#line 4189 
    __retres = err;
    
#line 4189 
    goto return_label;
  }
  else ;
  
#line 4191 
  err = ql_get_adapter_resources(qdev);
  
#line 4192 
  if (err != 0) 
#line 4193 
                goto error_up; else ;
  
#line 4195 
  err = ql_adapter_up(qdev);
  
#line 4196 
  if (err != 0) 
#line 4197 
                goto error_up; else ;
  
#line 4199 
  __retres = err;
  
#line 4199 
  goto return_label;
  error_up: 
#line 4201 
  ;
  
#line 4202 
  ql_release_adapter_resources(qdev);
  
#line 4203 
  __retres = err;
  return_label: 
#line 4203 
                return __retres;
}


#line 4206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_change_rx_buffers(struct ql_adapter *qdev)
{
  int __retres;
  struct rx_ring *rx_ring;
  int i;
  int status;
  u32 lbq_buf_len;
  int tmp_1;
  int tmp_2;
  int tmp_74;
  
#line 4213 
  tmp_1 = constant_test_bit(0L,(unsigned long const volatile *)(& qdev->flags));
  
#line 4213 
  if (tmp_1 == 0) {
    int tmp;
    
#line 4214 
    int i_0 = 3;
    
#line 4215 
    goto ldv_56749;
    ldv_56748: 
#line 4216 
    ;
    
#line 4216 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 4216 
                                        netdev_err((struct net_device const *)qdev->ndev,"Waiting for adapter UP...\n"); else ;
    
#line 4218 
    ssleep(1U);
    ldv_56749: 
#line 4219 
    ;
    
#line 4215 
    tmp = i_0;
    
#line 4215 
    i_0 -= 1;
    
#line 4215 
    ;
    
#line 4215 
    if (tmp != 0) {
      int tmp_0;
      
#line 4215 
      tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& qdev->flags));
      
#line 4215 
      if (tmp_0 == 0) 
#line 4217 
                      goto ldv_56748; else 
#line 4220 
                                           goto ldv_56750;
    }
    else 
#line 4220 
         goto ldv_56750;
    ldv_56750: 
#line 4221 
    ;
    
#line 4221 
    if (i_0 == 0) {
      
#line 4222 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 4222 
                                          netdev_err((struct net_device const *)qdev->ndev,"Timed out waiting for adapter UP\n"); else ;
      
#line 4224 
      __retres = -110;
      
#line 4224 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4228 
  status = ql_adapter_down(qdev);
  
#line 4229 
  if (status != 0) 
#line 4230 
                   goto error; else ;
  
#line 4234 
  if ((qdev->ndev)->mtu > 1500U) 
#line 4234 
                                 tmp_2 = 8192; else 
#line 4234 
                                                    tmp_2 = 2048;
  
#line 4233 
  lbq_buf_len = (unsigned int)tmp_2;
  
#line 4235 
  if (0 != 0) {
    int tmp_72;
    
#line 4235 
    if (lbq_buf_len != 0U) {
      int tmp_71;
      
#line 4235 
      if (lbq_buf_len > 4095U) {
        int tmp_70;
        
#line 4235 
        if (0 != 0) {
          int tmp_68;
          
#line 4235 
          if (lbq_buf_len == 1U) {
            int tmp_3;
            
#line 4235 
            tmp_3 = ____ilog2_NaN();
            
#line 4235 
            tmp_68 = tmp_3 + -11;
          }
          else {
            int tmp_67;
            
#line 4235 
            if (((unsigned long long)(lbq_buf_len + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              int tmp_66;
              
#line 4235 
              if (((unsigned long long)(lbq_buf_len + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                int tmp_65;
                
#line 4235 
                if (((unsigned long long)(lbq_buf_len + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  int tmp_64;
                  
#line 4235 
                  if (((unsigned long long)(lbq_buf_len + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    int tmp_63;
                    
#line 4235 
                    if (((unsigned long long)(lbq_buf_len + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      int tmp_62;
                      
#line 4235 
                      if (((unsigned long long)(lbq_buf_len + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        int tmp_61;
                        
#line 4235 
                        if (((unsigned long long)(lbq_buf_len + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          int tmp_60;
                          
#line 4235 
                          if (((unsigned long long)(lbq_buf_len + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            int tmp_59;
                            
#line 4235 
                            if (((unsigned long long)(lbq_buf_len + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              int tmp_58;
                              
#line 4235 
                              if (((unsigned long long)(lbq_buf_len + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                int tmp_57;
                                
#line 4235 
                                if (((unsigned long long)(lbq_buf_len + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  int tmp_56;
                                  
#line 4235 
                                  if (((unsigned long long)(lbq_buf_len + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    int tmp_55;
                                    
#line 4235 
                                    if (((unsigned long long)(lbq_buf_len + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      int tmp_54;
                                      
#line 4235 
                                      if (((unsigned long long)(lbq_buf_len + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        int tmp_53;
                                        
#line 4235 
                                        if (((unsigned long long)(lbq_buf_len + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          int tmp_52;
                                          
#line 4235 
                                          if (((unsigned long long)(lbq_buf_len + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            int tmp_51;
                                            
#line 4235 
                                            if (((unsigned long long)(lbq_buf_len + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              int tmp_50;
                                              
#line 4235 
                                              if (((unsigned long long)(lbq_buf_len + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                int tmp_49;
                                                
#line 4235 
                                                if (((unsigned long long)(lbq_buf_len + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  int tmp_48;
                                                  
#line 4235 
                                                  if (((unsigned long long)(lbq_buf_len + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    int tmp_47;
                                                    
#line 4235 
                                                    if (((unsigned long long)(lbq_buf_len + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      int tmp_46;
                                                      
#line 4235 
                                                      if (((unsigned long long)(lbq_buf_len + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        int tmp_45;
                                                        
#line 4235 
                                                        if (((unsigned long long)(lbq_buf_len + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          int tmp_44;
                                                          
#line 4235 
                                                          if (((unsigned long long)(lbq_buf_len + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            int tmp_43;
                                                            
#line 4235 
                                                            if (((unsigned long long)(lbq_buf_len + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              int tmp_42;
                                                              
#line 4235 
                                                              if (((unsigned long long)(lbq_buf_len + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                int tmp_41;
                                                                
#line 4235 
                                                                if (((unsigned long long)(lbq_buf_len + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  int tmp_40;
                                                                  
#line 4235 
                                                                  if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    int tmp_39;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    int tmp_38;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    int tmp_37;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    int tmp_36;
                                                                    
#line 4235 
                                                                    if (
                                                                    lbq_buf_len + 4294967295U >= (u32)0) {
                                                                    int tmp_35;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    int tmp_34;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    int tmp_33;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    int tmp_32;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    int tmp_31;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    int tmp_30;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    int tmp_29;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    int tmp_28;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    int tmp_27;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    int tmp_26;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    int tmp_25;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    int tmp_24;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    int tmp_23;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    int tmp_22;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    int tmp_21;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    int tmp_20;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    int tmp_19;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    int tmp_18;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    int tmp_17;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    int tmp_16;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    int tmp_15;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    int tmp_14;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 512ULL) == 0ULL) {
                                                                    int tmp_13;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 256ULL) == 0ULL) {
                                                                    int tmp_12;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 128ULL) == 0ULL) {
                                                                    int tmp_11;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 64ULL) == 0ULL) {
                                                                    int tmp_10;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 32ULL) == 0ULL) {
                                                                    int tmp_9;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 16ULL) == 0ULL) {
                                                                    int tmp_8;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 8ULL) == 0ULL) {
                                                                    int tmp_7;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 4ULL) == 0ULL) {
                                                                    int tmp_6;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 2ULL) == 0ULL) {
                                                                    int tmp_5;
                                                                    
#line 4235 
                                                                    if (
                                                                    ((unsigned long long)(lbq_buf_len + 4294967295U) & 1ULL) == 0ULL) {
                                                                    int tmp_4;
                                                                    
#line 4235 
                                                                    tmp_4 = ____ilog2_NaN();
                                                                    
#line 4235 
                                                                    tmp_5 = tmp_4 + -11;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_5 = -11;
                                                                    
#line 4235 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_6 = -10;
                                                                    
#line 4235 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_7 = -9;
                                                                    
#line 4235 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_8 = -8;
                                                                    
#line 4235 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_9 = -7;
                                                                    
#line 4235 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_10 = -6;
                                                                    
#line 4235 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_11 = -5;
                                                                    
#line 4235 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_12 = -4;
                                                                    
#line 4235 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_13 = -3;
                                                                    
#line 4235 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_14 = -2;
                                                                    
#line 4235 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_15 = -1;
                                                                    
#line 4235 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_16 = 0;
                                                                    
#line 4235 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_17 = 1;
                                                                    
#line 4235 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_18 = 2;
                                                                    
#line 4235 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_19 = 3;
                                                                    
#line 4235 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_20 = 4;
                                                                    
#line 4235 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_21 = 5;
                                                                    
#line 4235 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_22 = 6;
                                                                    
#line 4235 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_23 = 7;
                                                                    
#line 4235 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_24 = 8;
                                                                    
#line 4235 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_25 = 9;
                                                                    
#line 4235 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_26 = 10;
                                                                    
#line 4235 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_27 = 11;
                                                                    
#line 4235 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_28 = 12;
                                                                    
#line 4235 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_29 = 13;
                                                                    
#line 4235 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_30 = 14;
                                                                    
#line 4235 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_31 = 15;
                                                                    
#line 4235 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_32 = 16;
                                                                    
#line 4235 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_33 = 17;
                                                                    
#line 4235 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_34 = 18;
                                                                    
#line 4235 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_35 = 19;
                                                                    
#line 4235 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_36 = 20;
                                                                    
#line 4235 
                                                                    tmp_37 = tmp_36;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_37 = 21;
                                                                    
#line 4235 
                                                                    tmp_38 = tmp_37;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_38 = 22;
                                                                    
#line 4235 
                                                                    tmp_39 = tmp_38;
                                                                    }
                                                                    else 
                                                                    
#line 4235 
                                                                    tmp_39 = 23;
                                                                    
#line 4235 
                                                                    tmp_40 = tmp_39;
                                                                  }
                                                                  else 
                                                                    
#line 4235 
                                                                    tmp_40 = 24;
                                                                  
#line 4235 
                                                                  tmp_41 = tmp_40;
                                                                }
                                                                else 
                                                                  
#line 4235 
                                                                  tmp_41 = 25;
                                                                
#line 4235 
                                                                tmp_42 = tmp_41;
                                                              }
                                                              else 
#line 4235 
                                                                   tmp_42 = 26;
                                                              
#line 4235 
                                                              tmp_43 = tmp_42;
                                                            }
                                                            else 
#line 4235 
                                                                 tmp_43 = 27;
                                                            
#line 4235 
                                                            tmp_44 = tmp_43;
                                                          }
                                                          else 
#line 4235 
                                                               tmp_44 = 28;
                                                          
#line 4235 
                                                          tmp_45 = tmp_44;
                                                        }
                                                        else 
#line 4235 
                                                             tmp_45 = 29;
                                                        
#line 4235 
                                                        tmp_46 = tmp_45;
                                                      }
                                                      else 
#line 4235 
                                                           tmp_46 = 30;
                                                      
#line 4235 
                                                      tmp_47 = tmp_46;
                                                    }
                                                    else 
#line 4235 
                                                         tmp_47 = 31;
                                                    
#line 4235 
                                                    tmp_48 = tmp_47;
                                                  }
                                                  else 
#line 4235 
                                                       tmp_48 = 32;
                                                  
#line 4235 
                                                  tmp_49 = tmp_48;
                                                }
                                                else 
#line 4235 
                                                     tmp_49 = 33;
                                                
#line 4235 
                                                tmp_50 = tmp_49;
                                              }
                                              else 
#line 4235 
                                                   tmp_50 = 34;
                                              
#line 4235 
                                              tmp_51 = tmp_50;
                                            }
                                            else 
#line 4235 
                                                 tmp_51 = 35;
                                            
#line 4235 
                                            tmp_52 = tmp_51;
                                          }
                                          else 
#line 4235 
                                               tmp_52 = 36;
                                          
#line 4235 
                                          tmp_53 = tmp_52;
                                        }
                                        else 
#line 4235 
                                             tmp_53 = 37;
                                        
#line 4235 
                                        tmp_54 = tmp_53;
                                      }
                                      else 
#line 4235 
                                           tmp_54 = 38;
                                      
#line 4235 
                                      tmp_55 = tmp_54;
                                    }
                                    else 
#line 4235 
                                         tmp_55 = 39;
                                    
#line 4235 
                                    tmp_56 = tmp_55;
                                  }
                                  else 
#line 4235 
                                       tmp_56 = 40;
                                  
#line 4235 
                                  tmp_57 = tmp_56;
                                }
                                else 
#line 4235 
                                     tmp_57 = 41;
                                
#line 4235 
                                tmp_58 = tmp_57;
                              }
                              else 
#line 4235 
                                   tmp_58 = 42;
                              
#line 4235 
                              tmp_59 = tmp_58;
                            }
                            else 
#line 4235 
                                 tmp_59 = 43;
                            
#line 4235 
                            tmp_60 = tmp_59;
                          }
                          else 
#line 4235 
                               tmp_60 = 44;
                          
#line 4235 
                          tmp_61 = tmp_60;
                        }
                        else 
#line 4235 
                             tmp_61 = 45;
                        
#line 4235 
                        tmp_62 = tmp_61;
                      }
                      else 
#line 4235 
                           tmp_62 = 46;
                      
#line 4235 
                      tmp_63 = tmp_62;
                    }
                    else 
#line 4235 
                         tmp_63 = 47;
                    
#line 4235 
                    tmp_64 = tmp_63;
                  }
                  else 
#line 4235 
                       tmp_64 = 48;
                  
#line 4235 
                  tmp_65 = tmp_64;
                }
                else 
#line 4235 
                     tmp_65 = 49;
                
#line 4235 
                tmp_66 = tmp_65;
              }
              else 
#line 4235 
                   tmp_66 = 50;
              
#line 4235 
              tmp_67 = tmp_66;
            }
            else 
#line 4235 
                 tmp_67 = 51;
            
#line 4235 
            tmp_68 = tmp_67;
          }
          
#line 4235 
          tmp_70 = tmp_68;
        }
        else {
          int tmp_69;
          
#line 4235 
          tmp_69 = __ilog2_u32(lbq_buf_len + 4294967295U);
          
#line 4235 
          tmp_70 = tmp_69 + -11;
        }
        
#line 4235 
        tmp_71 = tmp_70;
      }
      else 
#line 4235 
           tmp_71 = 0;
      
#line 4235 
      tmp_72 = tmp_71;
    }
    else 
#line 4235 
         tmp_72 = 52;
    
#line 4235 
    tmp_74 = tmp_72;
  }
  else 
#line 4235 
       tmp_74 = __get_order((unsigned long)lbq_buf_len);
  
#line 4235 
  qdev->lbq_buf_order = (unsigned int)tmp_74;
  
#line 4237 
  i = 0;
  
#line 4237 
  goto ldv_56753;
  ldv_56752: 
#line 4238 
  ;
  
#line 4238 
  rx_ring = & qdev->rx_ring[i];
  
#line 4240 
  rx_ring->lbq_buf_size = lbq_buf_len;
  
#line 4237 
  i += 1;
  ldv_56753: 
#line 4238 
  ;
  
#line 4237 
  if (qdev->rss_ring_count > (unsigned int)i) 
#line 4239 
                                              goto ldv_56752; else 
#line 4242 
                                                                   goto ldv_56754;
  ldv_56754: 
#line 4243 
  ;
  
#line 4243 
  status = ql_adapter_up(qdev);
  
#line 4244 
  if (status != 0) 
#line 4245 
                   goto error; else ;
  
#line 4247 
  __retres = status;
  
#line 4247 
  goto return_label;
  error: 
#line 4248 
  ;
  
#line 4249 
  if ((qdev->msg_enable & 32U) != 0U) 
#line 4249 
                                      netdev_alert((struct net_device const *)qdev->ndev,"Driver up/down cycle failed, closing device.\n"); else ;
  
#line 4251 
  set_bit(0L,(unsigned long volatile *)(& qdev->flags));
  
#line 4252 
  dev_close(qdev->ndev);
  
#line 4253 
  __retres = status;
  return_label: 
#line 4253 
                return __retres;
}


#line 4256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_change_mtu(struct net_device *ndev, int new_mtu)
{
  int __retres;
  int status;
  int tmp_1;
  bool tmp_0;
  
#line 4258 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4261 
  if (ndev->mtu == 1500U && new_mtu == 9000) {
    
#line 4262 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 4262 
                                        netdev_err((struct net_device const *)qdev->ndev,"Changing to jumbo MTU.\n"); else ;
  }
  else 
    
#line 4263 
    if (ndev->mtu == 9000U && new_mtu == 1500) {
      
#line 4264 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 4264 
                                          netdev_err((struct net_device const *)qdev->ndev,"Changing to normal MTU.\n"); else ;
    }
    else {
      
#line 4266 
      __retres = -22;
      
#line 4266 
      goto return_label;
    }
  
#line 4268 
  ldv_queue_delayed_work_91(qdev->workqueue,& qdev->mpi_port_cfg_work,750UL);
  
#line 4271 
  ndev->mtu = (unsigned int)new_mtu;
  
#line 4273 
  tmp_0 = netif_running((struct net_device const *)qdev->ndev);
  
#line 4273 
  if (tmp_0) 
#line 4273 
             tmp_1 = 0; else 
#line 4273 
                             tmp_1 = 1;
  
#line 4273 
  if (tmp_1) {
    
#line 4274 
    __retres = 0;
    
#line 4274 
    goto return_label;
  }
  else ;
  
#line 4277 
  status = ql_change_rx_buffers(qdev);
  
#line 4278 
  if (status != 0) {
    
#line 4279 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 4279 
                                        netdev_err((struct net_device const *)qdev->ndev,"Changing MTU failed.\n"); else ;
  }
  else ;
  
#line 4283 
  __retres = status;
  return_label: 
#line 4283 
                return __retres;
}


#line 4286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct net_device_stats *qlge_get_stats(struct net_device *ndev)
{
  struct net_device_stats *__retres;
  unsigned long pkts;
  unsigned long mcast;
  unsigned long dropped;
  unsigned long errors;
  unsigned long bytes;
  int i;
  
#line 4289 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4290 
  struct rx_ring *rx_ring = & qdev->rx_ring[0];
  
#line 4291 
  struct tx_ring *tx_ring = & qdev->tx_ring[0];
  
#line 4296 
  bytes = 0UL;
  
#line 4296 
  errors = bytes;
  
#line 4296 
  dropped = errors;
  
#line 4296 
  mcast = dropped;
  
#line 4296 
  pkts = mcast;
  
#line 4297 
  i = 0;
  
#line 4297 
  goto ldv_56774;
  ldv_56773: 
#line 4298 
  ;
  
#line 4298 
  pkts = (unsigned long)(rx_ring->rx_packets + (unsigned long long)pkts);
  
#line 4299 
  bytes = (unsigned long)(rx_ring->rx_bytes + (unsigned long long)bytes);
  
#line 4300 
  dropped = (unsigned long)(rx_ring->rx_dropped + (unsigned long long)dropped);
  
#line 4301 
  errors = (unsigned long)(rx_ring->rx_errors + (unsigned long long)errors);
  
#line 4302 
  mcast = (unsigned long)(rx_ring->rx_multicast + (unsigned long long)mcast);
  
#line 4297 
  i += 1;
  
#line 4297 
  rx_ring += 1;
  ldv_56774: 
#line 4298 
  ;
  
#line 4297 
  if (qdev->rss_ring_count > (unsigned int)i) 
#line 4299 
                                              goto ldv_56773; else 
#line 4302 
                                                                   goto ldv_56775;
  ldv_56775: 
#line 4303 
  ;
  
#line 4304 
  ndev->stats.rx_packets = pkts;
  
#line 4305 
  ndev->stats.rx_bytes = bytes;
  
#line 4306 
  ndev->stats.rx_dropped = dropped;
  
#line 4307 
  ndev->stats.rx_errors = errors;
  
#line 4308 
  ndev->stats.multicast = mcast;
  
#line 4311 
  bytes = 0UL;
  
#line 4311 
  errors = bytes;
  
#line 4311 
  pkts = errors;
  
#line 4312 
  i = 0;
  
#line 4312 
  goto ldv_56777;
  ldv_56776: 
#line 4313 
  ;
  
#line 4313 
  pkts = (unsigned long)(tx_ring->tx_packets + (unsigned long long)pkts);
  
#line 4314 
  bytes = (unsigned long)(tx_ring->tx_bytes + (unsigned long long)bytes);
  
#line 4315 
  errors = (unsigned long)(tx_ring->tx_errors + (unsigned long long)errors);
  
#line 4312 
  i += 1;
  
#line 4312 
  tx_ring += 1;
  ldv_56777: 
#line 4313 
  ;
  
#line 4312 
  if (qdev->tx_ring_count > i) 
#line 4314 
                               goto ldv_56776; else 
#line 4317 
                                                    goto ldv_56778;
  ldv_56778: 
#line 4318 
  ;
  
#line 4317 
  ndev->stats.tx_packets = pkts;
  
#line 4318 
  ndev->stats.tx_bytes = bytes;
  
#line 4319 
  ndev->stats.tx_errors = errors;
  
#line 4320 
  __retres = & ndev->stats;
  
#line 4320 
  return __retres;
}


#line 4323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void qlge_set_multicast_list(struct net_device *ndev)
{
  struct netdev_hw_addr *ha;
  int i;
  int status;
  
#line 4325 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4329 
  status = ql_sem_spinlock(qdev,805306368U);
  
#line 4330 
  if (status != 0) 
#line 4331 
                   goto return_label; else ;
  
#line 4336 
  if ((ndev->flags & 256U) != 0U) {
    int tmp_1;
    
#line 4337 
    tmp_1 = constant_test_bit(5L,(unsigned long const volatile *)(& qdev->flags));
    
#line 4337 
    if (tmp_1 == 0) {
      int tmp_0;
      
#line 4338 
      tmp_0 = ql_set_routing_reg(qdev,15U,8388608U,1);
      
#line 4338 
      if (tmp_0 != 0) {
        
#line 4340 
        if ((qdev->msg_enable & 8192U) != 0U) 
#line 4340 
                                              netdev_err((struct net_device const *)qdev->ndev,"Failed to set promiscuous mode.\n"); else ;
      }
      else 
#line 4343 
           set_bit(5L,(unsigned long volatile *)(& qdev->flags));
    }
    else ;
  }
  else {
    int tmp_3;
    
#line 4347 
    tmp_3 = constant_test_bit(5L,(unsigned long const volatile *)(& qdev->flags));
    
#line 4347 
    if (tmp_3 != 0) {
      int tmp_2;
      
#line 4348 
      tmp_2 = ql_set_routing_reg(qdev,15U,8388608U,0);
      
#line 4348 
      if (tmp_2 != 0) {
        
#line 4350 
        if ((qdev->msg_enable & 8192U) != 0U) 
#line 4350 
                                              netdev_err((struct net_device const *)qdev->ndev,"Failed to clear promiscuous mode.\n"); else ;
      }
      else 
#line 4353 
           set_bit(5L,(unsigned long volatile *)(& qdev->flags));
    }
    else ;
  }
  
#line 4362 
  if ((ndev->flags & 512U) != 0U || ndev->mc.count > 32) {
    int tmp_5;
    
#line 4364 
    tmp_5 = constant_test_bit(6L,(unsigned long const volatile *)(& qdev->flags));
    
#line 4364 
    if (tmp_5 == 0) {
      int tmp_4;
      
#line 4365 
      tmp_4 = ql_set_routing_reg(qdev,5U,2U,1);
      
#line 4365 
      if (tmp_4 != 0) {
        
#line 4367 
        if ((qdev->msg_enable & 8192U) != 0U) 
#line 4367 
                                              netdev_err((struct net_device const *)qdev->ndev,"Failed to set all-multi mode.\n"); else ;
      }
      else 
#line 4370 
           set_bit(6L,(unsigned long volatile *)(& qdev->flags));
    }
    else ;
  }
  else {
    int tmp_7;
    
#line 4374 
    tmp_7 = constant_test_bit(6L,(unsigned long const volatile *)(& qdev->flags));
    
#line 4374 
    if (tmp_7 != 0) {
      int tmp_6;
      
#line 4375 
      tmp_6 = ql_set_routing_reg(qdev,5U,2U,0);
      
#line 4375 
      if (tmp_6 != 0) {
        
#line 4377 
        if ((qdev->msg_enable & 8192U) != 0U) 
#line 4377 
                                              netdev_err((struct net_device const *)qdev->ndev,"Failed to clear all-multi mode.\n"); else ;
      }
      else 
#line 4380 
           set_bit(6L,(unsigned long volatile *)(& qdev->flags));
    }
    else ;
  }
  
#line 4385 
  if (ndev->mc.count != 0) {
    struct netdev_hw_addr *tmp_8;
    int tmp_9;
    struct netdev_hw_addr *tmp_10;
    int tmp_11;
    
#line 4386 
    status = ql_sem_spinlock(qdev,12582912U);
    
#line 4387 
    if (status != 0) 
#line 4388 
                     goto exit; else ;
    
#line 4389 
    i = 0;
    {
      
#line 4390 
      struct list_head const *__mptr = (struct list_head const *)ndev->mc.list.next;
      
#line 4390 
      tmp_8 = (struct netdev_hw_addr *)__mptr;
    }
    
#line 4390 
    ha = tmp_8;
    
#line 4390 
    goto ldv_56792;
    ldv_56791: 
#line 4391 
    ;
    
#line 4391 
    tmp_9 = ql_set_mac_addr_reg(qdev,(u8 *)(& ha->addr),65536U,(unsigned short)((int)((unsigned short)i)));
    
#line 4391 
    if (tmp_9 != 0) {
      
#line 4393 
      if ((qdev->msg_enable & 8192U) != 0U) 
#line 4393 
                                            netdev_err((struct net_device const *)qdev->ndev,"Failed to loadmulticast address.\n"); else ;
      
#line 4395 
      ql_sem_unlock(qdev,12582912U);
      
#line 4396 
      goto exit;
    }
    else ;
    
#line 4398 
    i += 1;
    {
      
#line 4390 
      struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
      
#line 4390 
      tmp_10 = (struct netdev_hw_addr *)__mptr_0;
    }
    
#line 4390 
    ha = tmp_10;
    ldv_56792: 
#line 4392 
    ;
    
#line 4390 
    if (& ha->list != & ndev->mc.list) 
#line 4392 
                                       goto ldv_56791; else 
#line 4395 
                                                            goto ldv_56793;
    ldv_56793: 
#line 4396 
    ;
    
#line 4400 
    ql_sem_unlock(qdev,12582912U);
    
#line 4401 
    tmp_11 = ql_set_routing_reg(qdev,4U,4U,1);
    
#line 4401 
    if (tmp_11 != 0) {
      
#line 4403 
      if ((qdev->msg_enable & 8192U) != 0U) 
#line 4403 
                                            netdev_err((struct net_device const *)qdev->ndev,"Failed to set multicast match mode.\n"); else ;
    }
    else 
#line 4406 
         set_bit(6L,(unsigned long volatile *)(& qdev->flags));
  }
  else ;
  exit: 
#line 4409 
  ;
  
#line 4410 
  ql_sem_unlock(qdev,805306368U);
  return_label: 
#line 4411 
                return;
}


#line 4413  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_set_mac_address(struct net_device *ndev, void *p)
{
  int __retres;
  int status;
  int tmp_1;
  bool tmp_0;
  
#line 4415 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4416 
  struct sockaddr *addr = (struct sockaddr *)p;
  
#line 4419 
  tmp_0 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 4419 
  if (tmp_0) 
#line 4419 
             tmp_1 = 0; else 
#line 4419 
                             tmp_1 = 1;
  
#line 4419 
  if (tmp_1) {
    
#line 4420 
    __retres = -99;
    
#line 4420 
    goto return_label;
  }
  else ;
  
#line 4421 
  memcpy((void *)ndev->dev_addr,(void const *)(& addr->sa_data),(unsigned long)ndev->addr_len);
  
#line 4423 
  memcpy((void *)(& qdev->current_mac_addr),(void const *)ndev->dev_addr,(unsigned long)ndev->addr_len);
  
#line 4425 
  status = ql_sem_spinlock(qdev,12582912U);
  
#line 4426 
  if (status != 0) {
    
#line 4427 
    __retres = status;
    
#line 4427 
    goto return_label;
  }
  else ;
  
#line 4428 
  status = ql_set_mac_addr_reg(qdev,ndev->dev_addr,0U,(unsigned short)((int)((unsigned int)((unsigned short)qdev->func) * 128U)));
  
#line 4430 
  if (status != 0) {
    
#line 4431 
    if ((qdev->msg_enable & 8192U) != 0U) 
#line 4431 
                                          netdev_err((struct net_device const *)qdev->ndev,"Failed to load MAC address.\n"); else ;
  }
  else ;
  
#line 4432 
  ql_sem_unlock(qdev,12582912U);
  
#line 4433 
  __retres = status;
  return_label: 
#line 4433 
                return __retres;
}


#line 4436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void qlge_tx_timeout(struct net_device *ndev)
{
  
#line 4438 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4439 
  ql_queue_asic_error(qdev);
  
#line 4440 
  return;
}


#line 4442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_asic_reset_work(struct work_struct *work)
{
  struct ql_adapter *tmp;
  int status;
  {
    
#line 4445 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 4445 
    tmp = (struct ql_adapter *)__mptr + 18446744073709531440U;
  }
  
#line 4444 
  struct ql_adapter *qdev = tmp;
  
#line 4447 
  rtnl_lock();
  
#line 4448 
  status = ql_adapter_down(qdev);
  
#line 4449 
  if (status != 0) 
#line 4450 
                   goto error; else ;
  
#line 4452 
  status = ql_adapter_up(qdev);
  
#line 4453 
  if (status != 0) 
#line 4454 
                   goto error; else ;
  
#line 4457 
  set_bit(6L,(unsigned long volatile *)(& qdev->flags));
  
#line 4458 
  set_bit(5L,(unsigned long volatile *)(& qdev->flags));
  
#line 4459 
  qlge_set_multicast_list(qdev->ndev);
  
#line 4461 
  rtnl_unlock();
  
#line 4462 
  goto return_label;
  error: 
#line 4463 
  ;
  
#line 4464 
  if ((qdev->msg_enable & 32U) != 0U) 
#line 4464 
                                      netdev_alert((struct net_device const *)qdev->ndev,"Driver up/down cycle failed, closing device\n"); else ;
  
#line 4467 
  set_bit(0L,(unsigned long volatile *)(& qdev->flags));
  
#line 4468 
  dev_close(qdev->ndev);
  
#line 4469 
  rtnl_unlock();
  return_label: 
#line 4470 
                return;
}


#line 4472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct nic_operations const qla8012_nic_ops = {.get_flash = & ql_get_8012_flash_params, .port_initialize = & ql_8012_port_initialize};

#line 4477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct nic_operations const qla8000_nic_ops = {.get_flash = & ql_get_8000_flash_params, .port_initialize = & ql_8000_port_initialize};

#line 4489  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_get_alt_pcie_func(struct ql_adapter *qdev)
{
  int __retres;
  u32 temp;
  u32 nic_func1;
  u32 nic_func2;
  
#line 4491 
  int status = 0;
  
#line 4495 
  status = ql_read_mpi_reg(qdev,4098U,& temp);
  
#line 4497 
  if (status != 0) {
    
#line 4498 
    __retres = status;
    
#line 4498 
    goto return_label;
  }
  else ;
  
#line 4500 
  nic_func1 = (temp >> 1) & 7U;
  
#line 4502 
  nic_func2 = (temp >> 5) & 7U;
  
#line 4505 
  if (qdev->func == nic_func1) 
#line 4506 
                               qdev->alt_func = nic_func2;
  else 
    
#line 4507 
    if (qdev->func == nic_func2) 
#line 4508 
                                 qdev->alt_func = nic_func1; else 
#line 4510 
                                                                  status = -5;
  
#line 4512 
  __retres = status;
  return_label: 
#line 4512 
                return __retres;
}


#line 4515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_get_board_info(struct ql_adapter *qdev)
{
  int __retres;
  int status;
  u32 tmp;
  
#line 4518 
  tmp = ql_read32((struct ql_adapter const *)qdev,48);
  
#line 4518 
  qdev->func = (tmp >> 6) & 3U;
  
#line 4520 
  if (qdev->func > 3U) {
    
#line 4521 
    __retres = -5;
    
#line 4521 
    goto return_label;
  }
  else ;
  
#line 4523 
  status = ql_get_alt_pcie_func(qdev);
  
#line 4524 
  if (status != 0) {
    
#line 4525 
    __retres = status;
    
#line 4525 
    goto return_label;
  }
  else ;
  
#line 4527 
  qdev->port = (unsigned int)(qdev->func >= qdev->alt_func);
  
#line 4528 
  if (qdev->port != 0U) {
    
#line 4529 
    qdev->xg_sem_mask = 786432U;
    
#line 4530 
    qdev->port_link_up = 8U;
    
#line 4531 
    qdev->port_init = 32U;
    
#line 4532 
    qdev->mailbox_in = 4736U;
    
#line 4533 
    qdev->mailbox_out = 4752U;
  }
  else {
    
#line 4535 
    qdev->xg_sem_mask = 196608U;
    
#line 4536 
    qdev->port_link_up = 4U;
    
#line 4537 
    qdev->port_init = 16U;
    
#line 4538 
    qdev->mailbox_in = 4480U;
    
#line 4539 
    qdev->mailbox_out = 4496U;
  }
  
#line 4541 
  qdev->chip_rev_id = ql_read32((struct ql_adapter const *)qdev,76);
  
#line 4542 
  qdev->device_id = (qdev->pdev)->device;
  
#line 4543 
  if ((unsigned int)qdev->device_id == 32786U) 
#line 4544 
                                               qdev->nic_ops = & qla8012_nic_ops;
  else 
    
#line 4545 
    if ((unsigned int)qdev->device_id == 32768U) 
#line 4546 
                                                 qdev->nic_ops = & qla8000_nic_ops; else ;
  
#line 4547 
  __retres = status;
  return_label: 
#line 4547 
                return __retres;
}


#line 4550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_release_all(struct pci_dev *pdev)
{
  
#line 4552 
  struct net_device *ndev = pci_get_drvdata(pdev);
  
#line 4553 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4555 
  if (qdev->workqueue != (struct workqueue_struct *)0) {
    
#line 4556 
    destroy_workqueue(qdev->workqueue);
    
#line 4557 
    qdev->workqueue = (struct workqueue_struct *)0;
  }
  else ;
  
#line 4560 
  if (qdev->reg_base != (void *)0) 
#line 4561 
                                   iounmap((void volatile *)qdev->reg_base); else ;
  
#line 4562 
  if (qdev->doorbell_area != (void *)0) 
#line 4563 
                                        iounmap((void volatile *)qdev->doorbell_area); else ;
  
#line 4564 
  vfree((void const *)qdev->mpi_coredump);
  
#line 4565 
  pci_release_regions(pdev);
  
#line 4566 
  return;
}


#line 4568  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int ql_init_device(struct pci_dev *pdev, struct net_device *ndev, int cards_found)
{
  int __retres;
  int tmp_0;
  resource_size_t tmp_1;
  resource_size_t tmp_2;
  struct workqueue_struct *tmp_5;
  
#line 4571 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4572 
  int err = 0;
  
#line 4574 
  memset((void *)qdev,0,21776UL);
  
#line 4575 
  err = pci_enable_device(pdev);
  
#line 4576 
  if (err != 0) {
    
#line 4577 
    dev_err((struct device const *)(& pdev->dev),"PCI device enable failed.\n");
    
#line 4578 
    __retres = err;
    
#line 4578 
    goto return_label;
  }
  else ;
  
#line 4581 
  qdev->ndev = ndev;
  
#line 4582 
  qdev->pdev = pdev;
  
#line 4583 
  pci_set_drvdata(pdev,(void *)ndev);
  
#line 4586 
  err = pcie_set_readrq(pdev,4096);
  
#line 4587 
  if (err != 0) {
    
#line 4588 
    dev_err((struct device const *)(& pdev->dev),"Set readrq failed.\n");
    
#line 4589 
    goto err_out1;
  }
  else ;
  
#line 4592 
  err = pci_request_regions(pdev,"qlge");
  
#line 4593 
  if (err != 0) {
    
#line 4594 
    dev_err((struct device const *)(& pdev->dev),"PCI region request failed.\n");
    
#line 4595 
    __retres = err;
    
#line 4595 
    goto return_label;
  }
  else ;
  
#line 4598 
  pci_set_master(pdev);
  
#line 4599 
  tmp_0 = pci_set_dma_mask(pdev,18446744073709551615ULL);
  
#line 4599 
  if (tmp_0 == 0) {
    
#line 4600 
    set_bit(4L,(unsigned long volatile *)(& qdev->flags));
    
#line 4601 
    err = pci_set_consistent_dma_mask(pdev,18446744073709551615ULL);
  }
  else {
    
#line 4603 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    
#line 4604 
    if (err == 0) 
#line 4605 
                  err = pci_set_consistent_dma_mask(pdev,4294967295ULL); else ;
  }
  
#line 4608 
  if (err != 0) {
    
#line 4609 
    dev_err((struct device const *)(& pdev->dev),"No usable DMA configuration.\n");
    
#line 4610 
    goto err_out2;
  }
  else ;
  
#line 4614 
  pdev->needs_freset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 4615 
  pci_save_state(pdev);
  
#line 4618 
  if (pdev->resource[1].start != 0ULL || pdev->resource[1].end != pdev->resource[1].start) 
    
#line 4618 
    tmp_1 = (pdev->resource[1].end - pdev->resource[1].start) + 1ULL; else 
                                                                    
#line 4618 
                                                                    tmp_1 = 0ULL;
  
#line 4616 
  ;
  
#line 4616 
  qdev->reg_base = ioremap_nocache(pdev->resource[1].start,(unsigned long)tmp_1);
  
#line 4619 
  if (qdev->reg_base == (void *)0) {
    
#line 4620 
    dev_err((struct device const *)(& pdev->dev),"Register mapping failed.\n");
    
#line 4621 
    err = -12;
    
#line 4622 
    goto err_out2;
  }
  else ;
  
#line 4625 
  if (pdev->resource[3].start != 0ULL || pdev->resource[3].end != pdev->resource[3].start) 
    
#line 4625 
    qdev->doorbell_area_size = ((unsigned int)pdev->resource[3].end - (unsigned int)pdev->resource[3].start) + 1U; else 
                                                                    
#line 4625 
                                                                    qdev->doorbell_area_size = 0U;
  
#line 4628 
  if (pdev->resource[3].start != 0ULL || pdev->resource[3].end != pdev->resource[3].start) 
    
#line 4628 
    tmp_2 = (pdev->resource[3].end - pdev->resource[3].start) + 1ULL; else 
                                                                    
#line 4628 
                                                                    tmp_2 = 0ULL;
  
#line 4626 
  ;
  
#line 4626 
  qdev->doorbell_area = ioremap_nocache(pdev->resource[3].start,(unsigned long)tmp_2);
  
#line 4629 
  if (qdev->doorbell_area == (void *)0) {
    
#line 4630 
    dev_err((struct device const *)(& pdev->dev),"Doorbell register mapping failed.\n");
    
#line 4631 
    err = -12;
    
#line 4632 
    goto err_out2;
  }
  else ;
  
#line 4635 
  err = ql_get_board_info(qdev);
  
#line 4636 
  if (err != 0) {
    
#line 4637 
    dev_err((struct device const *)(& pdev->dev),"Register access failed.\n");
    
#line 4638 
    err = -5;
    
#line 4639 
    goto err_out2;
  }
  else ;
  
#line 4641 
  qdev->msg_enable = netif_msg_init(debug,(int)default_msg);
  
#line 4642 
  spinlock_check(& qdev->hw_lock);
  {
    struct lock_class_key __key;
    
#line 4642 
    __raw_spin_lock_init(& qdev->hw_lock.__anonCompField_spinlock_18.rlock,"&(&qdev->hw_lock)->rlock",& __key);
  }
  
#line 4643 
  spinlock_check(& qdev->stats_lock);
  {
    struct lock_class_key __key_0;
    
#line 4643 
    __raw_spin_lock_init(& qdev->stats_lock.__anonCompField_spinlock_18.rlock,"&(&qdev->stats_lock)->rlock",& __key_0);
  }
  
#line 4645 
  if (qlge_mpi_coredump != 0) {
    
#line 4647 
    qdev->mpi_coredump = (struct ql_mpi_coredump *)vmalloc(176196UL);
    
#line 4648 
    if (qdev->mpi_coredump == (struct ql_mpi_coredump *)0) {
      
#line 4649 
      err = -12;
      
#line 4650 
      goto err_out2;
    }
    else ;
    
#line 4652 
    if (qlge_force_coredump != 0) 
#line 4653 
                                  set_bit(11L,(unsigned long volatile *)(& qdev->flags)); else ;
  }
  else ;
  
#line 4656 
  err = (*((qdev->nic_ops)->get_flash))(qdev);
  
#line 4657 
  if (err != 0) {
    
#line 4658 
    dev_err((struct device const *)(& pdev->dev),"Invalid FLASH.\n");
    
#line 4659 
    goto err_out2;
  }
  else ;
  
#line 4663 
  memcpy((void *)(& qdev->current_mac_addr),(void const *)ndev->dev_addr,(unsigned long)ndev->addr_len);
  
#line 4666 
  qdev->tx_ring_size = 256;
  
#line 4667 
  qdev->rx_ring_size = 256;
  
#line 4670 
  qdev->rx_coalesce_usecs = (unsigned short)100U;
  
#line 4671 
  qdev->tx_coalesce_usecs = (unsigned short)100U;
  
#line 4672 
  qdev->rx_max_coalesced_frames = (unsigned short)5U;
  
#line 4673 
  qdev->tx_max_coalesced_frames = (unsigned short)5U;
  {
    struct lock_class_key __key_1;
    char const *__lock_name;
    
#line 4678 
    __lock_name = "\"%s\"";
    
#line 4678 
    tmp_5 = __alloc_workqueue_key("%s",131082U,1,& __key_1,__lock_name,(char *)(& ndev->name));
  }
  
#line 4678 
  qdev->workqueue = tmp_5;
  {
    struct lock_class_key __key_2;
    
#line 4679 
    __init_work(& qdev->asic_reset_work.work,0);
    
#line 4679 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 4679 
    qdev->asic_reset_work.work.data = __constr_expr_37;
    
#line 4679 
    lockdep_init_map(& qdev->asic_reset_work.work.lockdep_map,"(&(&qdev->asic_reset_work)->work)",& __key_2,0);
    
#line 4679 
    INIT_LIST_HEAD(& qdev->asic_reset_work.work.entry);
    
#line 4679 
    qdev->asic_reset_work.work.func = & ql_asic_reset_work;
  }
  {
    struct lock_class_key __key_3;
    
#line 4679 
    init_timer_key(& qdev->asic_reset_work.timer,2097152U,"(&(&qdev->asic_reset_work)->timer)",& __key_3);
  }
  
#line 4679 
  qdev->asic_reset_work.timer.function = & delayed_work_timer_fn;
  
#line 4679 
  qdev->asic_reset_work.timer.data = (unsigned long)(& qdev->asic_reset_work);
  {
    struct lock_class_key __key_4;
    
#line 4680 
    __init_work(& qdev->mpi_reset_work.work,0);
    
#line 4680 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 4680 
    qdev->mpi_reset_work.work.data = __constr_expr_38;
    
#line 4680 
    lockdep_init_map(& qdev->mpi_reset_work.work.lockdep_map,"(&(&qdev->mpi_reset_work)->work)",& __key_4,0);
    
#line 4680 
    INIT_LIST_HEAD(& qdev->mpi_reset_work.work.entry);
    
#line 4680 
    qdev->mpi_reset_work.work.func = & ql_mpi_reset_work;
  }
  {
    struct lock_class_key __key_5;
    
#line 4680 
    init_timer_key(& qdev->mpi_reset_work.timer,2097152U,"(&(&qdev->mpi_reset_work)->timer)",& __key_5);
  }
  
#line 4680 
  qdev->mpi_reset_work.timer.function = & delayed_work_timer_fn;
  
#line 4680 
  qdev->mpi_reset_work.timer.data = (unsigned long)(& qdev->mpi_reset_work);
  {
    struct lock_class_key __key_6;
    
#line 4681 
    __init_work(& qdev->mpi_work.work,0);
    
#line 4681 
    atomic_long_t __constr_expr_39 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 4681 
    qdev->mpi_work.work.data = __constr_expr_39;
    
#line 4681 
    lockdep_init_map(& qdev->mpi_work.work.lockdep_map,"(&(&qdev->mpi_work)->work)",& __key_6,0);
    
#line 4681 
    INIT_LIST_HEAD(& qdev->mpi_work.work.entry);
    
#line 4681 
    qdev->mpi_work.work.func = & ql_mpi_work;
  }
  {
    struct lock_class_key __key_7;
    
#line 4681 
    init_timer_key(& qdev->mpi_work.timer,2097152U,"(&(&qdev->mpi_work)->timer)",& __key_7);
  }
  
#line 4681 
  qdev->mpi_work.timer.function = & delayed_work_timer_fn;
  
#line 4681 
  qdev->mpi_work.timer.data = (unsigned long)(& qdev->mpi_work);
  {
    struct lock_class_key __key_8;
    
#line 4682 
    __init_work(& qdev->mpi_port_cfg_work.work,0);
    
#line 4682 
    atomic_long_t __constr_expr_40 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 4682 
    qdev->mpi_port_cfg_work.work.data = __constr_expr_40;
    
#line 4682 
    lockdep_init_map(& qdev->mpi_port_cfg_work.work.lockdep_map,"(&(&qdev->mpi_port_cfg_work)->work)",& __key_8,0);
    
#line 4682 
    INIT_LIST_HEAD(& qdev->mpi_port_cfg_work.work.entry);
    
#line 4682 
    qdev->mpi_port_cfg_work.work.func = & ql_mpi_port_cfg_work;
  }
  {
    struct lock_class_key __key_9;
    
#line 4682 
    init_timer_key(& qdev->mpi_port_cfg_work.timer,2097152U,"(&(&qdev->mpi_port_cfg_work)->timer)",& __key_9);
  }
  
#line 4682 
  qdev->mpi_port_cfg_work.timer.function = & delayed_work_timer_fn;
  
#line 4682 
  qdev->mpi_port_cfg_work.timer.data = (unsigned long)(& qdev->mpi_port_cfg_work);
  {
    struct lock_class_key __key_10;
    
#line 4683 
    __init_work(& qdev->mpi_idc_work.work,0);
    
#line 4683 
    atomic_long_t __constr_expr_41 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 4683 
    qdev->mpi_idc_work.work.data = __constr_expr_41;
    
#line 4683 
    lockdep_init_map(& qdev->mpi_idc_work.work.lockdep_map,"(&(&qdev->mpi_idc_work)->work)",& __key_10,0);
    
#line 4683 
    INIT_LIST_HEAD(& qdev->mpi_idc_work.work.entry);
    
#line 4683 
    qdev->mpi_idc_work.work.func = & ql_mpi_idc_work;
  }
  {
    struct lock_class_key __key_11;
    
#line 4683 
    init_timer_key(& qdev->mpi_idc_work.timer,2097152U,"(&(&qdev->mpi_idc_work)->timer)",& __key_11);
  }
  
#line 4683 
  qdev->mpi_idc_work.timer.function = & delayed_work_timer_fn;
  
#line 4683 
  qdev->mpi_idc_work.timer.data = (unsigned long)(& qdev->mpi_idc_work);
  {
    struct lock_class_key __key_12;
    
#line 4684 
    __init_work(& qdev->mpi_core_to_log.work,0);
    
#line 4684 
    atomic_long_t __constr_expr_42 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 4684 
    qdev->mpi_core_to_log.work.data = __constr_expr_42;
    
#line 4684 
    lockdep_init_map(& qdev->mpi_core_to_log.work.lockdep_map,"(&(&qdev->mpi_core_to_log)->work)",& __key_12,0);
    
#line 4684 
    INIT_LIST_HEAD(& qdev->mpi_core_to_log.work.entry);
    
#line 4684 
    qdev->mpi_core_to_log.work.func = & ql_mpi_core_to_log;
  }
  {
    struct lock_class_key __key_13;
    
#line 4684 
    init_timer_key(& qdev->mpi_core_to_log.timer,2097152U,"(&(&qdev->mpi_core_to_log)->timer)",& __key_13);
  }
  
#line 4684 
  qdev->mpi_core_to_log.timer.function = & delayed_work_timer_fn;
  
#line 4684 
  qdev->mpi_core_to_log.timer.data = (unsigned long)(& qdev->mpi_core_to_log);
  
#line 4685 
  init_completion(& qdev->ide_completion);
  {
    struct lock_class_key __key_14;
    
#line 4686 
    __mutex_init(& qdev->mpi_mutex,"&qdev->mpi_mutex",& __key_14);
  }
  
#line 4688 
  if (cards_found == 0) {
    
#line 4689 
    _dev_info((struct device const *)(& pdev->dev),"%s\n",(char *)"QLogic 10 Gigabit PCI-E Ethernet Driver ");
    
#line 4690 
    _dev_info((struct device const *)(& pdev->dev),"Driver name: %s, Version: %s.\n",(char *)"qlge",(char *)"1.00.00.34");
  }
  else ;
  
#line 4693 
  __retres = 0;
  
#line 4693 
  goto return_label;
  err_out2: 
#line 4694 
  ;
  
#line 4695 
  ql_release_all(pdev);
  err_out1: 
#line 4696 
  ;
  
#line 4697 
  pci_disable_device(pdev);
  
#line 4698 
  __retres = err;
  return_label: 
#line 4698 
                return __retres;
}


#line 4701  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct net_device_ops const qlge_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & qlge_open, .ndo_stop = & qlge_close, .ndo_start_xmit = & qlge_send, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & qlge_set_multicast_list, .ndo_set_mac_address = & qlge_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = (int (*)(struct net_device *, struct ifreq *, int ))0, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & qlge_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & qlge_tx_timeout, .ndo_get_stats64 = (struct rtnl_link_stats64 *(*)(struct net_device *, struct rtnl_link_stats64 *))0, .ndo_get_stats = & qlge_get_stats, .ndo_vlan_rx_add_vid = & qlge_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & qlge_vlan_rx_kill_vid, .ndo_poll_controller = (void (*)(struct net_device *))0, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = & qlge_fix_features, .ndo_set_features = & qlge_set_features, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 4717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_timer(unsigned long data)
{
  int tmp;
  
#line 4719 
  struct ql_adapter *qdev = (struct ql_adapter *)data;
  
#line 4720 
  u32 var = 0U;
  
#line 4722 
  var = ql_read32((struct ql_adapter const *)qdev,48);
  
#line 4723 
  tmp = pci_channel_offline(qdev->pdev);
  
#line 4723 
  if (tmp != 0) {
    
#line 4724 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 4724 
                                        netdev_err((struct net_device const *)qdev->ndev,"EEH STS = 0x%.08x.\n",var); else ;
    
#line 4725 
    goto return_label;
  }
  else ;
  
#line 4728 
  ldv_mod_timer_92(& qdev->timer,jiffies + 1250UL);
  return_label: 
#line 4729 
                return;
}


#line 4731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_probe(struct pci_dev *pdev, struct pci_device_id const *pci_entry)
{
  int __retres;
  int tmp_1;
  int tmp_4;
  int tmp_6;
  
#line 4734 
  struct net_device *ndev = (struct net_device *)0;
  
#line 4735 
  struct ql_adapter *qdev = (struct ql_adapter *)0;
  
#line 4736 
  int cards_found = 0;
  
#line 4737 
  int err = 0;
  {
    int tmp_0;
    
#line 4739 
    int _min1 = 8;
    
#line 4739 
    int _min2 = netif_get_num_default_rss_queues();
    
#line 4739 
    if (_min1 < _min2) 
#line 4739 
                       tmp_0 = _min1; else 
#line 4739 
                                           tmp_0 = _min2;
    
#line 4739 
    tmp_1 = tmp_0;
  }
  {
    int tmp_3;
    
#line 4739 
    int _min1_0 = 8;
    
#line 4739 
    int _min2_0 = netif_get_num_default_rss_queues();
    
#line 4739 
    if (_min1_0 < _min2_0) 
#line 4739 
                           tmp_3 = _min1_0; else 
#line 4739 
                                                 tmp_3 = _min2_0;
    
#line 4739 
    tmp_4 = tmp_3;
  }
  
#line 4739 
  ndev = ldv_alloc_etherdev_mqs_93(21776,(unsigned int)tmp_4,(unsigned int)tmp_1);
  
#line 4741 
  if (ndev == (struct net_device *)0) {
    
#line 4742 
    __retres = -12;
    
#line 4742 
    goto return_label;
  }
  else ;
  
#line 4744 
  err = ql_init_device(pdev,ndev,cards_found);
  
#line 4745 
  if (err < 0) {
    
#line 4746 
    ldv_free_netdev_94(ndev);
    
#line 4747 
    __retres = err;
    
#line 4747 
    goto return_label;
  }
  else ;
  
#line 4750 
  qdev = (struct ql_adapter *)netdev_priv((struct net_device const *)ndev);
  
#line 4751 
  ndev->dev.parent = & pdev->dev;
  
#line 4752 
  ndev->hw_features = 17180459907ULL;
  
#line 4760 
  ndev->features = ndev->hw_features;
  
#line 4761 
  ndev->vlan_features = ndev->hw_features;
  
#line 4763 
  ndev->vlan_features &= 18446744073709550719ULL;
  
#line 4767 
  tmp_6 = constant_test_bit(4L,(unsigned long const volatile *)(& qdev->flags));
  
#line 4767 
  if (tmp_6 != 0) 
#line 4768 
                  ndev->features |= 32ULL; else ;
  
#line 4773 
  ndev->tx_queue_len = (unsigned long)qdev->tx_ring_size;
  
#line 4774 
  ndev->irq = (int)pdev->irq;
  
#line 4776 
  ndev->netdev_ops = & qlge_netdev_ops;
  
#line 4777 
  ndev->ethtool_ops = & qlge_ethtool_ops;
  
#line 4778 
  ndev->watchdog_timeo = 2500;
  
#line 4780 
  err = ldv_register_netdev_95(ndev);
  
#line 4781 
  if (err != 0) {
    
#line 4782 
    dev_err((struct device const *)(& pdev->dev),"net device registration failed.\n");
    
#line 4783 
    ql_release_all(pdev);
    
#line 4784 
    pci_disable_device(pdev);
    
#line 4785 
    ldv_free_netdev_96(ndev);
    
#line 4786 
    __retres = err;
    
#line 4786 
    goto return_label;
  }
  else ;
  {
    struct lock_class_key __key;
    
#line 4791 
    init_timer_key(& qdev->timer,1048576U,"(&qdev->timer)",& __key);
  }
  
#line 4792 
  qdev->timer.data = (unsigned long)qdev;
  
#line 4793 
  qdev->timer.function = & ql_timer;
  
#line 4794 
  qdev->timer.expires = jiffies + 1250UL;
  
#line 4795 
  add_timer(& qdev->timer);
  
#line 4796 
  ql_link_off(qdev);
  
#line 4797 
  ql_display_dev_info(ndev);
  
#line 4798 
  atomic_set(& qdev->lb_count,0);
  
#line 4799 
  cards_found += 1;
  
#line 4800 
  __retres = 0;
  return_label: 
#line 4800 
                return __retres;
}


#line 4803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
netdev_tx_t ql_lb_send(struct sk_buff *skb, struct net_device *ndev)
{
  netdev_tx_t tmp;
  
#line 4805 
  tmp = qlge_send(skb,ndev);
  
#line 4805 
  return tmp;
}


#line 4808  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
int ql_clean_lb_rx_ring(struct rx_ring *rx_ring, int budget)
{
  int tmp;
  
#line 4810 
  tmp = ql_clean_inbound_rx_ring(rx_ring,budget);
  
#line 4810 
  return tmp;
}


#line 4813  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void qlge_remove(struct pci_dev *pdev)
{
  
#line 4815 
  struct net_device *ndev = pci_get_drvdata(pdev);
  
#line 4816 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4817 
  ldv_del_timer_sync_97(& qdev->timer);
  
#line 4818 
  ql_cancel_all_work_sync(qdev);
  
#line 4819 
  ldv_unregister_netdev_98(ndev);
  
#line 4820 
  ql_release_all(pdev);
  
#line 4821 
  pci_disable_device(pdev);
  
#line 4822 
  ldv_free_netdev_99(ndev);
  
#line 4823 
  return;
}


#line 4826  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void ql_eeh_close(struct net_device *ndev)
{
  int i;
  bool tmp_0;
  
#line 4829 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4831 
  tmp_0 = netif_carrier_ok((struct net_device const *)ndev);
  
#line 4831 
  if ((int)tmp_0 != 0) {
    
#line 4832 
    netif_carrier_off(ndev);
    
#line 4833 
    netif_stop_queue(ndev);
  }
  else ;
  
#line 4837 
  ldv_del_timer_sync_100(& qdev->timer);
  
#line 4838 
  ql_cancel_all_work_sync(qdev);
  
#line 4840 
  i = 0;
  
#line 4840 
  goto ldv_56904;
  ldv_56903: 
#line 4841 
  ;
  
#line 4841 
  netif_napi_del(& qdev->rx_ring[i].napi);
  
#line 4840 
  i += 1;
  ldv_56904: 
#line 4841 
  ;
  
#line 4840 
  if (qdev->rss_ring_count > (unsigned int)i) 
#line 4842 
                                              goto ldv_56903; else 
#line 4845 
                                                                   goto ldv_56905;
  ldv_56905: 
#line 4846 
  ;
  
#line 4843 
  set_bit(0L,(unsigned long volatile *)(& qdev->flags));
  
#line 4844 
  ql_tx_ring_clean(qdev);
  
#line 4845 
  ql_free_rx_buffers(qdev);
  
#line 4846 
  ql_release_adapter_resources(qdev);
  
#line 4847 
  return;
}


#line 4853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static pci_ers_result_t qlge_io_error_detected(struct pci_dev *pdev, enum pci_channel_state state)
{
  pci_ers_result_t __retres;
  
#line 4856 
  struct net_device *ndev = pci_get_drvdata(pdev);
  
#line 4857 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4859 
  switch ((unsigned int)state) {
    bool tmp_1;
    case (unsigned int)1: 
#line 4860 
    ;
    
#line 4861 
    __retres = 2U;
    
#line 4861 
    goto return_label;
    case (unsigned int)2: 
#line 4862 
    ;
    
#line 4863 
    netif_device_detach(ndev);
    
#line 4864 
    tmp_1 = netif_running((struct net_device const *)ndev);
    
#line 4864 
    if ((int)tmp_1 != 0) 
#line 4865 
                         ql_eeh_close(ndev); else ;
    
#line 4866 
    pci_disable_device(pdev);
    
#line 4867 
    __retres = 3U;
    
#line 4867 
    goto return_label;
    case (unsigned int)3: 
#line 4868 
    ;
    
#line 4869 
    dev_err((struct device const *)(& pdev->dev),"%s: pci_channel_io_perm_failure.\n","qlge_io_error_detected");
    
#line 4871 
    ql_eeh_close(ndev);
    
#line 4872 
    set_bit(12L,(unsigned long volatile *)(& qdev->flags));
    
#line 4873 
    __retres = 4U;
    
#line 4873 
    goto return_label;
  }
  
#line 4877 
  __retres = 3U;
  return_label: 
#line 4877 
                return __retres;
}


#line 4886  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static pci_ers_result_t qlge_io_slot_reset(struct pci_dev *pdev)
{
  pci_ers_result_t __retres;
  int tmp_1;
  int tmp_2;
  
#line 4888 
  struct net_device *ndev = pci_get_drvdata(pdev);
  
#line 4889 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4891 
  pdev->error_state = 1U;
  
#line 4893 
  pci_restore_state(pdev);
  
#line 4894 
  tmp_1 = pci_enable_device(pdev);
  
#line 4894 
  if (tmp_1 != 0) {
    
#line 4895 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 4895 
                                        netdev_err((struct net_device const *)qdev->ndev,"Cannot re-enable PCI device after reset.\n"); else ;
    
#line 4897 
    __retres = 4U;
    
#line 4897 
    goto return_label;
  }
  else ;
  
#line 4899 
  pci_set_master(pdev);
  
#line 4901 
  tmp_2 = ql_adapter_reset(qdev);
  
#line 4901 
  if (tmp_2 != 0) {
    
#line 4902 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 4902 
                                       netdev_err((struct net_device const *)qdev->ndev,"reset FAILED!\n"); else ;
    
#line 4903 
    set_bit(12L,(unsigned long volatile *)(& qdev->flags));
    
#line 4904 
    __retres = 4U;
    
#line 4904 
    goto return_label;
  }
  else ;
  
#line 4907 
  __retres = 5U;
  return_label: 
#line 4907 
                return __retres;
}


#line 4910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void qlge_io_resume(struct pci_dev *pdev)
{
  bool tmp_1;
  
#line 4912 
  struct net_device *ndev = pci_get_drvdata(pdev);
  
#line 4913 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4914 
  int err = 0;
  
#line 4916 
  tmp_1 = netif_running((struct net_device const *)ndev);
  
#line 4916 
  if ((int)tmp_1 != 0) {
    
#line 4917 
    err = qlge_open(ndev);
    
#line 4918 
    if (err != 0) {
      
#line 4919 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 4919 
                                          netdev_err((struct net_device const *)qdev->ndev,"Device initialization failed after reset.\n"); else ;
      
#line 4921 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 4924 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 4924 
                                        netdev_err((struct net_device const *)qdev->ndev,"Device was not running prior to EEH.\n"); else ;
  
#line 4927 
  ldv_mod_timer_101(& qdev->timer,jiffies + 1250UL);
  
#line 4928 
  netif_device_attach(ndev);
  return_label: 
#line 4929 
                return;
}


#line 4931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct pci_error_handlers const qlge_err_handler = {.error_detected = & qlge_io_error_detected, .mmio_enabled = (pci_ers_result_t (*)(struct pci_dev *))0, .link_reset = (pci_ers_result_t (*)(struct pci_dev *))0, .slot_reset = & qlge_io_slot_reset, .reset_notify = (void (*)(struct pci_dev *, bool ))0, .resume = & qlge_io_resume};

#line 4937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_suspend(struct pci_dev *pdev, pm_message_t state)
{
  int __retres;
  int err;
  bool tmp_1;
  pci_power_t tmp_2;
  
#line 4939 
  struct net_device *ndev = pci_get_drvdata(pdev);
  
#line 4940 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4943 
  netif_device_detach(ndev);
  
#line 4944 
  ldv_del_timer_sync_102(& qdev->timer);
  
#line 4946 
  tmp_1 = netif_running((struct net_device const *)ndev);
  
#line 4946 
  if ((int)tmp_1 != 0) {
    
#line 4947 
    err = ql_adapter_down(qdev);
    
#line 4948 
    if (err == 0) {
      
#line 4949 
      __retres = err;
      
#line 4949 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4952 
  ql_wol(qdev);
  
#line 4953 
  err = pci_save_state(pdev);
  
#line 4954 
  if (err != 0) {
    
#line 4955 
    __retres = err;
    
#line 4955 
    goto return_label;
  }
  else ;
  
#line 4957 
  pci_disable_device(pdev);
  
#line 4959 
  tmp_2 = pci_choose_state(pdev,state);
  
#line 4959 
  ;
  
#line 4959 
  pci_set_power_state(pdev,tmp_2);
  
#line 4961 
  __retres = 0;
  return_label: 
#line 4961 
                return __retres;
}


#line 4965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_resume(struct pci_dev *pdev)
{
  int __retres;
  int err;
  bool tmp_1;
  
#line 4967 
  struct net_device *ndev = pci_get_drvdata(pdev);
  
#line 4968 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 4971 
  pci_set_power_state(pdev,0);
  
#line 4972 
  pci_restore_state(pdev);
  
#line 4973 
  err = pci_enable_device(pdev);
  
#line 4974 
  if (err != 0) {
    
#line 4975 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 4975 
                                        netdev_err((struct net_device const *)qdev->ndev,"Cannot enable PCI device from suspend\n"); else ;
    
#line 4976 
    __retres = err;
    
#line 4976 
    goto return_label;
  }
  else ;
  
#line 4978 
  pci_set_master(pdev);
  
#line 4980 
  pci_enable_wake(pdev,3,(_Bool)0);
  
#line 4981 
  pci_enable_wake(pdev,4,(_Bool)0);
  
#line 4983 
  tmp_1 = netif_running((struct net_device const *)ndev);
  
#line 4983 
  if ((int)tmp_1 != 0) {
    
#line 4984 
    err = ql_adapter_up(qdev);
    
#line 4985 
    if (err != 0) {
      
#line 4986 
      __retres = err;
      
#line 4986 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4989 
  ldv_mod_timer_103(& qdev->timer,jiffies + 1250UL);
  
#line 4990 
  netif_device_attach(ndev);
  
#line 4992 
  __retres = 0;
  return_label: 
#line 4992 
                return __retres;
}


#line 4996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void qlge_shutdown(struct pci_dev *pdev)
{
  
#line 4998 
  struct pm_message __constr_expr_43 = {.event = 2};
  
#line 4998 
  ;
  
#line 4998 
  qlge_suspend(pdev,__constr_expr_43);
  
#line 4999 
  return;
}


#line 5001  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static struct pci_driver qlge_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = "qlge", .id_table = (struct pci_device_id const *)(& qlge_pci_tbl), .probe = & qlge_probe, .remove = & qlge_remove, .suspend = & qlge_suspend, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = & qlge_resume, .shutdown = & qlge_shutdown, .sriov_configure = (int (*)(struct pci_dev *, int ))0, .err_handler = & qlge_err_handler, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = (struct dev_pm_ops const *)0, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 5014  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static int qlge_driver_init(void)
{
  int tmp;
  
#line 5014 
  tmp = ldv___pci_register_driver_104(& qlge_driver,& __this_module,"qlge");
  
#line 5014 
  return tmp;
}


#line 5014  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_main.c"
static void qlge_driver_exit(void)
{
  
#line 5014 
  ldv_pci_unregister_driver_105(& qlge_driver);
  
#line 5015 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int (*ldv_emg_alias_eth_validate_addr_8)(struct net_device *) = & eth_validate_addr;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
struct pci_driver *ldv_emg_alias_qlge_driver_2 = & qlge_driver;

#line 60 
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 61 
_Bool ldv_emg_queue_delayed_work_on(int arg0, struct workqueue_struct *arg1, struct delayed_work *arg2, unsigned long arg3);


#line 62 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 63 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 64 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 65 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 66 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 67 
_Bool ldv_emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);


#line 68 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 69 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 70 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 71 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
unsigned long long ldv_emg_wrapper_qlge_fix_features_11(struct net_device *arg0, unsigned long long arg1)
{
  unsigned long long tmp;
  
#line 76 
  tmp = qlge_fix_features(arg0,arg1);
  
#line 76 
  return tmp;
}


#line 80  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_resume_6(struct pci_dev *arg0)
{
  int tmp;
  
#line 81 
  tmp = qlge_resume(arg0);
  
#line 81 
  return tmp;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_set_mac_address_14(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 86 
  tmp = qlge_set_mac_address(arg0,arg1);
  
#line 86 
  return tmp;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
void ldv_emg_qlge_driver_exit(void)
{
  
#line 91 
  qlge_driver_exit();
  
#line 92 
  return;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
struct net_device_stats *ldv_emg_wrapper_qlge_get_stats_24(struct net_device *arg0)
{
  struct net_device_stats *tmp;
  
#line 95 
  tmp = qlge_get_stats(arg0);
  
#line 95 
  return tmp;
}


#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_set_features_9(struct net_device *arg0, unsigned long long arg1)
{
  int tmp;
  
#line 100 
  tmp = qlge_set_features(arg0,arg1);
  
#line 100 
  return tmp;
}


#line 104  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
void ldv_emg_wrapper_qlge_shutdown_2(struct pci_dev *arg0)
{
  
#line 105 
  qlge_shutdown(arg0);
  
#line 106 
  return;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_vlan_rx_kill_vid_29(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 110 
  tmp = qlge_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 110 
  return tmp;
}


#line 114  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_change_mtu_6(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 115 
  tmp = qlge_change_mtu(arg0,arg1);
  
#line 115 
  return tmp;
}


#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 120 
  tmp = qlge_close(arg0);
  
#line 120 
  return tmp;
}


#line 124  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
enum irqreturn ldv_emg_wrapper_qlge_isr_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 125 
  tmp = qlge_isr(arg0,arg1);
  
#line 125 
  return tmp;
}


#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_probe_3(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 130 
  tmp = qlge_probe(arg0,(struct pci_device_id const *)arg1);
  
#line 130 
  return tmp;
}


#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_qlge_driver_init(void)
{
  int tmp;
  
#line 135 
  tmp = qlge_driver_init();
  
#line 135 
  return tmp;
}


#line 138  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
void ldv_emg_wrapper_qlge_remove_5(struct pci_dev *arg0)
{
  
#line 139 
  qlge_remove(arg0);
  
#line 140 
  return;
}


#line 143  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 144 
  tmp = qlge_open(arg0);
  
#line 144 
  return tmp;
}


#line 148  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
enum netdev_tx ldv_emg_wrapper_qlge_send_13(struct sk_buff *arg0, struct net_device *arg1)
{
  enum netdev_tx tmp;
  
#line 149 
  tmp = qlge_send(arg0,arg1);
  
#line 149 
  return tmp;
}


#line 153  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_suspend_4(struct pci_dev *arg0, struct pm_message arg1)
{
  int tmp;
  
#line 154 
  tmp = qlge_suspend(arg0,arg1);
  
#line 154 
  return tmp;
}


#line 158  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
void ldv_emg_wrapper_qlge_tx_timeout_16(struct net_device *arg0)
{
  
#line 159 
  qlge_tx_timeout(arg0);
  
#line 160 
  return;
}


#line 163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
void ldv_emg_wrapper_qlge_set_multicast_list_28(struct net_device *arg0)
{
  
#line 164 
  qlge_set_multicast_list(arg0);
  
#line 165 
  return;
}


#line 168  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
int ldv_emg_wrapper_qlge_vlan_rx_add_vid_19(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 169 
  tmp = qlge_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 169 
  return tmp;
}


#line 227  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 230 
  ldv_atomic_inc(v);
  
#line 231 
  return;
}


#line 234  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void atomic_dec(atomic_t *v)
{
  
#line 237 
  ldv_atomic_dec(v);
  
#line 238 
  return;
}


#line 241  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int atomic_dec_and_test(atomic_t *v)
{
  int tmp;
  
#line 244 
  tmp = ldv_atomic_dec_and_test(v);
  
#line 244 
  return tmp;
}


#line 601  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 604 
  tmp = ldv_kmalloc(size,flags);
  
#line 604 
  return tmp;
}


#line 608  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 611 
  tmp = ldv_kmalloc_array(n,size,flags);
  
#line 611 
  return tmp;
}


#line 615  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 618 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 618 
  return tmp;
}


#line 878  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1)
{
  
#line 882 
  ldv_spin_model_lock((char *)"hw_lock_of_ql_adapter");
  
#line 884 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 885 
  return;
}


#line 888  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags)
{
  
#line 892 
  ldv_spin_model_unlock((char *)"hw_lock_of_ql_adapter");
  
#line 894 
  spin_unlock_irqrestore(lock,flags);
  
#line 895 
  return;
}


#line 898  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_spin_lock_78(spinlock_t *lock)
{
  
#line 902 
  ldv_spin_model_lock((char *)"hw_lock_of_ql_adapter");
  
#line 904 
  spin_lock(lock);
  
#line 905 
  return;
}


#line 908  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_spin_unlock_79(spinlock_t *lock)
{
  
#line 912 
  ldv_spin_model_unlock((char *)"hw_lock_of_ql_adapter");
  
#line 914 
  spin_unlock(lock);
  
#line 915 
  return;
}


#line 918  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static bool ldv_queue_delayed_work_80(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 922 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 922 
  __retres = tmp != 0;
  
#line 922 
  return __retres;
}


#line 926  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static bool ldv_queue_delayed_work_81(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 930 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 930 
  __retres = tmp != 0;
  
#line 930 
  return __retres;
}


#line 934  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static bool ldv_queue_delayed_work_82(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 938 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 938 
  __retres = tmp != 0;
  
#line 938 
  return __retres;
}


#line 942  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_spin_lock_83(spinlock_t *lock)
{
  
#line 946 
  ldv_spin_model_lock((char *)"hw_lock_of_ql_adapter");
  
#line 948 
  spin_lock(lock);
  
#line 949 
  return;
}


#line 952  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_spin_unlock_84(spinlock_t *lock)
{
  
#line 956 
  ldv_spin_model_unlock((char *)"hw_lock_of_ql_adapter");
  
#line 958 
  spin_unlock(lock);
  
#line 959 
  return;
}


#line 962  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_spin_unlock_85(spinlock_t *lock)
{
  
#line 966 
  ldv_spin_model_unlock((char *)"hw_lock_of_ql_adapter");
  
#line 968 
  spin_unlock(lock);
  
#line 969 
  return;
}


#line 972  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static bool ldv_queue_delayed_work_on_86(int ldv_func_arg1, struct workqueue_struct *ldv_func_arg2, struct delayed_work *ldv_func_arg3, unsigned long ldv_func_arg4)
{
  bool __retres;
  bool tmp;
  
#line 976 
  tmp = ldv_emg_queue_delayed_work_on(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3,ldv_func_arg4);
  
#line 976 
  __retres = tmp != 0;
  
#line 976 
  return __retres;
}


#line 980  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_free_irq_87(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 984 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 985 
  return;
}


#line 988  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_free_irq_88(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 992 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 993 
  return;
}


#line 996  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv_request_irq_89(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1000 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1000 
  return tmp;
}


#line 1004  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv_request_irq_90(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1008 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1008 
  return tmp;
}


#line 1012  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static bool ldv_queue_delayed_work_91(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 1016 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 1016 
  __retres = tmp != 0;
  
#line 1016 
  return __retres;
}


#line 1020  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv_mod_timer_92(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1024 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1024 
  return tmp;
}


#line 1028  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_93(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 1032 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1032 
  return tmp;
}


#line 1036  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_free_netdev_94(struct net_device *ldv_func_arg1)
{
  
#line 1040 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1041 
  return;
}


#line 1044  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv_register_netdev_95(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 1048 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 1048 
  return tmp;
}


#line 1052  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_free_netdev_96(struct net_device *ldv_func_arg1)
{
  
#line 1056 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1057 
  return;
}


#line 1060  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv_del_timer_sync_97(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1064 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1064 
  return tmp;
}


#line 1068  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_unregister_netdev_98(struct net_device *ldv_func_arg1)
{
  
#line 1072 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1073 
  return;
}


#line 1076  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_free_netdev_99(struct net_device *ldv_func_arg1)
{
  
#line 1080 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1081 
  return;
}


#line 1084  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv_del_timer_sync_100(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1088 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1088 
  return tmp;
}


#line 1092  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv_mod_timer_101(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1096 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1096 
  return tmp;
}


#line 1100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv_del_timer_sync_102(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1104 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1104 
  return tmp;
}


#line 1108  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv_mod_timer_103(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1112 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1112 
  return tmp;
}


#line 1116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static int ldv___pci_register_driver_104(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 1120 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 1120 
  return tmp;
}


#line 1124  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_main.c.aux"
static void ldv_pci_unregister_driver_105(struct pci_driver *ldv_func_arg1)
{
  
#line 1128 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 1129 
  return;
}


#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int snprintf(char *, size_t, char const * , ...);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_0(atomic_t *v);


#line 114 
static void atomic_dec_0(atomic_t *v);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_76(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_77(spinlock_t *lock);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
unsigned long msleep_interruptible(unsigned int);


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 2242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
int ql_mb_set_led_cfg(struct ql_adapter *qdev, u32 led_config);


#line 2243 
int ql_mb_get_led_cfg(struct ql_adapter *qdev);


#line 2247 
int ql_mb_get_port_cfg(struct ql_adapter *qdev);


#line 2248 
int ql_mb_set_port_cfg(struct ql_adapter *qdev);


#line 2250 
void ql_get_dump(struct ql_adapter *qdev, void *buff);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static struct ql_stats const ql_gstrings_stats[66U] = {{.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1104}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1112}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1120}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1128}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1136}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'t', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1144}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1152}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1160}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1168}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1176}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1184}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1192}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1200}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1208}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1216}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1224}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1232}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1240}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1248}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'o', (char)'k', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1256}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1264}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1272}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1280}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1288}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1296}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1304}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'f', (char)'c', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1312}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'e', (char)'v', (char)'e', (char)'n', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1320}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1328}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1336}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'y', (char)'m', (char)'b', (char)'o', (char)'l', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1344}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1352}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'t', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1360}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1368}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1376}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1384}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1392}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1400}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1408}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1416}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1424}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1432}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1440}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1448}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1456}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'r', (char)'e', (char)'a', (char)'m', (char)'b', (char)'l', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1464}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'l', (char)'e', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1472}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1480}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1488}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'0', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1496}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1504}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'2', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1512}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'3', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1520}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'4', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1528}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'5', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1536}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1544}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'7', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1552}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'0', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1560}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1568}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'2', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1576}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'3', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1584}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'4', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1592}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'5', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1600}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1608}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'b', (char)'f', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'7', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1616}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'i', (char)'c', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 1624}};

#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static char const ql_gstrings_test[1U][32U] = {{(char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}};

#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_update_ring_coalescing(struct ql_adapter *qdev)
{
  int __retres;
  int i;
  struct rx_ring *rx_ring;
  struct cqicb *cqicb;
  int tmp_0;
  bool tmp;
  
#line 187 
  int status = 0;
  
#line 191 
  tmp = netif_running((struct net_device const *)qdev->ndev);
  
#line 191 
  if (tmp) 
#line 191 
           tmp_0 = 0; else 
#line 191 
                           tmp_0 = 1;
  
#line 191 
  if (tmp_0) {
    
#line 192 
    __retres = status;
    
#line 192 
    goto return_label;
  }
  else ;
  
#line 197 
  cqicb = (struct cqicb *)(& qdev->rx_ring[qdev->rss_ring_count]);
  
#line 198 
  if ((int)cqicb->irq_delay != (int)qdev->tx_coalesce_usecs || (int)cqicb->pkt_delay != (int)qdev->tx_max_coalesced_frames) {
    
#line 201 
    i = (int)qdev->rss_ring_count;
    
#line 201 
    goto ldv_54653;
    ldv_54652: 
#line 202 
    ;
    
#line 202 
    rx_ring = & qdev->rx_ring[i];
    
#line 203 
    cqicb = (struct cqicb *)rx_ring;
    
#line 204 
    cqicb->irq_delay = qdev->tx_coalesce_usecs;
    
#line 205 
    cqicb->pkt_delay = qdev->tx_max_coalesced_frames;
    
#line 207 
    cqicb->flags = (unsigned char)64U;
    
#line 208 
    status = ql_write_cfg(qdev,(void *)cqicb,52,64U,(unsigned short)((int)rx_ring->cq_id));
    
#line 210 
    if (status != 0) {
      
#line 211 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 211 
                                          netdev_err((struct net_device const *)qdev->ndev,"Failed to load CQICB.\n"); else ;
      
#line 213 
      goto exit;
    }
    else ;
    
#line 201 
    i += 1;
    ldv_54653: 
#line 202 
    ;
    
#line 201 
    if (qdev->rx_ring_count > i) 
#line 203 
                                 goto ldv_54652; else 
#line 206 
                                                      goto ldv_54654;
    ldv_54654: 
#line 207 
    ;
  }
  else ;
  
#line 219 
  cqicb = (struct cqicb *)(& qdev->rx_ring[0]);
  
#line 220 
  if ((int)cqicb->irq_delay != (int)qdev->rx_coalesce_usecs || (int)cqicb->pkt_delay != (int)qdev->rx_max_coalesced_frames) {
    
#line 223 
    i = 0;
    
#line 223 
    goto ldv_54656;
    ldv_54655: 
#line 224 
    ;
    
#line 224 
    rx_ring = & qdev->rx_ring[i];
    
#line 225 
    cqicb = (struct cqicb *)rx_ring;
    
#line 226 
    cqicb->irq_delay = qdev->rx_coalesce_usecs;
    
#line 227 
    cqicb->pkt_delay = qdev->rx_max_coalesced_frames;
    
#line 229 
    cqicb->flags = (unsigned char)64U;
    
#line 230 
    status = ql_write_cfg(qdev,(void *)cqicb,52,64U,(unsigned short)((int)rx_ring->cq_id));
    
#line 232 
    if (status != 0) {
      
#line 233 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 233 
                                          netdev_err((struct net_device const *)qdev->ndev,"Failed to load CQICB.\n"); else ;
      
#line 235 
      goto exit;
    }
    else ;
    
#line 223 
    i += 1;
    
#line 223 
    rx_ring += 1;
    ldv_54656: 
#line 224 
    ;
    
#line 223 
    if (qdev->rss_ring_count > (unsigned int)i) 
#line 225 
                                                goto ldv_54655; else 
                                                                  
#line 228 
                                                                  goto ldv_54657;
    ldv_54657: 
#line 229 
    ;
  }
  else ;
  exit: 
#line 239 
  ;
  
#line 240 
  __retres = status;
  return_label: 
#line 240 
                return __retres;
}


#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_update_stats(struct ql_adapter *qdev)
{
  u32 i;
  u64 data;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  
#line 247 
  u64 *iter = & qdev->nic_stats.tx_pkts;
  
#line 249 
  ldv_spin_lock_76(& qdev->stats_lock);
  
#line 250 
  tmp = ql_sem_spinlock(qdev,qdev->xg_sem_mask);
  
#line 250 
  if (tmp != 0) {
    
#line 251 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 251 
                                       netdev_err((struct net_device const *)qdev->ndev,"Couldn\'t get xgmac sem.\n"); else ;
    
#line 253 
    goto quit;
  }
  else ;
  
#line 258 
  i = 512U;
  
#line 258 
  goto ldv_54667;
  ldv_54666: 
#line 259 
  ;
  
#line 259 
  tmp_0 = ql_read_xgmac_reg64(qdev,i,& data);
  
#line 259 
  if (tmp_0 != 0) {
    
#line 260 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 260 
                                       netdev_err((struct net_device const *)qdev->ndev,"Error reading status register 0x%.04x.\n",i); else ;
    
#line 263 
    goto end;
  }
  else 
#line 265 
       *iter = data;
  
#line 266 
  iter += 1;
  
#line 258 
  i += 8U;
  ldv_54667: 
#line 259 
  ;
  
#line 258 
  if (i <= 639U) 
#line 260 
                 goto ldv_54666; else 
#line 263 
                                      goto ldv_54668;
  ldv_54668: 
#line 264 
  ;
  
#line 272 
  i = 768U;
  
#line 272 
  goto ldv_54670;
  ldv_54669: 
#line 273 
  ;
  
#line 273 
  tmp_1 = ql_read_xgmac_reg64(qdev,i,& data);
  
#line 273 
  if (tmp_1 != 0) {
    
#line 274 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 274 
                                       netdev_err((struct net_device const *)qdev->ndev,"Error reading status register 0x%.04x.\n",i); else ;
    
#line 277 
    goto end;
  }
  else 
#line 279 
       *iter = data;
  
#line 280 
  iter += 1;
  
#line 272 
  i += 8U;
  ldv_54670: 
#line 273 
  ;
  
#line 272 
  if (i <= 975U) 
#line 274 
                 goto ldv_54669; else 
#line 277 
                                      goto ldv_54671;
  ldv_54671: 
#line 278 
  ;
  
#line 284 
  iter += 7U;
  
#line 289 
  i = 1280U;
  
#line 289 
  goto ldv_54673;
  ldv_54672: 
#line 290 
  ;
  
#line 290 
  tmp_2 = ql_read_xgmac_reg64(qdev,i,& data);
  
#line 290 
  if (tmp_2 != 0) {
    
#line 291 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 291 
                                       netdev_err((struct net_device const *)qdev->ndev,"Error reading status register 0x%.04x.\n",i); else ;
    
#line 294 
    goto end;
  }
  else 
#line 296 
       *iter = data;
  
#line 297 
  iter += 1;
  
#line 289 
  i += 8U;
  ldv_54673: 
#line 290 
  ;
  
#line 289 
  if (i <= 1343U) 
#line 291 
                  goto ldv_54672; else 
#line 294 
                                       goto ldv_54674;
  ldv_54674: 
#line 295 
  ;
  
#line 303 
  i = 1384U;
  
#line 303 
  goto ldv_54676;
  ldv_54675: 
#line 304 
  ;
  
#line 304 
  tmp_3 = ql_read_xgmac_reg64(qdev,i,& data);
  
#line 304 
  if (tmp_3 != 0) {
    
#line 305 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 305 
                                       netdev_err((struct net_device const *)qdev->ndev,"Error reading status register 0x%.04x.\n",i); else ;
    
#line 308 
    goto end;
  }
  else 
#line 310 
       *iter = data;
  
#line 311 
  iter += 1;
  
#line 303 
  i += 8U;
  ldv_54676: 
#line 304 
  ;
  
#line 303 
  if (i <= 1447U) 
#line 305 
                  goto ldv_54675; else 
#line 308 
                                       goto ldv_54677;
  ldv_54677: 
#line 309 
  ;
  
#line 317 
  tmp_4 = ql_read_xgmac_reg64(qdev,1464U,& data);
  
#line 317 
  if (tmp_4 != 0) {
    
#line 318 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 318 
                                       netdev_err((struct net_device const *)qdev->ndev,"Error reading status register 0x%.04x.\n",i); else ;
    
#line 320 
    goto end;
  }
  else 
#line 322 
       *iter = data;
  end: 
#line 323 
  ;
  
#line 324 
  ql_sem_unlock(qdev,qdev->xg_sem_mask);
  quit: 
#line 325 
  ;
  
#line 326 
  ldv_spin_unlock_77(& qdev->stats_lock);
  
#line 327 
  return;
}


#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_get_strings(struct net_device *dev, u32 stringset, u8 *buf)
{
  int index;
  
#line 334 
  switch (stringset) {
    case (u32)0: 
#line 335 
    ;
    
#line 336 
    memcpy((void *)buf,(void const *)(& ql_gstrings_test),32UL);
    
#line 337 
    goto ldv_54685;
    case (u32)1: 
#line 338 
    ;
    
#line 339 
    index = 0;
    
#line 339 
    goto ldv_54691;
    ldv_54690: 
#line 340 
    ;
    
#line 340 
    memcpy((void *)(buf + index * 32),(void const *)(& ql_gstrings_stats[index].stat_string),32UL);
    
#line 339 
    index += 1;
    ldv_54691: 
#line 340 
    ;
    
#line 339 
    if ((unsigned int)index <= 65U) 
#line 341 
                                    goto ldv_54690; else 
#line 344 
                                                         goto ldv_54692;
    ldv_54692: 
#line 345 
    ;
    
#line 344 
    goto ldv_54685;
  }
  ldv_54685: 
#line 346 
  ;
  
#line 347 
  return;
}


#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_get_sset_count(struct net_device *dev, int sset)
{
  int __retres;
  
#line 350 
  switch (sset) {
    case 0: 
#line 351 
    ;
    
#line 352 
    __retres = 1;
    
#line 352 
    goto return_label;
    case 1: 
#line 353 
    ;
    
#line 354 
    __retres = 66;
    
#line 354 
    goto return_label;
    default: 
#line 355 
    ;
    
#line 356 
    __retres = -95;
    
#line 356 
    goto return_label;
  }
  return_label: 
#line 350 
                return __retres;
}


#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_get_ethtool_stats(struct net_device *ndev, struct ethtool_stats *stats, u64 *data)
{
  int index;
  int length;
  
#line 364 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 367 
  length = 66;
  
#line 368 
  ql_update_stats(qdev);
  
#line 370 
  index = 0;
  
#line 370 
  goto ldv_54716;
  ldv_54715: 
#line 371 
  ;
  {
    u64 *tmp_0;
    
#line 371 
    char *p = (char *)qdev + ql_gstrings_stats[index].stat_offset;
    
#line 373 
    tmp_0 = data;
    
#line 373 
    data += 1;
    
#line 373 
    if (ql_gstrings_stats[index].sizeof_stat == 8) 
#line 373 
                                                   *tmp_0 = *((u64 *)p); else 
                                                                    
#line 373 
                                                                    *tmp_0 = (unsigned long long)*((u32 *)p);
  }
  
#line 370 
  index += 1;
  ldv_54716: 
#line 371 
  ;
  
#line 370 
  if (index < length) 
#line 372 
                      goto ldv_54715; else 
#line 375 
                                           goto ldv_54717;
  ldv_54717: 
#line 376 
  ;
  
#line 377 
  return;
}


#line 378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_get_settings(struct net_device *ndev, struct ethtool_cmd *ecmd)
{
  int __retres;
  
#line 381 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 383 
  ecmd->supported = 4096U;
  
#line 384 
  ecmd->advertising = 4096U;
  
#line 385 
  ecmd->transceiver = (unsigned char)1U;
  
#line 386 
  if ((qdev->link_status & 7U) == 5U) {
    
#line 388 
    ecmd->supported |= 192U;
    
#line 389 
    ecmd->advertising |= 192U;
    
#line 390 
    ecmd->port = (unsigned char)0U;
    
#line 391 
    ecmd->autoneg = (unsigned char)1U;
  }
  else {
    
#line 393 
    ecmd->supported |= 1024U;
    
#line 394 
    ecmd->advertising |= 1024U;
    
#line 395 
    ecmd->port = (unsigned char)3U;
  }
  
#line 398 
  ethtool_cmd_speed_set(ecmd,10000U);
  
#line 399 
  ecmd->duplex = (unsigned char)1U;
  
#line 401 
  __retres = 0;
  
#line 401 
  return __retres;
}


#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_get_drvinfo(struct net_device *ndev, struct ethtool_drvinfo *drvinfo)
{
  char const *tmp_0;
  int tmp_1;
  
#line 407 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 408 
  strlcpy((char *)(& drvinfo->driver),(char const *)(& qlge_driver_name),32UL);
  
#line 409 
  strlcpy((char *)(& drvinfo->version),(char const *)(& qlge_driver_version),32UL);
  
#line 411 
  snprintf((char *)(& drvinfo->fw_version),32UL,"v%d.%d.%d",(qdev->fw_rev_id >> 16) & 255U,(qdev->fw_rev_id >> 8) & 255U,qdev->fw_rev_id & 255U);
  
#line 416 
  tmp_0 = pci_name((struct pci_dev const *)qdev->pdev);
  
#line 416 
  ;
  
#line 416 
  strlcpy((char *)(& drvinfo->bus_info),tmp_0,32UL);
  
#line 418 
  drvinfo->n_stats = 0U;
  
#line 419 
  drvinfo->testinfo_len = 0U;
  
#line 420 
  tmp_1 = constant_test_bit(11L,(unsigned long const volatile *)(& qdev->flags));
  
#line 420 
  if (tmp_1 == 0) 
#line 421 
                  drvinfo->regdump_len = 176196U; else 
#line 423 
                                                       drvinfo->regdump_len = 1432U;
  
#line 424 
  drvinfo->eedump_len = 0U;
  
#line 425 
  return;
}


#line 427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_get_wol(struct net_device *ndev, struct ethtool_wolinfo *wol)
{
  
#line 429 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 430 
  unsigned short ssys_dev = (qdev->pdev)->subsystem_device;
  
#line 433 
  if ((unsigned int)ssys_dev == 104U || (unsigned int)ssys_dev == 384U) {
    
#line 435 
    wol->supported = 32U;
    
#line 436 
    wol->wolopts = qdev->wol;
  }
  else ;
  
#line 438 
  return;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_set_wol(struct net_device *ndev, struct ethtool_wolinfo *wol)
{
  int __retres;
  
#line 442 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 443 
  unsigned short ssys_dev = (qdev->pdev)->subsystem_device;
  
#line 446 
  if ((unsigned int)ssys_dev != 104U && (unsigned int)ssys_dev != 384U) {
    
#line 448 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 448 
                                       netdev_info((struct net_device const *)qdev->ndev,"WOL is only supported for mezz card\n"); else ;
    
#line 450 
    __retres = -95;
    
#line 450 
    goto return_label;
  }
  else ;
  
#line 452 
  if ((wol->wolopts & 4294967263U) != 0U) {
    
#line 453 
    __retres = -22;
    
#line 453 
    goto return_label;
  }
  else ;
  
#line 454 
  qdev->wol = wol->wolopts;
  
#line 456 
  if ((qdev->msg_enable & 1U) != 0U) 
#line 456 
                                     netdev_info((struct net_device const *)qdev->ndev,"Set wol option 0x%x\n",qdev->wol); else ;
  
#line 457 
  __retres = 0;
  return_label: 
#line 457 
                return __retres;
}


#line 460  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_set_phys_id(struct net_device *ndev, enum ethtool_phys_id_state state)
{
  int __retres;
  
#line 464 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 466 
  switch ((unsigned int)state) {
    int tmp_0;
    int tmp_1;
    case (unsigned int)1: 
#line 467 
    ;
    
#line 469 
    tmp_0 = ql_mb_get_led_cfg(qdev);
    
#line 469 
    if (tmp_0 != 0) {
      
#line 470 
      __retres = -5;
      
#line 470 
      goto return_label;
    }
    else ;
    
#line 473 
    ql_mb_set_led_cfg(qdev,65537000U);
    
#line 474 
    __retres = 0;
    
#line 474 
    goto return_label;
    case (unsigned int)0: 
#line 476 
    ;
    
#line 478 
    tmp_1 = ql_mb_set_led_cfg(qdev,qdev->led_config);
    
#line 478 
    if (tmp_1 != 0) {
      
#line 479 
      __retres = -5;
      
#line 479 
      goto return_label;
    }
    else ;
    
#line 480 
    __retres = 0;
    
#line 480 
    goto return_label;
    default: 
#line 482 
    ;
    
#line 483 
    __retres = -22;
    
#line 483 
    goto return_label;
  }
  return_label: 
#line 466 
                return __retres;
}


#line 487  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_start_loopback(struct ql_adapter *qdev)
{
  bool tmp;
  int tmp_0;
  
#line 489 
  tmp = netif_carrier_ok((struct net_device const *)qdev->ndev);
  
#line 489 
  if ((int)tmp != 0) {
    
#line 490 
    set_bit(10L,(unsigned long volatile *)(& qdev->flags));
    
#line 491 
    netif_carrier_off(qdev->ndev);
  }
  else 
#line 493 
       set_bit(10L,(unsigned long volatile *)(& qdev->flags));
  
#line 494 
  qdev->link_config |= 2U;
  
#line 495 
  tmp_0 = ql_mb_set_port_cfg(qdev);
  
#line 495 
  return tmp_0;
}


#line 498  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_stop_loopback(struct ql_adapter *qdev)
{
  int tmp;
  
#line 500 
  qdev->link_config &= 4294967293U;
  
#line 501 
  ql_mb_set_port_cfg(qdev);
  
#line 502 
  tmp = constant_test_bit(10L,(unsigned long const volatile *)(& qdev->flags));
  
#line 502 
  if (tmp != 0) {
    
#line 503 
    netif_carrier_on(qdev->ndev);
    
#line 504 
    set_bit(10L,(unsigned long volatile *)(& qdev->flags));
  }
  else ;
  
#line 506 
  return;
}


#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_create_lb_frame(struct sk_buff *skb, unsigned int frame_size)
{
  
#line 511 
  memset((void *)skb->data,255,(unsigned long)frame_size);
  
#line 512 
  frame_size &= 4294967294U;
  
#line 513 
  memset((void *)(skb->data + frame_size / 2U),170,(unsigned long)(frame_size / 2U + 4294967295U));
  
#line 514 
  memset((void *)(skb->data + (frame_size / 2U + 10U)),190,1UL);
  
#line 515 
  memset((void *)(skb->data + (frame_size / 2U + 12U)),175,1UL);
  
#line 516 
  return;
}


#line 518  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
void ql_check_lb_frame(struct ql_adapter *qdev, struct sk_buff *skb)
{
  
#line 521 
  unsigned int frame_size = skb->len;
  
#line 523 
  if (((unsigned int)*(skb->data + 3U) == 255U && (unsigned int)*(skb->data + (frame_size / 2U + 10U)) == 190U) && (unsigned int)*(skb->data + (frame_size / 2U + 12U)) == 175U) {
    
#line 526 
    atomic_dec_0(& qdev->lb_count);
    
#line 527 
    goto return_label;
  }
  else ;
  return_label: 
#line 529 
                return;
}


#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_run_loopback_test(struct ql_adapter *qdev)
{
  int __retres;
  int i;
  netdev_tx_t rc;
  struct sk_buff *skb;
  int tmp_0;
  int tmp;
  
#line 536 
  unsigned int size = 256U;
  
#line 538 
  i = 0;
  
#line 538 
  goto ldv_54771;
  ldv_54770: 
#line 539 
  ;
  
#line 539 
  skb = netdev_alloc_skb(qdev->ndev,size);
  
#line 540 
  if (skb == (struct sk_buff *)0) {
    
#line 541 
    __retres = -12;
    
#line 541 
    goto return_label;
  }
  else ;
  
#line 543 
  skb->queue_mapping = (unsigned short)0U;
  
#line 544 
  skb_put(skb,size);
  
#line 545 
  ql_create_lb_frame(skb,size);
  
#line 546 
  rc = ql_lb_send(skb,qdev->ndev);
  
#line 547 
  if (rc != (unsigned int)NETDEV_TX_OK) {
    
#line 548 
    __retres = -32;
    
#line 548 
    goto return_label;
  }
  else ;
  
#line 549 
  atomic_inc_0(& qdev->lb_count);
  
#line 538 
  i += 1;
  ldv_54771: 
#line 539 
  ;
  
#line 538 
  if (i <= 63) 
#line 540 
               goto ldv_54770; else 
#line 543 
                                    goto ldv_54772;
  ldv_54772: 
#line 544 
  ;
  
#line 552 
  msleep(2U);
  
#line 553 
  ql_clean_lb_rx_ring(& qdev->rx_ring[0],128);
  
#line 554 
  tmp = atomic_read((atomic_t const *)(& qdev->lb_count));
  
#line 554 
  if (tmp != 0) 
#line 554 
                tmp_0 = -5; else 
#line 554 
                                 tmp_0 = 0;
  
#line 554 
  __retres = tmp_0;
  return_label: 
#line 554 
                return __retres;
}


#line 557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_loopback_test(struct ql_adapter *qdev, u64 *data)
{
  int __retres;
  int tmp;
  int tmp_0;
  
#line 559 
  tmp = ql_start_loopback(qdev);
  
#line 559 
  *data = (unsigned long long)tmp;
  
#line 560 
  if (*data != 0ULL) 
#line 561 
                     goto out; else ;
  
#line 562 
  tmp_0 = ql_run_loopback_test(qdev);
  
#line 562 
  *data = (unsigned long long)tmp_0;
  out: 
#line 563 
  ;
  
#line 564 
  ql_stop_loopback(qdev);
  
#line 565 
  __retres = (int)*data;
  
#line 565 
  return __retres;
}


#line 568  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_self_test(struct net_device *ndev, struct ethtool_test *eth_test, u64 *data)
{
  bool tmp_1;
  
#line 571 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 573 
  memset((void *)data,0,8UL);
  
#line 575 
  tmp_1 = netif_running((struct net_device const *)ndev);
  
#line 575 
  if ((int)tmp_1 != 0) {
    
#line 576 
    set_bit(9L,(unsigned long volatile *)(& qdev->flags));
    
#line 577 
    if (eth_test->flags == 1U) {
      int tmp_0;
      
#line 579 
      tmp_0 = ql_loopback_test(qdev,data);
      
#line 579 
      if (tmp_0 != 0) 
#line 580 
                      eth_test->flags |= 2U; else ;
    }
    else 
#line 584 
         *data = 0ULL;
    
#line 586 
    set_bit(9L,(unsigned long volatile *)(& qdev->flags));
    
#line 590 
    msleep_interruptible(4000U);
  }
  else {
    
#line 592 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 592 
                                       netdev_err((struct net_device const *)qdev->ndev,"is down, Loopback test will fail.\n"); else ;
    
#line 594 
    eth_test->flags |= 2U;
  }
  
#line 596 
  return;
}


#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_get_regs_len(struct net_device *ndev)
{
  int __retres;
  int tmp_0;
  
#line 600 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 602 
  tmp_0 = constant_test_bit(11L,(unsigned long const volatile *)(& qdev->flags));
  
#line 602 
  if (tmp_0 == 0) {
    
#line 603 
    __retres = 176196;
    
#line 603 
    goto return_label;
  }
  else {
    
#line 605 
    __retres = 1432;
    
#line 605 
    goto return_label;
  }
  return_label: 
#line 602 
                return __retres;
}


#line 608  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_get_regs(struct net_device *ndev, struct ethtool_regs *regs, void *p)
{
  int tmp_0;
  
#line 611 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 613 
  ql_get_dump(qdev,p);
  
#line 614 
  qdev->core_is_dumped = 0U;
  
#line 615 
  tmp_0 = constant_test_bit(11L,(unsigned long const volatile *)(& qdev->flags));
  
#line 615 
  if (tmp_0 == 0) 
#line 616 
                  regs->len = 176196U; else 
#line 618 
                                            regs->len = 1432U;
  
#line 619 
  return;
}


#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_get_coalesce(struct net_device *dev, struct ethtool_coalesce *c)
{
  int __retres;
  
#line 623 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)dev);
  
#line 625 
  c->rx_coalesce_usecs = (unsigned int)qdev->rx_coalesce_usecs;
  
#line 626 
  c->tx_coalesce_usecs = (unsigned int)qdev->tx_coalesce_usecs;
  
#line 638 
  c->rx_max_coalesced_frames = (unsigned int)qdev->rx_max_coalesced_frames;
  
#line 639 
  c->tx_max_coalesced_frames = (unsigned int)qdev->tx_max_coalesced_frames;
  
#line 641 
  __retres = 0;
  
#line 641 
  return __retres;
}


#line 644  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_set_coalesce(struct net_device *ndev, struct ethtool_coalesce *c)
{
  int __retres;
  int tmp_0;
  
#line 646 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 649 
  if (c->rx_coalesce_usecs > (unsigned int)(qdev->rx_ring_size / 2)) {
    
#line 650 
    __retres = -22;
    
#line 650 
    goto return_label;
  }
  else ;
  
#line 652 
  if (c->rx_max_coalesced_frames > 10U) {
    
#line 653 
    __retres = -22;
    
#line 653 
    goto return_label;
  }
  else ;
  
#line 654 
  if (c->tx_coalesce_usecs > (unsigned int)(qdev->tx_ring_size / 2)) {
    
#line 655 
    __retres = -22;
    
#line 655 
    goto return_label;
  }
  else ;
  
#line 656 
  if (c->tx_max_coalesced_frames > 10U) {
    
#line 657 
    __retres = -22;
    
#line 657 
    goto return_label;
  }
  else ;
  
#line 660 
  if ((((unsigned int)qdev->rx_coalesce_usecs == c->rx_coalesce_usecs && (unsigned int)qdev->tx_coalesce_usecs == c->tx_coalesce_usecs) && (unsigned int)qdev->rx_max_coalesced_frames == c->rx_max_coalesced_frames) && (unsigned int)qdev->tx_max_coalesced_frames == c->tx_max_coalesced_frames) {
    
#line 664 
    __retres = 0;
    
#line 664 
    goto return_label;
  }
  else ;
  
#line 666 
  qdev->rx_coalesce_usecs = (unsigned short)c->rx_coalesce_usecs;
  
#line 667 
  qdev->tx_coalesce_usecs = (unsigned short)c->tx_coalesce_usecs;
  
#line 668 
  qdev->rx_max_coalesced_frames = (unsigned short)c->rx_max_coalesced_frames;
  
#line 669 
  qdev->tx_max_coalesced_frames = (unsigned short)c->tx_max_coalesced_frames;
  
#line 671 
  tmp_0 = ql_update_ring_coalescing(qdev);
  
#line 671 
  __retres = tmp_0;
  return_label: 
#line 671 
                return __retres;
}


#line 674  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  
#line 677 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)netdev);
  
#line 679 
  ql_mb_get_port_cfg(qdev);
  
#line 680 
  if ((qdev->link_config & 32U) != 0U) {
    
#line 681 
    pause->rx_pause = 1U;
    
#line 682 
    pause->tx_pause = 1U;
  }
  else ;
  
#line 684 
  return;
}


#line 686  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static int ql_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  int __retres;
  
#line 689 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)netdev);
  
#line 690 
  int status = 0;
  
#line 692 
  if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
#line 693 
                                                      qdev->link_config |= 32U;
  else 
    
#line 694 
    if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
#line 695 
                                                        qdev->link_config &= 4294967263U;
    else {
      
#line 697 
      __retres = -22;
      
#line 697 
      goto return_label;
    }
  
#line 699 
  status = ql_mb_set_port_cfg(qdev);
  
#line 700 
  __retres = status;
  return_label: 
#line 700 
                return __retres;
}


#line 703  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static u32 ql_get_msglevel(struct net_device *ndev)
{
  u32 __retres;
  
#line 705 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 706 
  __retres = qdev->msg_enable;
  
#line 706 
  return __retres;
}


#line 709  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
static void ql_set_msglevel(struct net_device *ndev, u32 value)
{
  
#line 711 
  struct ql_adapter *qdev = netdev_priv((struct net_device const *)ndev);
  
#line 712 
  qdev->msg_enable = value;
  
#line 713 
  return;
}


#line 715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_ethtool.c"
struct ethtool_ops const qlge_ethtool_ops = {.get_settings = & ql_get_settings, .set_settings = (int (*)(struct net_device *, struct ethtool_cmd *))0, .get_drvinfo = & ql_get_drvinfo, .get_regs_len = & ql_get_regs_len, .get_regs = & ql_get_regs, .get_wol = & ql_get_wol, .set_wol = & ql_set_wol, .get_msglevel = & ql_get_msglevel, .set_msglevel = & ql_set_msglevel, .nway_reset = (int (*)(struct net_device *))0, .get_link = & ethtool_op_get_link, .get_eeprom_len = (int (*)(struct net_device *))0, .get_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = & ql_get_coalesce, .set_coalesce = & ql_set_coalesce, .get_ringparam = (void (*)(struct net_device *, struct ethtool_ringparam *))0, .set_ringparam = (int (*)(struct net_device *, struct ethtool_ringparam *))0, .get_pauseparam = & ql_get_pauseparam, .set_pauseparam = & ql_set_pauseparam, .self_test = & ql_self_test, .get_strings = & ql_get_strings, .set_phys_id = & ql_set_phys_id, .get_ethtool_stats = & ql_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & ql_get_sset_count, .get_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *))0, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = (void (*)(struct net_device *, struct ethtool_channels *))0, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_3)(struct net_device *) = & ethtool_op_get_link;

#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
void ldv_emg_wrapper_ql_get_regs_22(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  
#line 75 
  ql_get_regs(arg0,arg1,arg2);
  
#line 76 
  return;
}


#line 79  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
void ldv_emg_wrapper_ql_get_strings_5(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 80 
  ql_get_strings(arg0,arg1,arg2);
  
#line 81 
  return;
}


#line 84  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
void ldv_emg_wrapper_ql_get_pauseparam_2(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  
#line 85 
  ql_get_pauseparam(arg0,arg1);
  
#line 86 
  return;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
int ldv_emg_wrapper_ql_set_pauseparam_30(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  int tmp;
  
#line 90 
  tmp = ql_set_pauseparam(arg0,arg1);
  
#line 90 
  return tmp;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
int ldv_emg_wrapper_ql_set_coalesce_27(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 95 
  tmp = ql_set_coalesce(arg0,arg1);
  
#line 95 
  return tmp;
}


#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
void ldv_emg_wrapper_ql_get_wol_18(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  
#line 100 
  ql_get_wol(arg0,arg1);
  
#line 101 
  return;
}


#line 104  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
int ldv_emg_wrapper_ql_set_wol_21(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  int tmp;
  
#line 105 
  tmp = ql_set_wol(arg0,arg1);
  
#line 105 
  return tmp;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
void ldv_emg_wrapper_ql_self_test_17(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  
#line 110 
  ql_self_test(arg0,arg1,arg2);
  
#line 111 
  return;
}


#line 114  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
void ldv_emg_wrapper_ql_get_drvinfo_10(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 115 
  ql_get_drvinfo(arg0,arg1);
  
#line 116 
  return;
}


#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
void ldv_emg_wrapper_ql_get_ethtool_stats_7(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 120 
  ql_get_ethtool_stats(arg0,arg1,arg2);
  
#line 121 
  return;
}


#line 124  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
int ldv_emg_wrapper_ql_get_coalesce_20(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 125 
  tmp = ql_get_coalesce(arg0,arg1);
  
#line 125 
  return tmp;
}


#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
int ldv_emg_wrapper_ql_get_settings_15(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 130 
  tmp = ql_get_settings(arg0,arg1);
  
#line 130 
  return tmp;
}


#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
int ldv_emg_wrapper_ql_get_sset_count_23(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 135 
  tmp = ql_get_sset_count(arg0,arg1);
  
#line 135 
  return tmp;
}


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
unsigned int ldv_emg_wrapper_ql_get_msglevel_12(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 140 
  tmp = ql_get_msglevel(arg0);
  
#line 140 
  return tmp;
}


#line 144  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
void ldv_emg_wrapper_ql_set_msglevel_25(struct net_device *arg0, unsigned int arg1)
{
  
#line 145 
  ql_set_msglevel(arg0,arg1);
  
#line 146 
  return;
}


#line 149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
int ldv_emg_wrapper_ql_set_phys_id_4(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  int tmp;
  
#line 150 
  tmp = ql_set_phys_id(arg0,arg1);
  
#line 150 
  return tmp;
}


#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
int ldv_emg_wrapper_ql_get_regs_len_26(struct net_device *arg0)
{
  int tmp;
  
#line 155 
  tmp = ql_get_regs_len(arg0);
  
#line 155 
  return tmp;
}


#line 213  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
static void atomic_inc_0(atomic_t *v)
{
  
#line 216 
  ldv_atomic_inc(v);
  
#line 217 
  return;
}


#line 220  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
static void atomic_dec_0(atomic_t *v)
{
  
#line 223 
  ldv_atomic_dec(v);
  
#line 224 
  return;
}


#line 864  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
static void ldv_spin_lock_76(spinlock_t *lock)
{
  
#line 868 
  ldv_spin_model_lock((char *)"stats_lock_of_ql_adapter");
  
#line 870 
  spin_lock_0(lock);
  
#line 871 
  return;
}


#line 874  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_ethtool.c.aux"
static void ldv_spin_unlock_77(spinlock_t *lock)
{
  
#line 878 
  ldv_spin_model_unlock((char *)"stats_lock_of_ql_adapter");
  
#line 880 
  spin_unlock_0(lock);
  
#line 881 
  return;
}


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_mpi.c.aux"
static void ldv_mutex_lock_77(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_79(struct mutex *ldv_func_arg1);


#line 47 
void ldv_mutex_model_lock(struct mutex *, char *);


#line 49 
void ldv_mutex_model_unlock(struct mutex *, char *);


#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/completion.h"
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);


#line 106 
void complete(struct completion *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_queue_delayed_work_75(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 509 
static bool ldv_queue_delayed_work_76(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 513 
static bool ldv_queue_delayed_work_81_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1);


#line 2231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge.h"
int ql_write_mpi_reg(struct ql_adapter *qdev, u32 reg, u32 data);


#line 2232 
int ql_unpause_mpi_risc(struct ql_adapter *qdev);


#line 2233 
int ql_pause_mpi_risc(struct ql_adapter *qdev);


#line 2234 
int ql_hard_reset_mpi_risc(struct ql_adapter *qdev);


#line 2235 
int ql_soft_reset_mpi_risc(struct ql_adapter *qdev);


#line 2236 
int ql_dump_risc_ram_area(struct ql_adapter *qdev, void *buf, u32 ram_addr, int word_count);


#line 2238 
int ql_core_dump(struct ql_adapter *qdev, struct ql_mpi_coredump *mpi_coredump);


#line 2253 
int ql_own_firmware(struct ql_adapter *qdev);


#line 3  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_unpause_mpi_risc(struct ql_adapter *qdev)
{
  int __retres;
  u32 tmp;
  
#line 8 
  tmp = ql_read32((struct ql_adapter const *)qdev,20);
  
#line 9 
  if ((tmp & 1024U) == 0U) {
    
#line 10 
    __retres = -5;
    
#line 10 
    goto return_label;
  }
  else ;
  
#line 12 
  ql_write32((struct ql_adapter const *)qdev,20,1073741824U);
  
#line 13 
  __retres = 0;
  return_label: 
#line 13 
                return __retres;
}


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_pause_mpi_risc(struct ql_adapter *qdev)
{
  u32 tmp;
  int tmp_1;
  
#line 19 
  int count = 3;
  
#line 22 
  ql_write32((struct ql_adapter const *)qdev,20,805306368U);
  ldv_47270: 
#line 23 
  ;
  
#line 24 
  tmp = ql_read32((struct ql_adapter const *)qdev,20);
  
#line 25 
  if ((tmp & 1024U) != 0U) 
#line 26 
                           goto ldv_47265; else ;
  {
    
#line 27 
    unsigned long __ms = 100UL;
    {
      unsigned long tmp_0;
      
#line 27 
      goto ldv_47268;
      ldv_47267: 
#line 28 
      ;
      
#line 27 
      __const_udelay(4295000UL);
      ldv_47268: 
#line 29 
      ;
      
#line 27 
      tmp_0 = __ms;
      
#line 27 
      __ms -= 1UL;
      
#line 27 
      ;
      
#line 27 
      if (tmp_0 != 0UL) 
#line 29 
                        goto ldv_47267; else 
#line 32 
                                             goto ldv_47269;
      ldv_47269: 
#line 33 
      ;
    }
  }
  
#line 28 
  count -= 1;
  
#line 29 
  if (count != 0) 
#line 31 
                  goto ldv_47270; else 
#line 34 
                                       goto ldv_47265;
  ldv_47265: 
#line 35 
  ;
  
#line 30 
  if (count == 0) 
#line 30 
                  tmp_1 = -110; else 
#line 30 
                                     tmp_1 = 0;
  
#line 30 
  return tmp_1;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_hard_reset_mpi_risc(struct ql_adapter *qdev)
{
  u32 tmp;
  int tmp_1;
  
#line 36 
  int count = 3;
  
#line 39 
  ql_write32((struct ql_adapter const *)qdev,20,268435456U);
  ldv_47281: 
#line 40 
  ;
  
#line 41 
  tmp = ql_read32((struct ql_adapter const *)qdev,20);
  
#line 42 
  if ((tmp & 256U) != 0U) {
    
#line 43 
    ql_write32((struct ql_adapter const *)qdev,20,536870912U);
    
#line 44 
    goto ldv_47276;
  }
  else ;
  {
    
#line 46 
    unsigned long __ms = 100UL;
    {
      unsigned long tmp_0;
      
#line 46 
      goto ldv_47279;
      ldv_47278: 
#line 47 
      ;
      
#line 46 
      __const_udelay(4295000UL);
      ldv_47279: 
#line 48 
      ;
      
#line 46 
      tmp_0 = __ms;
      
#line 46 
      __ms -= 1UL;
      
#line 46 
      ;
      
#line 46 
      if (tmp_0 != 0UL) 
#line 48 
                        goto ldv_47278; else 
#line 51 
                                             goto ldv_47280;
      ldv_47280: 
#line 52 
      ;
    }
  }
  
#line 47 
  count -= 1;
  
#line 48 
  if (count != 0) 
#line 50 
                  goto ldv_47281; else 
#line 53 
                                       goto ldv_47276;
  ldv_47276: 
#line 54 
  ;
  
#line 49 
  if (count == 0) 
#line 49 
                  tmp_1 = -110; else 
#line 49 
                                     tmp_1 = 0;
  
#line 49 
  return tmp_1;
}


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_read_mpi_reg(struct ql_adapter *qdev, u32 reg, u32 *data)
{
  int status;
  
#line 56 
  status = ql_wait_reg_rdy(qdev,0U,2147483648U,536870912U);
  
#line 57 
  if (status != 0) 
#line 58 
                   goto exit; else ;
  
#line 60 
  ql_write32((struct ql_adapter const *)qdev,0,reg | 1073741824U);
  
#line 62 
  status = ql_wait_reg_rdy(qdev,0U,2147483648U,536870912U);
  
#line 63 
  if (status != 0) 
#line 64 
                   goto exit; else ;
  
#line 66 
  *data = ql_read32((struct ql_adapter const *)qdev,4);
  exit: 
#line 67 
  ;
  
#line 68 
  return status;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_write_mpi_reg(struct ql_adapter *qdev, u32 reg, u32 data)
{
  
#line 73 
  int status = 0;
  
#line 75 
  status = ql_wait_reg_rdy(qdev,0U,2147483648U,536870912U);
  
#line 76 
  if (status != 0) 
#line 77 
                   goto exit; else ;
  
#line 79 
  ql_write32((struct ql_adapter const *)qdev,4,data);
  
#line 81 
  ql_write32((struct ql_adapter const *)qdev,0,reg);
  
#line 83 
  status = ql_wait_reg_rdy(qdev,0U,2147483648U,536870912U);
  
#line 84 
  if (status != 0) 
#line 85 
                   goto exit; else ;
  exit: 
#line 86 
  ;
  
#line 87 
  return status;
}


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_soft_reset_mpi_risc(struct ql_adapter *qdev)
{
  int status;
  
#line 93 
  status = ql_write_mpi_reg(qdev,4112U,1U);
  
#line 94 
  return status;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_own_firmware(struct ql_adapter *qdev)
{
  int __retres;
  u32 temp;
  
#line 110 
  if (qdev->func < qdev->alt_func) {
    
#line 111 
    __retres = 1;
    
#line 111 
    goto return_label;
  }
  else ;
  
#line 118 
  temp = ql_read32((struct ql_adapter const *)qdev,48);
  
#line 119 
  if (((unsigned int)(1 << (qdev->alt_func + 8U)) & temp) == 0U) {
    
#line 120 
    __retres = 1;
    
#line 120 
    goto return_label;
  }
  else ;
  
#line 122 
  __retres = 0;
  return_label: 
#line 122 
                return __retres;
}


#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_get_mb_sts(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int __retres;
  int i;
  int status;
  
#line 130 
  status = ql_sem_spinlock(qdev,3221225472U);
  
#line 131 
  if (status != 0) {
    
#line 132 
    __retres = -16;
    
#line 132 
    goto return_label;
  }
  else ;
  
#line 133 
  i = 0;
  
#line 133 
  goto ldv_47312;
  ldv_47311: 
#line 134 
  ;
  
#line 134 
  status = ql_read_mpi_reg(qdev,qdev->mailbox_out + (unsigned int)i,& mbcp->mbox_out[i]);
  
#line 137 
  if (status != 0) {
    
#line 138 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 138 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed mailbox read.\n"); else ;
    
#line 139 
    goto ldv_47310;
  }
  else ;
  
#line 133 
  i += 1;
  ldv_47312: 
#line 134 
  ;
  
#line 133 
  if (mbcp->out_count > i) 
#line 135 
                           goto ldv_47311; else 
#line 138 
                                                goto ldv_47310;
  ldv_47310: 
#line 139 
  ;
  
#line 142 
  ql_sem_unlock(qdev,3221225472U);
  
#line 143 
  __retres = status;
  return_label: 
#line 143 
                return __retres;
}


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_wait_mbx_cmd_cmplt(struct ql_adapter *qdev)
{
  int __retres;
  u32 value;
  
#line 151 
  int count = 100;
  ldv_47322: 
#line 153 
  ;
  
#line 155 
  value = ql_read32((struct ql_adapter const *)qdev,48);
  
#line 156 
  if ((value & 2U) != 0U) {
    
#line 157 
    __retres = 0;
    
#line 157 
    goto return_label;
  }
  else ;
  {
    
#line 158 
    unsigned long __ms = 100UL;
    {
      unsigned long tmp;
      
#line 158 
      goto ldv_47320;
      ldv_47319: 
#line 159 
      ;
      
#line 158 
      __const_udelay(4295000UL);
      ldv_47320: 
#line 160 
      ;
      
#line 158 
      tmp = __ms;
      
#line 158 
      __ms -= 1UL;
      
#line 158 
      ;
      
#line 158 
      if (tmp != 0UL) 
#line 160 
                      goto ldv_47319; else 
#line 163 
                                           goto ldv_47321;
      ldv_47321: 
#line 164 
      ;
    }
  }
  
#line 159 
  count -= 1;
  
#line 159 
  if (count != 0) 
#line 161 
                  goto ldv_47322; else 
#line 164 
                                       goto ldv_47323;
  ldv_47323: 
#line 165 
  ;
  
#line 160 
  __retres = -110;
  return_label: 
#line 160 
                return __retres;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_exec_mb_cmd(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int __retres;
  int i;
  int status;
  u32 tmp;
  
#line 174 
  tmp = ql_read32((struct ql_adapter const *)qdev,20);
  
#line 174 
  if ((tmp & 512U) != 0U) {
    
#line 175 
    __retres = -5;
    
#line 175 
    goto return_label;
  }
  else ;
  
#line 177 
  status = ql_sem_spinlock(qdev,3221225472U);
  
#line 178 
  if (status != 0) {
    
#line 179 
    __retres = status;
    
#line 179 
    goto return_label;
  }
  else ;
  
#line 184 
  i = 0;
  
#line 184 
  goto ldv_47332;
  ldv_47331: 
#line 185 
  ;
  
#line 185 
  status = ql_write_mpi_reg(qdev,qdev->mailbox_in + (unsigned int)i,mbcp->mbox_in[i]);
  
#line 187 
  if (status != 0) 
#line 188 
                   goto end; else ;
  
#line 184 
  i += 1;
  ldv_47332: 
#line 185 
  ;
  
#line 184 
  if (mbcp->in_count > i) 
#line 186 
                          goto ldv_47331; else 
#line 189 
                                               goto ldv_47333;
  ldv_47333: 
#line 190 
  ;
  
#line 193 
  ql_write32((struct ql_adapter const *)qdev,20,1342177280U);
  end: 
#line 194 
  ;
  
#line 195 
  ql_sem_unlock(qdev,3221225472U);
  
#line 196 
  __retres = status;
  return_label: 
#line 196 
                return __retres;
}


#line 206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_idc_req_aen(struct ql_adapter *qdev)
{
  int status;
  
#line 209 
  struct mbox_params *mbcp = & qdev->idc_mbc;
  
#line 211 
  if ((qdev->msg_enable & 1U) != 0U) 
#line 211 
                                     netdev_err((struct net_device const *)qdev->ndev,"Enter!\n"); else ;
  
#line 215 
  mbcp = & qdev->idc_mbc;
  
#line 216 
  mbcp->out_count = 4;
  
#line 217 
  status = ql_get_mb_sts(qdev,mbcp);
  
#line 218 
  if (status != 0) {
    
#line 219 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 219 
                                       netdev_err((struct net_device const *)qdev->ndev,"Could not read MPI, resetting ASIC!\n"); else ;
    
#line 221 
    ql_queue_asic_error(qdev);
  }
  else {
    
#line 227 
    ql_write32((struct ql_adapter const *)qdev,56,65536U);
    
#line 228 
    ldv_queue_delayed_work_75(qdev->workqueue,& qdev->mpi_idc_work,0UL);
  }
  
#line 230 
  return status;
}


#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_idc_cmplt_aen(struct ql_adapter *qdev)
{
  int status;
  
#line 239 
  struct mbox_params *mbcp = & qdev->idc_mbc;
  
#line 240 
  mbcp->out_count = 4;
  
#line 241 
  status = ql_get_mb_sts(qdev,mbcp);
  
#line 242 
  if (status != 0) {
    
#line 243 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 243 
                                       netdev_err((struct net_device const *)qdev->ndev,"Could not read MPI, resetting RISC!\n"); else ;
    
#line 245 
    ql_queue_fw_error(qdev);
  }
  else 
#line 250 
       complete(& qdev->ide_completion);
  
#line 252 
  return status;
}


#line 255  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static void ql_link_up(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int status;
  int tmp;
  int tmp_0;
  
#line 258 
  mbcp->out_count = 2;
  
#line 260 
  status = ql_get_mb_sts(qdev,mbcp);
  
#line 261 
  if (status != 0) {
    
#line 262 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 262 
                                       netdev_err((struct net_device const *)qdev->ndev,"%s: Could not get mailbox status.\n","ql_link_up"); else ;
    
#line 264 
    goto return_label;
  }
  else ;
  
#line 267 
  qdev->link_status = mbcp->mbox_out[1];
  
#line 268 
  if ((qdev->msg_enable & 1U) != 0U) 
#line 268 
                                     netdev_err((struct net_device const *)qdev->ndev,"Link Up.\n"); else ;
  
#line 273 
  tmp = constant_test_bit(8L,(unsigned long const volatile *)(& qdev->flags));
  
#line 273 
  if (tmp != 0) {
    
#line 274 
    status = ql_cam_route_initialize(qdev);
    
#line 275 
    if (status != 0) {
      
#line 276 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 276 
                                          netdev_err((struct net_device const *)qdev->ndev,"Failed to init CAM/Routing tables.\n"); else ;
      
#line 278 
      goto return_label;
    }
    else 
#line 280 
         set_bit(8L,(unsigned long volatile *)(& qdev->flags));
  }
  else ;
  
#line 287 
  tmp_0 = constant_test_bit(7L,(unsigned long const volatile *)(& qdev->flags));
  
#line 287 
  if (tmp_0 == 0) {
    
#line 288 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 288 
                                       netdev_err((struct net_device const *)qdev->ndev,"Queue Port Config Worker!\n"); else ;
    
#line 289 
    set_bit(7L,(unsigned long volatile *)(& qdev->flags));
    
#line 294 
    ql_write32((struct ql_adapter const *)qdev,56,65536U);
    
#line 295 
    ldv_queue_delayed_work_76(qdev->workqueue,& qdev->mpi_port_cfg_work,0UL);
  }
  else ;
  
#line 299 
  ql_link_on(qdev);
  return_label: 
#line 300 
                return;
}


#line 302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static void ql_link_down(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int status;
  
#line 306 
  mbcp->out_count = 3;
  
#line 308 
  status = ql_get_mb_sts(qdev,mbcp);
  
#line 309 
  if (status != 0) {
    
#line 310 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 310 
                                       netdev_err((struct net_device const *)qdev->ndev,"Link down AEN broken!\n"); else ;
  }
  else ;
  
#line 312 
  ql_link_off(qdev);
  
#line 313 
  return;
}


#line 315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_sfp_in(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int status;
  
#line 319 
  mbcp->out_count = 5;
  
#line 321 
  status = ql_get_mb_sts(qdev,mbcp);
  
#line 322 
  if (status != 0) {
    
#line 323 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 323 
                                       netdev_err((struct net_device const *)qdev->ndev,"SFP in AEN broken!\n"); else ;
  }
  else 
    
#line 325 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 325 
                                       netdev_err((struct net_device const *)qdev->ndev,"SFP insertion detected.\n"); else ;
  
#line 327 
  return status;
}


#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_sfp_out(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int status;
  
#line 334 
  mbcp->out_count = 1;
  
#line 336 
  status = ql_get_mb_sts(qdev,mbcp);
  
#line 337 
  if (status != 0) {
    
#line 338 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 338 
                                       netdev_err((struct net_device const *)qdev->ndev,"SFP out AEN broken!\n"); else ;
  }
  else 
    
#line 340 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 340 
                                       netdev_err((struct net_device const *)qdev->ndev,"SFP removal detected.\n"); else ;
  
#line 342 
  return status;
}


#line 345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_aen_lost(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int status;
  
#line 349 
  mbcp->out_count = 6;
  
#line 351 
  status = ql_get_mb_sts(qdev,mbcp);
  
#line 352 
  if (status != 0) {
    
#line 353 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 353 
                                       netdev_err((struct net_device const *)qdev->ndev,"Lost AEN broken!\n"); else ;
  }
  else {
    int i;
    
#line 356 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 356 
                                       netdev_err((struct net_device const *)qdev->ndev,"Lost AEN detected.\n"); else ;
    
#line 357 
    i = 0;
    
#line 357 
    goto ldv_47372;
    ldv_47371: 
#line 358 
    ;
    
#line 358 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 358 
                                       netdev_err((struct net_device const *)qdev->ndev,"mbox_out[%d] = 0x%.08x.\n",i,mbcp->mbox_out[i]); else ;
    
#line 357 
    i += 1;
    ldv_47372: 
#line 358 
    ;
    
#line 357 
    if (mbcp->out_count > i) 
#line 359 
                             goto ldv_47371; else 
#line 362 
                                                  goto ldv_47373;
    ldv_47373: 
#line 363 
    ;
  }
  
#line 363 
  return status;
}


#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static void ql_init_fw_done(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int status;
  
#line 370 
  mbcp->out_count = 2;
  
#line 372 
  status = ql_get_mb_sts(qdev,mbcp);
  
#line 373 
  if (status != 0) {
    
#line 374 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 374 
                                       netdev_err((struct net_device const *)qdev->ndev,"Firmware did not initialize!\n"); else ;
  }
  else {
    
#line 376 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 376 
                                       netdev_err((struct net_device const *)qdev->ndev,"Firmware Revision  = 0x%.08x.\n",mbcp->mbox_out[1]); else ;
    
#line 378 
    qdev->fw_rev_id = mbcp->mbox_out[1];
    
#line 379 
    status = ql_cam_route_initialize(qdev);
    
#line 380 
    if (status != 0) {
      
#line 381 
      if ((qdev->msg_enable & 32U) != 0U) 
#line 381 
                                          netdev_err((struct net_device const *)qdev->ndev,"Failed to init CAM/Routing tables.\n"); else ;
    }
    else ;
  }
  
#line 383 
  return;
}


#line 392  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_mpi_handler(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int __retres;
  int status;
  
#line 395 
  int orig_count = mbcp->out_count;
  
#line 398 
  mbcp->out_count = 1;
  
#line 399 
  status = ql_get_mb_sts(qdev,mbcp);
  
#line 400 
  if (status != 0) {
    
#line 401 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 401 
                                       netdev_err((struct net_device const *)qdev->ndev,"Could not read MPI, resetting ASIC!\n"); else ;
    
#line 403 
    ql_queue_asic_error(qdev);
    
#line 404 
    goto end;
  }
  else ;
  
#line 407 
  switch (mbcp->mbox_out[0]) {
    case (u32)4096: 
#line 413 
    ;
    case (u32)16384: 
#line 414 
    ;
    case (u32)16385: 
#line 415 
    ;
    case (u32)16386: 
#line 416 
    ;
    case (u32)16387: 
#line 417 
    ;
    case (u32)16389: 
#line 418 
    ;
    case (u32)16390: 
#line 419 
    ;
    
#line 426 
    mbcp->out_count = orig_count;
    
#line 427 
    status = ql_get_mb_sts(qdev,mbcp);
    
#line 428 
    __retres = status;
    
#line 428 
    goto return_label;
    case (u32)33025: 
#line 435 
    ;
    
#line 436 
    status = ql_idc_req_aen(qdev);
    
#line 437 
    goto ldv_47394;
    case (u32)33024: 
#line 444 
    ;
    case (u32)33026: 
#line 445 
    ;
    
#line 446 
    status = ql_idc_cmplt_aen(qdev);
    
#line 447 
    goto ldv_47394;
    case (u32)32785: 
#line 449 
    ;
    
#line 450 
    ql_link_up(qdev,mbcp);
    
#line 451 
    goto ldv_47394;
    case (u32)32786: 
#line 453 
    ;
    
#line 454 
    ql_link_down(qdev,mbcp);
    
#line 455 
    goto ldv_47394;
    case (u32)33792: 
#line 457 
    ;
    
#line 461 
    if (mbcp->mbox_in[0] == 2U) {
      
#line 462 
      mbcp->out_count = orig_count;
      
#line 463 
      status = ql_get_mb_sts(qdev,mbcp);
      
#line 464 
      mbcp->mbox_out[0] = 16384U;
      
#line 465 
      __retres = status;
      
#line 465 
      goto return_label;
    }
    else ;
    
#line 467 
    ql_init_fw_done(qdev,mbcp);
    
#line 468 
    goto ldv_47394;
    case (u32)33072: 
#line 470 
    ;
    
#line 471 
    ql_sfp_in(qdev,mbcp);
    
#line 472 
    goto ldv_47394;
    case (u32)33073: 
#line 474 
    ;
    
#line 475 
    ql_sfp_out(qdev,mbcp);
    
#line 476 
    goto ldv_47394;
    case (u32)33793: 
#line 481 
    ;
    
#line 485 
    if (mbcp->mbox_in[0] == 2U) {
      
#line 486 
      mbcp->out_count = orig_count;
      
#line 487 
      status = ql_get_mb_sts(qdev,mbcp);
      
#line 488 
      mbcp->mbox_out[0] = 16389U;
      
#line 489 
      __retres = status;
      
#line 489 
      goto return_label;
    }
    else ;
    
#line 491 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 491 
                                       netdev_err((struct net_device const *)qdev->ndev,"Firmware initialization failed.\n"); else ;
    
#line 493 
    status = -5;
    
#line 494 
    ql_queue_fw_error(qdev);
    
#line 495 
    goto ldv_47394;
    case (u32)32770: 
#line 497 
    ;
    
#line 498 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 498 
                                       netdev_err((struct net_device const *)qdev->ndev,"System Error.\n"); else ;
    
#line 499 
    ql_queue_fw_error(qdev);
    
#line 500 
    status = -5;
    
#line 501 
    goto ldv_47394;
    case (u32)33056: 
#line 503 
    ;
    
#line 504 
    ql_aen_lost(qdev,mbcp);
    
#line 505 
    goto ldv_47394;
    case (u32)33040: 
#line 507 
    ;
    
#line 509 
    goto ldv_47394;
    default: 
#line 510 
    ;
    
#line 511 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 511 
                                       netdev_err((struct net_device const *)qdev->ndev,"Unsupported AE %.08x.\n",mbcp->mbox_out[0]); else ;
  }
  ldv_47394: 
#line 515 
  ;
  end: 
#line 515 
  ;
  
#line 516 
  ql_write32((struct ql_adapter const *)qdev,20,2684354560U);
  
#line 523 
  mbcp->out_count = orig_count;
  
#line 524 
  __retres = status;
  return_label: 
#line 524 
                return __retres;
}


#line 532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_mailbox_command(struct ql_adapter *qdev, struct mbox_params *mbcp)
{
  int status;
  unsigned long count;
  int tmp;
  
#line 537 
  ldv_mutex_lock_77(& qdev->mpi_mutex);
  
#line 540 
  ql_write32((struct ql_adapter const *)qdev,56,65536U);
  
#line 543 
  status = ql_exec_mb_cmd(qdev,mbcp);
  
#line 544 
  if (status != 0) 
#line 545 
                   goto end; else ;
  
#line 551 
  if (mbcp->mbox_in[0] == 42U) 
#line 552 
                               goto end; else ;
  
#line 559 
  count = jiffies + 1250UL;
  ldv_47422: 
#line 560 
  ;
  
#line 562 
  status = ql_wait_mbx_cmd_cmplt(qdev);
  
#line 563 
  if (status != 0) 
#line 564 
                   goto ldv_47414; else ;
  
#line 571 
  status = ql_mpi_handler(qdev,mbcp);
  
#line 572 
  if (status != 0) 
#line 573 
                   goto end; else ;
  
#line 579 
  if ((mbcp->mbox_out[0] & 61440U) == 16384U || (mbcp->mbox_out[0] & 61440U) == 4096U) 
    
#line 583 
    goto done; else ;
  ldv_47414: 
#line 584 
  ;
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
#line 584 
    tmp = 1;
  }
  
#line 584 
  if (tmp != 0) {
    int tmp_0;
    {
      unsigned long __dummy_0;
      unsigned long volatile __dummy2_0;
      
#line 584 
      tmp_0 = 1;
    }
    
#line 584 
    if (tmp_0 != 0) {
      
#line 584 
      if ((long)(jiffies - count) < 0L) 
#line 586 
                                        goto ldv_47422; else 
#line 589 
                                                             goto ldv_47423;
    }
    else 
#line 589 
         goto ldv_47423;
  }
  else 
#line 589 
       goto ldv_47423;
  ldv_47423: 
#line 590 
  ;
  
#line 586 
  if ((qdev->msg_enable & 1U) != 0U) 
#line 586 
                                     netdev_err((struct net_device const *)qdev->ndev,"Timed out waiting for mailbox complete.\n"); else ;
  
#line 588 
  status = -110;
  
#line 589 
  goto end;
  done: 
#line 591 
  ;
  
#line 596 
  ql_write32((struct ql_adapter const *)qdev,20,2684354560U);
  
#line 598 
  if ((mbcp->mbox_out[0] & 61440U) != 16384U && (mbcp->mbox_out[0] & 61440U) != 4096U) 
    
#line 602 
    status = -5; else ;
  end: 
#line 604 
  ;
  
#line 606 
  ql_write32((struct ql_adapter const *)qdev,56,65537U);
  
#line 607 
  ldv_mutex_unlock_78(& qdev->mpi_mutex);
  
#line 608 
  return status;
}


#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_mb_about_fw(struct ql_adapter *qdev)
{
  int __retres;
  struct mbox_params mbc;
  
#line 618 
  struct mbox_params *mbcp = & mbc;
  
#line 619 
  int status = 0;
  
#line 621 
  memset((void *)mbcp,0,136UL);
  
#line 623 
  mbcp->in_count = 1;
  
#line 624 
  mbcp->out_count = 3;
  
#line 626 
  mbcp->mbox_in[0] = 8U;
  
#line 628 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 629 
  if (status != 0) {
    
#line 630 
    __retres = status;
    
#line 630 
    goto return_label;
  }
  else ;
  
#line 632 
  if (mbcp->mbox_out[0] != 16384U) {
    
#line 633 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 633 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed about firmware command\n"); else ;
    
#line 635 
    status = -5;
  }
  else ;
  
#line 639 
  qdev->fw_rev_id = mbcp->mbox_out[1];
  
#line 641 
  __retres = status;
  return_label: 
#line 641 
                return __retres;
}


#line 647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_mb_get_fw_state(struct ql_adapter *qdev)
{
  int __retres;
  struct mbox_params mbc;
  
#line 650 
  struct mbox_params *mbcp = & mbc;
  
#line 651 
  int status = 0;
  
#line 653 
  memset((void *)mbcp,0,136UL);
  
#line 655 
  mbcp->in_count = 1;
  
#line 656 
  mbcp->out_count = 2;
  
#line 658 
  mbcp->mbox_in[0] = 105U;
  
#line 660 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 661 
  if (status != 0) {
    
#line 662 
    __retres = status;
    
#line 662 
    goto return_label;
  }
  else ;
  
#line 664 
  if (mbcp->mbox_out[0] != 16384U) {
    
#line 665 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 665 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed Get Firmware State.\n"); else ;
    
#line 667 
    status = -5;
  }
  else ;
  
#line 674 
  if ((mbcp->mbox_out[1] & 1U) != 0U) {
    
#line 675 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 675 
                                       netdev_err((struct net_device const *)qdev->ndev,"Firmware waiting for initialization.\n"); else ;
    
#line 677 
    status = -5;
  }
  else ;
  
#line 680 
  __retres = status;
  return_label: 
#line 680 
                return __retres;
}


#line 686  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_mb_idc_ack(struct ql_adapter *qdev)
{
  int __retres;
  struct mbox_params mbc;
  
#line 689 
  struct mbox_params *mbcp = & mbc;
  
#line 690 
  int status = 0;
  
#line 692 
  memset((void *)mbcp,0,136UL);
  
#line 694 
  mbcp->in_count = 5;
  
#line 695 
  mbcp->out_count = 1;
  
#line 697 
  mbcp->mbox_in[0] = 257U;
  
#line 698 
  mbcp->mbox_in[1] = qdev->idc_mbc.mbox_out[1];
  
#line 699 
  mbcp->mbox_in[2] = qdev->idc_mbc.mbox_out[2];
  
#line 700 
  mbcp->mbox_in[3] = qdev->idc_mbc.mbox_out[3];
  
#line 701 
  mbcp->mbox_in[4] = qdev->idc_mbc.mbox_out[4];
  
#line 703 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 704 
  if (status != 0) {
    
#line 705 
    __retres = status;
    
#line 705 
    goto return_label;
  }
  else ;
  
#line 707 
  if (mbcp->mbox_out[0] != 16384U) {
    
#line 708 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 708 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed IDC ACK send.\n"); else ;
    
#line 709 
    status = -5;
  }
  else ;
  
#line 711 
  __retres = status;
  return_label: 
#line 711 
                return __retres;
}


#line 718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_mb_set_port_cfg(struct ql_adapter *qdev)
{
  int __retres;
  struct mbox_params mbc;
  
#line 721 
  struct mbox_params *mbcp = & mbc;
  
#line 722 
  int status = 0;
  
#line 724 
  memset((void *)mbcp,0,136UL);
  
#line 726 
  mbcp->in_count = 3;
  
#line 727 
  mbcp->out_count = 1;
  
#line 729 
  mbcp->mbox_in[0] = 290U;
  
#line 730 
  mbcp->mbox_in[1] = qdev->link_config;
  
#line 731 
  mbcp->mbox_in[2] = qdev->max_frame_size;
  
#line 734 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 735 
  if (status != 0) {
    
#line 736 
    __retres = status;
    
#line 736 
    goto return_label;
  }
  else ;
  
#line 738 
  if (mbcp->mbox_out[0] == 4096U) {
    
#line 739 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 739 
                                       netdev_err((struct net_device const *)qdev->ndev,"Port Config sent, wait for IDC.\n"); else ;
  }
  else 
    
#line 741 
    if (mbcp->mbox_out[0] != 16384U) {
      
#line 742 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 742 
                                         netdev_err((struct net_device const *)qdev->ndev,"Failed Set Port Configuration.\n"); else ;
      
#line 744 
      status = -5;
    }
    else ;
  
#line 746 
  __retres = status;
  return_label: 
#line 746 
                return __retres;
}


#line 749  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_mb_dump_ram(struct ql_adapter *qdev, u64 req_dma, u32 addr, u32 size)
{
  int __retres;
  struct mbox_params mbc;
  
#line 752 
  int status = 0;
  
#line 754 
  struct mbox_params *mbcp = & mbc;
  
#line 756 
  memset((void *)mbcp,0,136UL);
  
#line 758 
  mbcp->in_count = 9;
  
#line 759 
  mbcp->out_count = 1;
  
#line 761 
  mbcp->mbox_in[0] = 12U;
  
#line 762 
  mbcp->mbox_in[1] = (unsigned int)((unsigned short)addr);
  
#line 763 
  mbcp->mbox_in[2] = (unsigned int)((unsigned short)((unsigned int)req_dma >> 16));
  
#line 764 
  mbcp->mbox_in[3] = (unsigned int)((unsigned short)req_dma);
  
#line 765 
  mbcp->mbox_in[4] = (unsigned int)((unsigned short)(size >> 16));
  
#line 766 
  mbcp->mbox_in[5] = (unsigned int)((unsigned short)size);
  
#line 767 
  mbcp->mbox_in[6] = (unsigned int)((unsigned short)((unsigned int)(req_dma >> 32) >> 16));
  
#line 768 
  mbcp->mbox_in[7] = (unsigned int)((unsigned short)(req_dma >> 32));
  
#line 769 
  mbcp->mbox_in[8] = (unsigned int)((unsigned short)(addr >> 16));
  
#line 772 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 773 
  if (status != 0) {
    
#line 774 
    __retres = status;
    
#line 774 
    goto return_label;
  }
  else ;
  
#line 776 
  if (mbcp->mbox_out[0] != 16384U) {
    
#line 777 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 777 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed to dump risc RAM.\n"); else ;
    
#line 778 
    status = -5;
  }
  else ;
  
#line 780 
  __retres = status;
  return_label: 
#line 780 
                return __retres;
}


#line 784  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_dump_risc_ram_area(struct ql_adapter *qdev, void *buf, u32 ram_addr, int word_count)
{
  int __retres;
  int status;
  char *my_buf;
  dma_addr_t buf_dma;
  
#line 791 
  my_buf = (char *)pci_alloc_consistent(qdev->pdev,(unsigned long)word_count * 4UL,& buf_dma);
  
#line 793 
  if (my_buf == (char *)0) {
    
#line 794 
    __retres = -5;
    
#line 794 
    goto return_label;
  }
  else ;
  
#line 796 
  status = ql_mb_dump_ram(qdev,buf_dma,ram_addr,(unsigned int)word_count);
  
#line 797 
  if (status == 0) 
#line 798 
                   memcpy(buf,(void const *)my_buf,(unsigned long)word_count * 4UL); else ;
  
#line 800 
  pci_free_consistent(qdev->pdev,(unsigned long)word_count * 4UL,(void *)my_buf,buf_dma);
  
#line 802 
  __retres = status;
  return_label: 
#line 802 
                return __retres;
}


#line 809  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_mb_get_port_cfg(struct ql_adapter *qdev)
{
  int __retres;
  struct mbox_params mbc;
  
#line 812 
  struct mbox_params *mbcp = & mbc;
  
#line 813 
  int status = 0;
  
#line 815 
  memset((void *)mbcp,0,136UL);
  
#line 817 
  mbcp->in_count = 1;
  
#line 818 
  mbcp->out_count = 3;
  
#line 820 
  mbcp->mbox_in[0] = 291U;
  
#line 822 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 823 
  if (status != 0) {
    
#line 824 
    __retres = status;
    
#line 824 
    goto return_label;
  }
  else ;
  
#line 826 
  if (mbcp->mbox_out[0] != 16384U) {
    
#line 827 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 827 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed Get Port Configuration.\n"); else ;
    
#line 829 
    status = -5;
  }
  else {
    
#line 831 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 831 
                                       netdev_printk("\001",(struct net_device const *)qdev->ndev,"Passed Get Port Configuration.\n"); else ;
    
#line 833 
    qdev->link_config = mbcp->mbox_out[1];
    
#line 834 
    qdev->max_frame_size = mbcp->mbox_out[2];
  }
  
#line 836 
  __retres = status;
  return_label: 
#line 836 
                return __retres;
}


#line 839  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_mb_wol_mode(struct ql_adapter *qdev, u32 wol)
{
  int __retres;
  struct mbox_params mbc;
  int status;
  
#line 842 
  struct mbox_params *mbcp = & mbc;
  
#line 845 
  memset((void *)mbcp,0,136UL);
  
#line 847 
  mbcp->in_count = 2;
  
#line 848 
  mbcp->out_count = 1;
  
#line 850 
  mbcp->mbox_in[0] = 272U;
  
#line 851 
  mbcp->mbox_in[1] = wol;
  
#line 854 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 855 
  if (status != 0) {
    
#line 856 
    __retres = status;
    
#line 856 
    goto return_label;
  }
  else ;
  
#line 858 
  if (mbcp->mbox_out[0] != 16384U) {
    
#line 859 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 859 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed to set WOL mode.\n"); else ;
    
#line 860 
    status = -5;
  }
  else ;
  
#line 862 
  __retres = status;
  return_label: 
#line 862 
                return __retres;
}


#line 865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_mb_wol_set_magic(struct ql_adapter *qdev, u32 enable_wol)
{
  int __retres;
  struct mbox_params mbc;
  int status;
  
#line 868 
  struct mbox_params *mbcp = & mbc;
  
#line 870 
  u8 *addr = (qdev->ndev)->dev_addr;
  
#line 872 
  memset((void *)mbcp,0,136UL);
  
#line 874 
  mbcp->in_count = 8;
  
#line 875 
  mbcp->out_count = 1;
  
#line 877 
  mbcp->mbox_in[0] = 275U;
  
#line 878 
  if (enable_wol != 0U) {
    
#line 879 
    mbcp->mbox_in[1] = (unsigned int)*addr;
    
#line 880 
    mbcp->mbox_in[2] = (unsigned int)*(addr + 1U);
    
#line 881 
    mbcp->mbox_in[3] = (unsigned int)*(addr + 2U);
    
#line 882 
    mbcp->mbox_in[4] = (unsigned int)*(addr + 3U);
    
#line 883 
    mbcp->mbox_in[5] = (unsigned int)*(addr + 4U);
    
#line 884 
    mbcp->mbox_in[6] = (unsigned int)*(addr + 5U);
    
#line 885 
    mbcp->mbox_in[7] = 0U;
  }
  else {
    
#line 887 
    mbcp->mbox_in[1] = 0U;
    
#line 888 
    mbcp->mbox_in[2] = 1U;
    
#line 889 
    mbcp->mbox_in[3] = 1U;
    
#line 890 
    mbcp->mbox_in[4] = 1U;
    
#line 891 
    mbcp->mbox_in[5] = 1U;
    
#line 892 
    mbcp->mbox_in[6] = 1U;
    
#line 893 
    mbcp->mbox_in[7] = 0U;
  }
  
#line 896 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 897 
  if (status != 0) {
    
#line 898 
    __retres = status;
    
#line 898 
    goto return_label;
  }
  else ;
  
#line 900 
  if (mbcp->mbox_out[0] != 16384U) {
    
#line 901 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 901 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed to set WOL mode.\n"); else ;
    
#line 902 
    status = -5;
  }
  else ;
  
#line 904 
  __retres = status;
  return_label: 
#line 904 
                return __retres;
}


#line 914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_idc_wait(struct ql_adapter *qdev)
{
  unsigned long tmp;
  
#line 916 
  int status = -110;
  
#line 917 
  long wait_time = 250L;
  
#line 918 
  struct mbox_params *mbcp = & qdev->idc_mbc;
  ldv_47494: 
#line 919 
  ;
  
#line 924 
  tmp = wait_for_completion_timeout(& qdev->ide_completion,(unsigned long)wait_time);
  
#line 923 
  wait_time = (long)tmp;
  
#line 926 
  if (wait_time == 0L) {
    
#line 927 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 927 
                                       netdev_err((struct net_device const *)qdev->ndev,"IDC Timeout.\n"); else ;
    
#line 928 
    goto ldv_47493;
  }
  else ;
  
#line 934 
  if (mbcp->mbox_out[0] == 33026U) {
    
#line 935 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 935 
                                       netdev_err((struct net_device const *)qdev->ndev,"IDC Time Extension from function.\n"); else ;
    
#line 937 
    wait_time = ((long)(mbcp->mbox_out[1] >> 8) & 15L) + wait_time;
  }
  else 
    
#line 938 
    if (mbcp->mbox_out[0] == 33024U) {
      
#line 939 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 939 
                                         netdev_err((struct net_device const *)qdev->ndev,"IDC Success.\n"); else ;
      
#line 940 
      status = 0;
      
#line 941 
      goto ldv_47493;
    }
    else {
      
#line 943 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 943 
                                         netdev_err((struct net_device const *)qdev->ndev,"IDC: Invalid State 0x%.04x.\n",mbcp->mbox_out[0]); else ;
      
#line 946 
      status = -5;
      
#line 947 
      goto ldv_47493;
    }
  
#line 949 
  if (wait_time != 0L) 
#line 951 
                       goto ldv_47494; else 
#line 954 
                                            goto ldv_47493;
  ldv_47493: 
#line 955 
  ;
  
#line 951 
  return status;
}


#line 954  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_mb_set_led_cfg(struct ql_adapter *qdev, u32 led_config)
{
  int __retres;
  struct mbox_params mbc;
  int status;
  
#line 957 
  struct mbox_params *mbcp = & mbc;
  
#line 960 
  memset((void *)mbcp,0,136UL);
  
#line 962 
  mbcp->in_count = 2;
  
#line 963 
  mbcp->out_count = 1;
  
#line 965 
  mbcp->mbox_in[0] = 293U;
  
#line 966 
  mbcp->mbox_in[1] = led_config;
  
#line 969 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 970 
  if (status != 0) {
    
#line 971 
    __retres = status;
    
#line 971 
    goto return_label;
  }
  else ;
  
#line 973 
  if (mbcp->mbox_out[0] != 16384U) {
    
#line 974 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 974 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed to set LED Configuration.\n"); else ;
    
#line 976 
    status = -5;
  }
  else ;
  
#line 979 
  __retres = status;
  return_label: 
#line 979 
                return __retres;
}


#line 982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_mb_get_led_cfg(struct ql_adapter *qdev)
{
  int __retres;
  struct mbox_params mbc;
  int status;
  
#line 985 
  struct mbox_params *mbcp = & mbc;
  
#line 988 
  memset((void *)mbcp,0,136UL);
  
#line 990 
  mbcp->in_count = 1;
  
#line 991 
  mbcp->out_count = 2;
  
#line 993 
  mbcp->mbox_in[0] = 294U;
  
#line 995 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 996 
  if (status != 0) {
    
#line 997 
    __retres = status;
    
#line 997 
    goto return_label;
  }
  else ;
  
#line 999 
  if (mbcp->mbox_out[0] != 16384U) {
    
#line 1000 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1000 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed to get LED Configuration.\n"); else ;
    
#line 1002 
    status = -5;
  }
  else 
#line 1004 
       qdev->led_config = mbcp->mbox_out[1];
  
#line 1006 
  __retres = status;
  return_label: 
#line 1006 
                return __retres;
}


#line 1009  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_mb_set_mgmnt_traffic_ctl(struct ql_adapter *qdev, u32 control)
{
  int __retres;
  struct mbox_params mbc;
  int status;
  
#line 1012 
  struct mbox_params *mbcp = & mbc;
  
#line 1015 
  memset((void *)mbcp,0,136UL);
  
#line 1017 
  mbcp->in_count = 1;
  
#line 1018 
  mbcp->out_count = 2;
  
#line 1020 
  mbcp->mbox_in[0] = 352U;
  
#line 1021 
  mbcp->mbox_in[1] = control;
  
#line 1023 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 1024 
  if (status != 0) {
    
#line 1025 
    __retres = status;
    
#line 1025 
    goto return_label;
  }
  else ;
  
#line 1027 
  if (mbcp->mbox_out[0] == 16384U) {
    
#line 1028 
    __retres = status;
    
#line 1028 
    goto return_label;
  }
  else ;
  
#line 1030 
  if (mbcp->mbox_out[0] == 16385U) {
    
#line 1031 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1031 
                                       netdev_err((struct net_device const *)qdev->ndev,"Command not supported by firmware.\n"); else ;
    
#line 1033 
    status = -22;
  }
  else 
    
#line 1034 
    if (mbcp->mbox_out[0] == 16389U) {
      
#line 1039 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 1039 
                                         netdev_err((struct net_device const *)qdev->ndev,"Command parameters make no change.\n"); else ;
    }
    else ;
  
#line 1042 
  __retres = status;
  return_label: 
#line 1042 
                return __retres;
}


#line 1046  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_mb_get_mgmnt_traffic_ctl(struct ql_adapter *qdev, u32 *control)
{
  int __retres;
  struct mbox_params mbc;
  int status;
  
#line 1049 
  struct mbox_params *mbcp = & mbc;
  
#line 1052 
  memset((void *)mbcp,0,136UL);
  
#line 1053 
  *control = 0U;
  
#line 1055 
  mbcp->in_count = 1;
  
#line 1056 
  mbcp->out_count = 1;
  
#line 1058 
  mbcp->mbox_in[0] = 353U;
  
#line 1060 
  status = ql_mailbox_command(qdev,mbcp);
  
#line 1061 
  if (status != 0) {
    
#line 1062 
    __retres = status;
    
#line 1062 
    goto return_label;
  }
  else ;
  
#line 1064 
  if (mbcp->mbox_out[0] == 16384U) {
    
#line 1065 
    *control = mbcp->mbox_in[1];
    
#line 1066 
    __retres = status;
    
#line 1066 
    goto return_label;
  }
  else ;
  
#line 1069 
  if (mbcp->mbox_out[0] == 16385U) {
    
#line 1070 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1070 
                                       netdev_err((struct net_device const *)qdev->ndev,"Command not supported by firmware.\n"); else ;
    
#line 1072 
    status = -22;
  }
  else 
    
#line 1073 
    if (mbcp->mbox_out[0] == 16389U) {
      
#line 1074 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 1074 
                                         netdev_err((struct net_device const *)qdev->ndev,"Failed to get MPI traffic control.\n"); else ;
      
#line 1076 
      status = -5;
    }
    else ;
  
#line 1078 
  __retres = status;
  return_label: 
#line 1078 
                return __retres;
}


#line 1081  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
int ql_wait_fifo_empty(struct ql_adapter *qdev)
{
  int __retres;
  u32 mgmnt_fifo_empty;
  u32 nic_fifo_empty;
  u32 tmp;
  int tmp_0;
  
#line 1083 
  int count = 5;
  ldv_47528: 
#line 1086 
  ;
  
#line 1088 
  tmp = ql_read32((struct ql_adapter const *)qdev,48);
  
#line 1088 
  nic_fifo_empty = tmp & 4096U;
  
#line 1089 
  ql_mb_get_mgmnt_traffic_ctl(qdev,& mgmnt_fifo_empty);
  
#line 1090 
  mgmnt_fifo_empty &= 2U;
  
#line 1091 
  if (nic_fifo_empty != 0U && mgmnt_fifo_empty != 0U) {
    
#line 1092 
    __retres = 0;
    
#line 1092 
    goto return_label;
  }
  else ;
  
#line 1093 
  msleep(100U);
  
#line 1094 
  tmp_0 = count;
  
#line 1094 
  count -= 1;
  
#line 1094 
  ;
  
#line 1094 
  if (tmp_0 > 0) 
#line 1096 
                 goto ldv_47528; else 
#line 1099 
                                      goto ldv_47529;
  ldv_47529: 
#line 1100 
  ;
  
#line 1095 
  __retres = -110;
  return_label: 
#line 1095 
                return __retres;
}


#line 1101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
static int ql_set_port_cfg(struct ql_adapter *qdev)
{
  int __retres;
  int status;
  
#line 1104 
  status = ql_mb_set_port_cfg(qdev);
  
#line 1105 
  if (status != 0) {
    
#line 1106 
    __retres = status;
    
#line 1106 
    goto return_label;
  }
  else ;
  
#line 1107 
  status = ql_idc_wait(qdev);
  
#line 1108 
  __retres = status;
  return_label: 
#line 1108 
                return __retres;
}


#line 1119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
void ql_mpi_port_cfg_work(struct work_struct *work)
{
  struct ql_adapter *tmp;
  int status;
  {
    
#line 1122 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1122 
    tmp = (struct ql_adapter *)__mptr + 18446744073709530768U;
  }
  
#line 1121 
  struct ql_adapter *qdev = tmp;
  
#line 1125 
  status = ql_mb_get_port_cfg(qdev);
  
#line 1126 
  if (status != 0) {
    
#line 1127 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1127 
                                       netdev_err((struct net_device const *)qdev->ndev,"Bug: Failed to get port config data.\n"); else ;
    
#line 1129 
    goto err;
  }
  else ;
  
#line 1132 
  if ((qdev->link_config & 65536U) != 0U && qdev->max_frame_size == 9600U) 
    
#line 1135 
    goto end; else ;
  
#line 1137 
  qdev->link_config |= 65536U;
  
#line 1138 
  qdev->max_frame_size = 9600U;
  
#line 1139 
  status = ql_set_port_cfg(qdev);
  
#line 1140 
  if (status != 0) {
    
#line 1141 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1141 
                                       netdev_err((struct net_device const *)qdev->ndev,"Bug: Failed to set port config data.\n"); else ;
    
#line 1143 
    goto err;
  }
  else ;
  end: 
#line 1145 
  ;
  
#line 1146 
  set_bit(7L,(unsigned long volatile *)(& qdev->flags));
  
#line 1147 
  goto return_label;
  err: 
#line 1148 
  ;
  
#line 1149 
  ql_queue_fw_error(qdev);
  
#line 1150 
  goto end;
  return_label: 
#line 1150 
                return;
}


#line 1159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
void ql_mpi_idc_work(struct work_struct *work)
{
  struct ql_adapter *tmp;
  int status;
  u32 aen;
  int timeout;
  {
    
#line 1162 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1162 
    tmp = (struct ql_adapter *)__mptr + 18446744073709530544U;
  }
  
#line 1161 
  struct ql_adapter *qdev = tmp;
  
#line 1164 
  struct mbox_params *mbcp = & qdev->idc_mbc;
  
#line 1168 
  aen = mbcp->mbox_out[1] >> 16;
  
#line 1169 
  timeout = (int)(mbcp->mbox_out[1] >> 8) & 15;
  
#line 1171 
  switch (aen) {
    default: 
#line 1172 
    ;
    
#line 1173 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1173 
                                       netdev_err((struct net_device const *)qdev->ndev,"Bug: Unhandled IDC action.\n"); else ;
    
#line 1175 
    goto ldv_47554;
    case (u32)288: 
#line 1176 
    ;
    case (u32)20: 
#line 1177 
    ;
    
#line 1178 
    ql_link_off(qdev);
    case (u32)290: 
#line 1179 
    ;
    
#line 1184 
    set_bit(8L,(unsigned long volatile *)(& qdev->flags));
    
#line 1186 
    if (timeout != 0) {
      
#line 1187 
      status = ql_mb_idc_ack(qdev);
      
#line 1188 
      if (status != 0) {
        
#line 1189 
        if ((qdev->msg_enable & 1U) != 0U) 
#line 1189 
                                           netdev_err((struct net_device const *)qdev->ndev,"Bug: No pending IDC!\n"); else ;
      }
      else ;
    }
    else {
      
#line 1192 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 1192 
                                         netdev_printk("\001",(struct net_device const *)qdev->ndev,"IDC ACK not required\n"); else ;
      
#line 1194 
      status = 0;
    }
    
#line 1196 
    goto ldv_47554;
    case (u32)258: 
#line 1204 
    ;
    case (u32)16: 
#line 1205 
    ;
    
#line 1209 
    ql_link_off(qdev);
    
#line 1210 
    set_bit(8L,(unsigned long volatile *)(& qdev->flags));
    case (u32)256: 
#line 1212 
    ;
    case (u32)257: 
#line 1213 
    ;
    case (u32)259: 
#line 1214 
    ;
    case (u32)1: 
#line 1215 
    ;
    case (u32)2: 
#line 1216 
    ;
    case (u32)0: 
#line 1217 
    ;
    
#line 1219 
    if (timeout != 0) {
      
#line 1220 
      status = ql_mb_idc_ack(qdev);
      
#line 1221 
      if (status != 0) {
        
#line 1222 
        if ((qdev->msg_enable & 1U) != 0U) 
#line 1222 
                                           netdev_err((struct net_device const *)qdev->ndev,"Bug: No pending IDC!\n"); else ;
      }
      else ;
    }
    else {
      
#line 1225 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 1225 
                                         netdev_printk("\001",(struct net_device const *)qdev->ndev,"IDC ACK not required\n"); else ;
      
#line 1227 
      status = 0;
    }
    
#line 1229 
    goto ldv_47554;
  }
  ldv_47554: 
#line 1231 
  ;
  
#line 1232 
  return;
}


#line 1233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
void ql_mpi_work(struct work_struct *work)
{
  struct ql_adapter *tmp;
  struct mbox_params mbc;
  u32 tmp_0;
  {
    
#line 1236 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1236 
    tmp = (struct ql_adapter *)__mptr + 18446744073709530992U;
  }
  
#line 1235 
  struct ql_adapter *qdev = tmp;
  
#line 1238 
  struct mbox_params *mbcp = & mbc;
  
#line 1239 
  int err = 0;
  
#line 1241 
  ldv_mutex_lock_79(& qdev->mpi_mutex);
  
#line 1243 
  ql_write32((struct ql_adapter const *)qdev,56,65536U);
  
#line 1245 
  goto ldv_47577;
  ldv_47576: 
#line 1246 
  ;
  
#line 1246 
  memset((void *)mbcp,0,136UL);
  
#line 1247 
  mbcp->out_count = 1;
  
#line 1251 
  err = ql_mpi_handler(qdev,mbcp);
  
#line 1252 
  if (err != 0) 
#line 1253 
                goto ldv_47575; else ;
  ldv_47577: 
#line 1254 
  ;
  
#line 1245 
  tmp_0 = ql_read32((struct ql_adapter const *)qdev,48);
  
#line 1245 
  if ((tmp_0 & 2U) != 0U) 
#line 1247 
                          goto ldv_47576; else 
#line 1250 
                                               goto ldv_47575;
  ldv_47575: 
#line 1251 
  ;
  
#line 1257 
  ql_write32((struct ql_adapter const *)qdev,56,65537U);
  
#line 1258 
  ldv_mutex_unlock_80(& qdev->mpi_mutex);
  
#line 1259 
  ql_enable_completion_interrupt(qdev,0U);
  
#line 1260 
  return;
}


#line 1262  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_mpi.c"
void ql_mpi_reset_work(struct work_struct *work)
{
  struct ql_adapter *tmp;
  int tmp_0;
  {
    
#line 1265 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1265 
    tmp = (struct ql_adapter *)__mptr + 18446744073709531216U;
  }
  
#line 1264 
  struct ql_adapter *qdev = tmp;
  
#line 1266 
  cancel_delayed_work_sync(& qdev->mpi_work);
  
#line 1267 
  cancel_delayed_work_sync(& qdev->mpi_port_cfg_work);
  
#line 1268 
  cancel_delayed_work_sync(& qdev->mpi_idc_work);
  
#line 1272 
  tmp_0 = ql_own_firmware(qdev);
  
#line 1272 
  if (tmp_0 == 0) {
    
#line 1273 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1273 
                                       netdev_err((struct net_device const *)qdev->ndev,"Don\'t own firmware!\n"); else ;
    
#line 1274 
    goto return_label;
  }
  else ;
  
#line 1277 
  if (qdev->mpi_coredump != (struct ql_mpi_coredump *)0) {
    int tmp_1;
    
#line 1277 
    tmp_1 = ql_core_dump(qdev,qdev->mpi_coredump);
    
#line 1277 
    if (tmp_1 == 0) {
      
#line 1278 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 1278 
                                         netdev_err((struct net_device const *)qdev->ndev,"Core is dumped!\n"); else ;
      
#line 1279 
      qdev->core_is_dumped = 1U;
      
#line 1280 
      ldv_queue_delayed_work_81_0(qdev->workqueue,& qdev->mpi_core_to_log,1250UL);
    }
    else ;
  }
  else ;
  
#line 1283 
  ql_soft_reset_mpi_risc(qdev);
  return_label: 
#line 1284 
                return;
}


#line 764  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_mpi.c.aux"
static bool ldv_queue_delayed_work_75(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 768 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 768 
  __retres = tmp != 0;
  
#line 768 
  return __retres;
}


#line 772  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_mpi.c.aux"
static bool ldv_queue_delayed_work_76(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 776 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 776 
  __retres = tmp != 0;
  
#line 776 
  return __retres;
}


#line 780  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_mpi.c.aux"
static void ldv_mutex_lock_77(struct mutex *ldv_func_arg1)
{
  
#line 784 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mpi_mutex_of_ql_adapter");
  
#line 785 
  return;
}


#line 788  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_mpi.c.aux"
static void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1)
{
  
#line 792 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mpi_mutex_of_ql_adapter");
  
#line 793 
  return;
}


#line 796  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_mpi.c.aux"
static void ldv_mutex_lock_79(struct mutex *ldv_func_arg1)
{
  
#line 800 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mpi_mutex_of_ql_adapter");
  
#line 801 
  return;
}


#line 804  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_mpi.c.aux"
static void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1)
{
  
#line 808 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mpi_mutex_of_ql_adapter");
  
#line 809 
  return;
}


#line 812  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/weaver/.tmp_qlge_mpi.c.aux"
static bool ldv_queue_delayed_work_81_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 816 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 816 
  __retres = tmp != 0;
  
#line 816 
  return __retres;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 8  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static u32 ql_read_other_func_reg(struct ql_adapter *qdev, u32 reg)
{
  u32 __retres;
  u32 register_to_read;
  u32 reg_val;
  int tmp;
  
#line 13 
  unsigned int status = 0U;
  
#line 15 
  register_to_read = ((qdev->alt_func << 6) | reg) | 131072U;
  
#line 19 
  tmp = ql_read_mpi_reg(qdev,register_to_read,& reg_val);
  
#line 19 
  status = (unsigned int)tmp;
  
#line 20 
  if (status != 0U) {
    
#line 21 
    __retres = 4294967295U;
    
#line 21 
    goto return_label;
  }
  else ;
  
#line 23 
  __retres = reg_val;
  return_label: 
#line 23 
                return __retres;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_write_other_func_reg(struct ql_adapter *qdev, u32 reg, u32 reg_val)
{
  u32 register_to_read;
  
#line 31 
  int status = 0;
  
#line 33 
  register_to_read = ((qdev->alt_func << 6) | reg) | 131072U;
  
#line 37 
  status = ql_write_mpi_reg(qdev,register_to_read,reg_val);
  
#line 39 
  return status;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_wait_other_func_reg_rdy(struct ql_adapter *qdev, u32 reg, u32 bit, u32 err_bit)
{
  int __retres;
  u32 temp;
  
#line 46 
  int count = 10;
  
#line 48 
  goto ldv_47234;
  ldv_47233: 
#line 49 
  ;
  
#line 49 
  temp = ql_read_other_func_reg(qdev,reg);
  
#line 52 
  if ((temp & err_bit) != 0U) {
    
#line 53 
    __retres = -1;
    
#line 53 
    goto return_label;
  }
  else 
    
#line 54 
    if ((temp & bit) != 0U) {
      
#line 55 
      __retres = 0;
      
#line 55 
      goto return_label;
    }
    else ;
  {
    
#line 56 
    unsigned long __ms = 10UL;
    {
      unsigned long tmp;
      
#line 56 
      goto ldv_47231;
      ldv_47230: 
#line 57 
      ;
      
#line 56 
      __const_udelay(4295000UL);
      ldv_47231: 
#line 58 
      ;
      
#line 56 
      tmp = __ms;
      
#line 56 
      __ms -= 1UL;
      
#line 56 
      ;
      
#line 56 
      if (tmp != 0UL) 
#line 58 
                      goto ldv_47230; else 
#line 61 
                                           goto ldv_47232;
      ldv_47232: 
#line 62 
      ;
    }
  }
  
#line 57 
  count -= 1;
  ldv_47234: 
#line 58 
  ;
  
#line 48 
  if (count != 0) 
#line 50 
                  goto ldv_47233; else 
#line 53 
                                       goto ldv_47235;
  ldv_47235: 
#line 54 
  ;
  
#line 59 
  __retres = -1;
  return_label: 
#line 59 
                return __retres;
}


#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_read_other_func_serdes_reg(struct ql_adapter *qdev, u32 reg, u32 *data)
{
  int status;
  
#line 68 
  status = ql_wait_other_func_reg_rdy(qdev,60U,2147483648U,0U);
  
#line 70 
  if (status != 0) 
#line 71 
                   goto exit; else ;
  
#line 74 
  ql_write_other_func_reg(qdev,60U,reg | 1073741824U);
  
#line 77 
  status = ql_wait_other_func_reg_rdy(qdev,60U,2147483648U,0U);
  
#line 79 
  if (status != 0) 
#line 80 
                   goto exit; else ;
  
#line 83 
  *data = ql_read_other_func_reg(qdev,61U);
  exit: 
#line 84 
  ;
  
#line 85 
  return status;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_read_serdes_reg(struct ql_adapter *qdev, u32 reg, u32 *data)
{
  int status;
  
#line 94 
  status = ql_wait_reg_rdy(qdev,240U,2147483648U,0U);
  
#line 95 
  if (status != 0) 
#line 96 
                   goto exit; else ;
  
#line 99 
  ql_write32((struct ql_adapter const *)qdev,240,reg | 1073741824U);
  
#line 102 
  status = ql_wait_reg_rdy(qdev,240U,2147483648U,0U);
  
#line 103 
  if (status != 0) 
#line 104 
                   goto exit; else ;
  
#line 107 
  *data = ql_read32((struct ql_adapter const *)qdev,244);
  exit: 
#line 108 
  ;
  
#line 109 
  return status;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static void ql_get_both_serdes(struct ql_adapter *qdev, u32 addr, u32 *direct_ptr, u32 *indirect_ptr, unsigned int direct_valid, unsigned int indirect_valid)
{
  unsigned int status;
  
#line 118 
  status = 1U;
  
#line 119 
  if (direct_valid != 0U) {
    int tmp;
    
#line 120 
    tmp = ql_read_serdes_reg(qdev,addr,direct_ptr);
    
#line 120 
    status = (unsigned int)tmp;
  }
  else ;
  
#line 122 
  if (status != 0U) 
#line 123 
                    *direct_ptr = 3735928559U; else ;
  
#line 125 
  status = 1U;
  
#line 126 
  if (indirect_valid != 0U) {
    int tmp_0;
    
#line 127 
    tmp_0 = ql_read_other_func_serdes_reg(qdev,addr,indirect_ptr);
    
#line 127 
    status = (unsigned int)tmp_0;
  }
  else ;
  
#line 130 
  if (status != 0U) 
#line 131 
                    *indirect_ptr = 3735928559U; else ;
  
#line 132 
  return;
}


#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_get_serdes_regs(struct ql_adapter *qdev, struct ql_mpi_coredump *mpi_coredump)
{
  int __retres;
  int status;
  unsigned int xfi_direct_valid;
  unsigned int xfi_indirect_valid;
  unsigned int xaui_direct_valid;
  unsigned int xaui_indirect_valid;
  unsigned int i;
  u32 *direct_ptr;
  u32 temp;
  u32 *indirect_ptr;
  
#line 143 
  xfi_indirect_valid = 0U;
  
#line 143 
  xfi_direct_valid = xfi_indirect_valid;
  
#line 144 
  xaui_indirect_valid = 1U;
  
#line 144 
  xaui_direct_valid = xaui_indirect_valid;
  
#line 147 
  if ((qdev->func & 1U) != 0U) {
    
#line 149 
    status = ql_read_other_func_serdes_reg(qdev,2048U,& temp);
    
#line 151 
    if (status != 0) 
#line 152 
                     temp = 1U; else ;
    
#line 153 
    if ((temp & 1U) != 0U) 
#line 155 
                           xaui_indirect_valid = 0U; else ;
    
#line 157 
    status = ql_read_serdes_reg(qdev,2048U,& temp);
    
#line 159 
    if (status != 0) 
#line 160 
                     temp = 1U; else ;
    
#line 162 
    if ((temp & 1U) != 0U) 
#line 164 
                           xaui_direct_valid = 0U; else ;
  }
  else {
    
#line 167 
    status = ql_read_other_func_serdes_reg(qdev,2048U,& temp);
    
#line 169 
    if (status != 0) 
#line 170 
                     temp = 1U; else ;
    
#line 171 
    if ((temp & 1U) != 0U) 
#line 173 
                           xaui_indirect_valid = 0U; else ;
    
#line 175 
    status = ql_read_serdes_reg(qdev,2048U,& temp);
    
#line 177 
    if (status != 0) 
#line 178 
                     temp = 1U; else ;
    
#line 179 
    if ((temp & 1U) != 0U) 
#line 181 
                           xaui_direct_valid = 0U; else ;
  }
  
#line 188 
  status = ql_read_serdes_reg(qdev,7686U,& temp);
  
#line 189 
  if (status != 0) 
#line 190 
                   temp = 0U; else ;
  
#line 192 
  if ((temp & 5U) == 5U) 
    
#line 195 
    if ((qdev->func & 1U) != 0U) 
#line 197 
                                 xfi_indirect_valid = 1U; else 
#line 199 
                                                               xfi_direct_valid = 1U;
  else ;
  
#line 201 
  if ((temp & 10U) == 10U) 
    
#line 204 
    if ((qdev->func & 1U) != 0U) 
#line 206 
                                 xfi_direct_valid = 1U; else 
#line 208 
                                                             xfi_indirect_valid = 1U;
  else ;
  
#line 212 
  if ((qdev->func & 1U) != 0U) {
    
#line 214 
    direct_ptr = (u32 *)(& mpi_coredump->serdes2_xaui_an);
    
#line 215 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes_xaui_an);
  }
  else {
    
#line 218 
    direct_ptr = (u32 *)(& mpi_coredump->serdes_xaui_an);
    
#line 219 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes2_xaui_an);
  }
  
#line 222 
  i = 0U;
  
#line 222 
  goto ldv_47273;
  ldv_47272: 
#line 223 
  ;
  
#line 223 
  ql_get_both_serdes(qdev,i,direct_ptr,indirect_ptr,xaui_direct_valid,xaui_indirect_valid);
  
#line 222 
  i += 4U;
  
#line 222 
  direct_ptr += 1;
  
#line 222 
  indirect_ptr += 1;
  ldv_47273: 
#line 223 
  ;
  
#line 222 
  if (i <= 52U) 
#line 224 
                goto ldv_47272; else 
#line 227 
                                     goto ldv_47274;
  ldv_47274: 
#line 228 
  ;
  
#line 227 
  if ((qdev->func & 1U) != 0U) {
    
#line 228 
    direct_ptr = (u32 *)(& mpi_coredump->serdes2_xaui_hss_pcs);
    
#line 230 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes_xaui_hss_pcs);
  }
  else {
    
#line 233 
    direct_ptr = (u32 *)(& mpi_coredump->serdes_xaui_hss_pcs);
    
#line 235 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes2_xaui_hss_pcs);
  }
  
#line 239 
  i = 2048U;
  
#line 239 
  goto ldv_47276;
  ldv_47275: 
#line 240 
  ;
  
#line 240 
  ql_get_both_serdes(qdev,i,direct_ptr,indirect_ptr,xaui_direct_valid,xaui_indirect_valid);
  
#line 239 
  i += 4U;
  
#line 239 
  direct_ptr += 1;
  
#line 239 
  indirect_ptr += 1;
  ldv_47276: 
#line 240 
  ;
  
#line 239 
  if (i <= 2176U) 
#line 241 
                  goto ldv_47275; else 
#line 244 
                                       goto ldv_47277;
  ldv_47277: 
#line 245 
  ;
  
#line 244 
  if ((qdev->func & 1U) != 0U) {
    
#line 245 
    direct_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_an);
    
#line 246 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes_xfi_an);
  }
  else {
    
#line 248 
    direct_ptr = (u32 *)(& mpi_coredump->serdes_xfi_an);
    
#line 249 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_an);
  }
  
#line 252 
  i = 4096U;
  
#line 252 
  goto ldv_47279;
  ldv_47278: 
#line 253 
  ;
  
#line 253 
  ql_get_both_serdes(qdev,i,direct_ptr,indirect_ptr,xfi_direct_valid,xfi_indirect_valid);
  
#line 252 
  i += 4U;
  
#line 252 
  direct_ptr += 1;
  
#line 252 
  indirect_ptr += 1;
  ldv_47279: 
#line 253 
  ;
  
#line 252 
  if (i <= 4148U) 
#line 254 
                  goto ldv_47278; else 
#line 257 
                                       goto ldv_47280;
  ldv_47280: 
#line 258 
  ;
  
#line 257 
  if ((qdev->func & 1U) != 0U) {
    
#line 258 
    direct_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_train);
    
#line 259 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes_xfi_train);
  }
  else {
    
#line 262 
    direct_ptr = (u32 *)(& mpi_coredump->serdes_xfi_train);
    
#line 263 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_train);
  }
  
#line 267 
  i = 4176U;
  
#line 267 
  goto ldv_47282;
  ldv_47281: 
#line 268 
  ;
  
#line 268 
  ql_get_both_serdes(qdev,i,direct_ptr,indirect_ptr,xfi_direct_valid,xfi_indirect_valid);
  
#line 267 
  i += 4U;
  
#line 267 
  direct_ptr += 1;
  
#line 267 
  indirect_ptr += 1;
  ldv_47282: 
#line 268 
  ;
  
#line 267 
  if (i <= 4220U) 
#line 269 
                  goto ldv_47281; else 
#line 272 
                                       goto ldv_47283;
  ldv_47283: 
#line 273 
  ;
  
#line 272 
  if ((qdev->func & 1U) != 0U) {
    
#line 273 
    direct_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_hss_pcs);
    
#line 275 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes_xfi_hss_pcs);
  }
  else {
    
#line 278 
    direct_ptr = (u32 *)(& mpi_coredump->serdes_xfi_hss_pcs);
    
#line 280 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_hss_pcs);
  }
  
#line 284 
  i = 6144U;
  
#line 284 
  goto ldv_47285;
  ldv_47284: 
#line 285 
  ;
  
#line 285 
  ql_get_both_serdes(qdev,i,direct_ptr,indirect_ptr,xfi_direct_valid,xfi_indirect_valid);
  
#line 284 
  i += 4U;
  
#line 284 
  direct_ptr += 1;
  
#line 284 
  indirect_ptr += 1;
  ldv_47285: 
#line 285 
  ;
  
#line 284 
  if (i <= 6200U) 
#line 286 
                  goto ldv_47284; else 
#line 289 
                                       goto ldv_47286;
  ldv_47286: 
#line 290 
  ;
  
#line 289 
  if ((qdev->func & 1U) != 0U) {
    
#line 290 
    direct_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_hss_tx);
    
#line 292 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes_xfi_hss_tx);
  }
  else {
    
#line 295 
    direct_ptr = (u32 *)(& mpi_coredump->serdes_xfi_hss_tx);
    
#line 296 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_hss_tx);
  }
  
#line 299 
  i = 7168U;
  
#line 299 
  goto ldv_47288;
  ldv_47287: 
#line 300 
  ;
  
#line 300 
  ql_get_both_serdes(qdev,i,direct_ptr,indirect_ptr,xfi_direct_valid,xfi_indirect_valid);
  
#line 299 
  i += 1U;
  
#line 299 
  direct_ptr += 1;
  
#line 299 
  indirect_ptr += 1;
  ldv_47288: 
#line 300 
  ;
  
#line 299 
  if (i <= 7199U) 
#line 301 
                  goto ldv_47287; else 
#line 304 
                                       goto ldv_47289;
  ldv_47289: 
#line 305 
  ;
  
#line 304 
  if ((qdev->func & 1U) != 0U) {
    
#line 305 
    direct_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_hss_rx);
    
#line 307 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes_xfi_hss_rx);
  }
  else {
    
#line 310 
    direct_ptr = (u32 *)(& mpi_coredump->serdes_xfi_hss_rx);
    
#line 311 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_hss_rx);
  }
  
#line 315 
  i = 7232U;
  
#line 315 
  goto ldv_47291;
  ldv_47290: 
#line 316 
  ;
  
#line 316 
  ql_get_both_serdes(qdev,i,direct_ptr,indirect_ptr,xfi_direct_valid,xfi_indirect_valid);
  
#line 315 
  i += 1U;
  
#line 315 
  direct_ptr += 1;
  
#line 315 
  indirect_ptr += 1;
  ldv_47291: 
#line 316 
  ;
  
#line 315 
  if (i <= 7263U) 
#line 317 
                  goto ldv_47290; else 
#line 320 
                                       goto ldv_47292;
  ldv_47292: 
#line 321 
  ;
  
#line 321 
  if ((qdev->func & 1U) != 0U) {
    
#line 322 
    direct_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_hss_pll);
    
#line 324 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes_xfi_hss_pll);
  }
  else {
    
#line 327 
    direct_ptr = (u32 *)(& mpi_coredump->serdes_xfi_hss_pll);
    
#line 329 
    indirect_ptr = (u32 *)(& mpi_coredump->serdes2_xfi_hss_pll);
  }
  
#line 332 
  i = 7680U;
  
#line 332 
  goto ldv_47294;
  ldv_47293: 
#line 333 
  ;
  
#line 333 
  ql_get_both_serdes(qdev,i,direct_ptr,indirect_ptr,xfi_direct_valid,xfi_indirect_valid);
  
#line 332 
  i += 1U;
  
#line 332 
  direct_ptr += 1;
  
#line 332 
  indirect_ptr += 1;
  ldv_47294: 
#line 333 
  ;
  
#line 332 
  if (i <= 7711U) 
#line 334 
                  goto ldv_47293; else 
#line 337 
                                       goto ldv_47295;
  ldv_47295: 
#line 338 
  ;
  
#line 335 
  __retres = 0;
  
#line 335 
  return __retres;
}


#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_read_other_func_xgmac_reg(struct ql_adapter *qdev, u32 reg, u32 *data)
{
  
#line 341 
  int status = 0;
  
#line 344 
  status = ql_wait_other_func_reg_rdy(qdev,30U,2147483648U,536870912U);
  
#line 346 
  if (status != 0) 
#line 347 
                   goto exit; else ;
  
#line 350 
  ql_write_other_func_reg(qdev,30U,reg | 1073741824U);
  
#line 353 
  status = ql_wait_other_func_reg_rdy(qdev,30U,2147483648U,536870912U);
  
#line 355 
  if (status != 0) 
#line 356 
                   goto exit; else ;
  
#line 359 
  *data = ql_read_other_func_reg(qdev,31U);
  exit: 
#line 360 
  ;
  
#line 361 
  return status;
}


#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_get_xgmac_regs(struct ql_adapter *qdev, u32 *buf, unsigned int other_function)
{
  int i;
  
#line 370 
  int status = 0;
  
#line 373 
  i = 256;
  
#line 373 
  goto ldv_47312;
  ldv_47311: 
#line 374 
  ;
  
#line 377 
  if (((((((((((((((i == 276 || i == 280) || (i == 316 || i == 320)) || (unsigned int)i + 4294966959U <= 170U) || (unsigned int)i + 4294966663U <= 38U) || (unsigned int)i + 4294966591U <= 13U) || (unsigned int)i + 4294966563U <= 18U) || (unsigned int)i + 4294966327U <= 54U) || (unsigned int)i + 4294966271U <= 14U) || (unsigned int)i + 4294966255U <= 14U) || (unsigned int)i + 4294966239U <= 14U) || (unsigned int)i + 4294966223U <= 14U) || (unsigned int)i + 4294966207U <= 14U) || (unsigned int)i + 4294966191U <= 174U) || (unsigned int)i + 4294965939U <= 26U) || (unsigned int)i + 4294965815U <= 54U) {
    
#line 394 
    if (other_function != 0U) 
#line 395 
                              status = ql_read_other_func_xgmac_reg(qdev,(unsigned int)i,buf); else 
                                                                    
#line 398 
                                                                    status = ql_read_xgmac_reg(qdev,(unsigned int)i,buf);
    
#line 400 
    if (status != 0) 
#line 401 
                     *buf = 3735928559U; else ;
    
#line 402 
    goto ldv_47310;
  }
  else ;
  
#line 373 
  i += 4;
  
#line 373 
  buf += 1;
  ldv_47312: 
#line 374 
  ;
  
#line 373 
  if (i <= 1855) 
#line 375 
                 goto ldv_47311; else 
#line 378 
                                      goto ldv_47310;
  ldv_47310: 
#line 379 
  ;
  
#line 405 
  return status;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_get_ets_regs(struct ql_adapter *qdev, u32 *buf)
{
  int i;
  
#line 410 
  int status = 0;
  
#line 413 
  i = 0;
  
#line 413 
  goto ldv_47320;
  ldv_47319: 
#line 414 
  ;
  
#line 414 
  ql_write32((struct ql_adapter const *)qdev,128,(unsigned int)((i << 29) | 134217728));
  
#line 415 
  *buf = ql_read32((struct ql_adapter const *)qdev,128);
  
#line 413 
  i += 1;
  
#line 413 
  buf += 1;
  ldv_47320: 
#line 414 
  ;
  
#line 413 
  if (i <= 7) 
#line 415 
              goto ldv_47319; else 
#line 418 
                                   goto ldv_47321;
  ldv_47321: 
#line 419 
  ;
  
#line 418 
  i = 0;
  
#line 418 
  goto ldv_47323;
  ldv_47322: 
#line 419 
  ;
  
#line 419 
  ql_write32((struct ql_adapter const *)qdev,132,(unsigned int)((i << 29) | 134217728));
  
#line 420 
  *buf = ql_read32((struct ql_adapter const *)qdev,132);
  
#line 418 
  i += 1;
  
#line 418 
  buf += 1;
  ldv_47323: 
#line 419 
  ;
  
#line 418 
  if (i <= 1) 
#line 420 
              goto ldv_47322; else 
#line 423 
                                   goto ldv_47324;
  ldv_47324: 
#line 424 
  ;
  
#line 423 
  return status;
}


#line 426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static void ql_get_intr_states(struct ql_adapter *qdev, u32 *buf)
{
  int i;
  
#line 430 
  i = 0;
  
#line 430 
  goto ldv_47331;
  ldv_47330: 
#line 431 
  ;
  
#line 431 
  ql_write32((struct ql_adapter const *)qdev,52,qdev->intr_context[i].intr_read_mask);
  
#line 433 
  *buf = ql_read32((struct ql_adapter const *)qdev,52);
  
#line 430 
  i += 1;
  
#line 430 
  buf += 1;
  ldv_47331: 
#line 431 
  ;
  
#line 430 
  if (qdev->rx_ring_count > i) 
#line 432 
                               goto ldv_47330; else 
#line 435 
                                                    goto ldv_47332;
  ldv_47332: 
#line 436 
  ;
  
#line 437 
  return;
}


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_get_cam_entries(struct ql_adapter *qdev, u32 *buf)
{
  int __retres;
  int i;
  int status;
  u32 value[3U];
  u32 *tmp;
  u32 *tmp_0;
  u32 *tmp_1;
  u32 *tmp_2;
  u32 *tmp_3;
  
#line 442 
  status = ql_sem_spinlock(qdev,12582912U);
  
#line 443 
  if (status != 0) {
    
#line 444 
    __retres = status;
    
#line 444 
    goto return_label;
  }
  else ;
  
#line 446 
  i = 0;
  
#line 446 
  goto ldv_47342;
  ldv_47341: 
#line 447 
  ;
  
#line 447 
  status = ql_get_mac_addr_reg(qdev,0U,(unsigned short)((int)((unsigned short)i)),(u32 *)(& value));
  
#line 449 
  if (status != 0) {
    
#line 450 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 450 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed read of mac index register\n"); else ;
    
#line 452 
    goto err;
  }
  else ;
  
#line 454 
  tmp = buf;
  
#line 454 
  buf += 1;
  
#line 454 
  *tmp = value[0];
  
#line 455 
  tmp_0 = buf;
  
#line 455 
  buf += 1;
  
#line 455 
  *tmp_0 = value[1];
  
#line 456 
  tmp_1 = buf;
  
#line 456 
  buf += 1;
  
#line 456 
  *tmp_1 = value[2];
  
#line 446 
  i += 1;
  ldv_47342: 
#line 447 
  ;
  
#line 446 
  if (i <= 15) 
#line 448 
               goto ldv_47341; else 
#line 451 
                                    goto ldv_47343;
  ldv_47343: 
#line 452 
  ;
  
#line 458 
  i = 0;
  
#line 458 
  goto ldv_47345;
  ldv_47344: 
#line 459 
  ;
  
#line 459 
  status = ql_get_mac_addr_reg(qdev,65536U,(unsigned short)((int)((unsigned short)i)),(u32 *)(& value));
  
#line 461 
  if (status != 0) {
    
#line 462 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 462 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed read of mac index register\n"); else ;
    
#line 464 
    goto err;
  }
  else ;
  
#line 466 
  tmp_2 = buf;
  
#line 466 
  buf += 1;
  
#line 466 
  *tmp_2 = value[0];
  
#line 467 
  tmp_3 = buf;
  
#line 467 
  buf += 1;
  
#line 467 
  *tmp_3 = value[1];
  
#line 458 
  i += 1;
  ldv_47345: 
#line 459 
  ;
  
#line 458 
  if (i <= 31) 
#line 460 
               goto ldv_47344; else 
#line 463 
                                    goto ldv_47346;
  ldv_47346: 
#line 464 
  ;
  err: 
#line 469 
  ;
  
#line 470 
  ql_sem_unlock(qdev,12582912U);
  
#line 471 
  __retres = status;
  return_label: 
#line 471 
                return __retres;
}


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_get_routing_entries(struct ql_adapter *qdev, u32 *buf)
{
  int __retres;
  int status;
  u32 value;
  u32 i;
  
#line 479 
  status = ql_sem_spinlock(qdev,805306368U);
  
#line 480 
  if (status != 0) {
    
#line 481 
    __retres = status;
    
#line 481 
    goto return_label;
  }
  else ;
  
#line 483 
  i = 0U;
  
#line 483 
  goto ldv_47356;
  ldv_47355: 
#line 484 
  ;
  
#line 484 
  status = ql_get_routing_reg(qdev,i,& value);
  
#line 485 
  if (status != 0) {
    
#line 486 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 486 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed read of routing index register\n"); else ;
    
#line 488 
    goto err;
  }
  else {
    u32 *tmp;
    
#line 490 
    tmp = buf;
    
#line 490 
    buf += 1;
    
#line 490 
    *tmp = value;
  }
  
#line 483 
  i += 1U;
  ldv_47356: 
#line 484 
  ;
  
#line 483 
  if (i <= 15U) 
#line 485 
                goto ldv_47355; else 
#line 488 
                                     goto ldv_47357;
  ldv_47357: 
#line 489 
  ;
  err: 
#line 493 
  ;
  
#line 494 
  ql_sem_unlock(qdev,805306368U);
  
#line 495 
  __retres = status;
  return_label: 
#line 495 
                return __retres;
}


#line 499  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_get_mpi_shadow_regs(struct ql_adapter *qdev, u32 *buf)
{
  u32 i;
  int status;
  
#line 504 
  i = 0U;
  
#line 504 
  goto ldv_47366;
  ldv_47365: 
#line 505 
  ;
  
#line 505 
  status = ql_write_mpi_reg(qdev,196732U,(i << 20) | 2952790016U);
  
#line 507 
  if (status != 0) 
#line 508 
                   goto end; else ;
  
#line 509 
  status = ql_read_mpi_reg(qdev,196735U,buf);
  
#line 510 
  if (status != 0) 
#line 511 
                   goto end; else ;
  
#line 504 
  i += 1U;
  
#line 504 
  buf += 1;
  ldv_47366: 
#line 505 
  ;
  
#line 504 
  if (i <= 15U) 
#line 506 
                goto ldv_47365; else 
#line 509 
                                     goto ldv_47367;
  ldv_47367: 
#line 510 
  ;
  end: 
#line 513 
  ;
  
#line 514 
  return status;
}


#line 518  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_get_mpi_regs(struct ql_adapter *qdev, u32 *buf, u32 offset, u32 count)
{
  int __retres;
  int i;
  
#line 521 
  int status = 0;
  
#line 522 
  i = 0;
  
#line 522 
  goto ldv_47377;
  ldv_47376: 
#line 523 
  ;
  
#line 523 
  status = ql_read_mpi_reg(qdev,offset + (unsigned int)i,buf);
  
#line 524 
  if (status != 0) {
    
#line 525 
    __retres = status;
    
#line 525 
    goto return_label;
  }
  else ;
  
#line 522 
  i += 1;
  
#line 522 
  buf += 1;
  ldv_47377: 
#line 523 
  ;
  
#line 522 
  if ((unsigned int)i < count) 
#line 524 
                               goto ldv_47376; else 
#line 527 
                                                    goto ldv_47378;
  ldv_47378: 
#line 528 
  ;
  
#line 527 
  __retres = status;
  return_label: 
#line 527 
                return __retres;
}


#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static unsigned int *ql_get_probe(struct ql_adapter *qdev, u32 clock, u32 valid, u32 *buf)
{
  u32 module;
  u32 mux_sel;
  u32 probe;
  u32 lo_val;
  u32 hi_val;
  
#line 536 
  module = 0U;
  
#line 536 
  goto ldv_47395;
  ldv_47394: 
#line 537 
  ;
  
#line 537 
  if (((valid >> module) & 1U) == 0U) 
#line 538 
                                      goto ldv_47390; else ;
  
#line 539 
  mux_sel = 0U;
  
#line 539 
  goto ldv_47392;
  ldv_47391: 
#line 540 
  ;
  
#line 540 
  probe = ((clock | mux_sel) | (module << 9)) | 65536U;
  
#line 544 
  ql_write32((struct ql_adapter const *)qdev,248,probe);
  
#line 545 
  lo_val = ql_read32((struct ql_adapter const *)qdev,252);
  
#line 546 
  if (mux_sel == 0U) {
    
#line 547 
    *buf = probe;
    
#line 548 
    buf += 1;
  }
  else ;
  
#line 550 
  probe |= 32768U;
  
#line 551 
  ql_write32((struct ql_adapter const *)qdev,248,probe);
  
#line 552 
  hi_val = ql_read32((struct ql_adapter const *)qdev,252);
  
#line 553 
  *buf = lo_val;
  
#line 554 
  buf += 1;
  
#line 555 
  *buf = hi_val;
  
#line 556 
  buf += 1;
  
#line 539 
  mux_sel += 1U;
  ldv_47392: 
#line 540 
  ;
  
#line 539 
  if (mux_sel <= 63U) 
#line 541 
                      goto ldv_47391; else 
#line 544 
                                           goto ldv_47393;
  ldv_47393: 
#line 545 
  ;
  ldv_47390: 
#line 546 
  ;
  
#line 536 
  module += 1U;
  ldv_47395: 
#line 537 
  ;
  
#line 536 
  if (module <= 20U) 
#line 538 
                     goto ldv_47394; else 
#line 541 
                                          goto ldv_47396;
  ldv_47396: 
#line 542 
  ;
  
#line 559 
  return buf;
}


#line 562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_get_probe_dump(struct ql_adapter *qdev, unsigned int *buf)
{
  int __retres;
  
#line 565 
  ql_write_mpi_reg(qdev,4110U,413270016U);
  
#line 566 
  buf = ql_get_probe(qdev,0U,1015799U,buf);
  
#line 568 
  buf = ql_get_probe(qdev,2U,16577U,buf);
  
#line 570 
  buf = ql_get_probe(qdev,6U,226057U,buf);
  
#line 572 
  buf = ql_get_probe(qdev,5U,12289U,buf);
  
#line 574 
  __retres = 0;
  
#line 574 
  return __retres;
}


#line 579  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static int ql_get_routing_index_registers(struct ql_adapter *qdev, u32 *buf)
{
  int __retres;
  int status;
  u32 type;
  u32 index;
  u32 index_max;
  u32 result_index;
  u32 result_data;
  u32 val;
  
#line 587 
  status = ql_sem_spinlock(qdev,805306368U);
  
#line 588 
  if (status != 0) {
    
#line 589 
    __retres = status;
    
#line 589 
    goto return_label;
  }
  else ;
  
#line 591 
  type = 0U;
  
#line 591 
  goto ldv_47419;
  ldv_47418: 
#line 592 
  ;
  
#line 592 
  if (type <= 1U) 
#line 593 
                  index_max = 8U; else 
#line 595 
                                       index_max = 16U;
  
#line 596 
  index = 0U;
  
#line 596 
  goto ldv_47416;
  ldv_47415: 
#line 597 
  ;
  
#line 597 
  val = ((type << 16) | (index << 8)) | 67108864U;
  
#line 600 
  ql_write32((struct ql_adapter const *)qdev,228,val);
  
#line 601 
  result_index = 0U;
  
#line 602 
  goto ldv_47413;
  ldv_47412: 
#line 603 
  ;
  
#line 603 
  result_index = ql_read32((struct ql_adapter const *)qdev,228);
  ldv_47413: 
#line 604 
  ;
  
#line 602 
  if ((result_index & 1073741824U) == 0U) 
#line 604 
                                          goto ldv_47412; else 
#line 607 
                                                               goto ldv_47414;
  ldv_47414: 
#line 608 
  ;
  
#line 604 
  result_data = ql_read32((struct ql_adapter const *)qdev,232);
  
#line 605 
  *buf = type;
  
#line 606 
  buf += 1;
  
#line 607 
  *buf = index;
  
#line 608 
  buf += 1;
  
#line 609 
  *buf = result_index;
  
#line 610 
  buf += 1;
  
#line 611 
  *buf = result_data;
  
#line 612 
  buf += 1;
  
#line 596 
  index += 1U;
  ldv_47416: 
#line 597 
  ;
  
#line 596 
  if (index < index_max) 
#line 598 
                         goto ldv_47415; else 
#line 601 
                                              goto ldv_47417;
  ldv_47417: 
#line 602 
  ;
  
#line 591 
  type += 1U;
  ldv_47419: 
#line 592 
  ;
  
#line 591 
  if (type <= 3U) 
#line 593 
                  goto ldv_47418; else 
#line 596 
                                       goto ldv_47420;
  ldv_47420: 
#line 597 
  ;
  
#line 615 
  ql_sem_unlock(qdev,805306368U);
  
#line 616 
  __retres = status;
  return_label: 
#line 616 
                return __retres;
}


#line 620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static void ql_get_mac_protocol_registers(struct ql_adapter *qdev, u32 *buf)
{
  u32 result_index;
  u32 result_data;
  u32 type;
  u32 index;
  u32 offset;
  u32 val;
  u32 max_index;
  u32 max_offset;
  
#line 627 
  u32 initial_val = 67108864U;
  
#line 631 
  type = 0U;
  
#line 631 
  goto ldv_47456;
  ldv_47455: 
#line 632 
  ;
  
#line 632 
  switch (type) {
    case (u32)0: 
#line 634 
    ;
    
#line 635 
    initial_val |= 33554432U;
    
#line 636 
    max_index = 512U;
    
#line 637 
    max_offset = 3U;
    
#line 638 
    goto ldv_47435;
    case (u32)1: 
#line 639 
    ;
    
#line 640 
    max_index = 3U;
    
#line 641 
    max_offset = 3U;
    
#line 642 
    goto ldv_47435;
    case (u32)2: 
#line 643 
    ;
    case (u32)3: 
#line 644 
    ;
    
#line 645 
    max_index = 3U;
    
#line 646 
    max_offset = 3U;
    
#line 647 
    goto ldv_47435;
    case (u32)4: 
#line 648 
    ;
    
#line 649 
    max_index = 4U;
    
#line 650 
    max_offset = 2U;
    
#line 651 
    goto ldv_47435;
    case (u32)5: 
#line 652 
    ;
    
#line 653 
    max_index = 8U;
    
#line 654 
    max_offset = 2U;
    
#line 655 
    goto ldv_47435;
    case (u32)6: 
#line 656 
    ;
    
#line 657 
    max_index = 16U;
    
#line 658 
    max_offset = 1U;
    
#line 659 
    goto ldv_47435;
    case (u32)7: 
#line 660 
    ;
    
#line 661 
    max_index = 4U;
    
#line 662 
    max_offset = 1U;
    
#line 663 
    goto ldv_47435;
    case (u32)8: 
#line 664 
    ;
    
#line 665 
    max_index = 4U;
    
#line 666 
    max_offset = 4U;
    
#line 667 
    goto ldv_47435;
    case (u32)9: 
#line 668 
    ;
    
#line 669 
    max_index = 4U;
    
#line 670 
    max_offset = 1U;
    
#line 671 
    goto ldv_47435;
    default: 
#line 672 
    ;
    
#line 673 
    printk("\001",type);
    
#line 674 
    max_index = 0U;
    
#line 675 
    max_offset = 0U;
    
#line 676 
    goto ldv_47435;
  }
  ldv_47435: 
#line 678 
  ;
  
#line 678 
  index = 0U;
  
#line 678 
  goto ldv_47453;
  ldv_47452: 
#line 679 
  ;
  
#line 679 
  offset = 0U;
  
#line 679 
  goto ldv_47450;
  ldv_47449: 
#line 680 
  ;
  
#line 680 
  val = (((type << 16) | initial_val) | (index << 4)) | offset;
  
#line 684 
  ql_write32((struct ql_adapter const *)qdev,168,val);
  
#line 685 
  result_index = 0U;
  
#line 686 
  goto ldv_47447;
  ldv_47446: 
#line 687 
  ;
  
#line 687 
  result_index = ql_read32((struct ql_adapter const *)qdev,168);
  ldv_47447: 
#line 688 
  ;
  
#line 686 
  if ((result_index & 1073741824U) == 0U) 
#line 688 
                                          goto ldv_47446; else 
#line 691 
                                                               goto ldv_47448;
  ldv_47448: 
#line 692 
  ;
  
#line 690 
  result_data = ql_read32((struct ql_adapter const *)qdev,172);
  
#line 691 
  *buf = result_index;
  
#line 692 
  buf += 1;
  
#line 693 
  *buf = result_data;
  
#line 694 
  buf += 1;
  
#line 679 
  offset += 1U;
  ldv_47450: 
#line 680 
  ;
  
#line 679 
  if (offset < max_offset) 
#line 681 
                           goto ldv_47449; else 
#line 684 
                                                goto ldv_47451;
  ldv_47451: 
#line 685 
  ;
  
#line 678 
  index += 1U;
  ldv_47453: 
#line 679 
  ;
  
#line 678 
  if (index < max_index) 
#line 680 
                         goto ldv_47452; else 
#line 683 
                                              goto ldv_47454;
  ldv_47454: 
#line 684 
  ;
  
#line 631 
  type += 1U;
  ldv_47456: 
#line 632 
  ;
  
#line 631 
  if (type <= 9U) 
#line 633 
                  goto ldv_47455; else 
#line 636 
                                       goto ldv_47457;
  ldv_47457: 
#line 637 
  ;
  
#line 638 
  return;
}


#line 700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static void ql_get_sem_registers(struct ql_adapter *qdev, u32 *buf)
{
  u32 func_num;
  u32 reg;
  u32 reg_val;
  int status;
  
#line 705 
  func_num = 0U;
  
#line 705 
  goto ldv_47467;
  ldv_47466: 
#line 706 
  ;
  
#line 706 
  reg = (func_num << 6) | 131097U;
  
#line 709 
  status = ql_read_mpi_reg(qdev,reg,& reg_val);
  
#line 710 
  *buf = reg_val;
  
#line 712 
  if (status == 0) 
#line 713 
                   *buf = 3735928559U; else ;
  
#line 714 
  buf += 1;
  
#line 705 
  func_num += 1U;
  ldv_47467: 
#line 706 
  ;
  
#line 705 
  if (func_num <= 3U) 
#line 707 
                      goto ldv_47466; else 
#line 710 
                                           goto ldv_47468;
  ldv_47468: 
#line 711 
  ;
  
#line 712 
  return;
}


#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static void ql_build_coredump_seg_header(struct mpi_coredump_segment_header *seg_hdr, u32 seg_number, u32 seg_size, u8 *desc)
{
  
#line 723 
  memset((void *)seg_hdr,0,32UL);
  
#line 724 
  seg_hdr->cookie = 1431677610U;
  
#line 725 
  seg_hdr->segNum = seg_number;
  
#line 726 
  seg_hdr->segSize = seg_size;
  
#line 727 
  memcpy((void *)(& seg_hdr->description),(void const *)desc,15UL);
  
#line 728 
  return;
}


#line 737  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
int ql_core_dump(struct ql_adapter *qdev, struct ql_mpi_coredump *mpi_coredump)
{
  int __retres;
  int status;
  int i;
  
#line 742 
  if (mpi_coredump == (struct ql_mpi_coredump *)0) {
    
#line 743 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 743 
                                       netdev_err((struct net_device const *)qdev->ndev,"No memory allocated\n"); else ;
    
#line 744 
    __retres = -22;
    
#line 744 
    goto return_label;
  }
  else ;
  
#line 751 
  ql_sem_spinlock(qdev,3221225472U);
  
#line 753 
  status = ql_pause_mpi_risc(qdev);
  
#line 754 
  if (status != 0) {
    
#line 755 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 755 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed RISC pause. Status = 0x%.08x\n",status); else ;
    
#line 757 
    goto err;
  }
  else ;
  
#line 761 
  memset((void *)(& mpi_coredump->mpi_global_header),0,256UL);
  
#line 763 
  mpi_coredump->mpi_global_header.cookie = 1431677610U;
  
#line 764 
  mpi_coredump->mpi_global_header.headerSize = 256U;
  
#line 766 
  mpi_coredump->mpi_global_header.imageSize = 176196U;
  
#line 768 
  memcpy((void *)(& mpi_coredump->mpi_global_header.idString),(void const *)"MPI Coredump",16UL);
  
#line 772 
  ql_build_coredump_seg_header(& mpi_coredump->nic_regs_seg_hdr,16U,288U,(u8 *)"NIC1 Registers");
  
#line 777 
  ql_build_coredump_seg_header(& mpi_coredump->nic2_regs_seg_hdr,17U,288U,(u8 *)"NIC2 Registers");
  
#line 783 
  ql_build_coredump_seg_header(& mpi_coredump->xgmac1_seg_hdr,18U,1888U,(u8 *)"NIC1 XGMac Registers");
  
#line 788 
  ql_build_coredump_seg_header(& mpi_coredump->xgmac2_seg_hdr,19U,1888U,(u8 *)"NIC2 XGMac Registers");
  
#line 793 
  if ((qdev->func & 1U) != 0U) {
    
#line 795 
    i = 0;
    
#line 795 
    goto ldv_47483;
    ldv_47482: 
#line 796 
    ;
    
#line 796 
    mpi_coredump->nic2_regs[i] = ql_read32((struct ql_adapter const *)qdev,(int)((unsigned long)i * (unsigned long)4U));
    
#line 795 
    i += 1;
    ldv_47483: 
#line 796 
    ;
    
#line 795 
    if (i <= 63) 
#line 797 
                 goto ldv_47482; else 
#line 800 
                                      goto ldv_47484;
    ldv_47484: 
#line 801 
    ;
    
#line 799 
    i = 0;
    
#line 799 
    goto ldv_47486;
    ldv_47485: 
#line 800 
    ;
    
#line 800 
    mpi_coredump->nic_regs[i] = ql_read_other_func_reg(qdev,(unsigned int)i);
    
#line 799 
    i += 1;
    ldv_47486: 
#line 800 
    ;
    
#line 799 
    if (i <= 63) 
#line 801 
                 goto ldv_47485; else 
#line 804 
                                      goto ldv_47487;
    ldv_47487: 
#line 805 
    ;
    
#line 803 
    ql_get_xgmac_regs(qdev,& mpi_coredump->xgmac2[0],0U);
    
#line 804 
    ql_get_xgmac_regs(qdev,& mpi_coredump->xgmac1[0],1U);
  }
  else {
    
#line 807 
    i = 0;
    
#line 807 
    goto ldv_47489;
    ldv_47488: 
#line 808 
    ;
    
#line 808 
    mpi_coredump->nic_regs[i] = ql_read32((struct ql_adapter const *)qdev,(int)((unsigned long)i * (unsigned long)4U));
    
#line 807 
    i += 1;
    ldv_47489: 
#line 808 
    ;
    
#line 807 
    if (i <= 63) 
#line 809 
                 goto ldv_47488; else 
#line 812 
                                      goto ldv_47490;
    ldv_47490: 
#line 813 
    ;
    
#line 810 
    i = 0;
    
#line 810 
    goto ldv_47492;
    ldv_47491: 
#line 811 
    ;
    
#line 811 
    mpi_coredump->nic2_regs[i] = ql_read_other_func_reg(qdev,(unsigned int)i);
    
#line 810 
    i += 1;
    ldv_47492: 
#line 811 
    ;
    
#line 810 
    if (i <= 63) 
#line 812 
                 goto ldv_47491; else 
#line 815 
                                      goto ldv_47493;
    ldv_47493: 
#line 816 
    ;
    
#line 814 
    ql_get_xgmac_regs(qdev,& mpi_coredump->xgmac1[0],0U);
    
#line 815 
    ql_get_xgmac_regs(qdev,& mpi_coredump->xgmac2[0],1U);
  }
  
#line 819 
  ql_build_coredump_seg_header(& mpi_coredump->xaui_an_hdr,22U,88U,(u8 *)"XAUI AN Registers");
  
#line 826 
  ql_build_coredump_seg_header(& mpi_coredump->xaui_hss_pcs_hdr,23U,164U,(u8 *)"XAUI HSS PCS Registers");
  
#line 832 
  ql_build_coredump_seg_header(& mpi_coredump->xfi_an_hdr,24U,88U,(u8 *)"XFI AN Registers");
  
#line 837 
  ql_build_coredump_seg_header(& mpi_coredump->xfi_train_hdr,25U,80U,(u8 *)"XFI TRAIN Registers");
  
#line 843 
  ql_build_coredump_seg_header(& mpi_coredump->xfi_hss_pcs_hdr,26U,92U,(u8 *)"XFI HSS PCS Registers");
  
#line 849 
  ql_build_coredump_seg_header(& mpi_coredump->xfi_hss_tx_hdr,27U,160U,(u8 *)"XFI HSS TX Registers");
  
#line 855 
  ql_build_coredump_seg_header(& mpi_coredump->xfi_hss_rx_hdr,28U,160U,(u8 *)"XFI HSS RX Registers");
  
#line 861 
  ql_build_coredump_seg_header(& mpi_coredump->xfi_hss_pll_hdr,29U,160U,(u8 *)"XFI HSS PLL Registers");
  
#line 867 
  ql_build_coredump_seg_header(& mpi_coredump->xaui2_an_hdr,38U,88U,(u8 *)"XAUI2 AN Registers");
  
#line 873 
  ql_build_coredump_seg_header(& mpi_coredump->xaui2_hss_pcs_hdr,39U,164U,(u8 *)"XAUI2 HSS PCS Registers");
  
#line 879 
  ql_build_coredump_seg_header(& mpi_coredump->xfi2_an_hdr,40U,88U,(u8 *)"XFI2 AN Registers");
  
#line 885 
  ql_build_coredump_seg_header(& mpi_coredump->xfi2_train_hdr,41U,80U,(u8 *)"XFI2 TRAIN Registers");
  
#line 891 
  ql_build_coredump_seg_header(& mpi_coredump->xfi2_hss_pcs_hdr,42U,92U,(u8 *)"XFI2 HSS PCS Registers");
  
#line 897 
  ql_build_coredump_seg_header(& mpi_coredump->xfi2_hss_tx_hdr,43U,160U,(u8 *)"XFI2 HSS TX Registers");
  
#line 903 
  ql_build_coredump_seg_header(& mpi_coredump->xfi2_hss_rx_hdr,44U,160U,(u8 *)"XFI2 HSS RX Registers");
  
#line 909 
  ql_build_coredump_seg_header(& mpi_coredump->xfi2_hss_pll_hdr,45U,160U,(u8 *)"XFI2 HSS PLL Registers");
  
#line 915 
  status = ql_get_serdes_regs(qdev,mpi_coredump);
  
#line 916 
  if (status != 0) {
    
#line 917 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 917 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed Dump of Serdes Registers. Status = 0x%.08x\n",status); else ;
    
#line 920 
    goto err;
  }
  else ;
  
#line 923 
  ql_build_coredump_seg_header(& mpi_coredump->core_regs_seg_hdr,1U,604U,(u8 *)"Core Registers");
  
#line 931 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->mpi_core_regs[0],196608U,127U);
  
#line 933 
  if (status != 0) 
#line 934 
                   goto err; else ;
  
#line 936 
  status = ql_get_mpi_shadow_regs(qdev,& mpi_coredump->mpi_core_sh_regs[0]);
  
#line 938 
  if (status != 0) 
#line 939 
                   goto err; else ;
  
#line 942 
  ql_build_coredump_seg_header(& mpi_coredump->test_logic_regs_seg_hdr,2U,124U,(u8 *)"Test Logic Regs");
  
#line 947 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->test_logic_regs[0],4096U,23U);
  
#line 949 
  if (status != 0) 
#line 950 
                   goto err; else ;
  
#line 953 
  ql_build_coredump_seg_header(& mpi_coredump->rmii_regs_seg_hdr,3U,288U,(u8 *)"RMII Registers");
  
#line 958 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->rmii_regs[0],4160U,64U);
  
#line 960 
  if (status != 0) 
#line 961 
                   goto err; else ;
  
#line 964 
  ql_build_coredump_seg_header(& mpi_coredump->fcmac1_regs_seg_hdr,4U,288U,(u8 *)"FCMAC1 Registers");
  
#line 969 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->fcmac1_regs[0],4224U,64U);
  
#line 971 
  if (status != 0) 
#line 972 
                   goto err; else ;
  
#line 976 
  ql_build_coredump_seg_header(& mpi_coredump->fcmac2_regs_seg_hdr,5U,288U,(u8 *)"FCMAC2 Registers");
  
#line 982 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->fcmac2_regs[0],4288U,64U);
  
#line 984 
  if (status != 0) 
#line 985 
                   goto err; else ;
  
#line 988 
  ql_build_coredump_seg_header(& mpi_coredump->fc1_mbx_regs_seg_hdr,6U,288U,(u8 *)"FC1 MBox Regs");
  
#line 993 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->fc1_mbx_regs[0],4352U,64U);
  
#line 995 
  if (status != 0) 
#line 996 
                   goto err; else ;
  
#line 999 
  ql_build_coredump_seg_header(& mpi_coredump->ide_regs_seg_hdr,7U,288U,(u8 *)"IDE Registers");
  
#line 1004 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->ide_regs[0],4416U,64U);
  
#line 1006 
  if (status != 0) 
#line 1007 
                   goto err; else ;
  
#line 1010 
  ql_build_coredump_seg_header(& mpi_coredump->nic1_mbx_regs_seg_hdr,8U,288U,(u8 *)"NIC1 MBox Regs");
  
#line 1015 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->nic1_mbx_regs[0],4480U,64U);
  
#line 1017 
  if (status != 0) 
#line 1018 
                   goto err; else ;
  
#line 1021 
  ql_build_coredump_seg_header(& mpi_coredump->smbus_regs_seg_hdr,9U,288U,(u8 *)"SMBus Registers");
  
#line 1026 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->smbus_regs[0],4608U,64U);
  
#line 1028 
  if (status != 0) 
#line 1029 
                   goto err; else ;
  
#line 1032 
  ql_build_coredump_seg_header(& mpi_coredump->fc2_mbx_regs_seg_hdr,10U,288U,(u8 *)"FC2 MBox Regs");
  
#line 1037 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->fc2_mbx_regs[0],4672U,64U);
  
#line 1039 
  if (status != 0) 
#line 1040 
                   goto err; else ;
  
#line 1043 
  ql_build_coredump_seg_header(& mpi_coredump->nic2_mbx_regs_seg_hdr,11U,288U,(u8 *)"NIC2 MBox Regs");
  
#line 1048 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->nic2_mbx_regs[0],4736U,64U);
  
#line 1050 
  if (status != 0) 
#line 1051 
                   goto err; else ;
  
#line 1054 
  ql_build_coredump_seg_header(& mpi_coredump->i2c_regs_seg_hdr,12U,288U,(u8 *)"I2C Registers");
  
#line 1059 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->i2c_regs[0],8128U,64U);
  
#line 1061 
  if (status != 0) 
#line 1062 
                   goto err; else ;
  
#line 1065 
  ql_build_coredump_seg_header(& mpi_coredump->memc_regs_seg_hdr,13U,1056U,(u8 *)"MEMC Registers");
  
#line 1070 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->memc_regs[0],12288U,256U);
  
#line 1072 
  if (status != 0) 
#line 1073 
                   goto err; else ;
  
#line 1076 
  ql_build_coredump_seg_header(& mpi_coredump->pbus_regs_seg_hdr,14U,1056U,(u8 *)"PBUS Registers");
  
#line 1081 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->pbus_regs[0],31744U,256U);
  
#line 1083 
  if (status != 0) 
#line 1084 
                   goto err; else ;
  
#line 1087 
  ql_build_coredump_seg_header(& mpi_coredump->mde_regs_seg_hdr,15U,56U,(u8 *)"MDE Registers");
  
#line 1092 
  status = ql_get_mpi_regs(qdev,& mpi_coredump->mde_regs[0],65536U,6U);
  
#line 1094 
  if (status != 0) 
#line 1095 
                   goto err; else ;
  
#line 1097 
  ql_build_coredump_seg_header(& mpi_coredump->misc_nic_seg_hdr,30U,48U,(u8 *)"MISC NIC INFO");
  
#line 1102 
  mpi_coredump->misc_nic_info.rx_ring_count = (unsigned int)qdev->rx_ring_count;
  
#line 1103 
  mpi_coredump->misc_nic_info.tx_ring_count = (unsigned int)qdev->tx_ring_count;
  
#line 1104 
  mpi_coredump->misc_nic_info.intr_count = qdev->intr_count;
  
#line 1105 
  mpi_coredump->misc_nic_info.function = qdev->func;
  
#line 1109 
  ql_build_coredump_seg_header(& mpi_coredump->intr_states_seg_hdr,31U,100U,(u8 *)"INTR States");
  
#line 1114 
  ql_get_intr_states(qdev,& mpi_coredump->intr_states[0]);
  
#line 1116 
  ql_build_coredump_seg_header(& mpi_coredump->cam_entries_seg_hdr,32U,608U,(u8 *)"CAM Entries");
  
#line 1121 
  status = ql_get_cam_entries(qdev,& mpi_coredump->cam_entries[0]);
  
#line 1122 
  if (status != 0) 
#line 1123 
                   goto err; else ;
  
#line 1125 
  ql_build_coredump_seg_header(& mpi_coredump->nic_routing_words_seg_hdr,33U,96U,(u8 *)"Routing Words");
  
#line 1130 
  status = ql_get_routing_entries(qdev,& mpi_coredump->nic_routing_words[0]);
  
#line 1132 
  if (status != 0) 
#line 1133 
                   goto err; else ;
  
#line 1136 
  ql_build_coredump_seg_header(& mpi_coredump->ets_seg_hdr,34U,72U,(u8 *)"ETS Registers");
  
#line 1141 
  status = ql_get_ets_regs(qdev,& mpi_coredump->ets[0]);
  
#line 1142 
  if (status != 0) 
#line 1143 
                   goto err; else ;
  
#line 1145 
  ql_build_coredump_seg_header(& mpi_coredump->probe_dump_seg_hdr,35U,17576U,(u8 *)"Probe Dump");
  
#line 1150 
  ql_get_probe_dump(qdev,& mpi_coredump->probe_dump[0]);
  
#line 1152 
  ql_build_coredump_seg_header(& mpi_coredump->routing_reg_seg_hdr,36U,800U,(u8 *)"Routing Regs");
  
#line 1157 
  status = ql_get_routing_index_registers(qdev,& mpi_coredump->routing_regs[0]);
  
#line 1159 
  if (status != 0) 
#line 1160 
                   goto err; else ;
  
#line 1162 
  ql_build_coredump_seg_header(& mpi_coredump->mac_prot_reg_seg_hdr,37U,78880U,(u8 *)"MAC Prot Regs");
  
#line 1167 
  ql_get_mac_protocol_registers(qdev,& mpi_coredump->mac_prot_regs[0]);
  
#line 1170 
  ql_build_coredump_seg_header(& mpi_coredump->sem_regs_seg_hdr,50U,48U,(u8 *)"Sem Registers");
  
#line 1175 
  ql_get_sem_registers(qdev,& mpi_coredump->sem_regs[0]);
  
#line 1178 
  ql_write_mpi_reg(qdev,4106U,3U);
  
#line 1181 
  status = ql_unpause_mpi_risc(qdev);
  
#line 1182 
  if (status != 0) {
    
#line 1183 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1183 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed RISC unpause. Status = 0x%.08x\n",status); else ;
    
#line 1185 
    goto err;
  }
  else ;
  
#line 1189 
  status = ql_hard_reset_mpi_risc(qdev);
  
#line 1190 
  if (status != 0) {
    
#line 1191 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1191 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed RISC reset. Status = 0x%.08x\n",status); else ;
    
#line 1193 
    goto err;
  }
  else ;
  
#line 1196 
  ql_build_coredump_seg_header(& mpi_coredump->code_ram_seg_hdr,20U,32800U,(u8 *)"WCS RAM");
  
#line 1201 
  status = ql_dump_risc_ram_area(qdev,(void *)(& mpi_coredump->code_ram[0]),131072U,8192);
  
#line 1203 
  if (status != 0) {
    
#line 1204 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1204 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed Dump of CODE RAM. Status = 0x%.08x\n",status); else ;
    
#line 1207 
    goto err;
  }
  else ;
  
#line 1211 
  ql_build_coredump_seg_header(& mpi_coredump->memc_ram_seg_hdr,21U,32800U,(u8 *)"MEMC RAM");
  
#line 1216 
  status = ql_dump_risc_ram_area(qdev,(void *)(& mpi_coredump->memc_ram[0]),1048576U,8192);
  
#line 1218 
  if (status != 0) {
    
#line 1219 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1219 
                                       netdev_err((struct net_device const *)qdev->ndev,"Failed Dump of MEMC RAM. Status = 0x%.08x\n",status); else ;
    
#line 1222 
    goto err;
  }
  else ;
  err: 
#line 1224 
  ;
  
#line 1225 
  ql_sem_unlock(qdev,3221225472U);
  
#line 1226 
  __retres = status;
  return_label: 
#line 1226 
                return __retres;
}


#line 1230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static void ql_get_core_dump(struct ql_adapter *qdev)
{
  int tmp;
  int tmp_1;
  bool tmp_0;
  
#line 1232 
  tmp = ql_own_firmware(qdev);
  
#line 1232 
  if (tmp == 0) {
    
#line 1233 
    if ((qdev->msg_enable & 1U) != 0U) 
#line 1233 
                                       netdev_err((struct net_device const *)qdev->ndev,"Don\'t own firmware!\n"); else ;
    
#line 1234 
    goto return_label;
  }
  else ;
  
#line 1237 
  tmp_0 = netif_running((struct net_device const *)qdev->ndev);
  
#line 1237 
  if (tmp_0) 
#line 1237 
             tmp_1 = 0; else 
#line 1237 
                             tmp_1 = 1;
  
#line 1237 
  if (tmp_1) {
    
#line 1238 
    if ((qdev->msg_enable & 32U) != 0U) 
#line 1238 
                                        netdev_err((struct net_device const *)qdev->ndev,"Force Coredump can only be done from interface that is up\n"); else ;
    
#line 1240 
    goto return_label;
  }
  else ;
  
#line 1242 
  ql_queue_fw_error(qdev);
  return_label: 
#line 1243 
                return;
}


#line 1245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
static void ql_gen_reg_dump(struct ql_adapter *qdev, struct ql_reg_dump *mpi_coredump)
{
  int i;
  int status;
  
#line 1251 
  memset((void *)(& mpi_coredump->mpi_global_header),0,256UL);
  
#line 1253 
  mpi_coredump->mpi_global_header.cookie = 1431677610U;
  
#line 1254 
  mpi_coredump->mpi_global_header.headerSize = 256U;
  
#line 1256 
  mpi_coredump->mpi_global_header.imageSize = 1432U;
  
#line 1258 
  memcpy((void *)(& mpi_coredump->mpi_global_header.idString),(void const *)"MPI Coredump",16UL);
  
#line 1263 
  ql_build_coredump_seg_header(& mpi_coredump->misc_nic_seg_hdr,30U,48U,(u8 *)"MISC NIC INFO");
  
#line 1268 
  mpi_coredump->misc_nic_info.rx_ring_count = (unsigned int)qdev->rx_ring_count;
  
#line 1269 
  mpi_coredump->misc_nic_info.tx_ring_count = (unsigned int)qdev->tx_ring_count;
  
#line 1270 
  mpi_coredump->misc_nic_info.intr_count = qdev->intr_count;
  
#line 1271 
  mpi_coredump->misc_nic_info.function = qdev->func;
  
#line 1274 
  ql_build_coredump_seg_header(& mpi_coredump->nic_regs_seg_hdr,16U,288U,(u8 *)"NIC Registers");
  
#line 1280 
  i = 0;
  
#line 1280 
  goto ldv_47504;
  ldv_47503: 
#line 1281 
  ;
  
#line 1281 
  mpi_coredump->nic_regs[i] = ql_read32((struct ql_adapter const *)qdev,(int)((unsigned long)i * (unsigned long)4U));
  
#line 1280 
  i += 1;
  ldv_47504: 
#line 1281 
  ;
  
#line 1280 
  if (i <= 63) 
#line 1282 
               goto ldv_47503; else 
#line 1285 
                                    goto ldv_47505;
  ldv_47505: 
#line 1286 
  ;
  
#line 1285 
  ql_build_coredump_seg_header(& mpi_coredump->intr_states_seg_hdr,31U,64U,(u8 *)"INTR States");
  
#line 1290 
  ql_get_intr_states(qdev,& mpi_coredump->intr_states[0]);
  
#line 1292 
  ql_build_coredump_seg_header(& mpi_coredump->cam_entries_seg_hdr,32U,608U,(u8 *)"CAM Entries");
  
#line 1297 
  status = ql_get_cam_entries(qdev,& mpi_coredump->cam_entries[0]);
  
#line 1298 
  if (status != 0) 
#line 1299 
                   goto return_label; else ;
  
#line 1301 
  ql_build_coredump_seg_header(& mpi_coredump->nic_routing_words_seg_hdr,33U,96U,(u8 *)"Routing Words");
  
#line 1306 
  status = ql_get_routing_entries(qdev,& mpi_coredump->nic_routing_words[0]);
  
#line 1308 
  if (status != 0) 
#line 1309 
                   goto return_label; else ;
  
#line 1312 
  ql_build_coredump_seg_header(& mpi_coredump->ets_seg_hdr,34U,72U,(u8 *)"ETS Registers");
  
#line 1317 
  status = ql_get_ets_regs(qdev,& mpi_coredump->ets[0]);
  
#line 1318 
  if (status != 0) 
#line 1319 
                   goto return_label; else ;
  return_label: 
#line 1320 
                return;
}


#line 1322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
void ql_get_dump(struct ql_adapter *qdev, void *buff)
{
  int tmp_0;
  
#line 1333 
  tmp_0 = constant_test_bit(11L,(unsigned long const volatile *)(& qdev->flags));
  
#line 1333 
  if (tmp_0 == 0) {
    int tmp;
    
#line 1334 
    tmp = ql_core_dump(qdev,(struct ql_mpi_coredump *)buff);
    
#line 1334 
    if (tmp == 0) 
#line 1335 
                  ql_soft_reset_mpi_risc(qdev);
    else 
      
#line 1337 
      if ((qdev->msg_enable & 1U) != 0U) 
#line 1337 
                                         netdev_err((struct net_device const *)qdev->ndev,"coredump failed!\n"); else ;
  }
  else {
    
#line 1339 
    ql_gen_reg_dump(qdev,(struct ql_reg_dump *)buff);
    
#line 1340 
    ql_get_core_dump(qdev);
  }
  
#line 1342 
  return;
}


#line 1345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlge/qlge_dbg.c"
void ql_mpi_core_to_log(struct work_struct *work)
{
  struct ql_adapter *tmp;
  u32 *tmp_0;
  u32 count;
  int i;
  {
    
#line 1348 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1348 
    tmp = (struct ql_adapter *)__mptr + 18446744073709530320U;
  }
  
#line 1347 
  struct ql_adapter *qdev = tmp;
  
#line 1352 
  count = 44049U;
  
#line 1353 
  tmp_0 = (u32 *)qdev->mpi_coredump;
  
#line 1354 
  if ((qdev->msg_enable & 1U) != 0U) 
#line 1354 
                                     netdev_printk("\001",(struct net_device const *)qdev->ndev,"Core is dumping to log file!\n"); else ;
  
#line 1357 
  i = 0;
  
#line 1357 
  goto ldv_47520;
  ldv_47519: 
#line 1358 
  ;
  
#line 1358 
  printk("\001",i,*(tmp_0 + i),*(tmp_0 + ((unsigned int)i + 1U)),*(tmp_0 + ((unsigned int)i + 2U)),*(tmp_0 + ((unsigned int)i + 3U)),*(tmp_0 + ((unsigned int)i + 4U)),*(tmp_0 + ((unsigned int)i + 5U)),*(tmp_0 + ((unsigned int)i + 6U)),*(tmp_0 + ((unsigned int)i + 7U)));
  
#line 1368 
  msleep(5U);
  
#line 1357 
  i += 8;
  ldv_47520: 
#line 1358 
  ;
  
#line 1357 
  if ((unsigned int)i < count) 
#line 1359 
                               goto ldv_47519; else 
#line 1362 
                                                    goto ldv_47521;
  ldv_47521: 
#line 1363 
  ;
  
#line 1364 
  return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 28 
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 87  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0);


#line 90 
int main(void);


#line 91 
void ldv_dispatch_register_10_4(struct net_device *arg0);


#line 93 
void ldv_dispatch_register_11_3(struct pci_driver *arg0);


#line 94 
void *ldv_interrupt_scenario_17(void *arg0);


#line 96 
void ldv_dispatch_deregister_9_1(struct pci_driver *arg0);


#line 97 
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 98 
void *ldv_random_allocationless_scenario_14(void *arg0);


#line 100 
void *ldv_timer_scenario_16(void *arg0);


#line 101 
void *ldv_pci_scenario_15(void *arg0);


#line 103 
void ldv_dispatch_irq_deregister_7_1(int arg0);


#line 104 
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0);


#line 105 
void *ldv_initialization_1(void *arg0);


#line 108 
void ldv_dispatch_instance_deregister_12_1(struct timer_list *arg0);


#line 115  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 117  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 122  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_14 *cf_arg_14;
  int tmp;
  
#line 125 
  tmp = ldv_undef_int();
  
#line 125 
  switch (tmp) {
    case 0: 
#line 126 
    ;
    
#line 127 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 128 
    __VERIFIER_assume(ret == 0);
    
#line 129 
    goto ldv_44750;
    default: 
#line 131 
    ;
    
#line 131 
    __VERIFIER_assume(0);
  }
  ldv_44750: 
#line 132 
  ;
  
#line 133 
  return;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_12_timer_list;
  
#line 143 
  ldv_12_timer_list = arg0;
  
#line 147 
  ldv_dispatch_instance_deregister_12_1(ldv_12_timer_list);
  
#line 148 
  ;
  
#line 148 
  __retres = 0;
  
#line 148 
  return __retres;
}


#line 156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 159 
  struct pci_driver *ldv_11_pci_driver = ldv_emg_alias_qlge_driver_2;
  
#line 163 
  tmp_0 = ldv_undef_int();
  
#line 163 
  if (tmp_0 != 0) {
    
#line 165 
    ldv_11_pci_driver = arg0;
    
#line 169 
    ldv_dispatch_register_11_3(ldv_11_pci_driver);
    
#line 173 
    __retres = 0;
    
#line 173 
    goto return_label;
  }
  else {
    int tmp;
    
#line 180 
    tmp = ldv_undef_int_negative();
    
#line 180 
    __retres = tmp;
    
#line 180 
    goto return_label;
  }
  return_label: 
#line 163 
                return __retres;
}


#line 190  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 193 
  ldv_initialize();
  
#line 196 
  ldv_initialization_1((void *)0);
  
#line 198 
  __retres = 0;
  
#line 198 
  return __retres;
}


#line 203  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_7_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_7 *cf_arg_17;
  int tmp;
  
#line 206 
  tmp = ldv_undef_int();
  
#line 206 
  switch (tmp) {
    case 0: 
#line 207 
    ;
    
#line 208 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 209 
    __VERIFIER_assume(ret == 0);
    
#line 210 
    goto ldv_44771;
    default: 
#line 212 
    ;
    
#line 212 
    __VERIFIER_assume(0);
  }
  ldv_44771: 
#line 213 
  ;
  
#line 214 
  return;
}


#line 218  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_4_netdev;
  int tmp_0;
  
#line 225 
  tmp_0 = ldv_undef_int();
  
#line 225 
  if (tmp_0 != 0) {
    
#line 227 
    ldv_4_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 231 
    __retres = ldv_4_netdev;
    
#line 231 
    goto return_label;
  }
  else {
    
#line 238 
    __retres = (struct net_device *)0;
    
#line 238 
    goto return_label;
  }
  return_label: 
#line 225 
                return __retres;
}


#line 248  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_11_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_15 *cf_arg_15;
  int tmp;
  
#line 251 
  tmp = ldv_undef_int();
  
#line 251 
  switch (tmp) {
    case 0: 
#line 252 
    ;
    
#line 253 
    cf_arg_15 = (struct ldv_struct_pci_scenario_15 *)ldv_xmalloc(16UL);
    
#line 254 
    cf_arg_15->arg0 = arg0;
    
#line 255 
    ret = pthread_create(& ldv_thread_15,(pthread_attr_t const *)0,& ldv_pci_scenario_15,(void *)cf_arg_15);
    
#line 256 
    __VERIFIER_assume(ret == 0);
    
#line 257 
    goto ldv_44785;
    default: 
#line 259 
    ;
    
#line 259 
    __VERIFIER_assume(0);
  }
  ldv_44785: 
#line 260 
  ;
  
#line 261 
  return;
}


#line 265  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_17(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_17_ret_val;
  int ldv_17_line;
  void *ldv_17_data;
  enum irqreturn (*ldv_17_thread)(int , void *);
  int tmp;
  
#line 271 
  enum irqreturn (*ldv_17_callback)(int , void *) = & ldv_emg_wrapper_qlge_isr_2;
  
#line 274 
  struct ldv_struct_interrupt_scenario_17 *data = (struct ldv_struct_interrupt_scenario_17 *)arg0;
  
#line 279 
  if (data != (struct ldv_struct_interrupt_scenario_17 *)0) {
    
#line 280 
    ldv_17_line = data->arg0;
    
#line 281 
    ldv_17_callback = data->arg1;
    
#line 282 
    ldv_17_thread = data->arg2;
    
#line 283 
    ldv_17_data = data->arg3;
    
#line 284 
    ldv_free((void *)data);
  }
  else ;
  
#line 290 
  ldv_switch_to_interrupt_context();
  
#line 292 
  ldv_17_ret_val = ldv_emg_wrapper_qlge_isr_2(ldv_17_line,ldv_17_data);
  
#line 294 
  ldv_switch_to_process_context();
  
#line 297 
  tmp = ldv_undef_int();
  
#line 297 
  if (tmp != 0) {
    
#line 299 
    __VERIFIER_assume(ldv_17_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 303 
    if (ldv_17_thread != (enum irqreturn (*)(int , void *))0) 
#line 305 
                                                              (*ldv_17_thread)(ldv_17_line,ldv_17_data); else ;
  }
  else 
#line 312 
       __VERIFIER_assume(ldv_17_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 321 
  __retres = (void *)0;
  
#line 321 
  goto return_label;
  
#line 323 
  __retres = (void *)0;
  return_label: 
#line 323 
                return __retres;
}


#line 328  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_13_line;
  void *ldv_13_data;
  enum irqreturn (*ldv_13_thread)(int , void *);
  int tmp_0;
  
#line 333 
  enum irqreturn (*ldv_13_callback)(int , void *) = & ldv_emg_wrapper_qlge_isr_2;
  
#line 338 
  tmp_0 = ldv_undef_int();
  
#line 338 
  if (tmp_0 != 0) {
    
#line 340 
    ldv_13_line = (int)arg0;
    
#line 341 
    ldv_13_callback = arg1;
    
#line 342 
    ldv_13_thread = (enum irqreturn (*)(int , void *))0;
    
#line 343 
    ldv_13_data = arg4;
    
#line 347 
    ldv_dispatch_irq_register_13_3(ldv_13_line,ldv_13_callback,ldv_13_thread,ldv_13_data);
    
#line 351 
    __retres = 0;
    
#line 351 
    goto return_label;
  }
  else {
    int tmp;
    
#line 358 
    tmp = ldv_undef_int_negative();
    
#line 358 
    __retres = tmp;
    
#line 358 
    goto return_label;
  }
  return_label: 
#line 338 
                return __retres;
}


#line 368  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_9_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_15 *cf_arg_15;
  int tmp;
  
#line 371 
  tmp = ldv_undef_int();
  
#line 371 
  switch (tmp) {
    case 0: 
#line 372 
    ;
    
#line 373 
    ret = pthread_join(ldv_thread_15,(void **)0);
    
#line 374 
    __VERIFIER_assume(ret == 0);
    
#line 375 
    goto ldv_44823;
    default: 
#line 377 
    ;
    
#line 377 
    __VERIFIER_assume(0);
  }
  ldv_44823: 
#line 378 
  ;
  
#line 379 
  return;
}


#line 383  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_17 *cf_arg_17;
  int tmp;
  
#line 386 
  tmp = ldv_undef_int();
  
#line 386 
  switch (tmp) {
    case 0: 
#line 387 
    ;
    
#line 388 
    cf_arg_17 = (struct ldv_struct_interrupt_scenario_17 *)ldv_xmalloc(32UL);
    
#line 389 
    cf_arg_17->arg0 = arg0;
    
#line 390 
    cf_arg_17->arg1 = arg1;
    
#line 391 
    cf_arg_17->arg2 = arg2;
    
#line 392 
    cf_arg_17->arg3 = arg3;
    
#line 393 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_interrupt_scenario_17,(void *)cf_arg_17);
    
#line 394 
    __VERIFIER_assume(ret == 0);
    
#line 395 
    goto ldv_44838;
    default: 
#line 397 
    ;
    
#line 397 
    __VERIFIER_assume(0);
  }
  ldv_44838: 
#line 398 
  ;
  
#line 399 
  return;
}


#line 403  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_14(void *arg0)
{
  void *__retres;
  unsigned short ldv_14_ldv_param_1_28;
  enum ethtool_phys_id_state *ldv_14_ldv_param_1_3;
  struct ethtool_cmd *ldv_14_ldv_param_1_13;
  struct ethtool_test *ldv_14_ldv_param_1_15;
  unsigned short ldv_14_ldv_param_2_29;
  void *ldv_14_ldv_param_2_23;
  int ldv_14_ldv_param_1_14;
  struct ethtool_stats *ldv_14_ldv_param_1_5;
  struct ethtool_pauseparam *ldv_14_ldv_param_1_2;
  unsigned int ldv_14_ldv_param_1_4;
  unsigned char *ldv_14_ldv_param_2_25;
  struct ethtool_coalesce *ldv_14_ldv_param_1_26;
  struct sk_buff *ldv_14_ldv_param_0_11;
  struct net_device *ldv_14_container;
  unsigned long long ldv_14_ldv_param_1_8;
  unsigned long long ldv_14_ldv_param_1_10;
  void *ldv_14_ldv_param_1_12;
  unsigned short ldv_14_ldv_param_1_18;
  struct ethtool_coalesce *ldv_14_ldv_param_1_20;
  unsigned short ldv_14_ldv_param_2_19;
  struct ethtool_wolinfo *ldv_14_ldv_param_1_21;
  struct ethtool_drvinfo *ldv_14_ldv_param_1_9;
  struct ethtool_wolinfo *ldv_14_ldv_param_1_17;
  unsigned int ldv_14_ldv_param_1_24;
  unsigned long long *ldv_14_ldv_param_2_6;
  struct ethtool_regs *ldv_14_ldv_param_1_22;
  struct ethtool_pauseparam *ldv_14_ldv_param_1_27;
  int ldv_14_ldv_param_1_7;
  unsigned long long *ldv_14_ldv_param_2_16;
  int tmp_16;
  
#line 436 
  struct ldv_struct_random_allocationless_scenario_14 *data = (struct ldv_struct_random_allocationless_scenario_14 *)arg0;
  
#line 441 
  if (data != (struct ldv_struct_random_allocationless_scenario_14 *)0) {
    
#line 442 
    ldv_14_container = data->arg0;
    
#line 443 
    ldv_free((void *)data);
  }
  else ;
  
#line 451 
  goto ldv_call_14;
  
#line 453 
  __retres = (void *)0;
  
#line 453 
  goto return_label;
  ldv_call_14: 
#line 456 
  ;
  
#line 459 
  tmp_16 = ldv_undef_int();
  
#line 459 
  if (tmp_16 != 0) {
    int tmp_0;
    
#line 461 
    ldv_14_ldv_param_1_2 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    
#line 464 
    tmp_0 = ldv_undef_int();
    
#line 464 
    switch (tmp_0) {
      case 1: 
#line 465 
      ;
      
#line 468 
      ldv_emg_wrapper_ql_get_pauseparam_2(ldv_14_container,ldv_14_ldv_param_1_2);
      
#line 471 
      goto ldv_44875;
      case 2: 
#line 473 
      ;
      
#line 476 
      ldv_emg_wrapper_qlge_set_multicast_list_28(ldv_14_container);
      
#line 479 
      goto ldv_44875;
      case 3: 
#line 481 
      ;
      
#line 487 
      ldv_emg_wrapper_qlge_vlan_rx_kill_vid_29(ldv_14_container,(unsigned short)((int)ldv_14_ldv_param_1_28),(unsigned short)((int)ldv_14_ldv_param_2_29));
      
#line 493 
      goto ldv_44875;
      case 4: 
#line 495 
      ;
      
#line 497 
      ldv_14_ldv_param_1_27 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 502 
      ldv_emg_wrapper_ql_set_pauseparam_30(ldv_14_container,ldv_14_ldv_param_1_27);
      
#line 506 
      ldv_free((void *)ldv_14_ldv_param_1_27);
      
#line 509 
      goto ldv_44875;
      case 5: 
#line 511 
      ;
      
#line 513 
      ldv_14_ldv_param_1_26 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 518 
      ldv_emg_wrapper_ql_set_coalesce_27(ldv_14_container,ldv_14_ldv_param_1_26);
      
#line 522 
      ldv_free((void *)ldv_14_ldv_param_1_26);
      
#line 525 
      goto ldv_44875;
      case 6: 
#line 527 
      ;
      
#line 530 
      ldv_emg_wrapper_ql_get_regs_len_26(ldv_14_container);
      
#line 533 
      goto ldv_44875;
      case 7: 
#line 535 
      ;
      
#line 537 
      ldv_14_ldv_param_2_25 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 542 
      ldv_emg_wrapper_ql_get_strings_5(ldv_14_container,ldv_14_ldv_param_1_24,ldv_14_ldv_param_2_25);
      
#line 546 
      ldv_free((void *)ldv_14_ldv_param_2_25);
      
#line 549 
      goto ldv_44875;
      case 8: 
#line 551 
      ;
      
#line 554 
      ldv_emg_wrapper_qlge_get_stats_24(ldv_14_container);
      
#line 557 
      goto ldv_44875;
      case 9: 
#line 559 
      ;
      
#line 562 
      ldv_emg_wrapper_qlge_tx_timeout_16(ldv_14_container);
      
#line 565 
      goto ldv_44875;
      case 10: 
#line 567 
      ;
      
#line 569 
      ldv_14_ldv_param_1_22 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
      
#line 570 
      ldv_14_ldv_param_2_23 = ldv_xmalloc_unknown_size(0UL);
      
#line 575 
      ldv_emg_wrapper_ql_get_regs_22(ldv_14_container,ldv_14_ldv_param_1_22,ldv_14_ldv_param_2_23);
      
#line 579 
      ldv_free((void *)ldv_14_ldv_param_1_22);
      
#line 580 
      ldv_free(ldv_14_ldv_param_2_23);
      
#line 583 
      goto ldv_44875;
      case 11: 
#line 585 
      ;
      
#line 587 
      ldv_14_ldv_param_1_21 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 592 
      ldv_emg_wrapper_ql_set_wol_21(ldv_14_container,ldv_14_ldv_param_1_21);
      
#line 596 
      ldv_free((void *)ldv_14_ldv_param_1_21);
      
#line 599 
      goto ldv_44875;
      case 12: 
#line 601 
      ;
      
#line 603 
      ldv_14_ldv_param_1_20 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 608 
      ldv_emg_wrapper_ql_get_coalesce_20(ldv_14_container,ldv_14_ldv_param_1_20);
      
#line 612 
      ldv_free((void *)ldv_14_ldv_param_1_20);
      
#line 615 
      goto ldv_44875;
      case 13: 
#line 617 
      ;
      
#line 623 
      ldv_emg_wrapper_qlge_vlan_rx_add_vid_19(ldv_14_container,(unsigned short)((int)ldv_14_ldv_param_1_18),(unsigned short)((int)ldv_14_ldv_param_2_19));
      
#line 629 
      goto ldv_44875;
      case 14: 
#line 631 
      ;
      
#line 633 
      ldv_14_ldv_param_1_17 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 638 
      ldv_emg_wrapper_ql_get_wol_18(ldv_14_container,ldv_14_ldv_param_1_17);
      
#line 642 
      ldv_free((void *)ldv_14_ldv_param_1_17);
      
#line 645 
      goto ldv_44875;
      case 15: 
#line 647 
      ;
      
#line 649 
      ldv_14_ldv_param_2_16 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 650 
      ldv_14_ldv_param_1_15 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
      
#line 655 
      ldv_emg_wrapper_ql_self_test_17(ldv_14_container,ldv_14_ldv_param_1_15,ldv_14_ldv_param_2_16);
      
#line 659 
      ldv_free((void *)ldv_14_ldv_param_2_16);
      
#line 660 
      ldv_free((void *)ldv_14_ldv_param_1_15);
      
#line 663 
      goto ldv_44875;
      case 16: 
#line 665 
      ;
      
#line 671 
      ldv_emg_wrapper_ql_get_sset_count_23(ldv_14_container,ldv_14_ldv_param_1_14);
      
#line 677 
      goto ldv_44875;
      case 17: 
#line 679 
      ;
      
#line 681 
      ldv_14_ldv_param_1_13 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 686 
      ldv_emg_wrapper_ql_get_settings_15(ldv_14_container,ldv_14_ldv_param_1_13);
      
#line 690 
      ldv_free((void *)ldv_14_ldv_param_1_13);
      
#line 693 
      goto ldv_44875;
      case 18: 
#line 695 
      ;
      
#line 697 
      ldv_14_ldv_param_1_12 = ldv_xmalloc_unknown_size(0UL);
      
#line 702 
      ldv_emg_wrapper_qlge_set_mac_address_14(ldv_14_container,ldv_14_ldv_param_1_12);
      
#line 706 
      ldv_free(ldv_14_ldv_param_1_12);
      
#line 709 
      goto ldv_44875;
      case 19: 
#line 711 
      ;
      
#line 713 
      ldv_14_ldv_param_0_11 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 718 
      ldv_emg_wrapper_qlge_send_13(ldv_14_ldv_param_0_11,ldv_14_container);
      
#line 722 
      ldv_free((void *)ldv_14_ldv_param_0_11);
      
#line 725 
      goto ldv_44875;
      case 20: 
#line 727 
      ;
      
#line 730 
      ldv_emg_wrapper_ql_get_msglevel_12(ldv_14_container);
      
#line 733 
      goto ldv_44875;
      case 21: 
#line 735 
      ;
      
#line 741 
      ldv_emg_wrapper_qlge_fix_features_11(ldv_14_container,ldv_14_ldv_param_1_10);
      
#line 747 
      goto ldv_44875;
      case 22: 
#line 749 
      ;
      
#line 751 
      ldv_14_ldv_param_1_9 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 756 
      ldv_emg_wrapper_ql_get_drvinfo_10(ldv_14_container,ldv_14_ldv_param_1_9);
      
#line 760 
      ldv_free((void *)ldv_14_ldv_param_1_9);
      
#line 763 
      goto ldv_44875;
      case 23: 
#line 765 
      ;
      
#line 771 
      ldv_emg_wrapper_qlge_set_features_9(ldv_14_container,ldv_14_ldv_param_1_8);
      
#line 777 
      goto ldv_44875;
      case 24: 
#line 779 
      ;
      
#line 785 
      ldv_emg_wrapper_qlge_change_mtu_6(ldv_14_container,ldv_14_ldv_param_1_7);
      
#line 791 
      goto ldv_44875;
      case 25: 
#line 793 
      ;
      
#line 795 
      ldv_14_ldv_param_2_6 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 796 
      ldv_14_ldv_param_1_5 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 801 
      ldv_emg_wrapper_ql_get_ethtool_stats_7(ldv_14_container,ldv_14_ldv_param_1_5,ldv_14_ldv_param_2_6);
      
#line 805 
      ldv_free((void *)ldv_14_ldv_param_2_6);
      
#line 806 
      ldv_free((void *)ldv_14_ldv_param_1_5);
      
#line 809 
      goto ldv_44875;
      case 26: 
#line 811 
      ;
      
#line 814 
      (*ldv_emg_alias_eth_validate_addr_8)(ldv_14_container);
      
#line 817 
      goto ldv_44875;
      case 27: 
#line 819 
      ;
      
#line 825 
      ldv_emg_wrapper_ql_set_msglevel_25(ldv_14_container,ldv_14_ldv_param_1_4);
      
#line 831 
      goto ldv_44875;
      case 28: 
#line 833 
      ;
      
#line 835 
      ldv_14_ldv_param_1_3 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
      
#line 840 
      ldv_emg_wrapper_ql_set_phys_id_4(ldv_14_container,*ldv_14_ldv_param_1_3);
      
#line 844 
      ldv_free((void *)ldv_14_ldv_param_1_3);
      
#line 847 
      goto ldv_44875;
      case 29: 
#line 849 
      ;
      
#line 852 
      (*ldv_emg_alias_ethtool_op_get_link_3)(ldv_14_container);
      
#line 855 
      goto ldv_44875;
      default: 
#line 857 
      ;
      
#line 857 
      __VERIFIER_assume(0);
    }
    ldv_44875: 
#line 860 
    ;
    
#line 860 
    ldv_free((void *)ldv_14_ldv_param_1_2);
    
#line 867 
    goto ldv_call_14;
  }
  else {
    
#line 875 
    __retres = (void *)0;
    
#line 875 
    goto return_label;
  }
  
#line 878 
  __retres = (void *)0;
  return_label: 
#line 878 
                return __retres;
}


#line 883  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_queue_delayed_work_on(int arg0, struct workqueue_struct *arg1, struct delayed_work *arg2, unsigned long arg3)
{
  _Bool __retres;
  struct work_struct *ldv_8_ldv_param_0_2;
  struct delayed_work *ldv_8_delayed_work;
  int tmp_0;
  
#line 891 
  tmp_0 = ldv_undef_int();
  
#line 891 
  if (tmp_0 != 0) {
    
#line 893 
    ldv_8_delayed_work = arg2;
    
#line 897 
    ldv_8_ldv_param_0_2 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    
#line 901 
    if (ldv_8_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      
#line 903 
      (*(ldv_8_delayed_work->work.func))(ldv_8_ldv_param_0_2); else ;
    
#line 908 
    ldv_free((void *)ldv_8_ldv_param_0_2);
    
#line 912 
    __retres = (_Bool)1;
    
#line 912 
    goto return_label;
  }
  else {
    
#line 919 
    __retres = (_Bool)0;
    
#line 919 
    goto return_label;
  }
  return_label: 
#line 891 
                return __retres;
}


#line 929  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_16(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_16_container;
  
#line 934 
  struct ldv_struct_timer_scenario_16 *data = (struct ldv_struct_timer_scenario_16 *)arg0;
  
#line 939 
  if (data != (struct ldv_struct_timer_scenario_16 *)0) {
    
#line 940 
    ldv_16_container = data->arg0;
    
#line 941 
    ldv_free((void *)data);
  }
  else ;
  
#line 946 
  if (ldv_16_container->function != (void (*)(unsigned long ))0) {
    
#line 948 
    ldv_switch_to_interrupt_context();
    
#line 950 
    (*(ldv_16_container->function))(ldv_16_container->data);
    
#line 952 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 961 
  __retres = (void *)0;
  
#line 961 
  goto return_label;
  
#line 963 
  __retres = (void *)0;
  return_label: 
#line 963 
                return __retres;
}


#line 968  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_15(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_15_resource_1;
  struct pci_device_id *ldv_15_ldv_param_1_2;
  struct pm_message ldv_15_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 973 
  struct pci_driver *ldv_15_container = ldv_emg_alias_qlge_driver_2;
  
#line 974 
  int ldv_15_ret = ldv_undef_int();
  
#line 977 
  struct ldv_struct_pci_scenario_15 *data = (struct ldv_struct_pci_scenario_15 *)arg0;
  
#line 981 
  ldv_15_ret = ldv_undef_int();
  
#line 984 
  if (data != (struct ldv_struct_pci_scenario_15 *)0) {
    
#line 985 
    ldv_15_container = data->arg0;
    
#line 986 
    ldv_free((void *)data);
  }
  else ;
  
#line 997 
  goto ldv_main_15;
  
#line 999 
  __retres = (void *)0;
  
#line 999 
  goto return_label;
  ldv_main_15: 
#line 1002 
  ;
  
#line 1005 
  tmp_2 = ldv_undef_int();
  
#line 1005 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 1007 
    ldv_15_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 1012 
    ldv_pre_probe();
    
#line 1014 
    ldv_15_ret = ldv_emg_wrapper_qlge_probe_3(ldv_15_resource_1,ldv_15_ldv_param_1_2);
    
#line 1016 
    ldv_15_ret = ldv_post_probe(ldv_15_ret);
    
#line 1020 
    ldv_free((void *)ldv_15_ldv_param_1_2);
    
#line 1023 
    tmp_1 = ldv_undef_int();
    
#line 1023 
    if (tmp_1 != 0) {
      
#line 1025 
      __VERIFIER_assume(ldv_15_ret == 0);
      
#line 1032 
      goto ldv_call_15;
    }
    else {
      
#line 1036 
      __VERIFIER_assume(ldv_15_ret != 0);
      
#line 1043 
      goto ldv_main_15;
    }
  }
  else {
    
#line 1055 
    __retres = (void *)0;
    
#line 1055 
    goto return_label;
  }
  
#line 1058 
  __retres = (void *)0;
  
#line 1058 
  goto return_label;
  ldv_call_15: 
#line 1061 
  ;
  
#line 1064 
  tmp_3 = ldv_undef_int();
  
#line 1064 
  switch (tmp_3) {
    case 1: 
#line 1065 
    ;
    
#line 1074 
    goto ldv_call_15;
    case 2: 
#line 1077 
    ;
    
#line 1080 
    ldv_15_ret = ldv_emg_wrapper_qlge_suspend_4(ldv_15_resource_1,ldv_15_resource_0);
    
#line 1082 
    ldv_15_ret = ldv_filter_err_code(ldv_15_ret);
    
#line 1086 
    if (ldv_15_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 1088 
      ldv_15_ret = (*(ldv_15_container->suspend_late))(ldv_15_resource_1,ldv_15_resource_0);
      
#line 1090 
      ldv_15_ret = ldv_filter_err_code(ldv_15_ret);
    }
    else 
#line 1092 
         ldv_15_ret = ldv_undef_int();
    
#line 1097 
    if (ldv_15_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 1099 
      (*(ldv_15_container->resume_early))(ldv_15_resource_1); else ;
    
#line 1105 
    ldv_emg_wrapper_qlge_resume_6(ldv_15_resource_1);
    
#line 1112 
    goto ldv_call_15;
    case 3: 
#line 1115 
    ;
    
#line 1118 
    ldv_emg_wrapper_qlge_shutdown_2(ldv_15_resource_1);
    
#line 1123 
    ldv_emg_wrapper_qlge_remove_5(ldv_15_resource_1);
    
#line 1130 
    goto ldv_main_15;
    default: 
#line 1133 
    ;
    
#line 1133 
    __VERIFIER_assume(0);
  }
  
#line 1136 
  __retres = (void *)0;
  return_label: 
#line 1136 
                return __retres;
}


#line 1141  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 1144 
  struct pci_driver *ldv_9_pci_driver = ldv_emg_alias_qlge_driver_2;
  
#line 1147 
  ldv_9_pci_driver = arg0;
  
#line 1151 
  ldv_dispatch_deregister_9_1(ldv_9_pci_driver);
  
#line 1155 
  goto return_label;
  return_label: 
#line 1157 
                return;
}


#line 1162  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_10_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_14 *cf_arg_14;
  int tmp;
  
#line 1165 
  tmp = ldv_undef_int();
  
#line 1165 
  switch (tmp) {
    case 0: 
#line 1166 
    ;
    
#line 1167 
    cf_arg_14 = (struct ldv_struct_random_allocationless_scenario_14 *)ldv_xmalloc(16UL);
    
#line 1168 
    cf_arg_14->arg0 = arg0;
    
#line 1169 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_14,(void *)cf_arg_14);
    
#line 1170 
    __VERIFIER_assume(ret == 0);
    
#line 1171 
    goto ldv_44943;
    default: 
#line 1173 
    ;
    
#line 1173 
    __VERIFIER_assume(0);
  }
  ldv_44943: 
#line 1174 
  ;
  
#line 1175 
  return;
}


#line 1179  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_16 *cf_arg_16;
  int tmp;
  
#line 1182 
  tmp = ldv_undef_int();
  
#line 1182 
  switch (tmp) {
    case 0: 
#line 1183 
    ;
    
#line 1184 
    cf_arg_16 = (struct ldv_struct_timer_scenario_16 *)ldv_xmalloc(16UL);
    
#line 1185 
    cf_arg_16->arg0 = arg0;
    
#line 1186 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_timer_scenario_16,(void *)cf_arg_16);
    
#line 1187 
    __VERIFIER_assume(ret == 0);
    
#line 1188 
    goto ldv_44951;
    default: 
#line 1190 
    ;
    
#line 1190 
    __VERIFIER_assume(0);
  }
  ldv_44951: 
#line 1191 
  ;
  
#line 1192 
  return;
}


#line 1196  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 1203 
  ldv_1_ret = ldv_emg_qlge_driver_init();
  
#line 1204 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 1207 
  tmp = ldv_undef_int();
  
#line 1207 
  if (tmp != 0) {
    
#line 1209 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 1213 
    __retres = (void *)0;
    
#line 1213 
    goto return_label;
  }
  else {
    
#line 1217 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 1222 
    ldv_emg_qlge_driver_exit();
    
#line 1226 
    __retres = (void *)0;
    
#line 1226 
    goto return_label;
  }
  
#line 1229 
  __retres = (void *)0;
  return_label: 
#line 1229 
                return __retres;
}


#line 1234  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_5_netdev;
  
#line 1240 
  ldv_5_netdev = arg0;
  
#line 1245 
  ldv_emg_wrapper_qlge_close_2(ldv_5_netdev);
  
#line 1249 
  ldv_dispatch_deregister_5_1(ldv_5_netdev);
  
#line 1253 
  goto return_label;
  return_label: 
#line 1255 
                return;
}


#line 1260  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_7_line;
  
#line 1266 
  ldv_7_line = (int)arg0;
  
#line 1270 
  ldv_dispatch_irq_deregister_7_1(ldv_7_line);
  
#line 1274 
  goto return_label;
  return_label: 
#line 1276 
                return;
}


#line 1281  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_12_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_16 *cf_arg_16;
  int tmp;
  
#line 1284 
  tmp = ldv_undef_int();
  
#line 1284 
  switch (tmp) {
    case 0: 
#line 1285 
    ;
    
#line 1286 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 1287 
    __VERIFIER_assume(ret == 0);
    
#line 1288 
    goto ldv_44972;
    default: 
#line 1290 
    ;
    
#line 1290 
    __VERIFIER_assume(0);
  }
  ldv_44972: 
#line 1291 
  ;
  
#line 1292 
  return;
}


#line 1296  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  _Bool __retres;
  struct work_struct *ldv_6_ldv_param_0_2;
  struct delayed_work *ldv_6_delayed_work;
  int tmp_0;
  
#line 1304 
  tmp_0 = ldv_undef_int();
  
#line 1304 
  if (tmp_0 != 0) {
    
#line 1306 
    ldv_6_delayed_work = arg1;
    
#line 1310 
    ldv_6_ldv_param_0_2 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    
#line 1314 
    if (ldv_6_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      
#line 1316 
      (*(ldv_6_delayed_work->work.func))(ldv_6_ldv_param_0_2); else ;
    
#line 1321 
    ldv_free((void *)ldv_6_ldv_param_0_2);
    
#line 1325 
    __retres = (_Bool)1;
    
#line 1325 
    goto return_label;
  }
  else {
    
#line 1332 
    __retres = (_Bool)0;
    
#line 1332 
    goto return_label;
  }
  return_label: 
#line 1304 
                return __retres;
}


#line 1342  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_3_timer_list;
  int tmp_0;
  
#line 1349 
  tmp_0 = ldv_undef_int();
  
#line 1349 
  if (tmp_0 != 0) {
    
#line 1351 
    ldv_3_timer_list = arg0;
    
#line 1355 
    ldv_dispatch_instance_register_3_3(ldv_3_timer_list);
    
#line 1359 
    __retres = 0;
    
#line 1359 
    goto return_label;
  }
  else {
    int tmp;
    
#line 1366 
    tmp = ldv_undef_int_negative();
    
#line 1366 
    __retres = tmp;
    
#line 1366 
    goto return_label;
  }
  return_label: 
#line 1349 
                return __retres;
}


#line 1376  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 1382 
  ldv_2_netdev = arg0;
  
#line 1383 
  ldv_free((void *)ldv_2_netdev);
  
#line 1387 
  goto return_label;
  return_label: 
#line 1389 
                return;
}


#line 1394  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlge/qlge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_10_netdev;
  int tmp_3;
  
#line 1398 
  int ldv_10_ret = ldv_undef_int();
  
#line 1401 
  ldv_10_ret = ldv_undef_int();
  
#line 1404 
  tmp_3 = ldv_undef_int();
  
#line 1404 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 1406 
    ldv_10_netdev = arg0;
    
#line 1411 
    ldv_10_ret = ldv_emg_wrapper_qlge_open_2(ldv_10_netdev);
    
#line 1414 
    tmp_1 = ldv_undef_int();
    
#line 1414 
    if (tmp_1 != 0) {
      
#line 1416 
      __VERIFIER_assume(ldv_10_ret == 0);
      
#line 1420 
      ldv_dispatch_register_10_4(ldv_10_netdev);
      
#line 1424 
      __retres = 0;
      
#line 1424 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 1431 
      __VERIFIER_assume(ldv_10_ret != 0);
      
#line 1432 
      ldv_failed_register_netdev();
      
#line 1433 
      tmp_0 = ldv_undef_int_negative();
      
#line 1433 
      __retres = tmp_0;
      
#line 1433 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 1441 
    ldv_failed_register_netdev();
    
#line 1442 
    tmp_2 = ldv_undef_int_negative();
    
#line 1442 
    __retres = tmp_2;
    
#line 1442 
    goto return_label;
  }
  return_label: 
#line 1404 
                return __retres;
}


