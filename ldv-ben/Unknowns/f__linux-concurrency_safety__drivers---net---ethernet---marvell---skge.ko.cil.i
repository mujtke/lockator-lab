/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct bio_vec;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_37 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_37 __anonCompField_iov_iter_19 ;
   unsigned long nr_segs ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 18 
struct pid;

#line 19 
struct cred;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_46 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_46 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_47 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_47 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_48 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_48 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct vm_area_struct;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_49 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_49 nodemask_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 193 
struct rw_semaphore;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 243 
enum hrtimer_restart;

#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_51 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_50 {
   struct __anonstruct_51 __anonCompField___anonunion_50_20 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_50 __anonCompField_ctl_table_header_21 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_116 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_116 mm_context_t;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/elf.h"
struct inode;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_149 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_150 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_148 {
   struct __anonstruct_149 __anonCompField___anonunion_148_34 ;
   struct __anonstruct_150 __anonCompField___anonunion_148_35 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_148 __anonCompField_uprobe_task_36 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_151 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_153 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_157 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_156 {
   atomic_t _mapcount ;
   struct __anonstruct_157 __anonCompField___anonunion_156_39 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_155 {
   union __anonunion_156 __anonCompField___anonstruct_155_40 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_154 {
   unsigned long counters ;
   struct __anonstruct_155 __anonCompField___anonunion_154_41 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_152 {
   union __anonunion_153 __anonCompField___anonstruct_152_38 ;
   union __anonunion_154 __anonCompField___anonstruct_152_42 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_159 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_160 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_158 {
   struct list_head lru ;
   struct __anonstruct_159 __anonCompField___anonunion_158_44 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_160 __anonCompField___anonunion_158_45 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_161 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_151 __anonCompField_page_37 ;
   struct __anonstruct_152 __anonCompField_page_43 ;
   union __anonunion_158 __anonCompField_page_46 ;
   union __anonunion_161 __anonCompField_page_47 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_162 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_162 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
union __anonunion_167 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_167 __anonCompField_idr_layer_48 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_172 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_172 __anonCompField_kernfs_node_49 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
struct sock;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_173 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_173 __anonCompField_kernel_param_50 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist.h"
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203 
struct of_device_id;

#line 203 
struct acpi_device_id;

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct user_struct;

#line 66 
struct writeback_control;

#line 67 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_185 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_185 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_186 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_186 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_187 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_187 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_188 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_188 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_189 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_189 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_190 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_190 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_191 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_191 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_192 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_192 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_193 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_194 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_193 ifr_ifrn ;
   union __anonunion_ifr_ifru_194 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_199 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_198 {
   struct __anonstruct_199 __anonCompField___anonunion_198_51 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_198 __anonCompField_lockref_52 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_201 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_200 {
   struct __anonstruct_201 __anonCompField___anonunion_200_53 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_200 __anonCompField_qstr_54 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_202 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_202 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_206 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_205 {
   struct __anonstruct_206 __anonCompField___anonunion_205_55 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_205 __anonCompField_radix_tree_node_56 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 428 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 435 
struct pid_namespace;

#line 435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct block_device;

#line 31 
struct io_context;

#line 32 
struct cgroup_subsys_state;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct backing_dev_info;

#line 61 
struct export_operations;

#line 63 
struct pipe_inode_info;

#line 65 
struct kstatfs;

#line 66 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_211 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_211 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_212 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_212 __anonCompField_kqid_58 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_215 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_216 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_217 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_215 __anonCompField_inode_59 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_216 __anonCompField_inode_60 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_217 __anonCompField_inode_61 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_218 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_218 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_220 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_219 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_220 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_219 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1061 
struct files_struct;

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_221 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_221 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_223 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_224 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_225 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_226 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_228 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_227 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_228 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_229 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_230 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_222 {
   int _pad[28U] ;
   struct __anonstruct__kill_223 _kill ;
   struct __anonstruct__timer_224 _timer ;
   struct __anonstruct__rt_225 _rt ;
   struct __anonstruct__sigchld_226 _sigchld ;
   struct __anonstruct__sigfault_227 _sigfault ;
   struct __anonstruct__sigpoll_229 _sigpoll ;
   struct __anonstruct__sigsys_230 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_222 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_233 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_234 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_236 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_235 {
   struct keyring_index_key index_key ;
   struct __anonstruct_236 __anonCompField___anonunion_235_64 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_237 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_239 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_238 {
   union __anonunion_payload_239 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_233 __anonCompField_key_62 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_234 __anonCompField_key_63 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_235 __anonCompField_key_65 ;
   union __anonunion_type_data_237 type_data ;
   union __anonunion_238 __anonCompField_key_66 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 327 
struct cgroup;

#line 328 
struct cgroup_root;

#line 329 
struct cgroup_subsys;

#line 330 
struct cgroup_taskset;

#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 134 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct reclaim_state;

#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1172 
struct uts_namespace;

#line 1173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_268 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_268 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_25572 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_273 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_274 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_25572 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_273 __anonCompField_nf_bridge_info_73 ;
   union __anonunion_274 __anonCompField_nf_bridge_info_74 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 215 
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_275 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_275 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_277 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_276 {
   u64 v64 ;
   struct __anonstruct_277 __anonCompField___anonunion_276_75 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_276 __anonCompField_skb_mstamp_76 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_280 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_279 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_280 __anonCompField___anonstruct_279_77 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_278 {
   struct __anonstruct_279 __anonCompField___anonunion_278_78 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_282 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_281 {
   __wsum csum ;
   struct __anonstruct_282 __anonCompField___anonunion_281_80 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_283 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_284 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_285 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_278 __anonCompField_sk_buff_79 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_281 __anonCompField_sk_buff_81 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_283 __anonCompField_sk_buff_82 ;
   __u32 secmark ;
   union __anonunion_284 __anonCompField_sk_buff_83 ;
   union __anonunion_285 __anonCompField_sk_buff_84 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118 
struct proc_dir_entry;

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct ipv6_devconf;

#line 39 
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_302 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_302 possible_net_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct dmi_strmatch {
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) slot : 7 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) exact_match : 1 ;
   char substr[79U] ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct dmi_system_id {
   int (*callback)(struct dmi_system_id const *) ;
   char const *ident ;
   struct dmi_strmatch matches[4U] ;
   void *driver_data ;
};

#line 652 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_28494 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_28494 phy_interface_t;

#line 126 
enum ldv_28547 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_28547 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 1628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 331 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_30257 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_30258 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_315 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_316 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_317 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_315 adj_list ;
   struct __anonstruct_all_adj_list_316 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_30257 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_30258 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_317 __anonCompField_net_device_94 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 2086  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
};

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_326 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_326 __anonCompField_pci_dev_95 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmi.h"
struct skge_rx_desc {
   u32 control ;
   u32 next_offset ;
   u32 dma_lo ;
   u32 dma_hi ;
   u32 status ;
   u32 timestamp ;
   u16 csum2 ;
   u16 csum1 ;
   u16 csum2_start ;
   u16 csum1_start ;
};

#line 2380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
struct skge_tx_desc {
   u32 control ;
   u32 next_offset ;
   u32 dma_lo ;
   u32 dma_hi ;
   u32 status ;
   u32 csum_offs ;
   u16 csum_write ;
   u16 csum_start ;
   u32 rsvd ;
};

#line 2392  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
struct skge_element {
   struct skge_element *next ;
   void *desc ;
   struct sk_buff *skb ;
   dma_addr_t mapaddr ;
   __u32 maplen ;
};

#line 2400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
struct skge_ring {
   struct skge_element *to_clean ;
   struct skge_element *to_use ;
   struct skge_element *start ;
   unsigned long count ;
};

#line 2407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
struct skge_hw {
   void *regs ;
   struct pci_dev *pdev ;
   spinlock_t hw_lock ;
   u32 intr_mask ;
   struct net_device *dev[2U] ;
   u8 chip_id ;
   u8 chip_rev ;
   u8 copper ;
   u8 ports ;
   u8 phy_type ;
   u32 ram_size ;
   u32 ram_offset ;
   u16 phy_addr ;
   spinlock_t phy_lock ;
   struct tasklet_struct phy_task ;
   char irq_name[0U] ;
};

#line 2430 
enum pause_control {
    FLOW_MODE_NONE = 1,
    FLOW_MODE_LOC_SEND = 2,
    FLOW_MODE_SYMMETRIC = 3,
    FLOW_MODE_SYM_OR_REM = 4
};

#line 2437 
enum pause_status {
    FLOW_STAT_INDETERMINATED = 0,
    FLOW_STAT_NONE = 1,
    FLOW_STAT_REM_SEND = 2,
    FLOW_STAT_LOC_SEND = 3,
    FLOW_STAT_SYMMETRIC = 4
};

#line 2445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
struct skge_port {
   struct skge_hw *hw ;
   struct net_device *netdev ;
   struct napi_struct napi ;
   int port ;
   u32 msg_enable ;
   struct skge_ring tx_ring ;
   struct skge_ring rx_ring ;
   unsigned int rx_buf_size ;
   struct timer_list link_timer ;
   enum pause_control flow_control ;
   enum pause_status flow_status ;
   u8 blink_on ;
   u8 wol ;
   u8 autoneg ;
   u8 duplex ;
   u16 speed ;
   u32 advertising ;
   void *mem ;
   dma_addr_t dma ;
   unsigned long mem_size ;
   struct dentry *debugfs ;
};

#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
struct skge_stat {
   char name[32U] ;
   u16 xmac_offset ;
   u16 gma_offset ;
};

#line 678 
enum led_mode {
    LED_MODE_OFF = 0,
    LED_MODE_ON = 1,
    LED_MODE_TST = 2
};

#line 1285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
struct __anonstruct_A1hack_335 {
   u16 reg ;
   u16 val ;
};

#line 1290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
struct __anonstruct_C0hack_336 {
   u16 reg ;
   u16 val ;
};

#line 3497  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
struct __anonstruct_skge_chips_341 {
   u8 id ;
   char const *name ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 678  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pagemap.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_character_driver_scenario_20 {
   struct file_operations *arg0 ;
   int signal_pending ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_free_irq_8 {
   int arg0 ;
   int signal_pending ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_16 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_21 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_17 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_18 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
void __builtin_prefetch(void const * , ...);

void __builtin_unreachable(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/fvtp/.tmp_skge.c"
void ldv_inline_asm(void);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device const *, char const * , ...);


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 405 
int snprintf(char *, size_t, char const * , ...);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 64 
size_t strlen(char const *);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static bool IS_ERR(void const *ptr);


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
void __local_bh_disable_ip(unsigned long, unsigned int);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  __here_0: 
#line 18 
  ;
  
#line 18 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  
#line 20 
  return;
}


#line 22 
void __local_bh_enable_ip(unsigned long, unsigned int);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  __here_0: 
#line 31 
  ;
  
#line 31 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  
#line 33 
  return;
}


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 30 
void _raw_spin_lock_bh(raw_spinlock_t *);


#line 31 
void _raw_spin_lock_irq(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 42 
void _raw_spin_unlock_bh(raw_spinlock_t *);


#line 43 
void _raw_spin_unlock_irq(raw_spinlock_t *);


#line 45 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 346 
static void ldv_spin_lock_60(spinlock_t *lock);


#line 350 
static void ldv_spin_lock_65(spinlock_t *lock);


#line 358 
static void ldv_spin_lock_96(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_100(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 391 
static void ldv_spin_lock_bh_72(spinlock_t *lock);


#line 395 
static void ldv_spin_lock_bh_79(spinlock_t *lock);


#line 399 
static void ldv_spin_lock_bh_81(spinlock_t *lock);


#line 403 
static void ldv_spin_lock_bh_83(spinlock_t *lock);


#line 407 
static void ldv_spin_lock_bh_86(spinlock_t *lock);


#line 411 
static void ldv_spin_lock_bh_103(spinlock_t *lock);


#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  
#line 346 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 347 
  return;
}


#line 366 
static void ldv_spin_lock_irq_88(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_91(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_irq_98(spinlock_t *lock);


#line 378 
static void ldv_spin_lock_irq_120(spinlock_t *lock);


#line 379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 381 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 382 
  return;
}


#line 411 
static void ldv_spin_unlock_63(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_66(spinlock_t *lock);


#line 423 
static void ldv_spin_unlock_97(spinlock_t *lock);


#line 427 
static void ldv_spin_unlock_102(spinlock_t *lock);


#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  
#line 430 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 431 
  return;
}


#line 456 
static void ldv_spin_unlock_bh_73(spinlock_t *lock);


#line 460 
static void ldv_spin_unlock_bh_80(spinlock_t *lock);


#line 464 
static void ldv_spin_unlock_bh_82(spinlock_t *lock);


#line 468 
static void ldv_spin_unlock_bh_84(spinlock_t *lock);


#line 472 
static void ldv_spin_unlock_bh_87(spinlock_t *lock);


#line 476 
static void ldv_spin_unlock_bh_104(spinlock_t *lock);


#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  
#line 479 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 480 
  return;
}


#line 493 
static void ldv_spin_unlock_irq_89(spinlock_t *lock);


#line 497 
static void ldv_spin_unlock_irq_92(spinlock_t *lock);


#line 501 
static void ldv_spin_unlock_irq_99(spinlock_t *lock);


#line 505 
static void ldv_spin_unlock_irq_122(spinlock_t *lock);


#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 508 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 509 
  return;
}


#line 538 
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags);


#line 542 
static void ldv_spin_unlock_irqrestore_95(spinlock_t *lock, unsigned long flags);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 70 
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_94(spinlock_t *ldv_func_arg1);


#line 82 
void ldv_spin_model_lock(char *);


#line 83 
void ldv_spin_model_unlock(char *);


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 173 
static int ldv_mod_timer_74(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_76(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 181 
static int ldv_mod_timer_78(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_90(struct timer_list *ldv_func_arg1);


#line 252 
unsigned long round_jiffies(unsigned long);


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void const volatile *addr)
{
  unsigned char ret;
  
#line 57 
  ldv_inline_asm();
  
#line 56 
  return ret;
}


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned short readw(void const volatile *addr)
{
  unsigned short ret;
  
#line 58 
  ldv_inline_asm();
  
#line 57 
  return ret;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val, void volatile *addr)
{
  
#line 66 
  ldv_inline_asm();
  
#line 67 
  return;
}


#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val, void volatile *addr)
{
  
#line 67 
  ldv_inline_asm();
  
#line 68 
  return;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void volatile *addr)
{
  
#line 68 
  ldv_inline_asm();
  
#line 69 
  return;
}


#line 181 
void *ioremap_nocache(resource_size_t, unsigned long);


#line 195 
void iounmap(void volatile *);


#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void memcpy_fromio(void *dst, void const volatile *src, size_t count)
{
  
#line 217 
  memcpy(dst,(void const *)src,count);
  
#line 218 
  return;
}


#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void memcpy_toio(void volatile *dst, void const *src, size_t count)
{
  
#line 223 
  memcpy((void *)dst,src,count);
  
#line 224 
  return;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __const_udelay(unsigned long);


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
ssize_t seq_read(struct file *, char *, size_t, loff_t *);


#line 115 
loff_t seq_lseek(struct file *, loff_t, int);


#line 122 
int seq_printf(struct seq_file *, char const * , ...);


#line 131 
int single_open(struct file *, int (*)(struct seq_file *, void *), void *);


#line 133 
int single_release(struct inode *, struct file *);


#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  bool __retres;
  
#line 83 
  __retres = (_Bool)((int)dev->power.can_wakeup != 0);
  
#line 83 
  return __retres;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
__inline static bool device_may_wakeup(struct device *dev)
{
  bool __retres;
  
#line 88 
  __retres = (_Bool)(((unsigned int)*((unsigned char *)(& dev->power) + 4UL) != 0U && dev->power.wakeup != (struct wakeup_source *)0) != 0);
  
#line 88 
  return __retres;
}


#line 104 
int device_set_wakeup_enable(struct device *, bool);


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 1083 
void dev_err(struct device const *, char const * , ...);


#line 1085 
void dev_warn(struct device const *, char const * , ...);


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  
#line 74 
  if ((long)(count > 268435455U) != 0L) {
    
#line 76 
    ldv_inline_asm();
    
#line 74 
    ;
  }
  else ;
  
#line 76 
  dql->last_obj_cnt = count;
  
#line 77 
  ldv_inline_asm();
  
#line 85 
  dql->num_queued += count;
  
#line 86 
  return;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql const *dql)
{
  int __retres;
  unsigned int const volatile *tmp;
  unsigned int const volatile *tmp_0;
  {
    
#line 91 
    unsigned int const __var = 0U;
    
#line 91 
    tmp = (unsigned int const volatile *)(& dql->adj_limit);
  }
  {
    
#line 91 
    unsigned int const __var_0 = 0U;
    
#line 91 
    tmp_0 = (unsigned int const volatile *)(& dql->num_queued);
  }
  
#line 91 
  ;
  
#line 91 
  __retres = (int)(*tmp - *tmp_0);
  
#line 91 
  return __retres;
}


#line 95 
void dql_completed(struct dql *, unsigned int);


#line 98 
void dql_reset(struct dql *);


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
int net_ratelimit(void);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 542 
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 59 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);


#line 63 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 106 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 108 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 108 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 110 
    ldv_inline_asm();
    
#line 108 
    ;
  }
  else ;
  
#line 109 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 110 
    (*(ops->sync_single_for_cpu))(dev,addr,size,dir); else ;
  
#line 111 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  
#line 112 
  return;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 118 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 120 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 120 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 122 
    ldv_inline_asm();
    
#line 120 
    ;
  }
  else ;
  
#line 121 
  if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 122 
    (*(ops->sync_single_for_device))(dev,addr,size,dir); else ;
  
#line 123 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  
#line 124 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 60 
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 131 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 775 
void consume_skb(struct sk_buff *);


#line 862 
int skb_pad(struct sk_buff *, int);


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1752 
  __retres = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1752 
  return __retres;
}


#line 1789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  
#line 1791 
  skb->data += len;
  
#line 1792 
  skb->tail += (unsigned int)len;
  
#line 1793 
  return;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1962  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_checksum_start_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned int tmp;
  
#line 1964 
  tmp = skb_headroom(skb);
  
#line 1964 
  ;
  
#line 1964 
  __retres = (int)((unsigned int)skb->__anonCompField_sk_buff_81.__anonCompField___anonunion_281_80.csum_start - tmp);
  
#line 1964 
  return __retres;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  
#line 2179 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  
#line 2183 
  return skb;
}


#line 2186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2189 
  tmp = __netdev_alloc_skb_ip_align(dev,length,32U);
  
#line 2189 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2483  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_padto(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  int tmp;
  
#line 2485 
  unsigned int size = skb->len;
  
#line 2486 
  if ((long)(size >= len) != 0L) {
    
#line 2487 
    __retres = 0;
    
#line 2487 
    goto return_label;
  }
  else ;
  
#line 2488 
  tmp = skb_pad(skb,(int)(len - size));
  
#line 2488 
  __retres = tmp;
  return_label: 
#line 2488 
                return __retres;
}


#line 2789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff const *skb, void *to, unsigned int const len)
{
  
#line 2793 
  memcpy(to,(void const *)skb->data,(unsigned long)len);
  
#line 2794 
  return;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_85(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_113(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static void ldv_free_irq_93(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 161 
static void ldv_free_irq_121(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 165 
static void ldv_free_irq_123(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 192 
void disable_irq(unsigned int);


#line 194 
void enable_irq(unsigned int);


#line 540 
static void ldv_tasklet_schedule_101(struct tasklet_struct *t);


#line 583 
void tasklet_kill(struct tasklet_struct *);


#line 589 
static void ldv_tasklet_init_110(struct tasklet_struct *ldv_func_arg1, void (*ldv_func_arg2)(unsigned long ), unsigned long ldv_func_arg3);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  struct mii_ioctl_data *__retres;
  
#line 47 
  __retres = (struct mii_ioctl_data *)(& rq->ifr_ifru);
  
#line 47 
  return __retres;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 449 
void __napi_complete(struct napi_struct *);


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 2084 
int register_netdevice_notifier(struct notifier_block *);


#line 2085 
int unregister_netdevice_notifier(struct notifier_block *);


#line 2103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info const *info)
{
  struct net_device *__retres;
  
#line 2105 
  __retres = info->dev;
  
#line 2105 
  return __retres;
}


#line 2183 
int dev_close(struct net_device *);


#line 2205 
static void ldv_free_netdev_115(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_117(struct net_device *ldv_func_arg1);


#line 2213 
static void ldv_free_netdev_124(struct net_device *ldv_func_arg1);


#line 2217 
static void ldv_free_netdev_125(struct net_device *ldv_func_arg1);


#line 2505 
void netif_schedule_queue(struct netdev_queue *);


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  struct netdev_queue *tmp;
  
#line 2552 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2552 
  netif_tx_wake_queue(tmp);
  
#line 2553 
  return;
}


#line 2565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  
#line 2567 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2568 
  return;
}


#line 2577  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  struct netdev_queue *tmp;
  
#line 2579 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2579 
  netif_tx_stop_queue(tmp);
  
#line 2580 
  return;
}


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device const *dev)
{
  bool tmp_0;
  struct netdev_queue *tmp;
  
#line 2597 
  tmp = netdev_get_tx_queue(dev,0U);
  
#line 2597 
  tmp_0 = netif_tx_queue_stopped((struct netdev_queue const *)tmp);
  
#line 2597 
  return tmp_0;
}


#line 2645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2649 
  dql_queued(& dev_queue->dql,bytes);
  
#line 2651 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2651 
  if ((long)(tmp >= 0) != 0L) 
#line 2652 
                              goto return_label; else ;
  
#line 2654 
  set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2655 
  ldv_inline_asm();
  
#line 2664 
  tmp_0 = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2664 
  if ((long)(tmp_0 >= 0) != 0L) 
#line 2665 
                                set_bit(1L,(unsigned long volatile *)(& dev_queue->state)); else ;
  return_label: 
#line 2666 
                return;
}


#line 2678  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
  struct netdev_queue *tmp;
  
#line 2680 
  ;
  
#line 2680 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2680 
  netdev_tx_sent_queue(tmp,bytes);
  
#line 2681 
  return;
}


#line 2683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2687 
  if ((long)(bytes == 0U) != 0L) 
#line 2688 
                                 goto return_label; else ;
  
#line 2690 
  dql_completed(& dev_queue->dql,bytes);
  
#line 2691 
  ldv_inline_asm();
  
#line 2699 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2699 
  if (tmp < 0) 
#line 2700 
               goto return_label; else ;
  
#line 2702 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2702 
  if (tmp_0 != 0) 
#line 2703 
                  netif_schedule_queue(dev_queue); else ;
  return_label: 
#line 2704 
                return;
}


#line 2717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_completed_queue(struct net_device *dev, unsigned int pkts, unsigned int bytes)
{
  struct netdev_queue *tmp;
  
#line 2720 
  ;
  
#line 2720 
  ;
  
#line 2720 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2720 
  netdev_tx_completed_queue(tmp,pkts,bytes);
  
#line 2721 
  return;
}


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  
#line 2726 
  set_bit(1L,(unsigned long volatile *)(& q->state));
  
#line 2727 
  dql_reset(& q->dql);
  
#line 2728 
  return;
}


#line 2738  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_reset_queue(struct net_device *dev_queue)
{
  struct netdev_queue *tmp;
  
#line 2740 
  tmp = netdev_get_tx_queue((struct net_device const *)dev_queue,0U);
  
#line 2740 
  netdev_tx_reset_queue(tmp);
  
#line 2741 
  return;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2936  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  
#line 2938 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  
#line 2939 
  return;
}


#line 2948 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 2949 
void napi_gro_flush(struct napi_struct *, bool);


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 3159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  u32 __retres;
  
#line 3162 
  if ((unsigned int)debug_value > 31U) {
    
#line 3163 
    __retres = (unsigned int)default_msg_enable_bits;
    
#line 3163 
    goto return_label;
  }
  else ;
  
#line 3164 
  if (debug_value == 0) {
    
#line 3165 
    __retres = 0U;
    
#line 3165 
    goto return_label;
  }
  else ;
  
#line 3167 
  __retres = (unsigned int)((1 << debug_value) + -1);
  return_label: 
#line 3167 
                return __retres;
}


#line 3170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  
#line 3172 
  ldv_spin_lock_60(& txq->_xmit_lock);
  
#line 3173 
  txq->xmit_lock_owner = cpu;
  
#line 3174 
  return;
}


#line 3190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  
#line 3192 
  txq->xmit_lock_owner = -1;
  
#line 3193 
  ldv_spin_unlock_63(& txq->_xmit_lock);
  
#line 3194 
  return;
}


#line 3214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_lock(struct net_device *dev)
{
  unsigned int i;
  int cpu;
  int tmp_3;
  
#line 3219 
  ldv_spin_lock_65(& dev->tx_global_lock);
  {
    int pscr_ret__;
    {
      
#line 3220 
      void const *__vpp_verify = (void const *)0;
      
#line 3220 
      void const *tmp = __vpp_verify;
    }
    
#line 3220 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3220 
      ;
      {
        int pfo_ret__;
        
#line 3220 
        switch (4UL) {
          case (unsigned long)1: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43836;
          case (unsigned long)2: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43836;
          case (unsigned long)4: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43836;
          case (unsigned long)8: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43836;
          default: 
#line 3220 
          ;
          
#line 3220 
          __bad_percpu_size();
        }
        ldv_43836: 
#line 3220 
        ;
        
#line 3220 
        tmp_0 = pfo_ret__;
      }
      
#line 3220 
      pscr_ret__ = tmp_0;
      
#line 3220 
      goto ldv_43842;
      case (unsigned long)2: 
#line 3220 
      ;
      {
        int pfo_ret___0;
        
#line 3220 
        switch (4UL) {
          case (unsigned long)1: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43846;
          case (unsigned long)2: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43846;
          case (unsigned long)4: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43846;
          case (unsigned long)8: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43846;
          default: 
#line 3220 
          ;
          
#line 3220 
          __bad_percpu_size();
        }
        ldv_43846: 
#line 3220 
        ;
        
#line 3220 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3220 
      pscr_ret__ = tmp_0_0;
      
#line 3220 
      goto ldv_43842;
      case (unsigned long)4: 
#line 3220 
      ;
      {
        int pfo_ret___1;
        
#line 3220 
        switch (4UL) {
          case (unsigned long)1: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43855;
          case (unsigned long)2: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43855;
          case (unsigned long)4: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43855;
          case (unsigned long)8: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43855;
          default: 
#line 3220 
          ;
          
#line 3220 
          __bad_percpu_size();
        }
        ldv_43855: 
#line 3220 
        ;
        
#line 3220 
        tmp_1 = pfo_ret___1;
      }
      
#line 3220 
      pscr_ret__ = tmp_1;
      
#line 3220 
      goto ldv_43842;
      case (unsigned long)8: 
#line 3220 
      ;
      {
        int pfo_ret___2;
        
#line 3220 
        switch (4UL) {
          case (unsigned long)1: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43864;
          case (unsigned long)2: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43864;
          case (unsigned long)4: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43864;
          case (unsigned long)8: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_43864;
          default: 
#line 3220 
          ;
          
#line 3220 
          __bad_percpu_size();
        }
        ldv_43864: 
#line 3220 
        ;
        
#line 3220 
        tmp_2 = pfo_ret___2;
      }
      
#line 3220 
      pscr_ret__ = tmp_2;
      
#line 3220 
      goto ldv_43842;
      default: 
#line 3220 
      ;
      
#line 3220 
      __bad_size_call_parameter();
      
#line 3220 
      goto ldv_43842;
    }
    ldv_43842: 
#line 3220 
    ;
    
#line 3220 
    tmp_3 = pscr_ret__;
  }
  
#line 3220 
  cpu = tmp_3;
  
#line 3221 
  i = 0U;
  
#line 3221 
  goto ldv_43874;
  ldv_43873: 
#line 3222 
  ;
  {
    
#line 3222 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3230 
    __netif_tx_lock(txq,cpu);
    
#line 3231 
    set_bit(2L,(unsigned long volatile *)(& txq->state));
    
#line 3232 
    __netif_tx_unlock(txq);
  }
  
#line 3221 
  i += 1U;
  ldv_43874: 
#line 3222 
  ;
  
#line 3221 
  if (dev->num_tx_queues > i) 
#line 3223 
                              goto ldv_43873; else 
#line 3226 
                                                   goto ldv_43875;
  ldv_43875: 
#line 3227 
  ;
  
#line 3228 
  return;
}


#line 3236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_lock_bh(struct net_device *dev)
{
  
#line 3238 
  local_bh_disable();
  
#line 3239 
  netif_tx_lock(dev);
  
#line 3240 
  return;
}


#line 3242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_unlock(struct net_device *dev)
{
  unsigned int i;
  
#line 3246 
  i = 0U;
  
#line 3246 
  goto ldv_43885;
  ldv_43884: 
#line 3247 
  ;
  {
    
#line 3247 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3253 
    set_bit(2L,(unsigned long volatile *)(& txq->state));
    
#line 3254 
    netif_schedule_queue(txq);
  }
  
#line 3246 
  i += 1U;
  ldv_43885: 
#line 3247 
  ;
  
#line 3246 
  if (dev->num_tx_queues > i) 
#line 3248 
                              goto ldv_43884; else 
#line 3251 
                                                   goto ldv_43886;
  ldv_43886: 
#line 3252 
  ;
  
#line 3256 
  ldv_spin_unlock_66(& dev->tx_global_lock);
  
#line 3257 
  return;
}


#line 3259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_unlock_bh(struct net_device *dev)
{
  
#line 3261 
  netif_tx_unlock(dev);
  
#line 3262 
  local_bh_enable();
  
#line 3263 
  return;
}


#line 3282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  unsigned int i;
  int cpu;
  int tmp_3;
  
#line 3287 
  local_bh_disable();
  {
    int pscr_ret__;
    {
      
#line 3288 
      void const *__vpp_verify = (void const *)0;
      
#line 3288 
      void const *tmp = __vpp_verify;
    }
    
#line 3288 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3288 
      ;
      {
        int pfo_ret__;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43900;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43900;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43900;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43900;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_43900: 
#line 3288 
        ;
        
#line 3288 
        tmp_0 = pfo_ret__;
      }
      
#line 3288 
      pscr_ret__ = tmp_0;
      
#line 3288 
      goto ldv_43906;
      case (unsigned long)2: 
#line 3288 
      ;
      {
        int pfo_ret___0;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43910;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43910;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43910;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43910;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_43910: 
#line 3288 
        ;
        
#line 3288 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3288 
      pscr_ret__ = tmp_0_0;
      
#line 3288 
      goto ldv_43906;
      case (unsigned long)4: 
#line 3288 
      ;
      {
        int pfo_ret___1;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43919;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43919;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43919;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43919;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_43919: 
#line 3288 
        ;
        
#line 3288 
        tmp_1 = pfo_ret___1;
      }
      
#line 3288 
      pscr_ret__ = tmp_1;
      
#line 3288 
      goto ldv_43906;
      case (unsigned long)8: 
#line 3288 
      ;
      {
        int pfo_ret___2;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43928;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43928;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43928;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_43928;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_43928: 
#line 3288 
        ;
        
#line 3288 
        tmp_2 = pfo_ret___2;
      }
      
#line 3288 
      pscr_ret__ = tmp_2;
      
#line 3288 
      goto ldv_43906;
      default: 
#line 3288 
      ;
      
#line 3288 
      __bad_size_call_parameter();
      
#line 3288 
      goto ldv_43906;
    }
    ldv_43906: 
#line 3288 
    ;
    
#line 3288 
    tmp_3 = pscr_ret__;
  }
  
#line 3288 
  cpu = tmp_3;
  
#line 3289 
  i = 0U;
  
#line 3289 
  goto ldv_43938;
  ldv_43937: 
#line 3290 
  ;
  {
    
#line 3290 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3292 
    __netif_tx_lock(txq,cpu);
    
#line 3293 
    netif_tx_stop_queue(txq);
    
#line 3294 
    __netif_tx_unlock(txq);
  }
  
#line 3289 
  i += 1U;
  ldv_43938: 
#line 3290 
  ;
  
#line 3289 
  if (dev->num_tx_queues > i) 
#line 3291 
                              goto ldv_43937; else 
#line 3294 
                                                   goto ldv_43939;
  ldv_43939: 
#line 3295 
  ;
  
#line 3296 
  local_bh_enable();
  
#line 3297 
  return;
}


#line 3355 
static int ldv_register_netdev_111(struct net_device *ldv_func_arg1);


#line 3359 
static int ldv_register_netdev_112(struct net_device *ldv_func_arg1);


#line 3364 
static void ldv_unregister_netdev_114(struct net_device *ldv_func_arg1);


#line 3368 
static void ldv_unregister_netdev_116(struct net_device *ldv_func_arg1);


#line 3372 
static void ldv_unregister_netdev_118(struct net_device *ldv_func_arg1);


#line 3376 
static void ldv_unregister_netdev_119(struct net_device *ldv_func_arg1);


#line 3819 
void netdev_printk(char const *, struct net_device const *, char const * , ...);


#line 3828 
void netdev_err(struct net_device const *, char const * , ...);


#line 3830 
void netdev_warn(struct net_device const *, char const * , ...);


#line 3832 
void netdev_notice(struct net_device const *, char const * , ...);


#line 3834 
void netdev_info(struct net_device const *, char const * , ...);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 47 
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_109(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_find_capability(struct pci_dev *, int);


#line 861 
int pci_bus_read_config_word(struct pci_bus *, unsigned int, int, u16 *);


#line 863 
int pci_bus_read_config_dword(struct pci_bus *, unsigned int, int, u32 *);


#line 867 
int pci_bus_write_config_word(struct pci_bus *, unsigned int, int, u16);


#line 869 
int pci_bus_write_config_dword(struct pci_bus *, unsigned int, int, u32);


#line 887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev const *dev, int where, u16 *val)
{
  int tmp;
  
#line 889 
  tmp = pci_bus_read_config_word(dev->bus,dev->devfn,where,val);
  
#line 889 
  return tmp;
}


#line 891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_dword(struct pci_dev const *dev, int where, u32 *val)
{
  int tmp;
  
#line 894 
  tmp = pci_bus_read_config_dword(dev->bus,dev->devfn,where,val);
  
#line 894 
  return tmp;
}


#line 900  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_write_config_word(struct pci_dev const *dev, int where, u16 val)
{
  int tmp;
  
#line 902 
  tmp = pci_bus_write_config_word(dev->bus,dev->devfn,where,(unsigned short)((int)val));
  
#line 902 
  return tmp;
}


#line 904  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_write_config_dword(struct pci_dev const *dev, int where, u32 val)
{
  int tmp;
  
#line 907 
  tmp = pci_bus_write_config_dword(dev->bus,dev->devfn,where,val);
  
#line 907 
  return tmp;
}


#line 951 
int pci_enable_device(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 1040 
int pci_set_power_state(struct pci_dev *, pci_power_t);


#line 1046 
int pci_wake_from_d3(struct pci_dev *, bool);


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_126(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_127(struct pci_driver *ldv_func_arg1);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  void *tmp_0;
  struct device *tmp;
  
#line 19 
  ;
  
#line 19 
  ;
  
#line 19 
  if (hwdev != (struct pci_dev *)0) 
#line 19 
                                    tmp = & hwdev->dev; else 
#line 19 
                                                             tmp = (struct device *)0;
  
#line 19 
  tmp_0 = dma_alloc_attrs(tmp,size,dma_handle,32U,(struct dma_attrs *)0);
  
#line 19 
  return tmp_0;
}


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  struct device *tmp;
  
#line 34 
  ;
  
#line 34 
  ;
  
#line 34 
  ;
  
#line 34 
  if (hwdev != (struct pci_dev *)0) 
#line 34 
                                    tmp = & hwdev->dev; else 
#line 34 
                                                             tmp = (struct device *)0;
  
#line 34 
  dma_free_attrs(tmp,size,vaddr,dma_handle,(struct dma_attrs *)0);
  
#line 35 
  return;
}


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  dma_addr_t tmp_0;
  struct device *tmp;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  if (hwdev != (struct pci_dev *)0) 
#line 40 
                                    tmp = & hwdev->dev; else 
#line 40 
                                                             tmp = (struct device *)0;
  
#line 40 
  tmp_0 = dma_map_single_attrs(tmp,ptr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 40 
  return tmp_0;
}


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  struct device *tmp;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  if (hwdev != (struct pci_dev *)0) 
#line 47 
                                    tmp = & hwdev->dev; else 
#line 47 
                                                             tmp = (struct device *)0;
  
#line 47 
  dma_unmap_single_attrs(tmp,dma_addr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 48 
  return;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  struct device *tmp;
  
#line 61 
  ;
  
#line 61 
  ;
  
#line 61 
  ;
  
#line 61 
  if (hwdev != (struct pci_dev *)0) 
#line 61 
                                    tmp = & hwdev->dev; else 
#line 61 
                                                             tmp = (struct device *)0;
  
#line 61 
  dma_unmap_page(tmp,dma_address,size,(enum dma_data_direction)direction);
  
#line 62 
  return;
}


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  struct device *tmp;
  
#line 82 
  ;
  
#line 82 
  ;
  
#line 82 
  ;
  
#line 82 
  if (hwdev != (struct pci_dev *)0) 
#line 82 
                                    tmp = & hwdev->dev; else 
#line 82 
                                                             tmp = (struct device *)0;
  
#line 82 
  dma_sync_single_for_cpu(tmp,dma_handle,size,(enum dma_data_direction)direction);
  
#line 83 
  return;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  struct device *tmp;
  
#line 89 
  ;
  
#line 89 
  ;
  
#line 89 
  ;
  
#line 89 
  if (hwdev != (struct pci_dev *)0) 
#line 89 
                                    tmp = & hwdev->dev; else 
#line 89 
                                                             tmp = (struct device *)0;
  
#line 89 
  dma_sync_single_for_device(tmp,dma_handle,size,(enum dma_data_direction)direction);
  
#line 90 
  return;
}


#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  int tmp;
  
#line 109 
  tmp = dma_mapping_error(& pdev->dev,dma_addr);
  
#line 109 
  return tmp;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 115 
  tmp = dma_set_mask(& dev->dev,mask);
  
#line 115 
  return tmp;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 120 
  tmp = dma_set_coherent_mask(& dev->dev,mask);
  
#line 120 
  return tmp;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ipip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 35 
  tmp = (struct iphdr *)skb_transport_header(skb);
  
#line 35 
  return tmp;
}


#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitrev.h"
extern u8 const byte_rev_table[256U];


#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitrev.h"
__inline static u8 __bitrev8(u8 byte)
{
  u8 __retres;
  
#line 17 
  __retres = byte_rev_table[(int)byte];
  
#line 17 
  return __retres;
}


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitrev.h"
__inline static u16 __bitrev16(u16 x)
{
  u16 __retres;
  u8 tmp;
  u8 tmp_0;
  
#line 22 
  tmp = __bitrev8((unsigned char)((int)((unsigned char)x)));
  
#line 22 
  tmp_0 = __bitrev8((unsigned char)((int)((unsigned char)((int)x >> 8))));
  
#line 22 
  __retres = (unsigned short)(((int)tmp << 8) | (int)tmp_0);
  
#line 22 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitrev.h"
__inline static u32 __bitrev32(u32 x)
{
  u32 __retres;
  u16 tmp;
  u16 tmp_0;
  
#line 27 
  tmp = __bitrev16((unsigned short)((int)((unsigned short)x)));
  
#line 27 
  tmp_0 = __bitrev16((unsigned short)((int)((unsigned short)(x >> 16))));
  
#line 27 
  __retres = (unsigned int)(((int)tmp << 16) | (int)tmp_0);
  
#line 27 
  return __retres;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/crc32.h"
u32 crc32_le(u32, unsigned char const *, size_t);


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
static struct dentry *ldv_debugfs_create_file_107(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 62 
struct dentry *debugfs_create_dir(char const *, struct dentry *);


#line 75 
static void ldv_debugfs_remove_105(struct dentry *ldv_func_arg1);


#line 79 
static void ldv_debugfs_remove_106(struct dentry *ldv_func_arg1);


#line 83 
static void ldv_debugfs_remove_108(struct dentry *ldv_func_arg1);


#line 87 
struct dentry *debugfs_rename(struct dentry *, struct dentry *, struct dentry *, char const *);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmi.h"
int dmi_check_system(struct dmi_system_id const *);


#line 2481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static u32 skge_read32(struct skge_hw const *hw, int reg)
{
  u32 tmp;
  
#line 2483 
  tmp = readl((void const volatile *)(hw->regs + reg));
  
#line 2483 
  return tmp;
}


#line 2486  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static u16 skge_read16(struct skge_hw const *hw, int reg)
{
  u16 tmp;
  
#line 2488 
  tmp = readw((void const volatile *)(hw->regs + reg));
  
#line 2488 
  return tmp;
}


#line 2491  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static u8 skge_read8(struct skge_hw const *hw, int reg)
{
  u8 tmp;
  
#line 2493 
  tmp = readb((void const volatile *)(hw->regs + reg));
  
#line 2493 
  return tmp;
}


#line 2496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static void skge_write32(struct skge_hw const *hw, int reg, u32 val)
{
  
#line 2498 
  writel(val,(void volatile *)(hw->regs + reg));
  
#line 2499 
  return;
}


#line 2501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static void skge_write16(struct skge_hw const *hw, int reg, u16 val)
{
  
#line 2503 
  writew((unsigned short)((int)val),(void volatile *)(hw->regs + reg));
  
#line 2504 
  return;
}


#line 2506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static void skge_write8(struct skge_hw const *hw, int reg, u8 val)
{
  
#line 2508 
  writeb((unsigned char)((int)val),(void volatile *)(hw->regs + reg));
  
#line 2509 
  return;
}


#line 2516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static u32 xm_read32(struct skge_hw const *hw, int port, int reg)
{
  u32 v;
  u16 tmp;
  u16 tmp_0;
  
#line 2519 
  tmp = skge_read16(hw,(port + 2) * 4096 | (reg << 1));
  
#line 2519 
  v = (unsigned int)tmp;
  
#line 2520 
  tmp_0 = skge_read16(hw,(port + 2) * 4096 | ((reg + 2) << 1));
  
#line 2520 
  v = ((unsigned int)tmp_0 << 16) | v;
  
#line 2521 
  return v;
}


#line 2524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static u16 xm_read16(struct skge_hw const *hw, int port, int reg)
{
  u16 tmp;
  
#line 2526 
  tmp = skge_read16(hw,(port + 2) * 4096 | (reg << 1));
  
#line 2526 
  return tmp;
}


#line 2529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static void xm_write32(struct skge_hw const *hw, int port, int r, u32 v)
{
  
#line 2531 
  skge_write16(hw,(port + 2) * 4096 | (r << 1),(unsigned short)((int)((unsigned short)v)));
  
#line 2532 
  skge_write16(hw,(port + 2) * 4096 | ((r + 2) << 1),(unsigned short)((int)((unsigned short)(v >> 16))));
  
#line 2533 
  return;
}


#line 2535  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static void xm_write16(struct skge_hw const *hw, int port, int r, u16 v)
{
  
#line 2537 
  skge_write16(hw,(port + 2) * 4096 | (r << 1),(unsigned short)((int)v));
  
#line 2538 
  return;
}


#line 2540  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static void xm_outhash(struct skge_hw const *hw, int port, int reg, u8 const *hash)
{
  
#line 2543 
  xm_write16(hw,port,reg,(unsigned short)((int)((unsigned short)((int)*hash | ((int)*(hash + 1U) << 8)))));
  
#line 2544 
  xm_write16(hw,port,reg + 2,(unsigned short)((int)((unsigned short)((int)*(hash + 2U) | ((int)*(hash + 3U) << 8)))));
  
#line 2545 
  xm_write16(hw,port,reg + 4,(unsigned short)((int)((unsigned short)((int)*(hash + 4U) | ((int)*(hash + 5U) << 8)))));
  
#line 2546 
  xm_write16(hw,port,reg + 6,(unsigned short)((int)((unsigned short)((int)*(hash + 6U) | ((int)*(hash + 7U) << 8)))));
  
#line 2547 
  return;
}


#line 2549  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static void xm_outaddr(struct skge_hw const *hw, int port, int reg, u8 const *addr)
{
  
#line 2552 
  xm_write16(hw,port,reg,(unsigned short)((int)((unsigned short)((int)*addr | ((int)*(addr + 1U) << 8)))));
  
#line 2553 
  xm_write16(hw,port,reg + 2,(unsigned short)((int)((unsigned short)((int)*(addr + 2U) | ((int)*(addr + 3U) << 8)))));
  
#line 2554 
  xm_write16(hw,port,reg + 4,(unsigned short)((int)((unsigned short)((int)*(addr + 4U) | ((int)*(addr + 5U) << 8)))));
  
#line 2555 
  return;
}


#line 2560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static u16 gma_read16(struct skge_hw const *hw, int port, int reg)
{
  u16 tmp;
  
#line 2562 
  tmp = skge_read16(hw,(port * 4096 + 10240) + reg);
  
#line 2562 
  return tmp;
}


#line 2565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static u32 gma_read32(struct skge_hw const *hw, int port, int reg)
{
  u32 __retres;
  u16 tmp;
  u16 tmp_0;
  
#line 2567 
  tmp = skge_read16(hw,(port * 4096 + 10240) + reg);
  
#line 2568 
  tmp_0 = skge_read16(hw,(port * 4096 + 10240) + (reg + 4));
  
#line 2568 
  __retres = (unsigned int)tmp | ((unsigned int)tmp_0 << 16);
  
#line 2568 
  return __retres;
}


#line 2571  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static void gma_write16(struct skge_hw const *hw, int port, int r, u16 v)
{
  
#line 2573 
  skge_write16(hw,(port * 4096 + 10240) + r,(unsigned short)((int)v));
  
#line 2574 
  return;
}


#line 2576  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.h"
__inline static void gma_set_addr(struct skge_hw *hw, int port, int reg, u8 const *addr)
{
  
#line 2579 
  gma_write16((struct skge_hw const *)hw,port,reg,(unsigned short)((int)((unsigned short)((int)*addr | ((int)*(addr + 1U) << 8)))));
  
#line 2580 
  gma_write16((struct skge_hw const *)hw,port,reg + 4,(unsigned short)((int)((unsigned short)((int)*(addr + 2U) | ((int)*(addr + 3U) << 8)))));
  
#line 2581 
  gma_write16((struct skge_hw const *)hw,port,reg + 8,(unsigned short)((int)((unsigned short)((int)*(addr + 4U) | ((int)*(addr + 5U) << 8)))));
  
#line 2582 
  return;
}


#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u32 const default_msg = 55U;

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int debug = -1;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct pci_device_id const skge_id_table[13U] = {{.vendor = 4279U, .device = 5888U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4279U, .device = 33003U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4424U, .device = 17152U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4424U, .device = 17184U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4486U, .device = 19201U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4486U, .device = 19456U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4486U, .device = 17154U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4523U, .device = 17184U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4523U, .device = 20485U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4977U, .device = 17230U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 5943U, .device = 4196U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 5943U, .device = 4146U, .subvendor = 4294967295U, .subdevice = 21U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
struct pci_device_id const __mod_pci__skge_id_table_device_table[13U];

#line 104 
static int skge_up(struct net_device *dev);


#line 105 
static int skge_down(struct net_device *dev);


#line 106 
static void skge_phy_reset(struct skge_port *skge);


#line 107 
static void skge_tx_clean(struct net_device *dev);


#line 108 
static int xm_phy_write(struct skge_hw *hw, int port, u16 reg, u16 val);


#line 109 
static int gm_phy_write(struct skge_hw *hw, int port, u16 reg, u16 val);


#line 110 
static void genesis_get_stats(struct skge_port *skge, u64 *data);


#line 111 
static void yukon_get_stats(struct skge_port *skge, u64 *data);


#line 112 
static void yukon_init(struct skge_hw *hw, int port);


#line 113 
static void genesis_mac_init(struct skge_hw *hw, int port);


#line 114 
static void genesis_link_up(struct skge_port *skge);


#line 115 
static void skge_set_multicast(struct net_device *dev);


#line 116 
static irqreturn_t skge_intr(int irq, void *dev_id);


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int const txqaddr[2U] = {640, 896};

#line 120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int const rxqaddr[2U] = {0, 128};

#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u32 const rxirqmask[2U] = {65536U, 8192U};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u32 const txirqmask[2U] = {128U, 2U};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u32 const napimask[2U] = {65664U, 8194U};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u32 const portmask[2U] = {673251456U, 336076802U};

#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static bool is_genesis(struct skge_hw const *hw)
{
  bool __retres;
  
#line 129 
  __retres = (_Bool)((unsigned int)hw->chip_id == 10U);
  
#line 129 
  return __retres;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_get_regs_len(struct net_device *dev)
{
  int __retres;
  
#line 137 
  __retres = 16384;
  
#line 137 
  return __retres;
}


#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *p)
{
  
#line 148 
  struct skge_port const *skge = netdev_priv((struct net_device const *)dev);
  
#line 149 
  void const *io = (void const *)(skge->hw)->regs;
  
#line 151 
  regs->version = 1U;
  
#line 152 
  memset(p,0,(unsigned long)regs->len);
  
#line 153 
  memcpy_fromio(p,(void const volatile *)io,384UL);
  
#line 155 
  memcpy_fromio(p + 400U,(void const volatile *)(io + 400U),(unsigned long)(regs->len + 4294966896U));
  
#line 157 
  return;
}


#line 160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u32 wol_supported(struct skge_hw const *hw)
{
  u32 __retres;
  bool tmp;
  
#line 162 
  tmp = is_genesis(hw);
  
#line 162 
  if ((int)tmp != 0) {
    
#line 163 
    __retres = 0U;
    
#line 163 
    goto return_label;
  }
  else ;
  
#line 165 
  if ((unsigned int)hw->chip_id == 176U && (unsigned int)hw->chip_rev == 0U) {
    
#line 166 
    __retres = 0U;
    
#line 166 
    goto return_label;
  }
  else ;
  
#line 168 
  __retres = 33U;
  return_label: 
#line 168 
                return __retres;
}


#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_wol_init(struct skge_port *skge)
{
  u16 ctrl;
  
#line 173 
  struct skge_hw *hw = skge->hw;
  
#line 174 
  int port = skge->port;
  
#line 177 
  skge_write16((struct skge_hw const *)hw,4,(unsigned short)2);
  
#line 178 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3856,(unsigned short)2);
  
#line 181 
  skge_write8((struct skge_hw const *)hw,7,(unsigned char)169);
  
#line 185 
  if ((unsigned int)hw->chip_id == 177U && (unsigned int)hw->chip_rev > 6U) {
    
#line 187 
    u32 reg = skge_read32((struct skge_hw const *)hw,348);
    
#line 188 
    reg |= 33554432U;
    
#line 189 
    reg &= 4294966783U;
    
#line 190 
    skge_write32((struct skge_hw const *)hw,348,reg);
  }
  else ;
  
#line 193 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 3844,32522241U);
  
#line 198 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 3844,32522242U);
  
#line 203 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 3840,2U);
  
#line 206 
  gm_phy_write(hw,port,(unsigned short)4,(unsigned short)481);
  
#line 210 
  gm_phy_write(hw,port,(unsigned short)9,(unsigned short)0);
  
#line 211 
  gm_phy_write(hw,port,(unsigned short)0,(unsigned short)45824);
  
#line 217 
  gma_write16((struct skge_hw const *)hw,port,4,(unsigned short)14386);
  
#line 222 
  memcpy_toio((void volatile *)(hw->regs + (port * 128 + 3876)),(void const *)(skge->netdev)->dev_addr,6UL);
  
#line 226 
  skge_write16((struct skge_hw const *)hw,port * 128 + 3872,(unsigned short)4096);
  
#line 227 
  ctrl = (unsigned short)0U;
  
#line 228 
  if (((int)skge->wol & 1) != 0) 
#line 229 
                                 ctrl = (unsigned short)((unsigned int)ctrl | 2080U); else 
                                                                    
#line 231 
                                                                    ctrl = (unsigned short)((unsigned int)ctrl | 1040U);
  
#line 233 
  if (((int)skge->wol & 32) != 0) 
#line 234 
                                  ctrl = (unsigned short)((unsigned int)ctrl | 520U); else 
                                                                    
#line 236 
                                                                    ctrl = (unsigned short)((unsigned int)ctrl | 260U);
  
#line 238 
  ctrl = (unsigned short)((unsigned int)ctrl | 65U);
  
#line 239 
  skge_write16((struct skge_hw const *)hw,port * 128 + 3872,(unsigned short)((int)ctrl));
  
#line 242 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3144,(unsigned char)1);
  
#line 243 
  return;
}


#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  
#line 247 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 249 
  wol->supported = wol_supported((struct skge_hw const *)skge->hw);
  
#line 250 
  wol->wolopts = (unsigned int)skge->wol;
  
#line 251 
  return;
}


#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  int __retres;
  u32 tmp_0;
  
#line 255 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 256 
  struct skge_hw *hw = skge->hw;
  
#line 258 
  tmp_0 = wol_supported((struct skge_hw const *)hw);
  
#line 258 
  ;
  
#line 258 
  if ((wol->wolopts & ~ tmp_0) != 0U) {
    
#line 260 
    __retres = -95;
    
#line 260 
    goto return_label;
  }
  else {
    int tmp_2;
    bool tmp_1;
    
#line 259 
    tmp_1 = device_can_wakeup(& (hw->pdev)->dev);
    
#line 259 
    if (tmp_1) 
#line 259 
               tmp_2 = 0; else 
#line 259 
                               tmp_2 = 1;
    
#line 259 
    if (tmp_2) {
      
#line 260 
      __retres = -95;
      
#line 260 
      goto return_label;
    }
    else ;
  }
  
#line 262 
  skge->wol = (unsigned char)wol->wolopts;
  
#line 264 
  device_set_wakeup_enable(& (hw->pdev)->dev,(_Bool)((unsigned int)skge->wol != 0U));
  
#line 266 
  __retres = 0;
  return_label: 
#line 266 
                return __retres;
}


#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u32 skge_supported_modes(struct skge_hw const *hw)
{
  u32 supported;
  
#line 276 
  if ((unsigned int)hw->copper != 0U) {
    bool tmp;
    
#line 277 
    supported = 255U;
    
#line 286 
    tmp = is_genesis(hw);
    
#line 286 
    if ((int)tmp != 0) 
#line 287 
                       supported &= 4294967280U;
    else 
      
#line 292 
      if ((unsigned int)hw->chip_id == 176U) 
#line 293 
                                             supported &= 4294967279U; else ;
  }
  else 
#line 295 
       supported = 1136U;
  
#line 300 
  return supported;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_get_settings(struct net_device *dev, struct ethtool_cmd *ecmd)
{
  int __retres;
  
#line 306 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 307 
  struct skge_hw *hw = skge->hw;
  
#line 309 
  ecmd->transceiver = (unsigned char)0U;
  
#line 310 
  ecmd->supported = skge_supported_modes((struct skge_hw const *)hw);
  
#line 312 
  if ((unsigned int)hw->copper != 0U) {
    
#line 313 
    ecmd->port = (unsigned char)0U;
    
#line 314 
    ecmd->phy_address = (unsigned char)hw->phy_addr;
  }
  else 
#line 316 
       ecmd->port = (unsigned char)3U;
  
#line 318 
  ecmd->advertising = skge->advertising;
  
#line 319 
  ecmd->autoneg = skge->autoneg;
  
#line 320 
  ethtool_cmd_speed_set(ecmd,(unsigned int)skge->speed);
  
#line 321 
  ecmd->duplex = skge->duplex;
  
#line 322 
  __retres = 0;
  
#line 322 
  return __retres;
}


#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_set_settings(struct net_device *dev, struct ethtool_cmd *ecmd)
{
  int __retres;
  bool tmp_2;
  
#line 327 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 328 
  struct skge_hw const *hw = (struct skge_hw const *)skge->hw;
  
#line 329 
  u32 supported = skge_supported_modes(hw);
  
#line 330 
  int err = 0;
  
#line 332 
  if ((unsigned int)ecmd->autoneg == 1U) {
    
#line 333 
    ecmd->advertising = supported;
    
#line 334 
    skge->duplex = (unsigned char)255U;
    
#line 335 
    skge->speed = (unsigned short)65535U;
  }
  else {
    u32 setting;
    
#line 338 
    u32 speed = ethtool_cmd_speed((struct ethtool_cmd const *)ecmd);
    
#line 340 
    switch (speed) {
      case (u32)1000: 
#line 341 
      ;
      
#line 342 
      if ((unsigned int)ecmd->duplex == 1U) 
#line 343 
                                            setting = 32U;
      else 
        
#line 344 
        if ((unsigned int)ecmd->duplex == 0U) 
#line 345 
                                              setting = 16U;
        else {
          
#line 347 
          __retres = -22;
          
#line 347 
          goto return_label;
        }
      
#line 348 
      goto ldv_49108;
      case (u32)100: 
#line 349 
      ;
      
#line 350 
      if ((unsigned int)ecmd->duplex == 1U) 
#line 351 
                                            setting = 8U;
      else 
        
#line 352 
        if ((unsigned int)ecmd->duplex == 0U) 
#line 353 
                                              setting = 4U;
        else {
          
#line 355 
          __retres = -22;
          
#line 355 
          goto return_label;
        }
      
#line 356 
      goto ldv_49108;
      case (u32)10: 
#line 358 
      ;
      
#line 359 
      if ((unsigned int)ecmd->duplex == 1U) 
#line 360 
                                            setting = 2U;
      else 
        
#line 361 
        if ((unsigned int)ecmd->duplex == 0U) 
#line 362 
                                              setting = 1U;
        else {
          
#line 364 
          __retres = -22;
          
#line 364 
          goto return_label;
        }
      
#line 365 
      goto ldv_49108;
      default: 
#line 366 
      ;
      
#line 367 
      __retres = -22;
      
#line 367 
      goto return_label;
    }
    ldv_49108: 
#line 370 
    ;
    
#line 370 
    if ((setting & supported) == 0U) {
      
#line 371 
      __retres = -22;
      
#line 371 
      goto return_label;
    }
    else ;
    
#line 373 
    skge->speed = (unsigned short)speed;
    
#line 374 
    skge->duplex = ecmd->duplex;
  }
  
#line 377 
  skge->autoneg = ecmd->autoneg;
  
#line 378 
  skge->advertising = ecmd->advertising;
  
#line 380 
  tmp_2 = netif_running((struct net_device const *)dev);
  
#line 380 
  if ((int)tmp_2 != 0) {
    
#line 381 
    skge_down(dev);
    
#line 382 
    err = skge_up(dev);
    
#line 383 
    if (err != 0) {
      
#line 384 
      dev_close(dev);
      
#line 385 
      __retres = err;
      
#line 385 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 389 
  __retres = 0;
  return_label: 
#line 389 
                return __retres;
}


#line 392  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  char const *tmp_0;
  
#line 395 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 397 
  strlcpy((char *)(& info->driver),"skge",32UL);
  
#line 398 
  strlcpy((char *)(& info->version),"1.14",32UL);
  
#line 399 
  tmp_0 = pci_name((struct pci_dev const *)(skge->hw)->pdev);
  
#line 399 
  ;
  
#line 399 
  strlcpy((char *)(& info->bus_info),tmp_0,32UL);
  
#line 400 
  return;
}


#line 407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct skge_stat const skge_stats[21U] = {{.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .xmac_offset = (unsigned short)644U, .gma_offset = (unsigned short)488U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .xmac_offset = (unsigned short)772U, .gma_offset = (unsigned short)312U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .xmac_offset = (unsigned short)652U, .gma_offset = (unsigned short)456U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .xmac_offset = (unsigned short)780U, .gma_offset = (unsigned short)264U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .xmac_offset = (unsigned short)656U, .gma_offset = (unsigned short)472U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .xmac_offset = (unsigned short)784U, .gma_offset = (unsigned short)280U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .xmac_offset = (unsigned short)660U, .gma_offset = (unsigned short)448U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .xmac_offset = (unsigned short)788U, .gma_offset = (unsigned short)256U}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'\000'}, .xmac_offset = (unsigned short)672U, .gma_offset = (unsigned short)464U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'\000'}, .xmac_offset = (unsigned short)792U, .gma_offset = (unsigned short)272U}, {.name = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s', (char)'\000'}, .xmac_offset = (unsigned short)680U, .gma_offset = (unsigned short)592U}, {.name = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s', (char)'\000'}, .xmac_offset = (unsigned short)684U, .gma_offset = (unsigned short)584U}, {.name = {(char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)'\000'}, .xmac_offset = (unsigned short)688U, .gma_offset = (unsigned short)576U}, {.name = {(char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'\000'}, .xmac_offset = (unsigned short)692U, .gma_offset = (unsigned short)568U}, {.name = {(char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'\000'}, .xmac_offset = (unsigned short)704U, .gma_offset = (unsigned short)600U}, {.name = {(char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'\000'}, .xmac_offset = (unsigned short)820U, .gma_offset = (unsigned short)432U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'o', (char)'l', (char)'o', (char)'n', (char)'g', (char)'\000'}, .xmac_offset = (unsigned short)848U, .gma_offset = (unsigned short)408U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'\000'}, .xmac_offset = (unsigned short)824U, .gma_offset = (unsigned short)416U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'u', (char)'n', (char)'t', (char)'\000'}, .xmac_offset = (unsigned short)844U, .gma_offset = (unsigned short)344U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'\000'}, .xmac_offset = (unsigned short)848U, .gma_offset = (unsigned short)408U}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}, .xmac_offset = (unsigned short)852U, .gma_offset = (unsigned short)288U}};

#line 434  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_get_sset_count(struct net_device *dev, int sset)
{
  int __retres;
  
#line 436 
  switch (sset) {
    case 1: 
#line 437 
    ;
    
#line 438 
    __retres = 21;
    
#line 438 
    goto return_label;
    default: 
#line 439 
    ;
    
#line 440 
    __retres = -95;
    
#line 440 
    goto return_label;
  }
  return_label: 
#line 436 
                return __retres;
}


#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  bool tmp_0;
  
#line 447 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 449 
  tmp_0 = is_genesis((struct skge_hw const *)skge->hw);
  
#line 449 
  if ((int)tmp_0 != 0) 
#line 450 
                       genesis_get_stats(skge,data); else 
#line 452 
                                                          yukon_get_stats(skge,data);
  
#line 453 
  return;
}


#line 459  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct net_device_stats *skge_get_stats(struct net_device *dev)
{
  struct net_device_stats *__retres;
  u64 data[21U];
  bool tmp_0;
  
#line 461 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 464 
  tmp_0 = is_genesis((struct skge_hw const *)skge->hw);
  
#line 464 
  if ((int)tmp_0 != 0) 
#line 465 
                       genesis_get_stats(skge,(u64 *)(& data)); else 
                                                                  
#line 467 
                                                                  yukon_get_stats(skge,(u64 *)(& data));
  
#line 469 
  dev->stats.tx_bytes = (unsigned long)data[0];
  
#line 470 
  dev->stats.rx_bytes = (unsigned long)data[1];
  
#line 471 
  dev->stats.tx_packets = (unsigned long)((data[2] + data[4]) + data[6]);
  
#line 472 
  dev->stats.rx_packets = (unsigned long)((data[3] + data[5]) + data[7]);
  
#line 473 
  dev->stats.multicast = (unsigned long)(data[3] + data[5]);
  
#line 474 
  dev->stats.collisions = (unsigned long)data[10];
  
#line 475 
  dev->stats.tx_aborted_errors = (unsigned long)data[12];
  
#line 477 
  __retres = & dev->stats;
  
#line 477 
  return __retres;
}


#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  int i;
  
#line 484 
  switch (stringset) {
    case (u32)1: 
#line 485 
    ;
    
#line 486 
    i = 0;
    
#line 486 
    goto ldv_49156;
    ldv_49155: 
#line 487 
    ;
    
#line 487 
    memcpy((void *)(data + i * 32),(void const *)(& skge_stats[i].name),32UL);
    
#line 486 
    i += 1;
    ldv_49156: 
#line 487 
    ;
    
#line 486 
    if ((unsigned int)i <= 20U) 
#line 488 
                                goto ldv_49155; else 
#line 491 
                                                     goto ldv_49157;
    ldv_49157: 
#line 492 
    ;
    
#line 489 
    goto ldv_49158;
  }
  ldv_49158: 
#line 491 
  ;
  
#line 492 
  return;
}


#line 493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_get_ring_param(struct net_device *dev, struct ethtool_ringparam *p)
{
  
#line 496 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 498 
  p->rx_max_pending = 4096U;
  
#line 499 
  p->tx_max_pending = 1024U;
  
#line 501 
  p->rx_pending = (unsigned int)skge->rx_ring.count;
  
#line 502 
  p->tx_pending = (unsigned int)skge->tx_ring.count;
  
#line 503 
  return;
}


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_set_ring_param(struct net_device *dev, struct ethtool_ringparam *p)
{
  int __retres;
  bool tmp_0;
  
#line 508 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 509 
  int err = 0;
  
#line 511 
  if ((p->rx_pending + 4294967295U > 4095U || p->tx_pending <= 17U) || p->tx_pending > 1024U) {
    
#line 513 
    __retres = -22;
    
#line 513 
    goto return_label;
  }
  else ;
  
#line 515 
  skge->rx_ring.count = (unsigned long)p->rx_pending;
  
#line 516 
  skge->tx_ring.count = (unsigned long)p->tx_pending;
  
#line 518 
  tmp_0 = netif_running((struct net_device const *)dev);
  
#line 518 
  if ((int)tmp_0 != 0) {
    
#line 519 
    skge_down(dev);
    
#line 520 
    err = skge_up(dev);
    
#line 521 
    if (err != 0) 
#line 522 
                  dev_close(dev); else ;
  }
  else ;
  
#line 525 
  __retres = err;
  return_label: 
#line 525 
                return __retres;
}


#line 528  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u32 skge_get_msglevel(struct net_device *netdev)
{
  u32 __retres;
  
#line 530 
  struct skge_port *skge = netdev_priv((struct net_device const *)netdev);
  
#line 531 
  __retres = skge->msg_enable;
  
#line 531 
  return __retres;
}


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_set_msglevel(struct net_device *netdev, u32 value)
{
  
#line 536 
  struct skge_port *skge = netdev_priv((struct net_device const *)netdev);
  
#line 537 
  skge->msg_enable = value;
  
#line 538 
  return;
}


#line 540  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_nway_reset(struct net_device *dev)
{
  int __retres;
  
#line 542 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 544 
  if ((unsigned int)skge->autoneg != 1U) {
    
#line 545 
    __retres = -22;
    
#line 545 
    goto return_label;
  }
  else {
    int tmp_1;
    bool tmp_0;
    
#line 544 
    tmp_0 = netif_running((struct net_device const *)dev);
    
#line 544 
    if (tmp_0) 
#line 544 
               tmp_1 = 0; else 
#line 544 
                               tmp_1 = 1;
    
#line 544 
    if (tmp_1) {
      
#line 545 
      __retres = -22;
      
#line 545 
      goto return_label;
    }
    else ;
  }
  
#line 547 
  skge_phy_reset(skge);
  
#line 548 
  __retres = 0;
  return_label: 
#line 548 
                return __retres;
}


#line 551  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *ecmd)
{
  
#line 554 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 556 
  ecmd->rx_pause = (unsigned int)((unsigned int)skge->flow_control + 4294967293U <= 1U);
  
#line 558 
  ecmd->tx_pause = (unsigned int)((ecmd->rx_pause != 0U || skge->flow_control == (unsigned int)FLOW_MODE_LOC_SEND) != 0);
  
#line 561 
  ecmd->autoneg = (unsigned int)((ecmd->rx_pause != 0U || ecmd->tx_pause != 0U) != 0);
  
#line 562 
  return;
}


#line 564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *ecmd)
{
  int __retres;
  struct ethtool_pauseparam old;
  bool tmp_1;
  
#line 567 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 569 
  int err = 0;
  
#line 571 
  skge_get_pauseparam(dev,& old);
  
#line 573 
  if (ecmd->autoneg != old.autoneg) {
    int tmp_0;
    
#line 574 
    if (ecmd->autoneg != 0U) 
#line 574 
                             tmp_0 = 1; else 
#line 574 
                                             tmp_0 = 3;
    
#line 574 
    skge->flow_control = (enum pause_control)tmp_0;
  }
  else 
    
#line 576 
    if (ecmd->rx_pause != 0U && ecmd->tx_pause != 0U) 
#line 577 
                                                      skge->flow_control = FLOW_MODE_SYMMETRIC;
    else 
      
#line 578 
      if (ecmd->rx_pause != 0U && ecmd->tx_pause == 0U) 
#line 579 
                                                        skge->flow_control = FLOW_MODE_SYM_OR_REM;
      else 
        
#line 580 
        if (ecmd->rx_pause == 0U && ecmd->tx_pause != 0U) 
#line 581 
                                                          skge->flow_control = FLOW_MODE_LOC_SEND; else 
                                                                    
#line 583 
                                                                    skge->flow_control = FLOW_MODE_NONE;
  
#line 586 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 586 
  if ((int)tmp_1 != 0) {
    
#line 587 
    skge_down(dev);
    
#line 588 
    err = skge_up(dev);
    
#line 589 
    if (err != 0) {
      
#line 590 
      dev_close(dev);
      
#line 591 
      __retres = err;
      
#line 591 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 595 
  __retres = 0;
  return_label: 
#line 595 
                return __retres;
}


#line 599  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static u32 hwkhz(struct skge_hw const *hw)
{
  u32 __retres;
  int tmp_0;
  bool tmp;
  
#line 601 
  tmp = is_genesis(hw);
  
#line 601 
  if ((int)tmp != 0) 
#line 601 
                     tmp_0 = 53125; else 
#line 601 
                                         tmp_0 = 78125;
  
#line 601 
  __retres = (unsigned int)tmp_0;
  
#line 601 
  return __retres;
}


#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static u32 skge_clk2usec(struct skge_hw const *hw, u32 ticks)
{
  u32 __retres;
  u32 tmp;
  
#line 607 
  tmp = hwkhz(hw);
  
#line 607 
  ;
  
#line 607 
  __retres = (ticks * 1000U) / tmp;
  
#line 607 
  return __retres;
}


#line 611  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static u32 skge_usecs2clk(struct skge_hw const *hw, u32 usec)
{
  u32 __retres;
  u32 tmp;
  
#line 613 
  tmp = hwkhz(hw);
  
#line 613 
  ;
  
#line 613 
  __retres = (tmp * usec) / 1000U;
  
#line 613 
  return __retres;
}


#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_get_coalesce(struct net_device *dev, struct ethtool_coalesce *ecmd)
{
  int __retres;
  u32 tmp_3;
  
#line 619 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 620 
  struct skge_hw *hw = skge->hw;
  
#line 621 
  int port = skge->port;
  
#line 623 
  ecmd->rx_coalesce_usecs = 0U;
  
#line 624 
  ecmd->tx_coalesce_usecs = 0U;
  
#line 626 
  tmp_3 = skge_read32((struct skge_hw const *)hw,328);
  
#line 626 
  if ((tmp_3 & 4U) != 0U) {
    u32 tmp_1;
    u32 tmp_0;
    
#line 627 
    tmp_0 = skge_read32((struct skge_hw const *)hw,320);
    
#line 627 
    ;
    
#line 627 
    tmp_1 = skge_clk2usec((struct skge_hw const *)hw,tmp_0);
    
#line 627 
    u32 delay = tmp_1;
    
#line 628 
    u32 msk = skge_read32((struct skge_hw const *)hw,332);
    
#line 630 
    if ((rxirqmask[port] & msk) != 0U) 
#line 631 
                                       ecmd->rx_coalesce_usecs = delay; else ;
    
#line 632 
    if ((txirqmask[port] & msk) != 0U) 
#line 633 
                                       ecmd->tx_coalesce_usecs = delay; else ;
  }
  else ;
  
#line 636 
  __retres = 0;
  
#line 636 
  return __retres;
}


#line 640  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_set_coalesce(struct net_device *dev, struct ethtool_coalesce *ecmd)
{
  int __retres;
  
#line 643 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 644 
  struct skge_hw *hw = skge->hw;
  
#line 645 
  int port = skge->port;
  
#line 646 
  u32 msk = skge_read32((struct skge_hw const *)hw,332);
  
#line 647 
  u32 delay = 25U;
  
#line 649 
  if (ecmd->rx_coalesce_usecs == 0U) 
#line 650 
                                     msk = ~ rxirqmask[port] & msk;
  else 
    
#line 651 
    if (ecmd->rx_coalesce_usecs + 4294967271U > 33308U) {
      
#line 653 
      __retres = -22;
      
#line 653 
      goto return_label;
    }
    else {
      
#line 655 
      msk = rxirqmask[port] | msk;
      
#line 656 
      delay = ecmd->rx_coalesce_usecs;
    }
  
#line 659 
  if (ecmd->tx_coalesce_usecs == 0U) 
#line 660 
                                     msk = ~ txirqmask[port] & msk;
  else 
    
#line 661 
    if (ecmd->tx_coalesce_usecs + 4294967271U > 33308U) {
      
#line 663 
      __retres = -22;
      
#line 663 
      goto return_label;
    }
    else {
      unsigned int tmp_2;
      
#line 665 
      msk = txirqmask[port] | msk;
      {
        u32 tmp_1;
        
#line 666 
        u32 _min1 = delay;
        
#line 666 
        __u32 _min2 = ecmd->rx_coalesce_usecs;
        
#line 666 
        if (_min1 < _min2) 
#line 666 
                           tmp_1 = _min1; else 
#line 666 
                                               tmp_1 = _min2;
        
#line 666 
        tmp_2 = tmp_1;
      }
      
#line 666 
      delay = tmp_2;
    }
  
#line 669 
  skge_write32((struct skge_hw const *)hw,332,msk);
  
#line 670 
  if (msk == 0U) 
#line 671 
                 skge_write32((struct skge_hw const *)hw,328,2U);
  else {
    u32 tmp_3;
    
#line 673 
    tmp_3 = skge_usecs2clk((struct skge_hw const *)hw,delay);
    
#line 673 
    ;
    
#line 673 
    skge_write32((struct skge_hw const *)hw,320,tmp_3);
    
#line 674 
    skge_write32((struct skge_hw const *)hw,328,4U);
  }
  
#line 676 
  __retres = 0;
  return_label: 
#line 676 
                return __retres;
}


#line 680  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_led(struct skge_port *skge, enum led_mode mode)
{
  bool tmp_0;
  
#line 682 
  struct skge_hw *hw = skge->hw;
  
#line 683 
  int port = skge->port;
  
#line 685 
  ldv_spin_lock_bh_72(& hw->phy_lock);
  
#line 686 
  tmp_0 = is_genesis((struct skge_hw const *)hw);
  
#line 686 
  if ((int)tmp_0 != 0) {
    
#line 687 
    switch ((unsigned int)mode) {
      case (unsigned int)0: 
#line 688 
      ;
      
#line 689 
      if ((unsigned int)hw->phy_type == 1U) 
#line 690 
                                            xm_phy_write(hw,port,(unsigned short)16,(unsigned short)8);
      else {
        
#line 692 
        skge_write32((struct skge_hw const *)hw,(port << 7) + 3364,0U);
        
#line 693 
        skge_write8((struct skge_hw const *)hw,(port << 7) + 3368,(unsigned char)2);
      }
      
#line 695 
      skge_write8((struct skge_hw const *)hw,(port << 7) + 3132,(unsigned char)1);
      
#line 696 
      skge_write32((struct skge_hw const *)hw,(port << 7) + 3108,0U);
      
#line 697 
      skge_write8((struct skge_hw const *)hw,(port << 7) + 3112,(unsigned char)2);
      
#line 698 
      goto ldv_49238;
      case (unsigned int)1: 
#line 700 
      ;
      
#line 701 
      skge_write8((struct skge_hw const *)hw,(port << 7) + 3132,(unsigned char)2);
      
#line 702 
      skge_write8((struct skge_hw const *)hw,(port << 7) + 3132,(unsigned char)8);
      
#line 704 
      skge_write8((struct skge_hw const *)hw,(port << 7) + 3112,(unsigned char)4);
      
#line 705 
      skge_write8((struct skge_hw const *)hw,(port << 7) + 3368,(unsigned char)4);
      
#line 707 
      goto ldv_49238;
      case (unsigned int)2: 
#line 709 
      ;
      
#line 710 
      skge_write8((struct skge_hw const *)hw,(port << 7) + 3113,(unsigned char)4);
      
#line 711 
      skge_write32((struct skge_hw const *)hw,(port << 7) + 3108,100U);
      
#line 712 
      skge_write8((struct skge_hw const *)hw,(port << 7) + 3112,(unsigned char)4);
      
#line 714 
      if ((unsigned int)hw->phy_type == 1U) 
#line 715 
                                            xm_phy_write(hw,port,(unsigned short)16,(unsigned short)16);
      else {
        
#line 717 
        skge_write8((struct skge_hw const *)hw,(port << 7) + 3369,(unsigned char)4);
        
#line 718 
        skge_write32((struct skge_hw const *)hw,(port << 7) + 3364,100U);
        
#line 719 
        skge_write8((struct skge_hw const *)hw,(port << 7) + 3368,(unsigned char)4);
      }
    }
    ldv_49238: 
#line 723 
    ;
  }
  else {
    
#line 724 
    switch ((unsigned int)mode) {
      unsigned int tmp;
      case (unsigned int)0: 
#line 725 
      ;
      
#line 726 
      gm_phy_write(hw,port,(unsigned short)24,(unsigned short)0);
      
#line 727 
      gm_phy_write(hw,port,(unsigned short)25,(unsigned short)2728);
      
#line 733 
      goto ldv_49242;
      case (unsigned int)1: 
#line 734 
      ;
      
#line 735 
      gm_phy_write(hw,port,(unsigned short)24,(unsigned short)16645);
      
#line 741 
      if ((unsigned int)skge->speed == 100U) 
#line 741 
                                             tmp = 200U; else 
#line 741 
                                                              tmp = 8U;
      
#line 741 
      ;
      
#line 741 
      ;
      
#line 741 
      gm_phy_write(hw,port,(unsigned short)25,(unsigned short)((int)tmp));
      
#line 745 
      goto ldv_49242;
      case (unsigned int)2: 
#line 746 
      ;
      
#line 747 
      gm_phy_write(hw,port,(unsigned short)24,(unsigned short)0);
      
#line 748 
      gm_phy_write(hw,port,(unsigned short)25,(unsigned short)4092);
    }
    ldv_49242: 
#line 755 
    ;
  }
  
#line 756 
  ldv_spin_unlock_bh_73(& hw->phy_lock);
  
#line 757 
  return;
}


#line 760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
{
  int __retres;
  
#line 763 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 765 
  switch ((unsigned int)state) {
    bool tmp_0;
    case (unsigned int)1: 
#line 766 
    ;
    
#line 767 
    __retres = 2;
    
#line 767 
    goto return_label;
    case (unsigned int)2: 
#line 769 
    ;
    
#line 770 
    skge_led(skge,(enum led_mode)LED_MODE_TST);
    
#line 771 
    goto ldv_49252;
    case (unsigned int)3: 
#line 773 
    ;
    
#line 774 
    skge_led(skge,(enum led_mode)LED_MODE_OFF);
    
#line 775 
    goto ldv_49252;
    case (unsigned int)0: 
#line 777 
    ;
    
#line 779 
    tmp_0 = netif_running((struct net_device const *)dev);
    
#line 779 
    ;
    
#line 779 
    skge_led(skge,(enum led_mode)((int)tmp_0 != 0));
  }
  ldv_49252: 
#line 782 
  ;
  
#line 782 
  __retres = 0;
  return_label: 
#line 782 
                return __retres;
}


#line 785  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_get_eeprom_len(struct net_device *dev)
{
  int __retres;
  u32 reg2;
  
#line 787 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 790 
  pci_read_config_dword((struct pci_dev const *)(skge->hw)->pdev,68,& reg2);
  
#line 791 
  __retres = 1 << ((((long)reg2 >> 14) & 7L) + 8L);
  
#line 791 
  return __retres;
}


#line 794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u32 skge_vpd_read(struct pci_dev *pdev, int cap, u16 offset)
{
  u32 val;
  
#line 798 
  pci_write_config_word((struct pci_dev const *)pdev,cap + 2,(unsigned short)((int)offset));
  ldv_49266: 
#line 799 
  ;
  
#line 801 
  pci_read_config_word((struct pci_dev const *)pdev,cap + 2,& offset);
  
#line 802 
  if ((int)offset >= 0) 
#line 804 
                        goto ldv_49266; else 
#line 807 
                                             goto ldv_49267;
  ldv_49267: 
#line 808 
  ;
  
#line 804 
  pci_read_config_dword((struct pci_dev const *)pdev,cap + 4,& val);
  
#line 805 
  return val;
}


#line 808  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_vpd_write(struct pci_dev *pdev, int cap, u16 offset, u32 val)
{
  
#line 810 
  pci_write_config_dword((struct pci_dev const *)pdev,cap + 4,val);
  
#line 811 
  pci_write_config_word((struct pci_dev const *)pdev,cap + 2,(unsigned short)((int)((unsigned int)offset | 32768U)));
  ldv_49274: 
#line 812 
  ;
  
#line 815 
  pci_read_config_word((struct pci_dev const *)pdev,cap + 2,& offset);
  
#line 816 
  if ((int)offset < 0) 
#line 818 
                       goto ldv_49274; else 
#line 821 
                                            goto ldv_49275;
  ldv_49275: 
#line 822 
  ;
  
#line 823 
  return;
}


#line 819  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  int __retres;
  
#line 822 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 823 
  struct pci_dev *pdev = (skge->hw)->pdev;
  
#line 824 
  int cap = pci_find_capability(pdev,3);
  
#line 825 
  int length = (int)eeprom->len;
  
#line 826 
  u16 offset = (unsigned short)eeprom->offset;
  
#line 828 
  if (cap == 0) {
    
#line 829 
    __retres = -22;
    
#line 829 
    goto return_label;
  }
  else ;
  
#line 831 
  eeprom->magic = 2570300091U;
  
#line 833 
  goto ldv_49292;
  ldv_49291: 
#line 834 
  ;
  {
    int tmp_3;
    
#line 834 
    u32 val = skge_vpd_read(pdev,cap,(unsigned short)((int)offset));
    {
      int tmp_2;
      
#line 835 
      int __min1 = length;
      
#line 835 
      int __min2 = 4;
      
#line 835 
      if (__min1 < __min2) 
#line 835 
                           tmp_2 = __min1; else 
#line 835 
                                                tmp_2 = __min2;
      
#line 835 
      tmp_3 = tmp_2;
    }
    
#line 835 
    int n = tmp_3;
    
#line 837 
    memcpy((void *)data,(void const *)(& val),(unsigned long)n);
    
#line 838 
    length -= n;
    
#line 839 
    data += n;
    
#line 840 
    offset = (unsigned short)((int)((unsigned short)n) + (int)offset);
  }
  ldv_49292: 
#line 842 
  ;
  
#line 833 
  if (length > 0) 
#line 835 
                  goto ldv_49291; else 
#line 838 
                                       goto ldv_49293;
  ldv_49293: 
#line 839 
  ;
  
#line 842 
  __retres = 0;
  return_label: 
#line 842 
                return __retres;
}


#line 845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_set_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  int __retres;
  
#line 848 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 849 
  struct pci_dev *pdev = (skge->hw)->pdev;
  
#line 850 
  int cap = pci_find_capability(pdev,3);
  
#line 851 
  int length = (int)eeprom->len;
  
#line 852 
  u16 offset = (unsigned short)eeprom->offset;
  
#line 854 
  if (cap == 0) {
    
#line 855 
    __retres = -22;
    
#line 855 
    goto return_label;
  }
  else ;
  
#line 857 
  if (eeprom->magic != 2570300091U) {
    
#line 858 
    __retres = -22;
    
#line 858 
    goto return_label;
  }
  else ;
  
#line 860 
  goto ldv_49310;
  ldv_49309: 
#line 861 
  ;
  {
    u32 val;
    int tmp_2;
    {
      int tmp_1;
      
#line 862 
      int __min1 = length;
      
#line 862 
      int __min2 = 4;
      
#line 862 
      if (__min1 < __min2) 
#line 862 
                           tmp_1 = __min1; else 
#line 862 
                                                tmp_1 = __min2;
      
#line 862 
      tmp_2 = tmp_1;
    }
    
#line 862 
    int n = tmp_2;
    
#line 864 
    if ((unsigned int)n <= 3U) 
#line 865 
                               val = skge_vpd_read(pdev,cap,(unsigned short)((int)offset)); else ;
    
#line 866 
    memcpy((void *)(& val),(void const *)data,(unsigned long)n);
    
#line 868 
    skge_vpd_write(pdev,cap,(unsigned short)((int)offset),val);
    
#line 870 
    length -= n;
    
#line 871 
    data += n;
    
#line 872 
    offset = (unsigned short)((int)((unsigned short)n) + (int)offset);
  }
  ldv_49310: 
#line 874 
  ;
  
#line 860 
  if (length > 0) 
#line 862 
                  goto ldv_49309; else 
#line 865 
                                       goto ldv_49311;
  ldv_49311: 
#line 866 
  ;
  
#line 874 
  __retres = 0;
  return_label: 
#line 874 
                return __retres;
}


#line 877  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct ethtool_ops const skge_ethtool_ops = {.get_settings = & skge_get_settings, .set_settings = & skge_set_settings, .get_drvinfo = & skge_get_drvinfo, .get_regs_len = & skge_get_regs_len, .get_regs = & skge_get_regs, .get_wol = & skge_get_wol, .set_wol = & skge_set_wol, .get_msglevel = & skge_get_msglevel, .set_msglevel = & skge_set_msglevel, .nway_reset = & skge_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = & skge_get_eeprom_len, .get_eeprom = & skge_get_eeprom, .set_eeprom = & skge_set_eeprom, .get_coalesce = & skge_get_coalesce, .set_coalesce = & skge_set_coalesce, .get_ringparam = & skge_get_ring_param, .set_ringparam = & skge_set_ring_param, .get_pauseparam = & skge_get_pauseparam, .set_pauseparam = & skge_set_pauseparam, .self_test = (void (*)(struct net_device *, struct ethtool_test *, u64 *))0, .get_strings = & skge_get_strings, .set_phys_id = & skge_set_phys_id, .get_ethtool_stats = & skge_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & skge_get_sset_count, .get_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *))0, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = (void (*)(struct net_device *, struct ethtool_channels *))0, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_ring_alloc(struct skge_ring *ring, void *vaddr, u32 base)
{
  int __retres;
  struct skge_tx_desc *d;
  struct skge_element *e;
  int i;
  struct skge_element *tmp_0;
  
#line 914 
  ring->start = (struct skge_element *)kcalloc(ring->count,40UL,208U);
  
#line 915 
  if (ring->start == (struct skge_element *)0) {
    
#line 916 
    __retres = -12;
    
#line 916 
    goto return_label;
  }
  else ;
  
#line 918 
  i = 0;
  
#line 918 
  e = ring->start;
  
#line 918 
  d = (struct skge_tx_desc *)vaddr;
  
#line 918 
  goto ldv_49322;
  ldv_49321: 
#line 919 
  ;
  
#line 919 
  e->desc = (void *)d;
  
#line 920 
  if ((unsigned long)i == ring->count + 18446744073709551615UL) {
    
#line 921 
    e->next = ring->start;
    
#line 922 
    d->next_offset = base;
  }
  else {
    
#line 924 
    e->next = e + 1U;
    
#line 925 
    d->next_offset = (unsigned int)((unsigned long)(i + 1)) * 32U + base;
  }
  
#line 918 
  i += 1;
  
#line 918 
  e += 1;
  
#line 918 
  d += 1;
  ldv_49322: 
#line 919 
  ;
  
#line 918 
  if ((unsigned long)i < ring->count) 
#line 920 
                                      goto ldv_49321; else 
#line 923 
                                                           goto ldv_49323;
  ldv_49323: 
#line 924 
  ;
  
#line 928 
  tmp_0 = ring->start;
  
#line 928 
  ring->to_clean = tmp_0;
  
#line 928 
  ring->to_use = tmp_0;
  
#line 930 
  __retres = 0;
  return_label: 
#line 930 
                return __retres;
}


#line 934  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_rx_setup(struct skge_port *skge, struct skge_element *e, struct sk_buff *skb, unsigned int bufsize)
{
  int __retres;
  dma_addr_t map;
  int tmp;
  
#line 937 
  struct skge_rx_desc *rd = (struct skge_rx_desc *)e->desc;
  
#line 940 
  map = pci_map_single((skge->hw)->pdev,(void *)skb->data,(unsigned long)bufsize,2);
  
#line 943 
  tmp = pci_dma_mapping_error((skge->hw)->pdev,map);
  
#line 943 
  if (tmp != 0) {
    
#line 944 
    __retres = -1;
    
#line 944 
    goto return_label;
  }
  else ;
  
#line 946 
  rd->dma_lo = (unsigned int)map;
  
#line 947 
  rd->dma_hi = (unsigned int)(map >> 32);
  
#line 948 
  e->skb = skb;
  
#line 949 
  rd->csum1_start = (unsigned short)14U;
  
#line 950 
  rd->csum2_start = (unsigned short)14U;
  
#line 951 
  rd->csum1 = (unsigned short)0U;
  
#line 952 
  rd->csum2 = (unsigned short)0U;
  
#line 953 
  ldv_inline_asm();
  
#line 956 
  rd->control = bufsize | 3361079296U;
  
#line 957 
  e->mapaddr = map;
  
#line 958 
  e->maplen = bufsize;
  
#line 959 
  __retres = 0;
  return_label: 
#line 959 
                return __retres;
}


#line 966  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static void skge_rx_reuse(struct skge_element *e, unsigned int size)
{
  
#line 968 
  struct skge_rx_desc *rd = (struct skge_rx_desc *)e->desc;
  
#line 970 
  rd->csum2 = (unsigned short)0U;
  
#line 971 
  rd->csum2_start = (unsigned short)14U;
  
#line 972 
  ldv_inline_asm();
  
#line 975 
  rd->control = size | 3361079296U;
  
#line 976 
  return;
}


#line 980  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_rx_clean(struct skge_port *skge)
{
  struct skge_element *e;
  
#line 982 
  struct skge_hw *hw = skge->hw;
  
#line 983 
  struct skge_ring *ring = & skge->rx_ring;
  
#line 986 
  e = ring->start;
  ldv_49344: 
#line 987 
  ;
  {
    
#line 988 
    struct skge_rx_desc *rd = (struct skge_rx_desc *)e->desc;
    
#line 989 
    rd->control = 0U;
    
#line 990 
    if (e->skb != (struct sk_buff *)0) {
      
#line 991 
      pci_unmap_single(hw->pdev,e->mapaddr,(unsigned long)e->maplen,2);
      
#line 995 
      consume_skb(e->skb);
      
#line 996 
      e->skb = (struct sk_buff *)0;
    }
    else ;
  }
  
#line 998 
  e = e->next;
  
#line 998 
  ;
  
#line 998 
  if (e != ring->start) 
#line 1000 
                        goto ldv_49344; else 
#line 1003 
                                             goto ldv_49345;
  ldv_49345: 
#line 1004 
  ;
  
#line 1005 
  return;
}


#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_rx_fill(struct net_device *dev)
{
  int __retres;
  struct skge_element *e;
  
#line 1007 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 1008 
  struct skge_ring *ring = & skge->rx_ring;
  
#line 1011 
  e = ring->start;
  ldv_49353: 
#line 1012 
  ;
  {
    struct sk_buff *skb;
    int tmp_0;
    
#line 1015 
    skb = __netdev_alloc_skb(dev,skge->rx_buf_size,208U);
    
#line 1017 
    if (skb == (struct sk_buff *)0) {
      
#line 1018 
      __retres = -12;
      
#line 1018 
      goto return_label;
    }
    else ;
    
#line 1020 
    skb_reserve(skb,0);
    
#line 1021 
    tmp_0 = skge_rx_setup(skge,e,skb,skge->rx_buf_size);
    
#line 1021 
    if (tmp_0 < 0) {
      
#line 1022 
      consume_skb(skb);
      
#line 1023 
      __retres = -5;
      
#line 1023 
      goto return_label;
    }
    else ;
  }
  
#line 1025 
  e = e->next;
  
#line 1025 
  ;
  
#line 1025 
  if (e != ring->start) 
#line 1027 
                        goto ldv_49353; else 
#line 1030 
                                             goto ldv_49354;
  ldv_49354: 
#line 1031 
  ;
  
#line 1027 
  ring->to_clean = ring->start;
  
#line 1028 
  __retres = 0;
  return_label: 
#line 1028 
                return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static char const *skge_pause(enum pause_status status)
{
  char const *__retres;
  
#line 1033 
  switch ((unsigned int)status) {
    case (unsigned int)1: 
#line 1034 
    ;
    
#line 1035 
    __retres = "none";
    
#line 1035 
    goto return_label;
    case (unsigned int)2: 
#line 1036 
    ;
    
#line 1037 
    __retres = "rx only";
    
#line 1037 
    goto return_label;
    case (unsigned int)3: 
#line 1038 
    ;
    
#line 1039 
    __retres = "tx_only";
    
#line 1039 
    goto return_label;
    case (unsigned int)4: 
#line 1040 
    ;
    
#line 1041 
    __retres = "both";
    
#line 1041 
    goto return_label;
    default: 
#line 1042 
    ;
    
#line 1043 
    __retres = "indeterminated";
    
#line 1043 
    goto return_label;
  }
  return_label: 
#line 1033 
                return __retres;
}


#line 1048  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_link_up(struct skge_port *skge)
{
  
#line 1050 
  skge_write8((struct skge_hw const *)skge->hw,(skge->port << 7) + 3132,(unsigned char)22);
  
#line 1053 
  netif_carrier_on(skge->netdev);
  
#line 1054 
  netif_wake_queue(skge->netdev);
  
#line 1056 
  if ((skge->msg_enable & 4U) != 0U) {
    char const *tmp;
    char *tmp_0;
    
#line 1056 
    tmp = skge_pause(skge->flow_status);
    
#line 1056 
    if ((unsigned int)skge->duplex == 1U) 
#line 1056 
                                          tmp_0 = (char *)"full"; else 
                                                                    
#line 1056 
                                                                    tmp_0 = (char *)"half";
    
#line 1056 
    ;
    
#line 1056 
    ;
    
#line 1056 
    netdev_info((struct net_device const *)skge->netdev,"Link is up at %d Mbps, %s duplex, flow control %s\n",(int)skge->speed,tmp_0,tmp);
  }
  else ;
  
#line 1057 
  return;
}


#line 1063  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_link_down(struct skge_port *skge)
{
  
#line 1065 
  skge_write8((struct skge_hw const *)skge->hw,(skge->port << 7) + 3132,(unsigned char)1);
  
#line 1066 
  netif_carrier_off(skge->netdev);
  
#line 1067 
  netif_stop_queue(skge->netdev);
  
#line 1069 
  if ((skge->msg_enable & 4U) != 0U) 
#line 1069 
                                     netdev_info((struct net_device const *)skge->netdev,"Link is down\n"); else ;
  
#line 1070 
  return;
}


#line 1072  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void xm_link_down(struct skge_hw *hw, int port)
{
  bool tmp_0;
  
#line 1074 
  struct net_device *dev = hw->dev[port];
  
#line 1075 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 1077 
  xm_write16((struct skge_hw const *)hw,port,68,(unsigned short)65535);
  
#line 1079 
  tmp_0 = netif_carrier_ok((struct net_device const *)dev);
  
#line 1079 
  if ((int)tmp_0 != 0) 
#line 1080 
                       skge_link_down(skge); else ;
  
#line 1081 
  return;
}


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int __xm_phy_read(struct skge_hw *hw, int port, u16 reg, u16 *val)
{
  int __retres;
  int i;
  u16 tmp;
  
#line 1087 
  xm_write16((struct skge_hw const *)hw,port,52,(unsigned short)((int)hw->phy_addr | (int)reg));
  
#line 1088 
  *val = xm_read16((struct skge_hw const *)hw,port,56);
  
#line 1090 
  if ((unsigned int)hw->phy_type == 0U) 
#line 1091 
                                        goto ready; else ;
  
#line 1093 
  i = 0;
  
#line 1093 
  goto ldv_49384;
  ldv_49383: 
#line 1094 
  ;
  
#line 1094 
  tmp = xm_read16((struct skge_hw const *)hw,port,0);
  
#line 1094 
  if (((int)tmp & 4096) != 0) 
#line 1095 
                              goto ready; else ;
  
#line 1096 
  __const_udelay(4295UL);
  
#line 1093 
  i += 1;
  ldv_49384: 
#line 1094 
  ;
  
#line 1093 
  if (i <= 999) 
#line 1095 
                goto ldv_49383; else 
#line 1098 
                                     goto ldv_49385;
  ldv_49385: 
#line 1099 
  ;
  
#line 1099 
  __retres = -110;
  
#line 1099 
  goto return_label;
  ready: 
#line 1100 
  ;
  
#line 1101 
  *val = xm_read16((struct skge_hw const *)hw,port,56);
  
#line 1103 
  __retres = 0;
  return_label: 
#line 1103 
                return __retres;
}


#line 1106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u16 xm_phy_read(struct skge_hw *hw, int port, u16 reg)
{
  int tmp;
  
#line 1108 
  u16 v = (unsigned short)0U;
  
#line 1109 
  tmp = __xm_phy_read(hw,port,(unsigned short)((int)reg),& v);
  
#line 1109 
  if (tmp != 0) 
#line 1110 
                printk("\001",(char *)(& (hw->dev[port])->name)); else ;
  
#line 1111 
  return v;
}


#line 1114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int xm_phy_write(struct skge_hw *hw, int port, u16 reg, u16 val)
{
  int __retres;
  int i;
  u16 tmp;
  u16 tmp_0;
  
#line 1118 
  xm_write16((struct skge_hw const *)hw,port,52,(unsigned short)((int)hw->phy_addr | (int)reg));
  
#line 1119 
  i = 0;
  
#line 1119 
  goto ldv_49401;
  ldv_49400: 
#line 1120 
  ;
  
#line 1120 
  tmp = xm_read16((struct skge_hw const *)hw,port,0);
  
#line 1120 
  if (((int)tmp & 2048) == 0) 
#line 1121 
                              goto ready; else ;
  
#line 1122 
  __const_udelay(4295UL);
  
#line 1119 
  i += 1;
  ldv_49401: 
#line 1120 
  ;
  
#line 1119 
  if (i <= 999) 
#line 1121 
                goto ldv_49400; else 
#line 1124 
                                     goto ldv_49402;
  ldv_49402: 
#line 1125 
  ;
  
#line 1124 
  __retres = -5;
  
#line 1124 
  goto return_label;
  ready: 
#line 1126 
  ;
  
#line 1127 
  xm_write16((struct skge_hw const *)hw,port,56,(unsigned short)((int)val));
  
#line 1128 
  i = 0;
  
#line 1128 
  goto ldv_49404;
  ldv_49403: 
#line 1129 
  ;
  
#line 1129 
  tmp_0 = xm_read16((struct skge_hw const *)hw,port,0);
  
#line 1129 
  if (((int)tmp_0 & 2048) == 0) {
    
#line 1130 
    __retres = 0;
    
#line 1130 
    goto return_label;
  }
  else ;
  
#line 1131 
  __const_udelay(4295UL);
  
#line 1128 
  i += 1;
  ldv_49404: 
#line 1129 
  ;
  
#line 1128 
  if (i <= 999) 
#line 1130 
                goto ldv_49403; else 
#line 1133 
                                     goto ldv_49405;
  ldv_49405: 
#line 1134 
  ;
  
#line 1133 
  __retres = -110;
  return_label: 
#line 1133 
                return __retres;
}


#line 1136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void genesis_init(struct skge_hw *hw)
{
  
#line 1139 
  skge_write32((struct skge_hw const *)hw,368,26562500U);
  
#line 1140 
  skge_write8((struct skge_hw const *)hw,376,(unsigned char)2);
  
#line 1143 
  skge_write16((struct skge_hw const *)hw,440,(unsigned short)2);
  
#line 1146 
  skge_write8((struct skge_hw const *)hw,432,(unsigned char)72);
  
#line 1147 
  skge_write8((struct skge_hw const *)hw,433,(unsigned char)72);
  
#line 1148 
  skge_write8((struct skge_hw const *)hw,434,(unsigned char)72);
  
#line 1149 
  skge_write8((struct skge_hw const *)hw,435,(unsigned char)72);
  
#line 1151 
  skge_write8((struct skge_hw const *)hw,448,(unsigned char)0);
  
#line 1152 
  skge_write8((struct skge_hw const *)hw,449,(unsigned char)0);
  
#line 1153 
  skge_write8((struct skge_hw const *)hw,450,(unsigned char)0);
  
#line 1154 
  skge_write8((struct skge_hw const *)hw,451,(unsigned char)0);
  
#line 1157 
  skge_write16((struct skge_hw const *)hw,496,(unsigned short)2);
  
#line 1158 
  skge_write16((struct skge_hw const *)hw,464,(unsigned short)65535);
  
#line 1159 
  skge_write16((struct skge_hw const *)hw,472,(unsigned short)65535);
  
#line 1160 
  skge_write16((struct skge_hw const *)hw,468,(unsigned short)65535);
  
#line 1161 
  skge_write16((struct skge_hw const *)hw,476,(unsigned short)65535);
  
#line 1162 
  return;
}


#line 1164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void genesis_reset(struct skge_hw *hw, int port)
{
  u32 reg;
  
#line 1166 
  u8 const zero[8U] = {(unsigned char)0U};
  
#line 1169 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3852,(unsigned char)0);
  
#line 1172 
  xm_write32((struct skge_hw const *)hw,port,64,4U);
  
#line 1173 
  xm_write16((struct skge_hw const *)hw,port,68,(unsigned short)65535);
  
#line 1174 
  xm_write32((struct skge_hw const *)hw,port,292,0U);
  
#line 1175 
  xm_write16((struct skge_hw const *)hw,port,32,(unsigned short)0);
  
#line 1176 
  xm_write16((struct skge_hw const *)hw,port,48,(unsigned short)0);
  
#line 1179 
  if ((unsigned int)hw->phy_type == 1U) 
#line 1180 
                                        xm_write16((struct skge_hw const *)hw,port,27,(unsigned short)65535); else ;
  
#line 1182 
  xm_outhash((struct skge_hw const *)hw,port,272,(u8 const *)(& zero));
  
#line 1185 
  reg = xm_read32((struct skge_hw const *)hw,port,292);
  
#line 1186 
  xm_write32((struct skge_hw const *)hw,port,292,reg | 2U);
  
#line 1187 
  xm_write32((struct skge_hw const *)hw,port,292,reg | 1U);
  
#line 1188 
  return;
}


#line 1191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u16 const phy_pause_map[5U] = {[1] = (unsigned short)0U, (unsigned short)2048U, (unsigned short)1024U, (unsigned short)3072U};

#line 1199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u16 const fiber_pause_map[5U] = {[1] = (unsigned short)0U, (unsigned short)256U, (unsigned short)128U, (unsigned short)384U};

#line 1208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void bcom_check_link(struct skge_hw *hw, int port)
{
  u16 status;
  int tmp_1;
  bool tmp_0;
  
#line 1210 
  struct net_device *dev = hw->dev[port];
  
#line 1211 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 1215 
  xm_phy_read(hw,port,(unsigned short)1);
  
#line 1216 
  status = xm_phy_read(hw,port,(unsigned short)1);
  
#line 1218 
  if (((int)status & 4) == 0) {
    
#line 1219 
    xm_link_down(hw,port);
    
#line 1220 
    goto return_label;
  }
  else ;
  
#line 1223 
  if ((unsigned int)skge->autoneg == 1U) {
    u16 lpa;
    u16 aux;
    
#line 1226 
    if (((int)status & 32) == 0) 
#line 1227 
                                 goto return_label; else ;
    
#line 1229 
    lpa = xm_phy_read(hw,port,(unsigned short)5);
    
#line 1230 
    if (((int)lpa & 8192) != 0) {
      
#line 1231 
      netdev_notice((struct net_device const *)dev,"remote fault\n");
      
#line 1232 
      goto return_label;
    }
    else ;
    
#line 1235 
    aux = xm_phy_read(hw,port,(unsigned short)25);
    
#line 1238 
    switch ((int)aux & 1792) {
      case 1792: 
#line 1239 
      ;
      
#line 1240 
      skge->duplex = (unsigned char)1U;
      
#line 1241 
      goto ldv_49427;
      case 1536: 
#line 1242 
      ;
      
#line 1243 
      skge->duplex = (unsigned char)0U;
      
#line 1244 
      goto ldv_49427;
      default: 
#line 1245 
      ;
      
#line 1246 
      netdev_notice((struct net_device const *)dev,"duplex mismatch\n");
      
#line 1247 
      goto return_label;
    }
    ldv_49427: 
#line 1251 
    ;
    
#line 1251 
    switch ((int)aux & 3) {
      case 3: 
#line 1252 
      ;
      
#line 1253 
      skge->flow_status = FLOW_STAT_SYMMETRIC;
      
#line 1254 
      goto ldv_49431;
      case 2: 
#line 1255 
      ;
      
#line 1256 
      skge->flow_status = FLOW_STAT_REM_SEND;
      
#line 1257 
      goto ldv_49431;
      case 1: 
#line 1258 
      ;
      
#line 1259 
      skge->flow_status = FLOW_STAT_LOC_SEND;
      
#line 1260 
      goto ldv_49431;
      default: 
#line 1261 
      ;
      
#line 1262 
      skge->flow_status = FLOW_STAT_NONE;
    }
    ldv_49431: 
#line 1264 
    ;
    
#line 1264 
    skge->speed = (unsigned short)1000U;
  }
  else ;
  
#line 1267 
  tmp_0 = netif_carrier_ok((struct net_device const *)dev);
  
#line 1267 
  if (tmp_0) 
#line 1267 
             tmp_1 = 0; else 
#line 1267 
                             tmp_1 = 1;
  
#line 1267 
  if (tmp_1) 
#line 1268 
             genesis_link_up(skge); else ;
  return_label: 
#line 1269 
                return;
}


#line 1274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void bcom_phy_init(struct skge_port *skge)
{
  int i;
  u16 id1;
  u16 r;
  u16 ext;
  u16 ctl;
  
#line 1276 
  struct skge_hw *hw = skge->hw;
  
#line 1277 
  int port = skge->port;
  
#line 1285 
  struct __anonstruct_A1hack_335 const A1hack[12U] = {{.reg = (unsigned short)24U, .val = (unsigned short)3104U}, {.reg = (unsigned short)23U, .val = (unsigned short)18U}, {.reg = (unsigned short)21U, .val = (unsigned short)4356U}, {.reg = (unsigned short)23U, .val = (unsigned short)19U}, {.reg = (unsigned short)21U, .val = (unsigned short)1028U}, {.reg = (unsigned short)23U, .val = (unsigned short)32774U}, {.reg = (unsigned short)21U, .val = (unsigned short)306U}, {.reg = (unsigned short)23U, .val = (unsigned short)32774U}, {.reg = (unsigned short)21U, .val = (unsigned short)562U}, {.reg = (unsigned short)23U, .val = (unsigned short)32781U}, {.reg = (unsigned short)21U, .val = (unsigned short)15U}, {.reg = (unsigned short)24U, .val = (unsigned short)1056U}};
  
#line 1285 
  struct __anonstruct_C0hack_336 const C0hack[6U] = {{.reg = (unsigned short)24U, .val = (unsigned short)3104U}, {.reg = (unsigned short)23U, .val = (unsigned short)18U}, {.reg = (unsigned short)21U, .val = (unsigned short)4612U}, {.reg = (unsigned short)23U, .val = (unsigned short)19U}, {.reg = (unsigned short)21U, .val = (unsigned short)2564U}, {.reg = (unsigned short)24U, .val = (unsigned short)1056U}};
  
#line 1296 
  id1 = xm_phy_read(hw,port,(unsigned short)3);
  
#line 1299 
  r = xm_read16((struct skge_hw const *)hw,port,0);
  
#line 1300 
  r = (unsigned short)((unsigned int)r | 32U);
  
#line 1301 
  xm_write16((struct skge_hw const *)hw,port,0,(unsigned short)((int)r));
  
#line 1303 
  switch ((int)id1) {
    case 24644: 
#line 1304 
    ;
    
#line 1309 
    i = 0;
    
#line 1309 
    goto ldv_49455;
    ldv_49454: 
#line 1310 
    ;
    
#line 1310 
    xm_phy_write(hw,port,(unsigned short)((int)C0hack[i].reg),(unsigned short)((int)C0hack[i].val));
    
#line 1309 
    i += 1;
    ldv_49455: 
#line 1310 
    ;
    
#line 1309 
    if ((unsigned int)i <= 5U) 
#line 1311 
                               goto ldv_49454; else 
#line 1314 
                                                    goto ldv_49456;
    ldv_49456: 
#line 1315 
    ;
    
#line 1313 
    goto ldv_49457;
    case 24641: 
#line 1314 
    ;
    
#line 1319 
    i = 0;
    
#line 1319 
    goto ldv_49463;
    ldv_49462: 
#line 1320 
    ;
    
#line 1320 
    xm_phy_write(hw,port,(unsigned short)((int)A1hack[i].reg),(unsigned short)((int)A1hack[i].val));
    
#line 1319 
    i += 1;
    ldv_49463: 
#line 1320 
    ;
    
#line 1319 
    if ((unsigned int)i <= 11U) 
#line 1321 
                                goto ldv_49462; else 
#line 1324 
                                                     goto ldv_49464;
    ldv_49464: 
#line 1325 
    ;
    
#line 1322 
    goto ldv_49457;
  }
  ldv_49457: 
#line 1329 
  ;
  
#line 1329 
  r = xm_phy_read(hw,port,(unsigned short)24);
  
#line 1330 
  r = (unsigned short)((unsigned int)r | 32U);
  
#line 1331 
  xm_phy_write(hw,port,(unsigned short)24,(unsigned short)((int)r));
  
#line 1334 
  xm_read16((struct skge_hw const *)hw,port,72);
  
#line 1336 
  ext = (unsigned short)32U;
  
#line 1337 
  ctl = (unsigned short)64U;
  
#line 1339 
  if ((unsigned int)skge->autoneg == 1U) {
    
#line 1345 
    u16 adv = (unsigned short)1024U;
    
#line 1346 
    if ((skge->advertising & 16U) != 0U) 
#line 1347 
                                         adv = (unsigned short)((unsigned int)adv | 256U); else ;
    
#line 1348 
    if ((skge->advertising & 32U) != 0U) 
#line 1349 
                                         adv = (unsigned short)((unsigned int)adv | 512U); else ;
    
#line 1350 
    xm_phy_write(hw,port,(unsigned short)9,(unsigned short)((int)adv));
    
#line 1352 
    ctl = (unsigned short)((unsigned int)ctl | 4608U);
  }
  else {
    
#line 1354 
    if ((unsigned int)skge->duplex == 1U) 
#line 1355 
                                          ctl = (unsigned short)((unsigned int)ctl | 256U); else ;
    
#line 1357 
    xm_phy_write(hw,port,(unsigned short)9,(unsigned short)4096);
  }
  
#line 1361 
  xm_phy_write(hw,port,(unsigned short)4,(unsigned short)((int)((unsigned int)phy_pause_map[(unsigned int)skge->flow_control] | 1U)));
  
#line 1365 
  if ((hw->dev[port])->mtu > 1500U) {
    
#line 1366 
    xm_phy_write(hw,port,(unsigned short)24,(unsigned short)17408);
    
#line 1369 
    ext = (unsigned short)((unsigned int)ext | 1U);
  }
  else ;
  
#line 1373 
  xm_phy_write(hw,port,(unsigned short)16,(unsigned short)((int)ext));
  
#line 1374 
  xm_phy_write(hw,port,(unsigned short)0,(unsigned short)((int)ctl));
  
#line 1377 
  xm_phy_write(hw,port,(unsigned short)27,(unsigned short)48113);
  
#line 1378 
  return;
}


#line 1380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void xm_phy_init(struct skge_port *skge)
{
  
#line 1382 
  struct skge_hw *hw = skge->hw;
  
#line 1383 
  int port = skge->port;
  
#line 1384 
  u16 ctrl = (unsigned short)0U;
  
#line 1386 
  if ((unsigned int)skge->autoneg == 1U) {
    
#line 1387 
    if ((skge->advertising & 16U) != 0U) 
#line 1388 
                                         ctrl = (unsigned short)((unsigned int)ctrl | 64U); else ;
    
#line 1389 
    if ((skge->advertising & 32U) != 0U) 
#line 1390 
                                         ctrl = (unsigned short)((unsigned int)ctrl | 32U); else ;
    
#line 1392 
    ctrl = (unsigned short)((int)fiber_pause_map[(unsigned int)skge->flow_control] | (int)ctrl);
    
#line 1394 
    xm_phy_write(hw,port,(unsigned short)4,(unsigned short)((int)ctrl));
    
#line 1397 
    ctrl = (unsigned short)4608U;
  }
  else 
    
#line 1400 
    if ((unsigned int)skge->duplex == 1U) 
#line 1401 
                                          ctrl = (unsigned short)((unsigned int)ctrl | 256U); else ;
  
#line 1408 
  xm_phy_write(hw,port,(unsigned short)0,(unsigned short)((int)ctrl));
  
#line 1411 
  ldv_mod_timer_74(& skge->link_timer,jiffies + 250UL);
  
#line 1412 
  return;
}


#line 1414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int xm_check_link(struct net_device *dev)
{
  int __retres;
  u16 status;
  int tmp_1;
  bool tmp_0;
  
#line 1416 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 1417 
  struct skge_hw *hw = skge->hw;
  
#line 1418 
  int port = skge->port;
  
#line 1422 
  xm_phy_read(hw,port,(unsigned short)1);
  
#line 1423 
  status = xm_phy_read(hw,port,(unsigned short)1);
  
#line 1425 
  if (((int)status & 4) == 0) {
    
#line 1426 
    xm_link_down(hw,port);
    
#line 1427 
    __retres = 0;
    
#line 1427 
    goto return_label;
  }
  else ;
  
#line 1430 
  if ((unsigned int)skge->autoneg == 1U) {
    u16 lpa;
    u16 res;
    
#line 1433 
    if (((int)status & 32) == 0) {
      
#line 1434 
      __retres = 0;
      
#line 1434 
      goto return_label;
    }
    else ;
    
#line 1436 
    lpa = xm_phy_read(hw,port,(unsigned short)5);
    
#line 1437 
    if (((int)lpa & 8192) != 0) {
      
#line 1438 
      netdev_notice((struct net_device const *)dev,"remote fault\n");
      
#line 1439 
      __retres = 0;
      
#line 1439 
      goto return_label;
    }
    else ;
    
#line 1442 
    res = xm_phy_read(hw,port,(unsigned short)16);
    
#line 1445 
    switch ((int)res & 96) {
      case 32: 
#line 1446 
      ;
      
#line 1447 
      skge->duplex = (unsigned char)1U;
      
#line 1448 
      goto ldv_49482;
      case 64: 
#line 1449 
      ;
      
#line 1450 
      skge->duplex = (unsigned char)0U;
      
#line 1451 
      goto ldv_49482;
      default: 
#line 1452 
      ;
      
#line 1453 
      netdev_notice((struct net_device const *)dev,"duplex mismatch\n");
      
#line 1454 
      __retres = 0;
      
#line 1454 
      goto return_label;
    }
    ldv_49482: 
#line 1458 
    ;
    
#line 1458 
    if ((unsigned int)skge->flow_control + 4294967293U <= 1U && ((int)lpa & 128) != 0) 
      
#line 1461 
      skge->flow_status = FLOW_STAT_SYMMETRIC;
    else 
      
#line 1462 
      if (skge->flow_control == (unsigned int)FLOW_MODE_SYM_OR_REM && ((int)lpa & 384) == 256) 
        
#line 1465 
        skge->flow_status = FLOW_STAT_REM_SEND;
      else 
        
#line 1466 
        if (skge->flow_control == (unsigned int)FLOW_MODE_LOC_SEND && ((int)lpa & 384) == 384) 
          
#line 1469 
          skge->flow_status = FLOW_STAT_LOC_SEND; else 
#line 1471 
                                                       skge->flow_status = FLOW_STAT_NONE;
    
#line 1473 
    skge->speed = (unsigned short)1000U;
  }
  else ;
  
#line 1476 
  tmp_0 = netif_carrier_ok((struct net_device const *)dev);
  
#line 1476 
  if (tmp_0) 
#line 1476 
             tmp_1 = 0; else 
#line 1476 
                             tmp_1 = 1;
  
#line 1476 
  if (tmp_1) 
#line 1477 
             genesis_link_up(skge); else ;
  
#line 1478 
  __retres = 1;
  return_label: 
#line 1478 
                return __retres;
}


#line 1487  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void xm_link_timer(unsigned long arg)
{
  int i;
  unsigned long flags;
  int tmp_0;
  bool tmp;
  u16 tmp_1;
  int tmp_4;
  
#line 1489 
  struct skge_port *skge = (struct skge_port *)arg;
  
#line 1490 
  struct net_device *dev = skge->netdev;
  
#line 1491 
  struct skge_hw *hw = skge->hw;
  
#line 1492 
  int port = skge->port;
  
#line 1496 
  tmp = netif_running((struct net_device const *)dev);
  
#line 1496 
  if (tmp) 
#line 1496 
           tmp_0 = 0; else 
#line 1496 
                           tmp_0 = 1;
  
#line 1496 
  if (tmp_0) 
#line 1497 
             goto return_label; else ;
  
#line 1499 
  ldv___ldv_spin_lock_75(& hw->phy_lock);
  
#line 1505 
  i = 0;
  
#line 1505 
  goto ldv_49496;
  ldv_49495: 
#line 1506 
  ;
  
#line 1506 
  tmp_1 = xm_read16((struct skge_hw const *)hw,port,64);
  
#line 1506 
  if (((int)tmp_1 & 1) != 0) 
#line 1507 
                             goto link_down; else ;
  
#line 1505 
  i += 1;
  ldv_49496: 
#line 1506 
  ;
  
#line 1505 
  if (i <= 2) 
#line 1507 
              goto ldv_49495; else 
#line 1510 
                                   goto ldv_49497;
  ldv_49497: 
#line 1511 
  ;
  
#line 1511 
  tmp_4 = xm_check_link(dev);
  
#line 1511 
  if (tmp_4 != 0) {
    
#line 1512 
    u16 msk = xm_read16((struct skge_hw const *)hw,port,68);
    
#line 1513 
    msk = (unsigned short)((unsigned int)msk & 63487U);
    
#line 1514 
    xm_write16((struct skge_hw const *)hw,port,68,(unsigned short)((int)msk));
    
#line 1515 
    xm_read16((struct skge_hw const *)hw,port,72);
  }
  else {
    unsigned long tmp_3;
    link_down: 
#line 1517 
    ;
    
#line 1518 
    tmp_3 = round_jiffies(jiffies + 250UL);
    
#line 1518 
    ;
    
#line 1518 
    ldv_mod_timer_76(& skge->link_timer,tmp_3);
  }
  
#line 1521 
  ldv_spin_unlock_irqrestore_77(& hw->phy_lock,flags);
  return_label: 
#line 1522 
                return;
}


#line 1524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void genesis_mac_init(struct skge_hw *hw, int port)
{
  int i;
  u32 r;
  u16 tmp_0;
  
#line 1526 
  struct net_device *dev = hw->dev[port];
  
#line 1527 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 1528 
  int jumbo = (hw->dev[port])->mtu > 1500U;
  
#line 1531 
  u8 const zero[6U] = {(unsigned char)0U};
  
#line 1533 
  i = 0;
  
#line 1533 
  goto ldv_49511;
  ldv_49510: 
#line 1534 
  ;
  
#line 1534 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3352,(unsigned short)1);
  
#line 1536 
  tmp_0 = skge_read16((struct skge_hw const *)hw,(port << 7) + 3352);
  
#line 1536 
  if (((int)tmp_0 & 1) != 0) 
#line 1537 
                             goto reset_ok; else ;
  
#line 1538 
  __const_udelay(4295UL);
  
#line 1533 
  i += 1;
  ldv_49511: 
#line 1534 
  ;
  
#line 1533 
  if (i <= 9) 
#line 1535 
              goto ldv_49510; else 
#line 1538 
                                   goto ldv_49512;
  ldv_49512: 
#line 1539 
  ;
  
#line 1541 
  netdev_warn((struct net_device const *)dev,"genesis reset failed\n");
  reset_ok: 
#line 1543 
  ;
  
#line 1545 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3352,(unsigned short)2);
  
#line 1552 
  if ((unsigned int)hw->phy_type != 0U) {
    
#line 1554 
    r = skge_read32((struct skge_hw const *)hw,348);
    
#line 1555 
    if (port == 0) 
#line 1556 
                   r |= 65537U; else 
#line 1558 
                                     r |= 262148U;
    
#line 1560 
    skge_write32((struct skge_hw const *)hw,348,r);
    
#line 1563 
    xm_write16((struct skge_hw const *)hw,port,76,(unsigned short)1);
  }
  else ;
  
#line 1567 
  switch ((int)hw->phy_type) {
    case 0: 
#line 1568 
    ;
    
#line 1569 
    xm_phy_init(skge);
    
#line 1570 
    goto ldv_49514;
    case 1: 
#line 1571 
    ;
    
#line 1572 
    bcom_phy_init(skge);
    
#line 1573 
    bcom_check_link(hw,port);
  }
  ldv_49514: 
#line 1577 
  ;
  
#line 1577 
  xm_outaddr((struct skge_hw const *)hw,port,264,(u8 const *)dev->dev_addr);
  
#line 1580 
  i = 1;
  
#line 1580 
  goto ldv_49517;
  ldv_49516: 
#line 1581 
  ;
  
#line 1581 
  xm_outaddr((struct skge_hw const *)hw,port,(i << 3) + 128,(u8 const *)(& zero));
  
#line 1580 
  i += 1;
  ldv_49517: 
#line 1581 
  ;
  
#line 1580 
  if (i <= 15) 
#line 1582 
               goto ldv_49516; else 
#line 1585 
                                    goto ldv_49518;
  ldv_49518: 
#line 1586 
  ;
  
#line 1584 
  xm_write16((struct skge_hw const *)hw,port,512,(unsigned short)3);
  
#line 1587 
  xm_write16((struct skge_hw const *)hw,port,512,(unsigned short)3);
  
#line 1591 
  xm_write16((struct skge_hw const *)hw,port,282,(unsigned short)1450);
  
#line 1594 
  r = 272U;
  
#line 1595 
  if (jumbo != 0) 
#line 1596 
                  r |= 128U; else ;
  
#line 1598 
  if ((unsigned int)skge->duplex == 0U) 
#line 1604 
                                        r |= 1U; else ;
  
#line 1606 
  xm_write16((struct skge_hw const *)hw,port,48,(unsigned short)((int)((unsigned short)r)));
  
#line 1609 
  xm_write16((struct skge_hw const *)hw,port,32,(unsigned short)1);
  
#line 1612 
  if ((unsigned int)hw->ports > 1U && jumbo != 0) 
#line 1613 
                                                  xm_write16((struct skge_hw const *)hw,port,100,(unsigned short)1020); else 
                                                                    
#line 1615 
                                                                    xm_write16((struct skge_hw const *)hw,port,100,(unsigned short)512);
  
#line 1631 
  xm_write32((struct skge_hw const *)hw,port,292,20352U);
  
#line 1639 
  xm_write32((struct skge_hw const *)hw,port,524,6U);
  
#line 1646 
  xm_write32((struct skge_hw const *)hw,port,528,6U);
  
#line 1649 
  skge_write16((struct skge_hw const *)hw,440,(unsigned short)2);
  
#line 1652 
  skge_write8((struct skge_hw const *)hw,432,(unsigned char)72);
  
#line 1653 
  skge_write8((struct skge_hw const *)hw,433,(unsigned char)72);
  
#line 1654 
  skge_write8((struct skge_hw const *)hw,434,(unsigned char)72);
  
#line 1655 
  skge_write8((struct skge_hw const *)hw,435,(unsigned char)72);
  
#line 1657 
  skge_write8((struct skge_hw const *)hw,448,(unsigned char)0);
  
#line 1658 
  skge_write8((struct skge_hw const *)hw,449,(unsigned char)0);
  
#line 1659 
  skge_write8((struct skge_hw const *)hw,450,(unsigned char)0);
  
#line 1660 
  skge_write8((struct skge_hw const *)hw,451,(unsigned char)0);
  
#line 1663 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3100,(unsigned char)2);
  
#line 1664 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3096,(unsigned short)2048);
  
#line 1665 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3100,(unsigned char)8);
  
#line 1668 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3356,(unsigned char)2);
  
#line 1669 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3352,(unsigned short)10272);
  
#line 1670 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3356,(unsigned char)8);
  
#line 1672 
  if (jumbo != 0) 
#line 1674 
                  skge_write16((struct skge_hw const *)hw,(port << 7) + 3096,(unsigned short)32);
  else {
    unsigned int tmp_1;
    
#line 1677 
    if (port == 0) 
#line 1677 
                   tmp_1 = 128U; else 
#line 1677 
                                      tmp_1 = 512U;
    
#line 1677 
    ;
    
#line 1677 
    skge_write16((struct skge_hw const *)hw,496,(unsigned short)((int)tmp_1));
  }
  
#line 1679 
  return;
}


#line 1682  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void genesis_stop(struct skge_port *skge)
{
  u16 cmd;
  unsigned int tmp;
  u16 tmp_0;
  u16 tmp_2;
  
#line 1684 
  struct skge_hw *hw = skge->hw;
  
#line 1685 
  int port = skge->port;
  
#line 1686 
  unsigned int retries = 1000U;
  
#line 1690 
  cmd = xm_read16((struct skge_hw const *)hw,port,0);
  
#line 1691 
  cmd = (unsigned short)((unsigned int)cmd & 65532U);
  
#line 1692 
  xm_write16((struct skge_hw const *)hw,port,0,(unsigned short)((int)cmd));
  
#line 1694 
  genesis_reset(hw,port);
  
#line 1697 
  if (port == 0) 
#line 1697 
                 tmp = 4096U; else 
#line 1697 
                                   tmp = 8192U;
  
#line 1697 
  ;
  
#line 1697 
  skge_write16((struct skge_hw const *)hw,496,(unsigned short)((int)tmp));
  
#line 1701 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3352,(unsigned short)2);
  ldv_49527: 
#line 1702 
  ;
  
#line 1703 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3352,(unsigned short)1);
  
#line 1704 
  tmp_0 = skge_read16((struct skge_hw const *)hw,(port << 7) + 3352);
  
#line 1704 
  if (((int)tmp_0 & 1) == 0) 
#line 1705 
                             goto ldv_49526; else ;
  
#line 1706 
  retries -= 1U;
  
#line 1706 
  if (retries != 0U) 
#line 1708 
                     goto ldv_49527; else 
#line 1711 
                                          goto ldv_49526;
  ldv_49526: 
#line 1712 
  ;
  
#line 1709 
  if ((unsigned int)hw->phy_type != 0U) {
    
#line 1710 
    u32 reg = skge_read32((struct skge_hw const *)hw,348);
    
#line 1711 
    if (port == 0) {
      
#line 1712 
      reg |= 65536U;
      
#line 1713 
      reg &= 4294967294U;
    }
    else {
      
#line 1715 
      reg |= 262144U;
      
#line 1716 
      reg &= 4294967291U;
    }
    
#line 1718 
    skge_write32((struct skge_hw const *)hw,348,reg);
    
#line 1719 
    skge_read32((struct skge_hw const *)hw,348);
  }
  else ;
  
#line 1724 
  tmp_2 = xm_read16((struct skge_hw const *)hw,port,0);
  
#line 1722 
  ;
  
#line 1722 
  ;
  
#line 1722 
  xm_write16((struct skge_hw const *)hw,port,0,(unsigned short)((int)tmp_2 & 65532));
  
#line 1726 
  xm_read16((struct skge_hw const *)hw,port,0);
  
#line 1727 
  return;
}


#line 1730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void genesis_get_stats(struct skge_port *skge, u64 *data)
{
  int i;
  int tmp;
  u16 tmp_1;
  u32 tmp_2;
  u32 tmp_3;
  u32 tmp_4;
  u32 tmp_5;
  u32 tmp_6;
  
#line 1732 
  struct skge_hw *hw = skge->hw;
  
#line 1733 
  int port = skge->port;
  
#line 1735 
  unsigned long timeout = jiffies + 250UL;
  
#line 1737 
  xm_write16((struct skge_hw const *)hw,port,512,(unsigned short)48);
  
#line 1741 
  goto ldv_49545;
  ldv_49544: 
#line 1742 
  ;
  {
    unsigned long __dummy;
    unsigned long volatile __dummy2;
    
#line 1743 
    tmp = 1;
  }
  
#line 1743 
  if (tmp != 0) {
    int tmp_0;
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
#line 1743 
      tmp_0 = 1;
    }
    
#line 1743 
    if (tmp_0 != 0) {
      
#line 1743 
      if ((long)(timeout - jiffies) < 0L) 
#line 1744 
                                          goto ldv_49543; else ;
    }
    else ;
  }
  else ;
  
#line 1745 
  __const_udelay(42950UL);
  ldv_49545: 
#line 1747 
  ;
  
#line 1741 
  tmp_1 = xm_read16((struct skge_hw const *)hw,port,512);
  
#line 1741 
  if (((int)tmp_1 & 48) != 0) 
#line 1743 
                              goto ldv_49544; else 
#line 1746 
                                                   goto ldv_49543;
  ldv_49543: 
#line 1747 
  ;
  
#line 1749 
  tmp_2 = xm_read32((struct skge_hw const *)hw,port,644);
  
#line 1750 
  tmp_3 = xm_read32((struct skge_hw const *)hw,port,648);
  
#line 1749 
  *data = ((unsigned long long)tmp_2 << 32) | (unsigned long long)tmp_3;
  
#line 1751 
  tmp_4 = xm_read32((struct skge_hw const *)hw,port,772);
  
#line 1752 
  tmp_5 = xm_read32((struct skge_hw const *)hw,port,776);
  
#line 1751 
  *(data + 1U) = ((unsigned long long)tmp_4 << 32) | (unsigned long long)tmp_5;
  
#line 1754 
  i = 2;
  
#line 1754 
  goto ldv_49550;
  ldv_49549: 
#line 1755 
  ;
  
#line 1755 
  tmp_6 = xm_read32((struct skge_hw const *)hw,port,(int)skge_stats[i].xmac_offset);
  
#line 1755 
  *(data + i) = (unsigned long long)tmp_6;
  
#line 1754 
  i += 1;
  ldv_49550: 
#line 1755 
  ;
  
#line 1754 
  if ((unsigned int)i <= 20U) 
#line 1756 
                              goto ldv_49549; else 
#line 1759 
                                                   goto ldv_49551;
  ldv_49551: 
#line 1760 
  ;
  
#line 1761 
  return;
}


#line 1758  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void genesis_mac_intr(struct skge_hw *hw, int port)
{
  
#line 1760 
  struct net_device *dev = hw->dev[port];
  
#line 1761 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 1762 
  u16 status = xm_read16((struct skge_hw const *)hw,port,72);
  
#line 1764 
  if ((skge->msg_enable & 512U) != 0U) 
#line 1764 
                                       netdev_printk("\001",(struct net_device const *)skge->netdev,"mac interrupt status 0x%x\n",(int)status); else ;
  
#line 1767 
  if ((unsigned int)hw->phy_type == 0U && ((int)status & 2048) != 0) {
    
#line 1768 
    xm_link_down(hw,port);
    
#line 1769 
    ldv_mod_timer_78(& skge->link_timer,jiffies + 1UL);
  }
  else ;
  
#line 1772 
  if (((int)status & 4) != 0) {
    
#line 1773 
    xm_write32((struct skge_hw const *)hw,port,292,2U);
    
#line 1774 
    dev->stats.tx_fifo_errors += 1UL;
  }
  else ;
  
#line 1776 
  return;
}


#line 1778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void genesis_link_up(struct skge_port *skge)
{
  u16 cmd;
  u16 msk;
  u32 mode;
  
#line 1780 
  struct skge_hw *hw = skge->hw;
  
#line 1781 
  int port = skge->port;
  
#line 1785 
  cmd = xm_read16((struct skge_hw const *)hw,port,0);
  
#line 1791 
  if (skge->flow_status == (unsigned int)FLOW_STAT_NONE || skge->flow_status == (unsigned int)FLOW_STAT_LOC_SEND) 
    
#line 1794 
    cmd = (unsigned short)((unsigned int)cmd | 1024U); else 
#line 1797 
                                                            cmd = (unsigned short)((unsigned int)cmd & 64511U);
  
#line 1799 
  xm_write16((struct skge_hw const *)hw,port,0,(unsigned short)((int)cmd));
  
#line 1801 
  mode = xm_read32((struct skge_hw const *)hw,port,292);
  
#line 1802 
  if ((unsigned int)skge->flow_status + 4294967293U <= 1U) {
    
#line 1815 
    xm_write16((struct skge_hw const *)hw,port,118,(unsigned short)65535);
    
#line 1817 
    mode |= 33947648U;
    
#line 1818 
    skge_write16((struct skge_hw const *)hw,(port << 7) + 3096,(unsigned short)128);
  }
  else {
    
#line 1825 
    mode &= 4261019647U;
    
#line 1827 
    skge_write16((struct skge_hw const *)hw,(port << 7) + 3096,(unsigned short)64);
  }
  
#line 1830 
  xm_write32((struct skge_hw const *)hw,port,292,mode);
  
#line 1833 
  msk = xm_read16((struct skge_hw const *)hw,port,68);
  
#line 1834 
  msk = (unsigned short)((unsigned int)msk & 65531U);
  
#line 1835 
  xm_write16((struct skge_hw const *)hw,port,68,(unsigned short)((int)msk));
  
#line 1837 
  xm_read16((struct skge_hw const *)hw,port,72);
  
#line 1840 
  cmd = xm_read16((struct skge_hw const *)hw,port,0);
  
#line 1841 
  if ((unsigned int)hw->phy_type != 0U && (unsigned int)skge->duplex == 1U) 
    
#line 1842 
    cmd = (unsigned short)((unsigned int)cmd | 16U); else ;
  
#line 1848 
  if ((unsigned int)hw->phy_type == 1U) {
    u16 tmp;
    
#line 1851 
    tmp = xm_phy_read(hw,port,(unsigned short)24);
    
#line 1849 
    ;
    
#line 1849 
    ;
    
#line 1849 
    xm_phy_write(hw,port,(unsigned short)24,(unsigned short)((int)tmp & 65503));
    
#line 1852 
    xm_phy_write(hw,port,(unsigned short)27,(unsigned short)48113);
  }
  else ;
  
#line 1856 
  xm_write16((struct skge_hw const *)hw,port,0,(unsigned short)((int)((unsigned int)cmd | 3U)));
  
#line 1858 
  skge_link_up(skge);
  
#line 1859 
  return;
}


#line 1862  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static void bcom_phy_intr(struct skge_port *skge)
{
  u16 isrc;
  
#line 1864 
  struct skge_hw *hw = skge->hw;
  
#line 1865 
  int port = skge->port;
  
#line 1868 
  isrc = xm_phy_read(hw,port,(unsigned short)26);
  
#line 1869 
  if ((skge->msg_enable & 512U) != 0U) 
#line 1869 
                                       netdev_printk("\001",(struct net_device const *)skge->netdev,"phy interrupt status 0x%x\n",(int)isrc); else ;
  
#line 1872 
  if (((int)isrc & 16384) != 0) 
#line 1873 
                                printk("\001",(char *)(& (hw->dev[port])->name)); else ;
  
#line 1879 
  if (((int)isrc & 512) != 0) {
    
#line 1880 
    u16 ctrl = xm_phy_read(hw,port,(unsigned short)0);
    
#line 1881 
    xm_phy_write(hw,port,(unsigned short)0,(unsigned short)((int)((unsigned int)ctrl | 16384U)));
    
#line 1883 
    xm_phy_write(hw,port,(unsigned short)0,(unsigned short)((int)ctrl & 49151));
  }
  else ;
  
#line 1887 
  if (((int)isrc & 1026) != 0) 
#line 1888 
                               bcom_check_link(hw,port); else ;
  
#line 1889 
  return;
}


#line 1892  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int gm_phy_write(struct skge_hw *hw, int port, u16 reg, u16 val)
{
  int __retres;
  int i;
  u16 tmp;
  
#line 1896 
  gma_write16((struct skge_hw const *)hw,port,132,(unsigned short)((int)val));
  
#line 1897 
  gma_write16((struct skge_hw const *)hw,port,128,(unsigned short)((int)((unsigned short)(((int)hw->phy_addr << 11) | (((int)reg << 6) & 1984)))));
  
#line 1899 
  i = 0;
  
#line 1899 
  goto ldv_49582;
  ldv_49581: 
#line 1900 
  ;
  
#line 1900 
  __const_udelay(4295UL);
  
#line 1902 
  tmp = gma_read16((struct skge_hw const *)hw,port,128);
  
#line 1902 
  if (((int)tmp & 8) == 0) {
    
#line 1903 
    __retres = 0;
    
#line 1903 
    goto return_label;
  }
  else ;
  
#line 1899 
  i += 1;
  ldv_49582: 
#line 1900 
  ;
  
#line 1899 
  if (i <= 999) 
#line 1901 
                goto ldv_49581; else 
#line 1904 
                                     goto ldv_49583;
  ldv_49583: 
#line 1905 
  ;
  
#line 1906 
  printk("\001",(char *)(& (hw->dev[port])->name));
  
#line 1907 
  __retres = -5;
  return_label: 
#line 1907 
                return __retres;
}


#line 1910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int __gm_phy_read(struct skge_hw *hw, int port, u16 reg, u16 *val)
{
  int __retres;
  int i;
  u16 tmp;
  
#line 1914 
  gma_write16((struct skge_hw const *)hw,port,128,(unsigned short)((int)((unsigned short)((((int)hw->phy_addr << 11) | (((int)reg << 6) & 1984)) | 32))));
  
#line 1918 
  i = 0;
  
#line 1918 
  goto ldv_49593;
  ldv_49592: 
#line 1919 
  ;
  
#line 1919 
  __const_udelay(4295UL);
  
#line 1920 
  tmp = gma_read16((struct skge_hw const *)hw,port,128);
  
#line 1920 
  if (((int)tmp & 16) != 0) 
#line 1921 
                            goto ready; else ;
  
#line 1918 
  i += 1;
  ldv_49593: 
#line 1919 
  ;
  
#line 1918 
  if (i <= 999) 
#line 1920 
                goto ldv_49592; else 
#line 1923 
                                     goto ldv_49594;
  ldv_49594: 
#line 1924 
  ;
  
#line 1924 
  __retres = -110;
  
#line 1924 
  goto return_label;
  ready: 
#line 1925 
  ;
  
#line 1926 
  *val = gma_read16((struct skge_hw const *)hw,port,132);
  
#line 1927 
  __retres = 0;
  return_label: 
#line 1927 
                return __retres;
}


#line 1930  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u16 gm_phy_read(struct skge_hw *hw, int port, u16 reg)
{
  int tmp;
  
#line 1932 
  u16 v = (unsigned short)0U;
  
#line 1933 
  tmp = __gm_phy_read(hw,port,(unsigned short)((int)reg),& v);
  
#line 1933 
  if (tmp != 0) 
#line 1934 
                printk("\001",(char *)(& (hw->dev[port])->name)); else ;
  
#line 1935 
  return v;
}


#line 1939  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_init(struct skge_hw *hw, int port)
{
  u16 ctrl;
  u16 ct1000;
  u16 adv;
  
#line 1941 
  struct skge_port *skge = netdev_priv((struct net_device const *)hw->dev[port]);
  
#line 1944 
  if ((unsigned int)skge->autoneg == 1U) {
    
#line 1945 
    u16 ectrl = gm_phy_read(hw,port,(unsigned short)20);
    
#line 1947 
    ectrl = (unsigned short)((unsigned int)ectrl & 61583U);
    
#line 1949 
    ectrl = (unsigned short)((unsigned int)ectrl | 112U);
    
#line 1951 
    ectrl = (unsigned short)((unsigned int)ectrl | 256U);
    
#line 1953 
    gm_phy_write(hw,port,(unsigned short)20,(unsigned short)((int)ectrl));
  }
  else ;
  
#line 1956 
  ctrl = gm_phy_read(hw,port,(unsigned short)0);
  
#line 1957 
  if ((unsigned int)skge->autoneg == 0U) 
#line 1958 
                                         ctrl = (unsigned short)((unsigned int)ctrl & 61439U); else ;
  
#line 1960 
  ctrl = (unsigned short)((unsigned int)ctrl | 32768U);
  
#line 1961 
  gm_phy_write(hw,port,(unsigned short)0,(unsigned short)((int)ctrl));
  
#line 1963 
  ctrl = (unsigned short)0U;
  
#line 1964 
  ct1000 = (unsigned short)0U;
  
#line 1965 
  adv = (unsigned short)1U;
  
#line 1967 
  if ((unsigned int)skge->autoneg == 1U) {
    
#line 1968 
    if ((unsigned int)hw->copper != 0U) {
      
#line 1969 
      if ((skge->advertising & 32U) != 0U) 
#line 1970 
                                           ct1000 = (unsigned short)((unsigned int)ct1000 | 512U); else ;
      
#line 1971 
      if ((skge->advertising & 16U) != 0U) 
#line 1972 
                                           ct1000 = (unsigned short)((unsigned int)ct1000 | 256U); else ;
      
#line 1973 
      if ((skge->advertising & 8U) != 0U) 
#line 1974 
                                          adv = (unsigned short)((unsigned int)adv | 256U); else ;
      
#line 1975 
      if ((skge->advertising & 4U) != 0U) 
#line 1976 
                                          adv = (unsigned short)((unsigned int)adv | 128U); else ;
      
#line 1977 
      if ((skge->advertising & 2U) != 0U) 
#line 1978 
                                          adv = (unsigned short)((unsigned int)adv | 64U); else ;
      
#line 1979 
      if ((skge->advertising & 1U) != 0U) 
#line 1980 
                                          adv = (unsigned short)((unsigned int)adv | 32U); else ;
      
#line 1983 
      adv = (unsigned short)((int)phy_pause_map[(unsigned int)skge->flow_control] | (int)adv);
    }
    else {
      
#line 1985 
      if ((skge->advertising & 32U) != 0U) 
#line 1986 
                                           adv = (unsigned short)((unsigned int)adv | 32U); else ;
      
#line 1987 
      if ((skge->advertising & 16U) != 0U) 
#line 1988 
                                           adv = (unsigned short)((unsigned int)adv | 64U); else ;
      
#line 1990 
      adv = (unsigned short)((int)fiber_pause_map[(unsigned int)skge->flow_control] | (int)adv);
    }
    
#line 1994 
    ctrl = (unsigned short)((unsigned int)ctrl | 4608U);
  }
  else {
    
#line 1997 
    ct1000 = (unsigned short)4096U;
    
#line 1999 
    if ((unsigned int)skge->duplex == 1U) 
#line 2000 
                                          ctrl = (unsigned short)((unsigned int)ctrl | 256U); else ;
    
#line 2002 
    switch ((int)skge->speed) {
      case 1000: 
#line 2003 
      ;
      
#line 2004 
      ctrl = (unsigned short)((unsigned int)ctrl | 64U);
      
#line 2005 
      goto ldv_49611;
      case 100: 
#line 2006 
      ;
      
#line 2007 
      ctrl = (unsigned short)((unsigned int)ctrl | 8192U);
      
#line 2008 
      goto ldv_49611;
    }
    ldv_49611: 
#line 2011 
    ;
    
#line 2011 
    ctrl = (unsigned short)((unsigned int)ctrl | 32768U);
  }
  
#line 2014 
  gm_phy_write(hw,port,(unsigned short)9,(unsigned short)((int)ct1000));
  
#line 2016 
  gm_phy_write(hw,port,(unsigned short)4,(unsigned short)((int)adv));
  
#line 2017 
  gm_phy_write(hw,port,(unsigned short)0,(unsigned short)((int)ctrl));
  
#line 2020 
  if ((unsigned int)skge->autoneg == 1U) 
#line 2021 
                                         gm_phy_write(hw,port,(unsigned short)18,(unsigned short)34816); else 
                                                                    
#line 2023 
                                                                    gm_phy_write(hw,port,(unsigned short)18,(unsigned short)50304);
  
#line 2024 
  return;
}


#line 2026  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_reset(struct skge_hw *hw, int port)
{
  u16 tmp;
  
#line 2028 
  gm_phy_write(hw,port,(unsigned short)18,(unsigned short)0);
  
#line 2029 
  gma_write16((struct skge_hw const *)hw,port,52,(unsigned short)0);
  
#line 2030 
  gma_write16((struct skge_hw const *)hw,port,56,(unsigned short)0);
  
#line 2031 
  gma_write16((struct skge_hw const *)hw,port,60,(unsigned short)0);
  
#line 2032 
  gma_write16((struct skge_hw const *)hw,port,64,(unsigned short)0);
  
#line 2035 
  tmp = gma_read16((struct skge_hw const *)hw,port,12);
  
#line 2034 
  ;
  
#line 2034 
  ;
  
#line 2034 
  gma_write16((struct skge_hw const *)hw,port,12,(unsigned short)((int)((unsigned int)tmp | 49152U)));
  
#line 2036 
  return;
}


#line 2040  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int is_yukon_lite_a0(struct skge_hw *hw)
{
  int __retres;
  u32 reg;
  int ret;
  u8 tmp;
  
#line 2045 
  if ((unsigned int)hw->chip_id != 176U) {
    
#line 2046 
    __retres = 0;
    
#line 2046 
    goto return_label;
  }
  else ;
  
#line 2048 
  reg = skge_read32((struct skge_hw const *)hw,288);
  
#line 2049 
  skge_write8((struct skge_hw const *)hw,291,(unsigned char)255);
  
#line 2050 
  tmp = skge_read8((struct skge_hw const *)hw,291);
  
#line 2050 
  ret = (unsigned int)tmp != 0U;
  
#line 2051 
  skge_write32((struct skge_hw const *)hw,288,reg);
  
#line 2052 
  __retres = ret;
  return_label: 
#line 2052 
                return __retres;
}


#line 2055  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_mac_init(struct skge_hw *hw, int port)
{
  int i;
  u32 reg;
  int tmp_0;
  u16 tmp_2;
  int tmp_3;
  
#line 2057 
  struct skge_port *skge = netdev_priv((struct net_device const *)hw->dev[port]);
  
#line 2060 
  u8 const *addr = (u8 const *)(hw->dev[port])->dev_addr;
  
#line 2063 
  if ((unsigned int)hw->chip_id == 177U && (unsigned int)hw->chip_rev > 6U) {
    
#line 2065 
    reg = skge_read32((struct skge_hw const *)hw,348);
    
#line 2066 
    reg |= 33554944U;
    
#line 2067 
    skge_write32((struct skge_hw const *)hw,348,reg);
  }
  else ;
  
#line 2071 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 3844,1U);
  
#line 2072 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 3840,1U);
  
#line 2075 
  if ((unsigned int)hw->chip_id == 177U && (unsigned int)hw->chip_rev > 6U) {
    
#line 2077 
    reg = skge_read32((struct skge_hw const *)hw,348);
    
#line 2078 
    reg |= 33554432U;
    
#line 2079 
    reg &= 4294966783U;
    
#line 2080 
    skge_write32((struct skge_hw const *)hw,348,reg);
  }
  else ;
  
#line 2084 
  reg = 185458688U;
  
#line 2086 
  if ((unsigned int)hw->copper != 0U) 
#line 2086 
                                      tmp_0 = 15728640; else 
#line 2086 
                                                             tmp_0 = 7340032;
  
#line 2086 
  reg = (unsigned int)tmp_0 | reg;
  
#line 2089 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 3844,reg | 1U);
  
#line 2090 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 3844,reg | 2U);
  
#line 2091 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 3840,10U);
  
#line 2093 
  if ((unsigned int)skge->autoneg == 0U) {
    u16 tmp_1;
    
#line 2094 
    reg = 7U;
    
#line 2096 
    tmp_1 = gma_read16((struct skge_hw const *)hw,port,4);
    
#line 2095 
    ;
    
#line 2095 
    ;
    
#line 2095 
    ;
    
#line 2095 
    gma_write16((struct skge_hw const *)hw,port,4,(unsigned short)((int)tmp_1 | (int)((unsigned short)reg)));
    
#line 2098 
    switch ((int)skge->speed) {
      case 1000: 
#line 2099 
      ;
      
#line 2100 
      reg &= 4294967287U;
      
#line 2101 
      reg |= 136U;
      
#line 2102 
      goto ldv_49631;
      case 100: 
#line 2103 
      ;
      
#line 2104 
      reg &= 4294967159U;
      
#line 2105 
      reg |= 8U;
      
#line 2106 
      goto ldv_49631;
      case 10: 
#line 2107 
      ;
      
#line 2108 
      reg &= 4294967159U;
      
#line 2109 
      goto ldv_49631;
    }
    ldv_49631: 
#line 2112 
    ;
    
#line 2112 
    if ((unsigned int)skge->duplex == 1U) 
#line 2113 
                                          reg |= 32U; else ;
  }
  else 
#line 2115 
       reg = 168U;
  
#line 2117 
  switch ((unsigned int)skge->flow_control) {
    case (unsigned int)1: 
#line 2118 
    ;
    
#line 2119 
    skge_write32((struct skge_hw const *)hw,(port << 7) + 3840,4U);
    
#line 2120 
    reg |= 8210U;
    
#line 2121 
    goto ldv_49635;
    case (unsigned int)2: 
#line 2122 
    ;
    
#line 2124 
    reg |= 18U;
    
#line 2125 
    goto ldv_49635;
    case (unsigned int)3: 
#line 2126 
    ;
    case (unsigned int)4: 
#line 2127 
    ;
    
#line 2129 
    goto ldv_49635;
  }
  ldv_49635: 
#line 2132 
  ;
  
#line 2132 
  gma_write16((struct skge_hw const *)hw,port,4,(unsigned short)((int)((unsigned short)reg)));
  
#line 2133 
  skge_read16((struct skge_hw const *)hw,(port << 7) + 3848);
  
#line 2135 
  yukon_init(hw,port);
  
#line 2138 
  tmp_2 = gma_read16((struct skge_hw const *)hw,port,136);
  
#line 2138 
  reg = (unsigned int)tmp_2;
  
#line 2139 
  gma_write16((struct skge_hw const *)hw,port,136,(unsigned short)((int)((unsigned int)((unsigned short)reg) | 32U)));
  
#line 2141 
  i = 0;
  
#line 2141 
  goto ldv_49640;
  ldv_49639: 
#line 2142 
  ;
  
#line 2142 
  gma_read16((struct skge_hw const *)hw,port,(i + 32) * 8);
  
#line 2141 
  i += 1;
  ldv_49640: 
#line 2142 
  ;
  
#line 2141 
  if (i <= 43) 
#line 2143 
               goto ldv_49639; else 
#line 2146 
                                    goto ldv_49641;
  ldv_49641: 
#line 2147 
  ;
  
#line 2143 
  gma_write16((struct skge_hw const *)hw,port,136,(unsigned short)((int)((unsigned short)reg)));
  
#line 2146 
  gma_write16((struct skge_hw const *)hw,port,8,(unsigned short)4096);
  
#line 2149 
  gma_write16((struct skge_hw const *)hw,port,12,(unsigned short)57344);
  
#line 2153 
  gma_write16((struct skge_hw const *)hw,port,16,(unsigned short)65535);
  
#line 2156 
  gma_write16((struct skge_hw const *)hw,port,20,(unsigned short)55232);
  
#line 2162 
  reg = 8734U;
  
#line 2166 
  if ((hw->dev[port])->mtu > 1500U) 
#line 2167 
                                    reg |= 256U; else ;
  
#line 2169 
  gma_write16((struct skge_hw const *)hw,port,24,(unsigned short)((int)((unsigned short)reg)));
  
#line 2172 
  gma_set_addr(hw,port,28,addr);
  
#line 2174 
  gma_set_addr(hw,port,40,addr);
  
#line 2177 
  gma_write16((struct skge_hw const *)hw,port,80,(unsigned short)0);
  
#line 2178 
  gma_write16((struct skge_hw const *)hw,port,84,(unsigned short)0);
  
#line 2179 
  gma_write16((struct skge_hw const *)hw,port,88,(unsigned short)0);
  
#line 2184 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3148,(unsigned short)6243);
  
#line 2185 
  reg = 136U;
  
#line 2188 
  tmp_3 = is_yukon_lite_a0(hw);
  
#line 2188 
  if (tmp_3 != 0) 
#line 2189 
                  reg &= 4294967167U; else ;
  
#line 2191 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3144,(unsigned char)2);
  
#line 2192 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3144,(unsigned short)((int)((unsigned short)reg)));
  
#line 2198 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3152,(unsigned short)11);
  
#line 2201 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3400,(unsigned char)2);
  
#line 2202 
  skge_write16((struct skge_hw const *)hw,(port << 7) + 3400,(unsigned short)8);
  
#line 2203 
  return;
}


#line 2206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_suspend(struct skge_hw *hw, int port)
{
  u16 ctrl;
  
#line 2210 
  ctrl = gm_phy_read(hw,port,(unsigned short)16);
  
#line 2211 
  ctrl = (unsigned short)((unsigned int)ctrl | 2U);
  
#line 2212 
  gm_phy_write(hw,port,(unsigned short)16,(unsigned short)((int)ctrl));
  
#line 2214 
  ctrl = gm_phy_read(hw,port,(unsigned short)0);
  
#line 2215 
  ctrl = (unsigned short)((unsigned int)ctrl | 32768U);
  
#line 2216 
  gm_phy_write(hw,port,(unsigned short)0,(unsigned short)((int)ctrl));
  
#line 2219 
  ctrl = gm_phy_read(hw,port,(unsigned short)0);
  
#line 2220 
  ctrl = (unsigned short)((unsigned int)ctrl | 2048U);
  
#line 2221 
  gm_phy_write(hw,port,(unsigned short)0,(unsigned short)((int)ctrl));
  
#line 2222 
  return;
}


#line 2224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_stop(struct skge_port *skge)
{
  u16 tmp;
  
#line 2226 
  struct skge_hw *hw = skge->hw;
  
#line 2227 
  int port = skge->port;
  
#line 2229 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3852,(unsigned char)0);
  
#line 2230 
  yukon_reset(hw,port);
  
#line 2234 
  tmp = gma_read16((struct skge_hw const *)hw,port,4);
  
#line 2232 
  ;
  
#line 2232 
  ;
  
#line 2232 
  gma_write16((struct skge_hw const *)hw,port,4,(unsigned short)((int)tmp & 59391));
  
#line 2235 
  gma_read16((struct skge_hw const *)hw,port,4);
  
#line 2237 
  yukon_suspend(hw,port);
  
#line 2240 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3844,(unsigned char)1);
  
#line 2241 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3840,(unsigned char)1);
  
#line 2242 
  return;
}


#line 2244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_get_stats(struct skge_port *skge, u64 *data)
{
  int i;
  u32 tmp;
  u32 tmp_0;
  u32 tmp_1;
  u32 tmp_2;
  u32 tmp_3;
  
#line 2246 
  struct skge_hw *hw = skge->hw;
  
#line 2247 
  int port = skge->port;
  
#line 2250 
  tmp = gma_read32((struct skge_hw const *)hw,port,488);
  
#line 2251 
  tmp_0 = gma_read32((struct skge_hw const *)hw,port,480);
  
#line 2250 
  *data = ((unsigned long long)tmp << 32) | (unsigned long long)tmp_0;
  
#line 2252 
  tmp_1 = gma_read32((struct skge_hw const *)hw,port,312);
  
#line 2253 
  tmp_2 = gma_read32((struct skge_hw const *)hw,port,304);
  
#line 2252 
  *(data + 1U) = ((unsigned long long)tmp_1 << 32) | (unsigned long long)tmp_2;
  
#line 2255 
  i = 2;
  
#line 2255 
  goto ldv_49663;
  ldv_49662: 
#line 2256 
  ;
  
#line 2256 
  tmp_3 = gma_read32((struct skge_hw const *)hw,port,(int)skge_stats[i].gma_offset);
  
#line 2256 
  *(data + i) = (unsigned long long)tmp_3;
  
#line 2255 
  i += 1;
  ldv_49663: 
#line 2256 
  ;
  
#line 2255 
  if ((unsigned int)i <= 20U) 
#line 2257 
                              goto ldv_49662; else 
#line 2260 
                                                   goto ldv_49664;
  ldv_49664: 
#line 2261 
  ;
  
#line 2262 
  return;
}


#line 2260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_mac_intr(struct skge_hw *hw, int port)
{
  
#line 2262 
  struct net_device *dev = hw->dev[port];
  
#line 2263 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 2264 
  u8 status = skge_read8((struct skge_hw const *)hw,(port << 7) + 3848);
  
#line 2266 
  if ((skge->msg_enable & 512U) != 0U) 
#line 2266 
                                       netdev_printk("\001",(struct net_device const *)skge->netdev,"mac interrupt status 0x%x\n",(int)status); else ;
  
#line 2269 
  if (((int)status & 2) != 0) {
    
#line 2270 
    dev->stats.rx_fifo_errors += 1UL;
    
#line 2271 
    skge_write8((struct skge_hw const *)hw,(port << 7) + 3144,(unsigned char)32);
  }
  else ;
  
#line 2274 
  if (((int)status & 8) != 0) {
    
#line 2275 
    dev->stats.tx_fifo_errors += 1UL;
    
#line 2276 
    skge_write8((struct skge_hw const *)hw,(port << 7) + 3400,(unsigned char)64);
  }
  else ;
  
#line 2278 
  return;
}


#line 2281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u16 yukon_speed(struct skge_hw const *hw, u16 aux)
{
  u16 __retres;
  
#line 2283 
  switch ((int)aux & 49152) {
    case 32768: 
#line 2284 
    ;
    
#line 2285 
    __retres = (unsigned short)1000U;
    
#line 2285 
    goto return_label;
    case 16384: 
#line 2286 
    ;
    
#line 2287 
    __retres = (unsigned short)100U;
    
#line 2287 
    goto return_label;
    default: 
#line 2288 
    ;
    
#line 2289 
    __retres = (unsigned short)10U;
    
#line 2289 
    goto return_label;
  }
  return_label: 
#line 2283 
                return __retres;
}


#line 2293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_link_up(struct skge_port *skge)
{
  u16 reg;
  
#line 2295 
  struct skge_hw *hw = skge->hw;
  
#line 2296 
  int port = skge->port;
  
#line 2300 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 3852,(unsigned char)10);
  
#line 2302 
  reg = gma_read16((struct skge_hw const *)hw,port,4);
  
#line 2303 
  if ((unsigned int)skge->duplex == 1U || (unsigned int)skge->autoneg == 1U) 
    
#line 2304 
    reg = (unsigned short)((unsigned int)reg | 32U); else ;
  
#line 2307 
  reg = (unsigned short)((unsigned int)reg | 6144U);
  
#line 2308 
  gma_write16((struct skge_hw const *)hw,port,4,(unsigned short)((int)reg));
  
#line 2310 
  gm_phy_write(hw,port,(unsigned short)18,(unsigned short)50304);
  
#line 2311 
  skge_link_up(skge);
  
#line 2312 
  return;
}


#line 2314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_link_down(struct skge_port *skge)
{
  u16 ctrl;
  
#line 2316 
  struct skge_hw *hw = skge->hw;
  
#line 2317 
  int port = skge->port;
  
#line 2320 
  ctrl = gma_read16((struct skge_hw const *)hw,port,4);
  
#line 2321 
  ctrl = (unsigned short)((unsigned int)ctrl & 59391U);
  
#line 2322 
  gma_write16((struct skge_hw const *)hw,port,4,(unsigned short)((int)ctrl));
  
#line 2324 
  if (skge->flow_status == (unsigned int)FLOW_STAT_REM_SEND) {
    
#line 2325 
    ctrl = gm_phy_read(hw,port,(unsigned short)4);
    
#line 2326 
    ctrl = (unsigned short)((unsigned int)ctrl | 2048U);
    
#line 2328 
    gm_phy_write(hw,port,(unsigned short)4,(unsigned short)((int)ctrl));
  }
  else ;
  
#line 2331 
  skge_link_down(skge);
  
#line 2333 
  yukon_init(hw,port);
  
#line 2334 
  return;
}


#line 2336  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_phy_intr(struct skge_port *skge)
{
  u16 istatus;
  u16 phystat;
  
#line 2338 
  struct skge_hw *hw = skge->hw;
  
#line 2339 
  int port = skge->port;
  
#line 2340 
  char const *reason = (char const *)0;
  
#line 2343 
  istatus = gm_phy_read(hw,port,(unsigned short)19);
  
#line 2344 
  phystat = gm_phy_read(hw,port,(unsigned short)17);
  
#line 2346 
  if ((skge->msg_enable & 512U) != 0U) 
#line 2346 
                                       netdev_printk("\001",(struct net_device const *)skge->netdev,"phy interrupt status 0x%x 0x%x\n",(int)istatus,(int)phystat); else ;
  
#line 2349 
  if (((int)istatus & 2048) != 0) {
    u16 tmp;
    u16 tmp_0;
    
#line 2350 
    tmp = gm_phy_read(hw,port,(unsigned short)5);
    
#line 2350 
    if (((int)tmp & 8192) != 0) {
      
#line 2352 
      reason = "remote fault";
      
#line 2353 
      goto failed;
    }
    else ;
    
#line 2356 
    tmp_0 = gm_phy_read(hw,port,(unsigned short)10);
    
#line 2356 
    if ((int)tmp_0 < 0) {
      
#line 2357 
      reason = "master/slave fault";
      
#line 2358 
      goto failed;
    }
    else ;
    
#line 2361 
    if (((int)phystat & 2048) == 0) {
      
#line 2362 
      reason = "speed/duplex";
      
#line 2363 
      goto failed;
    }
    else ;
    
#line 2366 
    skge->duplex = (unsigned char)((unsigned int)((unsigned char)((int)phystat >> 13)) & 1U);
    
#line 2368 
    skge->speed = yukon_speed((struct skge_hw const *)hw,(unsigned short)((int)phystat));
    
#line 2371 
    switch ((int)phystat & 12) {
      case 12: 
#line 2372 
      ;
      
#line 2373 
      skge->flow_status = FLOW_STAT_SYMMETRIC;
      
#line 2374 
      goto ldv_49701;
      case 4: 
#line 2375 
      ;
      
#line 2376 
      skge->flow_status = FLOW_STAT_REM_SEND;
      
#line 2377 
      goto ldv_49701;
      case 8: 
#line 2378 
      ;
      
#line 2379 
      skge->flow_status = FLOW_STAT_LOC_SEND;
      
#line 2380 
      goto ldv_49701;
      default: 
#line 2381 
      ;
      
#line 2382 
      skge->flow_status = FLOW_STAT_NONE;
    }
    ldv_49701: 
#line 2385 
    ;
    
#line 2385 
    if (skge->flow_status == (unsigned int)FLOW_STAT_NONE || ((unsigned int)skge->speed <= 999U && (unsigned int)skge->duplex == 0U)) 
      
#line 2387 
      skge_write8((struct skge_hw const *)hw,(port << 7) + 3840,(unsigned char)4); else 
                                                                    
#line 2389 
                                                                    skge_write8((struct skge_hw const *)hw,(port << 7) + 3840,(unsigned char)8);
    
#line 2390 
    yukon_link_up(skge);
    
#line 2391 
    goto return_label;
  }
  else ;
  
#line 2394 
  if (((int)istatus & 16384) != 0) 
#line 2395 
                                   skge->speed = yukon_speed((struct skge_hw const *)hw,(unsigned short)((int)phystat)); else ;
  
#line 2397 
  if (((int)istatus & 8192) != 0) 
#line 2398 
                                  skge->duplex = (unsigned char)((unsigned int)((unsigned char)((int)phystat >> 13)) & 1U); else ;
  
#line 2399 
  if (((int)istatus & 1024) != 0) 
    
#line 2400 
    if (((int)phystat & 1024) != 0) 
#line 2401 
                                    yukon_link_up(skge); else 
#line 2403 
                                                              yukon_link_down(skge);
  else ;
  
#line 2405 
  goto return_label;
  failed: 
#line 2406 
  ;
  
#line 2407 
  printk("\001",(char *)(& (skge->netdev)->name),reason);
  return_label: 
#line 2408 
                return;
}


#line 2412  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_phy_reset(struct skge_port *skge)
{
  bool tmp;
  
#line 2414 
  struct skge_hw *hw = skge->hw;
  
#line 2415 
  int port = skge->port;
  
#line 2416 
  struct net_device *dev = hw->dev[port];
  
#line 2418 
  netif_stop_queue(skge->netdev);
  
#line 2419 
  netif_carrier_off(skge->netdev);
  
#line 2421 
  ldv_spin_lock_bh_79(& hw->phy_lock);
  
#line 2422 
  tmp = is_genesis((struct skge_hw const *)hw);
  
#line 2422 
  if ((int)tmp != 0) {
    
#line 2423 
    genesis_reset(hw,port);
    
#line 2424 
    genesis_mac_init(hw,port);
  }
  else {
    
#line 2426 
    yukon_reset(hw,port);
    
#line 2427 
    yukon_init(hw,port);
  }
  
#line 2429 
  ldv_spin_unlock_bh_80(& hw->phy_lock);
  
#line 2431 
  skge_set_multicast(dev);
  
#line 2432 
  return;
}


#line 2435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  int __retres;
  int tmp_2;
  bool tmp_1;
  
#line 2437 
  struct mii_ioctl_data *data = if_mii(ifr);
  
#line 2438 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 2439 
  struct skge_hw *hw = skge->hw;
  
#line 2440 
  int err = -95;
  
#line 2442 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 2442 
  if (tmp_1) 
#line 2442 
             tmp_2 = 0; else 
#line 2442 
                             tmp_2 = 1;
  
#line 2442 
  if (tmp_2) {
    
#line 2443 
    __retres = -19;
    
#line 2443 
    goto return_label;
  }
  else ;
  
#line 2445 
  switch (cmd) {
    bool tmp_4;
    case 35143: 
#line 2446 
    ;
    
#line 2447 
    data->phy_id = hw->phy_addr;
    case 35144: 
#line 2450 
    ;
    {
      bool tmp_3;
      
#line 2451 
      u16 val = (unsigned short)0U;
      
#line 2452 
      ldv_spin_lock_bh_81(& hw->phy_lock);
      
#line 2454 
      tmp_3 = is_genesis((struct skge_hw const *)hw);
      
#line 2454 
      if ((int)tmp_3 != 0) 
#line 2455 
                           err = __xm_phy_read(hw,skge->port,(unsigned short)((int)data->reg_num & 31),& val); else 
                                                                    
#line 2457 
                                                                    err = __gm_phy_read(hw,skge->port,(unsigned short)((int)data->reg_num & 31),& val);
      
#line 2458 
      ldv_spin_unlock_bh_82(& hw->phy_lock);
      
#line 2459 
      data->val_out = val;
      
#line 2460 
      goto ldv_49723;
    }
    case 35145: 
#line 2463 
    ;
    
#line 2464 
    ldv_spin_lock_bh_83(& hw->phy_lock);
    
#line 2465 
    tmp_4 = is_genesis((struct skge_hw const *)hw);
    
#line 2465 
    if ((int)tmp_4 != 0) 
#line 2466 
                         err = xm_phy_write(hw,skge->port,(unsigned short)((int)data->reg_num & 31),(unsigned short)((int)data->val_in)); else 
                                                                    
#line 2469 
                                                                    err = gm_phy_write(hw,skge->port,(unsigned short)((int)data->reg_num & 31),(unsigned short)((int)data->val_in));
    
#line 2471 
    ldv_spin_unlock_bh_84(& hw->phy_lock);
    
#line 2472 
    goto ldv_49723;
  }
  ldv_49723: 
#line 2474 
  ;
  
#line 2474 
  __retres = err;
  return_label: 
#line 2474 
                return __retres;
}


#line 2477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_ramset(struct skge_hw *hw, u16 q, u32 start, size_t len)
{
  u32 end;
  
#line 2481 
  start /= 8U;
  
#line 2482 
  len /= 8UL;
  
#line 2483 
  end = ((unsigned int)len + start) + 4294967295U;
  
#line 2485 
  skge_write8((struct skge_hw const *)hw,(int)q + 2088,(unsigned char)2);
  
#line 2486 
  skge_write32((struct skge_hw const *)hw,(int)q + 2048,start);
  
#line 2487 
  skge_write32((struct skge_hw const *)hw,(int)q + 2056,start);
  
#line 2488 
  skge_write32((struct skge_hw const *)hw,(int)q + 2060,start);
  
#line 2489 
  skge_write32((struct skge_hw const *)hw,(int)q + 2052,end);
  
#line 2491 
  if ((unsigned int)q == 0U || (unsigned int)q == 128U) {
    
#line 2493 
    skge_write32((struct skge_hw const *)hw,(int)q + 2064,(unsigned int)((len * 2UL) / 3UL) + start);
    
#line 2495 
    skge_write32((struct skge_hw const *)hw,(int)q + 2068,(unsigned int)(len / 3UL) + start);
  }
  else 
#line 2501 
       skge_write8((struct skge_hw const *)hw,(int)q + 2088,(unsigned char)32);
  
#line 2504 
  skge_write8((struct skge_hw const *)hw,(int)q + 2088,(unsigned char)8);
  
#line 2505 
  return;
}


#line 2508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_qset(struct skge_port *skge, u16 q, struct skge_element const *e)
{
  u16 tmp;
  
#line 2511 
  struct skge_hw *hw = skge->hw;
  
#line 2512 
  u32 watermark = 1536U;
  
#line 2513 
  u64 base = skge->dma + (unsigned long long)((long)e->desc - (long)skge->mem);
  
#line 2516 
  tmp = skge_read16((struct skge_hw const *)hw,4);
  
#line 2516 
  if (((int)tmp & 768) == 0) 
#line 2517 
                             watermark /= 2U; else ;
  
#line 2519 
  skge_write32((struct skge_hw const *)hw,(int)q + 1076,2796032U);
  
#line 2520 
  skge_write32((struct skge_hw const *)hw,(int)q + 1080,watermark);
  
#line 2521 
  skge_write32((struct skge_hw const *)hw,(int)q + 1060,(unsigned int)(base >> 32));
  
#line 2522 
  skge_write32((struct skge_hw const *)hw,(int)q + 1056,(unsigned int)base);
  
#line 2523 
  return;
}


#line 2525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_up(struct net_device *dev)
{
  int __retres;
  u32 chunk;
  u32 ram_addr;
  size_t rx_size;
  size_t tx_size;
  int err;
  int tmp_1;
  bool tmp_0;
  bool tmp_2;
  
#line 2527 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 2528 
  struct skge_hw *hw = skge->hw;
  
#line 2529 
  int port = skge->port;
  
#line 2534 
  tmp_0 = is_valid_ether_addr((u8 const *)dev->dev_addr);
  
#line 2534 
  if (tmp_0) 
#line 2534 
             tmp_1 = 0; else 
#line 2534 
                             tmp_1 = 1;
  
#line 2534 
  if (tmp_1) {
    
#line 2535 
    __retres = -22;
    
#line 2535 
    goto return_label;
  }
  else ;
  
#line 2537 
  if ((skge->msg_enable & 32U) != 0U) 
#line 2537 
                                      netdev_info((struct net_device const *)skge->netdev,"enabling interface\n"); else ;
  
#line 2539 
  if (dev->mtu > 1536U) 
#line 2540 
                        skge->rx_buf_size = dev->mtu + 14U; else 
#line 2542 
                                                                 skge->rx_buf_size = 1536U;
  
#line 2545 
  rx_size = skge->rx_ring.count * 32UL;
  
#line 2546 
  tx_size = skge->tx_ring.count * 32UL;
  
#line 2547 
  skge->mem_size = tx_size + rx_size;
  
#line 2548 
  skge->mem = pci_alloc_consistent(hw->pdev,skge->mem_size,& skge->dma);
  
#line 2549 
  if (skge->mem == (void *)0) {
    
#line 2550 
    __retres = -12;
    
#line 2550 
    goto return_label;
  }
  else ;
  
#line 2552 
  if ((long)((skge->dma & 7ULL) != 0ULL) != 0L) {
    
#line 2554 
    ldv_inline_asm();
    
#line 2552 
    ;
  }
  else ;
  
#line 2554 
  if ((unsigned int)(skge->dma >> 32) != (unsigned int)((skge->dma + (unsigned long long)skge->mem_size) >> 32)) {
    
#line 2555 
    dev_err((struct device const *)(& (hw->pdev)->dev),"pci_alloc_consistent region crosses 4G boundary\n");
    
#line 2556 
    err = -22;
    
#line 2557 
    goto free_pci_mem;
  }
  else ;
  
#line 2560 
  memset(skge->mem,0,skge->mem_size);
  
#line 2562 
  err = skge_ring_alloc(& skge->rx_ring,skge->mem,(unsigned int)skge->dma);
  
#line 2563 
  if (err != 0) 
#line 2564 
                goto free_pci_mem; else ;
  
#line 2566 
  err = skge_rx_fill(dev);
  
#line 2567 
  if (err != 0) 
#line 2568 
                goto free_rx_ring; else ;
  
#line 2570 
  err = skge_ring_alloc(& skge->tx_ring,skge->mem + rx_size,(unsigned int)skge->dma + (unsigned int)rx_size);
  
#line 2572 
  if (err != 0) 
#line 2573 
                goto free_rx_ring; else ;
  
#line 2575 
  if ((unsigned int)hw->ports == 1U) {
    
#line 2576 
    err = ldv_request_irq_85((hw->pdev)->irq,& skge_intr,128UL,(char const *)(& dev->name),(void *)hw);
    
#line 2578 
    if (err != 0) {
      
#line 2579 
      netdev_err((struct net_device const *)dev,"Unable to allocate interrupt %d error: %d\n",(hw->pdev)->irq,err);
      
#line 2581 
      goto free_tx_ring;
    }
    else ;
  }
  else ;
  
#line 2586 
  netif_carrier_off(dev);
  
#line 2587 
  ldv_spin_lock_bh_86(& hw->phy_lock);
  
#line 2588 
  tmp_2 = is_genesis((struct skge_hw const *)hw);
  
#line 2588 
  if ((int)tmp_2 != 0) 
#line 2589 
                       genesis_mac_init(hw,port); else 
#line 2591 
                                                       yukon_mac_init(hw,port);
  
#line 2592 
  ldv_spin_unlock_bh_87(& hw->phy_lock);
  
#line 2595 
  chunk = (hw->ram_size - hw->ram_offset) / (unsigned int)((int)hw->ports * 2);
  
#line 2596 
  ram_addr = hw->ram_offset + (chunk * (unsigned int)port) * 2U;
  
#line 2598 
  skge_ramset(hw,(unsigned short)((int)((unsigned short)rxqaddr[port])),ram_addr,(unsigned long)chunk);
  
#line 2599 
  skge_qset(skge,(unsigned short)((int)((unsigned short)rxqaddr[port])),(struct skge_element const *)skge->rx_ring.to_clean);
  
#line 2601 
  if ((long)(skge->tx_ring.to_use != skge->tx_ring.to_clean) != 0L) {
    
#line 2603 
    ldv_inline_asm();
    
#line 2601 
    ;
  }
  else ;
  
#line 2602 
  skge_ramset(hw,(unsigned short)((int)((unsigned short)txqaddr[port])),ram_addr + chunk,(unsigned long)chunk);
  
#line 2603 
  skge_qset(skge,(unsigned short)((int)((unsigned short)txqaddr[port])),(struct skge_element const *)skge->tx_ring.to_use);
  
#line 2604 
  ldv_inline_asm();
  
#line 2607 
  skge_write8((struct skge_hw const *)hw,rxqaddr[port] + 1076,(unsigned char)18);
  
#line 2608 
  skge_led(skge,(enum led_mode)LED_MODE_ON);
  
#line 2610 
  ldv_spin_lock_irq_88(& hw->hw_lock);
  
#line 2611 
  hw->intr_mask |= portmask[port];
  
#line 2612 
  skge_write32((struct skge_hw const *)hw,12,hw->intr_mask);
  
#line 2613 
  skge_read32((struct skge_hw const *)hw,12);
  
#line 2614 
  ldv_spin_unlock_irq_89(& hw->hw_lock);
  
#line 2616 
  napi_enable(& skge->napi);
  
#line 2618 
  skge_set_multicast(dev);
  
#line 2620 
  __retres = 0;
  
#line 2620 
  goto return_label;
  free_tx_ring: 
#line 2622 
  ;
  
#line 2623 
  kfree((void const *)skge->tx_ring.start);
  free_rx_ring: 
#line 2624 
  ;
  
#line 2625 
  skge_rx_clean(skge);
  
#line 2626 
  kfree((void const *)skge->rx_ring.start);
  free_pci_mem: 
#line 2627 
  ;
  
#line 2628 
  pci_free_consistent(hw->pdev,skge->mem_size,skge->mem,skge->dma);
  
#line 2629 
  skge->mem = (void *)0;
  
#line 2631 
  __retres = err;
  return_label: 
#line 2631 
                return __retres;
}


#line 2635  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_rx_stop(struct skge_hw *hw, int port)
{
  int tmp;
  
#line 2637 
  skge_write8((struct skge_hw const *)hw,rxqaddr[port] + 1076,(unsigned char)32);
  
#line 2638 
  if (port != 0) 
#line 2638 
                 tmp = 2216; else 
#line 2638 
                                  tmp = 2088;
  
#line 2638 
  ;
  
#line 2638 
  skge_write32((struct skge_hw const *)hw,tmp,5U);
  
#line 2640 
  skge_write32((struct skge_hw const *)hw,rxqaddr[port] + 1076,1398016U);
  
#line 2641 
  return;
}


#line 2643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_down(struct net_device *dev)
{
  int __retres;
  bool tmp_0;
  u32 tmp_1;
  bool tmp_2;
  int tmp_3;
  bool tmp_4;
  
#line 2645 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 2646 
  struct skge_hw *hw = skge->hw;
  
#line 2647 
  int port = skge->port;
  
#line 2649 
  if (skge->mem == (void *)0) {
    
#line 2650 
    __retres = 0;
    
#line 2650 
    goto return_label;
  }
  else ;
  
#line 2652 
  if ((skge->msg_enable & 16U) != 0U) 
#line 2652 
                                      netdev_info((struct net_device const *)skge->netdev,"disabling interface\n"); else ;
  
#line 2654 
  netif_tx_disable(dev);
  
#line 2656 
  tmp_0 = is_genesis((struct skge_hw const *)hw);
  
#line 2656 
  if ((int)tmp_0 != 0) {
    
#line 2656 
    if ((unsigned int)hw->phy_type == 0U) 
#line 2657 
                                          ldv_del_timer_sync_90(& skge->link_timer); else ;
  }
  else ;
  
#line 2659 
  napi_disable(& skge->napi);
  
#line 2660 
  netif_carrier_off(dev);
  
#line 2662 
  ldv_spin_lock_irq_91(& hw->hw_lock);
  
#line 2663 
  hw->intr_mask &= ~ portmask[port];
  
#line 2664 
  if ((unsigned int)hw->ports != 1U) 
#line 2664 
                                     tmp_1 = hw->intr_mask; else 
#line 2664 
                                                                 tmp_1 = 0U;
  
#line 2664 
  ;
  
#line 2664 
  skge_write32((struct skge_hw const *)hw,12,tmp_1);
  
#line 2665 
  skge_read32((struct skge_hw const *)hw,12);
  
#line 2666 
  ldv_spin_unlock_irq_92(& hw->hw_lock);
  
#line 2668 
  if ((unsigned int)hw->ports == 1U) 
#line 2669 
                                     ldv_free_irq_93((hw->pdev)->irq,(void *)hw); else ;
  
#line 2671 
  skge_write8((struct skge_hw const *)skge->hw,(skge->port << 7) + 3132,(unsigned char)1);
  
#line 2672 
  tmp_2 = is_genesis((struct skge_hw const *)hw);
  
#line 2672 
  if ((int)tmp_2 != 0) 
#line 2673 
                       genesis_stop(skge); else 
#line 2675 
                                                yukon_stop(skge);
  
#line 2678 
  skge_write8((struct skge_hw const *)hw,txqaddr[port] + 1076,(unsigned char)32);
  
#line 2679 
  skge_write32((struct skge_hw const *)hw,txqaddr[port] + 2088,5U);
  
#line 2684 
  skge_write8((struct skge_hw const *)hw,(port << 7) + 528,(unsigned char)84);
  
#line 2688 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 512,0U);
  
#line 2689 
  skge_write32((struct skge_hw const *)hw,(port << 7) + 520,0U);
  
#line 2692 
  skge_write32((struct skge_hw const *)hw,txqaddr[port] + 1076,1398016U);
  
#line 2693 
  skge_write32((struct skge_hw const *)hw,txqaddr[port] + 2088,1U);
  
#line 2696 
  if (port == 0) 
#line 2696 
                 tmp_3 = 2728; else 
#line 2696 
                                    tmp_3 = 2984;
  
#line 2696 
  ;
  
#line 2696 
  skge_write8((struct skge_hw const *)hw,tmp_3,(unsigned char)1);
  
#line 2698 
  skge_rx_stop(hw,port);
  
#line 2700 
  tmp_4 = is_genesis((struct skge_hw const *)hw);
  
#line 2700 
  if ((int)tmp_4 != 0) {
    
#line 2701 
    skge_write8((struct skge_hw const *)hw,(port << 7) + 3356,(unsigned char)1);
    
#line 2702 
    skge_write8((struct skge_hw const *)hw,(port << 7) + 3100,(unsigned char)1);
  }
  else {
    
#line 2704 
    skge_write8((struct skge_hw const *)hw,(port << 7) + 3144,(unsigned char)1);
    
#line 2705 
    skge_write8((struct skge_hw const *)hw,(port << 7) + 3400,(unsigned char)1);
  }
  
#line 2708 
  skge_led(skge,(enum led_mode)LED_MODE_OFF);
  
#line 2710 
  netif_tx_lock_bh(dev);
  
#line 2711 
  skge_tx_clean(dev);
  
#line 2712 
  netif_tx_unlock_bh(dev);
  
#line 2714 
  skge_rx_clean(skge);
  
#line 2716 
  kfree((void const *)skge->rx_ring.start);
  
#line 2717 
  kfree((void const *)skge->tx_ring.start);
  
#line 2718 
  pci_free_consistent(hw->pdev,skge->mem_size,skge->mem,skge->dma);
  
#line 2719 
  skge->mem = (void *)0;
  
#line 2720 
  __retres = 0;
  return_label: 
#line 2720 
                return __retres;
}


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static int skge_avail(struct skge_ring const *ring)
{
  int __retres;
  unsigned long tmp;
  
#line 2725 
  ldv_inline_asm();
  
#line 2727 
  if (ring->to_clean <= ring->to_use) 
#line 2727 
                                      tmp = ring->count; else 
#line 2727 
                                                              tmp = (unsigned long)0U;
  
#line 2727 
  ;
  
#line 2727 
  __retres = (int)((tmp + (unsigned long)(((long)ring->to_clean - (long)ring->to_use) / 40L)) + (unsigned long)4294967295U);
  
#line 2727 
  return __retres;
}


#line 2730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static netdev_tx_t skge_xmit_frame(struct sk_buff *skb, struct net_device *dev)
{
  netdev_tx_t __retres;
  struct skge_element *e;
  struct skge_tx_desc *td;
  int i;
  u32 control;
  u32 len;
  dma_addr_t map;
  int tmp_0;
  int tmp_1;
  unsigned char *tmp_2;
  int tmp_3;
  unsigned char *tmp_11;
  int tmp_12;
  int tmp_13;
  int tmp_14;
  
#line 2733 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 2734 
  struct skge_hw *hw = skge->hw;
  
#line 2741 
  tmp_0 = skb_padto(skb,60U);
  
#line 2741 
  if (tmp_0 != 0) {
    
#line 2742 
    __retres = NETDEV_TX_OK;
    
#line 2742 
    goto return_label;
  }
  else ;
  
#line 2744 
  tmp_1 = skge_avail((struct skge_ring const *)(& skge->tx_ring));
  
#line 2744 
  tmp_2 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2744 
  ;
  
#line 2744 
  if ((long)(tmp_1 < (int)((struct skb_shared_info *)tmp_2)->nr_frags + 1) != 0L) {
    
#line 2745 
    __retres = NETDEV_TX_BUSY;
    
#line 2745 
    goto return_label;
  }
  else ;
  
#line 2747 
  e = skge->tx_ring.to_use;
  
#line 2748 
  td = (struct skge_tx_desc *)e->desc;
  
#line 2749 
  if ((long)(td->control < (u32)0) != 0L) {
    
#line 2751 
    ldv_inline_asm();
    
#line 2749 
    ;
  }
  else ;
  
#line 2750 
  e->skb = skb;
  
#line 2751 
  len = skb_headlen((struct sk_buff const *)skb);
  
#line 2752 
  map = pci_map_single(hw->pdev,(void *)skb->data,(unsigned long)len,1);
  
#line 2753 
  tmp_3 = pci_dma_mapping_error(hw->pdev,map);
  
#line 2753 
  if (tmp_3 != 0) 
#line 2754 
                  goto mapping_error; else ;
  
#line 2756 
  e->mapaddr = map;
  
#line 2757 
  e->maplen = len;
  
#line 2759 
  td->dma_lo = (unsigned int)map;
  
#line 2760 
  td->dma_hi = (unsigned int)(map >> 32);
  
#line 2762 
  if ((unsigned int)*((unsigned char *)skb + 145UL) == 6U) {
    struct iphdr *tmp_5;
    
#line 2763 
    int const offset = skb_checksum_start_offset((struct sk_buff const *)skb);
    
#line 2768 
    tmp_5 = ipip_hdr((struct sk_buff const *)skb);
    
#line 2768 
    ;
    
#line 2768 
    if ((unsigned int)tmp_5->protocol == 17U) 
      
#line 2768 
      if ((unsigned int)hw->chip_rev == 0U) 
        
#line 2769 
        if ((unsigned int)hw->chip_id == 176U) 
#line 2770 
                                               control = 5636096U; else 
                                                                    
#line 2772 
                                                                    control = 5701632U;
      else 
#line 2772 
           control = 5701632U;
    else 
#line 2772 
         control = 5701632U;
    
#line 2774 
    td->csum_offs = 0U;
    
#line 2775 
    td->csum_start = (unsigned short)offset;
    
#line 2776 
    td->csum_write = (unsigned short)((int)skb->__anonCompField_sk_buff_81.__anonCompField___anonunion_281_80.csum_offset + (int)((unsigned short)offset));
  }
  else 
#line 2778 
       control = 5570560U;
  
#line 2780 
  tmp_11 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2780 
  ;
  
#line 2780 
  if ((unsigned int)((struct skb_shared_info *)tmp_11)->nr_frags == 0U) 
    
#line 2781 
    control |= 671088640U;
  else {
    unsigned char *tmp_10;
    
#line 2783 
    struct skge_tx_desc *tf = td;
    
#line 2785 
    control |= 67108864U;
    
#line 2786 
    i = 0;
    
#line 2786 
    goto ldv_49785;
    ldv_49784: 
#line 2787 
    ;
    {
      unsigned char *tmp_6;
      unsigned int tmp_7;
      int tmp_8;
      unsigned int tmp_9;
      
#line 2787 
      tmp_6 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 2787 
      skb_frag_t const *frag = (skb_frag_t const *)(& ((struct skb_shared_info *)tmp_6)->frags[i]);
      
#line 2790 
      tmp_7 = skb_frag_size(frag);
      
#line 2789 
      ;
      
#line 2789 
      ;
      
#line 2789 
      map = skb_frag_dma_map(& (hw->pdev)->dev,frag,0UL,(unsigned long)tmp_7,(enum dma_data_direction)DMA_TO_DEVICE);
      
#line 2791 
      tmp_8 = dma_mapping_error(& (hw->pdev)->dev,map);
      
#line 2791 
      if (tmp_8 != 0) 
#line 2792 
                      goto mapping_unwind; else ;
      
#line 2794 
      e = e->next;
      
#line 2795 
      e->skb = skb;
      
#line 2796 
      tf = (struct skge_tx_desc *)e->desc;
      
#line 2797 
      if ((long)(tf->control < (u32)0) != 0L) {
        
#line 2799 
        ldv_inline_asm();
        
#line 2797 
        ;
      }
      else ;
      
#line 2799 
      tf->dma_lo = (unsigned int)map;
      
#line 2800 
      tf->dma_hi = (unsigned int)(map >> 32);
      
#line 2801 
      e->mapaddr = map;
      
#line 2802 
      e->maplen = skb_frag_size(frag);
      
#line 2804 
      tmp_9 = skb_frag_size(frag);
      
#line 2804 
      tf->control = (tmp_9 | control) | 2164260864U;
    }
    
#line 2786 
    i += 1;
    ldv_49785: 
#line 2787 
    ;
    
#line 2786 
    tmp_10 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2786 
    ;
    
#line 2786 
    if ((int)((struct skb_shared_info *)tmp_10)->nr_frags > i) 
#line 2788 
                                                               goto ldv_49784; else 
                                                                    
#line 2791 
                                                                    goto ldv_49786;
    ldv_49786: 
#line 2792 
    ;
    
#line 2806 
    tf->control |= 671088640U;
  }
  
#line 2808 
  ldv_inline_asm();
  
#line 2810 
  td->control = (control | len) | 3238002688U;
  
#line 2811 
  ldv_inline_asm();
  
#line 2813 
  netdev_sent_queue(dev,skb->len);
  
#line 2815 
  skge_write8((struct skge_hw const *)hw,txqaddr[skge->port] + 1076,(unsigned char)16);
  
#line 2817 
  if ((skge->msg_enable & 256U) != 0U) 
#line 2817 
                                       netdev_printk("\001",(struct net_device const *)skge->netdev,"tx queued, slot %td, len %d\n",((long)e - (long)skge->tx_ring.start) / 40L,skb->len); else ;
  
#line 2821 
  skge->tx_ring.to_use = e->next;
  
#line 2822 
  ldv_inline_asm();
  
#line 2824 
  tmp_12 = skge_avail((struct skge_ring const *)(& skge->tx_ring));
  
#line 2824 
  if ((unsigned int)tmp_12 <= 18U) {
    {
      
#line 2825 
      struct _ddebug descriptor = {.modname = "skge", .function = "skge_xmit_frame", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c", .format = "transmit queue full\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2825U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2825 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2825 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"transmit queue full\n"); else ;
    }
    
#line 2826 
    netif_stop_queue(dev);
  }
  else ;
  
#line 2829 
  __retres = NETDEV_TX_OK;
  
#line 2829 
  goto return_label;
  mapping_unwind: 
#line 2831 
  ;
  
#line 2832 
  e = skge->tx_ring.to_use;
  
#line 2833 
  pci_unmap_single(hw->pdev,e->mapaddr,(unsigned long)e->maplen,1);
  
#line 2837 
  goto ldv_49790;
  ldv_49789: 
#line 2838 
  ;
  
#line 2838 
  e = e->next;
  
#line 2839 
  pci_unmap_page(hw->pdev,e->mapaddr,(unsigned long)e->maplen,1);
  ldv_49790: 
#line 2842 
  ;
  
#line 2837 
  tmp_13 = i;
  
#line 2837 
  i -= 1;
  
#line 2837 
  ;
  
#line 2837 
  if (tmp_13 > 0) 
#line 2839 
                  goto ldv_49789; else 
#line 2842 
                                       goto ldv_49791;
  ldv_49791: 
#line 2843 
  ;
  mapping_error: 
#line 2845 
  ;
  
#line 2846 
  tmp_14 = net_ratelimit();
  
#line 2846 
  if (tmp_14 != 0) 
#line 2847 
                   dev_warn((struct device const *)(& (hw->pdev)->dev),"%s: tx mapping error\n",(char *)(& dev->name)); else ;
  
#line 2848 
  dev_kfree_skb_any(skb);
  
#line 2849 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 2849 
                return __retres;
}


#line 2854  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static void skge_tx_unmap(struct pci_dev *pdev, struct skge_element *e, u32 control)
{
  
#line 2858 
  if ((control & 1073741824U) != 0U) 
#line 2859 
                                     pci_unmap_single(pdev,e->mapaddr,(unsigned long)e->maplen,1); else 
                                                                    
#line 2863 
                                                                    pci_unmap_page(pdev,e->mapaddr,(unsigned long)e->maplen,1);
  
#line 2865 
  return;
}


#line 2869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_tx_clean(struct net_device *dev)
{
  struct skge_element *e;
  
#line 2871 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 2874 
  e = skge->tx_ring.to_clean;
  
#line 2874 
  goto ldv_49804;
  ldv_49803: 
#line 2875 
  ;
  {
    
#line 2875 
    struct skge_tx_desc *td = (struct skge_tx_desc *)e->desc;
    
#line 2877 
    skge_tx_unmap((skge->hw)->pdev,e,td->control);
    
#line 2879 
    if ((td->control & 536870912U) != 0U) 
#line 2880 
                                          consume_skb(e->skb); else ;
    
#line 2881 
    td->control = 0U;
  }
  
#line 2874 
  e = e->next;
  ldv_49804: 
#line 2875 
  ;
  
#line 2874 
  if (skge->tx_ring.to_use != e) 
#line 2876 
                                 goto ldv_49803; else 
#line 2879 
                                                      goto ldv_49805;
  ldv_49805: 
#line 2880 
  ;
  
#line 2884 
  netdev_reset_queue(dev);
  
#line 2885 
  skge->tx_ring.to_clean = e;
  
#line 2886 
  return;
}


#line 2888  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_tx_timeout(struct net_device *dev)
{
  
#line 2890 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 2892 
  if ((skge->msg_enable & 8U) != 0U) 
#line 2892 
                                     netdev_printk("\001",(struct net_device const *)skge->netdev,"tx timeout\n"); else ;
  
#line 2894 
  skge_write8((struct skge_hw const *)skge->hw,txqaddr[skge->port] + 1076,(unsigned char)32);
  
#line 2895 
  skge_tx_clean(dev);
  
#line 2896 
  netif_wake_queue(dev);
  
#line 2897 
  return;
}


#line 2899  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_change_mtu(struct net_device *dev, int new_mtu)
{
  int __retres;
  int err;
  int tmp_0;
  bool tmp;
  
#line 2903 
  if ((unsigned int)new_mtu + 4294967236U > 8940U) {
    
#line 2904 
    __retres = -22;
    
#line 2904 
    goto return_label;
  }
  else ;
  
#line 2906 
  tmp = netif_running((struct net_device const *)dev);
  
#line 2906 
  if (tmp) 
#line 2906 
           tmp_0 = 0; else 
#line 2906 
                           tmp_0 = 1;
  
#line 2906 
  if (tmp_0) {
    
#line 2907 
    dev->mtu = (unsigned int)new_mtu;
    
#line 2908 
    __retres = 0;
    
#line 2908 
    goto return_label;
  }
  else ;
  
#line 2911 
  skge_down(dev);
  
#line 2913 
  dev->mtu = (unsigned int)new_mtu;
  
#line 2915 
  err = skge_up(dev);
  
#line 2916 
  if (err != 0) 
#line 2917 
                dev_close(dev); else ;
  
#line 2919 
  __retres = err;
  return_label: 
#line 2919 
                return __retres;
}


#line 2922  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static u8 const pause_mc_addr[6U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U, (unsigned char)0U, (unsigned char)0U, (unsigned char)1U};

#line 2924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void genesis_add_filter(u8 *filter, u8 const *addr)
{
  u32 crc;
  u32 bit;
  
#line 2928 
  crc = crc32_le(4294967295U,addr,6UL);
  
#line 2929 
  bit = ~ crc & 63U;
  
#line 2930 
  *(filter + bit / 8U) = (unsigned char)((int)*(filter + bit / 8U) | (1 << (bit & 7U)));
  
#line 2931 
  return;
}


#line 2933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void genesis_set_multicast(struct net_device *dev)
{
  struct netdev_hw_addr *ha;
  u32 mode;
  u8 filter[8U];
  
#line 2935 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 2936 
  struct skge_hw *hw = skge->hw;
  
#line 2937 
  int port = skge->port;
  
#line 2942 
  mode = xm_read32((struct skge_hw const *)hw,port,292);
  
#line 2943 
  mode |= 32768U;
  
#line 2944 
  if ((dev->flags & 256U) != 0U) 
#line 2945 
                                 mode |= 8U; else 
#line 2947 
                                                  mode &= 4294967287U;
  
#line 2949 
  if ((dev->flags & 512U) != 0U) 
#line 2950 
                                 memset((void *)(& filter),255,8UL);
  else {
    struct netdev_hw_addr *tmp_0;
    struct netdev_hw_addr *tmp_1;
    
#line 2952 
    memset((void *)(& filter),0,8UL);
    
#line 2954 
    if (skge->flow_status == (unsigned int)FLOW_STAT_REM_SEND || skge->flow_status == (unsigned int)FLOW_STAT_SYMMETRIC) 
      
#line 2956 
      genesis_add_filter((u8 *)(& filter),(u8 const *)(& pause_mc_addr)); else ;
    {
      
#line 2958 
      struct list_head const *__mptr = (struct list_head const *)dev->mc.list.next;
      
#line 2958 
      tmp_0 = (struct netdev_hw_addr *)__mptr;
    }
    
#line 2958 
    ha = tmp_0;
    
#line 2958 
    goto ldv_49836;
    ldv_49835: 
#line 2959 
    ;
    
#line 2959 
    genesis_add_filter((u8 *)(& filter),(u8 const *)(& ha->addr));
    {
      
#line 2958 
      struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
      
#line 2958 
      tmp_1 = (struct netdev_hw_addr *)__mptr_0;
    }
    
#line 2958 
    ha = tmp_1;
    ldv_49836: 
#line 2960 
    ;
    
#line 2958 
    if (& ha->list != & dev->mc.list) 
#line 2960 
                                      goto ldv_49835; else 
#line 2963 
                                                           goto ldv_49837;
    ldv_49837: 
#line 2964 
    ;
  }
  
#line 2962 
  xm_write32((struct skge_hw const *)hw,port,292,mode);
  
#line 2963 
  xm_outhash((struct skge_hw const *)hw,port,272,(u8 const *)(& filter));
  
#line 2964 
  return;
}


#line 2966  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_add_filter(u8 *filter, u8 const *addr)
{
  u32 tmp_3;
  {
    u32 tmp_2;
    
#line 2968 
    u32 __x = crc32_le(4294967295U,addr,6UL);
    
#line 2968 
    if (0 != 0) {
      u32 tmp_0;
      {
        
#line 2968 
        u32 __x_0 = __x_0;
        
#line 2968 
        __x_0 = (__x_0 << 16) | (__x_0 >> ((unsigned long)8 * sizeof(__x_0) - (unsigned long)16));
        
#line 2968 
        __x_0 = ((__x_0 >> 8) & 16711935U) | ((__x_0 << 8) & 4278255360U);
        
#line 2968 
        __x_0 = ((__x_0 >> 4) & 252645135U) | ((__x_0 << 4) & 4042322160U);
        
#line 2968 
        __x_0 = ((__x_0 >> 2) & 858993459U) | ((__x_0 << 2) & 3435973836U);
        
#line 2968 
        __x_0 = ((__x_0 >> 1) & 1431655765U) | ((__x_0 << 1) & 2863311530U);
        
#line 2968 
        tmp_0 = __x_0;
      }
      
#line 2968 
      tmp_2 = tmp_0;
    }
    else 
#line 2968 
         tmp_2 = __bitrev32(__x);
    
#line 2968 
    tmp_3 = tmp_2;
  }
  
#line 2968 
  u32 bit = tmp_3 & 63U;
  
#line 2969 
  *(filter + bit / 8U) = (unsigned char)((int)*(filter + bit / 8U) | (1 << (bit & 7U)));
  
#line 2970 
  return;
}


#line 2972  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void yukon_set_multicast(struct net_device *dev)
{
  struct netdev_hw_addr *ha;
  u16 reg;
  u8 filter[8U];
  
#line 2974 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 2975 
  struct skge_hw *hw = skge->hw;
  
#line 2976 
  int port = skge->port;
  
#line 2978 
  int rx_pause = (skge->flow_status == (unsigned int)FLOW_STAT_REM_SEND || skge->flow_status == (unsigned int)FLOW_STAT_SYMMETRIC) != 0;
  
#line 2983 
  memset((void *)(& filter),0,8UL);
  
#line 2985 
  reg = gma_read16((struct skge_hw const *)hw,port,12);
  
#line 2986 
  reg = (unsigned short)((unsigned int)reg | 32768U);
  
#line 2988 
  if ((dev->flags & 256U) != 0U) 
#line 2989 
                                 reg = (unsigned short)((unsigned int)reg & 16383U);
  else 
    
#line 2990 
    if ((dev->flags & 512U) != 0U) 
#line 2991 
                                   memset((void *)(& filter),255,8UL);
    else 
      
#line 2992 
      if (dev->mc.count == 0 && rx_pause == 0) 
#line 2993 
                                               reg = (unsigned short)((unsigned int)reg & 49151U);
      else {
        struct netdev_hw_addr *tmp_0;
        struct netdev_hw_addr *tmp_1;
        
#line 2995 
        reg = (unsigned short)((unsigned int)reg | 16384U);
        
#line 2997 
        if (rx_pause != 0) 
#line 2998 
                           yukon_add_filter((u8 *)(& filter),(u8 const *)(& pause_mc_addr)); else ;
        {
          
#line 3000 
          struct list_head const *__mptr = (struct list_head const *)dev->mc.list.next;
          
#line 3000 
          tmp_0 = (struct netdev_hw_addr *)__mptr;
        }
        
#line 3000 
        ha = tmp_0;
        
#line 3000 
        goto ldv_49862;
        ldv_49861: 
#line 3001 
        ;
        
#line 3001 
        yukon_add_filter((u8 *)(& filter),(u8 const *)(& ha->addr));
        {
          
#line 3000 
          struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
          
#line 3000 
          tmp_1 = (struct netdev_hw_addr *)__mptr_0;
        }
        
#line 3000 
        ha = tmp_1;
        ldv_49862: 
#line 3002 
        ;
        
#line 3000 
        if (& ha->list != & dev->mc.list) 
#line 3002 
                                          goto ldv_49861; else 
#line 3005 
                                                               goto ldv_49863;
        ldv_49863: 
#line 3006 
        ;
      }
  
#line 3005 
  gma_write16((struct skge_hw const *)hw,port,52,(unsigned short)((int)((unsigned short)((int)filter[0] | ((int)filter[1] << 8)))));
  
#line 3007 
  gma_write16((struct skge_hw const *)hw,port,56,(unsigned short)((int)((unsigned short)((int)filter[2] | ((int)filter[3] << 8)))));
  
#line 3009 
  gma_write16((struct skge_hw const *)hw,port,60,(unsigned short)((int)((unsigned short)((int)filter[4] | ((int)filter[5] << 8)))));
  
#line 3011 
  gma_write16((struct skge_hw const *)hw,port,64,(unsigned short)((int)((unsigned short)((int)filter[6] | ((int)filter[7] << 8)))));
  
#line 3014 
  gma_write16((struct skge_hw const *)hw,port,12,(unsigned short)((int)reg));
  
#line 3015 
  return;
}


#line 3017  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static u16 phy_length(struct skge_hw const *hw, u32 status)
{
  u16 __retres;
  bool tmp;
  
#line 3019 
  tmp = is_genesis(hw);
  
#line 3019 
  if ((int)tmp != 0) {
    
#line 3020 
    __retres = (unsigned short)(status >> 18);
    
#line 3020 
    goto return_label;
  }
  else {
    
#line 3022 
    __retres = (unsigned short)(status >> 16);
    
#line 3022 
    goto return_label;
  }
  return_label: 
#line 3019 
                return __retres;
}


#line 3025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
__inline static int bad_phy_status(struct skge_hw const *hw, u32 status)
{
  int __retres;
  bool tmp;
  
#line 3027 
  tmp = is_genesis(hw);
  
#line 3027 
  if ((int)tmp != 0) {
    
#line 3028 
    __retres = (status & 131074U) != 0U;
    
#line 3028 
    goto return_label;
  }
  else {
    
#line 3030 
    __retres = ((status & 4338U) != 0U || (status & 256U) == 0U) != 0;
    
#line 3030 
    goto return_label;
  }
  return_label: 
#line 3027 
                return __retres;
}


#line 3034  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_set_multicast(struct net_device *dev)
{
  bool tmp_0;
  
#line 3036 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 3038 
  tmp_0 = is_genesis((struct skge_hw const *)skge->hw);
  
#line 3038 
  if ((int)tmp_0 != 0) 
#line 3039 
                       genesis_set_multicast(dev); else 
#line 3041 
                                                        yukon_set_multicast(dev);
  
#line 3042 
  return;
}


#line 3049  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct sk_buff *skge_rx_get(struct net_device *dev, struct skge_element *e, u32 control, u32 status, u16 csum)
{
  struct sk_buff *__retres;
  struct sk_buff *skb;
  int tmp_0;
  u16 tmp_1;
  bool tmp_3;
  
#line 3053 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 3055 
  u16 len = (unsigned short)control;
  
#line 3057 
  if ((skge->msg_enable & 2048U) != 0U) 
#line 3057 
                                        netdev_printk("\001",(struct net_device const *)skge->netdev,"rx slot %td status 0x%x len %d\n",((long)e - (long)skge->rx_ring.start) / 40L,status,(int)len); else ;
  
#line 3061 
  if ((unsigned int)len > skge->rx_buf_size) 
#line 3062 
                                             goto error; else ;
  
#line 3064 
  if ((control & 1610612736U) != 1610612736U) 
#line 3065 
                                              goto error; else ;
  
#line 3067 
  tmp_0 = bad_phy_status((struct skge_hw const *)skge->hw,status);
  
#line 3067 
  if (tmp_0 != 0) 
#line 3068 
                  goto error; else ;
  
#line 3070 
  tmp_1 = phy_length((struct skge_hw const *)skge->hw,status);
  
#line 3070 
  ;
  
#line 3070 
  if ((int)tmp_1 != (int)len) 
#line 3071 
                              goto error; else ;
  
#line 3073 
  if ((unsigned int)len <= 127U) {
    
#line 3074 
    skb = netdev_alloc_skb_ip_align(dev,(unsigned int)len);
    
#line 3075 
    if (skb == (struct sk_buff *)0) 
#line 3076 
                                    goto resubmit; else ;
    
#line 3078 
    pci_dma_sync_single_for_cpu((skge->hw)->pdev,e->mapaddr,(unsigned long)e->maplen,2);
    
#line 3082 
    skb_copy_from_linear_data((struct sk_buff const *)e->skb,(void *)skb->data,(unsigned int)len);
    
#line 3083 
    pci_dma_sync_single_for_device((skge->hw)->pdev,e->mapaddr,(unsigned long)e->maplen,2);
    
#line 3087 
    skge_rx_reuse(e,skge->rx_buf_size);
  }
  else {
    struct skge_element ee;
    struct sk_buff *nskb;
    int tmp_2;
    
#line 3092 
    nskb = netdev_alloc_skb_ip_align(dev,skge->rx_buf_size);
    
#line 3093 
    if (nskb == (struct sk_buff *)0) 
#line 3094 
                                     goto resubmit; else ;
    
#line 3096 
    ee = *e;
    
#line 3098 
    skb = ee.skb;
    
#line 3099 
    __builtin_prefetch((void const *)skb->data);
    
#line 3101 
    tmp_2 = skge_rx_setup(skge,e,nskb,skge->rx_buf_size);
    
#line 3101 
    if (tmp_2 < 0) {
      
#line 3102 
      consume_skb(nskb);
      
#line 3103 
      goto resubmit;
    }
    else ;
    
#line 3106 
    pci_unmap_single((skge->hw)->pdev,ee.mapaddr,(unsigned long)ee.maplen,2);
  }
  
#line 3112 
  skb_put(skb,(unsigned int)len);
  
#line 3114 
  if ((dev->features & 17179869184ULL) != 0ULL) {
    
#line 3115 
    skb->__anonCompField_sk_buff_81.csum = (unsigned int)csum;
    
#line 3116 
    skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U;
  }
  else ;
  
#line 3119 
  skb->protocol = eth_type_trans(skb,dev);
  
#line 3121 
  __retres = skb;
  
#line 3121 
  goto return_label;
  error: 
#line 3122 
  ;
  
#line 3124 
  if ((skge->msg_enable & 64U) != 0U) 
#line 3124 
                                      netdev_printk("\001",(struct net_device const *)skge->netdev,"rx err, slot %td control 0x%x status 0x%x\n",((long)e - (long)skge->rx_ring.start) / 40L,control,status); else ;
  
#line 3128 
  tmp_3 = is_genesis((struct skge_hw const *)skge->hw);
  
#line 3128 
  if ((int)tmp_3 != 0) {
    
#line 3129 
    if ((status & 24U) != 0U) 
#line 3130 
                              dev->stats.rx_length_errors += 1UL; else ;
    
#line 3131 
    if ((status & 32U) != 0U) 
#line 3132 
                              dev->stats.rx_frame_errors += 1UL; else ;
    
#line 3133 
    if ((status & 4U) != 0U) 
#line 3134 
                             dev->stats.rx_crc_errors += 1UL; else ;
  }
  else {
    
#line 3136 
    if ((status & 2064U) != 0U) 
#line 3137 
                                dev->stats.rx_length_errors += 1UL; else ;
    
#line 3138 
    if ((status & 8U) != 0U) 
#line 3139 
                             dev->stats.rx_frame_errors += 1UL; else ;
    
#line 3140 
    if ((status & 2U) != 0U) 
#line 3141 
                             dev->stats.rx_crc_errors += 1UL; else ;
  }
  resubmit: 
#line 3144 
  ;
  
#line 3145 
  skge_rx_reuse(e,skge->rx_buf_size);
  
#line 3146 
  __retres = (struct sk_buff *)0;
  return_label: 
#line 3146 
                return __retres;
}


#line 3150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_tx_done(struct net_device *dev)
{
  struct skge_element *e;
  bool tmp_2;
  
#line 3152 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 3153 
  struct skge_ring *ring = & skge->tx_ring;
  
#line 3155 
  unsigned int bytes_compl = 0U;
  
#line 3155 
  unsigned int pkts_compl = 0U;
  
#line 3157 
  skge_write8((struct skge_hw const *)skge->hw,txqaddr[skge->port] + 1076,(unsigned char)2);
  
#line 3159 
  e = ring->to_clean;
  
#line 3159 
  goto ldv_49901;
  ldv_49900: 
#line 3160 
  ;
  {
    
#line 3160 
    u32 control = ((struct skge_tx_desc const *)e->desc)->control;
    
#line 3162 
    if (control < (u32)0) 
#line 3163 
                          goto ldv_49899; else ;
    
#line 3165 
    skge_tx_unmap((skge->hw)->pdev,e,control);
    
#line 3167 
    if ((control & 536870912U) != 0U) {
      
#line 3168 
      if ((skge->msg_enable & 1024U) != 0U) 
#line 3168 
                                            netdev_printk("\001",(struct net_device const *)skge->netdev,"tx done slot %td\n",((long)e - (long)skge->tx_ring.start) / 40L); else ;
      
#line 3172 
      pkts_compl += 1U;
      
#line 3173 
      bytes_compl = (e->skb)->len + bytes_compl;
      
#line 3175 
      dev_consume_skb_any(e->skb);
    }
    else ;
  }
  
#line 3159 
  e = e->next;
  ldv_49901: 
#line 3160 
  ;
  
#line 3159 
  if (ring->to_use != e) 
#line 3161 
                         goto ldv_49900; else 
#line 3164 
                                              goto ldv_49899;
  ldv_49899: 
#line 3165 
  ;
  
#line 3178 
  netdev_completed_queue(dev,pkts_compl,bytes_compl);
  
#line 3179 
  skge->tx_ring.to_clean = e;
  
#line 3180 
  ldv_inline_asm();
  
#line 3184 
  tmp_2 = netif_queue_stopped((struct net_device const *)dev);
  
#line 3184 
  if ((long)((int)tmp_2 != 0) != 0L) {
    int tmp_3;
    
#line 3184 
    tmp_3 = skge_avail((struct skge_ring const *)(& skge->tx_ring));
    
#line 3184 
    if ((long)((unsigned int)tmp_3 > 18U) != 0L) {
      bool tmp_0;
      
#line 3186 
      netif_tx_lock(dev);
      
#line 3187 
      tmp_0 = netif_queue_stopped((struct net_device const *)dev);
      
#line 3187 
      if ((long)((int)tmp_0 != 0) != 0L) {
        int tmp_1;
        
#line 3187 
        tmp_1 = skge_avail((struct skge_ring const *)(& skge->tx_ring));
        
#line 3187 
        if ((long)((unsigned int)tmp_1 > 18U) != 0L) 
#line 3189 
                                                     netif_wake_queue(dev); else ;
      }
      else ;
      
#line 3192 
      netif_tx_unlock(dev);
    }
    else ;
  }
  else ;
  
#line 3194 
  return;
}


#line 3196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_poll(struct napi_struct *napi, int to_do)
{
  struct skge_port *tmp;
  struct skge_element *e;
  {
    
#line 3198 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 3198 
    tmp = (struct skge_port *)__mptr + 18446744073709551600U;
  }
  
#line 3198 
  struct skge_port *skge = tmp;
  
#line 3199 
  struct net_device *dev = skge->netdev;
  
#line 3200 
  struct skge_hw *hw = skge->hw;
  
#line 3201 
  struct skge_ring *ring = & skge->rx_ring;
  
#line 3203 
  int work_done = 0;
  
#line 3205 
  skge_tx_done(dev);
  
#line 3207 
  skge_write8((struct skge_hw const *)hw,rxqaddr[skge->port] + 1076,(unsigned char)2);
  
#line 3209 
  e = ring->to_clean;
  
#line 3209 
  goto ldv_49919;
  ldv_49918: 
#line 3210 
  ;
  {
    struct sk_buff *skb;
    u32 control;
    
#line 3210 
    struct skge_rx_desc *rd = (struct skge_rx_desc *)e->desc;
    
#line 3213 
    ldv_inline_asm();
    
#line 3215 
    control = rd->control;
    
#line 3216 
    if (control < (u32)0) 
#line 3217 
                          goto ldv_49917; else ;
    
#line 3219 
    skb = skge_rx_get(dev,e,control,rd->status,(unsigned short)((int)rd->csum2));
    
#line 3220 
    if ((long)(skb != (struct sk_buff *)0) != 0L) {
      
#line 3221 
      napi_gro_receive(napi,skb);
      
#line 3222 
      work_done += 1;
    }
    else ;
  }
  
#line 3209 
  e = e->next;
  ldv_49919: 
#line 3210 
  ;
  
#line 3209 
  __builtin_prefetch((void const *)e->next);
  
#line 3209 
  if (work_done < to_do) 
#line 3211 
                         goto ldv_49918; else 
#line 3214 
                                              goto ldv_49917;
  ldv_49917: 
#line 3215 
  ;
  
#line 3225 
  ring->to_clean = e;
  
#line 3226 
  ldv_inline_asm();
  
#line 3229 
  skge_write8((struct skge_hw const *)hw,rxqaddr[skge->port] + 1076,(unsigned char)16);
  
#line 3231 
  if (work_done < to_do) {
    unsigned long flags;
    
#line 3234 
    napi_gro_flush(napi,(_Bool)0);
    
#line 3235 
    ldv___ldv_spin_lock_94(& hw->hw_lock);
    
#line 3236 
    __napi_complete(napi);
    
#line 3237 
    hw->intr_mask |= napimask[skge->port];
    
#line 3238 
    skge_write32((struct skge_hw const *)hw,12,hw->intr_mask);
    
#line 3239 
    skge_read32((struct skge_hw const *)hw,12);
    
#line 3240 
    ldv_spin_unlock_irqrestore_95(& hw->hw_lock,flags);
  }
  else ;
  
#line 3243 
  return work_done;
}


#line 3249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_mac_parity(struct skge_hw *hw, int port)
{
  bool tmp_0;
  
#line 3251 
  struct net_device *dev = hw->dev[port];
  
#line 3253 
  dev->stats.tx_heartbeat_errors += 1UL;
  
#line 3255 
  tmp_0 = is_genesis((struct skge_hw const *)hw);
  
#line 3255 
  if ((int)tmp_0 != 0) 
#line 3256 
                       skge_write16((struct skge_hw const *)hw,(port << 7) + 3352,(unsigned short)32768);
  else {
    unsigned int tmp;
    
#line 3260 
    if ((unsigned int)hw->chip_id == 176U && (unsigned int)hw->chip_rev == 0U) 
      
#line 3260 
      tmp = 32U; else 
#line 3260 
                      tmp = 16U;
    
#line 3260 
    ;
    
#line 3260 
    ;
    
#line 3260 
    skge_write8((struct skge_hw const *)hw,(port << 7) + 3400,(unsigned char)((int)tmp));
  }
  
#line 3262 
  return;
}


#line 3265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_mac_intr(struct skge_hw *hw, int port)
{
  bool tmp;
  
#line 3267 
  tmp = is_genesis((struct skge_hw const *)hw);
  
#line 3267 
  if ((int)tmp != 0) 
#line 3268 
                     genesis_mac_intr(hw,port); else 
#line 3270 
                                                     yukon_mac_intr(hw,port);
  
#line 3271 
  return;
}


#line 3274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_error_irq(struct skge_hw *hw)
{
  bool tmp_0;
  
#line 3276 
  struct pci_dev *pdev = hw->pdev;
  
#line 3277 
  u32 hwstatus = skge_read32((struct skge_hw const *)hw,16);
  
#line 3279 
  tmp_0 = is_genesis((struct skge_hw const *)hw);
  
#line 3279 
  if ((int)tmp_0 != 0) {
    
#line 3281 
    if ((hwstatus & 640U) != 0U) 
#line 3282 
                                 skge_write16((struct skge_hw const *)hw,3096,(unsigned short)1); else ;
    
#line 3283 
    if ((hwstatus & 320U) != 0U) 
#line 3284 
                                 skge_write16((struct skge_hw const *)hw,3100,(unsigned short)1); else ;
  }
  else 
    
#line 3287 
    if ((hwstatus & 8192U) != 0U) 
#line 3288 
                                  skge_write8((struct skge_hw const *)hw,3608,(unsigned char)1); else ;
  
#line 3291 
  if ((hwstatus & 32U) != 0U) {
    
#line 3292 
    dev_err((struct device const *)(& pdev->dev),"Ram read data parity error\n");
    
#line 3293 
    skge_write16((struct skge_hw const *)hw,416,(unsigned short)512);
  }
  else ;
  
#line 3296 
  if ((hwstatus & 16U) != 0U) {
    
#line 3297 
    dev_err((struct device const *)(& pdev->dev),"Ram write data parity error\n");
    
#line 3298 
    skge_write16((struct skge_hw const *)hw,416,(unsigned short)256);
  }
  else ;
  
#line 3301 
  if ((hwstatus & 8U) != 0U) 
#line 3302 
                             skge_mac_parity(hw,0); else ;
  
#line 3304 
  if ((hwstatus & 4U) != 0U) 
#line 3305 
                             skge_mac_parity(hw,1); else ;
  
#line 3307 
  if ((hwstatus & 2U) != 0U) {
    
#line 3308 
    dev_err((struct device const *)(& pdev->dev),"%s: receive queue parity error\n",(char *)(& (hw->dev[0])->name));
    
#line 3310 
    skge_write32((struct skge_hw const *)hw,96,8U);
  }
  else ;
  
#line 3313 
  if ((hwstatus & 1U) != 0U) {
    
#line 3314 
    dev_err((struct device const *)(& pdev->dev),"%s: receive queue parity error\n",(char *)(& (hw->dev[1])->name));
    
#line 3316 
    skge_write32((struct skge_hw const *)hw,100,8U);
  }
  else ;
  
#line 3319 
  if ((hwstatus & 3072U) != 0U) {
    u16 pci_status;
    u16 pci_cmd;
    
#line 3322 
    pci_read_config_word((struct pci_dev const *)pdev,4,& pci_cmd);
    
#line 3323 
    pci_read_config_word((struct pci_dev const *)pdev,6,& pci_status);
    
#line 3325 
    dev_err((struct device const *)(& pdev->dev),"PCI error cmd=%#x status=%#x\n",(int)pci_cmd,(int)pci_status);
    
#line 3329 
    pci_status = (unsigned short)((unsigned int)pci_status & 61696U);
    
#line 3330 
    skge_write8((struct skge_hw const *)hw,344,(unsigned char)2);
    
#line 3331 
    pci_write_config_word((struct pci_dev const *)pdev,4,(unsigned short)((int)((unsigned int)pci_cmd | 320U)));
    
#line 3333 
    pci_write_config_word((struct pci_dev const *)pdev,6,(unsigned short)((int)pci_status));
    
#line 3334 
    skge_write8((struct skge_hw const *)hw,344,(unsigned char)1);
    
#line 3337 
    hwstatus = skge_read32((struct skge_hw const *)hw,16);
    
#line 3338 
    if ((hwstatus & 1024U) != 0U) {
      
#line 3339 
      dev_warn((struct device const *)(& (hw->pdev)->dev),"unable to clear error (so ignoring them)\n");
      
#line 3340 
      hw->intr_mask &= 2147483647U;
    }
    else ;
  }
  else ;
  
#line 3343 
  return;
}


#line 3350  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_extirq(unsigned long arg)
{
  int port;
  
#line 3352 
  struct skge_hw *hw = (struct skge_hw *)arg;
  
#line 3355 
  port = 0;
  
#line 3355 
  goto ldv_49945;
  ldv_49944: 
#line 3356 
  ;
  {
    bool tmp_2;
    
#line 3356 
    struct net_device *dev = hw->dev[port];
    
#line 3358 
    tmp_2 = netif_running((struct net_device const *)dev);
    
#line 3358 
    if ((int)tmp_2 != 0) {
      int tmp_1;
      bool tmp_0;
      
#line 3359 
      struct skge_port *skge = netdev_priv((struct net_device const *)dev);
      
#line 3361 
      ldv_spin_lock_96(& hw->phy_lock);
      
#line 3362 
      tmp_0 = is_genesis((struct skge_hw const *)hw);
      
#line 3362 
      if (tmp_0) 
#line 3362 
                 tmp_1 = 0; else 
#line 3362 
                                 tmp_1 = 1;
      
#line 3362 
      if (tmp_1) 
#line 3363 
                 yukon_phy_intr(skge);
      else 
        
#line 3364 
        if ((unsigned int)hw->phy_type == 1U) 
#line 3365 
                                              bcom_phy_intr(skge); else ;
      
#line 3366 
      ldv_spin_unlock_97(& hw->phy_lock);
    }
    else ;
  }
  
#line 3355 
  port += 1;
  ldv_49945: 
#line 3356 
  ;
  
#line 3355 
  if ((int)hw->ports > port) 
#line 3357 
                             goto ldv_49944; else 
#line 3360 
                                                  goto ldv_49946;
  ldv_49946: 
#line 3361 
  ;
  
#line 3370 
  ldv_spin_lock_irq_98(& hw->hw_lock);
  
#line 3371 
  hw->intr_mask |= 8388608U;
  
#line 3372 
  skge_write32((struct skge_hw const *)hw,12,hw->intr_mask);
  
#line 3373 
  skge_read32((struct skge_hw const *)hw,12);
  
#line 3374 
  ldv_spin_unlock_irq_99(& hw->hw_lock);
  
#line 3375 
  return;
}


#line 3377  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static irqreturn_t skge_intr(int irq, void *dev_id)
{
  irqreturn_t __retres;
  u32 status;
  
#line 3379 
  struct skge_hw *hw = (struct skge_hw *)dev_id;
  
#line 3381 
  int handled = 0;
  
#line 3383 
  ldv_spin_lock_100(& hw->hw_lock);
  
#line 3385 
  status = skge_read32((struct skge_hw const *)hw,24);
  
#line 3386 
  if (status + 4294967295U > 4294967293U) 
#line 3387 
                                          goto out; else ;
  
#line 3389 
  handled = 1;
  
#line 3390 
  status = hw->intr_mask & status;
  
#line 3391 
  if ((status & 8388608U) != 0U) {
    
#line 3392 
    hw->intr_mask &= 4286578687U;
    
#line 3393 
    ldv_tasklet_schedule_101(& hw->phy_task);
  }
  else ;
  
#line 3396 
  if ((status & 65664U) != 0U) {
    
#line 3397 
    struct skge_port *skge = netdev_priv((struct net_device const *)hw->dev[0]);
    
#line 3398 
    hw->intr_mask &= 4294901631U;
    
#line 3399 
    napi_schedule(& skge->napi);
  }
  else ;
  
#line 3402 
  if ((status & 134217728U) != 0U) 
#line 3403 
                                   skge_write16((struct skge_hw const *)hw,496,(unsigned short)4096); else ;
  
#line 3405 
  if ((status & 536870912U) != 0U) {
    
#line 3406 
    (hw->dev[0])->stats.rx_over_errors += 1UL;
    
#line 3407 
    skge_write16((struct skge_hw const *)hw,496,(unsigned short)1024);
  }
  else ;
  
#line 3411 
  if ((status & 2097152U) != 0U) 
#line 3412 
                                 skge_mac_intr(hw,0); else ;
  
#line 3414 
  if (hw->dev[1] != (struct net_device *)0) {
    
#line 3415 
    struct skge_port *skge_0 = netdev_priv((struct net_device const *)hw->dev[1]);
    
#line 3417 
    if ((status & 8194U) != 0U) {
      
#line 3418 
      hw->intr_mask &= 4294959101U;
      
#line 3419 
      napi_schedule(& skge_0->napi);
    }
    else ;
    
#line 3422 
    if ((status & 268435456U) != 0U) {
      
#line 3423 
      (hw->dev[1])->stats.rx_over_errors += 1UL;
      
#line 3424 
      skge_write16((struct skge_hw const *)hw,496,(unsigned short)2048);
    }
    else ;
    
#line 3427 
    if ((status & 67108864U) != 0U) 
#line 3428 
                                    skge_write16((struct skge_hw const *)hw,496,(unsigned short)8192); else ;
    
#line 3430 
    if ((status & 524288U) != 0U) 
#line 3431 
                                  skge_mac_intr(hw,1); else ;
  }
  else ;
  
#line 3434 
  if (status < (u32)0) 
#line 3435 
                       skge_error_irq(hw); else ;
  out: 
#line 3436 
  ;
  
#line 3437 
  skge_write32((struct skge_hw const *)hw,12,hw->intr_mask);
  
#line 3438 
  skge_read32((struct skge_hw const *)hw,12);
  
#line 3439 
  ldv_spin_unlock_102(& hw->hw_lock);
  
#line 3441 
  __retres = (enum irqreturn)(handled != 0);
  
#line 3441 
  return __retres;
}


#line 3445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_netpoll(struct net_device *dev)
{
  
#line 3447 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 3449 
  disable_irq((unsigned int)dev->irq);
  
#line 3450 
  skge_intr(dev->irq,(void *)skge->hw);
  
#line 3451 
  enable_irq((unsigned int)dev->irq);
  
#line 3452 
  return;
}


#line 3455  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_set_mac_address(struct net_device *dev, void *p)
{
  int __retres;
  u16 ctrl;
  int tmp_1;
  bool tmp_0;
  int tmp_4;
  bool tmp_3;
  
#line 3457 
  struct skge_port *skge = netdev_priv((struct net_device const *)dev);
  
#line 3458 
  struct skge_hw *hw = skge->hw;
  
#line 3459 
  unsigned int port = (unsigned int)skge->port;
  
#line 3460 
  struct sockaddr const *addr = (struct sockaddr const *)p;
  
#line 3463 
  tmp_0 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 3463 
  if (tmp_0) 
#line 3463 
             tmp_1 = 0; else 
#line 3463 
                             tmp_1 = 1;
  
#line 3463 
  if (tmp_1) {
    
#line 3464 
    __retres = -99;
    
#line 3464 
    goto return_label;
  }
  else ;
  
#line 3466 
  memcpy((void *)dev->dev_addr,(void const *)(& addr->sa_data),6UL);
  
#line 3468 
  tmp_3 = netif_running((struct net_device const *)dev);
  
#line 3468 
  if (tmp_3) 
#line 3468 
             tmp_4 = 0; else 
#line 3468 
                             tmp_4 = 1;
  
#line 3468 
  if (tmp_4) {
    
#line 3469 
    memcpy_toio((void volatile *)(hw->regs + (port * 8U + 256U)),(void const *)dev->dev_addr,6UL);
    
#line 3470 
    memcpy_toio((void volatile *)(hw->regs + (port * 8U + 264U)),(void const *)dev->dev_addr,6UL);
  }
  else {
    bool tmp_2;
    
#line 3473 
    ldv_spin_lock_bh_103(& hw->phy_lock);
    
#line 3474 
    ctrl = gma_read16((struct skge_hw const *)hw,(int)port,4);
    
#line 3475 
    gma_write16((struct skge_hw const *)hw,(int)port,4,(unsigned short)((int)ctrl & 63487));
    
#line 3477 
    memcpy_toio((void volatile *)(hw->regs + (port * 8U + 256U)),(void const *)dev->dev_addr,6UL);
    
#line 3478 
    memcpy_toio((void volatile *)(hw->regs + (port * 8U + 264U)),(void const *)dev->dev_addr,6UL);
    
#line 3480 
    tmp_2 = is_genesis((struct skge_hw const *)hw);
    
#line 3480 
    if ((int)tmp_2 != 0) 
#line 3481 
                         xm_outaddr((struct skge_hw const *)hw,(int)port,264,(u8 const *)dev->dev_addr);
    else {
      
#line 3483 
      gma_set_addr(hw,(int)port,28,(u8 const *)dev->dev_addr);
      
#line 3484 
      gma_set_addr(hw,(int)port,40,(u8 const *)dev->dev_addr);
    }
    
#line 3487 
    gma_write16((struct skge_hw const *)hw,(int)port,4,(unsigned short)((int)ctrl));
    
#line 3488 
    ldv_spin_unlock_bh_104(& hw->phy_lock);
  }
  
#line 3491 
  __retres = 0;
  return_label: 
#line 3491 
                return __retres;
}


#line 3497  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct __anonstruct_skge_chips_341 const skge_chips[4U] = {{.id = (unsigned char)10U, .name = "Genesis"}, {.id = (unsigned char)176U, .name = "Yukon"}, {.id = (unsigned char)177U, .name = "Yukon-Lite"}, {.id = (unsigned char)178U, .name = "Yukon-LP"}};

#line 3504  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static char const *skge_board_name(struct skge_hw const *hw)
{
  char const *__retres;
  int i;
  char buf[16U];
  
#line 3509 
  i = 0;
  
#line 3509 
  goto ldv_49983;
  ldv_49982: 
#line 3510 
  ;
  
#line 3510 
  if ((int)skge_chips[i].id == (int)hw->chip_id) {
    
#line 3511 
    __retres = skge_chips[i].name;
    
#line 3511 
    goto return_label;
  }
  else ;
  
#line 3509 
  i += 1;
  ldv_49983: 
#line 3510 
  ;
  
#line 3509 
  if ((unsigned int)i <= 3U) 
#line 3511 
                             goto ldv_49982; else 
#line 3514 
                                                  goto ldv_49984;
  ldv_49984: 
#line 3515 
  ;
  
#line 3513 
  snprintf((char *)(& buf),16UL,"chipid 0x%x",(int)hw->chip_id);
  
#line 3514 
  __retres = (char const *)(& buf);
  return_label: 
#line 3514 
                return __retres;
}


#line 3522  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_reset(struct skge_hw *hw)
{
  int __retres;
  u32 reg;
  u16 ctst;
  u16 pci_status;
  u8 t8;
  u8 mac_cfg;
  u8 pmd_type;
  int i;
  u8 tmp;
  bool tmp_0;
  int tmp_2;
  bool tmp_1;
  bool tmp_5;
  u32 tmp_6;
  bool tmp_7;
  
#line 3529 
  ctst = skge_read16((struct skge_hw const *)hw,4);
  
#line 3532 
  skge_write8((struct skge_hw const *)hw,4,(unsigned char)1);
  
#line 3533 
  skge_write8((struct skge_hw const *)hw,4,(unsigned char)2);
  
#line 3536 
  skge_write8((struct skge_hw const *)hw,344,(unsigned char)2);
  
#line 3537 
  skge_write8((struct skge_hw const *)hw,345,(unsigned char)0);
  
#line 3539 
  pci_read_config_word((struct pci_dev const *)hw->pdev,6,& pci_status);
  
#line 3540 
  pci_write_config_word((struct pci_dev const *)hw->pdev,6,(unsigned short)((int)((unsigned int)pci_status | 61696U)));
  
#line 3542 
  skge_write8((struct skge_hw const *)hw,344,(unsigned char)1);
  
#line 3543 
  skge_write8((struct skge_hw const *)hw,4,(unsigned char)8);
  
#line 3546 
  skge_write16((struct skge_hw const *)hw,4,(unsigned short)((int)ctst & 14336));
  
#line 3549 
  hw->chip_id = skge_read8((struct skge_hw const *)hw,283);
  
#line 3550 
  tmp = skge_read8((struct skge_hw const *)hw,285);
  
#line 3550 
  hw->phy_type = (unsigned char)((unsigned int)tmp & 15U);
  
#line 3551 
  pmd_type = skge_read8((struct skge_hw const *)hw,281);
  
#line 3552 
  hw->copper = (unsigned char)(((unsigned int)pmd_type == 84U || (unsigned int)pmd_type == 49U) != 0);
  
#line 3554 
  switch ((int)hw->chip_id) {
    case 10: 
#line 3555 
    ;
    
#line 3557 
    switch ((int)hw->phy_type) {
      case 0: 
#line 3558 
      ;
      
#line 3559 
      hw->phy_addr = (unsigned short)0U;
      
#line 3560 
      goto ldv_49997;
      case 1: 
#line 3561 
      ;
      
#line 3562 
      hw->phy_addr = (unsigned short)256U;
      
#line 3563 
      goto ldv_49997;
      default: 
#line 3564 
      ;
      
#line 3565 
      dev_err((struct device const *)(& (hw->pdev)->dev),"unsupported phy type 0x%x\n",(int)hw->phy_type);
      
#line 3567 
      __retres = -95;
      
#line 3567 
      goto return_label;
    }
    ldv_49997: 
#line 3569 
    ;
    
#line 3569 
    goto ldv_50000;
    case 176: 
#line 3575 
    ;
    case 177: 
#line 3576 
    ;
    case 178: 
#line 3577 
    ;
    
#line 3578 
    if ((unsigned int)hw->phy_type <= 3U && (unsigned int)pmd_type != 83U) 
      
#line 3579 
      hw->copper = (unsigned char)1U; else ;
    
#line 3581 
    hw->phy_addr = (unsigned short)0U;
    
#line 3582 
    goto ldv_50000;
    default: 
#line 3584 
    ;
    
#line 3585 
    dev_err((struct device const *)(& (hw->pdev)->dev),"unsupported chip type 0x%x\n",(int)hw->chip_id);
    
#line 3587 
    __retres = -95;
    
#line 3587 
    goto return_label;
  }
  ldv_50000: 
#line 3590 
  ;
  
#line 3590 
  mac_cfg = skge_read8((struct skge_hw const *)hw,282);
  
#line 3591 
  if (((int)mac_cfg & 1) != 0) 
#line 3591 
                               hw->ports = (unsigned char)1U; else 
#line 3591 
                                                                   hw->ports = (unsigned char)2U;
  
#line 3592 
  hw->chip_rev = (unsigned char)((int)mac_cfg >> 4);
  
#line 3595 
  t8 = skge_read8((struct skge_hw const *)hw,284);
  
#line 3596 
  tmp_0 = is_genesis((struct skge_hw const *)hw);
  
#line 3596 
  if ((int)tmp_0 != 0) 
    
#line 3597 
    if ((unsigned int)t8 == 3U) {
      
#line 3599 
      hw->ram_size = 1048576U;
      
#line 3600 
      hw->ram_offset = 524288U;
    }
    else 
#line 3602 
         hw->ram_size = (unsigned int)((int)t8 * 512);
  else 
    
#line 3603 
    if ((unsigned int)t8 == 0U) 
#line 3604 
                                hw->ram_size = 131072U; else 
#line 3606 
                                                             hw->ram_size = (unsigned int)((int)t8 * 4096);
  
#line 3608 
  hw->intr_mask = 2147483648U;
  
#line 3611 
  tmp_1 = is_genesis((struct skge_hw const *)hw);
  
#line 3611 
  if (tmp_1) 
#line 3611 
             tmp_2 = 0; else 
#line 3611 
                             tmp_2 = 1;
  
#line 3611 
  if (tmp_2) 
#line 3612 
             hw->intr_mask |= 8388608U;
  else 
    
#line 3611 
    if ((unsigned int)hw->phy_type != 0U) 
#line 3612 
                                          hw->intr_mask |= 8388608U; else ;
  
#line 3614 
  tmp_5 = is_genesis((struct skge_hw const *)hw);
  
#line 3614 
  if ((int)tmp_5 != 0) 
#line 3615 
                       genesis_init(hw);
  else {
    u32 tmp_3;
    
#line 3618 
    skge_write8((struct skge_hw const *)hw,7,(unsigned char)166);
    
#line 3622 
    tmp_3 = skge_read32((struct skge_hw const *)hw,8);
    
#line 3622 
    if (tmp_3 < (u32)0) {
      u32 tmp_4;
      
#line 3622 
      tmp_4 = skge_read32((struct skge_hw const *)hw,16);
      
#line 3622 
      if ((tmp_4 & 4096U) != 0U) {
        
#line 3624 
        dev_warn((struct device const *)(& (hw->pdev)->dev),"stuck hardware sensor bit\n");
        
#line 3625 
        hw->intr_mask &= 2147483647U;
      }
      else ;
    }
    else ;
    
#line 3629 
    skge_write8((struct skge_hw const *)hw,344,(unsigned char)2);
    
#line 3630 
    pci_read_config_dword((struct pci_dev const *)hw->pdev,64,& reg);
    
#line 3631 
    reg &= 4160749567U;
    
#line 3632 
    pci_write_config_dword((struct pci_dev const *)hw->pdev,64,reg);
    
#line 3633 
    skge_write8((struct skge_hw const *)hw,344,(unsigned char)1);
    
#line 3636 
    i = 0;
    
#line 3636 
    goto ldv_50006;
    ldv_50005: 
#line 3637 
    ;
    
#line 3637 
    skge_write16((struct skge_hw const *)hw,(i << 7) + 3856,(unsigned short)1);
    
#line 3638 
    skge_write16((struct skge_hw const *)hw,(i << 7) + 3856,(unsigned short)2);
    
#line 3636 
    i += 1;
    ldv_50006: 
#line 3637 
    ;
    
#line 3636 
    if ((int)hw->ports > i) 
#line 3638 
                            goto ldv_50005; else 
#line 3641 
                                                 goto ldv_50007;
    ldv_50007: 
#line 3642 
    ;
  }
  
#line 3643 
  skge_write8((struct skge_hw const *)hw,312,(unsigned char)2);
  
#line 3644 
  skge_write8((struct skge_hw const *)hw,312,(unsigned char)1);
  
#line 3645 
  skge_write8((struct skge_hw const *)hw,6,(unsigned char)2);
  
#line 3648 
  i = 0;
  
#line 3648 
  goto ldv_50009;
  ldv_50008: 
#line 3649 
  ;
  
#line 3649 
  skge_write8((struct skge_hw const *)hw,(i << 7) + 528,(unsigned char)2);
  
#line 3648 
  i += 1;
  ldv_50009: 
#line 3649 
  ;
  
#line 3648 
  if ((int)hw->ports > i) 
#line 3650 
                          goto ldv_50008; else 
#line 3653 
                                               goto ldv_50010;
  ldv_50010: 
#line 3654 
  ;
  
#line 3652 
  skge_write16((struct skge_hw const *)hw,416,(unsigned short)2);
  
#line 3654 
  skge_write8((struct skge_hw const *)hw,400,(unsigned char)36);
  
#line 3655 
  skge_write8((struct skge_hw const *)hw,401,(unsigned char)36);
  
#line 3656 
  skge_write8((struct skge_hw const *)hw,402,(unsigned char)36);
  
#line 3657 
  skge_write8((struct skge_hw const *)hw,403,(unsigned char)36);
  
#line 3658 
  skge_write8((struct skge_hw const *)hw,404,(unsigned char)36);
  
#line 3659 
  skge_write8((struct skge_hw const *)hw,405,(unsigned char)36);
  
#line 3660 
  skge_write8((struct skge_hw const *)hw,406,(unsigned char)36);
  
#line 3661 
  skge_write8((struct skge_hw const *)hw,407,(unsigned char)36);
  
#line 3662 
  skge_write8((struct skge_hw const *)hw,408,(unsigned char)36);
  
#line 3663 
  skge_write8((struct skge_hw const *)hw,409,(unsigned char)36);
  
#line 3664 
  skge_write8((struct skge_hw const *)hw,410,(unsigned char)36);
  
#line 3665 
  skge_write8((struct skge_hw const *)hw,411,(unsigned char)36);
  
#line 3667 
  skge_write32((struct skge_hw const *)hw,20,3135U);
  
#line 3672 
  skge_write32((struct skge_hw const *)hw,332,130U);
  
#line 3673 
  tmp_6 = skge_usecs2clk((struct skge_hw const *)hw,100U);
  
#line 3673 
  ;
  
#line 3673 
  skge_write32((struct skge_hw const *)hw,320,tmp_6);
  
#line 3674 
  skge_write32((struct skge_hw const *)hw,328,4U);
  
#line 3677 
  skge_write32((struct skge_hw const *)hw,12,0U);
  
#line 3679 
  i = 0;
  
#line 3679 
  goto ldv_50012;
  ldv_50011: 
#line 3680 
  ;
  
#line 3680 
  tmp_7 = is_genesis((struct skge_hw const *)hw);
  
#line 3680 
  if ((int)tmp_7 != 0) 
#line 3681 
                       genesis_reset(hw,i); else 
#line 3683 
                                                 yukon_reset(hw,i);
  
#line 3679 
  i += 1;
  ldv_50012: 
#line 3680 
  ;
  
#line 3679 
  if ((int)hw->ports > i) 
#line 3681 
                          goto ldv_50011; else 
#line 3684 
                                               goto ldv_50013;
  ldv_50013: 
#line 3685 
  ;
  
#line 3686 
  __retres = 0;
  return_label: 
#line 3686 
                return __retres;
}


#line 3692  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct dentry *skge_debug;

#line 3694  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_debug_show(struct seq_file *seq, void *v)
{
  int __retres;
  struct skge_element const *e;
  int tmp_1;
  bool tmp_0;
  u32 tmp_2;
  u32 tmp_3;
  int tmp_4;
  
#line 3696 
  struct net_device *dev = (struct net_device *)seq->private;
  
#line 3697 
  struct skge_port const *skge = netdev_priv((struct net_device const *)dev);
  
#line 3698 
  struct skge_hw const *hw = (struct skge_hw const *)skge->hw;
  
#line 3701 
  tmp_0 = netif_running((struct net_device const *)dev);
  
#line 3701 
  if (tmp_0) 
#line 3701 
             tmp_1 = 0; else 
#line 3701 
                             tmp_1 = 1;
  
#line 3701 
  if (tmp_1) {
    
#line 3702 
    __retres = -100;
    
#line 3702 
    goto return_label;
  }
  else ;
  
#line 3704 
  tmp_2 = skge_read32(hw,12);
  
#line 3704 
  tmp_3 = skge_read32(hw,8);
  
#line 3704 
  ;
  
#line 3704 
  seq_printf(seq,"IRQ src=%x mask=%x\n",tmp_3,tmp_2);
  
#line 3707 
  tmp_4 = skge_avail(& skge->tx_ring);
  
#line 3707 
  ;
  
#line 3707 
  seq_printf(seq,"Tx Ring: (%d)\n",tmp_4);
  
#line 3708 
  e = (struct skge_element const *)skge->tx_ring.to_clean;
  
#line 3708 
  goto ldv_50025;
  ldv_50024: 
#line 3709 
  ;
  {
    
#line 3709 
    struct skge_tx_desc const *t = (struct skge_tx_desc const *)e->desc;
    
#line 3710 
    seq_printf(seq,"%#x dma=%#x%08x %#x csum=%#x/%x/%x\n",t->control,t->dma_hi,t->dma_lo,t->status,t->csum_offs,(int)t->csum_write,(int)t->csum_start);
  }
  
#line 3708 
  e = (struct skge_element const *)e->next;
  ldv_50025: 
#line 3709 
  ;
  
#line 3708 
  if ((struct skge_element const *)skge->tx_ring.to_use != e) 
#line 3710 
                                                              goto ldv_50024; else 
                                                                    
#line 3713 
                                                                    goto ldv_50026;
  ldv_50026: 
#line 3714 
  ;
  
#line 3715 
  seq_printf(seq,"\nRx Ring:\n");
  
#line 3716 
  e = (struct skge_element const *)skge->rx_ring.to_clean;
  ldv_50029: 
#line 3717 
  ;
  {
    
#line 3717 
    struct skge_rx_desc const *r = (struct skge_rx_desc const *)e->desc;
    
#line 3719 
    if (r->control < (u32)0) 
#line 3720 
                             goto ldv_50028; else ;
    
#line 3722 
    seq_printf(seq,"%#x dma=%#x%08x %#x %#x csum=%#x/%x\n",r->control,r->dma_hi,r->dma_lo,r->status,r->timestamp,(int)r->csum1,(int)r->csum1_start);
  }
  
#line 3716 
  e = (struct skge_element const *)e->next;
  
#line 3716 
  goto ldv_50029;
  ldv_50028: 
#line 3717 
  ;
  
#line 3727 
  __retres = 0;
  return_label: 
#line 3727 
                return __retres;
}


#line 3730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_debug_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 3732 
  tmp = single_open(file,& skge_debug_show,inode->i_private);
  
#line 3732 
  return tmp;
}


#line 3735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct file_operations const skge_debug_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & skge_debug_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 3747  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_device_event(struct notifier_block *unused, unsigned long event, void *ptr)
{
  int __retres;
  struct skge_port *skge;
  struct dentry *d;
  
#line 3750 
  struct net_device *dev = netdev_notifier_info_to_dev((struct netdev_notifier_info const *)ptr);
  
#line 3754 
  if ((dev->netdev_ops)->ndo_open != & skge_up || skge_debug == (struct dentry *)0) 
    
#line 3755 
    goto done; else ;
  
#line 3757 
  skge = (struct skge_port *)netdev_priv((struct net_device const *)dev);
  
#line 3758 
  switch (event) {
    case (unsigned long)10: 
#line 3759 
    ;
    
#line 3760 
    if (skge->debugfs != (struct dentry *)0) {
      
#line 3761 
      d = debugfs_rename(skge_debug,skge->debugfs,skge_debug,(char const *)(& dev->name));
      
#line 3763 
      if (d != (struct dentry *)0) 
#line 3764 
                                   skge->debugfs = d;
      else {
        
#line 3766 
        netdev_info((struct net_device const *)dev,"rename failed\n");
        
#line 3767 
        ldv_debugfs_remove_105(skge->debugfs);
      }
    }
    else ;
    
#line 3770 
    goto ldv_50045;
    case (unsigned long)9: 
#line 3772 
    ;
    
#line 3773 
    if (skge->debugfs != (struct dentry *)0) {
      
#line 3774 
      ldv_debugfs_remove_106(skge->debugfs);
      
#line 3775 
      skge->debugfs = (struct dentry *)0;
    }
    else ;
    
#line 3777 
    goto ldv_50045;
    case (unsigned long)1: 
#line 3779 
    ;
    
#line 3780 
    d = ldv_debugfs_create_file_107((char const *)(& dev->name),(unsigned short)292,skge_debug,(void *)dev,& skge_debug_fops);
    
#line 3783 
    if (d == (struct dentry *)0) 
#line 3783 
                                 goto _LOR;
    else {
      bool tmp_1;
      
#line 3783 
      tmp_1 = IS_ERR((void const *)d);
      
#line 3783 
      if ((int)tmp_1 != 0) _LOR: 
#line 3784 
                                 netdev_info((struct net_device const *)dev,"debugfs create failed\n"); else 
                                                                    
#line 3786 
                                                                    skge->debugfs = d;
    }
    
#line 3787 
    goto ldv_50045;
  }
  ldv_50045: 
#line 3790 
  ;
  done: 
#line 3790 
  ;
  
#line 3791 
  __retres = 0;
  
#line 3791 
  return __retres;
}


#line 3794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct notifier_block skge_notifier = {.notifier_call = & skge_device_event, .next = (struct notifier_block *)0, .priority = 0};

#line 3799  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_debug_init(void)
{
  struct dentry *ent;
  
#line 3803 
  ent = debugfs_create_dir("skge",(struct dentry *)0);
  
#line 3804 
  if (ent == (struct dentry *)0) 
#line 3804 
                                 goto _LOR;
  else {
    bool tmp;
    
#line 3804 
    tmp = IS_ERR((void const *)ent);
    
#line 3804 
    if ((int)tmp != 0) {
      _LOR: {
              
#line 3805 
              printk("\001");
              
#line 3806 
              goto return_label;
            }
    }
    else ;
  }
  
#line 3809 
  skge_debug = ent;
  
#line 3810 
  register_netdevice_notifier(& skge_notifier);
  return_label: 
#line 3811 
                return;
}


#line 3813  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_debug_cleanup(void)
{
  
#line 3815 
  if (skge_debug != (struct dentry *)0) {
    
#line 3816 
    unregister_netdevice_notifier(& skge_notifier);
    
#line 3817 
    ldv_debugfs_remove_108(skge_debug);
    
#line 3818 
    skge_debug = (struct dentry *)0;
  }
  else ;
  
#line 3820 
  return;
}


#line 3827  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct net_device_ops const skge_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & skge_up, .ndo_stop = & skge_down, .ndo_start_xmit = & skge_xmit_frame, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & skge_set_multicast, .ndo_set_mac_address = & skge_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & skge_ioctl, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & skge_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & skge_tx_timeout, .ndo_get_stats64 = (struct rtnl_link_stats64 *(*)(struct net_device *, struct rtnl_link_stats64 *))0, .ndo_get_stats = & skge_get_stats, .ndo_vlan_rx_add_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_vlan_rx_kill_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_poll_controller = & skge_netpoll, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = (netdev_features_t (*)(struct net_device *, netdev_features_t ))0, .ndo_set_features = (int (*)(struct net_device *, netdev_features_t ))0, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 3845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct net_device *skge_devinit(struct skge_hw *hw, int port, int highmem)
{
  struct net_device *__retres;
  struct skge_port *skge;
  bool tmp_2;
  bool tmp_3;
  
#line 3849 
  struct net_device *dev = ldv_alloc_etherdev_mqs_109(640,1U,1U);
  
#line 3851 
  if (dev == (struct net_device *)0) {
    
#line 3852 
    __retres = (struct net_device *)0;
    
#line 3852 
    goto return_label;
  }
  else ;
  
#line 3854 
  dev->dev.parent = & (hw->pdev)->dev;
  
#line 3855 
  dev->netdev_ops = & skge_netdev_ops;
  
#line 3856 
  dev->ethtool_ops = & skge_ethtool_ops;
  
#line 3857 
  dev->watchdog_timeo = 1250;
  
#line 3858 
  dev->irq = (int)(hw->pdev)->irq;
  
#line 3860 
  if (highmem != 0) 
#line 3861 
                    dev->features |= 32ULL; else ;
  
#line 3863 
  skge = (struct skge_port *)netdev_priv((struct net_device const *)dev);
  
#line 3864 
  netif_napi_add(dev,& skge->napi,& skge_poll,64);
  
#line 3865 
  skge->netdev = dev;
  
#line 3866 
  skge->hw = hw;
  
#line 3867 
  skge->msg_enable = netif_msg_init(debug,(int)default_msg);
  
#line 3869 
  skge->tx_ring.count = 128UL;
  
#line 3870 
  skge->rx_ring.count = 512UL;
  
#line 3873 
  skge->autoneg = (unsigned char)1U;
  
#line 3874 
  skge->flow_control = FLOW_MODE_SYM_OR_REM;
  
#line 3875 
  skge->duplex = (unsigned char)255U;
  
#line 3876 
  skge->speed = (unsigned short)65535U;
  
#line 3877 
  skge->advertising = skge_supported_modes((struct skge_hw const *)hw);
  
#line 3879 
  tmp_2 = device_can_wakeup(& (hw->pdev)->dev);
  
#line 3879 
  if ((int)tmp_2 != 0) {
    u32 tmp_1;
    
#line 3880 
    tmp_1 = wol_supported((struct skge_hw const *)hw);
    
#line 3880 
    skge->wol = (unsigned char)((unsigned int)((unsigned char)tmp_1) & 32U);
    
#line 3881 
    device_set_wakeup_enable(& (hw->pdev)->dev,(_Bool)((unsigned int)skge->wol != 0U));
  }
  else ;
  
#line 3884 
  hw->dev[port] = dev;
  
#line 3886 
  skge->port = port;
  
#line 3889 
  tmp_3 = is_genesis((struct skge_hw const *)hw);
  
#line 3889 
  if ((int)tmp_3 != 0) {
    {
      struct lock_class_key __key;
      
#line 3890 
      init_timer_key(& skge->link_timer,0U,"((&skge->link_timer))",& __key);
    }
    
#line 3890 
    skge->link_timer.function = & xm_link_timer;
    
#line 3890 
    skge->link_timer.data = (unsigned long)skge;
  }
  else {
    
#line 3892 
    dev->hw_features = 17179869187ULL;
    
#line 3894 
    dev->features |= dev->hw_features;
  }
  
#line 3898 
  memcpy_fromio((void *)dev->dev_addr,(void const volatile *)(hw->regs + ((unsigned int)(port * 8) + 256U)),6UL);
  
#line 3900 
  __retres = dev;
  return_label: 
#line 3900 
                return __retres;
}


#line 3903  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_show_addr(struct net_device *dev)
{
  
#line 3905 
  struct skge_port const *skge = netdev_priv((struct net_device const *)dev);
  
#line 3907 
  if ((skge->msg_enable & 2U) != 0U) 
#line 3907 
                                     netdev_info((struct net_device const *)skge->netdev,"addr %pM\n",dev->dev_addr); else ;
  
#line 3908 
  return;
}


#line 3910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int only_32bit_dma;

#line 3912  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_probe(struct pci_dev *pdev, struct pci_device_id const *ent)
{
  int __retres;
  struct net_device *dev;
  struct net_device *dev1;
  struct skge_hw *hw;
  int err;
  void *tmp_3;
  size_t tmp_0;
  size_t tmp_2;
  char const *tmp_1;
  char const *tmp_4;
  char const *tmp_5;
  int tmp_7;
  bool tmp_6;
  
#line 3916 
  int using_dac = 0;
  
#line 3918 
  err = pci_enable_device(pdev);
  
#line 3919 
  if (err != 0) {
    
#line 3920 
    dev_err((struct device const *)(& pdev->dev),"cannot enable PCI device\n");
    
#line 3921 
    goto err_out;
  }
  else ;
  
#line 3924 
  err = pci_request_regions(pdev,"skge");
  
#line 3925 
  if (err != 0) {
    
#line 3926 
    dev_err((struct device const *)(& pdev->dev),"cannot obtain PCI resources\n");
    
#line 3927 
    goto err_out_disable_pdev;
  }
  else ;
  
#line 3930 
  pci_set_master(pdev);
  
#line 3932 
  if (only_32bit_dma == 0) {
    int tmp;
    
#line 3932 
    tmp = pci_set_dma_mask(pdev,18446744073709551615ULL);
    
#line 3932 
    if (tmp == 0) {
      
#line 3933 
      using_dac = 1;
      
#line 3934 
      err = pci_set_consistent_dma_mask(pdev,18446744073709551615ULL);
    }
    else 
#line 3932 
         goto _LAND;
  }
  else {
    _LAND: 
#line 3935 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    
#line 3935 
    if (err == 0) {
      
#line 3936 
      using_dac = 0;
      
#line 3937 
      err = pci_set_consistent_dma_mask(pdev,4294967295ULL);
    }
    else ;
  }
  
#line 3940 
  if (err != 0) {
    
#line 3941 
    dev_err((struct device const *)(& pdev->dev),"no usable DMA configuration\n");
    
#line 3942 
    goto err_out_free_regions;
  }
  else ;
  
#line 3956 
  err = -12;
  
#line 3958 
  tmp_0 = strlen("skge");
  
#line 3959 
  tmp_1 = pci_name((struct pci_dev const *)pdev);
  
#line 3959 
  tmp_2 = strlen(tmp_1);
  
#line 3958 
  tmp_3 = kzalloc((tmp_0 + tmp_2) + 249UL,208U);
  
#line 3958 
  hw = (struct skge_hw *)tmp_3;
  
#line 3960 
  if (hw == (struct skge_hw *)0) 
#line 3961 
                                 goto err_out_free_regions; else ;
  
#line 3963 
  tmp_4 = pci_name((struct pci_dev const *)pdev);
  
#line 3963 
  ;
  
#line 3963 
  sprintf((char *)(& hw->irq_name),"skge",tmp_4);
  
#line 3965 
  hw->pdev = pdev;
  
#line 3966 
  spinlock_check(& hw->hw_lock);
  {
    struct lock_class_key __key;
    
#line 3966 
    __raw_spin_lock_init(& hw->hw_lock.__anonCompField_spinlock_18.rlock,"&(&hw->hw_lock)->rlock",& __key);
  }
  
#line 3967 
  spinlock_check(& hw->phy_lock);
  {
    struct lock_class_key __key_0;
    
#line 3967 
    __raw_spin_lock_init(& hw->phy_lock.__anonCompField_spinlock_18.rlock,"&(&hw->phy_lock)->rlock",& __key_0);
  }
  
#line 3968 
  ldv_tasklet_init_110(& hw->phy_task,& skge_extirq,(unsigned long)hw);
  
#line 3970 
  hw->regs = ioremap_nocache(pdev->resource[0].start,16384UL);
  
#line 3971 
  if (hw->regs == (void *)0) {
    
#line 3972 
    dev_err((struct device const *)(& pdev->dev),"cannot map device registers\n");
    
#line 3973 
    goto err_out_free_hw;
  }
  else ;
  
#line 3976 
  err = skge_reset(hw);
  
#line 3977 
  if (err != 0) 
#line 3978 
                goto err_out_iounmap; else ;
  
#line 3980 
  ;
  
#line 3980 
  tmp_5 = skge_board_name((struct skge_hw const *)hw);
  
#line 3980 
  ;
  
#line 3980 
  ;
  
#line 3980 
  printk("\001",(char *)"1.14",pdev->resource[0].start,pdev->irq,tmp_5,(int)hw->chip_rev);
  
#line 3985 
  dev = skge_devinit(hw,0,using_dac);
  
#line 3986 
  if (dev == (struct net_device *)0) {
    
#line 3987 
    err = -12;
    
#line 3988 
    goto err_out_led_off;
  }
  else ;
  
#line 3992 
  tmp_6 = is_valid_ether_addr((u8 const *)dev->dev_addr);
  
#line 3992 
  if (tmp_6) 
#line 3992 
             tmp_7 = 0; else 
#line 3992 
                             tmp_7 = 1;
  
#line 3992 
  if (tmp_7) 
#line 3993 
             dev_warn((struct device const *)(& pdev->dev),"bad (zero?) ethernet address in rom\n"); else ;
  
#line 3995 
  err = ldv_register_netdev_111(dev);
  
#line 3996 
  if (err != 0) {
    
#line 3997 
    dev_err((struct device const *)(& pdev->dev),"cannot register net device\n");
    
#line 3998 
    goto err_out_free_netdev;
  }
  else ;
  
#line 4001 
  skge_show_addr(dev);
  
#line 4003 
  if ((unsigned int)hw->ports > 1U) {
    
#line 4004 
    dev1 = skge_devinit(hw,1,using_dac);
    
#line 4005 
    if (dev1 == (struct net_device *)0) {
      
#line 4006 
      err = -12;
      
#line 4007 
      goto err_out_unregister;
    }
    else ;
    
#line 4010 
    err = ldv_register_netdev_112(dev1);
    
#line 4011 
    if (err != 0) {
      
#line 4012 
      dev_err((struct device const *)(& pdev->dev),"cannot register second net device\n");
      
#line 4013 
      goto err_out_free_dev1;
    }
    else ;
    
#line 4016 
    err = ldv_request_irq_113(pdev->irq,& skge_intr,128UL,(char const *)(& hw->irq_name),(void *)hw);
    
#line 4018 
    if (err != 0) {
      
#line 4019 
      dev_err((struct device const *)(& pdev->dev),"cannot assign irq %d\n",pdev->irq);
      
#line 4021 
      goto err_out_unregister_dev1;
    }
    else ;
    
#line 4024 
    skge_show_addr(dev1);
  }
  else ;
  
#line 4026 
  pci_set_drvdata(pdev,(void *)hw);
  
#line 4028 
  __retres = 0;
  
#line 4028 
  goto return_label;
  err_out_unregister_dev1: 
#line 4030 
  ;
  
#line 4031 
  ldv_unregister_netdev_114(dev1);
  err_out_free_dev1: 
#line 4032 
  ;
  
#line 4033 
  ldv_free_netdev_115(dev1);
  err_out_unregister: 
#line 4034 
  ;
  
#line 4035 
  ldv_unregister_netdev_116(dev);
  err_out_free_netdev: 
#line 4036 
  ;
  
#line 4037 
  ldv_free_netdev_117(dev);
  err_out_led_off: 
#line 4038 
  ;
  
#line 4039 
  skge_write16((struct skge_hw const *)hw,6,(unsigned short)1);
  err_out_iounmap: 
#line 4040 
  ;
  
#line 4041 
  iounmap((void volatile *)hw->regs);
  err_out_free_hw: 
#line 4042 
  ;
  
#line 4043 
  kfree((void const *)hw);
  err_out_free_regions: 
#line 4044 
  ;
  
#line 4045 
  pci_release_regions(pdev);
  err_out_disable_pdev: 
#line 4046 
  ;
  
#line 4047 
  pci_disable_device(pdev);
  err_out: 
#line 4048 
  ;
  
#line 4049 
  __retres = err;
  return_label: 
#line 4049 
                return __retres;
}


#line 4052  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_remove(struct pci_dev *pdev)
{
  struct net_device *dev0;
  struct net_device *dev1;
  
#line 4054 
  struct skge_hw *hw = pci_get_drvdata(pdev);
  
#line 4057 
  if (hw == (struct skge_hw *)0) 
#line 4058 
                                 goto return_label; else ;
  
#line 4060 
  dev1 = hw->dev[1];
  
#line 4061 
  if (dev1 != (struct net_device *)0) 
#line 4062 
                                      ldv_unregister_netdev_118(dev1); else ;
  
#line 4063 
  dev0 = hw->dev[0];
  
#line 4064 
  ldv_unregister_netdev_119(dev0);
  
#line 4066 
  tasklet_kill(& hw->phy_task);
  
#line 4068 
  ldv_spin_lock_irq_120(& hw->hw_lock);
  
#line 4069 
  hw->intr_mask = 0U;
  
#line 4071 
  if ((unsigned int)hw->ports > 1U) {
    
#line 4072 
    skge_write32((struct skge_hw const *)hw,12,0U);
    
#line 4073 
    skge_read32((struct skge_hw const *)hw,12);
    
#line 4074 
    ldv_free_irq_121(pdev->irq,(void *)hw);
  }
  else ;
  
#line 4076 
  ldv_spin_unlock_irq_122(& hw->hw_lock);
  
#line 4078 
  skge_write16((struct skge_hw const *)hw,6,(unsigned short)1);
  
#line 4079 
  skge_write8((struct skge_hw const *)hw,4,(unsigned char)1);
  
#line 4081 
  if ((unsigned int)hw->ports > 1U) 
#line 4082 
                                    ldv_free_irq_123(pdev->irq,(void *)hw); else ;
  
#line 4083 
  pci_release_regions(pdev);
  
#line 4084 
  pci_disable_device(pdev);
  
#line 4085 
  if (dev1 != (struct net_device *)0) 
#line 4086 
                                      ldv_free_netdev_124(dev1); else ;
  
#line 4087 
  ldv_free_netdev_125(dev0);
  
#line 4089 
  iounmap((void volatile *)hw->regs);
  
#line 4090 
  kfree((void const *)hw);
  return_label: 
#line 4091 
                return;
}


#line 4094  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_suspend(struct device *dev)
{
  int __retres;
  struct pci_dev *tmp;
  int i;
  {
    
#line 4096 
    struct device const *__mptr = (struct device const *)dev;
    
#line 4096 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 4096 
  struct pci_dev *pdev = tmp;
  
#line 4097 
  struct skge_hw *hw = pci_get_drvdata(pdev);
  
#line 4100 
  if (hw == (struct skge_hw *)0) {
    
#line 4101 
    __retres = 0;
    
#line 4101 
    goto return_label;
  }
  else ;
  
#line 4103 
  i = 0;
  
#line 4103 
  goto ldv_50108;
  ldv_50107: 
#line 4104 
  ;
  {
    bool tmp_2;
    
#line 4104 
    struct net_device *dev_0 = hw->dev[i];
    
#line 4105 
    struct skge_port *skge = netdev_priv((struct net_device const *)dev_0);
    
#line 4107 
    tmp_2 = netif_running((struct net_device const *)dev_0);
    
#line 4107 
    if ((int)tmp_2 != 0) 
#line 4108 
                         skge_down(dev_0); else ;
    
#line 4110 
    if ((unsigned int)skge->wol != 0U) 
#line 4111 
                                       skge_wol_init(skge); else ;
  }
  
#line 4103 
  i += 1;
  ldv_50108: 
#line 4104 
  ;
  
#line 4103 
  if ((int)hw->ports > i) 
#line 4105 
                          goto ldv_50107; else 
#line 4108 
                                               goto ldv_50109;
  ldv_50109: 
#line 4109 
  ;
  
#line 4114 
  skge_write32((struct skge_hw const *)hw,12,0U);
  
#line 4116 
  __retres = 0;
  return_label: 
#line 4116 
                return __retres;
}


#line 4119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_resume(struct device *dev)
{
  int __retres;
  struct pci_dev *tmp;
  int i;
  int err;
  {
    
#line 4121 
    struct device const *__mptr = (struct device const *)dev;
    
#line 4121 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 4121 
  struct pci_dev *pdev = tmp;
  
#line 4122 
  struct skge_hw *hw = pci_get_drvdata(pdev);
  
#line 4125 
  if (hw == (struct skge_hw *)0) {
    
#line 4126 
    __retres = 0;
    
#line 4126 
    goto return_label;
  }
  else ;
  
#line 4128 
  err = skge_reset(hw);
  
#line 4129 
  if (err != 0) 
#line 4130 
                goto out; else ;
  
#line 4132 
  i = 0;
  
#line 4132 
  goto ldv_50122;
  ldv_50121: 
#line 4133 
  ;
  {
    bool tmp_1;
    
#line 4133 
    struct net_device *dev_0 = hw->dev[i];
    
#line 4135 
    tmp_1 = netif_running((struct net_device const *)dev_0);
    
#line 4135 
    if ((int)tmp_1 != 0) {
      
#line 4136 
      err = skge_up(dev_0);
      
#line 4138 
      if (err != 0) {
        
#line 4139 
        netdev_err((struct net_device const *)dev_0,"could not up: %d\n",err);
        
#line 4140 
        dev_close(dev_0);
        
#line 4141 
        goto out;
      }
      else ;
    }
    else ;
  }
  
#line 4132 
  i += 1;
  ldv_50122: 
#line 4133 
  ;
  
#line 4132 
  if ((int)hw->ports > i) 
#line 4134 
                          goto ldv_50121; else 
#line 4137 
                                               goto ldv_50123;
  ldv_50123: 
#line 4138 
  ;
  out: 
#line 4145 
  ;
  
#line 4146 
  __retres = err;
  return_label: 
#line 4146 
                return __retres;
}


#line 4149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct dev_pm_ops const skge_pm_ops = {.prepare = (int (*)(struct device *))0, .complete = (void (*)(struct device *))0, .suspend = & skge_suspend, .resume = & skge_resume, .freeze = & skge_suspend, .thaw = & skge_resume, .poweroff = & skge_suspend, .restore = & skge_resume, .suspend_late = (int (*)(struct device *))0, .resume_early = (int (*)(struct device *))0, .freeze_late = (int (*)(struct device *))0, .thaw_early = (int (*)(struct device *))0, .poweroff_late = (int (*)(struct device *))0, .restore_early = (int (*)(struct device *))0, .suspend_noirq = (int (*)(struct device *))0, .resume_noirq = (int (*)(struct device *))0, .freeze_noirq = (int (*)(struct device *))0, .thaw_noirq = (int (*)(struct device *))0, .poweroff_noirq = (int (*)(struct device *))0, .restore_noirq = (int (*)(struct device *))0, .runtime_suspend = (int (*)(struct device *))0, .runtime_resume = (int (*)(struct device *))0, .runtime_idle = (int (*)(struct device *))0};

#line 4157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_shutdown(struct pci_dev *pdev)
{
  int i;
  bool tmp_1;
  
#line 4159 
  struct skge_hw *hw = pci_get_drvdata(pdev);
  
#line 4162 
  if (hw == (struct skge_hw *)0) 
#line 4163 
                                 goto return_label; else ;
  
#line 4165 
  i = 0;
  
#line 4165 
  goto ldv_50133;
  ldv_50132: 
#line 4166 
  ;
  {
    
#line 4166 
    struct net_device *dev = hw->dev[i];
    
#line 4167 
    struct skge_port *skge = netdev_priv((struct net_device const *)dev);
    
#line 4169 
    if ((unsigned int)skge->wol != 0U) 
#line 4170 
                                       skge_wol_init(skge); else ;
  }
  
#line 4165 
  i += 1;
  ldv_50133: 
#line 4166 
  ;
  
#line 4165 
  if ((int)hw->ports > i) 
#line 4167 
                          goto ldv_50132; else 
#line 4170 
                                               goto ldv_50134;
  ldv_50134: 
#line 4171 
  ;
  
#line 4173 
  tmp_1 = device_may_wakeup(& pdev->dev);
  
#line 4173 
  ;
  
#line 4173 
  pci_wake_from_d3(pdev,(_Bool)((bool)((int)tmp_1) != 0));
  
#line 4174 
  pci_set_power_state(pdev,3);
  return_label: 
#line 4175 
                return;
}


#line 4177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct pci_driver skge_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = "skge", .id_table = (struct pci_device_id const *)(& skge_id_table), .probe = & skge_probe, .remove = & skge_remove, .suspend = (int (*)(struct pci_dev *, pm_message_t ))0, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = (int (*)(struct pci_dev *))0, .shutdown = & skge_shutdown, .sriov_configure = (int (*)(struct pci_dev *, int ))0, .err_handler = (struct pci_error_handlers const *)0, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = & skge_pm_ops, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 4186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static struct dmi_system_id skge_32bit_dma_boards[4U] = {{.callback = (int (*)(struct dmi_system_id const *))0, .ident = "Gigabyte nForce boards", .matches = {{.slot = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))))9U, .exact_match = (unsigned char)0, .substr = {(char)'G', (char)'i', (char)'g', (char)'a', (char)'b', (char)'y', (char)'t', (char)'e', (char)' ', (char)'T', (char)'e', (char)'c', (char)'h', (char)'n', (char)'o', (char)'l', (char)'o', (char)'g', (char)'y', (char)' ', (char)'C', (char)'o', (char)'\000'}}, {.slot = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))))10U, .exact_match = (unsigned char)0, .substr = {(char)'n', (char)'F', (char)'o', (char)'r', (char)'c', (char)'e', (char)'\000'}}}, .driver_data = (void *)0}, {.callback = (int (*)(struct dmi_system_id const *))0, .ident = "ASUS P5NSLI", .matches = {{.slot = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))))9U, .exact_match = (unsigned char)0, .substr = {(char)'A', (char)'S', (char)'U', (char)'S', (char)'T', (char)'e', (char)'K', (char)' ', (char)'C', (char)'o', (char)'m', (char)'p', (char)'u', (char)'t', (char)'e', (char)'r', (char)' ', (char)'I', (char)'N', (char)'C', (char)'.', (char)'\000'}}, {.slot = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))))10U, .exact_match = (unsigned char)0, .substr = {(char)'P', (char)'5', (char)'N', (char)'S', (char)'L', (char)'I', (char)'\000'}}}, .driver_data = (void *)0}, {.callback = (int (*)(struct dmi_system_id const *))0, .ident = "FUJITSU SIEMENS A8NE-FM", .matches = {{.slot = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))))9U, .exact_match = (unsigned char)0, .substr = {(char)'A', (char)'S', (char)'U', (char)'S', (char)'T', (char)'e', (char)'k', (char)' ', (char)'C', (char)'o', (char)'m', (char)'p', (char)'u', (char)'t', (char)'e', (char)'r', (char)' ', (char)'I', (char)'N', (char)'C', (char)'.', (char)'\000'}}, {.slot = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))))10U, .exact_match = (unsigned char)0, .substr = {(char)'A', (char)'8', (char)'N', (char)'E', (char)'-', (char)'F', (char)'M', (char)'\000'}}}, .driver_data = (void *)0}, {.callback = (int (*)(struct dmi_system_id const *))0, .ident = (char const *)0, .matches = {{.slot = (unsigned char)0, .exact_match = (unsigned char)0, .substr = {(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0}}, {.slot = (unsigned char)0, .exact_match = (unsigned char)0, .substr = {(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0}}, {.slot = (unsigned char)0, .exact_match = (unsigned char)0, .substr = {(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0}}, {.slot = (unsigned char)0, .exact_match = (unsigned char)0, .substr = {(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0}}}, .driver_data = (void *)0}};

#line 4211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static int skge_init_module(void)
{
  int tmp;
  int tmp_0;
  
#line 4213 
  tmp = dmi_check_system((struct dmi_system_id const *)(& skge_32bit_dma_boards));
  
#line 4213 
  if (tmp != 0) 
#line 4214 
                only_32bit_dma = 1; else ;
  
#line 4215 
  skge_debug_init();
  
#line 4216 
  tmp_0 = ldv___pci_register_driver_126(& skge_driver,& __this_module,"skge");
  
#line 4216 
  return tmp_0;
}


#line 4219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/marvell/skge.c"
static void skge_cleanup_module(void)
{
  
#line 4221 
  ldv_pci_unregister_driver_127(& skge_driver);
  
#line 4222 
  skge_debug_cleanup();
  
#line 4223 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
struct file_operations *ldv_emg_alias_skge_debug_fops_2 = (struct file_operations *)(& skge_debug_fops);

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
long long (*ldv_emg_alias_seq_lseek_2)(struct file *, long long , int ) = & seq_lseek;

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_11)(struct net_device *) = & ethtool_op_get_link;

#line 59  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
struct dev_pm_ops *ldv_emg_alias_skge_pm_ops_3 = (struct dev_pm_ops *)(& skge_pm_ops);

#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
long (*ldv_emg_alias_seq_read_3)(struct file *, char *, unsigned long , long long *) = & seq_read;

#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int (*ldv_emg_alias_eth_validate_addr_10)(struct net_device *) = & eth_validate_addr;

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void (*ldv_emg_alias_None_2)(unsigned long ) = & skge_extirq;

#line 63  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int (*ldv_emg_alias_single_release_4)(struct inode *, struct file *) = & single_release;

#line 64  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
struct pci_driver *ldv_emg_alias_skge_driver_2 = & skge_driver;

#line 67 
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 68 
void ldv_emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);


#line 69 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 70 
void ldv_emg_tasklet_schedule(struct tasklet_struct *arg0);


#line 71 
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);


#line 72 
void ldv_emg_debugfs_remove(struct dentry *arg0);


#line 73 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 74 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 75 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 76 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 77 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 78 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 79 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 80 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 84  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_set_eeprom_14(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 85 
  tmp = skge_set_eeprom(arg0,arg1,arg2);
  
#line 85 
  return tmp;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_down_2(struct net_device *arg0)
{
  int tmp;
  
#line 90 
  tmp = skge_down(arg0);
  
#line 90 
  return tmp;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_netpoll_33(struct net_device *arg0)
{
  
#line 95 
  skge_netpoll(arg0);
  
#line 96 
  return;
}


#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_get_strings_6(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 100 
  skge_get_strings(arg0,arg1,arg2);
  
#line 101 
  return;
}


#line 104  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_get_regs_24(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  
#line 105 
  skge_get_regs(arg0,arg1,arg2);
  
#line 106 
  return;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_suspend_2(struct device *arg0)
{
  int tmp;
  
#line 110 
  tmp = skge_suspend(arg0);
  
#line 110 
  return tmp;
}


#line 114  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_skge_init_module(void)
{
  int tmp;
  
#line 115 
  tmp = skge_init_module();
  
#line 115 
  return tmp;
}


#line 118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_debug_open_5(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 119 
  tmp = skge_debug_open(arg0,arg1);
  
#line 119 
  return tmp;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_set_pauseparam_32(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  int tmp;
  
#line 124 
  tmp = skge_set_pauseparam(arg0,arg1);
  
#line 124 
  return tmp;
}


#line 128  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_shutdown_2(struct pci_dev *arg0)
{
  
#line 129 
  skge_shutdown(arg0);
  
#line 130 
  return;
}


#line 133  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_get_eeprom_len_34(struct net_device *arg0)
{
  int tmp;
  
#line 134 
  tmp = skge_get_eeprom_len(arg0);
  
#line 134 
  return tmp;
}


#line 138  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_nway_reset_27(struct net_device *arg0)
{
  int tmp;
  
#line 139 
  tmp = skge_nway_reset(arg0);
  
#line 139 
  return tmp;
}


#line 143  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_get_drvinfo_13(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 144 
  skge_get_drvinfo(arg0,arg1);
  
#line 145 
  return;
}


#line 148  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_up_2(struct net_device *arg0)
{
  int tmp;
  
#line 149 
  tmp = skge_up(arg0);
  
#line 149 
  return tmp;
}


#line 153  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_set_ring_param_15(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  int tmp;
  
#line 154 
  tmp = skge_set_ring_param(arg0,arg1);
  
#line 154 
  return tmp;
}


#line 158  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_remove_4(struct pci_dev *arg0)
{
  
#line 159 
  skge_remove(arg0);
  
#line 160 
  return;
}


#line 163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
enum irqreturn ldv_emg_wrapper_skge_intr_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 164 
  tmp = skge_intr(arg0,arg1);
  
#line 164 
  return tmp;
}


#line 168  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_set_wol_23(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  int tmp;
  
#line 169 
  tmp = skge_set_wol(arg0,arg1);
  
#line 169 
  return tmp;
}


#line 173  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_set_mac_address_18(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 174 
  tmp = skge_set_mac_address(arg0,arg1);
  
#line 174 
  return tmp;
}


#line 178  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_get_wol_21(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  
#line 179 
  skge_get_wol(arg0,arg1);
  
#line 180 
  return;
}


#line 183  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_ioctl_29(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  int tmp;
  
#line 184 
  tmp = skge_ioctl(arg0,arg1,arg2);
  
#line 184 
  return tmp;
}


#line 188  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
unsigned int ldv_emg_wrapper_skge_get_msglevel_16(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 189 
  tmp = skge_get_msglevel(arg0);
  
#line 189 
  return tmp;
}


#line 193  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_set_msglevel_28(struct net_device *arg0, unsigned int arg1)
{
  
#line 194 
  skge_set_msglevel(arg0,arg1);
  
#line 195 
  return;
}


#line 198  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
enum netdev_tx ldv_emg_wrapper_skge_xmit_frame_17(struct sk_buff *arg0, struct net_device *arg1)
{
  enum netdev_tx tmp;
  
#line 199 
  tmp = skge_xmit_frame(arg0,arg1);
  
#line 199 
  return tmp;
}


#line 203  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_get_ethtool_stats_9(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 204 
  skge_get_ethtool_stats(arg0,arg1,arg2);
  
#line 205 
  return;
}


#line 208  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_skge_cleanup_module(void)
{
  
#line 209 
  skge_cleanup_module();
  
#line 210 
  return;
}


#line 212  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_get_eeprom_3(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 213 
  tmp = skge_get_eeprom(arg0,arg1,arg2);
  
#line 213 
  return tmp;
}


#line 217  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_set_multicast_7(struct net_device *arg0)
{
  
#line 218 
  skge_set_multicast(arg0);
  
#line 219 
  return;
}


#line 222  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_get_settings_19(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 223 
  tmp = skge_get_settings(arg0,arg1);
  
#line 223 
  return tmp;
}


#line 227  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_probe_3(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 228 
  tmp = skge_probe(arg0,(struct pci_device_id const *)arg1);
  
#line 228 
  return tmp;
}


#line 232  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_tx_timeout_20(struct net_device *arg0)
{
  
#line 233 
  skge_tx_timeout(arg0);
  
#line 234 
  return;
}


#line 237  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_get_pauseparam_2(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  
#line 238 
  skge_get_pauseparam(arg0,arg1);
  
#line 239 
  return;
}


#line 242  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_set_settings_4(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 243 
  tmp = skge_set_settings(arg0,arg1);
  
#line 243 
  return tmp;
}


#line 247  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_get_sset_count_25(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 248 
  tmp = skge_get_sset_count(arg0,arg1);
  
#line 248 
  return tmp;
}


#line 252  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
void ldv_emg_wrapper_skge_get_ring_param_12(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 253 
  skge_get_ring_param(arg0,arg1);
  
#line 254 
  return;
}


#line 257  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_resume_4(struct device *arg0)
{
  int tmp;
  
#line 258 
  tmp = skge_resume(arg0);
  
#line 258 
  return tmp;
}


#line 262  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_get_regs_len_30(struct net_device *arg0)
{
  int tmp;
  
#line 263 
  tmp = skge_get_regs_len(arg0);
  
#line 263 
  return tmp;
}


#line 267  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_change_mtu_8(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 268 
  tmp = skge_change_mtu(arg0,arg1);
  
#line 268 
  return tmp;
}


#line 272  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_set_coalesce_31(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 273 
  tmp = skge_set_coalesce(arg0,arg1);
  
#line 273 
  return tmp;
}


#line 277  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
struct net_device_stats *ldv_emg_wrapper_skge_get_stats_26(struct net_device *arg0)
{
  struct net_device_stats *tmp;
  
#line 278 
  tmp = skge_get_stats(arg0);
  
#line 278 
  return tmp;
}


#line 282  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_set_phys_id_5(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  int tmp;
  
#line 283 
  tmp = skge_set_phys_id(arg0,arg1);
  
#line 283 
  return tmp;
}


#line 287  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
int ldv_emg_wrapper_skge_get_coalesce_22(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 288 
  tmp = skge_get_coalesce(arg0,arg1);
  
#line 288 
  return tmp;
}


#line 307  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static bool IS_ERR(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 311 
  ret = ldv_is_err(ptr);
  
#line 312 
  __retres = (_Bool)(ret != 0L);
  
#line 312 
  return __retres;
}


#line 816  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 819 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 819 
  return tmp;
}


#line 823  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 826 
  tmp = ldv_kzalloc(size,flags);
  
#line 826 
  return tmp;
}


#line 830  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_60(spinlock_t *lock)
{
  
#line 834 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  
#line 836 
  spin_lock(lock);
  
#line 837 
  return;
}


#line 873  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_63(spinlock_t *lock)
{
  
#line 877 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 879 
  spin_unlock(lock);
  
#line 880 
  return;
}


#line 893  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_65(spinlock_t *lock)
{
  
#line 897 
  ldv_spin_model_lock((char *)"tx_global_lock_of_net_device");
  
#line 899 
  spin_lock(lock);
  
#line 900 
  return;
}


#line 903  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_66(spinlock_t *lock)
{
  
#line 907 
  ldv_spin_model_unlock((char *)"tx_global_lock_of_net_device");
  
#line 909 
  spin_unlock(lock);
  
#line 910 
  return;
}


#line 963  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_bh_72(spinlock_t *lock)
{
  
#line 967 
  ldv_spin_model_lock((char *)"phy_lock_of_skge_hw");
  
#line 969 
  spin_lock_bh(lock);
  
#line 970 
  return;
}


#line 973  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_bh_73(spinlock_t *lock)
{
  
#line 977 
  ldv_spin_model_unlock((char *)"phy_lock_of_skge_hw");
  
#line 979 
  spin_unlock_bh(lock);
  
#line 980 
  return;
}


#line 983  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static int ldv_mod_timer_74(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 987 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 987 
  return tmp;
}


#line 991  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1)
{
  
#line 995 
  ldv_spin_model_lock((char *)"phy_lock_of_skge_hw");
  
#line 997 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 998 
  return;
}


#line 1001  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static int ldv_mod_timer_76(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1005 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1005 
  return tmp;
}


#line 1009  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags)
{
  
#line 1013 
  ldv_spin_model_unlock((char *)"phy_lock_of_skge_hw");
  
#line 1015 
  spin_unlock_irqrestore(lock,flags);
  
#line 1016 
  return;
}


#line 1019  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static int ldv_mod_timer_78(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1023 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1023 
  return tmp;
}


#line 1027  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_bh_79(spinlock_t *lock)
{
  
#line 1031 
  ldv_spin_model_lock((char *)"phy_lock_of_skge_hw");
  
#line 1033 
  spin_lock_bh(lock);
  
#line 1034 
  return;
}


#line 1037  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_bh_80(spinlock_t *lock)
{
  
#line 1041 
  ldv_spin_model_unlock((char *)"phy_lock_of_skge_hw");
  
#line 1043 
  spin_unlock_bh(lock);
  
#line 1044 
  return;
}


#line 1047  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_bh_81(spinlock_t *lock)
{
  
#line 1051 
  ldv_spin_model_lock((char *)"phy_lock_of_skge_hw");
  
#line 1053 
  spin_lock_bh(lock);
  
#line 1054 
  return;
}


#line 1057  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_bh_82(spinlock_t *lock)
{
  
#line 1061 
  ldv_spin_model_unlock((char *)"phy_lock_of_skge_hw");
  
#line 1063 
  spin_unlock_bh(lock);
  
#line 1064 
  return;
}


#line 1067  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_bh_83(spinlock_t *lock)
{
  
#line 1071 
  ldv_spin_model_lock((char *)"phy_lock_of_skge_hw");
  
#line 1073 
  spin_lock_bh(lock);
  
#line 1074 
  return;
}


#line 1077  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_bh_84(spinlock_t *lock)
{
  
#line 1081 
  ldv_spin_model_unlock((char *)"phy_lock_of_skge_hw");
  
#line 1083 
  spin_unlock_bh(lock);
  
#line 1084 
  return;
}


#line 1087  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static int ldv_request_irq_85(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1091 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1091 
  return tmp;
}


#line 1095  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_bh_86(spinlock_t *lock)
{
  
#line 1099 
  ldv_spin_model_lock((char *)"phy_lock_of_skge_hw");
  
#line 1101 
  spin_lock_bh(lock);
  
#line 1102 
  return;
}


#line 1105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_bh_87(spinlock_t *lock)
{
  
#line 1109 
  ldv_spin_model_unlock((char *)"phy_lock_of_skge_hw");
  
#line 1111 
  spin_unlock_bh(lock);
  
#line 1112 
  return;
}


#line 1115  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_irq_88(spinlock_t *lock)
{
  
#line 1119 
  ldv_spin_model_lock((char *)"hw_lock_of_skge_hw");
  
#line 1121 
  spin_lock_irq(lock);
  
#line 1122 
  return;
}


#line 1125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_irq_89(spinlock_t *lock)
{
  
#line 1129 
  ldv_spin_model_unlock((char *)"hw_lock_of_skge_hw");
  
#line 1131 
  spin_unlock_irq(lock);
  
#line 1132 
  return;
}


#line 1135  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static int ldv_del_timer_sync_90(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1139 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1139 
  return tmp;
}


#line 1143  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_irq_91(spinlock_t *lock)
{
  
#line 1147 
  ldv_spin_model_lock((char *)"hw_lock_of_skge_hw");
  
#line 1149 
  spin_lock_irq(lock);
  
#line 1150 
  return;
}


#line 1153  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_irq_92(spinlock_t *lock)
{
  
#line 1157 
  ldv_spin_model_unlock((char *)"hw_lock_of_skge_hw");
  
#line 1159 
  spin_unlock_irq(lock);
  
#line 1160 
  return;
}


#line 1163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_free_irq_93(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1167 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1168 
  return;
}


#line 1171  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv___ldv_spin_lock_94(spinlock_t *ldv_func_arg1)
{
  
#line 1175 
  ldv_spin_model_lock((char *)"hw_lock_of_skge_hw");
  
#line 1177 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1178 
  return;
}


#line 1181  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_irqrestore_95(spinlock_t *lock, unsigned long flags)
{
  
#line 1185 
  ldv_spin_model_unlock((char *)"hw_lock_of_skge_hw");
  
#line 1187 
  spin_unlock_irqrestore(lock,flags);
  
#line 1188 
  return;
}


#line 1191  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_96(spinlock_t *lock)
{
  
#line 1195 
  ldv_spin_model_lock((char *)"phy_lock_of_skge_hw");
  
#line 1197 
  spin_lock(lock);
  
#line 1198 
  return;
}


#line 1201  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_97(spinlock_t *lock)
{
  
#line 1205 
  ldv_spin_model_unlock((char *)"phy_lock_of_skge_hw");
  
#line 1207 
  spin_unlock(lock);
  
#line 1208 
  return;
}


#line 1211  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_irq_98(spinlock_t *lock)
{
  
#line 1215 
  ldv_spin_model_lock((char *)"hw_lock_of_skge_hw");
  
#line 1217 
  spin_lock_irq(lock);
  
#line 1218 
  return;
}


#line 1221  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_irq_99(spinlock_t *lock)
{
  
#line 1225 
  ldv_spin_model_unlock((char *)"hw_lock_of_skge_hw");
  
#line 1227 
  spin_unlock_irq(lock);
  
#line 1228 
  return;
}


#line 1231  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_100(spinlock_t *lock)
{
  
#line 1235 
  ldv_spin_model_lock((char *)"hw_lock_of_skge_hw");
  
#line 1237 
  spin_lock(lock);
  
#line 1238 
  return;
}


#line 1241  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_tasklet_schedule_101(struct tasklet_struct *t)
{
  
#line 1245 
  ldv_emg_tasklet_schedule(t);
  
#line 1246 
  return;
}


#line 1249  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_102(spinlock_t *lock)
{
  
#line 1253 
  ldv_spin_model_unlock((char *)"hw_lock_of_skge_hw");
  
#line 1255 
  spin_unlock(lock);
  
#line 1256 
  return;
}


#line 1259  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_bh_103(spinlock_t *lock)
{
  
#line 1263 
  ldv_spin_model_lock((char *)"phy_lock_of_skge_hw");
  
#line 1265 
  spin_lock_bh(lock);
  
#line 1266 
  return;
}


#line 1269  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_bh_104(spinlock_t *lock)
{
  
#line 1273 
  ldv_spin_model_unlock((char *)"phy_lock_of_skge_hw");
  
#line 1275 
  spin_unlock_bh(lock);
  
#line 1276 
  return;
}


#line 1279  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_debugfs_remove_105(struct dentry *ldv_func_arg1)
{
  
#line 1283 
  ldv_emg_debugfs_remove(ldv_func_arg1);
  
#line 1284 
  return;
}


#line 1287  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_debugfs_remove_106(struct dentry *ldv_func_arg1)
{
  
#line 1291 
  ldv_emg_debugfs_remove(ldv_func_arg1);
  
#line 1292 
  return;
}


#line 1295  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static struct dentry *ldv_debugfs_create_file_107(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 1299 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 1299 
  return tmp;
}


#line 1303  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_debugfs_remove_108(struct dentry *ldv_func_arg1)
{
  
#line 1307 
  ldv_emg_debugfs_remove(ldv_func_arg1);
  
#line 1308 
  return;
}


#line 1311  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_109(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 1315 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1315 
  return tmp;
}


#line 1319  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_tasklet_init_110(struct tasklet_struct *ldv_func_arg1, void (*ldv_func_arg2)(unsigned long ), unsigned long ldv_func_arg3)
{
  
#line 1323 
  ldv_emg_tasklet_init(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1324 
  return;
}


#line 1327  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static int ldv_register_netdev_111(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 1331 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 1331 
  return tmp;
}


#line 1335  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static int ldv_register_netdev_112(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 1339 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 1339 
  return tmp;
}


#line 1343  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static int ldv_request_irq_113(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1347 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1347 
  return tmp;
}


#line 1351  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_unregister_netdev_114(struct net_device *ldv_func_arg1)
{
  
#line 1355 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1356 
  return;
}


#line 1359  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_free_netdev_115(struct net_device *ldv_func_arg1)
{
  
#line 1363 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1364 
  return;
}


#line 1367  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_unregister_netdev_116(struct net_device *ldv_func_arg1)
{
  
#line 1371 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1372 
  return;
}


#line 1375  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_free_netdev_117(struct net_device *ldv_func_arg1)
{
  
#line 1379 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1380 
  return;
}


#line 1383  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_unregister_netdev_118(struct net_device *ldv_func_arg1)
{
  
#line 1387 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1388 
  return;
}


#line 1391  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_unregister_netdev_119(struct net_device *ldv_func_arg1)
{
  
#line 1395 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1396 
  return;
}


#line 1399  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_lock_irq_120(spinlock_t *lock)
{
  
#line 1403 
  ldv_spin_model_lock((char *)"hw_lock_of_skge_hw");
  
#line 1405 
  spin_lock_irq(lock);
  
#line 1406 
  return;
}


#line 1409  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_free_irq_121(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1413 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1414 
  return;
}


#line 1417  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_spin_unlock_irq_122(spinlock_t *lock)
{
  
#line 1421 
  ldv_spin_model_unlock((char *)"hw_lock_of_skge_hw");
  
#line 1423 
  spin_unlock_irq(lock);
  
#line 1424 
  return;
}


#line 1427  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_free_irq_123(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1431 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1432 
  return;
}


#line 1435  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_free_netdev_124(struct net_device *ldv_func_arg1)
{
  
#line 1439 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1440 
  return;
}


#line 1443  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_free_netdev_125(struct net_device *ldv_func_arg1)
{
  
#line 1447 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1448 
  return;
}


#line 1451  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static int ldv___pci_register_driver_126(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 1455 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 1455 
  return tmp;
}


#line 1459  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/weaver/.tmp_skge.c.aux"
static void ldv_pci_unregister_driver_127(struct pci_driver *ldv_func_arg1)
{
  
#line 1463 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 1464 
  return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  void *__retres;
  
#line 25 
  __retres = (void *)error;
  
#line 25 
  return __retres;
}


#line 105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0);


#line 110 
void *ldv_pci_scenario_21(void *arg0);


#line 111 
void ldv_dispatch_register_14_3(struct file_operations *arg0);


#line 112 
void ldv_dispatch_irq_register_12_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 114 
void ldv_dispatch_register_11_3(struct pci_driver *arg0);


#line 115 
void ldv_dispatch_irq_deregister_8_1(int arg0);


#line 116 
void *ldv_random_allocationless_scenario_17(void *arg0);


#line 117 
void *ldv_character_driver_scenario_20(void *arg0);


#line 119 
void *ldv_interrupt_scenario_16(void *arg0);


#line 120 
void *ldv_timer_scenario_18(void *arg0);


#line 121 
void ldv_dispatch_deregister_9_1(struct pci_driver *arg0);


#line 122 
void *ldv_initialization_1(void *arg0);


#line 123 
void ldv_dispatch_instance_deregister_13_1(struct timer_list *arg0);


#line 124 
int main(void);


#line 125 
void *ldv_pm_ops_scenario_19(void *arg0);


#line 129 
void ldv_dispatch_register_10_4(struct net_device *arg0);


#line 130 
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0);


#line 134 
void ldv_dispatch_deregister_6_1(struct file_operations *arg0);


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_21;

#line 141  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 143  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 144  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_20;

#line 148  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_17 *cf_arg_17;
  int tmp;
  
#line 151 
  tmp = ldv_undef_int();
  
#line 151 
  switch (tmp) {
    case 0: 
#line 152 
    ;
    
#line 153 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 154 
    __VERIFIER_assume(ret == 0);
    
#line 155 
    goto ldv_45512;
    default: 
#line 157 
    ;
    
#line 157 
    __VERIFIER_assume(0);
  }
  ldv_45512: 
#line 158 
  ;
  
#line 159 
  return;
}


#line 163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  
#line 168 
  arg0->func = arg1;
  
#line 169 
  arg0->data = arg2;
  
#line 170 
  arg0->count.counter = 0;
  
#line 174 
  goto return_label;
  return_label: 
#line 176 
                return;
}


#line 181  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 184 
  struct pci_driver *ldv_11_pci_driver = ldv_emg_alias_skge_driver_2;
  
#line 188 
  tmp_0 = ldv_undef_int();
  
#line 188 
  if (tmp_0 != 0) {
    
#line 190 
    ldv_11_pci_driver = arg0;
    
#line 194 
    ldv_dispatch_register_11_3(ldv_11_pci_driver);
    
#line 198 
    __retres = 0;
    
#line 198 
    goto return_label;
  }
  else {
    int tmp;
    
#line 205 
    tmp = ldv_undef_int_negative();
    
#line 205 
    __retres = tmp;
    
#line 205 
    goto return_label;
  }
  return_label: 
#line 188 
                return __retres;
}


#line 215  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  struct dentry *__retres;
  struct dentry *ldv_14_dentry;
  int tmp_1;
  
#line 219 
  struct file_operations *ldv_14_file_operations = ldv_emg_alias_skge_debug_fops_2;
  
#line 223 
  tmp_1 = ldv_undef_int();
  
#line 223 
  if (tmp_1 != 0) {
    
#line 225 
    ldv_14_dentry = (struct dentry *)ldv_xmalloc_unknown_size(0UL);
    
#line 226 
    ldv_14_file_operations = arg4;
    
#line 230 
    ldv_dispatch_register_14_3(ldv_14_file_operations);
    
#line 234 
    __retres = ldv_14_dentry;
    
#line 234 
    goto return_label;
  }
  else {
    struct dentry *tmp_0;
    
#line 241 
    tmp_0 = (struct dentry *)ERR_PTR(-19L);
    
#line 241 
    __retres = tmp_0;
    
#line 241 
    goto return_label;
  }
  return_label: 
#line 223 
                return __retres;
}


#line 251  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  unsigned long ldv_15_ldv_param_0_2;
  struct tasklet_struct *ldv_15_tasklet_struct;
  
#line 258 
  ldv_15_tasklet_struct = arg0;
  
#line 265 
  if (ldv_15_tasklet_struct->count.counter == 0) 
#line 267 
                                                 (*ldv_emg_alias_None_2)(ldv_15_ldv_param_0_2); else ;
  
#line 275 
  goto return_label;
  return_label: 
#line 277 
                return;
}


#line 282  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_21(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_21_resource_1;
  struct pci_device_id *ldv_21_ldv_param_1_2;
  struct pm_message ldv_21_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 287 
  struct pci_driver *ldv_21_container = ldv_emg_alias_skge_driver_2;
  
#line 288 
  int ldv_21_ret = ldv_undef_int();
  
#line 291 
  struct ldv_struct_pci_scenario_21 *data = (struct ldv_struct_pci_scenario_21 *)arg0;
  
#line 295 
  ldv_21_ret = ldv_undef_int();
  
#line 298 
  if (data != (struct ldv_struct_pci_scenario_21 *)0) {
    
#line 299 
    ldv_21_container = data->arg0;
    
#line 300 
    ldv_free((void *)data);
  }
  else ;
  
#line 311 
  goto ldv_main_21;
  
#line 313 
  __retres = (void *)0;
  
#line 313 
  goto return_label;
  ldv_main_21: 
#line 316 
  ;
  
#line 319 
  tmp_2 = ldv_undef_int();
  
#line 319 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 321 
    ldv_21_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 326 
    ldv_pre_probe();
    
#line 328 
    ldv_21_ret = ldv_emg_wrapper_skge_probe_3(ldv_21_resource_1,ldv_21_ldv_param_1_2);
    
#line 330 
    ldv_21_ret = ldv_post_probe(ldv_21_ret);
    
#line 334 
    ldv_free((void *)ldv_21_ldv_param_1_2);
    
#line 337 
    tmp_1 = ldv_undef_int();
    
#line 337 
    if (tmp_1 != 0) {
      
#line 339 
      __VERIFIER_assume(ldv_21_ret == 0);
      
#line 346 
      goto ldv_call_21;
    }
    else {
      
#line 350 
      __VERIFIER_assume(ldv_21_ret != 0);
      
#line 357 
      goto ldv_main_21;
    }
  }
  else {
    
#line 369 
    __retres = (void *)0;
    
#line 369 
    goto return_label;
  }
  
#line 372 
  __retres = (void *)0;
  
#line 372 
  goto return_label;
  ldv_call_21: 
#line 375 
  ;
  
#line 378 
  tmp_3 = ldv_undef_int();
  
#line 378 
  switch (tmp_3) {
    case 1: 
#line 379 
    ;
    
#line 388 
    goto ldv_call_21;
    case 2: 
#line 391 
    ;
    
#line 393 
    if (ldv_21_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 395 
      ldv_21_ret = (*(ldv_21_container->suspend))(ldv_21_resource_1,ldv_21_resource_0);
      
#line 397 
      ldv_21_ret = ldv_filter_err_code(ldv_21_ret);
    }
    else 
#line 399 
         ldv_21_ret = ldv_undef_int();
    
#line 404 
    if (ldv_21_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 406 
      ldv_21_ret = (*(ldv_21_container->suspend_late))(ldv_21_resource_1,ldv_21_resource_0);
      
#line 408 
      ldv_21_ret = ldv_filter_err_code(ldv_21_ret);
    }
    else 
#line 410 
         ldv_21_ret = ldv_undef_int();
    
#line 415 
    if (ldv_21_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 417 
      (*(ldv_21_container->resume_early))(ldv_21_resource_1); else ;
    
#line 422 
    if (ldv_21_container->resume != (int (*)(struct pci_dev *))0) 
#line 424 
                                                                  (*(ldv_21_container->resume))(ldv_21_resource_1); else ;
    
#line 432 
    goto ldv_call_21;
    case 3: 
#line 435 
    ;
    
#line 438 
    ldv_emg_wrapper_skge_shutdown_2(ldv_21_resource_1);
    
#line 443 
    ldv_emg_wrapper_skge_remove_4(ldv_21_resource_1);
    
#line 450 
    goto ldv_main_21;
    default: 
#line 453 
    ;
    
#line 453 
    __VERIFIER_assume(0);
  }
  
#line 456 
  __retres = (void *)0;
  return_label: 
#line 456 
                return __retres;
}


#line 461  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_14_3(struct file_operations *arg0)
{
  int ret;
  struct ldv_struct_character_driver_scenario_20 *cf_arg_20;
  int tmp;
  
#line 464 
  tmp = ldv_undef_int();
  
#line 464 
  switch (tmp) {
    case 0: 
#line 465 
    ;
    
#line 466 
    cf_arg_20 = (struct ldv_struct_character_driver_scenario_20 *)ldv_xmalloc(16UL);
    
#line 467 
    cf_arg_20->arg0 = arg0;
    
#line 468 
    ret = pthread_create(& ldv_thread_20,(pthread_attr_t const *)0,& ldv_character_driver_scenario_20,(void *)cf_arg_20);
    
#line 469 
    __VERIFIER_assume(ret == 0);
    
#line 470 
    goto ldv_45561;
    default: 
#line 472 
    ;
    
#line 472 
    __VERIFIER_assume(0);
  }
  ldv_45561: 
#line 473 
  ;
  
#line 474 
  return;
}


#line 478  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_12_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_16 *cf_arg_16;
  int tmp;
  
#line 481 
  tmp = ldv_undef_int();
  
#line 481 
  switch (tmp) {
    case 0: 
#line 482 
    ;
    
#line 483 
    cf_arg_16 = (struct ldv_struct_interrupt_scenario_16 *)ldv_xmalloc(32UL);
    
#line 484 
    cf_arg_16->arg0 = arg0;
    
#line 485 
    cf_arg_16->arg1 = arg1;
    
#line 486 
    cf_arg_16->arg2 = arg2;
    
#line 487 
    cf_arg_16->arg3 = arg3;
    
#line 488 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_interrupt_scenario_16,(void *)cf_arg_16);
    
#line 489 
    __VERIFIER_assume(ret == 0);
    
#line 490 
    goto ldv_45576;
    default: 
#line 492 
    ;
    
#line 492 
    __VERIFIER_assume(0);
  }
  ldv_45576: 
#line 493 
  ;
  
#line 494 
  return;
}


#line 498  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_4_netdev;
  int tmp_0;
  
#line 505 
  tmp_0 = ldv_undef_int();
  
#line 505 
  if (tmp_0 != 0) {
    
#line 507 
    ldv_4_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 511 
    __retres = ldv_4_netdev;
    
#line 511 
    goto return_label;
  }
  else {
    
#line 518 
    __retres = (struct net_device *)0;
    
#line 518 
    goto return_label;
  }
  return_label: 
#line 505 
                return __retres;
}


#line 528  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_11_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_21 *cf_arg_21;
  int tmp;
  
#line 531 
  tmp = ldv_undef_int();
  
#line 531 
  switch (tmp) {
    case 0: 
#line 532 
    ;
    
#line 533 
    cf_arg_21 = (struct ldv_struct_pci_scenario_21 *)ldv_xmalloc(16UL);
    
#line 534 
    cf_arg_21->arg0 = arg0;
    
#line 535 
    ret = pthread_create(& ldv_thread_21,(pthread_attr_t const *)0,& ldv_pci_scenario_21,(void *)cf_arg_21);
    
#line 536 
    __VERIFIER_assume(ret == 0);
    
#line 537 
    goto ldv_45590;
    default: 
#line 539 
    ;
    
#line 539 
    __VERIFIER_assume(0);
  }
  ldv_45590: 
#line 540 
  ;
  
#line 541 
  return;
}


#line 545  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_8_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_8 *cf_arg_16;
  int tmp;
  
#line 548 
  tmp = ldv_undef_int();
  
#line 548 
  switch (tmp) {
    case 0: 
#line 549 
    ;
    
#line 550 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 551 
    __VERIFIER_assume(ret == 0);
    
#line 552 
    goto ldv_45598;
    default: 
#line 554 
    ;
    
#line 554 
    __VERIFIER_assume(0);
  }
  ldv_45598: 
#line 555 
  ;
  
#line 556 
  return;
}


#line 560  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_17(void *arg0)
{
  void *__retres;
  struct ethtool_ringparam *ldv_17_ldv_param_1_28;
  struct ethtool_ringparam *ldv_17_ldv_param_1_13;
  struct ethtool_cmd *ldv_17_ldv_param_1_3;
  struct ethtool_drvinfo *ldv_17_ldv_param_1_10;
  void *ldv_17_ldv_param_1_15;
  struct sk_buff *ldv_17_ldv_param_0_14;
  unsigned char *ldv_17_ldv_param_2_27;
  struct ethtool_coalesce *ldv_17_ldv_param_1_29;
  struct ethtool_pauseparam *ldv_17_ldv_param_1_2;
  struct ethtool_cmd *ldv_17_ldv_param_1_4;
  enum ethtool_phys_id_state *ldv_17_ldv_param_1_5;
  struct ethtool_eeprom *ldv_17_ldv_param_1_11;
  unsigned long long *ldv_17_ldv_param_2_8;
  unsigned char *ldv_17_ldv_param_2_12;
  unsigned int ldv_17_ldv_param_1_26;
  struct net_device *ldv_17_container;
  int ldv_17_ldv_param_2_21;
  struct ethtool_eeprom *ldv_17_ldv_param_1_16;
  int ldv_17_ldv_param_1_18;
  struct ifreq *ldv_17_ldv_param_1_20;
  struct ethtool_stats *ldv_17_ldv_param_1_7;
  unsigned char *ldv_17_ldv_param_2_17;
  unsigned int ldv_17_ldv_param_1_6;
  int ldv_17_ldv_param_1_9;
  struct ethtool_wolinfo *ldv_17_ldv_param_1_23;
  struct ethtool_wolinfo *ldv_17_ldv_param_1_19;
  struct ethtool_regs *ldv_17_ldv_param_1_24;
  void *ldv_17_ldv_param_2_25;
  struct ethtool_coalesce *ldv_17_ldv_param_1_22;
  struct ethtool_pauseparam *ldv_17_ldv_param_1_30;
  int tmp_22;
  
#line 594 
  struct ldv_struct_random_allocationless_scenario_17 *data = (struct ldv_struct_random_allocationless_scenario_17 *)arg0;
  
#line 599 
  if (data != (struct ldv_struct_random_allocationless_scenario_17 *)0) {
    
#line 600 
    ldv_17_container = data->arg0;
    
#line 601 
    ldv_free((void *)data);
  }
  else ;
  
#line 609 
  goto ldv_call_17;
  
#line 611 
  __retres = (void *)0;
  
#line 611 
  goto return_label;
  ldv_call_17: 
#line 614 
  ;
  
#line 617 
  tmp_22 = ldv_undef_int();
  
#line 617 
  if (tmp_22 != 0) {
    int tmp_0;
    
#line 619 
    ldv_17_ldv_param_1_2 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    
#line 622 
    tmp_0 = ldv_undef_int();
    
#line 622 
    switch (tmp_0) {
      case 1: 
#line 623 
      ;
      
#line 626 
      ldv_emg_wrapper_skge_get_pauseparam_2(ldv_17_container,ldv_17_ldv_param_1_2);
      
#line 629 
      goto ldv_45636;
      case 2: 
#line 631 
      ;
      
#line 634 
      ldv_emg_wrapper_skge_set_multicast_7(ldv_17_container);
      
#line 637 
      goto ldv_45636;
      case 3: 
#line 639 
      ;
      
#line 642 
      ldv_emg_wrapper_skge_nway_reset_27(ldv_17_container);
      
#line 645 
      goto ldv_45636;
      case 4: 
#line 647 
      ;
      
#line 649 
      ldv_17_ldv_param_1_30 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 654 
      ldv_emg_wrapper_skge_set_pauseparam_32(ldv_17_container,ldv_17_ldv_param_1_30);
      
#line 658 
      ldv_free((void *)ldv_17_ldv_param_1_30);
      
#line 661 
      goto ldv_45636;
      case 5: 
#line 663 
      ;
      
#line 665 
      ldv_17_ldv_param_1_29 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 670 
      ldv_emg_wrapper_skge_set_coalesce_31(ldv_17_container,ldv_17_ldv_param_1_29);
      
#line 674 
      ldv_free((void *)ldv_17_ldv_param_1_29);
      
#line 677 
      goto ldv_45636;
      case 6: 
#line 679 
      ;
      
#line 682 
      ldv_emg_wrapper_skge_get_regs_len_30(ldv_17_container);
      
#line 685 
      goto ldv_45636;
      case 7: 
#line 687 
      ;
      
#line 689 
      ldv_17_ldv_param_1_28 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 694 
      ldv_emg_wrapper_skge_get_ring_param_12(ldv_17_container,ldv_17_ldv_param_1_28);
      
#line 698 
      ldv_free((void *)ldv_17_ldv_param_1_28);
      
#line 701 
      goto ldv_45636;
      case 8: 
#line 703 
      ;
      
#line 705 
      ldv_17_ldv_param_2_27 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 710 
      ldv_emg_wrapper_skge_get_strings_6(ldv_17_container,ldv_17_ldv_param_1_26,ldv_17_ldv_param_2_27);
      
#line 714 
      ldv_free((void *)ldv_17_ldv_param_2_27);
      
#line 717 
      goto ldv_45636;
      case 9: 
#line 719 
      ;
      
#line 722 
      ldv_emg_wrapper_skge_netpoll_33(ldv_17_container);
      
#line 725 
      goto ldv_45636;
      case 10: 
#line 727 
      ;
      
#line 730 
      ldv_emg_wrapper_skge_get_stats_26(ldv_17_container);
      
#line 733 
      goto ldv_45636;
      case 11: 
#line 735 
      ;
      
#line 738 
      ldv_emg_wrapper_skge_tx_timeout_20(ldv_17_container);
      
#line 741 
      goto ldv_45636;
      case 12: 
#line 743 
      ;
      
#line 745 
      ldv_17_ldv_param_2_25 = ldv_xmalloc_unknown_size(0UL);
      
#line 746 
      ldv_17_ldv_param_1_24 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
      
#line 751 
      ldv_emg_wrapper_skge_get_regs_24(ldv_17_container,ldv_17_ldv_param_1_24,ldv_17_ldv_param_2_25);
      
#line 755 
      ldv_free(ldv_17_ldv_param_2_25);
      
#line 756 
      ldv_free((void *)ldv_17_ldv_param_1_24);
      
#line 759 
      goto ldv_45636;
      case 13: 
#line 761 
      ;
      
#line 763 
      ldv_17_ldv_param_1_23 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 768 
      ldv_emg_wrapper_skge_set_wol_23(ldv_17_container,ldv_17_ldv_param_1_23);
      
#line 772 
      ldv_free((void *)ldv_17_ldv_param_1_23);
      
#line 775 
      goto ldv_45636;
      case 14: 
#line 777 
      ;
      
#line 779 
      ldv_17_ldv_param_1_22 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 784 
      ldv_emg_wrapper_skge_get_coalesce_22(ldv_17_container,ldv_17_ldv_param_1_22);
      
#line 788 
      ldv_free((void *)ldv_17_ldv_param_1_22);
      
#line 791 
      goto ldv_45636;
      case 15: 
#line 793 
      ;
      
#line 795 
      ldv_17_ldv_param_1_20 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
      
#line 800 
      ldv_emg_wrapper_skge_ioctl_29(ldv_17_container,ldv_17_ldv_param_1_20,ldv_17_ldv_param_2_21);
      
#line 804 
      ldv_free((void *)ldv_17_ldv_param_1_20);
      
#line 807 
      goto ldv_45636;
      case 16: 
#line 809 
      ;
      
#line 811 
      ldv_17_ldv_param_1_19 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 816 
      ldv_emg_wrapper_skge_get_wol_21(ldv_17_container,ldv_17_ldv_param_1_19);
      
#line 820 
      ldv_free((void *)ldv_17_ldv_param_1_19);
      
#line 823 
      goto ldv_45636;
      case 17: 
#line 825 
      ;
      
#line 831 
      ldv_emg_wrapper_skge_get_sset_count_25(ldv_17_container,ldv_17_ldv_param_1_18);
      
#line 837 
      goto ldv_45636;
      case 18: 
#line 839 
      ;
      
#line 841 
      ldv_17_ldv_param_2_17 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 842 
      ldv_17_ldv_param_1_16 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 847 
      ldv_emg_wrapper_skge_get_eeprom_3(ldv_17_container,ldv_17_ldv_param_1_16,ldv_17_ldv_param_2_17);
      
#line 851 
      ldv_free((void *)ldv_17_ldv_param_2_17);
      
#line 852 
      ldv_free((void *)ldv_17_ldv_param_1_16);
      
#line 855 
      goto ldv_45636;
      case 19: 
#line 857 
      ;
      
#line 859 
      ldv_17_ldv_param_1_15 = ldv_xmalloc_unknown_size(0UL);
      
#line 864 
      ldv_emg_wrapper_skge_set_mac_address_18(ldv_17_container,ldv_17_ldv_param_1_15);
      
#line 868 
      ldv_free(ldv_17_ldv_param_1_15);
      
#line 871 
      goto ldv_45636;
      case 20: 
#line 873 
      ;
      
#line 875 
      ldv_17_ldv_param_0_14 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 880 
      ldv_emg_wrapper_skge_xmit_frame_17(ldv_17_ldv_param_0_14,ldv_17_container);
      
#line 884 
      ldv_free((void *)ldv_17_ldv_param_0_14);
      
#line 887 
      goto ldv_45636;
      case 21: 
#line 889 
      ;
      
#line 892 
      ldv_emg_wrapper_skge_get_msglevel_16(ldv_17_container);
      
#line 895 
      goto ldv_45636;
      case 22: 
#line 897 
      ;
      
#line 899 
      ldv_17_ldv_param_1_13 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 904 
      ldv_emg_wrapper_skge_set_ring_param_15(ldv_17_container,ldv_17_ldv_param_1_13);
      
#line 908 
      ldv_free((void *)ldv_17_ldv_param_1_13);
      
#line 911 
      goto ldv_45636;
      case 23: 
#line 913 
      ;
      
#line 915 
      ldv_17_ldv_param_2_12 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 916 
      ldv_17_ldv_param_1_11 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 921 
      ldv_emg_wrapper_skge_set_eeprom_14(ldv_17_container,ldv_17_ldv_param_1_11,ldv_17_ldv_param_2_12);
      
#line 925 
      ldv_free((void *)ldv_17_ldv_param_2_12);
      
#line 926 
      ldv_free((void *)ldv_17_ldv_param_1_11);
      
#line 929 
      goto ldv_45636;
      case 24: 
#line 931 
      ;
      
#line 934 
      ldv_emg_wrapper_skge_get_eeprom_len_34(ldv_17_container);
      
#line 937 
      goto ldv_45636;
      case 25: 
#line 939 
      ;
      
#line 941 
      ldv_17_ldv_param_1_10 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 946 
      ldv_emg_wrapper_skge_get_drvinfo_13(ldv_17_container,ldv_17_ldv_param_1_10);
      
#line 950 
      ldv_free((void *)ldv_17_ldv_param_1_10);
      
#line 953 
      goto ldv_45636;
      case 26: 
#line 955 
      ;
      
#line 958 
      (*ldv_emg_alias_ethtool_op_get_link_11)(ldv_17_container);
      
#line 961 
      goto ldv_45636;
      case 27: 
#line 963 
      ;
      
#line 969 
      ldv_emg_wrapper_skge_change_mtu_8(ldv_17_container,ldv_17_ldv_param_1_9);
      
#line 975 
      goto ldv_45636;
      case 28: 
#line 977 
      ;
      
#line 979 
      ldv_17_ldv_param_1_7 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 980 
      ldv_17_ldv_param_2_8 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 985 
      ldv_emg_wrapper_skge_get_ethtool_stats_9(ldv_17_container,ldv_17_ldv_param_1_7,ldv_17_ldv_param_2_8);
      
#line 989 
      ldv_free((void *)ldv_17_ldv_param_1_7);
      
#line 990 
      ldv_free((void *)ldv_17_ldv_param_2_8);
      
#line 993 
      goto ldv_45636;
      case 29: 
#line 995 
      ;
      
#line 998 
      (*ldv_emg_alias_eth_validate_addr_10)(ldv_17_container);
      
#line 1001 
      goto ldv_45636;
      case 30: 
#line 1003 
      ;
      
#line 1009 
      ldv_emg_wrapper_skge_set_msglevel_28(ldv_17_container,ldv_17_ldv_param_1_6);
      
#line 1015 
      goto ldv_45636;
      case 31: 
#line 1017 
      ;
      
#line 1019 
      ldv_17_ldv_param_1_5 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
      
#line 1024 
      ldv_emg_wrapper_skge_set_phys_id_5(ldv_17_container,*ldv_17_ldv_param_1_5);
      
#line 1028 
      ldv_free((void *)ldv_17_ldv_param_1_5);
      
#line 1031 
      goto ldv_45636;
      case 32: 
#line 1033 
      ;
      
#line 1035 
      ldv_17_ldv_param_1_4 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1040 
      ldv_emg_wrapper_skge_set_settings_4(ldv_17_container,ldv_17_ldv_param_1_4);
      
#line 1044 
      ldv_free((void *)ldv_17_ldv_param_1_4);
      
#line 1047 
      goto ldv_45636;
      case 33: 
#line 1049 
      ;
      
#line 1051 
      ldv_17_ldv_param_1_3 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1056 
      ldv_emg_wrapper_skge_get_settings_19(ldv_17_container,ldv_17_ldv_param_1_3);
      
#line 1060 
      ldv_free((void *)ldv_17_ldv_param_1_3);
      
#line 1063 
      goto ldv_45636;
      default: 
#line 1065 
      ;
      
#line 1065 
      __VERIFIER_assume(0);
    }
    ldv_45636: 
#line 1068 
    ;
    
#line 1068 
    ldv_free((void *)ldv_17_ldv_param_1_2);
    
#line 1075 
    goto ldv_call_17;
  }
  else {
    
#line 1083 
    __retres = (void *)0;
    
#line 1083 
    goto return_label;
  }
  
#line 1086 
  __retres = (void *)0;
  return_label: 
#line 1086 
                return __retres;
}


#line 1091  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_20(void *arg0)
{
  void *__retres;
  struct file *ldv_20_resource_1;
  int ldv_20_ldv_param_2_3;
  long long ldv_20_ldv_param_1_2;
  char *ldv_20_ldv_param_1_4;
  struct inode *ldv_20_resource_0;
  unsigned long ldv_20_size_cnt;
  long long *ldv_20_ldv_param_3_5;
  char *ldv_20_ldv_param_1_6;
  long long *ldv_20_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1102 
  struct file_operations *ldv_20_container = ldv_emg_alias_skge_debug_fops_2;
  
#line 1103 
  int ldv_20_ret = ldv_undef_int();
  
#line 1106 
  struct ldv_struct_character_driver_scenario_20 *data = (struct ldv_struct_character_driver_scenario_20 *)arg0;
  
#line 1110 
  ldv_20_ret = ldv_undef_int();
  
#line 1113 
  if (data != (struct ldv_struct_character_driver_scenario_20 *)0) {
    
#line 1114 
    ldv_20_container = data->arg0;
    
#line 1115 
    ldv_free((void *)data);
  }
  else ;
  
#line 1120 
  ldv_20_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1121 
  tmp_1 = ldv_undef_int();
  
#line 1121 
  ldv_20_size_cnt = (unsigned long)tmp_1;
  
#line 1128 
  goto ldv_main_20;
  
#line 1130 
  __retres = (void *)0;
  
#line 1130 
  goto return_label;
  ldv_main_20: 
#line 1133 
  ;
  
#line 1136 
  tmp_3 = ldv_undef_int();
  
#line 1136 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1139 
    ldv_20_ret = ldv_emg_wrapper_skge_debug_open_5(ldv_20_resource_0,ldv_20_resource_1);
    
#line 1141 
    ldv_20_ret = ldv_filter_err_code(ldv_20_ret);
    
#line 1144 
    tmp_2 = ldv_undef_int();
    
#line 1144 
    if (tmp_2 != 0) {
      
#line 1146 
      __VERIFIER_assume(ldv_20_ret == 0);
      
#line 1153 
      goto ldv_call_20;
    }
    else {
      
#line 1157 
      __VERIFIER_assume(ldv_20_ret != 0);
      
#line 1164 
      goto ldv_main_20;
    }
  }
  else {
    
#line 1169 
    ldv_free((void *)ldv_20_resource_0);
    
#line 1177 
    __retres = (void *)0;
    
#line 1177 
    goto return_label;
  }
  
#line 1180 
  __retres = (void *)0;
  
#line 1180 
  goto return_label;
  ldv_call_20: 
#line 1183 
  ;
  
#line 1186 
  tmp_4 = ldv_undef_int();
  
#line 1186 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 1187 
    ;
    
#line 1189 
    ldv_20_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1190 
    ldv_20_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1194 
    if (ldv_20_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 1200 
      __VERIFIER_assume(ldv_20_size_cnt <= 2147479552UL);
      
#line 1202 
      (*(ldv_20_container->write))(ldv_20_resource_1,(char const *)ldv_20_ldv_param_1_6,ldv_20_size_cnt,ldv_20_ldv_param_3_7);
    }
    else ;
    
#line 1207 
    ldv_free((void *)ldv_20_ldv_param_1_6);
    
#line 1208 
    ldv_free((void *)ldv_20_ldv_param_3_7);
    
#line 1215 
    goto ldv_call_20;
    case 2: 
#line 1218 
    ;
    
#line 1221 
    (*ldv_emg_alias_single_release_4)(ldv_20_resource_0,ldv_20_resource_1);
    
#line 1228 
    goto ldv_main_20;
    case 3: 
#line 1231 
    ;
    
#line 1235 
    tmp_9 = ldv_undef_int();
    
#line 1235 
    if (tmp_9 != 0) 
#line 1238 
                    (*ldv_emg_alias_seq_lseek_2)(ldv_20_resource_1,ldv_20_ldv_param_1_2,ldv_20_ldv_param_2_3);
    else {
      
#line 1244 
      ldv_20_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1245 
      ldv_20_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1250 
      (*ldv_emg_alias_seq_read_3)(ldv_20_resource_1,ldv_20_ldv_param_1_4,ldv_20_size_cnt,ldv_20_ldv_param_3_5);
      
#line 1254 
      ldv_free((void *)ldv_20_ldv_param_3_5);
      
#line 1255 
      ldv_free((void *)ldv_20_ldv_param_1_4);
    }
    
#line 1259 
    goto ldv_45690;
    default: 
#line 1261 
    ;
    
#line 1261 
    __VERIFIER_assume(0);
  }
  ldv_45690: 
#line 1270 
  ;
  
#line 1270 
  goto ldv_call_20;
  
#line 1272 
  __retres = (void *)0;
  return_label: 
#line 1272 
                return __retres;
}


#line 1277  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_12_line;
  void *ldv_12_data;
  enum irqreturn (*ldv_12_thread)(int , void *);
  int tmp_0;
  
#line 1282 
  enum irqreturn (*ldv_12_callback)(int , void *) = & ldv_emg_wrapper_skge_intr_2;
  
#line 1287 
  tmp_0 = ldv_undef_int();
  
#line 1287 
  if (tmp_0 != 0) {
    
#line 1289 
    ldv_12_line = (int)arg0;
    
#line 1290 
    ldv_12_callback = arg1;
    
#line 1291 
    ldv_12_thread = (enum irqreturn (*)(int , void *))0;
    
#line 1292 
    ldv_12_data = arg4;
    
#line 1296 
    ldv_dispatch_irq_register_12_3(ldv_12_line,ldv_12_callback,ldv_12_thread,ldv_12_data);
    
#line 1300 
    __retres = 0;
    
#line 1300 
    goto return_label;
  }
  else {
    int tmp;
    
#line 1307 
    tmp = ldv_undef_int_negative();
    
#line 1307 
    __retres = tmp;
    
#line 1307 
    goto return_label;
  }
  return_label: 
#line 1287 
                return __retres;
}


#line 1317  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_16(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_16_ret_val;
  int ldv_16_line;
  void *ldv_16_data;
  enum irqreturn (*ldv_16_thread)(int , void *);
  int tmp;
  
#line 1323 
  enum irqreturn (*ldv_16_callback)(int , void *) = & ldv_emg_wrapper_skge_intr_2;
  
#line 1326 
  struct ldv_struct_interrupt_scenario_16 *data = (struct ldv_struct_interrupt_scenario_16 *)arg0;
  
#line 1331 
  if (data != (struct ldv_struct_interrupt_scenario_16 *)0) {
    
#line 1332 
    ldv_16_line = data->arg0;
    
#line 1333 
    ldv_16_callback = data->arg1;
    
#line 1334 
    ldv_16_thread = data->arg2;
    
#line 1335 
    ldv_16_data = data->arg3;
    
#line 1336 
    ldv_free((void *)data);
  }
  else ;
  
#line 1342 
  ldv_switch_to_interrupt_context();
  
#line 1344 
  ldv_16_ret_val = ldv_emg_wrapper_skge_intr_2(ldv_16_line,ldv_16_data);
  
#line 1346 
  ldv_switch_to_process_context();
  
#line 1349 
  tmp = ldv_undef_int();
  
#line 1349 
  if (tmp != 0) {
    
#line 1351 
    __VERIFIER_assume(ldv_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 1355 
    if (ldv_16_thread != (enum irqreturn (*)(int , void *))0) 
#line 1357 
                                                              (*ldv_16_thread)(ldv_16_line,ldv_16_data); else ;
  }
  else 
#line 1364 
       __VERIFIER_assume(ldv_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 1373 
  __retres = (void *)0;
  
#line 1373 
  goto return_label;
  
#line 1375 
  __retres = (void *)0;
  return_label: 
#line 1375 
                return __retres;
}


#line 1380  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_18(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_18_container;
  
#line 1385 
  struct ldv_struct_timer_scenario_18 *data = (struct ldv_struct_timer_scenario_18 *)arg0;
  
#line 1390 
  if (data != (struct ldv_struct_timer_scenario_18 *)0) {
    
#line 1391 
    ldv_18_container = data->arg0;
    
#line 1392 
    ldv_free((void *)data);
  }
  else ;
  
#line 1397 
  if (ldv_18_container->function != (void (*)(unsigned long ))0) {
    
#line 1399 
    ldv_switch_to_interrupt_context();
    
#line 1401 
    (*(ldv_18_container->function))(ldv_18_container->data);
    
#line 1403 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 1412 
  __retres = (void *)0;
  
#line 1412 
  goto return_label;
  
#line 1414 
  __retres = (void *)0;
  return_label: 
#line 1414 
                return __retres;
}


#line 1419  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_9_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_21 *cf_arg_21;
  int tmp;
  
#line 1422 
  tmp = ldv_undef_int();
  
#line 1422 
  switch (tmp) {
    case 0: 
#line 1423 
    ;
    
#line 1424 
    ret = pthread_join(ldv_thread_21,(void **)0);
    
#line 1425 
    __VERIFIER_assume(ret == 0);
    
#line 1426 
    goto ldv_45733;
    default: 
#line 1428 
    ;
    
#line 1428 
    __VERIFIER_assume(0);
  }
  ldv_45733: 
#line 1429 
  ;
  
#line 1430 
  return;
}


#line 1434  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 1441 
  ldv_1_ret = ldv_emg_skge_init_module();
  
#line 1442 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 1445 
  tmp = ldv_undef_int();
  
#line 1445 
  if (tmp != 0) {
    
#line 1447 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 1451 
    __retres = (void *)0;
    
#line 1451 
    goto return_label;
  }
  else {
    
#line 1455 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 1460 
    ldv_emg_skge_cleanup_module();
    
#line 1464 
    __retres = (void *)0;
    
#line 1464 
    goto return_label;
  }
  
#line 1467 
  __retres = (void *)0;
  return_label: 
#line 1467 
                return __retres;
}


#line 1472  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_13_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_18 *cf_arg_18;
  int tmp;
  
#line 1475 
  tmp = ldv_undef_int();
  
#line 1475 
  switch (tmp) {
    case 0: 
#line 1476 
    ;
    
#line 1477 
    ret = pthread_join(ldv_thread_18,(void **)0);
    
#line 1478 
    __VERIFIER_assume(ret == 0);
    
#line 1479 
    goto ldv_45745;
    default: 
#line 1481 
    ;
    
#line 1481 
    __VERIFIER_assume(0);
  }
  ldv_45745: 
#line 1482 
  ;
  
#line 1483 
  return;
}


#line 1487  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 1490 
  ldv_initialize();
  
#line 1493 
  ldv_initialization_1((void *)0);
  
#line 1495 
  __retres = 0;
  
#line 1495 
  return __retres;
}


#line 1500  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pm_ops_scenario_19(void *arg0)
{
  void *__retres;
  struct device *ldv_19_device;
  int tmp;
  
#line 1503 
  struct dev_pm_ops *ldv_19_pm_ops = ldv_emg_alias_skge_pm_ops_3;
  
#line 1514 
  goto ldv_do_19;
  
#line 1516 
  __retres = (void *)0;
  
#line 1516 
  goto return_label;
  ldv_do_19: 
#line 1519 
  ;
  
#line 1522 
  tmp = ldv_undef_int();
  
#line 1522 
  switch (tmp) {
    int tmp_0;
    case 1: 
#line 1523 
    ;
    
#line 1525 
    if (ldv_19_pm_ops->runtime_idle != (int (*)(struct device *))0) 
#line 1527 
                                                                    (*(ldv_19_pm_ops->runtime_idle))(ldv_19_device); else ;
    
#line 1535 
    goto ldv_do_19;
    case 2: 
#line 1538 
    ;
    
#line 1540 
    if (ldv_19_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      
#line 1542 
      (*(ldv_19_pm_ops->runtime_suspend))(ldv_19_device); else ;
    
#line 1547 
    if (ldv_19_pm_ops->runtime_resume != (int (*)(struct device *))0) 
      
#line 1549 
      (*(ldv_19_pm_ops->runtime_resume))(ldv_19_device); else ;
    
#line 1557 
    goto ldv_do_19;
    case 3: 
#line 1560 
    ;
    
#line 1562 
    if (ldv_19_pm_ops->prepare != (int (*)(struct device *))0) 
#line 1564 
                                                               (*(ldv_19_pm_ops->prepare))(ldv_19_device); else ;
    
#line 1568 
    tmp_0 = ldv_undef_int();
    
#line 1568 
    switch (tmp_0) {
      int tmp_1;
      int tmp_2;
      int tmp_3;
      case 1: 
#line 1569 
      ;
      
#line 1572 
      ldv_emg_wrapper_skge_suspend_2(ldv_19_device);
      
#line 1575 
      tmp_1 = ldv_undef_int();
      
#line 1575 
      if (tmp_1 != 0) {
        
#line 1577 
        if (ldv_19_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
          
#line 1579 
          (*(ldv_19_pm_ops->suspend_noirq))(ldv_19_device); else ;
        
#line 1584 
        if (ldv_19_pm_ops->resume_noirq != (int (*)(struct device *))0) 
          
#line 1586 
          (*(ldv_19_pm_ops->resume_noirq))(ldv_19_device); else ;
      }
      else {
        
#line 1593 
        if (ldv_19_pm_ops->suspend_late != (int (*)(struct device *))0) 
          
#line 1595 
          (*(ldv_19_pm_ops->suspend_late))(ldv_19_device); else ;
        
#line 1600 
        if (ldv_19_pm_ops->resume_early != (int (*)(struct device *))0) 
          
#line 1602 
          (*(ldv_19_pm_ops->resume_early))(ldv_19_device); else ;
      }
      
#line 1609 
      ldv_emg_wrapper_skge_resume_4(ldv_19_device);
      
#line 1612 
      goto ldv_45760;
      case 2: 
#line 1614 
      ;
      
#line 1617 
      ldv_emg_wrapper_skge_suspend_2(ldv_19_device);
      
#line 1620 
      tmp_2 = ldv_undef_int();
      
#line 1620 
      if (tmp_2 != 0) {
        
#line 1622 
        if (ldv_19_pm_ops->freeze_late != (int (*)(struct device *))0) 
          
#line 1624 
          (*(ldv_19_pm_ops->freeze_late))(ldv_19_device); else ;
        
#line 1629 
        if (ldv_19_pm_ops->thaw_early != (int (*)(struct device *))0) 
          
#line 1631 
          (*(ldv_19_pm_ops->thaw_early))(ldv_19_device); else ;
      }
      else {
        
#line 1638 
        if (ldv_19_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
          
#line 1640 
          (*(ldv_19_pm_ops->freeze_noirq))(ldv_19_device); else ;
        
#line 1645 
        if (ldv_19_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
          
#line 1647 
          (*(ldv_19_pm_ops->thaw_noirq))(ldv_19_device); else ;
      }
      
#line 1654 
      ldv_emg_wrapper_skge_resume_4(ldv_19_device);
      
#line 1657 
      goto ldv_45760;
      case 3: 
#line 1659 
      ;
      
#line 1662 
      ldv_emg_wrapper_skge_suspend_2(ldv_19_device);
      
#line 1665 
      tmp_3 = ldv_undef_int();
      
#line 1665 
      if (tmp_3 != 0) {
        
#line 1667 
        if (ldv_19_pm_ops->poweroff_late != (int (*)(struct device *))0) 
          
#line 1669 
          (*(ldv_19_pm_ops->poweroff_late))(ldv_19_device); else ;
        
#line 1674 
        if (ldv_19_pm_ops->restore_early != (int (*)(struct device *))0) 
          
#line 1676 
          (*(ldv_19_pm_ops->restore_early))(ldv_19_device); else ;
      }
      else {
        
#line 1683 
        if (ldv_19_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
          
#line 1685 
          (*(ldv_19_pm_ops->poweroff_noirq))(ldv_19_device); else ;
        
#line 1690 
        if (ldv_19_pm_ops->restore_noirq != (int (*)(struct device *))0) 
          
#line 1692 
          (*(ldv_19_pm_ops->restore_noirq))(ldv_19_device); else ;
      }
      
#line 1699 
      ldv_emg_wrapper_skge_resume_4(ldv_19_device);
      
#line 1702 
      goto ldv_45760;
      default: 
#line 1704 
      ;
      
#line 1704 
      __VERIFIER_assume(0);
    }
    ldv_45760: 
#line 1707 
    ;
    
#line 1707 
    if (ldv_19_pm_ops->complete != (void (*)(struct device *))0) 
#line 1709 
                                                                 (*(ldv_19_pm_ops->complete))(ldv_19_device); else ;
    
#line 1717 
    goto ldv_do_19;
    case 4: 
#line 1720 
    ;
    
#line 1726 
    __retres = (void *)0;
    
#line 1726 
    goto return_label;
    default: 
#line 1729 
    ;
    
#line 1729 
    __VERIFIER_assume(0);
  }
  
#line 1732 
  __retres = (void *)0;
  return_label: 
#line 1732 
                return __retres;
}


#line 1737  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_debugfs_remove(struct dentry *arg0)
{
  struct dentry *ldv_6_dentry;
  
#line 1741 
  struct file_operations *ldv_6_file_operations = ldv_emg_alias_skge_debug_fops_2;
  
#line 1744 
  ldv_6_dentry = arg0;
  
#line 1745 
  ldv_free((void *)ldv_6_dentry);
  
#line 1749 
  ldv_dispatch_deregister_6_1(ldv_6_file_operations);
  
#line 1753 
  goto return_label;
  return_label: 
#line 1755 
                return;
}


#line 1760  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_13_timer_list;
  
#line 1766 
  ldv_13_timer_list = arg0;
  
#line 1770 
  ldv_dispatch_instance_deregister_13_1(ldv_13_timer_list);
  
#line 1771 
  ;
  
#line 1771 
  __retres = 0;
  
#line 1771 
  return __retres;
}


#line 1779  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 1782 
  struct pci_driver *ldv_9_pci_driver = ldv_emg_alias_skge_driver_2;
  
#line 1785 
  ldv_9_pci_driver = arg0;
  
#line 1789 
  ldv_dispatch_deregister_9_1(ldv_9_pci_driver);
  
#line 1793 
  goto return_label;
  return_label: 
#line 1795 
                return;
}


#line 1800  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_10_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_17 *cf_arg_17;
  int tmp;
  
#line 1803 
  tmp = ldv_undef_int();
  
#line 1803 
  switch (tmp) {
    case 0: 
#line 1804 
    ;
    
#line 1805 
    cf_arg_17 = (struct ldv_struct_random_allocationless_scenario_17 *)ldv_xmalloc(16UL);
    
#line 1806 
    cf_arg_17->arg0 = arg0;
    
#line 1807 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_17,(void *)cf_arg_17);
    
#line 1808 
    __VERIFIER_assume(ret == 0);
    
#line 1809 
    goto ldv_45785;
    default: 
#line 1811 
    ;
    
#line 1811 
    __VERIFIER_assume(0);
  }
  ldv_45785: 
#line 1812 
  ;
  
#line 1813 
  return;
}


#line 1817  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_18 *cf_arg_18;
  int tmp;
  
#line 1820 
  tmp = ldv_undef_int();
  
#line 1820 
  switch (tmp) {
    case 0: 
#line 1821 
    ;
    
#line 1822 
    cf_arg_18 = (struct ldv_struct_timer_scenario_18 *)ldv_xmalloc(16UL);
    
#line 1823 
    cf_arg_18->arg0 = arg0;
    
#line 1824 
    ret = pthread_create(& ldv_thread_18,(pthread_attr_t const *)0,& ldv_timer_scenario_18,(void *)cf_arg_18);
    
#line 1825 
    __VERIFIER_assume(ret == 0);
    
#line 1826 
    goto ldv_45793;
    default: 
#line 1828 
    ;
    
#line 1828 
    __VERIFIER_assume(0);
  }
  ldv_45793: 
#line 1829 
  ;
  
#line 1830 
  return;
}


#line 1834  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_5_netdev;
  
#line 1840 
  ldv_5_netdev = arg0;
  
#line 1845 
  ldv_emg_wrapper_skge_down_2(ldv_5_netdev);
  
#line 1849 
  ldv_dispatch_deregister_5_1(ldv_5_netdev);
  
#line 1853 
  goto return_label;
  return_label: 
#line 1855 
                return;
}


#line 1860  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_8_line;
  
#line 1866 
  ldv_8_line = (int)arg0;
  
#line 1870 
  ldv_dispatch_irq_deregister_8_1(ldv_8_line);
  
#line 1874 
  goto return_label;
  return_label: 
#line 1876 
                return;
}


#line 1881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_10_netdev;
  int tmp_3;
  
#line 1885 
  int ldv_10_ret = ldv_undef_int();
  
#line 1888 
  ldv_10_ret = ldv_undef_int();
  
#line 1891 
  tmp_3 = ldv_undef_int();
  
#line 1891 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 1893 
    ldv_10_netdev = arg0;
    
#line 1898 
    ldv_10_ret = ldv_emg_wrapper_skge_up_2(ldv_10_netdev);
    
#line 1901 
    tmp_1 = ldv_undef_int();
    
#line 1901 
    if (tmp_1 != 0) {
      
#line 1903 
      __VERIFIER_assume(ldv_10_ret == 0);
      
#line 1907 
      ldv_dispatch_register_10_4(ldv_10_netdev);
      
#line 1911 
      __retres = 0;
      
#line 1911 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 1918 
      __VERIFIER_assume(ldv_10_ret != 0);
      
#line 1919 
      ldv_failed_register_netdev();
      
#line 1920 
      tmp_0 = ldv_undef_int_negative();
      
#line 1920 
      __retres = tmp_0;
      
#line 1920 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 1928 
    ldv_failed_register_netdev();
    
#line 1929 
    tmp_2 = ldv_undef_int_negative();
    
#line 1929 
    __retres = tmp_2;
    
#line 1929 
    goto return_label;
  }
  return_label: 
#line 1891 
                return __retres;
}


#line 1939  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_6_1(struct file_operations *arg0)
{
  int ret;
  struct ldv_struct_character_driver_scenario_20 *cf_arg_20;
  int tmp;
  
#line 1942 
  tmp = ldv_undef_int();
  
#line 1942 
  switch (tmp) {
    case 0: 
#line 1943 
    ;
    
#line 1944 
    ret = pthread_join(ldv_thread_20,(void **)0);
    
#line 1945 
    __VERIFIER_assume(ret == 0);
    
#line 1946 
    goto ldv_45815;
    default: 
#line 1948 
    ;
    
#line 1948 
    __VERIFIER_assume(0);
  }
  ldv_45815: 
#line 1949 
  ;
  
#line 1950 
  return;
}


#line 1954  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 1960 
  ldv_2_netdev = arg0;
  
#line 1961 
  ldv_free((void *)ldv_2_netdev);
  
#line 1965 
  goto return_label;
  return_label: 
#line 1967 
                return;
}


#line 1972  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/skge.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_3_timer_list;
  int tmp_0;
  
#line 1979 
  tmp_0 = ldv_undef_int();
  
#line 1979 
  if (tmp_0 != 0) {
    
#line 1981 
    ldv_3_timer_list = arg0;
    
#line 1985 
    ldv_dispatch_instance_register_3_3(ldv_3_timer_list);
    
#line 1989 
    __retres = 0;
    
#line 1989 
    goto return_label;
  }
  else {
    int tmp;
    
#line 1996 
    tmp = ldv_undef_int_negative();
    
#line 1996 
    __retres = tmp;
    
#line 1996 
    goto return_label;
  }
  return_label: 
#line 1979 
                return __retres;
}


