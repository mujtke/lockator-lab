/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __le64;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104 
struct pollfd;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_46 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_46 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_47 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_47 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct vm_area_struct;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_48 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_48 nodemask_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 201 
struct rw_semaphore;

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 251 
enum hrtimer_restart;

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_50 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_49 {
   struct __anonstruct_50 __anonCompField___anonunion_49_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_49 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11996 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_115 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_115 mm_context_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmod.h"
struct cred;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/elf.h"
struct inode;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_148 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_149 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_147 {
   struct __anonstruct_148 __anonCompField___anonunion_147_33 ;
   struct __anonstruct_149 __anonCompField___anonunion_147_34 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_147 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_150 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_152 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_156 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_155 {
   atomic_t _mapcount ;
   struct __anonstruct_156 __anonCompField___anonunion_155_38 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_154 {
   union __anonunion_155 __anonCompField___anonstruct_154_39 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_153 {
   unsigned long counters ;
   struct __anonstruct_154 __anonCompField___anonunion_153_40 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_151 {
   union __anonunion_152 __anonCompField___anonstruct_151_37 ;
   union __anonunion_153 __anonCompField___anonstruct_151_41 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_158 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_159 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_157 {
   struct list_head lru ;
   struct __anonstruct_158 __anonCompField___anonunion_157_43 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_159 __anonCompField___anonunion_157_44 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_160 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_150 __anonCompField_page_36 ;
   struct __anonstruct_151 __anonCompField_page_42 ;
   union __anonunion_157 __anonCompField_page_45 ;
   union __anonunion_160 __anonCompField_page_46 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_161 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
union __anonunion_166 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_166 __anonCompField_idr_layer_47 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_171 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_171 __anonCompField_kernfs_node_48 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
struct sock;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_172 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_172 __anonCompField_kernel_param_49 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 796 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irq.h"
struct proc_dir_entry;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hardirq.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};

#line 652 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct pdev_archdata {
   
};

#line 15 
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 688 
struct dma_coherent_mem;

#line 688 
struct cma;

#line 688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_191 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_191 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_193 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_194 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_195 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_196 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_198 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_197 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_198 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_199 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_200 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_192 {
   int _pad[28U] ;
   struct __anonstruct__kill_193 _kill ;
   struct __anonstruct__timer_194 _timer ;
   struct __anonstruct__rt_195 _rt ;
   struct __anonstruct__sigchld_196 _sigchld ;
   struct __anonstruct__sigfault_197 _sigfault ;
   struct __anonstruct__sigpoll_199 _sigpoll ;
   struct __anonstruct__sigsys_200 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_192 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_207 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_208 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_210 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_209 {
   struct keyring_index_key index_key ;
   struct __anonstruct_210 __anonCompField___anonunion_209_59 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_211 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_213 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_212 {
   union __anonunion_payload_213 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_207 __anonCompField_key_57 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_208 __anonCompField_key_58 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_209 __anonCompField_key_60 ;
   union __anonunion_type_data_211 type_data ;
   union __anonunion_212 __anonCompField_key_61 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct backing_dev_info;

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1138 
struct io_context;

#line 1172 
struct pipe_inode_info;

#line 1173 
struct uts_namespace;

#line 1174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_228 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_228 __anonCompField_pci_dev_65 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 66 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 1249 
struct kvec;

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 1341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct acpi_device;

#line 1341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_sysdata {
   int domain ;
   int node ;
   struct acpi_device *companion ;
   void *iommu ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/prefetch.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_229 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_229 __anonCompField_iov_iter_66 ;
   unsigned long nr_segs ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_231 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_231 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_232 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_232 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_233 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_233 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_234 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_234 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_235 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_235 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_236 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_236 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_237 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_237 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_238 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_238 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_239 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_240 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_239 ifr_ifrn ;
   union __anonunion_ifr_ifru_240 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_245 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_244 {
   struct __anonstruct_245 __anonCompField___anonunion_244_67 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_244 __anonCompField_lockref_68 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_247 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_246 {
   struct __anonstruct_247 __anonCompField___anonunion_246_69 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_246 __anonCompField_qstr_70 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_248 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_248 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_252 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_251 {
   struct __anonstruct_252 __anonCompField___anonunion_251_71 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_251 __anonCompField_radix_tree_node_72 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 47 
struct block_device;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 62 
struct poll_table_struct;

#line 63 
struct kstatfs;

#line 64 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_256 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_256 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_257 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_257 __anonCompField_kqid_74 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_260 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_261 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_262 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_260 __anonCompField_inode_75 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_261 __anonCompField_inode_76 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_262 __anonCompField_inode_77 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_263 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_263 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_265 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_264 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_265 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_264 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
enum ldv_27131 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_27131 socket_state;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_280 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_280 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_27532 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_285 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_286 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_27532 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_285 __anonCompField_nf_bridge_info_81 ;
   union __anonunion_286 __anonCompField_nf_bridge_info_82 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 215 
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_287 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_287 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_289 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_288 {
   u64 v64 ;
   struct __anonstruct_289 __anonCompField___anonunion_288_83 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_288 __anonCompField_skb_mstamp_84 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_292 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_291 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_292 __anonCompField___anonstruct_291_85 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_290 {
   struct __anonstruct_291 __anonCompField___anonunion_290_86 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_294 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_293 {
   __wsum csum ;
   struct __anonstruct_294 __anonCompField___anonunion_293_88 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_295 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_296 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_297 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_290 __anonCompField_sk_buff_87 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_293 __anonCompField_sk_buff_89 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_295 __anonCompField_sk_buff_90 ;
   __u32 secmark ;
   union __anonunion_296 __anonCompField_sk_buff_91 ;
   union __anonunion_297 __anonCompField_sk_buff_92 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 767 
struct rtable;

#line 890 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct ipv6_devconf;

#line 39 
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_306 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_306 possible_net_t;

#line 376 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_29384 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_29384 phy_interface_t;

#line 126 
enum ldv_29437 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_29437 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 1628 
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 331 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_31147 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_31148 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_316 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_317 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_318 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_316 adj_list ;
   struct __anonstruct_all_adj_list_317 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_31147 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_31148 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_318 __anonCompField_net_device_95 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
struct mfd_cell;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
struct platform_device {
   char const *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id const *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/platform_device.h"
struct platform_device_info {
   struct device *parent ;
   struct fwnode_handle *fwnode ;
   char const *name ;
   int id ;
   struct resource const *res ;
   unsigned int num_res ;
   void const *data ;
   size_t size_data ;
   u64 dma_mask ;
};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cacheflush.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_338 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_338 __anonCompField_bpf_prog_100 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_346 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_346 __anonCompField_dst_entry_101 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_347 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_347 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_349 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_348 {
   __addrpair skc_addrpair ;
   struct __anonstruct_349 __anonCompField___anonunion_348_102 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_350 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_352 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_351 {
   __portpair skc_portpair ;
   struct __anonstruct_352 __anonCompField___anonunion_351_105 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_353 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_354 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_348 __anonCompField_sock_common_103 ;
   union __anonunion_350 __anonCompField_sock_common_104 ;
   union __anonunion_351 __anonCompField_sock_common_106 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_353 __anonCompField_sock_common_107 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_354 __anonCompField_sock_common_108 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_355 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_355 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_358 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_358 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 1496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct fcram_hash_ipv4 {
   u64 header ;
   u64 addrs ;
   u64 ports ;
   u64 action ;
};

#line 2718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct rx_pkt_hdr1 {
   u8 hwrsvd1 ;
   u8 tcammatch ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) hwrsvd2 : 2 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hashit : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) exact : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hzfvld : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) hashsidx : 3 ;
   u8 zcrsvd ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) hwrsvd3 : 4 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) zflowid0 : 4 ;
   u8 zflowid1 ;
   u8 hashval2_0 ;
   u8 hashval2_1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) hwrsvd4 : 4 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) hashval1_0 : 4 ;
   u8 hashval1_1 ;
   u8 hashval1_2 ;
   u8 hwrsvd5 ;
   u8 hwrsvd6 ;
   u8 usrdata_0 ;
   u8 usrdata_1 ;
   u8 usrdata_2 ;
   u8 usrdata_3 ;
   u8 usrdata_4 ;
};

#line 2799  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct tx_pkt_hdr {
   __le64 flags ;
   __le64 resv ;
};

#line 2823  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct tx_buff_info {
   struct sk_buff *skb ;
   u64 mapping ;
};

#line 2837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct txdma_mailbox {
   __le64 tx_dma_pre_st ;
   __le64 tx_cs ;
   __le64 tx_ring_kick ;
   __le64 tx_ring_hdl ;
   __le64 resv1 ;
   __le32 tx_rng_err_logl ;
   __le32 tx_rng_err_logh ;
   __le64 resv2[2U] ;
};

#line 2848 
struct niu;

#line 2848  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct tx_ring_info {
   struct tx_buff_info tx_buffs[256U] ;
   struct niu *np ;
   u64 tx_cs ;
   int pending ;
   int prod ;
   int cons ;
   int wrap_bit ;
   u16 last_pkt_cnt ;
   u16 tx_channel ;
   u16 mark_counter ;
   u16 mark_freq ;
   u16 mark_pending ;
   u16 __pad ;
   struct txdma_mailbox *mbox ;
   __le64 *descr ;
   u64 tx_packets ;
   u64 tx_bytes ;
   u64 tx_errors ;
   u64 mbox_dma ;
   u64 descr_dma ;
   int max_burst ;
};

#line 2886  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct rxdma_mailbox {
   __le64 rx_dma_ctl_stat ;
   __le64 rbr_stat ;
   __le32 rbr_hdl ;
   __le32 rbr_hdh ;
   __le64 resv1 ;
   __le32 rcrstat_c ;
   __le32 rcrstat_b ;
   __le64 rcrstat_a ;
   __le64 resv2[2U] ;
};

#line 2898  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct rx_ring_info {
   struct niu *np ;
   int rx_channel ;
   u16 rbr_block_size ;
   u16 rbr_blocks_per_page ;
   u16 rbr_sizes[4U] ;
   unsigned int rcr_index ;
   unsigned int rcr_table_size ;
   unsigned int rbr_index ;
   unsigned int rbr_pending ;
   unsigned int rbr_refill_pending ;
   unsigned int rbr_kick_thresh ;
   unsigned int rbr_table_size ;
   struct page **rxhash ;
   struct rxdma_mailbox *mbox ;
   __le64 *rcr ;
   __le32 *rbr ;
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 rx_dropped ;
   u64 rx_errors ;
   u64 mbox_dma ;
   u64 rcr_dma ;
   u64 rbr_dma ;
   int nonsyn_window ;
   int nonsyn_threshold ;
   int syn_window ;
   int syn_threshold ;
   int rcr_pkt_threshold ;
   int rcr_timeout ;
};

#line 2944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_vpd {
   char model[32U] ;
   char board_model[16U] ;
   char version[64U] ;
   char phy_type[8U] ;
   u8 mac_num ;
   u8 __pad ;
   u8 local_mac[6U] ;
   int fcode_major ;
   int fcode_minor ;
};

#line 2994  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_altmac_rdc {
   u8 alt_mac_num ;
   u8 rdc_num ;
   u8 mac_pref ;
};

#line 3000  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_vlan_rdc {
   u8 rdc_num ;
   u8 vlan_pref ;
};

#line 3005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_classifier {
   struct niu_altmac_rdc alt_mac_mappings[16U] ;
   struct niu_vlan_rdc vlan_mappings[4096U] ;
   u16 tcam_top ;
   u16 tcam_sz ;
   u16 tcam_valid_entries ;
   u16 num_alt_mac_mappings ;
   u32 h1_init ;
   u16 h2_init ;
};

#line 3018  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct rdc_table {
   u8 rxdma_channel[16U] ;
};

#line 3025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_rdc_tables {
   struct rdc_table tables[8U] ;
   int first_table_num ;
   int num_tables ;
};

#line 3031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct phy_probe_info {
   u32 phy_id[3U][4U] ;
   u8 phy_port[3U][4U] ;
   u8 cur[3U] ;
   struct device_attribute phy_port_attrs[12U] ;
   struct device_attribute phy_type_attrs[12U] ;
   struct device_attribute phy_id_attrs[12U] ;
};

#line 3046  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_tcam_entry {
   u8 valid ;
   u64 key[4U] ;
   u64 key_mask[4U] ;
   u64 assoc_data ;
};

#line 3053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct __anonstruct_pci_376 {
   int domain ;
   int bus ;
   int device ;
};

#line 3053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
union niu_parent_id {
   struct __anonstruct_pci_376 pci ;
   struct device_node *of ;
};

#line 3063  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_parent {
   struct platform_device *plat_dev ;
   int index ;
   union niu_parent_id id ;
   struct niu *ports[4U] ;
   atomic_t refcnt ;
   struct list_head list ;
   spinlock_t lock ;
   u32 flags ;
   u32 port_phy ;
   u8 rxchan_per_port[4U] ;
   u8 txchan_per_port[4U] ;
   struct niu_rdc_tables rdc_group_cfg[4U] ;
   u8 rdc_default[4U] ;
   u8 ldg_map[69U] ;
   u8 plat_type ;
   u8 num_ports ;
   u16 tcam_num_entries ;
   int rxdma_clock_divider ;
   struct phy_probe_info phy_probe_info ;
   struct niu_tcam_entry tcam[256U] ;
   u64 l2_cls[2U] ;
   u64 l3_cls[4U] ;
   u64 tcam_key[12U] ;
   u64 flow_key[12U] ;
   u16 l3_cls_refcnt[4U] ;
   u8 l3_cls_pid[4U] ;
};

#line 3126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_ops {
   void *(*alloc_coherent)(struct device *, size_t , u64 *, gfp_t ) ;
   void (*free_coherent)(struct device *, size_t , void *, u64 ) ;
   u64 (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction ) ;
   void (*unmap_page)(struct device *, u64 , size_t , enum dma_data_direction ) ;
   u64 (*map_single)(struct device *, void *, size_t , enum dma_data_direction ) ;
   void (*unmap_single)(struct device *, u64 , size_t , enum dma_data_direction ) ;
};

#line 3142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_link_config {
   u32 supported ;
   u32 advertising ;
   u16 speed ;
   u8 duplex ;
   u8 autoneg ;
   u32 active_advertising ;
   u16 active_speed ;
   u8 active_duplex ;
   u8 active_autoneg ;
   u8 loopback_mode ;
};

#line 3164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_ldg {
   struct napi_struct napi ;
   struct niu *np ;
   u8 ldg_num ;
   u8 timer ;
   u64 v0 ;
   u64 v1 ;
   u64 v2 ;
   unsigned int irq ;
};

#line 3176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_xmac_stats {
   u64 tx_frames ;
   u64 tx_bytes ;
   u64 tx_fifo_errors ;
   u64 tx_overflow_errors ;
   u64 tx_max_pkt_size_errors ;
   u64 tx_underflow_errors ;
   u64 rx_local_faults ;
   u64 rx_remote_faults ;
   u64 rx_link_faults ;
   u64 rx_align_errors ;
   u64 rx_frags ;
   u64 rx_mcasts ;
   u64 rx_bcasts ;
   u64 rx_hist_cnt1 ;
   u64 rx_hist_cnt2 ;
   u64 rx_hist_cnt3 ;
   u64 rx_hist_cnt4 ;
   u64 rx_hist_cnt5 ;
   u64 rx_hist_cnt6 ;
   u64 rx_hist_cnt7 ;
   u64 rx_octets ;
   u64 rx_code_violations ;
   u64 rx_len_errors ;
   u64 rx_crc_errors ;
   u64 rx_underflows ;
   u64 rx_overflows ;
   u64 pause_off_state ;
   u64 pause_on_state ;
   u64 pause_received ;
};

#line 3210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_bmac_stats {
   u64 tx_underflow_errors ;
   u64 tx_max_pkt_size_errors ;
   u64 tx_bytes ;
   u64 tx_frames ;
   u64 rx_overflows ;
   u64 rx_frames ;
   u64 rx_align_errors ;
   u64 rx_crc_errors ;
   u64 rx_len_errors ;
   u64 pause_off_state ;
   u64 pause_on_state ;
   u64 pause_received ;
};

#line 3227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
union niu_mac_stats {
   struct niu_xmac_stats xmac ;
   struct niu_bmac_stats bmac ;
};

#line 3232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu_phy_ops {
   int (*serdes_init)(struct niu *) ;
   int (*xcvr_init)(struct niu *) ;
   int (*link_status)(struct niu *, int *) ;
};

#line 3238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
struct niu {
   void *regs ;
   struct net_device *dev ;
   struct pci_dev *pdev ;
   struct device *device ;
   struct niu_parent *parent ;
   u32 flags ;
   u32 msg_enable ;
   char irq_name[43U][22U] ;
   spinlock_t lock ;
   struct niu_ops const *ops ;
   union niu_mac_stats mac_stats ;
   struct rx_ring_info *rx_rings ;
   struct tx_ring_info *tx_rings ;
   int num_rx_rings ;
   int num_tx_rings ;
   struct niu_ldg ldg[64U] ;
   int num_ldg ;
   void *mac_regs ;
   unsigned long ipp_off ;
   unsigned long pcs_off ;
   unsigned long xpcs_off ;
   struct timer_list timer ;
   u64 orig_led_state ;
   struct niu_phy_ops const *phy_ops ;
   int phy_addr ;
   struct niu_link_config link_config ;
   struct work_struct reset_task ;
   u8 port ;
   u8 mac_xcvr ;
   struct niu_classifier clas ;
   struct niu_vpd vpd ;
   u32 eeprom_len ;
   struct platform_device *op ;
   void *vir_regs_1 ;
   void *vir_regs_2 ;
};

#line 2301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
struct niu_phy_template {
   struct niu_phy_ops const *ops ;
   u32 phy_addr_base ;
};

#line 7679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
struct __anonstruct_niu_xmac_stat_keys_377 {
   char const string[32U] ;
};

#line 7715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
struct __anonstruct_niu_bmac_stat_keys_378 {
   char const string[32U] ;
};

#line 7734  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
struct __anonstruct_niu_rxchan_stat_keys_379 {
   char const string[32U] ;
};

#line 7746  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
struct __anonstruct_niu_txchan_stat_keys_380 {
   char const string[32U] ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_del_timer_sync_12 {
   struct timer_list *arg0 ;
   int signal_pending ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_devattr_instance_15 {
   struct device_attribute *arg1 ;
   struct device *arg0 ;
   int signal_pending ;
};

#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};

#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_14 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 40  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_20 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_22 {
   struct net_device *arg0 ;
   int signal_pending ;
};
unsigned short __builtin_bswap16(unsigned short);

unsigned int __builtin_bswap32(unsigned int);

void __builtin_unreachable(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/fvtp/.tmp_niu.c"
void ldv_inline_asm(void);


#line 4  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
void ldv_atomic_add(int i, atomic_t *v);


#line 7 
void ldv_atomic_inc(atomic_t *v);


#line 9 
int ldv_atomic_dec_and_test(atomic_t *v);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val)
{
  __u32 tmp;
  
#line 60 
  tmp = __builtin_bswap32(val);
  
#line 60 
  return tmp;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const *p)
{
  __u64 __retres;
  
#line 49 
  __retres = *p;
  
#line 49 
  return __retres;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 405 
int snprintf(char *, size_t, char const * , ...);


#line 418 
int sscanf(char const *, char const * , ...);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 48 
void __list_add(struct list_head *, struct list_head *, struct list_head *);


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  
#line 63 
  __list_add(new,head,head->next);
  
#line 64 
  return;
}


#line 113 
void list_del(struct list_head *);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 63 
int memcmp(void const *, void const *, size_t);


#line 64 
size_t strlen(char const *);


#line 67 
int strcmp(char const *, char const *);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 41 
int strncmp(char const *, char const *, __kernel_size_t);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static bool IS_ERR(void const *ptr);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  
#line 39 
  v->counter = i;
  
#line 40 
  return;
}


#line 49 
static void atomic_add(int i, atomic_t *v);


#line 98 
static void atomic_inc(atomic_t *v);


#line 120 
static int atomic_dec_and_test(atomic_t *v);


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
void __local_bh_disable_ip(unsigned long, unsigned int);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  __here_0: 
#line 18 
  ;
  
#line 18 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  
#line 20 
  return;
}


#line 22 
void __local_bh_enable_ip(unsigned long, unsigned int);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  __here_0: 
#line 31 
  ;
  
#line 31 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  
#line 33 
  return;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 31 
void _raw_spin_lock_irq(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 43 
void _raw_spin_unlock_irq(raw_spinlock_t *);


#line 45 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 346 
static void ldv_spin_lock_60(spinlock_t *lock);


#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  
#line 346 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 347 
  return;
}


#line 366 
static void ldv_spin_lock_irq_103(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_106(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_irq_121(spinlock_t *lock);


#line 375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 377 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 378 
  return;
}


#line 407 
static void ldv_spin_unlock_63(spinlock_t *lock);


#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  
#line 447 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 448 
  return;
}


#line 461 
static void ldv_spin_unlock_irq_104(spinlock_t *lock);


#line 465 
static void ldv_spin_unlock_irq_107(spinlock_t *lock);


#line 469 
static void ldv_spin_unlock_irq_122(spinlock_t *lock);


#line 470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 472 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 473 
  return;
}


#line 502 
static void ldv_spin_unlock_irqrestore_74(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_80(spinlock_t *lock, unsigned long flags);


#line 518 
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags);


#line 522 
static void ldv_spin_unlock_irqrestore_84(spinlock_t *lock, unsigned long flags);


#line 526 
static void ldv_spin_unlock_irqrestore_86(spinlock_t *lock, unsigned long flags);


#line 530 
static void ldv_spin_unlock_irqrestore_88(spinlock_t *lock, unsigned long flags);


#line 534 
static void ldv_spin_unlock_irqrestore_90(spinlock_t *lock, unsigned long flags);


#line 538 
static void ldv_spin_unlock_irqrestore_92(spinlock_t *lock, unsigned long flags);


#line 542 
static void ldv_spin_unlock_irqrestore_93(spinlock_t *lock, unsigned long flags);


#line 546 
static void ldv_spin_unlock_irqrestore_95(spinlock_t *lock, unsigned long flags);


#line 550 
static void ldv_spin_unlock_irqrestore_97(spinlock_t *lock, unsigned long flags);


#line 554 
static void ldv_spin_unlock_irqrestore_99(spinlock_t *lock, unsigned long flags);


#line 558 
static void ldv_spin_unlock_irqrestore_109(spinlock_t *lock, unsigned long flags);


#line 562 
static void ldv_spin_unlock_irqrestore_111(spinlock_t *lock, unsigned long flags);


#line 566 
static void ldv_spin_unlock_irqrestore_113(spinlock_t *lock, unsigned long flags);


#line 570 
static void ldv_spin_unlock_irqrestore_114(spinlock_t *lock, unsigned long flags);


#line 574 
static void ldv_spin_unlock_irqrestore_117(spinlock_t *lock, unsigned long flags);


#line 578 
static void ldv_spin_unlock_irqrestore_119(spinlock_t *lock, unsigned long flags);


#line 582 
static void ldv_spin_unlock_irqrestore_124(spinlock_t *lock, unsigned long flags);


#line 586 
static void ldv_spin_unlock_irqrestore_126(spinlock_t *lock, unsigned long flags);


#line 590 
static void ldv_spin_unlock_irqrestore_128(spinlock_t *lock, unsigned long flags);


#line 594 
static void ldv_spin_unlock_irqrestore_130(spinlock_t *lock, unsigned long flags);


#line 598 
static void ldv_spin_unlock_irqrestore_132(spinlock_t *lock, unsigned long flags);


#line 602 
static void ldv_spin_unlock_irqrestore_134(spinlock_t *lock, unsigned long flags);


#line 606 
static void ldv_spin_unlock_irqrestore_136(spinlock_t *lock, unsigned long flags);


#line 610 
static void ldv_spin_unlock_irqrestore_138(spinlock_t *lock, unsigned long flags);


#line 614 
static void ldv_spin_unlock_irqrestore_152(spinlock_t *lock, unsigned long flags);


#line 618 
static void ldv_spin_unlock_irqrestore_154(spinlock_t *lock, unsigned long flags);


#line 622 
static void ldv_spin_unlock_irqrestore_156(spinlock_t *lock, unsigned long flags);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_mutex_lock_140(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_142(struct mutex *ldv_func_arg1);


#line 47 
void ldv_mutex_model_lock(struct mutex *, char *);


#line 49 
void ldv_mutex_model_unlock(struct mutex *, char *);


#line 51 
void __ldv_spin_lock(spinlock_t *);


#line 78 
static void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_79(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_85(spinlock_t *ldv_func_arg1);


#line 106 
static void ldv___ldv_spin_lock_87(spinlock_t *ldv_func_arg1);


#line 110 
static void ldv___ldv_spin_lock_89(spinlock_t *ldv_func_arg1);


#line 114 
static void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1);


#line 118 
static void ldv___ldv_spin_lock_94(spinlock_t *ldv_func_arg1);


#line 122 
static void ldv___ldv_spin_lock_96(spinlock_t *ldv_func_arg1);


#line 126 
static void ldv___ldv_spin_lock_98(spinlock_t *ldv_func_arg1);


#line 130 
static void ldv___ldv_spin_lock_108(spinlock_t *ldv_func_arg1);


#line 134 
static void ldv___ldv_spin_lock_110(spinlock_t *ldv_func_arg1);


#line 138 
static void ldv___ldv_spin_lock_112(spinlock_t *ldv_func_arg1);


#line 142 
static void ldv___ldv_spin_lock_116(spinlock_t *ldv_func_arg1);


#line 146 
static void ldv___ldv_spin_lock_118(spinlock_t *ldv_func_arg1);


#line 150 
static void ldv___ldv_spin_lock_123(spinlock_t *ldv_func_arg1);


#line 154 
static void ldv___ldv_spin_lock_125(spinlock_t *ldv_func_arg1);


#line 158 
static void ldv___ldv_spin_lock_127(spinlock_t *ldv_func_arg1);


#line 162 
static void ldv___ldv_spin_lock_129(spinlock_t *ldv_func_arg1);


#line 166 
static void ldv___ldv_spin_lock_131(spinlock_t *ldv_func_arg1);


#line 170 
static void ldv___ldv_spin_lock_133(spinlock_t *ldv_func_arg1);


#line 174 
static void ldv___ldv_spin_lock_135(spinlock_t *ldv_func_arg1);


#line 178 
static void ldv___ldv_spin_lock_137(spinlock_t *ldv_func_arg1);


#line 182 
static void ldv___ldv_spin_lock_151(spinlock_t *ldv_func_arg1);


#line 186 
static void ldv___ldv_spin_lock_153(spinlock_t *ldv_func_arg1);


#line 190 
static void ldv___ldv_spin_lock_155(spinlock_t *ldv_func_arg1);


#line 198 
void ldv_spin_model_lock(char *);


#line 199 
void ldv_spin_model_unlock(char *);


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmdebug.h"
void dump_page(struct page *, char const *);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_141(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_143(struct mutex *ldv_func_arg1);


#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern u64 jiffies_64;


#line 78 
extern unsigned long volatile jiffies;


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 224 
void add_timer(struct timer_list *);


#line 232 
static int ldv_del_timer_sync_105(struct timer_list *ldv_func_arg1);


#line 236 
static int ldv_del_timer_sync_115(struct timer_list *ldv_func_arg1);


#line 240 
static int ldv_del_timer_sync_150(struct timer_list *ldv_func_arg1);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void __init_work(struct work_struct *, int);


#line 446 
static bool ldv_flush_work_149(struct work_struct *ldv_func_arg1);


#line 448 
bool cancel_work_sync(struct work_struct *);


#line 560 
static bool ldv_schedule_work_120(struct work_struct *work);


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned long readq(void const volatile *addr)
{
  unsigned long ret;
  
#line 91 
  ldv_inline_asm();
  
#line 90 
  return ret;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writeq(unsigned long val, void volatile *addr)
{
  
#line 93 
  ldv_inline_asm();
  
#line 94 
  return;
}


#line 195 
void iounmap(void volatile *);


#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct page *alloc_pages_current(gfp_t, unsigned int);


#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp;
  
#line 327 
  tmp = alloc_pages_current(gfp_mask,order);
  
#line 327 
  return tmp;
}


#line 366 
void __free_pages(struct page *, unsigned int);


#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
int sysfs_create_link(struct kobject *, struct kobject *, char const *);


#line 240 
void sysfs_remove_link(struct kobject *, char const *);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_100(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 153 
static void ldv_free_irq_101(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 157 
static void ldv_free_irq_102(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
static int ldv_device_create_file_139(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2);


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_platdata(struct device const *dev)
{
  void *__retres;
  
#line 998 
  __retres = dev->platform_data;
  
#line 998 
  return __retres;
}


#line 1083 
void dev_err(struct device const *, char const * , ...);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 542 
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);


#line 951 
int pci_enable_device(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_157(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_158(struct pci_driver *ldv_func_arg1);


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page-flags.h"
__inline static int PageTail(struct page const *page)
{
  int tmp;
  
#line 400 
  tmp = constant_test_bit(15L,(unsigned long const volatile *)(& page->flags));
  
#line 400 
  return tmp;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head_by_tail(struct page *tail)
{
  struct page *__retres;
  int tmp;
  
#line 442 
  struct page *head = tail->__anonCompField_page_46.first_page;
  
#line 443 
  ldv_inline_asm();
  
#line 450 
  tmp = PageTail((struct page const *)tail);
  
#line 450 
  if ((long)(tmp != 0) != 0L) {
    
#line 451 
    __retres = head;
    
#line 451 
    goto return_label;
  }
  else ;
  
#line 452 
  __retres = tail;
  return_label: 
#line 452 
                return __retres;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head(struct page *page)
{
  struct page *__retres;
  int tmp_0;
  
#line 463 
  tmp_0 = PageTail((struct page const *)page);
  
#line 463 
  if ((long)(tmp_0 != 0) != 0L) {
    struct page *tmp;
    
#line 464 
    tmp = compound_head_by_tail(page);
    
#line 464 
    __retres = tmp;
    
#line 464 
    goto return_label;
  }
  else ;
  
#line 465 
  __retres = page;
  return_label: 
#line 465 
                return __retres;
}


#line 532 
bool __get_page_tail(struct page *);


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  int tmp_0;
  int tmp_1;
  
#line 536 
  tmp_0 = PageTail((struct page const *)page);
  
#line 536 
  if ((long)(tmp_0 != 0) != 0L) {
    bool tmp;
    
#line 537 
    tmp = __get_page_tail(page);
    
#line 537 
    if ((long)((int)tmp != 0) != 0L) 
#line 538 
                                     goto return_label; else ;
  }
  else ;
  
#line 543 
  tmp_1 = atomic_read((atomic_t const *)(& page->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count));
  
#line 543 
  if ((long)(tmp_1 <= 0) != 0L) {
    
#line 543 
    dump_page(page,"VM_BUG_ON_PAGE(");
    
#line 544 
    ldv_inline_asm();
    
#line 543 
    ;
  }
  else ;
  
#line 544 
  atomic_inc(& page->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count);
  return_label: 
#line 545 
                return;
}


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  bool __retres;
  
#line 1037 
  __retres = (_Bool)(page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index == 18446744073709551615UL);
  
#line 1037 
  return __retres;
}


#line 1216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
void pci_disable_msix(struct pci_dev *);


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci.h"
__inline static int pci_domain_nr(struct pci_bus *bus)
{
  int __retres;
  
#line 34 
  struct pci_sysdata *sd = (struct pci_sysdata *)bus->sysdata;
  
#line 35 
  __retres = sd->domain;
  
#line 35 
  return __retres;
}


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 131 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 115 
  tmp = dma_set_mask(& dev->dev,mask);
  
#line 115 
  return tmp;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 120 
  tmp = dma_set_coherent_mask(& dev->dev,mask);
  
#line 120 
  return tmp;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 1666 
void *pci_ioremap_bar(struct pci_dev *, int);


#line 1718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  int __retres;
  
#line 1720 
  __retres = (int)dev->pcie_cap;
  
#line 1720 
  return __retres;
}


#line 1729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  bool __retres;
  int tmp;
  
#line 1731 
  tmp = pci_pcie_cap(dev);
  
#line 1731 
  __retres = (_Bool)(tmp != 0);
  
#line 1731 
  return __retres;
}


#line 5  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __bad_udelay(void);


#line 8 
void __udelay(unsigned long);


#line 10 
void __const_udelay(unsigned long);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  
#line 237 
  frag->size = size;
  
#line 238 
  return;
}


#line 772 
void kfree_skb(struct sk_buff *);


#line 775 
void consume_skb(struct sk_buff *);


#line 853 
struct sk_buff *skb_realloc_headroom(struct sk_buff *, unsigned int);


#line 862 
int skb_pad(struct sk_buff *, int);


#line 926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  
#line 928 
  skb->l4_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))(type == (unsigned int)PKT_HASH_TYPE_L4);
  
#line 929 
  skb->sw_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 930 
  skb->hash = hash;
  
#line 931 
  return;
}


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff const *skb)
{
  bool __retres;
  
#line 1569 
  __retres = (_Bool)(skb->data_len != 0U);
  
#line 1569 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1599  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  unsigned char *tmp;
  bool tmp_0;
  
#line 1602 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1602 
  skb_frag_t *frag = & ((struct skb_shared_info *)tmp)->frags[i];
  
#line 1609 
  frag->page.p = page;
  
#line 1610 
  frag->page_offset = (unsigned int)off;
  
#line 1611 
  skb_frag_size_set(frag,(unsigned int)size);
  
#line 1613 
  page = compound_head(page);
  
#line 1614 
  tmp_0 = page_is_pfmemalloc(page);
  
#line 1614 
  if ((int)tmp_0 != 0) 
#line 1615 
                       skb->pfmemalloc = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
  
#line 1616 
  return;
}


#line 1632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  unsigned char *tmp;
  
#line 1635 
  __skb_fill_page_desc(skb,i,page,off,size);
  
#line 1636 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1636 
  ((struct skb_shared_info *)tmp)->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  
#line 1637 
  return;
}


#line 1650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1652 
  __retres = skb->head + skb->tail;
  
#line 1652 
  return __retres;
}


#line 1689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
  bool tmp_1;
  
#line 1691 
  unsigned char *tmp = skb_tail_pointer((struct sk_buff const *)skb);
  
#line 1692 
  tmp_1 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 1692 
  if ((long)((int)tmp_1 != 0) != 0L) {
    
#line 1694 
    ldv_inline_asm();
    
#line 1692 
    ;
  }
  else ;
  
#line 1693 
  skb->tail += len;
  
#line 1694 
  skb->len += len;
  
#line 1695 
  return tmp;
}


#line 1698 
unsigned char *skb_push(struct sk_buff *, unsigned int);


#line 1706 
unsigned char *skb_pull(struct sk_buff *, unsigned int);


#line 1719 
unsigned char *__pskb_pull_tail(struct sk_buff *, int);


#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1752 
  __retres = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1752 
  return __retres;
}


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1899 
  __retres = skb->head + (int)skb->network_header;
  
#line 1899 
  return __retres;
}


#line 1962  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_checksum_start_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned int tmp;
  
#line 1964 
  tmp = skb_headroom(skb);
  
#line 1964 
  ;
  
#line 1964 
  __retres = (int)((unsigned int)skb->__anonCompField_sk_buff_89.__anonCompField___anonunion_293_88.csum_start - tmp);
  
#line 1964 
  return __retres;
}


#line 1982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1984 
  tmp = skb_network_header(skb);
  
#line 1984 
  ;
  
#line 1984 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1984 
  return __retres;
}


#line 2095  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_orphan(struct sk_buff *skb)
{
  
#line 2097 
  if (skb->destructor != (void (*)(struct sk_buff *))0) {
    
#line 2098 
    (*(skb->destructor))(skb);
    
#line 2099 
    skb->destructor = (void (*)(struct sk_buff *))0;
    
#line 2100 
    skb->sk = (struct sock *)0;
  }
  else 
    
#line 2102 
    if ((long)(skb->sk != (struct sock *)0) != 0L) {
      
#line 2104 
      ldv_inline_asm();
      
#line 2102 
      ;
    }
    else ;
  
#line 2104 
  return;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2159 
  tmp = __netdev_alloc_skb(dev,length,32U);
  
#line 2159 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  
#line 2503 
  unsigned int size = skb->len;
  
#line 2505 
  if ((long)(size < len) != 0L) {
    int tmp;
    
#line 2506 
    len -= size;
    
#line 2507 
    tmp = skb_pad(skb,(int)len);
    
#line 2507 
    if (tmp != 0) {
      
#line 2508 
      __retres = -12;
      
#line 2508 
      goto return_label;
    }
    else ;
    
#line 2509 
    __skb_put(skb,len);
  }
  else ;
  
#line 2511 
  __retres = 0;
  return_label: 
#line 2511 
                return __retres;
}


#line 3295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff const *skb)
{
  u16 __retres;
  
#line 3297 
  __retres = skb->queue_mapping;
  
#line 3297 
  return __retres;
}


#line 3305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  
#line 3307 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  
#line 3308 
  return;
}


#line 3426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff const *skb)
{
  
#line 3428 
  return;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
__inline static u32 mii_adv_to_ethtool_adv_t(u32 adv)
{
  
#line 138 
  u32 result = 0U;
  
#line 140 
  if ((adv & 32U) != 0U) 
#line 141 
                         result |= 1U; else ;
  
#line 142 
  if ((adv & 64U) != 0U) 
#line 143 
                         result |= 2U; else ;
  
#line 144 
  if ((adv & 128U) != 0U) 
#line 145 
                          result |= 4U; else ;
  
#line 146 
  if ((adv & 256U) != 0U) 
#line 147 
                          result |= 8U; else ;
  
#line 148 
  if ((adv & 1024U) != 0U) 
#line 149 
                           result |= 8192U; else ;
  
#line 150 
  if ((adv & 2048U) != 0U) 
#line 151 
                           result |= 16384U; else ;
  
#line 153 
  return result;
}


#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
__inline static u32 mii_ctrl1000_to_ethtool_adv_t(u32 adv)
{
  
#line 186 
  u32 result = 0U;
  
#line 188 
  if ((adv & 256U) != 0U) 
#line 189 
                          result |= 16U; else ;
  
#line 190 
  if ((adv & 512U) != 0U) 
#line 191 
                          result |= 32U; else ;
  
#line 193 
  return result;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 2205 
static void ldv_free_netdev_146(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_148(struct net_device *ldv_func_arg1);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2535 
  i = 0U;
  
#line 2535 
  goto ldv_45190;
  ldv_45189: 
#line 2536 
  ;
  {
    
#line 2536 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2537 
    netif_tx_start_queue(txq);
  }
  
#line 2535 
  i += 1U;
  ldv_45190: 
#line 2536 
  ;
  
#line 2535 
  if (dev->num_tx_queues > i) 
#line 2537 
                              goto ldv_45189; else 
#line 2540 
                                                   goto ldv_45191;
  ldv_45191: 
#line 2541 
  ;
  
#line 2542 
  return;
}


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2559 
  i = 0U;
  
#line 2559 
  goto ldv_45203;
  ldv_45202: 
#line 2560 
  ;
  {
    
#line 2560 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2561 
    netif_tx_wake_queue(txq);
  }
  
#line 2559 
  i += 1U;
  ldv_45203: 
#line 2560 
  ;
  
#line 2559 
  if (dev->num_tx_queues > i) 
#line 2561 
                              goto ldv_45202; else 
#line 2564 
                                                   goto ldv_45204;
  ldv_45204: 
#line 2565 
  ;
  
#line 2566 
  return;
}


#line 2582 
void netif_tx_stop_all_queues(struct net_device *);


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 2867 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);


#line 2870 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);


#line 2948 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  u32 __retres;
  
#line 3162 
  if ((unsigned int)debug_value > 31U) {
    
#line 3163 
    __retres = (unsigned int)default_msg_enable_bits;
    
#line 3163 
    goto return_label;
  }
  else ;
  
#line 3164 
  if (debug_value == 0) {
    
#line 3165 
    __retres = 0U;
    
#line 3165 
    goto return_label;
  }
  else ;
  
#line 3167 
  __retres = (unsigned int)((1 << debug_value) + -1);
  return_label: 
#line 3167 
                return __retres;
}


#line 3170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  
#line 3172 
  ldv_spin_lock_60(& txq->_xmit_lock);
  
#line 3173 
  txq->xmit_lock_owner = cpu;
  
#line 3174 
  return;
}


#line 3190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  
#line 3192 
  txq->xmit_lock_owner = -1;
  
#line 3193 
  ldv_spin_unlock_63(& txq->_xmit_lock);
  
#line 3194 
  return;
}


#line 3282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  unsigned int i;
  int cpu;
  int tmp_3;
  
#line 3287 
  local_bh_disable();
  {
    int pscr_ret__;
    {
      
#line 3288 
      void const *__vpp_verify = (void const *)0;
      
#line 3288 
      void const *tmp = __vpp_verify;
    }
    
#line 3288 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3288 
      ;
      {
        int pfo_ret__;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45764;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45764;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45764;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45764;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45764: 
#line 3288 
        ;
        
#line 3288 
        tmp_0 = pfo_ret__;
      }
      
#line 3288 
      pscr_ret__ = tmp_0;
      
#line 3288 
      goto ldv_45770;
      case (unsigned long)2: 
#line 3288 
      ;
      {
        int pfo_ret___0;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45774;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45774;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45774;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45774;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45774: 
#line 3288 
        ;
        
#line 3288 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3288 
      pscr_ret__ = tmp_0_0;
      
#line 3288 
      goto ldv_45770;
      case (unsigned long)4: 
#line 3288 
      ;
      {
        int pfo_ret___1;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45783;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45783;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45783;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45783;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45783: 
#line 3288 
        ;
        
#line 3288 
        tmp_1 = pfo_ret___1;
      }
      
#line 3288 
      pscr_ret__ = tmp_1;
      
#line 3288 
      goto ldv_45770;
      case (unsigned long)8: 
#line 3288 
      ;
      {
        int pfo_ret___2;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45792;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45792;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45792;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45792;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45792: 
#line 3288 
        ;
        
#line 3288 
        tmp_2 = pfo_ret___2;
      }
      
#line 3288 
      pscr_ret__ = tmp_2;
      
#line 3288 
      goto ldv_45770;
      default: 
#line 3288 
      ;
      
#line 3288 
      __bad_size_call_parameter();
      
#line 3288 
      goto ldv_45770;
    }
    ldv_45770: 
#line 3288 
    ;
    
#line 3288 
    tmp_3 = pscr_ret__;
  }
  
#line 3288 
  cpu = tmp_3;
  
#line 3289 
  i = 0U;
  
#line 3289 
  goto ldv_45802;
  ldv_45801: 
#line 3290 
  ;
  {
    
#line 3290 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3292 
    __netif_tx_lock(txq,cpu);
    
#line 3293 
    netif_tx_start_queue(txq);
    
#line 3294 
    __netif_tx_unlock(txq);
  }
  
#line 3289 
  i += 1U;
  ldv_45802: 
#line 3290 
  ;
  
#line 3289 
  if (dev->num_tx_queues > i) 
#line 3291 
                              goto ldv_45801; else 
#line 3294 
                                                   goto ldv_45803;
  ldv_45803: 
#line 3295 
  ;
  
#line 3296 
  local_bh_enable();
  
#line 3297 
  return;
}


#line 3355 
static int ldv_register_netdev_145(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_147(struct net_device *ldv_func_arg1);


#line 3819 
void netdev_printk(char const *, struct net_device const *, char const * , ...);


#line 3828 
void netdev_err(struct net_device const *, char const * , ...);


#line 3830 
void netdev_warn(struct net_device const *, char const * , ...);


#line 3834 
void netdev_info(struct net_device const *, char const * , ...);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 47 
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_144(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  int tmp;
  
#line 447 
  tmp = skb_put_padto(skb,60U);
  
#line 447 
  return tmp;
}


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/platform_device.h"
void platform_device_unregister(struct platform_device *);


#line 74 
struct platform_device *platform_device_register_full(struct platform_device_info const *);


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/platform_device.h"
__inline static struct platform_device *platform_device_register_resndata(struct device *parent, char const *name, int id, struct resource const *res, unsigned int num, void const *data, size_t size)
{
  struct platform_device *tmp;
  
#line 96 
  struct platform_device_info pdevinfo = {.parent = parent, .fwnode = (struct fwnode_handle *)0, .name = name, .id = id, .res = res, .num_res = num, .data = data, .size_data = size, .dma_mask = 0ULL};
  
#line 107 
  tmp = platform_device_register_full((struct platform_device_info const *)(& pdevinfo));
  
#line 107 
  return tmp;
}


#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/platform_device.h"
__inline static struct platform_device *platform_device_register_simple(char const *name, int id, struct resource const *res, unsigned int num)
{
  struct platform_device *tmp;
  
#line 136 
  tmp = platform_device_register_resndata((struct device *)0,name,id,res,num,(void const *)0,0UL);
  
#line 136 
  return tmp;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 25 
  tmp = (struct iphdr *)skb_network_header(skb);
  
#line 25 
  return tmp;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 76 
  tmp = (struct ipv6hdr *)skb_network_header(skb);
  
#line 76 
  return tmp;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/crc32.h"
u32 crc32_le(u32, unsigned char const *, size_t);


#line 2881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.h"
__inline static u32 niu_tx_avail(struct tx_ring_info *tp)
{
  u32 __retres;
  
#line 2883 
  __retres = (unsigned int)(tp->pending - ((tp->prod - tp->cons) & 255));
  
#line 2883 
  return __retres;
}


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static char version[27U] = {(char)'n', (char)'i', (char)'u', (char)'\000'};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct pci_device_id const niu_pci_tbl[2U] = {{.vendor = 4238U, .device = 43981U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
struct pci_device_id const __mod_pci__niu_pci_tbl_device_table[2U];

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_debug;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int debug = -1;

#line 98 
static int serdes_init_10g_serdes(struct niu *np);


#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int __niu_wait_bits_clear_mac(struct niu *np, unsigned long reg, u64 bits, int limit, int delay)
{
  int __retres;
  
#line 103 
  goto ldv_52771;
  ldv_52770: 
#line 104 
  ;
  {
    
#line 104 
    u64 val = readq((void const volatile *)(np->mac_regs + reg));
    
#line 106 
    if ((val & bits) == 0ULL) 
#line 107 
                              goto ldv_52769; else ;
    
#line 108 
    if (0 != 0) 
      
#line 108 
      if (delay > 19999) 
#line 108 
                         __bad_udelay(); else 
#line 108 
                                              __const_udelay((unsigned long)delay * 4295UL);
    else 
#line 108 
         __udelay((unsigned long)delay);
  }
  ldv_52771: 
#line 111 
  ;
  
#line 103 
  limit -= 1;
  
#line 103 
  if (limit >= 0) 
#line 105 
                  goto ldv_52770; else 
#line 108 
                                       goto ldv_52769;
  ldv_52769: 
#line 109 
  ;
  
#line 110 
  if (limit < 0) {
    
#line 111 
    __retres = -19;
    
#line 111 
    goto return_label;
  }
  else ;
  
#line 112 
  __retres = 0;
  return_label: 
#line 112 
                return __retres;
}


#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int __niu_set_and_wait_clear_mac(struct niu *np, unsigned long reg, u64 bits, int limit, int delay, char const *reg_name)
{
  int err;
  
#line 121 
  writeq((unsigned long)bits,(void volatile *)(np->mac_regs + reg));
  
#line 122 
  err = __niu_wait_bits_clear_mac(np,reg,bits,limit,delay);
  
#line 123 
  if (err != 0) {
    unsigned long tmp;
    
#line 126 
    tmp = readq((void const volatile *)(np->mac_regs + reg));
    
#line 124 
    ;
    
#line 124 
    ;
    
#line 124 
    ;
    
#line 124 
    netdev_err((struct net_device const *)np->dev,"bits (%llx) of register %s would not clear, val[%llx]\n",bits,reg_name,(unsigned long long)tmp);
  }
  else ;
  
#line 127 
  return err;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int __niu_wait_bits_clear_ipp(struct niu *np, unsigned long reg, u64 bits, int limit, int delay)
{
  int __retres;
  
#line 138 
  goto ldv_52791;
  ldv_52790: 
#line 139 
  ;
  {
    
#line 139 
    u64 val = readq((void const volatile *)(np->regs + (np->ipp_off + reg)));
    
#line 141 
    if ((val & bits) == 0ULL) 
#line 142 
                              goto ldv_52789; else ;
    
#line 143 
    if (0 != 0) 
      
#line 143 
      if (delay > 19999) 
#line 143 
                         __bad_udelay(); else 
#line 143 
                                              __const_udelay((unsigned long)delay * 4295UL);
    else 
#line 143 
         __udelay((unsigned long)delay);
  }
  ldv_52791: 
#line 146 
  ;
  
#line 138 
  limit -= 1;
  
#line 138 
  if (limit >= 0) 
#line 140 
                  goto ldv_52790; else 
#line 143 
                                       goto ldv_52789;
  ldv_52789: 
#line 144 
  ;
  
#line 145 
  if (limit < 0) {
    
#line 146 
    __retres = -19;
    
#line 146 
    goto return_label;
  }
  else ;
  
#line 147 
  __retres = 0;
  return_label: 
#line 147 
                return __retres;
}


#line 150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int __niu_set_and_wait_clear_ipp(struct niu *np, unsigned long reg, u64 bits, int limit, int delay, char const *reg_name)
{
  int err;
  u64 val;
  
#line 157 
  val = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + reg)));
  
#line 158 
  val |= bits;
  
#line 159 
  writeq((unsigned long)val,(void volatile *)(np->regs + (np->ipp_off + reg)));
  
#line 161 
  err = __niu_wait_bits_clear_ipp(np,reg,bits,limit,delay);
  
#line 162 
  if (err != 0) {
    unsigned long tmp_0;
    
#line 165 
    tmp_0 = readq((void const volatile *)(np->regs + (np->ipp_off + reg)));
    
#line 163 
    ;
    
#line 163 
    ;
    
#line 163 
    ;
    
#line 163 
    netdev_err((struct net_device const *)np->dev,"bits (%llx) of register %s would not clear, val[%llx]\n",bits,reg_name,(unsigned long long)tmp_0);
  }
  else ;
  
#line 166 
  return err;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int __niu_wait_bits_clear(struct niu *np, unsigned long reg, u64 bits, int limit, int delay)
{
  int __retres;
  
#line 177 
  goto ldv_52812;
  ldv_52811: 
#line 178 
  ;
  {
    
#line 178 
    u64 val = readq((void const volatile *)(np->regs + reg));
    
#line 180 
    if ((val & bits) == 0ULL) 
#line 181 
                              goto ldv_52810; else ;
    
#line 182 
    if (0 != 0) 
      
#line 182 
      if (delay > 19999) 
#line 182 
                         __bad_udelay(); else 
#line 182 
                                              __const_udelay((unsigned long)delay * 4295UL);
    else 
#line 182 
         __udelay((unsigned long)delay);
  }
  ldv_52812: 
#line 185 
  ;
  
#line 177 
  limit -= 1;
  
#line 177 
  if (limit >= 0) 
#line 179 
                  goto ldv_52811; else 
#line 182 
                                       goto ldv_52810;
  ldv_52810: 
#line 183 
  ;
  
#line 184 
  if (limit < 0) {
    
#line 185 
    __retres = -19;
    
#line 185 
    goto return_label;
  }
  else ;
  
#line 186 
  __retres = 0;
  return_label: 
#line 186 
                return __retres;
}


#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int __niu_set_and_wait_clear(struct niu *np, unsigned long reg, u64 bits, int limit, int delay, char const *reg_name)
{
  int err;
  
#line 200 
  writeq((unsigned long)bits,(void volatile *)(np->regs + reg));
  
#line 201 
  err = __niu_wait_bits_clear(np,reg,bits,limit,delay);
  
#line 202 
  if (err != 0) {
    unsigned long tmp;
    
#line 205 
    tmp = readq((void const volatile *)(np->regs + reg));
    
#line 203 
    ;
    
#line 203 
    ;
    
#line 203 
    ;
    
#line 203 
    netdev_err((struct net_device const *)np->dev,"bits (%llx) of register %s would not clear, val[%llx]\n",bits,reg_name,(unsigned long long)tmp);
  }
  else ;
  
#line 206 
  return err;
}


#line 214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_ldg_rearm(struct niu *np, struct niu_ldg *lp, int on)
{
  
#line 216 
  u64 val = (unsigned long long)lp->timer;
  
#line 218 
  if (on != 0) 
#line 219 
               val |= 2147483648ULL; else ;
  
#line 221 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)lp->ldg_num * 8192UL + 8388632UL)));
  
#line 222 
  return;
}


#line 224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_ldn_irq_enable(struct niu *np, int ldn, int on)
{
  int __retres;
  unsigned long mask_reg;
  unsigned long bits;
  u64 val;
  
#line 229 
  if ((unsigned int)ldn > 68U) {
    
#line 230 
    __retres = -22;
    
#line 230 
    goto return_label;
  }
  else ;
  
#line 232 
  if (ldn <= 63) {
    
#line 233 
    mask_reg = ((unsigned long)ldn + 1280UL) * 8192UL;
    
#line 234 
    bits = 3UL;
  }
  else {
    
#line 236 
    mask_reg = ((unsigned long)(ldn + -64) + 1408UL) * 8192UL;
    
#line 237 
    bits = 3UL;
  }
  
#line 240 
  val = (u64)readq((void const volatile *)(np->regs + mask_reg));
  
#line 241 
  if (on != 0) 
#line 242 
               val = (unsigned long long)(~ bits) & val; else 
#line 244 
                                                              val |= (unsigned long long)bits;
  
#line 245 
  writeq((unsigned long)val,(void volatile *)(np->regs + mask_reg));
  
#line 247 
  __retres = 0;
  return_label: 
#line 247 
                return __retres;
}


#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_enable_ldn_in_ldg(struct niu *np, struct niu_ldg *lp, int on)
{
  int __retres;
  int i;
  
#line 252 
  struct niu_parent *parent = np->parent;
  
#line 255 
  i = 0;
  
#line 255 
  goto ldv_52846;
  ldv_52845: 
#line 256 
  ;
  {
    int err;
    
#line 258 
    if ((int)parent->ldg_map[i] != (int)lp->ldg_num) 
#line 259 
                                                     goto ldv_52844; else ;
    
#line 261 
    err = niu_ldn_irq_enable(np,i,on);
    
#line 262 
    if (err != 0) {
      
#line 263 
      __retres = err;
      
#line 263 
      goto return_label;
    }
    else ;
  }
  ldv_52844: 
#line 265 
  ;
  
#line 255 
  i += 1;
  ldv_52846: 
#line 256 
  ;
  
#line 255 
  if (i <= 68) 
#line 257 
               goto ldv_52845; else 
#line 260 
                                    goto ldv_52847;
  ldv_52847: 
#line 261 
  ;
  
#line 265 
  __retres = 0;
  return_label: 
#line 265 
                return __retres;
}


#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_enable_interrupts(struct niu *np, int on)
{
  int __retres;
  int i;
  
#line 272 
  i = 0;
  
#line 272 
  goto ldv_52856;
  ldv_52855: 
#line 273 
  ;
  {
    int err;
    
#line 273 
    struct niu_ldg *lp = & np->ldg[i];
    
#line 276 
    err = niu_enable_ldn_in_ldg(np,lp,on);
    
#line 277 
    if (err != 0) {
      
#line 278 
      __retres = err;
      
#line 278 
      goto return_label;
    }
    else ;
  }
  
#line 272 
  i += 1;
  ldv_52856: 
#line 273 
  ;
  
#line 272 
  if (np->num_ldg > i) 
#line 274 
                       goto ldv_52855; else 
#line 277 
                                            goto ldv_52857;
  ldv_52857: 
#line 278 
  ;
  
#line 280 
  i = 0;
  
#line 280 
  goto ldv_52859;
  ldv_52858: 
#line 281 
  ;
  
#line 281 
  niu_ldg_rearm(np,& np->ldg[i],on);
  
#line 280 
  i += 1;
  ldv_52859: 
#line 281 
  ;
  
#line 280 
  if (np->num_ldg > i) 
#line 282 
                       goto ldv_52858; else 
#line 285 
                                            goto ldv_52860;
  ldv_52860: 
#line 286 
  ;
  
#line 283 
  __retres = 0;
  return_label: 
#line 283 
                return __retres;
}


#line 286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u32 phy_encode(u32 type, int port)
{
  u32 __retres;
  
#line 288 
  __retres = type << port * 2;
  
#line 288 
  return __retres;
}


#line 291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u32 phy_decode(u32 val, int port)
{
  u32 __retres;
  
#line 293 
  __retres = (val >> port * 2) & 3U;
  
#line 293 
  return __retres;
}


#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int mdio_wait(struct niu *np)
{
  int __retres;
  u64 val;
  
#line 298 
  int limit = 1000;
  
#line 301 
  goto ldv_52875;
  ldv_52874: 
#line 302 
  ;
  
#line 302 
  val = (u64)readq((void const volatile *)(np->regs + 1663000U));
  
#line 303 
  if ((val & 65536ULL) != 0ULL) {
    
#line 304 
    __retres = (int)val & 65535;
    
#line 304 
    goto return_label;
  }
  else ;
  
#line 306 
  __const_udelay(42950UL);
  ldv_52875: 
#line 308 
  ;
  
#line 301 
  limit -= 1;
  
#line 301 
  if (limit > 0) 
#line 303 
                 goto ldv_52874; else 
#line 306 
                                      goto ldv_52876;
  ldv_52876: 
#line 307 
  ;
  
#line 309 
  __retres = -19;
  return_label: 
#line 309 
                return __retres;
}


#line 312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int mdio_read(struct niu *np, int port, int dev, int reg)
{
  int __retres;
  int err;
  int tmp;
  
#line 316 
  writeq((unsigned long)((((port << 23) | (dev << 18)) | 131072) | reg),(void volatile *)(np->regs + 1663000U));
  
#line 317 
  err = mdio_wait(np);
  
#line 318 
  if (err < 0) {
    
#line 319 
    __retres = err;
    
#line 319 
    goto return_label;
  }
  else ;
  
#line 321 
  writeq((unsigned long)((((port << 23) | 805306368) | (dev << 18)) | 131072),(void volatile *)(np->regs + 1663000U));
  
#line 322 
  tmp = mdio_wait(np);
  
#line 322 
  __retres = tmp;
  return_label: 
#line 322 
                return __retres;
}


#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int mdio_write(struct niu *np, int port, int dev, int reg, int data)
{
  int __retres;
  int err;
  
#line 329 
  writeq((unsigned long)((((port << 23) | (dev << 18)) | 131072) | reg),(void volatile *)(np->regs + 1663000U));
  
#line 330 
  err = mdio_wait(np);
  
#line 331 
  if (err < 0) {
    
#line 332 
    __retres = err;
    
#line 332 
    goto return_label;
  }
  else ;
  
#line 334 
  writeq((unsigned long)(((((port << 23) | 268435456) | (dev << 18)) | 131072) | data),(void volatile *)(np->regs + 1663000U));
  
#line 335 
  err = mdio_wait(np);
  
#line 336 
  if (err < 0) {
    
#line 337 
    __retres = err;
    
#line 337 
    goto return_label;
  }
  else ;
  
#line 339 
  __retres = 0;
  return_label: 
#line 339 
                return __retres;
}


#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int mii_read(struct niu *np, int port, int reg)
{
  int tmp;
  
#line 344 
  writeq((unsigned long)((((port << 23) | 1610612736) | (reg << 18)) | 131072),(void volatile *)(np->regs + 1663000U));
  
#line 345 
  tmp = mdio_wait(np);
  
#line 345 
  return tmp;
}


#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int mii_write(struct niu *np, int port, int reg, int data)
{
  int __retres;
  int err;
  
#line 352 
  writeq((unsigned long)(((((port << 23) | 1342177280) | (reg << 18)) | 131072) | data),(void volatile *)(np->regs + 1663000U));
  
#line 353 
  err = mdio_wait(np);
  
#line 354 
  if (err < 0) {
    
#line 355 
    __retres = err;
    
#line 355 
    goto return_label;
  }
  else ;
  
#line 357 
  __retres = 0;
  return_label: 
#line 357 
                return __retres;
}


#line 360  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int esr2_set_tx_cfg(struct niu *np, unsigned long channel, u32 val)
{
  int err;
  
#line 364 
  err = mdio_write(np,(int)np->port,30,(int)((channel + 8256UL) * (unsigned long)4U),(int)val & 65535);
  
#line 367 
  if (err == 0) 
#line 368 
                err = mdio_write(np,(int)np->port,30,(int)(channel * (unsigned long)4U + (unsigned long)33025U),(int)(val >> 16)); else ;
  
#line 371 
  return err;
}


#line 374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int esr2_set_rx_cfg(struct niu *np, unsigned long channel, u32 val)
{
  int err;
  
#line 378 
  err = mdio_write(np,(int)np->port,30,(int)((channel + 8264UL) * (unsigned long)4U),(int)val & 65535);
  
#line 381 
  if (err == 0) 
#line 382 
                err = mdio_write(np,(int)np->port,30,(int)(channel * (unsigned long)4U + (unsigned long)33057U),(int)(val >> 16)); else ;
  
#line 385 
  return err;
}


#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int serdes_init_niu_10g_fiber(struct niu *np)
{
  int __retres;
  u32 tx_cfg;
  u32 rx_cfg;
  unsigned long i;
  
#line 391 
  struct niu_link_config *lp = & np->link_config;
  
#line 395 
  tx_cfg = 3585U;
  
#line 396 
  rx_cfg = 561409U;
  
#line 400 
  if ((unsigned int)lp->loopback_mode == 1U) {
    
#line 401 
    u16 test_cfg = (unsigned short)128U;
    
#line 403 
    mdio_write(np,(int)np->port,30,32772,(int)test_cfg);
    
#line 406 
    tx_cfg |= 2U;
    
#line 407 
    rx_cfg |= 2U;
  }
  else ;
  
#line 411 
  i = 0UL;
  
#line 411 
  goto ldv_52926;
  ldv_52925: 
#line 412 
  ;
  {
    
#line 412 
    int err = esr2_set_tx_cfg(np,i,tx_cfg);
    
#line 413 
    if (err != 0) {
      
#line 414 
      __retres = err;
      
#line 414 
      goto return_label;
    }
    else ;
  }
  
#line 411 
  i += 1UL;
  ldv_52926: 
#line 412 
  ;
  
#line 411 
  if (i <= 3UL) 
#line 413 
                goto ldv_52925; else 
#line 416 
                                     goto ldv_52927;
  ldv_52927: 
#line 417 
  ;
  
#line 417 
  i = 0UL;
  
#line 417 
  goto ldv_52930;
  ldv_52929: 
#line 418 
  ;
  {
    
#line 418 
    int err_0 = esr2_set_rx_cfg(np,i,rx_cfg);
    
#line 419 
    if (err_0 != 0) {
      
#line 420 
      __retres = err_0;
      
#line 420 
      goto return_label;
    }
    else ;
  }
  
#line 417 
  i += 1UL;
  ldv_52930: 
#line 418 
  ;
  
#line 417 
  if (i <= 3UL) 
#line 419 
                goto ldv_52929; else 
#line 422 
                                     goto ldv_52931;
  ldv_52931: 
#line 423 
  ;
  
#line 423 
  __retres = 0;
  return_label: 
#line 423 
                return __retres;
}


#line 426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int serdes_init_niu_1g_serdes(struct niu *np)
{
  int __retres;
  u16 pll_cfg;
  u16 pll_sts;
  u64 mask;
  u64 val;
  u32 tx_cfg;
  u32 rx_cfg;
  unsigned long i;
  int err;
  int tmp_1;
  
#line 428 
  struct niu_link_config *lp = & np->link_config;
  
#line 430 
  int max_retry = 100;
  
#line 431 
  u64 sig = sig;
  
#line 436 
  tx_cfg = 3617U;
  
#line 438 
  rx_cfg = 37153U;
  
#line 442 
  if ((unsigned int)np->port == 0U) 
#line 443 
                                    rx_cfg |= 524288U; else ;
  
#line 445 
  if ((unsigned int)lp->loopback_mode == 1U) {
    
#line 446 
    u16 test_cfg = (unsigned short)128U;
    
#line 448 
    mdio_write(np,(int)np->port,30,32772,(int)test_cfg);
    
#line 451 
    tx_cfg |= 2U;
    
#line 452 
    rx_cfg |= 2U;
  }
  else ;
  
#line 456 
  pll_cfg = (unsigned short)9U;
  
#line 458 
  err = mdio_write(np,(int)np->port,30,32768,(int)pll_cfg);
  
#line 460 
  if (err != 0) {
    
#line 461 
    netdev_err((struct net_device const *)np->dev,"NIU Port %d %s() mdio write to ESR2_TI_PLL_CFG_L failed\n",(int)np->port,"serdes_init_niu_1g_serdes");
    
#line 463 
    __retres = err;
    
#line 463 
    goto return_label;
  }
  else ;
  
#line 466 
  pll_sts = (unsigned short)1U;
  
#line 468 
  err = mdio_write(np,(int)np->port,30,32770,(int)pll_sts);
  
#line 470 
  if (err != 0) {
    
#line 471 
    netdev_err((struct net_device const *)np->dev,"NIU Port %d %s() mdio write to ESR2_TI_PLL_STS_L failed\n",(int)np->port,"serdes_init_niu_1g_serdes");
    
#line 473 
    __retres = err;
    
#line 473 
    goto return_label;
  }
  else ;
  
#line 476 
  __const_udelay(859000UL);
  
#line 479 
  i = 0UL;
  
#line 479 
  goto ldv_52949;
  ldv_52948: 
#line 480 
  ;
  
#line 480 
  err = esr2_set_tx_cfg(np,i,tx_cfg);
  
#line 481 
  if (err != 0) {
    
#line 482 
    __retres = err;
    
#line 482 
    goto return_label;
  }
  else ;
  
#line 479 
  i += 1UL;
  ldv_52949: 
#line 480 
  ;
  
#line 479 
  if (i <= 3UL) 
#line 481 
                goto ldv_52948; else 
#line 484 
                                     goto ldv_52950;
  ldv_52950: 
#line 485 
  ;
  
#line 485 
  i = 0UL;
  
#line 485 
  goto ldv_52952;
  ldv_52951: 
#line 486 
  ;
  
#line 486 
  err = esr2_set_rx_cfg(np,i,rx_cfg);
  
#line 487 
  if (err != 0) {
    
#line 488 
    __retres = err;
    
#line 488 
    goto return_label;
  }
  else ;
  
#line 485 
  i += 1UL;
  ldv_52952: 
#line 486 
  ;
  
#line 485 
  if (i <= 3UL) 
#line 487 
                goto ldv_52951; else 
#line 490 
                                     goto ldv_52953;
  ldv_52953: 
#line 491 
  ;
  
#line 491 
  switch ((int)np->port) {
    case 0: 
#line 492 
    ;
    
#line 493 
    val = 805306368ULL;
    
#line 494 
    mask = val;
    
#line 495 
    goto ldv_52955;
    case 1: 
#line 497 
    ;
    
#line 498 
    val = 201326592ULL;
    
#line 499 
    mask = val;
    
#line 500 
    goto ldv_52955;
    default: 
#line 502 
    ;
    
#line 503 
    __retres = -22;
    
#line 503 
    goto return_label;
  }
  ldv_52955: 
#line 506 
  ;
  
#line 506 
  goto ldv_52964;
  ldv_52963: 
#line 507 
  ;
  
#line 507 
  sig = (u64)readq((void const volatile *)(np->regs + 1656832U));
  
#line 508 
  if ((sig & mask) == val) 
#line 509 
                           goto ldv_52958; else ;
  {
    
#line 511 
    unsigned long __ms = 500UL;
    {
      unsigned long tmp_0;
      
#line 511 
      goto ldv_52961;
      ldv_52960: 
#line 512 
      ;
      
#line 511 
      __const_udelay(4295000UL);
      ldv_52961: 
#line 513 
      ;
      
#line 511 
      tmp_0 = __ms;
      
#line 511 
      __ms -= 1UL;
      
#line 511 
      ;
      
#line 511 
      if (tmp_0 != 0UL) 
#line 513 
                        goto ldv_52960; else 
#line 516 
                                             goto ldv_52962;
      ldv_52962: 
#line 517 
      ;
    }
  }
  ldv_52964: 
#line 520 
  ;
  
#line 506 
  tmp_1 = max_retry;
  
#line 506 
  max_retry -= 1;
  
#line 506 
  ;
  
#line 506 
  if (tmp_1 != 0) 
#line 508 
                  goto ldv_52963; else 
#line 511 
                                       goto ldv_52958;
  ldv_52958: 
#line 512 
  ;
  
#line 514 
  if ((sig & mask) != val) {
    
#line 515 
    netdev_err((struct net_device const *)np->dev,"Port %u signal bits [%08x] are not [%08x]\n",(int)np->port,(int)(sig & mask),(int)val);
    
#line 517 
    __retres = -19;
    
#line 517 
    goto return_label;
  }
  else ;
  
#line 520 
  __retres = 0;
  return_label: 
#line 520 
                return __retres;
}


#line 523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int serdes_init_niu_10g_serdes(struct niu *np)
{
  int __retres;
  u32 tx_cfg;
  u32 rx_cfg;
  u32 pll_cfg;
  u32 pll_sts;
  u64 mask;
  u64 val;
  unsigned long i;
  int err;
  int tmp_1;
  
#line 525 
  struct niu_link_config *lp = & np->link_config;
  
#line 527 
  int max_retry = 100;
  
#line 528 
  u64 sig = sig;
  
#line 532 
  tx_cfg = 3585U;
  
#line 533 
  rx_cfg = 561409U;
  
#line 537 
  if ((unsigned int)lp->loopback_mode == 1U) {
    
#line 538 
    u16 test_cfg = (unsigned short)128U;
    
#line 540 
    mdio_write(np,(int)np->port,30,32772,(int)test_cfg);
    
#line 543 
    tx_cfg |= 2U;
    
#line 544 
    rx_cfg |= 2U;
  }
  else ;
  
#line 548 
  pll_cfg = 11U;
  
#line 550 
  err = mdio_write(np,(int)np->port,30,32768,(int)pll_cfg & 65535);
  
#line 552 
  if (err != 0) {
    
#line 553 
    netdev_err((struct net_device const *)np->dev,"NIU Port %d %s() mdio write to ESR2_TI_PLL_CFG_L failed\n",(int)np->port,"serdes_init_niu_10g_serdes");
    
#line 555 
    __retres = err;
    
#line 555 
    goto return_label;
  }
  else ;
  
#line 558 
  pll_sts = 1U;
  
#line 560 
  err = mdio_write(np,(int)np->port,30,32770,(int)pll_sts & 65535);
  
#line 562 
  if (err != 0) {
    
#line 563 
    netdev_err((struct net_device const *)np->dev,"NIU Port %d %s() mdio write to ESR2_TI_PLL_STS_L failed\n",(int)np->port,"serdes_init_niu_10g_serdes");
    
#line 565 
    __retres = err;
    
#line 565 
    goto return_label;
  }
  else ;
  
#line 568 
  __const_udelay(859000UL);
  
#line 571 
  i = 0UL;
  
#line 571 
  goto ldv_52982;
  ldv_52981: 
#line 572 
  ;
  
#line 572 
  err = esr2_set_tx_cfg(np,i,tx_cfg);
  
#line 573 
  if (err != 0) {
    
#line 574 
    __retres = err;
    
#line 574 
    goto return_label;
  }
  else ;
  
#line 571 
  i += 1UL;
  ldv_52982: 
#line 572 
  ;
  
#line 571 
  if (i <= 3UL) 
#line 573 
                goto ldv_52981; else 
#line 576 
                                     goto ldv_52983;
  ldv_52983: 
#line 577 
  ;
  
#line 577 
  i = 0UL;
  
#line 577 
  goto ldv_52985;
  ldv_52984: 
#line 578 
  ;
  
#line 578 
  err = esr2_set_rx_cfg(np,i,rx_cfg);
  
#line 579 
  if (err != 0) {
    
#line 580 
    __retres = err;
    
#line 580 
    goto return_label;
  }
  else ;
  
#line 577 
  i += 1UL;
  ldv_52985: 
#line 578 
  ;
  
#line 577 
  if (i <= 3UL) 
#line 579 
                goto ldv_52984; else 
#line 582 
                                     goto ldv_52986;
  ldv_52986: 
#line 583 
  ;
  
#line 585 
  switch ((int)np->port) {
    case 0: 
#line 586 
    ;
    
#line 587 
    mask = 870318095ULL;
    
#line 588 
    val = 870318080ULL;
    
#line 595 
    goto ldv_52988;
    case 1: 
#line 597 
    ;
    
#line 598 
    mask = 203358448ULL;
    
#line 599 
    val = 203358208ULL;
    
#line 606 
    goto ldv_52988;
    default: 
#line 608 
    ;
    
#line 609 
    __retres = -22;
    
#line 609 
    goto return_label;
  }
  ldv_52988: 
#line 612 
  ;
  
#line 612 
  goto ldv_52997;
  ldv_52996: 
#line 613 
  ;
  
#line 613 
  sig = (u64)readq((void const volatile *)(np->regs + 1656832U));
  
#line 614 
  if ((sig & mask) == val) 
#line 615 
                           goto ldv_52991; else ;
  {
    
#line 617 
    unsigned long __ms = 500UL;
    {
      unsigned long tmp_0;
      
#line 617 
      goto ldv_52994;
      ldv_52993: 
#line 618 
      ;
      
#line 617 
      __const_udelay(4295000UL);
      ldv_52994: 
#line 619 
      ;
      
#line 617 
      tmp_0 = __ms;
      
#line 617 
      __ms -= 1UL;
      
#line 617 
      ;
      
#line 617 
      if (tmp_0 != 0UL) 
#line 619 
                        goto ldv_52993; else 
#line 622 
                                             goto ldv_52995;
      ldv_52995: 
#line 623 
      ;
    }
  }
  ldv_52997: 
#line 626 
  ;
  
#line 612 
  tmp_1 = max_retry;
  
#line 612 
  max_retry -= 1;
  
#line 612 
  ;
  
#line 612 
  if (tmp_1 != 0) 
#line 614 
                  goto ldv_52996; else 
#line 617 
                                       goto ldv_52991;
  ldv_52991: 
#line 618 
  ;
  
#line 620 
  if ((sig & mask) != val) {
    
#line 621 
    printk("\001",(int)np->port,(int)(sig & mask),(int)val);
    
#line 625 
    err = serdes_init_niu_1g_serdes(np);
    
#line 626 
    if (err == 0) {
      
#line 627 
      np->flags &= 4294705151U;
      
#line 628 
      np->mac_xcvr = (unsigned char)2U;
    }
    else {
      
#line 630 
      netdev_err((struct net_device const *)np->dev,"Port %u 10G/1G SERDES Link Failed\n",(int)np->port);
      
#line 632 
      __retres = -19;
      
#line 632 
      goto return_label;
    }
  }
  else ;
  
#line 635 
  __retres = 0;
  return_label: 
#line 635 
                return __retres;
}


#line 638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int esr_read_rxtx_ctrl(struct niu *np, unsigned long chan, u32 *val)
{
  int err;
  
#line 642 
  err = mdio_read(np,(int)np->port,30,(int)((chan + 8UL) * (unsigned long)16U));
  
#line 643 
  if (err >= 0) {
    
#line 644 
    *val = (unsigned int)err & 65535U;
    
#line 645 
    err = mdio_read(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)129U));
    
#line 647 
    if (err >= 0) 
#line 648 
                  *val |= (unsigned int)(err << 16); else ;
    
#line 649 
    err = 0;
  }
  else ;
  
#line 651 
  return err;
}


#line 654  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int esr_read_glue0(struct niu *np, unsigned long chan, u32 *val)
{
  int err;
  
#line 658 
  err = mdio_read(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)136U));
  
#line 660 
  if (err >= 0) {
    
#line 661 
    *val = (unsigned int)err & 65535U;
    
#line 662 
    err = mdio_read(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)137U));
    
#line 664 
    if (err >= 0) {
      
#line 665 
      *val |= (unsigned int)(err << 16);
      
#line 666 
      err = 0;
    }
    else ;
  }
  else ;
  
#line 669 
  return err;
}


#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int esr_read_reset(struct niu *np, u32 *val)
{
  int err;
  
#line 676 
  err = mdio_read(np,(int)np->port,30,2);
  
#line 678 
  if (err >= 0) {
    
#line 679 
    *val = (unsigned int)err & 65535U;
    
#line 680 
    err = mdio_read(np,(int)np->port,30,3);
    
#line 682 
    if (err >= 0) {
      
#line 683 
      *val |= (unsigned int)(err << 16);
      
#line 684 
      err = 0;
    }
    else ;
  }
  else ;
  
#line 687 
  return err;
}


#line 690  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int esr_write_rxtx_ctrl(struct niu *np, unsigned long chan, u32 val)
{
  int err;
  
#line 694 
  err = mdio_write(np,(int)np->port,30,(int)((chan + 8UL) * (unsigned long)16U),(int)val & 65535);
  
#line 696 
  if (err == 0) 
#line 697 
                err = mdio_write(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)129U),(int)(val >> 16)); else ;
  
#line 699 
  return err;
}


#line 702  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int esr_write_glue0(struct niu *np, unsigned long chan, u32 val)
{
  int err;
  
#line 706 
  err = mdio_write(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)136U),(int)val & 65535);
  
#line 708 
  if (err == 0) 
#line 709 
                err = mdio_write(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)137U),(int)(val >> 16)); else ;
  
#line 711 
  return err;
}


#line 714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int esr_reset(struct niu *np)
{
  int __retres;
  int err;
  
#line 716 
  u32 reset = reset;
  
#line 719 
  err = mdio_write(np,(int)np->port,30,2,0);
  
#line 721 
  if (err != 0) {
    
#line 722 
    __retres = err;
    
#line 722 
    goto return_label;
  }
  else ;
  
#line 723 
  err = mdio_write(np,(int)np->port,30,3,65535);
  
#line 725 
  if (err != 0) {
    
#line 726 
    __retres = err;
    
#line 726 
    goto return_label;
  }
  else ;
  
#line 727 
  __const_udelay(859000UL);
  
#line 729 
  err = mdio_write(np,(int)np->port,30,2,65535);
  
#line 731 
  if (err != 0) {
    
#line 732 
    __retres = err;
    
#line 732 
    goto return_label;
  }
  else ;
  
#line 733 
  __const_udelay(859000UL);
  
#line 735 
  err = mdio_write(np,(int)np->port,30,3,0);
  
#line 737 
  if (err != 0) {
    
#line 738 
    __retres = err;
    
#line 738 
    goto return_label;
  }
  else ;
  
#line 739 
  __const_udelay(859000UL);
  
#line 741 
  err = esr_read_reset(np,& reset);
  
#line 742 
  if (err != 0) {
    
#line 743 
    __retres = err;
    
#line 743 
    goto return_label;
  }
  else ;
  
#line 744 
  if (reset != 0U) {
    
#line 745 
    netdev_err((struct net_device const *)np->dev,"Port %u ESR_RESET did not clear [%08x]\n",(int)np->port,reset);
    
#line 747 
    __retres = -19;
    
#line 747 
    goto return_label;
  }
  else ;
  
#line 750 
  __retres = 0;
  return_label: 
#line 750 
                return __retres;
}


#line 753  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int serdes_init_10g(struct niu *np)
{
  int __retres;
  unsigned long ctrl_reg;
  unsigned long test_cfg_reg;
  unsigned long i;
  u64 ctrl_val;
  u64 test_cfg_val;
  u64 sig;
  u64 mask;
  u64 val;
  int err;
  
#line 755 
  struct niu_link_config *lp = & np->link_config;
  
#line 760 
  switch ((int)np->port) {
    case 0: 
#line 761 
    ;
    
#line 762 
    ctrl_reg = 1654808UL;
    
#line 763 
    test_cfg_reg = 1654816UL;
    
#line 764 
    goto ldv_53046;
    case 1: 
#line 765 
    ;
    
#line 766 
    ctrl_reg = 1654832UL;
    
#line 767 
    test_cfg_reg = 1654840UL;
    
#line 768 
    goto ldv_53046;
    default: 
#line 770 
    ;
    
#line 771 
    __retres = -22;
    
#line 771 
    goto return_label;
  }
  ldv_53046: 
#line 773 
  ;
  
#line 773 
  ctrl_val = 38385375ULL;
  
#line 785 
  test_cfg_val = 0ULL;
  
#line 787 
  if ((unsigned int)lp->loopback_mode == 1U) 
#line 788 
                                             test_cfg_val |= 170ULL; else ;
  
#line 798 
  writeq((unsigned long)ctrl_val,(void volatile *)(np->regs + ctrl_reg));
  
#line 799 
  writeq((unsigned long)test_cfg_val,(void volatile *)(np->regs + test_cfg_reg));
  
#line 802 
  i = 0UL;
  
#line 802 
  goto ldv_53052;
  ldv_53051: 
#line 803 
  ;
  {
    u32 rxtx_ctrl;
    u32 glue0;
    
#line 805 
    err = esr_read_rxtx_ctrl(np,i,& rxtx_ctrl);
    
#line 806 
    if (err != 0) {
      
#line 807 
      __retres = err;
      
#line 807 
      goto return_label;
    }
    else ;
    
#line 808 
    err = esr_read_glue0(np,i,& glue0);
    
#line 809 
    if (err != 0) {
      
#line 810 
      __retres = err;
      
#line 810 
      goto return_label;
    }
    else ;
    
#line 812 
    rxtx_ctrl &= 4282384383U;
    
#line 813 
    rxtx_ctrl |= 8388609U;
    
#line 816 
    glue0 &= 4177522688U;
    
#line 819 
    glue0 |= 50343935U;
    
#line 825 
    err = esr_write_rxtx_ctrl(np,i,rxtx_ctrl);
    
#line 826 
    if (err != 0) {
      
#line 827 
      __retres = err;
      
#line 827 
      goto return_label;
    }
    else ;
    
#line 828 
    err = esr_write_glue0(np,i,glue0);
    
#line 829 
    if (err != 0) {
      
#line 830 
      __retres = err;
      
#line 830 
      goto return_label;
    }
    else ;
  }
  
#line 802 
  i += 1UL;
  ldv_53052: 
#line 803 
  ;
  
#line 802 
  if (i <= 3UL) 
#line 804 
                goto ldv_53051; else 
#line 807 
                                     goto ldv_53053;
  ldv_53053: 
#line 808 
  ;
  
#line 833 
  err = esr_reset(np);
  
#line 834 
  if (err != 0) {
    
#line 835 
    __retres = err;
    
#line 835 
    goto return_label;
  }
  else ;
  
#line 837 
  sig = (u64)readq((void const volatile *)(np->regs + 1656832U));
  
#line 838 
  switch ((int)np->port) {
    case 0: 
#line 839 
    ;
    
#line 840 
    mask = 870318095ULL;
    
#line 841 
    val = 870318080ULL;
    
#line 848 
    goto ldv_53055;
    case 1: 
#line 850 
    ;
    
#line 851 
    mask = 203358448ULL;
    
#line 852 
    val = 203358208ULL;
    
#line 859 
    goto ldv_53055;
    default: 
#line 861 
    ;
    
#line 862 
    __retres = -22;
    
#line 862 
    goto return_label;
  }
  ldv_53055: 
#line 865 
  ;
  
#line 865 
  if ((sig & mask) != val) {
    
#line 866 
    if ((np->flags & 16777216U) != 0U) {
      
#line 867 
      np->flags &= 4261412863U;
      
#line 868 
      __retres = 0;
      
#line 868 
      goto return_label;
    }
    else ;
    
#line 870 
    netdev_err((struct net_device const *)np->dev,"Port %u signal bits [%08x] are not [%08x]\n",(int)np->port,(int)(sig & mask),(int)val);
    
#line 872 
    __retres = -19;
    
#line 872 
    goto return_label;
  }
  else ;
  
#line 874 
  if ((np->flags & 16777216U) != 0U) 
#line 875 
                                     np->flags |= 33554432U; else ;
  
#line 876 
  __retres = 0;
  return_label: 
#line 876 
                return __retres;
}


#line 879  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int serdes_init_1g(struct niu *np)
{
  int __retres;
  u64 val;
  
#line 883 
  val = (u64)readq((void const volatile *)(np->regs + 1654824U));
  
#line 884 
  val &= 18446744073709551611ULL;
  
#line 885 
  switch ((int)np->port) {
    case 0: 
#line 886 
    ;
    
#line 887 
    val |= 8ULL;
    
#line 888 
    goto ldv_53063;
    case 1: 
#line 889 
    ;
    
#line 890 
    val |= 16ULL;
    
#line 891 
    goto ldv_53063;
    case 2: 
#line 892 
    ;
    
#line 893 
    val |= 32ULL;
    
#line 894 
    goto ldv_53063;
    case 3: 
#line 895 
    ;
    
#line 896 
    val |= 64ULL;
    
#line 897 
    goto ldv_53063;
    default: 
#line 898 
    ;
    
#line 899 
    __retres = -22;
    
#line 899 
    goto return_label;
  }
  ldv_53063: 
#line 901 
  ;
  
#line 901 
  writeq((unsigned long)val,(void volatile *)(np->regs + 1654824U));
  
#line 903 
  __retres = 0;
  return_label: 
#line 903 
                return __retres;
}


#line 906  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int serdes_init_1g_serdes(struct niu *np)
{
  int __retres;
  unsigned long ctrl_reg;
  unsigned long test_cfg_reg;
  unsigned long pll_cfg;
  unsigned long i;
  u64 ctrl_val;
  u64 test_cfg_val;
  u64 sig;
  u64 mask;
  u64 val;
  int err;
  u64 reset_val;
  u64 val_rd;
  
#line 908 
  struct niu_link_config *lp = & np->link_config;
  
#line 914 
  val = 121ULL;
  
#line 917 
  switch ((int)np->port) {
    case 0: 
#line 918 
    ;
    
#line 919 
    reset_val = 1ULL;
    
#line 920 
    ctrl_reg = 1654808UL;
    
#line 921 
    test_cfg_reg = 1654816UL;
    
#line 922 
    pll_cfg = 1654800UL;
    
#line 923 
    goto ldv_53085;
    case 1: 
#line 924 
    ;
    
#line 925 
    reset_val = 2ULL;
    
#line 926 
    ctrl_reg = 1654832UL;
    
#line 927 
    test_cfg_reg = 1654840UL;
    
#line 928 
    pll_cfg = 1654824UL;
    
#line 929 
    goto ldv_53085;
    default: 
#line 931 
    ;
    
#line 932 
    __retres = -22;
    
#line 932 
    goto return_label;
  }
  ldv_53085: 
#line 934 
  ;
  
#line 934 
  ctrl_val = 38385375ULL;
  
#line 946 
  test_cfg_val = 0ULL;
  
#line 948 
  if ((unsigned int)lp->loopback_mode == 1U) 
#line 949 
                                             test_cfg_val |= 170ULL; else ;
  
#line 959 
  writeq((unsigned long)reset_val,(void volatile *)(np->regs + 1654784U));
  {
    
#line 960 
    unsigned long __ms = 20UL;
    {
      unsigned long tmp;
      
#line 960 
      goto ldv_53090;
      ldv_53089: 
#line 961 
      ;
      
#line 960 
      __const_udelay(4295000UL);
      ldv_53090: 
#line 962 
      ;
      
#line 960 
      tmp = __ms;
      
#line 960 
      __ms -= 1UL;
      
#line 960 
      ;
      
#line 960 
      if (tmp != 0UL) 
#line 962 
                      goto ldv_53089; else 
#line 965 
                                           goto ldv_53091;
      ldv_53091: 
#line 966 
      ;
    }
  }
  
#line 961 
  val_rd = (u64)readq((void const volatile *)(np->regs + 1654784U));
  
#line 962 
  val_rd = ~ reset_val & val_rd;
  
#line 963 
  writeq((unsigned long)val,(void volatile *)(np->regs + pll_cfg));
  
#line 964 
  writeq((unsigned long)ctrl_val,(void volatile *)(np->regs + ctrl_reg));
  
#line 965 
  writeq((unsigned long)test_cfg_val,(void volatile *)(np->regs + test_cfg_reg));
  
#line 966 
  writeq((unsigned long)val_rd,(void volatile *)(np->regs + 1654784U));
  {
    
#line 967 
    unsigned long __ms_0 = 2000UL;
    {
      unsigned long tmp_1;
      
#line 967 
      goto ldv_53094;
      ldv_53093: 
#line 968 
      ;
      
#line 967 
      __const_udelay(4295000UL);
      ldv_53094: 
#line 969 
      ;
      
#line 967 
      tmp_1 = __ms_0;
      
#line 967 
      __ms_0 -= 1UL;
      
#line 967 
      ;
      
#line 967 
      if (tmp_1 != 0UL) 
#line 969 
                        goto ldv_53093; else 
#line 972 
                                             goto ldv_53095;
      ldv_53095: 
#line 973 
      ;
    }
  }
  
#line 970 
  i = 0UL;
  
#line 970 
  goto ldv_53099;
  ldv_53098: 
#line 971 
  ;
  {
    u32 rxtx_ctrl;
    u32 glue0;
    
#line 973 
    err = esr_read_rxtx_ctrl(np,i,& rxtx_ctrl);
    
#line 974 
    if (err != 0) {
      
#line 975 
      __retres = err;
      
#line 975 
      goto return_label;
    }
    else ;
    
#line 976 
    err = esr_read_glue0(np,i,& glue0);
    
#line 977 
    if (err != 0) {
      
#line 978 
      __retres = err;
      
#line 978 
      goto return_label;
    }
    else ;
    
#line 980 
    rxtx_ctrl &= 4282384383U;
    
#line 981 
    rxtx_ctrl |= 8388609U;
    
#line 984 
    glue0 &= 4177522688U;
    
#line 987 
    glue0 |= 50343935U;
    
#line 993 
    err = esr_write_rxtx_ctrl(np,i,rxtx_ctrl);
    
#line 994 
    if (err != 0) {
      
#line 995 
      __retres = err;
      
#line 995 
      goto return_label;
    }
    else ;
    
#line 996 
    err = esr_write_glue0(np,i,glue0);
    
#line 997 
    if (err != 0) {
      
#line 998 
      __retres = err;
      
#line 998 
      goto return_label;
    }
    else ;
  }
  
#line 970 
  i += 1UL;
  ldv_53099: 
#line 971 
  ;
  
#line 970 
  if (i <= 3UL) 
#line 972 
                goto ldv_53098; else 
#line 975 
                                     goto ldv_53100;
  ldv_53100: 
#line 976 
  ;
  
#line 1002 
  sig = (u64)readq((void const volatile *)(np->regs + 1656832U));
  
#line 1003 
  switch ((int)np->port) {
    case 0: 
#line 1004 
    ;
    
#line 1005 
    val = 805306368ULL;
    
#line 1006 
    mask = val;
    
#line 1007 
    goto ldv_53102;
    case 1: 
#line 1009 
    ;
    
#line 1010 
    val = 201326592ULL;
    
#line 1011 
    mask = val;
    
#line 1012 
    goto ldv_53102;
    default: 
#line 1014 
    ;
    
#line 1015 
    __retres = -22;
    
#line 1015 
    goto return_label;
  }
  ldv_53102: 
#line 1018 
  ;
  
#line 1018 
  if ((sig & mask) != val) {
    
#line 1019 
    netdev_err((struct net_device const *)np->dev,"Port %u signal bits [%08x] are not [%08x]\n",(int)np->port,(int)(sig & mask),(int)val);
    
#line 1021 
    __retres = -19;
    
#line 1021 
    goto return_label;
  }
  else ;
  
#line 1024 
  __retres = 0;
  return_label: 
#line 1024 
                return __retres;
}


#line 1027  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_1g_serdes(struct niu *np, int *link_up_p)
{
  int __retres;
  int link_up;
  u64 val;
  u16 current_speed;
  unsigned long flags;
  u8 current_duplex;
  
#line 1029 
  struct niu_link_config *lp = & np->link_config;
  
#line 1036 
  link_up = 0;
  
#line 1037 
  current_speed = (unsigned short)65535U;
  
#line 1038 
  current_duplex = (unsigned char)255U;
  
#line 1040 
  ldv___ldv_spin_lock_73(& np->lock);
  
#line 1042 
  val = (u64)readq((void const volatile *)(np->regs + (np->pcs_off + (unsigned long)1572872U)));
  
#line 1044 
  if ((val & 4ULL) != 0ULL) {
    
#line 1045 
    link_up = 1;
    
#line 1046 
    current_speed = (unsigned short)1000U;
    
#line 1047 
    current_duplex = (unsigned char)1U;
  }
  else ;
  
#line 1050 
  lp->active_speed = current_speed;
  
#line 1051 
  lp->active_duplex = current_duplex;
  
#line 1052 
  ldv_spin_unlock_irqrestore_74(& np->lock,flags);
  
#line 1054 
  *link_up_p = link_up;
  
#line 1055 
  __retres = 0;
  
#line 1055 
  return __retres;
}


#line 1058  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_serdes(struct niu *np, int *link_up_p)
{
  int __retres;
  unsigned long flags;
  u64 val;
  u64 val2;
  u16 current_speed;
  u8 current_duplex;
  
#line 1061 
  struct niu_link_config *lp = & np->link_config;
  
#line 1062 
  int link_up = 0;
  
#line 1063 
  int link_ok = 1;
  
#line 1068 
  if ((np->flags & 262144U) == 0U) {
    int tmp;
    
#line 1069 
    tmp = link_status_1g_serdes(np,link_up_p);
    
#line 1069 
    __retres = tmp;
    
#line 1069 
    goto return_label;
  }
  else ;
  
#line 1071 
  current_speed = (unsigned short)65535U;
  
#line 1072 
  current_duplex = (unsigned char)255U;
  
#line 1073 
  ldv___ldv_spin_lock_75(& np->lock);
  
#line 1075 
  val = (u64)readq((void const volatile *)(np->regs + (np->xpcs_off + (unsigned long)1572928U)));
  
#line 1076 
  val2 = (u64)readq((void const volatile *)(np->mac_regs + 440U));
  
#line 1077 
  if ((val2 & 16777216ULL) != 0ULL) 
#line 1078 
                                    link_ok = 0; else ;
  
#line 1080 
  if ((val & 4096ULL) != 0ULL && link_ok != 0) {
    
#line 1081 
    link_up = 1;
    
#line 1082 
    current_speed = (unsigned short)10000U;
    
#line 1083 
    current_duplex = (unsigned char)1U;
  }
  else ;
  
#line 1085 
  lp->active_speed = current_speed;
  
#line 1086 
  lp->active_duplex = current_duplex;
  
#line 1087 
  ldv_spin_unlock_irqrestore_76(& np->lock,flags);
  
#line 1088 
  *link_up_p = link_up;
  
#line 1089 
  __retres = 0;
  return_label: 
#line 1089 
                return __retres;
}


#line 1092  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_mii(struct niu *np, int *link_up_p)
{
  int __retres;
  int err;
  int bmsr;
  int advert;
  int ctrl1000;
  int stat1000;
  int lpa;
  int bmcr;
  int estatus;
  int supported;
  int advertising;
  int active_speed;
  int active_duplex;
  u32 tmp;
  u32 tmp_0;
  
#line 1094 
  struct niu_link_config *lp = & np->link_config;
  
#line 1099 
  err = mii_read(np,np->phy_addr,0);
  
#line 1100 
  if ((long)(err < 0) != 0L) {
    
#line 1101 
    __retres = err;
    
#line 1101 
    goto return_label;
  }
  else ;
  
#line 1102 
  bmcr = err;
  
#line 1104 
  err = mii_read(np,np->phy_addr,1);
  
#line 1105 
  if ((long)(err < 0) != 0L) {
    
#line 1106 
    __retres = err;
    
#line 1106 
    goto return_label;
  }
  else ;
  
#line 1107 
  bmsr = err;
  
#line 1109 
  err = mii_read(np,np->phy_addr,4);
  
#line 1110 
  if ((long)(err < 0) != 0L) {
    
#line 1111 
    __retres = err;
    
#line 1111 
    goto return_label;
  }
  else ;
  
#line 1112 
  advert = err;
  
#line 1114 
  err = mii_read(np,np->phy_addr,5);
  
#line 1115 
  if ((long)(err < 0) != 0L) {
    
#line 1116 
    __retres = err;
    
#line 1116 
    goto return_label;
  }
  else ;
  
#line 1117 
  lpa = err;
  
#line 1119 
  if ((long)((bmsr & 256) != 0) != 0L) {
    
#line 1120 
    err = mii_read(np,np->phy_addr,15);
    
#line 1121 
    if ((long)(err < 0) != 0L) {
      
#line 1122 
      __retres = err;
      
#line 1122 
      goto return_label;
    }
    else ;
    
#line 1123 
    estatus = err;
    
#line 1125 
    err = mii_read(np,np->phy_addr,9);
    
#line 1126 
    if ((long)(err < 0) != 0L) {
      
#line 1127 
      __retres = err;
      
#line 1127 
      goto return_label;
    }
    else ;
    
#line 1128 
    ctrl1000 = err;
    
#line 1130 
    err = mii_read(np,np->phy_addr,10);
    
#line 1131 
    if ((long)(err < 0) != 0L) {
      
#line 1132 
      __retres = err;
      
#line 1132 
      goto return_label;
    }
    else ;
    
#line 1133 
    stat1000 = err;
  }
  else {
    
#line 1135 
    stat1000 = 0;
    
#line 1135 
    ctrl1000 = stat1000;
    
#line 1135 
    estatus = ctrl1000;
  }
  
#line 1137 
  supported = 0;
  
#line 1138 
  if ((bmsr & 8) != 0) 
#line 1139 
                       supported |= 64; else ;
  
#line 1140 
  if ((bmsr & 2048) != 0) 
#line 1141 
                          supported |= 1; else ;
  
#line 1142 
  if ((bmsr & 4096) != 0) 
#line 1143 
                          supported |= 2; else ;
  
#line 1144 
  if ((bmsr & 8192) != 0) 
#line 1145 
                          supported |= 4; else ;
  
#line 1146 
  if ((bmsr & 16384) != 0) 
#line 1147 
                           supported |= 8; else ;
  
#line 1148 
  if ((estatus & 4096) != 0) 
#line 1149 
                             supported |= 16; else ;
  
#line 1150 
  if ((estatus & 8192) != 0) 
#line 1151 
                             supported |= 32; else ;
  
#line 1152 
  lp->supported = (unsigned int)supported;
  
#line 1154 
  tmp = mii_adv_to_ethtool_adv_t((unsigned int)advert);
  
#line 1154 
  advertising = (int)tmp;
  
#line 1155 
  tmp_0 = mii_ctrl1000_to_ethtool_adv_t((unsigned int)ctrl1000);
  
#line 1155 
  advertising = (int)(tmp_0 | (unsigned int)advertising);
  
#line 1157 
  if ((bmcr & 4096) != 0) {
    int neg;
    int neg1000;
    
#line 1160 
    lp->active_autoneg = (unsigned char)1U;
    
#line 1161 
    advertising |= 64;
    
#line 1163 
    neg = advert & lpa;
    
#line 1164 
    neg1000 = (ctrl1000 << 2) & stat1000;
    
#line 1166 
    if ((neg1000 & 3072) != 0) 
#line 1167 
                               active_speed = 1000;
    else 
      
#line 1168 
      if ((neg & 896) != 0) 
#line 1169 
                            active_speed = 100;
      else 
        
#line 1170 
        if ((neg & 96) != 0) 
#line 1171 
                             active_speed = 10; else 
#line 1173 
                                                     active_speed = 65535;
    
#line 1175 
    if ((neg1000 & 2048) != 0 || (neg & 320) != 0) 
#line 1176 
                                                   active_duplex = 1;
    else 
      
#line 1177 
      if (active_speed != 65535) 
#line 1178 
                                 active_duplex = 0; else 
#line 1180 
                                                         active_duplex = 255;
  }
  else {
    
#line 1182 
    lp->active_autoneg = (unsigned char)0U;
    
#line 1184 
    if ((bmcr & 64) != 0 && (bmcr & 8192) == 0) 
#line 1185 
                                                active_speed = 1000;
    else 
      
#line 1186 
      if ((bmcr & 8192) != 0) 
#line 1187 
                              active_speed = 100; else 
#line 1189 
                                                       active_speed = 10;
    
#line 1191 
    if ((bmcr & 256) != 0) 
#line 1192 
                           active_duplex = 1; else 
#line 1194 
                                                   active_duplex = 0;
  }
  
#line 1197 
  lp->active_advertising = (unsigned int)advertising;
  
#line 1198 
  lp->active_speed = (unsigned short)active_speed;
  
#line 1199 
  lp->active_duplex = (unsigned char)active_duplex;
  
#line 1200 
  *link_up_p = (bmsr & 4) != 0;
  
#line 1202 
  __retres = 0;
  return_label: 
#line 1202 
                return __retres;
}


#line 1205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_1g_rgmii(struct niu *np, int *link_up_p)
{
  u16 current_speed;
  u16 bmsr;
  unsigned long flags;
  u8 current_duplex;
  int err;
  int link_up;
  
#line 1207 
  struct niu_link_config *lp = & np->link_config;
  
#line 1213 
  link_up = 0;
  
#line 1214 
  current_speed = (unsigned short)65535U;
  
#line 1215 
  current_duplex = (unsigned char)255U;
  
#line 1217 
  ldv___ldv_spin_lock_77(& np->lock);
  
#line 1219 
  err = -22;
  
#line 1221 
  err = mii_read(np,np->phy_addr,1);
  
#line 1222 
  if (err < 0) 
#line 1223 
               goto out; else ;
  
#line 1225 
  bmsr = (unsigned short)err;
  
#line 1226 
  if (((int)bmsr & 4) != 0) {
    u16 adv;
    u16 lpa;
    
#line 1229 
    err = mii_read(np,np->phy_addr,4);
    
#line 1230 
    if (err < 0) 
#line 1231 
                 goto out; else ;
    
#line 1232 
    adv = (unsigned short)err;
    
#line 1234 
    err = mii_read(np,np->phy_addr,5);
    
#line 1235 
    if (err < 0) 
#line 1236 
                 goto out; else ;
    
#line 1237 
    lpa = (unsigned short)err;
    
#line 1239 
    err = mii_read(np,np->phy_addr,15);
    
#line 1240 
    if (err < 0) 
#line 1241 
                 goto out; else ;
    
#line 1242 
    link_up = 1;
    
#line 1243 
    current_speed = (unsigned short)1000U;
    
#line 1244 
    current_duplex = (unsigned char)1U;
  }
  else ;
  
#line 1247 
  lp->active_speed = current_speed;
  
#line 1248 
  lp->active_duplex = current_duplex;
  
#line 1249 
  err = 0;
  out: 
#line 1251 
  ;
  
#line 1252 
  ldv_spin_unlock_irqrestore_78(& np->lock,flags);
  
#line 1254 
  *link_up_p = link_up;
  
#line 1255 
  return err;
}


#line 1258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_1g(struct niu *np, int *link_up_p)
{
  unsigned long flags;
  int err;
  
#line 1260 
  struct niu_link_config *lp = & np->link_config;
  
#line 1264 
  ldv___ldv_spin_lock_79(& np->lock);
  
#line 1266 
  err = link_status_mii(np,link_up_p);
  
#line 1267 
  lp->supported |= 128U;
  
#line 1268 
  lp->active_advertising |= 128U;
  
#line 1270 
  ldv_spin_unlock_irqrestore_80(& np->lock,flags);
  
#line 1271 
  return err;
}


#line 1274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int bcm8704_reset(struct niu *np)
{
  int __retres;
  int err;
  int limit;
  
#line 1278 
  err = mdio_read(np,np->phy_addr,4,0);
  
#line 1280 
  if (err < 0 || err == 65535) {
    
#line 1281 
    __retres = err;
    
#line 1281 
    goto return_label;
  }
  else ;
  
#line 1282 
  err |= 32768;
  
#line 1283 
  err = mdio_write(np,np->phy_addr,4,0,err);
  
#line 1285 
  if (err != 0) {
    
#line 1286 
    __retres = err;
    
#line 1286 
    goto return_label;
  }
  else ;
  
#line 1288 
  limit = 1000;
  
#line 1289 
  goto ldv_53174;
  ldv_53173: 
#line 1290 
  ;
  
#line 1290 
  err = mdio_read(np,np->phy_addr,4,0);
  
#line 1292 
  if (err < 0) {
    
#line 1293 
    __retres = err;
    
#line 1293 
    goto return_label;
  }
  else ;
  
#line 1294 
  if ((err & 32768) == 0) 
#line 1295 
                          goto ldv_53172; else ;
  ldv_53174: 
#line 1296 
  ;
  
#line 1289 
  limit -= 1;
  
#line 1289 
  if (limit >= 0) 
#line 1291 
                  goto ldv_53173; else 
#line 1294 
                                       goto ldv_53172;
  ldv_53172: 
#line 1295 
  ;
  
#line 1297 
  if (limit < 0) {
    
#line 1298 
    netdev_err((struct net_device const *)np->dev,"Port %u PHY will not reset (bmcr=%04x)\n",(int)np->port,err & 65535);
    
#line 1300 
    __retres = -19;
    
#line 1300 
    goto return_label;
  }
  else ;
  
#line 1302 
  __retres = 0;
  return_label: 
#line 1302 
                return __retres;
}


#line 1308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int bcm8704_user_dev3_readback(struct niu *np, int reg)
{
  int __retres;
  
#line 1310 
  int err = mdio_read(np,np->phy_addr,3,reg);
  
#line 1311 
  if (err < 0) {
    
#line 1312 
    __retres = err;
    
#line 1312 
    goto return_label;
  }
  else ;
  
#line 1313 
  err = mdio_read(np,np->phy_addr,3,reg);
  
#line 1314 
  if (err < 0) {
    
#line 1315 
    __retres = err;
    
#line 1315 
    goto return_label;
  }
  else ;
  
#line 1316 
  __retres = 0;
  return_label: 
#line 1316 
                return __retres;
}


#line 1319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int bcm8706_init_user_dev3(struct niu *np)
{
  int __retres;
  int err;
  
#line 1324 
  err = mdio_read(np,np->phy_addr,3,51208);
  
#line 1326 
  if (err < 0) {
    
#line 1327 
    __retres = err;
    
#line 1327 
    goto return_label;
  }
  else ;
  
#line 1328 
  err &= -97;
  
#line 1329 
  err |= 96;
  
#line 1330 
  err |= 16;
  
#line 1331 
  err = mdio_write(np,np->phy_addr,3,51208,err);
  
#line 1333 
  if (err != 0) {
    
#line 1334 
    __retres = err;
    
#line 1334 
    goto return_label;
  }
  else ;
  {
    
#line 1336 
    unsigned long __ms = 1000UL;
    {
      unsigned long tmp;
      
#line 1336 
      goto ldv_53186;
      ldv_53185: 
#line 1337 
      ;
      
#line 1336 
      __const_udelay(4295000UL);
      ldv_53186: 
#line 1338 
      ;
      
#line 1336 
      tmp = __ms;
      
#line 1336 
      __ms -= 1UL;
      
#line 1336 
      ;
      
#line 1336 
      if (tmp != 0UL) 
#line 1338 
                      goto ldv_53185; else 
#line 1341 
                                           goto ldv_53187;
      ldv_53187: 
#line 1342 
      ;
    }
  }
  
#line 1338 
  __retres = 0;
  return_label: 
#line 1338 
                return __retres;
}


#line 1341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int bcm8704_init_user_dev3(struct niu *np)
{
  int __retres;
  int err;
  
#line 1345 
  err = mdio_write(np,np->phy_addr,3,51200,32703);
  
#line 1356 
  if (err != 0) {
    
#line 1357 
    __retres = err;
    
#line 1357 
    goto return_label;
  }
  else ;
  
#line 1359 
  err = mdio_write(np,np->phy_addr,3,51203,356);
  
#line 1365 
  if (err != 0) {
    
#line 1366 
    __retres = err;
    
#line 1366 
    goto return_label;
  }
  else ;
  
#line 1368 
  err = bcm8704_user_dev3_readback(np,51200);
  
#line 1369 
  if (err != 0) {
    
#line 1370 
    __retres = err;
    
#line 1370 
    goto return_label;
  }
  else ;
  
#line 1371 
  err = bcm8704_user_dev3_readback(np,51203);
  
#line 1372 
  if (err != 0) {
    
#line 1373 
    __retres = err;
    
#line 1373 
    goto return_label;
  }
  else ;
  
#line 1375 
  err = mdio_read(np,np->phy_addr,3,51208);
  
#line 1377 
  if (err < 0) {
    
#line 1378 
    __retres = err;
    
#line 1378 
    goto return_label;
  }
  else ;
  
#line 1379 
  err &= -97;
  
#line 1380 
  err |= 96;
  
#line 1381 
  err = mdio_write(np,np->phy_addr,3,51208,err);
  
#line 1383 
  if (err != 0) {
    
#line 1384 
    __retres = err;
    
#line 1384 
    goto return_label;
  }
  else ;
  {
    
#line 1386 
    unsigned long __ms = 1000UL;
    {
      unsigned long tmp;
      
#line 1386 
      goto ldv_53194;
      ldv_53193: 
#line 1387 
      ;
      
#line 1386 
      __const_udelay(4295000UL);
      ldv_53194: 
#line 1388 
      ;
      
#line 1386 
      tmp = __ms;
      
#line 1386 
      __ms -= 1UL;
      
#line 1386 
      ;
      
#line 1386 
      if (tmp != 0UL) 
#line 1388 
                      goto ldv_53193; else 
#line 1391 
                                           goto ldv_53195;
      ldv_53195: 
#line 1392 
      ;
    }
  }
  
#line 1388 
  __retres = 0;
  return_label: 
#line 1388 
                return __retres;
}


#line 1391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int mrvl88x2011_act_led(struct niu *np, int val)
{
  int __retres;
  int err;
  int tmp;
  
#line 1395 
  err = mdio_read(np,np->phy_addr,2,33542);
  
#line 1397 
  if (err < 0) {
    
#line 1398 
    __retres = err;
    
#line 1398 
    goto return_label;
  }
  else ;
  
#line 1400 
  err &= -113;
  
#line 1401 
  err = (val << 4) | err;
  
#line 1403 
  tmp = mdio_write(np,np->phy_addr,2,33542,err);
  
#line 1403 
  __retres = tmp;
  return_label: 
#line 1403 
                return __retres;
}


#line 1407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int mrvl88x2011_led_blink_rate(struct niu *np, int rate)
{
  int err;
  
#line 1411 
  err = mdio_read(np,np->phy_addr,2,33539);
  
#line 1413 
  if (err >= 0) {
    
#line 1414 
    err &= -113;
    
#line 1415 
    err = (rate << 4) | err;
    
#line 1417 
    err = mdio_write(np,np->phy_addr,2,33539,err);
  }
  else ;
  
#line 1421 
  return err;
}


#line 1424  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_10g_mrvl88x2011(struct niu *np)
{
  int __retres;
  int err;
  int tmp;
  
#line 1429 
  err = mrvl88x2011_led_blink_rate(np,2);
  
#line 1430 
  if (err != 0) {
    
#line 1431 
    __retres = err;
    
#line 1431 
    goto return_label;
  }
  else ;
  
#line 1434 
  err = mrvl88x2011_act_led(np,0);
  
#line 1435 
  if (err != 0) {
    
#line 1436 
    __retres = err;
    
#line 1436 
    goto return_label;
  }
  else ;
  
#line 1438 
  err = mdio_read(np,np->phy_addr,3,33536);
  
#line 1440 
  if (err < 0) {
    
#line 1441 
    __retres = err;
    
#line 1441 
    goto return_label;
  }
  else ;
  
#line 1443 
  err |= 1;
  
#line 1445 
  err = mdio_write(np,np->phy_addr,3,33536,err);
  
#line 1447 
  if (err < 0) {
    
#line 1448 
    __retres = err;
    
#line 1448 
    goto return_label;
  }
  else ;
  
#line 1450 
  err = mdio_read(np,np->phy_addr,1,0);
  
#line 1452 
  if (err < 0) {
    
#line 1453 
    __retres = err;
    
#line 1453 
    goto return_label;
  }
  else ;
  
#line 1455 
  if ((unsigned int)np->link_config.loopback_mode == 2U) 
#line 1456 
                                                         err |= 1; else 
                                                                    
#line 1458 
                                                                    err &= -2;
  
#line 1460 
  err = mdio_write(np,np->phy_addr,1,0,err);
  
#line 1462 
  if (err < 0) {
    
#line 1463 
    __retres = err;
    
#line 1463 
    goto return_label;
  }
  else ;
  
#line 1466 
  tmp = mdio_write(np,np->phy_addr,1,9,0);
  
#line 1466 
  __retres = tmp;
  return_label: 
#line 1466 
                return __retres;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int xcvr_diag_bcm870x(struct niu *np)
{
  int __retres;
  u16 analog_stat0;
  u16 tx_alarm_status;
  
#line 1474 
  int err = 0;
  
#line 1477 
  err = mdio_read(np,np->phy_addr,1,10);
  
#line 1479 
  if (err < 0) {
    
#line 1480 
    __retres = err;
    
#line 1480 
    goto return_label;
  }
  else ;
  
#line 1481 
  printk("\001",(int)np->port,err);
  
#line 1483 
  err = mdio_read(np,np->phy_addr,3,32);
  
#line 1484 
  if (err < 0) {
    
#line 1485 
    __retres = err;
    
#line 1485 
    goto return_label;
  }
  else ;
  
#line 1486 
  printk("\001",(int)np->port,err);
  
#line 1488 
  err = mdio_read(np,np->phy_addr,4,20);
  
#line 1490 
  if (err < 0) {
    
#line 1491 
    __retres = err;
    
#line 1491 
    goto return_label;
  }
  else ;
  
#line 1492 
  printk("\001",(int)np->port,err);
  
#line 1496 
  err = mdio_read(np,np->phy_addr,3,51204);
  
#line 1498 
  if (err < 0) {
    
#line 1499 
    __retres = err;
    
#line 1499 
    goto return_label;
  }
  else ;
  
#line 1500 
  err = mdio_read(np,np->phy_addr,3,51204);
  
#line 1502 
  if (err < 0) {
    
#line 1503 
    __retres = err;
    
#line 1503 
    goto return_label;
  }
  else ;
  
#line 1504 
  analog_stat0 = (unsigned short)err;
  
#line 1506 
  err = mdio_read(np,np->phy_addr,3,36868);
  
#line 1508 
  if (err < 0) {
    
#line 1509 
    __retres = err;
    
#line 1509 
    goto return_label;
  }
  else ;
  
#line 1510 
  err = mdio_read(np,np->phy_addr,3,36868);
  
#line 1512 
  if (err < 0) {
    
#line 1513 
    __retres = err;
    
#line 1513 
    goto return_label;
  }
  else ;
  
#line 1514 
  tx_alarm_status = (unsigned short)err;
  
#line 1516 
  if ((unsigned int)analog_stat0 != 1020U) {
    
#line 1517 
    if ((unsigned int)analog_stat0 == 17340U && (unsigned int)tx_alarm_status != 0U) 
      
#line 1518 
      printk("\001",(int)np->port);
    else 
      
#line 1520 
      if ((unsigned int)analog_stat0 == 25500U) 
#line 1521 
                                                printk("\001",(int)np->port); else ;
  }
  else ;
  
#line 1526 
  __retres = 0;
  return_label: 
#line 1526 
                return __retres;
}


#line 1529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int xcvr_10g_set_lb_bcm870x(struct niu *np)
{
  int __retres;
  int err;
  
#line 1531 
  struct niu_link_config *lp = & np->link_config;
  
#line 1534 
  err = mdio_read(np,np->phy_addr,2,0);
  
#line 1536 
  if (err < 0) {
    
#line 1537 
    __retres = err;
    
#line 1537 
    goto return_label;
  }
  else ;
  
#line 1539 
  err &= -16385;
  
#line 1541 
  if ((unsigned int)lp->loopback_mode == 2U) 
#line 1542 
                                             err |= 16384; else ;
  
#line 1544 
  err = mdio_write(np,np->phy_addr,2,0,err);
  
#line 1546 
  if (err != 0) {
    
#line 1547 
    __retres = err;
    
#line 1547 
    goto return_label;
  }
  else ;
  
#line 1549 
  __retres = 0;
  return_label: 
#line 1549 
                return __retres;
}


#line 1552  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_10g_bcm8706(struct niu *np)
{
  int __retres;
  u64 val;
  
#line 1554 
  int err = 0;
  
#line 1557 
  if ((np->flags & 16777216U) != 0U && (np->flags & 33554432U) == 0U) {
    
#line 1559 
    __retres = err;
    
#line 1559 
    goto return_label;
  }
  else ;
  
#line 1561 
  val = (u64)readq((void const volatile *)(np->mac_regs + 96U));
  
#line 1562 
  val &= 18446744073705357311ULL;
  
#line 1563 
  val |= 2097152ULL;
  
#line 1564 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 1566 
  val = (u64)readq((void const volatile *)(np->regs + 1663008U));
  
#line 1567 
  val |= 32768ULL;
  
#line 1568 
  writeq((unsigned long)val,(void volatile *)(np->regs + 1663008U));
  
#line 1570 
  err = bcm8704_reset(np);
  
#line 1571 
  if (err != 0) {
    
#line 1572 
    __retres = err;
    
#line 1572 
    goto return_label;
  }
  else ;
  
#line 1574 
  err = xcvr_10g_set_lb_bcm870x(np);
  
#line 1575 
  if (err != 0) {
    
#line 1576 
    __retres = err;
    
#line 1576 
    goto return_label;
  }
  else ;
  
#line 1578 
  err = bcm8706_init_user_dev3(np);
  
#line 1579 
  if (err != 0) {
    
#line 1580 
    __retres = err;
    
#line 1580 
    goto return_label;
  }
  else ;
  
#line 1582 
  err = xcvr_diag_bcm870x(np);
  
#line 1583 
  if (err != 0) {
    
#line 1584 
    __retres = err;
    
#line 1584 
    goto return_label;
  }
  else ;
  
#line 1586 
  __retres = 0;
  return_label: 
#line 1586 
                return __retres;
}


#line 1589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_10g_bcm8704(struct niu *np)
{
  int __retres;
  int err;
  
#line 1593 
  err = bcm8704_reset(np);
  
#line 1594 
  if (err != 0) {
    
#line 1595 
    __retres = err;
    
#line 1595 
    goto return_label;
  }
  else ;
  
#line 1597 
  err = bcm8704_init_user_dev3(np);
  
#line 1598 
  if (err != 0) {
    
#line 1599 
    __retres = err;
    
#line 1599 
    goto return_label;
  }
  else ;
  
#line 1601 
  err = xcvr_10g_set_lb_bcm870x(np);
  
#line 1602 
  if (err != 0) {
    
#line 1603 
    __retres = err;
    
#line 1603 
    goto return_label;
  }
  else ;
  
#line 1605 
  err = xcvr_diag_bcm870x(np);
  
#line 1606 
  if (err != 0) {
    
#line 1607 
    __retres = err;
    
#line 1607 
    goto return_label;
  }
  else ;
  
#line 1609 
  __retres = 0;
  return_label: 
#line 1609 
                return __retres;
}


#line 1612  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_10g(struct niu *np)
{
  int phy_id;
  int err;
  u64 val;
  u32 tmp_1;
  
#line 1617 
  val = (u64)readq((void const volatile *)(np->mac_regs + 96U));
  
#line 1618 
  val &= 18446744073705357311ULL;
  
#line 1619 
  val |= 2097152ULL;
  
#line 1620 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 1623 
  val = (u64)readq((void const volatile *)(np->regs + 1663008U));
  
#line 1624 
  val |= 32768ULL;
  
#line 1625 
  writeq((unsigned long)val,(void volatile *)(np->regs + 1663008U));
  
#line 1627 
  tmp_1 = phy_decode((np->parent)->port_phy,(int)np->port);
  
#line 1627 
  phy_id = (int)tmp_1;
  
#line 1628 
  phy_id = (int)(np->parent)->phy_probe_info.phy_id[phy_id][(int)np->port];
  
#line 1631 
  switch ((unsigned int)phy_id & 4294963440U) {
    case (unsigned int)21037088: 
#line 1632 
    ;
    
#line 1633 
    err = xcvr_init_10g_mrvl88x2011(np);
    
#line 1634 
    goto ldv_53237;
    default: 
#line 1636 
    ;
    
#line 1637 
    err = xcvr_init_10g_bcm8704(np);
    
#line 1638 
    goto ldv_53237;
  }
  ldv_53237: 
#line 1641 
  ;
  
#line 1641 
  return err;
}


#line 1644  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int mii_reset(struct niu *np)
{
  int __retres;
  int limit;
  int err;
  
#line 1648 
  err = mii_write(np,np->phy_addr,0,32768);
  
#line 1649 
  if (err != 0) {
    
#line 1650 
    __retres = err;
    
#line 1650 
    goto return_label;
  }
  else ;
  
#line 1652 
  limit = 1000;
  
#line 1653 
  goto ldv_53246;
  ldv_53245: 
#line 1654 
  ;
  
#line 1654 
  __const_udelay(2147500UL);
  
#line 1655 
  err = mii_read(np,np->phy_addr,0);
  
#line 1656 
  if (err < 0) {
    
#line 1657 
    __retres = err;
    
#line 1657 
    goto return_label;
  }
  else ;
  
#line 1658 
  if ((err & 32768) == 0) 
#line 1659 
                          goto ldv_53244; else ;
  ldv_53246: 
#line 1660 
  ;
  
#line 1653 
  limit -= 1;
  
#line 1653 
  if (limit >= 0) 
#line 1655 
                  goto ldv_53245; else 
#line 1658 
                                       goto ldv_53244;
  ldv_53244: 
#line 1659 
  ;
  
#line 1661 
  if (limit < 0) {
    
#line 1662 
    netdev_err((struct net_device const *)np->dev,"Port %u MII would not reset, bmcr[%04x]\n",(int)np->port,err);
    
#line 1664 
    __retres = -19;
    
#line 1664 
    goto return_label;
  }
  else ;
  
#line 1667 
  __retres = 0;
  return_label: 
#line 1667 
                return __retres;
}


#line 1670  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_1g_rgmii(struct niu *np)
{
  int __retres;
  int err;
  u64 val;
  u16 bmcr;
  u16 bmsr;
  u16 estat;
  int tmp_0;
  
#line 1676 
  val = (u64)readq((void const volatile *)(np->regs + 1663008U));
  
#line 1677 
  val &= 18446744073709518847ULL;
  
#line 1678 
  writeq((unsigned long)val,(void volatile *)(np->regs + 1663008U));
  
#line 1680 
  err = mii_reset(np);
  
#line 1681 
  if (err != 0) {
    
#line 1682 
    __retres = err;
    
#line 1682 
    goto return_label;
  }
  else ;
  
#line 1684 
  err = mii_read(np,np->phy_addr,1);
  
#line 1685 
  if (err < 0) {
    
#line 1686 
    __retres = err;
    
#line 1686 
    goto return_label;
  }
  else ;
  
#line 1687 
  bmsr = (unsigned short)err;
  
#line 1689 
  estat = (unsigned short)0U;
  
#line 1690 
  if (((int)bmsr & 256) != 0) {
    
#line 1691 
    err = mii_read(np,np->phy_addr,15);
    
#line 1692 
    if (err < 0) {
      
#line 1693 
      __retres = err;
      
#line 1693 
      goto return_label;
    }
    else ;
    
#line 1694 
    estat = (unsigned short)err;
  }
  else ;
  
#line 1697 
  bmcr = (unsigned short)0U;
  
#line 1698 
  err = mii_write(np,np->phy_addr,0,(int)bmcr);
  
#line 1699 
  if (err != 0) {
    
#line 1700 
    __retres = err;
    
#line 1700 
    goto return_label;
  }
  else ;
  
#line 1702 
  if (((int)bmsr & 256) != 0) {
    
#line 1703 
    u16 ctrl1000 = (unsigned short)0U;
    
#line 1705 
    if (((int)estat & 8192) != 0) 
#line 1706 
                                  ctrl1000 = (unsigned short)((unsigned int)ctrl1000 | 512U); else ;
    
#line 1707 
    err = mii_write(np,np->phy_addr,9,(int)ctrl1000);
    
#line 1708 
    if (err != 0) {
      
#line 1709 
      __retres = err;
      
#line 1709 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1712 
  bmcr = (unsigned short)320U;
  
#line 1714 
  err = mii_write(np,np->phy_addr,0,(int)bmcr);
  
#line 1715 
  if (err != 0) {
    
#line 1716 
    __retres = err;
    
#line 1716 
    goto return_label;
  }
  else ;
  
#line 1718 
  err = mii_read(np,np->phy_addr,0);
  
#line 1719 
  if (err < 0) {
    
#line 1720 
    __retres = err;
    
#line 1720 
    goto return_label;
  }
  else ;
  
#line 1721 
  tmp_0 = mii_read(np,np->phy_addr,0);
  
#line 1721 
  bmcr = (unsigned short)tmp_0;
  
#line 1723 
  err = mii_read(np,np->phy_addr,1);
  
#line 1724 
  if (err < 0) {
    
#line 1725 
    __retres = err;
    
#line 1725 
    goto return_label;
  }
  else ;
  
#line 1727 
  __retres = 0;
  return_label: 
#line 1727 
                return __retres;
}


#line 1730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int mii_init_common(struct niu *np)
{
  int __retres;
  u16 bmcr;
  u16 bmsr;
  u16 adv;
  u16 estat;
  int err;
  
#line 1732 
  struct niu_link_config *lp = & np->link_config;
  
#line 1736 
  err = mii_reset(np);
  
#line 1737 
  if (err != 0) {
    
#line 1738 
    __retres = err;
    
#line 1738 
    goto return_label;
  }
  else ;
  
#line 1740 
  err = mii_read(np,np->phy_addr,1);
  
#line 1741 
  if (err < 0) {
    
#line 1742 
    __retres = err;
    
#line 1742 
    goto return_label;
  }
  else ;
  
#line 1743 
  bmsr = (unsigned short)err;
  
#line 1745 
  estat = (unsigned short)0U;
  
#line 1746 
  if (((int)bmsr & 256) != 0) {
    
#line 1747 
    err = mii_read(np,np->phy_addr,15);
    
#line 1748 
    if (err < 0) {
      
#line 1749 
      __retres = err;
      
#line 1749 
      goto return_label;
    }
    else ;
    
#line 1750 
    estat = (unsigned short)err;
  }
  else ;
  
#line 1753 
  bmcr = (unsigned short)0U;
  
#line 1754 
  err = mii_write(np,np->phy_addr,0,(int)bmcr);
  
#line 1755 
  if (err != 0) {
    
#line 1756 
    __retres = err;
    
#line 1756 
    goto return_label;
  }
  else ;
  
#line 1758 
  if ((unsigned int)lp->loopback_mode == 2U) {
    
#line 1759 
    bmcr = (unsigned short)((unsigned int)bmcr | 16384U);
    
#line 1760 
    if ((unsigned int)lp->active_speed == 1000U) 
#line 1761 
                                                 bmcr = (unsigned short)((unsigned int)bmcr | 64U); else ;
    
#line 1762 
    if ((unsigned int)lp->active_duplex == 1U) 
#line 1763 
                                               bmcr = (unsigned short)((unsigned int)bmcr | 256U); else ;
  }
  else ;
  
#line 1766 
  if ((unsigned int)lp->loopback_mode == 1U) {
    u16 aux;
    
#line 1769 
    aux = (unsigned short)33792U;
    
#line 1771 
    err = mii_write(np,np->phy_addr,24,(int)aux);
    
#line 1772 
    if (err != 0) {
      
#line 1773 
      __retres = err;
      
#line 1773 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1776 
  if ((unsigned int)lp->autoneg != 0U) {
    u16 ctrl1000;
    
#line 1779 
    adv = (unsigned short)1025U;
    
#line 1780 
    if (((int)bmsr & 2048) != 0 && (lp->advertising & 1U) != 0U) 
#line 1782 
                                                                 adv = (unsigned short)((unsigned int)adv | 32U); else ;
    
#line 1783 
    if (((int)bmsr & 4096) != 0 && (lp->advertising & 2U) != 0U) 
#line 1785 
                                                                 adv = (unsigned short)((unsigned int)adv | 64U); else ;
    
#line 1786 
    if (((int)bmsr & 8192) != 0 && (lp->advertising & 4U) != 0U) 
#line 1788 
                                                                 adv = (unsigned short)((unsigned int)adv | 128U); else ;
    
#line 1789 
    if (((int)bmsr & 16384) != 0 && (lp->advertising & 8U) != 0U) 
#line 1791 
                                                                  adv = (unsigned short)((unsigned int)adv | 256U); else ;
    
#line 1792 
    err = mii_write(np,np->phy_addr,4,(int)adv);
    
#line 1793 
    if (err != 0) {
      
#line 1794 
      __retres = err;
      
#line 1794 
      goto return_label;
    }
    else ;
    
#line 1796 
    if ((long)(((int)bmsr & 256) != 0) != 0L) {
      
#line 1797 
      ctrl1000 = (unsigned short)0U;
      
#line 1798 
      if (((int)estat & 4096) != 0 && (lp->advertising & 16U) != 0U) 
        
#line 1800 
        ctrl1000 = (unsigned short)((unsigned int)ctrl1000 | 256U); else ;
      
#line 1801 
      if (((int)estat & 8192) != 0 && (lp->advertising & 32U) != 0U) 
        
#line 1803 
        ctrl1000 = (unsigned short)((unsigned int)ctrl1000 | 512U); else ;
      
#line 1804 
      err = mii_write(np,np->phy_addr,9,(int)ctrl1000);
      
#line 1806 
      if (err != 0) {
        
#line 1807 
        __retres = err;
        
#line 1807 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 1810 
    bmcr = (unsigned short)((unsigned int)bmcr | 4608U);
  }
  else {
    int fulldpx;
    
#line 1815 
    if ((unsigned int)lp->duplex == 1U) {
      
#line 1816 
      bmcr = (unsigned short)((unsigned int)bmcr | 256U);
      
#line 1817 
      fulldpx = 1;
    }
    else 
      
#line 1818 
      if ((unsigned int)lp->duplex == 0U) 
#line 1819 
                                          fulldpx = 0;
      else {
        
#line 1821 
        __retres = -22;
        
#line 1821 
        goto return_label;
      }
    
#line 1823 
    if ((unsigned int)lp->speed == 1000U) {
      
#line 1826 
      if ((fulldpx != 0 && ((int)estat & 8192) == 0) || (fulldpx == 0 && ((int)estat & 4096) == 0)) {
        
#line 1828 
        __retres = -22;
        
#line 1828 
        goto return_label;
      }
      else ;
      
#line 1829 
      bmcr = (unsigned short)((unsigned int)bmcr | 64U);
    }
    else 
      
#line 1830 
      if ((unsigned int)lp->speed == 100U) {
        
#line 1831 
        if ((fulldpx != 0 && ((int)bmsr & 16384) == 0) || (fulldpx == 0 && ((int)bmsr & 8192) == 0)) {
          
#line 1833 
          __retres = -22;
          
#line 1833 
          goto return_label;
        }
        else ;
        
#line 1834 
        bmcr = (unsigned short)((unsigned int)bmcr | 8192U);
      }
      else 
        
#line 1835 
        if ((unsigned int)lp->speed == 10U) {
          
#line 1836 
          if ((fulldpx != 0 && ((int)bmsr & 4096) == 0) || (fulldpx == 0 && ((int)bmsr & 2048) == 0)) {
            
#line 1838 
            __retres = -22;
            
#line 1838 
            goto return_label;
          }
          else ;
        }
        else {
          
#line 1840 
          __retres = -22;
          
#line 1840 
          goto return_label;
        }
  }
  
#line 1843 
  err = mii_write(np,np->phy_addr,0,(int)bmcr);
  
#line 1844 
  if (err != 0) {
    
#line 1845 
    __retres = err;
    
#line 1845 
    goto return_label;
  }
  else ;
  
#line 1862 
  __retres = 0;
  return_label: 
#line 1862 
                return __retres;
}


#line 1865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_1g(struct niu *np)
{
  u64 val;
  int tmp_0;
  
#line 1870 
  val = (u64)readq((void const volatile *)(np->regs + 1663008U));
  
#line 1871 
  val &= 18446744073709518847ULL;
  
#line 1872 
  writeq((unsigned long)val,(void volatile *)(np->regs + 1663008U));
  
#line 1874 
  tmp_0 = mii_init_common(np);
  
#line 1874 
  return tmp_0;
}


#line 1877  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_xcvr_init(struct niu *np)
{
  int err;
  
#line 1879 
  struct niu_phy_ops const *ops = np->phy_ops;
  
#line 1882 
  err = 0;
  
#line 1883 
  if (ops->xcvr_init != (int (*)(struct niu *))0) 
#line 1884 
                                                  err = (*(ops->xcvr_init))(np); else ;
  
#line 1886 
  return err;
}


#line 1889  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_serdes_init(struct niu *np)
{
  int err;
  
#line 1891 
  struct niu_phy_ops const *ops = np->phy_ops;
  
#line 1894 
  err = 0;
  
#line 1895 
  if (ops->serdes_init != (int (*)(struct niu *))0) 
#line 1896 
                                                    err = (*(ops->serdes_init))(np); else ;
  
#line 1898 
  return err;
}


#line 1901 
static void niu_init_xif(struct niu *np);


#line 1902 
static void niu_handle_led(struct niu *np, int status);


#line 1904  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_link_status_common(struct niu *np, int link_up)
{
  int __retres;
  unsigned long flags;
  int tmp_5;
  bool tmp_4;
  
#line 1906 
  struct niu_link_config *lp = & np->link_config;
  
#line 1907 
  struct net_device *dev = np->dev;
  
#line 1910 
  tmp_4 = netif_carrier_ok((struct net_device const *)dev);
  
#line 1910 
  if (tmp_4) 
#line 1910 
             tmp_5 = 0; else 
#line 1910 
                             tmp_5 = 1;
  
#line 1910 
  if (tmp_5) {
    
#line 1910 
    if (link_up != 0) {
      
#line 1911 
      if ((np->msg_enable & 4U) != 0U) {
        char *tmp;
        char *tmp_2;
        
#line 1911 
        if ((unsigned int)lp->active_duplex == 1U) 
#line 1911 
                                                   tmp = (char *)"full"; else 
                                                                    
#line 1911 
                                                                    tmp = (char *)"half";
        
#line 1911 
        if ((unsigned int)lp->active_speed != 10000U) {
          char *tmp_1;
          
#line 1911 
          if ((unsigned int)lp->active_speed != 1000U) {
            char *tmp_0;
            
#line 1911 
            if ((unsigned int)lp->active_speed == 100U) 
#line 1911 
                                                        tmp_0 = (char *)"100Mbit/sec"; else 
                                                                    
#line 1911 
                                                                    tmp_0 = (char *)"10Mbit/sec";
            
#line 1911 
            tmp_1 = tmp_0;
          }
          else 
#line 1911 
               tmp_1 = (char *)"1Gb/sec";
          
#line 1911 
          tmp_2 = tmp_1;
        }
        else 
#line 1911 
             tmp_2 = (char *)"10Gb/sec";
        
#line 1911 
        ;
        
#line 1911 
        netdev_info((struct net_device const *)dev,"Link is up at %s, %s duplex\n",tmp_2,tmp);
      }
      else ;
      
#line 1918 
      ldv___ldv_spin_lock_81(& np->lock);
      
#line 1919 
      niu_init_xif(np);
      
#line 1920 
      niu_handle_led(np,1);
      
#line 1921 
      ldv_spin_unlock_irqrestore_82(& np->lock,flags);
      
#line 1923 
      netif_carrier_on(dev);
    }
    else 
#line 1910 
         goto _LAND;
  }
  else {
    bool tmp_3;
    _LAND: 
#line 1924 
    tmp_3 = netif_carrier_ok((struct net_device const *)dev);
    
#line 1924 
    if ((int)tmp_3 != 0) {
      
#line 1924 
      if (link_up == 0) {
        
#line 1925 
        if ((np->msg_enable & 4U) != 0U) 
#line 1925 
                                         netdev_warn((struct net_device const *)dev,"Link is down\n"); else ;
        
#line 1926 
        ldv___ldv_spin_lock_83(& np->lock);
        
#line 1927 
        niu_handle_led(np,0);
        
#line 1928 
        ldv_spin_unlock_irqrestore_84(& np->lock,flags);
        
#line 1929 
        netif_carrier_off(dev);
      }
      else ;
    }
    else ;
  }
  
#line 1932 
  __retres = 0;
  
#line 1932 
  return __retres;
}


#line 1935  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_mrvl(struct niu *np, int *link_up_p)
{
  int err;
  int link_up;
  int pma_status;
  int pcs_status;
  int tmp;
  
#line 1939 
  link_up = 0;
  
#line 1941 
  err = mdio_read(np,np->phy_addr,1,8);
  
#line 1943 
  if (err < 0) 
#line 1944 
               goto out; else ;
  
#line 1947 
  err = mdio_read(np,np->phy_addr,1,1);
  
#line 1949 
  if (err < 0) 
#line 1950 
               goto out; else ;
  
#line 1952 
  pma_status = (err >> 2) & 1;
  
#line 1955 
  err = mdio_read(np,np->phy_addr,3,1);
  
#line 1957 
  if (err < 0) 
#line 1958 
               goto out; else ;
  
#line 1960 
  err = mdio_read(np,np->phy_addr,3,1);
  
#line 1962 
  if (err < 0) 
#line 1963 
               goto out; else ;
  
#line 1965 
  pcs_status = (err >> 2) & 1;
  
#line 1968 
  err = mdio_read(np,np->phy_addr,4,24);
  
#line 1970 
  if (err < 0) 
#line 1971 
               goto out; else ;
  
#line 1973 
  if (err == 7183) 
#line 1977 
                   link_up = (pma_status != 0 && pcs_status != 0) != 0; else ;
  
#line 1979 
  np->link_config.active_speed = (unsigned short)10000U;
  
#line 1980 
  np->link_config.active_duplex = (unsigned char)1U;
  
#line 1981 
  err = 0;
  out: 
#line 1982 
  ;
  
#line 1983 
  if (link_up != 0) 
#line 1983 
                    tmp = 5; else 
#line 1983 
                                  tmp = 0;
  
#line 1983 
  ;
  
#line 1983 
  mrvl88x2011_act_led(np,tmp);
  
#line 1987 
  *link_up_p = link_up;
  
#line 1988 
  return err;
}


#line 1991  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_bcm8706(struct niu *np, int *link_up_p)
{
  int err;
  int link_up;
  
#line 1994 
  link_up = 0;
  
#line 1996 
  err = mdio_read(np,np->phy_addr,1,10);
  
#line 1998 
  if (err < 0 || err == 65535) 
#line 1999 
                               goto out; else ;
  
#line 2000 
  if ((err & 1) == 0) {
    
#line 2001 
    err = 0;
    
#line 2002 
    goto out;
  }
  else ;
  
#line 2005 
  err = mdio_read(np,np->phy_addr,2,32);
  
#line 2007 
  if (err < 0) 
#line 2008 
               goto out; else ;
  
#line 2010 
  if ((err & 1) == 0) {
    
#line 2011 
    err = 0;
    
#line 2012 
    goto out;
  }
  else ;
  
#line 2015 
  err = mdio_read(np,np->phy_addr,4,24);
  
#line 2017 
  if (err < 0) 
#line 2018 
               goto out; else ;
  
#line 2019 
  if (err != 7183) {
    
#line 2026 
    err = 0;
    
#line 2027 
    np->link_config.active_speed = (unsigned short)65535U;
    
#line 2028 
    np->link_config.active_duplex = (unsigned char)255U;
    
#line 2029 
    goto out;
  }
  else ;
  
#line 2032 
  link_up = 1;
  
#line 2033 
  np->link_config.active_speed = (unsigned short)10000U;
  
#line 2034 
  np->link_config.active_duplex = (unsigned char)1U;
  
#line 2035 
  err = 0;
  out: 
#line 2037 
  ;
  
#line 2038 
  *link_up_p = link_up;
  
#line 2039 
  return err;
}


#line 2042  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_bcom(struct niu *np, int *link_up_p)
{
  int err;
  int link_up;
  
#line 2046 
  link_up = 0;
  
#line 2048 
  err = mdio_read(np,np->phy_addr,1,10);
  
#line 2050 
  if (err < 0) 
#line 2051 
               goto out; else ;
  
#line 2052 
  if ((err & 1) == 0) {
    
#line 2053 
    err = 0;
    
#line 2054 
    goto out;
  }
  else ;
  
#line 2057 
  err = mdio_read(np,np->phy_addr,2,32);
  
#line 2059 
  if (err < 0) 
#line 2060 
               goto out; else ;
  
#line 2061 
  if ((err & 1) == 0) {
    
#line 2062 
    err = 0;
    
#line 2063 
    goto out;
  }
  else ;
  
#line 2066 
  err = mdio_read(np,np->phy_addr,4,24);
  
#line 2068 
  if (err < 0) 
#line 2069 
               goto out; else ;
  
#line 2071 
  if (err != 5135) {
    
#line 2077 
    err = 0;
    
#line 2078 
    goto out;
  }
  else ;
  
#line 2081 
  link_up = 1;
  
#line 2082 
  np->link_config.active_speed = (unsigned short)10000U;
  
#line 2083 
  np->link_config.active_duplex = (unsigned char)1U;
  
#line 2084 
  err = 0;
  out: 
#line 2086 
  ;
  
#line 2087 
  *link_up_p = link_up;
  
#line 2088 
  return err;
}


#line 2091  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_10g(struct niu *np, int *link_up_p)
{
  unsigned long flags;
  
#line 2094 
  int err = -22;
  
#line 2096 
  ldv___ldv_spin_lock_85(& np->lock);
  
#line 2098 
  if ((unsigned int)np->link_config.loopback_mode == 0U) {
    int phy_id;
    u32 tmp;
    
#line 2101 
    tmp = phy_decode((np->parent)->port_phy,(int)np->port);
    
#line 2101 
    phy_id = (int)tmp;
    
#line 2102 
    phy_id = (int)(np->parent)->phy_probe_info.phy_id[phy_id][(int)np->port];
    
#line 2105 
    switch ((unsigned int)phy_id & 4294963440U) {
      case (unsigned int)21037088: 
#line 2106 
      ;
      
#line 2107 
      err = link_status_10g_mrvl(np,link_up_p);
      
#line 2108 
      goto ldv_53325;
      default: 
#line 2110 
      ;
      
#line 2111 
      err = link_status_10g_bcom(np,link_up_p);
      
#line 2112 
      goto ldv_53325;
    }
    ldv_53325: 
#line 2114 
    ;
  }
  else ;
  
#line 2116 
  ldv_spin_unlock_irqrestore_86(& np->lock,flags);
  
#line 2118 
  return err;
}


#line 2121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_10g_phy_present(struct niu *np)
{
  int __retres;
  u64 sig;
  u64 mask;
  u64 val;
  
#line 2125 
  sig = (u64)readq((void const volatile *)(np->regs + 1656832U));
  
#line 2126 
  switch ((int)np->port) {
    case 0: 
#line 2127 
    ;
    
#line 2128 
    mask = 870318095ULL;
    
#line 2129 
    val = 870318080ULL;
    
#line 2136 
    goto ldv_53334;
    case 1: 
#line 2138 
    ;
    
#line 2139 
    mask = 203358448ULL;
    
#line 2140 
    val = 203358208ULL;
    
#line 2147 
    goto ldv_53334;
    default: 
#line 2149 
    ;
    
#line 2150 
    __retres = 0;
    
#line 2150 
    goto return_label;
  }
  ldv_53334: 
#line 2153 
  ;
  
#line 2153 
  if ((sig & mask) != val) {
    
#line 2154 
    __retres = 0;
    
#line 2154 
    goto return_label;
  }
  else ;
  
#line 2155 
  __retres = 1;
  return_label: 
#line 2155 
                return __retres;
}


#line 2158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_hotplug(struct niu *np, int *link_up_p)
{
  int __retres;
  unsigned long flags;
  int phy_present;
  int phy_present_prev;
  
#line 2161 
  int err = 0;
  
#line 2165 
  ldv___ldv_spin_lock_87(& np->lock);
  
#line 2167 
  if ((unsigned int)np->link_config.loopback_mode == 0U) {
    
#line 2168 
    phy_present_prev = (int)(np->flags >> 25) & 1;
    
#line 2170 
    phy_present = niu_10g_phy_present(np);
    
#line 2171 
    if (phy_present != phy_present_prev) 
      
#line 2173 
      if (phy_present != 0) {
        
#line 2175 
        np->flags |= 33554432U;
        
#line 2176 
        if ((np->phy_ops)->xcvr_init != (int (*)(struct niu *))0) 
#line 2177 
                                                                  err = (*((np->phy_ops)->xcvr_init))(np); else ;
        
#line 2178 
        if (err != 0) {
          
#line 2179 
          err = mdio_read(np,np->phy_addr,4,0);
          
#line 2181 
          if (err == 65535) 
#line 2183 
                            goto out; else ;
          
#line 2186 
          np->flags &= 4261412863U;
        }
        else ;
      }
      else {
        
#line 2189 
        np->flags &= 4261412863U;
        
#line 2190 
        *link_up_p = 0;
        
#line 2191 
        if ((np->msg_enable & 4U) != 0U) 
#line 2191 
                                         netdev_warn((struct net_device const *)np->dev,"Hotplug PHY Removed\n"); else ;
      }
    else ;
    out: 
#line 2195 
    ;
    
#line 2196 
    if ((np->flags & 33554432U) != 0U) {
      
#line 2197 
      err = link_status_10g_bcm8706(np,link_up_p);
      
#line 2198 
      if (err == 65535) {
        
#line 2200 
        *link_up_p = 1;
        
#line 2201 
        np->link_config.active_speed = (unsigned short)10000U;
        
#line 2202 
        np->link_config.active_duplex = (unsigned char)1U;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 2207 
  ldv_spin_unlock_irqrestore_88(& np->lock,flags);
  
#line 2209 
  __retres = 0;
  
#line 2209 
  return __retres;
}


#line 2212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_link_status(struct niu *np, int *link_up_p)
{
  int err;
  
#line 2214 
  struct niu_phy_ops const *ops = np->phy_ops;
  
#line 2217 
  err = 0;
  
#line 2218 
  if (ops->link_status != (int (*)(struct niu *, int *))0) 
#line 2219 
                                                           err = (*(ops->link_status))(np,link_up_p); else ;
  
#line 2221 
  return err;
}


#line 2224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_timer(unsigned long __opaque)
{
  unsigned long off;
  int err;
  int link_up;
  bool tmp;
  
#line 2226 
  struct niu *np = (struct niu *)__opaque;
  
#line 2230 
  err = niu_link_status(np,& link_up);
  
#line 2231 
  if (err == 0) 
#line 2232 
                niu_link_status_common(np,link_up); else ;
  
#line 2234 
  tmp = netif_carrier_ok((struct net_device const *)np->dev);
  
#line 2234 
  if ((int)tmp != 0) 
#line 2235 
                     off = 1250UL; else 
#line 2237 
                                        off = 250UL;
  
#line 2238 
  np->timer.expires = jiffies + off;
  
#line 2240 
  add_timer(& np->timer);
  
#line 2241 
  return;
}


#line 2243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_10g_serdes = {.serdes_init = & serdes_init_10g_serdes, .xcvr_init = (int (*)(struct niu *))0, .link_status = & link_status_10g_serdes};

#line 2248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_10g_serdes_niu = {.serdes_init = & serdes_init_niu_10g_serdes, .xcvr_init = (int (*)(struct niu *))0, .link_status = & link_status_10g_serdes};

#line 2253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_1g_serdes_niu = {.serdes_init = & serdes_init_niu_1g_serdes, .xcvr_init = (int (*)(struct niu *))0, .link_status = & link_status_1g_serdes};

#line 2258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_1g_rgmii = {.serdes_init = (int (*)(struct niu *))0, .xcvr_init = & xcvr_init_1g_rgmii, .link_status = & link_status_1g_rgmii};

#line 2263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_10g_fiber_niu = {.serdes_init = & serdes_init_niu_10g_fiber, .xcvr_init = & xcvr_init_10g, .link_status = & link_status_10g};

#line 2269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_10g_fiber = {.serdes_init = & serdes_init_10g, .xcvr_init = & xcvr_init_10g, .link_status = & link_status_10g};

#line 2275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_10g_fiber_hotplug = {.serdes_init = & serdes_init_10g, .xcvr_init = & xcvr_init_10g_bcm8706, .link_status = & link_status_10g_hotplug};

#line 2281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_niu_10g_hotplug = {.serdes_init = & serdes_init_niu_10g_fiber, .xcvr_init = & xcvr_init_10g_bcm8706, .link_status = & link_status_10g_hotplug};

#line 2287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_10g_copper = {.serdes_init = & serdes_init_10g, .xcvr_init = (int (*)(struct niu *))0, .link_status = & link_status_10g};

#line 2292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_1g_fiber = {.serdes_init = & serdes_init_1g, .xcvr_init = & xcvr_init_1g, .link_status = & link_status_1g};

#line 2298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops const phy_ops_1g_copper = {.serdes_init = (int (*)(struct niu *))0, .xcvr_init = & xcvr_init_1g, .link_status = & link_status_1g};

#line 2308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_niu_10g_fiber = {.ops = & phy_ops_10g_fiber_niu, .phy_addr_base = 16U};

#line 2313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_niu_10g_serdes = {.ops = & phy_ops_10g_serdes_niu, .phy_addr_base = 0U};

#line 2318  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_niu_1g_serdes = {.ops = & phy_ops_1g_serdes_niu, .phy_addr_base = 0U};

#line 2323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_10g_fiber = {.ops = & phy_ops_10g_fiber, .phy_addr_base = 8U};

#line 2328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_10g_fiber_hotplug = {.ops = & phy_ops_10g_fiber_hotplug, .phy_addr_base = 8U};

#line 2333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_niu_10g_hotplug = {.ops = & phy_ops_niu_10g_hotplug, .phy_addr_base = 8U};

#line 2338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_10g_copper = {.ops = & phy_ops_10g_copper, .phy_addr_base = 10U};

#line 2343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_1g_fiber = {.ops = & phy_ops_1g_fiber, .phy_addr_base = 0U};

#line 2348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_1g_copper = {.ops = & phy_ops_1g_copper, .phy_addr_base = 0U};

#line 2353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_1g_rgmii = {.ops = & phy_ops_1g_rgmii, .phy_addr_base = 0U};

#line 2358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template const phy_template_10g_serdes = {.ops = & phy_ops_10g_serdes, .phy_addr_base = 0U};

#line 2363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_atca_port_num[4U] = {0, 0, 11, 10};

#line 2367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int serdes_init_10g_serdes(struct niu *np)
{
  int __retres;
  unsigned long ctrl_reg;
  unsigned long test_cfg_reg;
  unsigned long pll_cfg;
  unsigned long i;
  u64 ctrl_val;
  u64 test_cfg_val;
  u64 sig;
  u64 mask;
  u64 val;
  
#line 2369 
  struct niu_link_config *lp = & np->link_config;
  
#line 2373 
  switch ((int)np->port) {
    case 0: 
#line 2374 
    ;
    
#line 2375 
    ctrl_reg = 1654808UL;
    
#line 2376 
    test_cfg_reg = 1654816UL;
    
#line 2377 
    pll_cfg = 1654800UL;
    
#line 2378 
    goto ldv_53399;
    case 1: 
#line 2379 
    ;
    
#line 2380 
    ctrl_reg = 1654832UL;
    
#line 2381 
    test_cfg_reg = 1654840UL;
    
#line 2382 
    pll_cfg = 1654824UL;
    
#line 2383 
    goto ldv_53399;
    default: 
#line 2385 
    ;
    
#line 2386 
    __retres = -22;
    
#line 2386 
    goto return_label;
  }
  ldv_53399: 
#line 2388 
  ;
  
#line 2388 
  ctrl_val = 38385375ULL;
  
#line 2400 
  test_cfg_val = 0ULL;
  
#line 2402 
  if ((unsigned int)lp->loopback_mode == 1U) 
#line 2403 
                                             test_cfg_val |= 170ULL; else ;
  
#line 2413 
  esr_reset(np);
  
#line 2414 
  writeq(4UL,(void volatile *)(np->regs + pll_cfg));
  
#line 2415 
  writeq((unsigned long)ctrl_val,(void volatile *)(np->regs + ctrl_reg));
  
#line 2416 
  writeq((unsigned long)test_cfg_val,(void volatile *)(np->regs + test_cfg_reg));
  
#line 2419 
  i = 0UL;
  
#line 2419 
  goto ldv_53406;
  ldv_53405: 
#line 2420 
  ;
  {
    u32 rxtx_ctrl;
    u32 glue0;
    int err;
    
#line 2423 
    err = esr_read_rxtx_ctrl(np,i,& rxtx_ctrl);
    
#line 2424 
    if (err != 0) {
      
#line 2425 
      __retres = err;
      
#line 2425 
      goto return_label;
    }
    else ;
    
#line 2426 
    err = esr_read_glue0(np,i,& glue0);
    
#line 2427 
    if (err != 0) {
      
#line 2428 
      __retres = err;
      
#line 2428 
      goto return_label;
    }
    else ;
    
#line 2430 
    rxtx_ctrl &= 4282384383U;
    
#line 2431 
    rxtx_ctrl |= 8388609U;
    
#line 2434 
    glue0 &= 4177522688U;
    
#line 2437 
    glue0 |= 50343935U;
    
#line 2443 
    err = esr_write_rxtx_ctrl(np,i,rxtx_ctrl);
    
#line 2444 
    if (err != 0) {
      
#line 2445 
      __retres = err;
      
#line 2445 
      goto return_label;
    }
    else ;
    
#line 2446 
    err = esr_write_glue0(np,i,glue0);
    
#line 2447 
    if (err != 0) {
      
#line 2448 
      __retres = err;
      
#line 2448 
      goto return_label;
    }
    else ;
  }
  
#line 2419 
  i += 1UL;
  ldv_53406: 
#line 2420 
  ;
  
#line 2419 
  if (i <= 3UL) 
#line 2421 
                goto ldv_53405; else 
#line 2424 
                                     goto ldv_53407;
  ldv_53407: 
#line 2425 
  ;
  
#line 2452 
  sig = (u64)readq((void const volatile *)(np->regs + 1656832U));
  
#line 2453 
  switch ((int)np->port) {
    case 0: 
#line 2454 
    ;
    
#line 2455 
    mask = 870318095ULL;
    
#line 2456 
    val = 870318080ULL;
    
#line 2463 
    goto ldv_53409;
    case 1: 
#line 2465 
    ;
    
#line 2466 
    mask = 203358448ULL;
    
#line 2467 
    val = 203358208ULL;
    
#line 2474 
    goto ldv_53409;
    default: 
#line 2476 
    ;
    
#line 2477 
    __retres = -22;
    
#line 2477 
    goto return_label;
  }
  ldv_53409: 
#line 2480 
  ;
  
#line 2480 
  if ((sig & mask) != val) {
    int err_0;
    
#line 2482 
    err_0 = serdes_init_1g_serdes(np);
    
#line 2483 
    if (err_0 == 0) {
      
#line 2484 
      np->flags &= 4294705151U;
      
#line 2485 
      np->mac_xcvr = (unsigned char)2U;
    }
    else {
      
#line 2487 
      netdev_err((struct net_device const *)np->dev,"Port %u 10G/1G SERDES Link Failed\n",(int)np->port);
      
#line 2489 
      __retres = -19;
      
#line 2489 
      goto return_label;
    }
  }
  else ;
  
#line 2493 
  __retres = 0;
  return_label: 
#line 2493 
                return __retres;
}


#line 2496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_determine_phy_disposition(struct niu *np)
{
  int __retres;
  struct niu_phy_template const *tp;
  
#line 2498 
  struct niu_parent *parent = np->parent;
  
#line 2499 
  u8 plat_type = parent->plat_type;
  
#line 2501 
  u32 phy_addr_off = 0U;
  
#line 2503 
  if ((unsigned int)plat_type == 2U) {
    
#line 2504 
    switch (np->flags & 917504U) {
      case (unsigned int)786432: 
#line 2508 
      ;
      
#line 2510 
      tp = & phy_template_niu_10g_serdes;
      
#line 2511 
      goto ldv_53421;
      case (unsigned int)524288: 
#line 2512 
      ;
      
#line 2514 
      tp = & phy_template_niu_1g_serdes;
      
#line 2515 
      goto ldv_53421;
      case (unsigned int)393216: 
#line 2516 
      ;
      default: 
#line 2518 
      ;
      
#line 2519 
      if ((np->flags & 16777216U) != 0U) {
        
#line 2520 
        tp = & phy_template_niu_10g_hotplug;
        
#line 2521 
        if ((unsigned int)np->port == 0U) 
#line 2522 
                                          phy_addr_off = 8U; else ;
        
#line 2523 
        if ((unsigned int)np->port == 1U) 
#line 2524 
                                          phy_addr_off = 12U; else ;
      }
      else {
        
#line 2526 
        tp = & phy_template_niu_10g_fiber;
        
#line 2527 
        phy_addr_off = (unsigned int)np->port + phy_addr_off;
      }
      
#line 2529 
      goto ldv_53421;
    }
    ldv_53421: 
#line 2531 
    ;
  }
  else {
    
#line 2532 
    switch (np->flags & 917504U) {
      case (unsigned int)0: 
#line 2536 
      ;
      
#line 2538 
      tp = & phy_template_1g_copper;
      
#line 2539 
      if ((unsigned int)plat_type == 3U) 
#line 2540 
                                         phy_addr_off = 10U;
      else 
        
#line 2541 
        if ((unsigned int)plat_type == 4U) 
#line 2542 
                                           phy_addr_off = 26U; else ;
      
#line 2544 
      phy_addr_off = ((unsigned int)np->port ^ 3U) + phy_addr_off;
      
#line 2545 
      goto ldv_53426;
      case (unsigned int)262144: 
#line 2547 
      ;
      
#line 2549 
      tp = & phy_template_10g_copper;
      
#line 2550 
      goto ldv_53426;
      case (unsigned int)131072: 
#line 2552 
      ;
      
#line 2554 
      tp = & phy_template_1g_fiber;
      
#line 2555 
      goto ldv_53426;
      case (unsigned int)393216: 
#line 2557 
      ;
      
#line 2559 
      tp = & phy_template_10g_fiber;
      
#line 2560 
      if ((unsigned int)plat_type + 253U <= 1U) 
#line 2562 
                                                phy_addr_off = 8U; else ;
      
#line 2563 
      phy_addr_off = (unsigned int)np->port + phy_addr_off;
      
#line 2564 
      if ((np->flags & 16777216U) != 0U) {
        
#line 2565 
        tp = & phy_template_10g_fiber_hotplug;
        
#line 2566 
        if ((unsigned int)np->port == 0U) 
#line 2567 
                                          phy_addr_off = 8U; else ;
        
#line 2568 
        if ((unsigned int)np->port == 1U) 
#line 2569 
                                          phy_addr_off = 12U; else ;
      }
      else ;
      
#line 2571 
      goto ldv_53426;
      case (unsigned int)786432: 
#line 2573 
      ;
      case (unsigned int)655360: 
#line 2574 
      ;
      case (unsigned int)524288: 
#line 2575 
      ;
      
#line 2576 
      switch ((int)np->port) {
        case 0: 
#line 2577 
        ;
        case 1: 
#line 2578 
        ;
        
#line 2579 
        tp = & phy_template_10g_serdes;
        
#line 2580 
        goto ldv_53435;
        case 2: 
#line 2581 
        ;
        case 3: 
#line 2582 
        ;
        
#line 2583 
        tp = & phy_template_1g_rgmii;
        
#line 2584 
        goto ldv_53435;
        default: 
#line 2585 
        ;
        
#line 2586 
        __retres = -22;
        
#line 2586 
        goto return_label;
      }
      ldv_53435: 
#line 2588 
      ;
      
#line 2588 
      phy_addr_off = (unsigned int)niu_atca_port_num[(int)np->port];
      
#line 2589 
      goto ldv_53426;
      default: 
#line 2591 
      ;
      
#line 2592 
      __retres = -22;
      
#line 2592 
      goto return_label;
    }
    ldv_53426: 
#line 2594 
    ;
  }
  
#line 2596 
  np->phy_ops = tp->ops;
  
#line 2597 
  np->phy_addr = (int)(tp->phy_addr_base + phy_addr_off);
  
#line 2599 
  __retres = 0;
  return_label: 
#line 2599 
                return __retres;
}


#line 2602  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_link(struct niu *np)
{
  int __retres;
  int err;
  int ignore;
  
#line 2604 
  struct niu_parent *parent = np->parent;
  
#line 2607 
  if ((unsigned int)parent->plat_type == 2U) {
    
#line 2608 
    err = niu_xcvr_init(np);
    
#line 2609 
    if (err != 0) {
      
#line 2610 
      __retres = err;
      
#line 2610 
      goto return_label;
    }
    else ;
    
#line 2611 
    msleep(200U);
  }
  else ;
  
#line 2613 
  err = niu_serdes_init(np);
  
#line 2614 
  if (err != 0 && (np->flags & 16777216U) == 0U) {
    
#line 2615 
    __retres = err;
    
#line 2615 
    goto return_label;
  }
  else ;
  
#line 2616 
  msleep(200U);
  
#line 2617 
  err = niu_xcvr_init(np);
  
#line 2618 
  if (err == 0 || (np->flags & 16777216U) != 0U) 
#line 2619 
                                                 niu_link_status(np,& ignore); else ;
  
#line 2620 
  __retres = 0;
  return_label: 
#line 2620 
                return __retres;
}


#line 2623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_set_primary_mac(struct niu *np, unsigned char *addr)
{
  
#line 2625 
  u16 reg0 = (unsigned short)(((int)*(addr + 4U) << 8) | (int)*(addr + 5U));
  
#line 2626 
  u16 reg1 = (unsigned short)(((int)*(addr + 2U) << 8) | (int)*(addr + 3U));
  
#line 2627 
  u16 reg2 = (unsigned short)(((int)*addr << 8) | (int)*(addr + 1U));
  
#line 2629 
  if ((np->flags & 65536U) != 0U) {
    
#line 2630 
    writeq((unsigned long)reg0,(void volatile *)(np->mac_regs + 160U));
    
#line 2631 
    writeq((unsigned long)reg1,(void volatile *)(np->mac_regs + 168U));
    
#line 2632 
    writeq((unsigned long)reg2,(void volatile *)(np->mac_regs + 176U));
  }
  else {
    
#line 2634 
    writeq((unsigned long)reg0,(void volatile *)(np->mac_regs + 256U));
    
#line 2635 
    writeq((unsigned long)reg1,(void volatile *)(np->mac_regs + 264U));
    
#line 2636 
    writeq((unsigned long)reg2,(void volatile *)(np->mac_regs + 272U));
  }
  
#line 2638 
  return;
}


#line 2640  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_num_alt_addr(struct niu *np)
{
  int __retres;
  
#line 2642 
  if ((np->flags & 65536U) != 0U) {
    
#line 2643 
    __retres = 16;
    
#line 2643 
    goto return_label;
  }
  else {
    
#line 2645 
    __retres = 6;
    
#line 2645 
    goto return_label;
  }
  return_label: 
#line 2642 
                return __retres;
}


#line 2648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_alt_mac(struct niu *np, int index, unsigned char *addr)
{
  int __retres;
  int tmp;
  
#line 2650 
  u16 reg0 = (unsigned short)(((int)*(addr + 4U) << 8) | (int)*(addr + 5U));
  
#line 2651 
  u16 reg1 = (unsigned short)(((int)*(addr + 2U) << 8) | (int)*(addr + 3U));
  
#line 2652 
  u16 reg2 = (unsigned short)(((int)*addr << 8) | (int)*(addr + 1U));
  
#line 2654 
  tmp = niu_num_alt_addr(np);
  
#line 2654 
  ;
  
#line 2654 
  if (tmp <= index) {
    
#line 2655 
    __retres = -22;
    
#line 2655 
    goto return_label;
  }
  else ;
  
#line 2657 
  if ((np->flags & 65536U) != 0U) {
    
#line 2658 
    writeq((unsigned long)reg0,(void volatile *)(np->mac_regs + ((unsigned long)index * 24UL + 536UL)));
    
#line 2659 
    writeq((unsigned long)reg1,(void volatile *)(np->mac_regs + ((unsigned long)index * 24UL + 544UL)));
    
#line 2660 
    writeq((unsigned long)reg2,(void volatile *)(np->mac_regs + ((unsigned long)index * 24UL + 552UL)));
  }
  else {
    
#line 2662 
    writeq((unsigned long)reg0,(void volatile *)(np->mac_regs + ((unsigned long)index * 24UL + 280UL)));
    
#line 2663 
    writeq((unsigned long)reg1,(void volatile *)(np->mac_regs + ((unsigned long)index * 24UL + 288UL)));
    
#line 2664 
    writeq((unsigned long)reg2,(void volatile *)(np->mac_regs + ((unsigned long)index * 24UL + 296UL)));
  }
  
#line 2667 
  __retres = 0;
  return_label: 
#line 2667 
                return __retres;
}


#line 2670  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_enable_alt_mac(struct niu *np, int index, int on)
{
  int __retres;
  unsigned long reg;
  u64 val;
  u64 mask;
  int tmp;
  
#line 2675 
  tmp = niu_num_alt_addr(np);
  
#line 2675 
  ;
  
#line 2675 
  if (tmp <= index) {
    
#line 2676 
    __retres = -22;
    
#line 2676 
    goto return_label;
  }
  else ;
  
#line 2678 
  if ((np->flags & 65536U) != 0U) {
    
#line 2679 
    reg = 520UL;
    
#line 2680 
    mask = (unsigned long long)(1 << index);
  }
  else {
    
#line 2682 
    reg = 1016UL;
    
#line 2683 
    mask = (unsigned long long)(1 << (index + 1));
  }
  
#line 2686 
  val = (u64)readq((void const volatile *)(np->mac_regs + reg));
  
#line 2687 
  if (on != 0) 
#line 2688 
               val |= mask; else 
#line 2690 
                                 val = ~ mask & val;
  
#line 2691 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + reg));
  
#line 2693 
  __retres = 0;
  return_label: 
#line 2693 
                return __retres;
}


#line 2696  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void __set_rdc_table_num_hw(struct niu *np, unsigned long reg, int num, int mac_pref)
{
  
#line 2699 
  u64 val = readq((void const volatile *)(np->mac_regs + reg));
  
#line 2700 
  val &= 18446744073709551352ULL;
  
#line 2701 
  val = (unsigned long long)num | val;
  
#line 2702 
  if (mac_pref != 0) 
#line 2703 
                     val |= 256ULL; else ;
  
#line 2704 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + reg));
  
#line 2705 
  return;
}


#line 2707  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int __set_rdc_table_num(struct niu *np, int xmac_index, int bmac_index, int rdc_table_num, int mac_pref)
{
  int __retres;
  unsigned long reg;
  
#line 2713 
  if (((unsigned long long)rdc_table_num & 18446744073709551608ULL) != 0ULL) {
    
#line 2714 
    __retres = -22;
    
#line 2714 
    goto return_label;
  }
  else ;
  
#line 2715 
  if ((np->flags & 65536U) != 0U) 
#line 2716 
                                  reg = ((unsigned long)xmac_index + 288UL) * 8UL; else 
                                                                    
#line 2718 
                                                                    reg = ((unsigned long)bmac_index + 128UL) * 8UL;
  
#line 2719 
  __set_rdc_table_num_hw(np,reg,rdc_table_num,mac_pref);
  
#line 2720 
  __retres = 0;
  return_label: 
#line 2720 
                return __retres;
}


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_primary_mac_rdc_table(struct niu *np, int table_num, int mac_pref)
{
  int tmp;
  
#line 2726 
  tmp = __set_rdc_table_num(np,17,0,table_num,mac_pref);
  
#line 2726 
  return tmp;
}


#line 2729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_multicast_mac_rdc_table(struct niu *np, int table_num, int mac_pref)
{
  int tmp;
  
#line 2732 
  tmp = __set_rdc_table_num(np,16,8,table_num,mac_pref);
  
#line 2732 
  return tmp;
}


#line 2735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_alt_mac_rdc_table(struct niu *np, int idx, int table_num, int mac_pref)
{
  int __retres;
  int tmp;
  int tmp_0;
  
#line 2738 
  tmp = niu_num_alt_addr(np);
  
#line 2738 
  ;
  
#line 2738 
  if (tmp <= idx) {
    
#line 2739 
    __retres = -22;
    
#line 2739 
    goto return_label;
  }
  else ;
  
#line 2740 
  tmp_0 = __set_rdc_table_num(np,idx,idx + 1,table_num,mac_pref);
  
#line 2740 
  __retres = tmp_0;
  return_label: 
#line 2740 
                return __retres;
}


#line 2743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u64 vlan_entry_set_parity(u64 reg_val)
{
  u64 port01_mask;
  u64 port23_mask;
  int tmp_0;
  int tmp_2;
  
#line 2748 
  port01_mask = 255ULL;
  
#line 2749 
  port23_mask = 65280ULL;
  
#line 2751 
  if (0 != 0) 
#line 2751 
              tmp_0 = ((unsigned long)((((unsigned int)((((((((((reg_val & port01_mask) & 1ULL) != 0ULL) + (((reg_val & port01_mask) & 2ULL) != 0ULL)) + (((reg_val & port01_mask) & 4ULL) != 0ULL)) + (((reg_val & port01_mask) & 8ULL) != 0ULL)) + (((reg_val & port01_mask) & 16ULL) != 0ULL)) + (((reg_val & port01_mask) & 32ULL) != 0ULL)) + (((reg_val & port01_mask) & 64ULL) != 0ULL)) + (((reg_val & port01_mask) & 128ULL) != 0ULL)) + (unsigned int)(((((((((((reg_val & port01_mask) >> 8) & 1ULL) != 0ULL) + ((((reg_val & port01_mask) >> 8) & 2ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 8) & 4ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 8) & 8ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 8) & 16ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 8) & 32ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 8) & 64ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 8) & 128ULL) != 0ULL))) + ((unsigned int)(((((((((((reg_val & port01_mask) >> 16) & 1ULL) != 0ULL) + ((((reg_val & port01_mask) >> 16) & 2ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 16) & 4ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 16) & 8ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 16) & 16ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 16) & 32ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 16) & 64ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 16) & 128ULL) != 0ULL)) + (unsigned int)(((((((((((reg_val & port01_mask) >> 24) & 1ULL) != 0ULL) + ((((reg_val & port01_mask) >> 24) & 2ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 24) & 4ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 24) & 8ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 24) & 16ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 24) & 32ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 24) & 64ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)(((((((((((reg_val & port01_mask) >> 32) & 1ULL) != 0ULL) + ((((reg_val & port01_mask) >> 32) & 2ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 32) & 4ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 32) & 8ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 32) & 16ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 32) & 32ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 32) & 64ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 32) & 128ULL) != 0ULL)) + (unsigned int)(((((((((((reg_val & port01_mask) >> 40) & 1ULL) != 0ULL) + ((((reg_val & port01_mask) >> 40) & 2ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 40) & 4ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 40) & 8ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 40) & 16ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 40) & 32ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 40) & 64ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 40) & 128ULL) != 0ULL))) + ((unsigned int)(((((((((((reg_val & port01_mask) >> 48) & 1ULL) != 0ULL) + ((((reg_val & port01_mask) >> 48) & 2ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 48) & 4ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 48) & 8ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 48) & 16ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 48) & 32ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 48) & 64ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 48) & 128ULL) != 0ULL)) + (unsigned int)(((((((((((reg_val & port01_mask) >> 56) & 1ULL) != 0ULL) + ((((reg_val & port01_mask) >> 56) & 2ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 56) & 4ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 56) & 8ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 56) & 16ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 56) & 32ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 56) & 64ULL) != 0ULL)) + ((((reg_val & port01_mask) >> 56) & 128ULL) != 0ULL))))) & 1UL) != 0UL;
  else {
    unsigned long tmp;
    
#line 2751 
    tmp = __arch_hweight64(reg_val & port01_mask);
    
#line 2751 
    tmp_0 = (tmp & 1UL) != 0UL;
  }
  
#line 2751 
  if (tmp_0) 
#line 2752 
             reg_val |= 65536ULL; else 
#line 2754 
                                       reg_val &= 18446744073709486079ULL;
  
#line 2756 
  if (0 != 0) 
#line 2756 
              tmp_2 = ((unsigned long)((((unsigned int)((((((((((reg_val & port23_mask) & 1ULL) != 0ULL) + (((reg_val & port23_mask) & 2ULL) != 0ULL)) + (((reg_val & port23_mask) & 4ULL) != 0ULL)) + (((reg_val & port23_mask) & 8ULL) != 0ULL)) + (((reg_val & port23_mask) & 16ULL) != 0ULL)) + (((reg_val & port23_mask) & 32ULL) != 0ULL)) + (((reg_val & port23_mask) & 64ULL) != 0ULL)) + (((reg_val & port23_mask) & 128ULL) != 0ULL)) + (unsigned int)(((((((((((reg_val & port23_mask) >> 8) & 1ULL) != 0ULL) + ((((reg_val & port23_mask) >> 8) & 2ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 8) & 4ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 8) & 8ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 8) & 16ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 8) & 32ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 8) & 64ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 8) & 128ULL) != 0ULL))) + ((unsigned int)(((((((((((reg_val & port23_mask) >> 16) & 1ULL) != 0ULL) + ((((reg_val & port23_mask) >> 16) & 2ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 16) & 4ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 16) & 8ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 16) & 16ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 16) & 32ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 16) & 64ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 16) & 128ULL) != 0ULL)) + (unsigned int)(((((((((((reg_val & port23_mask) >> 24) & 1ULL) != 0ULL) + ((((reg_val & port23_mask) >> 24) & 2ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 24) & 4ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 24) & 8ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 24) & 16ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 24) & 32ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 24) & 64ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)(((((((((((reg_val & port23_mask) >> 32) & 1ULL) != 0ULL) + ((((reg_val & port23_mask) >> 32) & 2ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 32) & 4ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 32) & 8ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 32) & 16ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 32) & 32ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 32) & 64ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 32) & 128ULL) != 0ULL)) + (unsigned int)(((((((((((reg_val & port23_mask) >> 40) & 1ULL) != 0ULL) + ((((reg_val & port23_mask) >> 40) & 2ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 40) & 4ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 40) & 8ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 40) & 16ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 40) & 32ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 40) & 64ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 40) & 128ULL) != 0ULL))) + ((unsigned int)(((((((((((reg_val & port23_mask) >> 48) & 1ULL) != 0ULL) + ((((reg_val & port23_mask) >> 48) & 2ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 48) & 4ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 48) & 8ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 48) & 16ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 48) & 32ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 48) & 64ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 48) & 128ULL) != 0ULL)) + (unsigned int)(((((((((((reg_val & port23_mask) >> 56) & 1ULL) != 0ULL) + ((((reg_val & port23_mask) >> 56) & 2ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 56) & 4ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 56) & 8ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 56) & 16ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 56) & 32ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 56) & 64ULL) != 0ULL)) + ((((reg_val & port23_mask) >> 56) & 128ULL) != 0ULL))))) & 1UL) != 0UL;
  else {
    unsigned long tmp_1;
    
#line 2756 
    tmp_1 = __arch_hweight64(reg_val & port23_mask);
    
#line 2756 
    tmp_2 = (tmp_1 & 1UL) != 0UL;
  }
  
#line 2756 
  if (tmp_2) 
#line 2757 
             reg_val |= 131072ULL; else 
#line 2759 
                                        reg_val &= 18446744073709420543ULL;
  
#line 2761 
  return reg_val;
}


#line 2764  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void vlan_tbl_write(struct niu *np, unsigned long index, int port, int vpr, int rdc_table)
{
  
#line 2767 
  u64 reg_val = readq((void const volatile *)(np->regs + (index + 458752UL) * 8UL));
  
#line 2769 
  reg_val = ~ (15ULL << port * 4) & reg_val;
  
#line 2772 
  if (vpr != 0) 
#line 2773 
                reg_val = (8ULL << port * 4) | reg_val; else ;
  
#line 2775 
  reg_val = (unsigned long long)(rdc_table << port * 4) | reg_val;
  
#line 2777 
  reg_val = vlan_entry_set_parity(reg_val);
  
#line 2779 
  writeq((unsigned long)reg_val,(void volatile *)(np->regs + (index + 458752UL) * 8UL));
  
#line 2780 
  return;
}


#line 2782  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void vlan_tbl_clear(struct niu *np)
{
  int i;
  
#line 2786 
  i = 0;
  
#line 2786 
  goto ldv_53521;
  ldv_53520: 
#line 2787 
  ;
  
#line 2787 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)i + 458752UL) * 8UL));
  
#line 2786 
  i += 1;
  ldv_53521: 
#line 2787 
  ;
  
#line 2786 
  if (i <= 4095) 
#line 2788 
                 goto ldv_53520; else 
#line 2791 
                                      goto ldv_53522;
  ldv_53522: 
#line 2792 
  ;
  
#line 2793 
  return;
}


#line 2790  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int tcam_wait_bit(struct niu *np, u64 bit)
{
  int __retres;
  unsigned long tmp;
  
#line 2792 
  int limit = 1000;
  
#line 2794 
  goto ldv_53530;
  ldv_53529: 
#line 2795 
  ;
  
#line 2795 
  tmp = readq((void const volatile *)(np->regs + 3801296U));
  
#line 2795 
  ;
  
#line 2795 
  if (((unsigned long long)tmp & bit) != 0ULL) 
#line 2796 
                                               goto ldv_53528; else ;
  
#line 2797 
  __const_udelay(4295UL);
  ldv_53530: 
#line 2799 
  ;
  
#line 2794 
  limit -= 1;
  
#line 2794 
  if (limit > 0) 
#line 2796 
                 goto ldv_53529; else 
#line 2799 
                                      goto ldv_53528;
  ldv_53528: 
#line 2800 
  ;
  
#line 2799 
  if (limit <= 0) {
    
#line 2800 
    __retres = -19;
    
#line 2800 
    goto return_label;
  }
  else ;
  
#line 2802 
  __retres = 0;
  return_label: 
#line 2802 
                return __retres;
}


#line 2805  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int tcam_flush(struct niu *np, int index)
{
  int tmp;
  
#line 2807 
  writeq(0UL,(void volatile *)(np->regs + 3801232U));
  
#line 2808 
  writeq(255UL,(void volatile *)(np->regs + 3801264U));
  
#line 2809 
  writeq((unsigned long)index,(void volatile *)(np->regs + 3801296U));
  
#line 2811 
  tmp = tcam_wait_bit(np,131072ULL);
  
#line 2811 
  return tmp;
}


#line 2836  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int tcam_write(struct niu *np, int index, u64 *key, u64 *mask)
{
  int tmp;
  
#line 2839 
  writeq((unsigned long)*key,(void volatile *)(np->regs + 3801232U));
  
#line 2840 
  writeq((unsigned long)*(key + 1U),(void volatile *)(np->regs + 3801240U));
  
#line 2841 
  writeq((unsigned long)*(key + 2U),(void volatile *)(np->regs + 3801248U));
  
#line 2842 
  writeq((unsigned long)*(key + 3U),(void volatile *)(np->regs + 3801256U));
  
#line 2843 
  writeq((unsigned long)*mask,(void volatile *)(np->regs + 3801264U));
  
#line 2844 
  writeq((unsigned long)*(mask + 1U),(void volatile *)(np->regs + 3801272U));
  
#line 2845 
  writeq((unsigned long)*(mask + 2U),(void volatile *)(np->regs + 3801280U));
  
#line 2846 
  writeq((unsigned long)*(mask + 3U),(void volatile *)(np->regs + 3801288U));
  
#line 2847 
  writeq((unsigned long)index,(void volatile *)(np->regs + 3801296U));
  
#line 2849 
  tmp = tcam_wait_bit(np,131072ULL);
  
#line 2849 
  return tmp;
}


#line 2866  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int tcam_assoc_write(struct niu *np, int index, u64 assoc_data)
{
  int tmp;
  
#line 2868 
  writeq((unsigned long)assoc_data,(void volatile *)(np->regs + 3801240U));
  
#line 2869 
  writeq((unsigned long)(index | 1048576),(void volatile *)(np->regs + 3801296U));
  
#line 2871 
  tmp = tcam_wait_bit(np,131072ULL);
  
#line 2871 
  return tmp;
}


#line 2874  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void tcam_enable(struct niu *np, int on)
{
  
#line 2876 
  u64 val = readq((void const volatile *)(np->regs + 3801344U));
  
#line 2878 
  if (on != 0) 
#line 2879 
               val &= 18446744073642442751ULL; else 
#line 2881 
                                                    val |= 67108864ULL;
  
#line 2882 
  writeq((unsigned long)val,(void volatile *)(np->regs + 3801344U));
  
#line 2883 
  return;
}


#line 2885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void tcam_set_lat_and_ratio(struct niu *np, u64 latency, u64 ratio)
{
  
#line 2887 
  u64 val = readq((void const volatile *)(np->regs + 3801344U));
  
#line 2889 
  val &= 18446744073708507133ULL;
  
#line 2892 
  val = (latency << 16) | val;
  
#line 2893 
  val = (ratio << 12) | val;
  
#line 2894 
  writeq((unsigned long)val,(void volatile *)(np->regs + 3801344U));
  
#line 2896 
  val = (u64)readq((void const volatile *)(np->regs + 3801344U));
  
#line 2897 
  val |= 2ULL;
  
#line 2898 
  writeq((unsigned long)val,(void volatile *)(np->regs + 3801344U));
  
#line 2899 
  return;
}


#line 2901  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int tcam_user_eth_class_enable(struct niu *np, unsigned long class, int on)
{
  int __retres;
  unsigned long reg;
  u64 val;
  
#line 2907 
  if (class + 18446744073709551614UL > 1UL) {
    
#line 2909 
    __retres = -22;
    
#line 2909 
    goto return_label;
  }
  else ;
  
#line 2911 
  reg = (class + 475134UL) * 8UL;
  
#line 2912 
  val = (u64)readq((void const volatile *)(np->regs + reg));
  
#line 2913 
  if (on != 0) 
#line 2914 
               val |= 65536ULL; else 
#line 2916 
                                     val &= 18446744073709486079ULL;
  
#line 2917 
  writeq((unsigned long)val,(void volatile *)(np->regs + reg));
  
#line 2919 
  __retres = 0;
  return_label: 
#line 2919 
                return __retres;
}


#line 2944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int tcam_user_ip_class_enable(struct niu *np, unsigned long class, int on)
{
  int __retres;
  unsigned long reg;
  u64 val;
  
#line 2950 
  if (class + 18446744073709551612UL > 3UL) {
    
#line 2952 
    __retres = -22;
    
#line 2952 
    goto return_label;
  }
  else ;
  
#line 2954 
  reg = (class + 475134UL) * 8UL;
  
#line 2955 
  val = (u64)readq((void const volatile *)(np->regs + reg));
  
#line 2956 
  if (on != 0) 
#line 2957 
               val |= 33554432ULL; else 
#line 2959 
                                        val &= 18446744073675997183ULL;
  
#line 2960 
  writeq((unsigned long)val,(void volatile *)(np->regs + reg));
  
#line 2962 
  __retres = 0;
  return_label: 
#line 2962 
                return __retres;
}


#line 2965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int tcam_user_ip_class_set(struct niu *np, unsigned long class, int ipv6, u64 protocol_id, u64 tos_mask, u64 tos_val)
{
  int __retres;
  unsigned long reg;
  u64 val;
  
#line 2972 
  if (((class + 18446744073709551612UL > 3UL || (protocol_id & 18446744073709551360ULL) != 0ULL) || (tos_mask & 18446744073709551360ULL) != 0ULL) || (tos_val & 18446744073709551360ULL) != 0ULL) {
    
#line 2977 
    __retres = -22;
    
#line 2977 
    goto return_label;
  }
  else ;
  
#line 2979 
  reg = (class + 475134UL) * 8UL;
  
#line 2980 
  val = (u64)readq((void const volatile *)(np->regs + reg));
  
#line 2981 
  val &= 18446744073675997184ULL;
  
#line 2983 
  if (ipv6 != 0) 
#line 2984 
                 val |= 16777216ULL; else ;
  
#line 2985 
  val = (protocol_id << 16) | val;
  
#line 2986 
  val = (tos_mask << 8) | val;
  
#line 2987 
  val |= tos_val;
  
#line 2988 
  writeq((unsigned long)val,(void volatile *)(np->regs + reg));
  
#line 2990 
  __retres = 0;
  return_label: 
#line 2990 
                return __retres;
}


#line 2993  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int tcam_early_init(struct niu *np)
{
  int __retres;
  unsigned long i;
  int err;
  
#line 2998 
  tcam_enable(np,0);
  
#line 2999 
  tcam_set_lat_and_ratio(np,4ULL,10ULL);
  
#line 3002 
  i = 2UL;
  
#line 3002 
  goto ldv_53587;
  ldv_53586: 
#line 3003 
  ;
  
#line 3003 
  err = tcam_user_eth_class_enable(np,i,0);
  
#line 3004 
  if (err != 0) {
    
#line 3005 
    __retres = err;
    
#line 3005 
    goto return_label;
  }
  else ;
  
#line 3002 
  i += 1UL;
  ldv_53587: 
#line 3003 
  ;
  
#line 3002 
  if (i <= 3UL) 
#line 3004 
                goto ldv_53586; else 
#line 3007 
                                     goto ldv_53588;
  ldv_53588: 
#line 3008 
  ;
  
#line 3007 
  i = 4UL;
  
#line 3007 
  goto ldv_53590;
  ldv_53589: 
#line 3008 
  ;
  
#line 3008 
  err = tcam_user_ip_class_enable(np,i,0);
  
#line 3009 
  if (err != 0) {
    
#line 3010 
    __retres = err;
    
#line 3010 
    goto return_label;
  }
  else ;
  
#line 3007 
  i += 1UL;
  ldv_53590: 
#line 3008 
  ;
  
#line 3007 
  if (i <= 7UL) 
#line 3009 
                goto ldv_53589; else 
#line 3012 
                                     goto ldv_53591;
  ldv_53591: 
#line 3013 
  ;
  
#line 3013 
  __retres = 0;
  return_label: 
#line 3013 
                return __retres;
}


#line 3016  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int tcam_flush_all(struct niu *np)
{
  int __retres;
  unsigned long i;
  
#line 3020 
  i = 0UL;
  
#line 3020 
  goto ldv_53598;
  ldv_53597: 
#line 3021 
  ;
  {
    
#line 3021 
    int err = tcam_flush(np,(int)i);
    
#line 3022 
    if (err != 0) {
      
#line 3023 
      __retres = err;
      
#line 3023 
      goto return_label;
    }
    else ;
  }
  
#line 3020 
  i += 1UL;
  ldv_53598: 
#line 3021 
  ;
  
#line 3020 
  if ((unsigned long)(np->parent)->tcam_num_entries > i) 
#line 3022 
                                                         goto ldv_53597; else 
                                                                    
#line 3025 
                                                                    goto ldv_53599;
  ldv_53599: 
#line 3026 
  ;
  
#line 3025 
  __retres = 0;
  return_label: 
#line 3025 
                return __retres;
}


#line 3028  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u64 hash_addr_regval(unsigned long index, unsigned long num_entries)
{
  u64 __retres;
  unsigned long long tmp;
  
#line 3030 
  if (num_entries == 1UL) 
#line 3030 
                          tmp = 8388608ULL; else 
#line 3030 
                                                 tmp = 0ULL;
  
#line 3030 
  ;
  
#line 3030 
  __retres = tmp | (unsigned long long)index;
  
#line 3030 
  return __retres;
}


#line 3053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int hash_write(struct niu *np, unsigned long partition, unsigned long index, unsigned long num_entries, u64 *data)
{
  int __retres;
  unsigned long i;
  
#line 3057 
  u64 val = hash_addr_regval(index,num_entries);
  
#line 3060 
  if (partition > 7UL || num_entries * 8UL + index > 8388608UL) {
    
#line 3062 
    __retres = -22;
    
#line 3062 
    goto return_label;
  }
  else ;
  
#line 3064 
  writeq((unsigned long)val,(void volatile *)(np->regs + (partition + 384UL) * 8192UL));
  
#line 3065 
  i = 0UL;
  
#line 3065 
  goto ldv_53614;
  ldv_53613: 
#line 3066 
  ;
  
#line 3066 
  writeq((unsigned long)*(data + i),(void volatile *)(np->regs + (partition * 8192UL + 3145736UL)));
  
#line 3065 
  i += 1UL;
  ldv_53614: 
#line 3066 
  ;
  
#line 3065 
  if (i < num_entries) 
#line 3067 
                       goto ldv_53613; else 
#line 3070 
                                            goto ldv_53615;
  ldv_53615: 
#line 3071 
  ;
  
#line 3068 
  __retres = 0;
  return_label: 
#line 3068 
                return __retres;
}


#line 3071  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void fflp_reset(struct niu *np)
{
  u64 val;
  
#line 3075 
  writeq(4194304UL,(void volatile *)(np->regs + 3801344U));
  
#line 3076 
  __const_udelay(42950UL);
  
#line 3077 
  writeq(0UL,(void volatile *)(np->regs + 3801344U));
  
#line 3079 
  val = 2ULL;
  
#line 3080 
  writeq((unsigned long)val,(void volatile *)(np->regs + 3801344U));
  
#line 3081 
  return;
}


#line 3083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void fflp_set_timings(struct niu *np)
{
  
#line 3085 
  u64 val = readq((void const volatile *)(np->regs + 3801344U));
  
#line 3087 
  val &= 18446744073709551613ULL;
  
#line 3088 
  val |= 2560ULL;
  
#line 3089 
  writeq((unsigned long)val,(void volatile *)(np->regs + 3801344U));
  
#line 3091 
  val = (u64)readq((void const volatile *)(np->regs + 3801344U));
  
#line 3092 
  val |= 2ULL;
  
#line 3093 
  writeq((unsigned long)val,(void volatile *)(np->regs + 3801344U));
  
#line 3095 
  val = (u64)readq((void const volatile *)(np->regs + 3801360U));
  
#line 3096 
  val &= 18446744069414584320ULL;
  
#line 3097 
  val |= 33554432ULL;
  
#line 3098 
  val |= 512ULL;
  
#line 3099 
  writeq((unsigned long)val,(void volatile *)(np->regs + 3801360U));
  
#line 3100 
  return;
}


#line 3102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int fflp_set_partition(struct niu *np, u64 partition, u64 mask, u64 base, int enable)
{
  int __retres;
  unsigned long reg;
  u64 val;
  
#line 3108 
  if ((partition > 7ULL || (mask & 18446744073709551584ULL) != 0ULL) || (base & 18446744073709551584ULL) != 0ULL) {
    
#line 3111 
    __retres = -22;
    
#line 3111 
    goto return_label;
  }
  else ;
  
#line 3113 
  reg = (unsigned long)((partition + 491534ULL) * 8ULL);
  
#line 3115 
  val = (u64)readq((void const volatile *)(np->regs + reg));
  
#line 3116 
  val &= 18446744073709478112ULL;
  
#line 3117 
  val = (mask << 8) | val;
  
#line 3118 
  val |= base;
  
#line 3119 
  if (enable != 0) 
#line 3120 
                   val |= 65536ULL; else ;
  
#line 3121 
  writeq((unsigned long)val,(void volatile *)(np->regs + reg));
  
#line 3123 
  __retres = 0;
  return_label: 
#line 3123 
                return __retres;
}


#line 3126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int fflp_disable_all_partitions(struct niu *np)
{
  int __retres;
  unsigned long i;
  
#line 3130 
  i = 0UL;
  
#line 3130 
  goto ldv_53639;
  ldv_53638: 
#line 3131 
  ;
  {
    
#line 3131 
    int err = fflp_set_partition(np,0ULL,0ULL,0ULL,0);
    
#line 3132 
    if (err != 0) {
      
#line 3133 
      __retres = err;
      
#line 3133 
      goto return_label;
    }
    else ;
  }
  
#line 3130 
  i += 1UL;
  ldv_53639: 
#line 3131 
  ;
  
#line 3130 
  if (i <= 7UL) 
#line 3132 
                goto ldv_53638; else 
#line 3135 
                                     goto ldv_53640;
  ldv_53640: 
#line 3136 
  ;
  
#line 3135 
  __retres = 0;
  return_label: 
#line 3135 
                return __retres;
}


#line 3138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void fflp_llcsnap_enable(struct niu *np, int on)
{
  
#line 3140 
  u64 val = readq((void const volatile *)(np->regs + 3801344U));
  
#line 3142 
  if (on != 0) 
#line 3143 
               val |= 1ULL; else 
#line 3145 
                                 val &= 18446744073709551614ULL;
  
#line 3146 
  writeq((unsigned long)val,(void volatile *)(np->regs + 3801344U));
  
#line 3147 
  return;
}


#line 3149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void fflp_errors_enable(struct niu *np, int on)
{
  
#line 3151 
  u64 val = readq((void const volatile *)(np->regs + 3801344U));
  
#line 3153 
  if (on != 0) 
#line 3154 
               val &= 18446744073709551611ULL; else 
#line 3156 
                                                    val |= 4ULL;
  
#line 3157 
  writeq((unsigned long)val,(void volatile *)(np->regs + 3801344U));
  
#line 3158 
  return;
}


#line 3160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int fflp_hash_clear(struct niu *np)
{
  int __retres;
  struct fcram_hash_ipv4 ent;
  unsigned long i;
  
#line 3166 
  memset((void *)(& ent),0,32UL);
  
#line 3167 
  ent.header = 4611686018427387904ULL;
  
#line 3169 
  i = 0UL;
  
#line 3169 
  goto ldv_53658;
  ldv_53657: 
#line 3170 
  ;
  {
    
#line 3170 
    int err = hash_write(np,0UL,i,1UL,(u64 *)(& ent));
    
#line 3171 
    if (err != 0) {
      
#line 3172 
      __retres = err;
      
#line 3172 
      goto return_label;
    }
    else ;
  }
  
#line 3169 
  i += 32UL;
  ldv_53658: 
#line 3170 
  ;
  
#line 3169 
  if (i <= 8388607UL) 
#line 3171 
                      goto ldv_53657; else 
#line 3174 
                                           goto ldv_53659;
  ldv_53659: 
#line 3175 
  ;
  
#line 3174 
  __retres = 0;
  return_label: 
#line 3174 
                return __retres;
}


#line 3177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int fflp_early_init(struct niu *np)
{
  struct niu_parent *parent;
  unsigned long flags;
  int err;
  
#line 3183 
  ldv___ldv_spin_lock_89(& (np->parent)->lock);
  
#line 3185 
  parent = np->parent;
  
#line 3186 
  err = 0;
  
#line 3187 
  if ((parent->flags & 1U) == 0U) {
    
#line 3188 
    if ((unsigned int)(np->parent)->plat_type != 2U) {
      
#line 3189 
      fflp_reset(np);
      
#line 3190 
      fflp_set_timings(np);
      
#line 3191 
      err = fflp_disable_all_partitions(np);
      
#line 3192 
      if (err != 0) {
        
#line 3193 
        if ((np->msg_enable & 2U) != 0U) 
#line 3193 
                                         netdev_printk("\001",(struct net_device const *)np->dev,"fflp_disable_all_partitions failed, err=%d\n",err); else ;
        
#line 3196 
        goto out;
      }
      else ;
    }
    else ;
    
#line 3200 
    err = tcam_early_init(np);
    
#line 3201 
    if (err != 0) {
      
#line 3202 
      if ((np->msg_enable & 2U) != 0U) 
#line 3202 
                                       netdev_printk("\001",(struct net_device const *)np->dev,"tcam_early_init failed, err=%d\n",err); else ;
      
#line 3204 
      goto out;
    }
    else ;
    
#line 3206 
    fflp_llcsnap_enable(np,1);
    
#line 3207 
    fflp_errors_enable(np,0);
    
#line 3208 
    writeq(0UL,(void volatile *)(np->regs + 3932256U));
    
#line 3209 
    writeq(0UL,(void volatile *)(np->regs + 3932264U));
    
#line 3211 
    err = tcam_flush_all(np);
    
#line 3212 
    if (err != 0) {
      
#line 3213 
      if ((np->msg_enable & 2U) != 0U) 
#line 3213 
                                       netdev_printk("\001",(struct net_device const *)np->dev,"tcam_flush_all failed, err=%d\n",err); else ;
      
#line 3215 
      goto out;
    }
    else ;
    
#line 3217 
    if ((unsigned int)(np->parent)->plat_type != 2U) {
      
#line 3218 
      err = fflp_hash_clear(np);
      
#line 3219 
      if (err != 0) {
        
#line 3220 
        if ((np->msg_enable & 2U) != 0U) 
#line 3220 
                                         netdev_printk("\001",(struct net_device const *)np->dev,"fflp_hash_clear failed, err=%d\n",err); else ;
        
#line 3223 
        goto out;
      }
      else ;
    }
    else ;
    
#line 3227 
    vlan_tbl_clear(np);
    
#line 3229 
    parent->flags |= 1U;
  }
  else ;
  out: 
#line 3231 
  ;
  
#line 3232 
  ldv_spin_unlock_irqrestore_90(& (np->parent)->lock,flags);
  
#line 3233 
  return err;
}


#line 3236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_flow_key(struct niu *np, unsigned long class_code, u64 key)
{
  int __retres;
  
#line 3238 
  if (class_code + 18446744073709551612UL > 11UL) {
    
#line 3240 
    __retres = -22;
    
#line 3240 
    goto return_label;
  }
  else ;
  
#line 3242 
  writeq((unsigned long)key,(void volatile *)(np->regs + (class_code + 491516UL) * 8UL));
  
#line 3243 
  __retres = 0;
  return_label: 
#line 3243 
                return __retres;
}


#line 3246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_tcam_key(struct niu *np, unsigned long class_code, u64 key)
{
  int __retres;
  
#line 3248 
  if (class_code + 18446744073709551612UL > 11UL) {
    
#line 3250 
    __retres = -22;
    
#line 3250 
    goto return_label;
  }
  else ;
  
#line 3252 
  writeq((unsigned long)key,(void volatile *)(np->regs + (class_code + 475138UL) * 8UL));
  
#line 3253 
  __retres = 0;
  return_label: 
#line 3253 
                return __retres;
}


#line 3257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u16 tcam_get_index(struct niu *np, u16 idx)
{
  u16 __retres;
  
#line 3260 
  if ((int)idx >= (int)np->clas.tcam_sz + -1) 
#line 3261 
                                              idx = (unsigned short)0U; else ;
  
#line 3262 
  __retres = (unsigned short)((unsigned int)np->clas.tcam_top + ((unsigned int)idx + 1U) * (unsigned int)((unsigned short)(np->parent)->num_ports));
  
#line 3262 
  return __retres;
}


#line 3265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u16 tcam_get_size(struct niu *np)
{
  u16 __retres;
  
#line 3268 
  __retres = (unsigned short)((unsigned int)np->clas.tcam_sz + 65535U);
  
#line 3268 
  return __retres;
}


#line 3271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u16 tcam_get_valid_entry_cnt(struct niu *np)
{
  u16 __retres;
  
#line 3274 
  __retres = (unsigned short)((unsigned int)np->clas.tcam_valid_entries + 65535U);
  
#line 3274 
  return __retres;
}


#line 3277  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_rx_skb_append(struct sk_buff *skb, struct page *page, u32 offset, u32 size, u32 truesize)
{
  unsigned char *tmp;
  
#line 3280 
  ;
  
#line 3280 
  ;
  
#line 3280 
  ;
  
#line 3280 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 3280 
  ;
  
#line 3280 
  skb_fill_page_desc(skb,(int)((struct skb_shared_info *)tmp)->nr_frags,page,(int)offset,(int)size);
  
#line 3282 
  skb->len += size;
  
#line 3283 
  skb->data_len += size;
  
#line 3284 
  skb->truesize += truesize;
  
#line 3285 
  return;
}


#line 3287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static unsigned int niu_hash_rxaddr(struct rx_ring_info *rp, u64 a)
{
  unsigned int __retres;
  
#line 3289 
  a >>= 12;
  
#line 3290 
  a = (a >> 7) ^ a;
  
#line 3292 
  __retres = (unsigned int)a & 127U;
  
#line 3292 
  return __retres;
}


#line 3295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct page *niu_find_rxpage(struct rx_ring_info *rp, u64 addr, struct page ***link)
{
  struct page *p;
  struct page **pp;
  
#line 3298 
  unsigned int h = niu_hash_rxaddr(rp,addr);
  
#line 3301 
  addr &= 18446744073709547520ULL;
  
#line 3302 
  pp = rp->rxhash + h;
  
#line 3303 
  goto ldv_53708;
  ldv_53707: 
#line 3304 
  ;
  
#line 3304 
  if ((unsigned long long)p->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index == addr) {
    
#line 3305 
    *link = pp;
    
#line 3306 
    goto found;
  }
  else ;
  
#line 3303 
  pp = (struct page **)(& p->__anonCompField_page_36.mapping);
  ldv_53708: 
#line 3304 
  ;
  
#line 3303 
  p = *pp;
  
#line 3303 
  if (p != (struct page *)0) 
#line 3305 
                             goto ldv_53707; else 
#line 3308 
                                                  goto ldv_53709;
  ldv_53709: 
#line 3309 
  ;
  
#line 3310 
  ldv_inline_asm();
  
#line 3309 
  ;
  found: 
#line 3311 
  ;
  
#line 3312 
  return p;
}


#line 3315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_hash_page(struct rx_ring_info *rp, struct page *page, u64 base)
{
  
#line 3317 
  unsigned int h = niu_hash_rxaddr(rp,base);
  
#line 3319 
  page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index = (unsigned long)base;
  
#line 3320 
  page->__anonCompField_page_36.mapping = (struct address_space *)*(rp->rxhash + h);
  
#line 3321 
  *(rp->rxhash + h) = page;
  
#line 3322 
  return;
}


#line 3324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_rbr_add_page(struct niu *np, struct rx_ring_info *rp, gfp_t mask, int start_index)
{
  int __retres;
  struct page *page;
  u64 addr;
  int i;
  
#line 3331 
  page = alloc_pages(mask,0U);
  
#line 3332 
  if (page == (struct page *)0) {
    
#line 3333 
    __retres = -12;
    
#line 3333 
    goto return_label;
  }
  else ;
  
#line 3335 
  addr = (*((np->ops)->map_page))(np->device,page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 3337 
  if (addr == 0ULL) {
    
#line 3338 
    __free_pages(page,0U);
    
#line 3339 
    __retres = -12;
    
#line 3339 
    goto return_label;
  }
  else ;
  
#line 3342 
  niu_hash_page(rp,page,addr);
  
#line 3343 
  if ((unsigned int)rp->rbr_blocks_per_page > 1U) 
#line 3344 
                                                  atomic_add((int)rp->rbr_blocks_per_page + -1,& page->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count); else ;
  
#line 3346 
  i = 0;
  
#line 3346 
  goto ldv_53727;
  ldv_53726: 
#line 3347 
  ;
  {
    
#line 3347 
    __le32 *rbr = rp->rbr + (start_index + i);
    
#line 3349 
    *rbr = (unsigned int)(addr >> 12);
    
#line 3350 
    addr = (unsigned long long)rp->rbr_block_size + addr;
  }
  
#line 3346 
  i += 1;
  ldv_53727: 
#line 3347 
  ;
  
#line 3346 
  if ((int)rp->rbr_blocks_per_page > i) 
#line 3348 
                                        goto ldv_53726; else 
#line 3351 
                                                             goto ldv_53728;
  ldv_53728: 
#line 3352 
  ;
  
#line 3353 
  __retres = 0;
  return_label: 
#line 3353 
                return __retres;
}


#line 3356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_rbr_refill(struct niu *np, struct rx_ring_info *rp, gfp_t mask)
{
  
#line 3358 
  int index = (int)rp->rbr_index;
  
#line 3360 
  rp->rbr_pending += 1U;
  
#line 3361 
  if (rp->rbr_pending % (unsigned int)rp->rbr_blocks_per_page == 0U) {
    
#line 3362 
    int err = niu_rbr_add_page(np,rp,mask,index);
    
#line 3364 
    if ((long)(err != 0) != 0L) {
      
#line 3365 
      rp->rbr_pending -= 1U;
      
#line 3366 
      goto return_label;
    }
    else ;
    
#line 3369 
    rp->rbr_index += (unsigned int)rp->rbr_blocks_per_page;
    
#line 3370 
    if ((long)(rp->rbr_index > rp->rbr_table_size) != 0L) {
      
#line 3372 
      ldv_inline_asm();
      
#line 3370 
      ;
    }
    else ;
    
#line 3371 
    if (rp->rbr_index == rp->rbr_table_size) 
#line 3372 
                                             rp->rbr_index = 0U; else ;
    
#line 3374 
    if (rp->rbr_pending >= rp->rbr_kick_thresh) {
      
#line 3375 
      writeq((unsigned long)rp->rbr_pending,(void volatile *)(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291488UL)));
      
#line 3376 
      rp->rbr_pending = 0U;
    }
    else ;
  }
  else ;
  return_label: 
#line 3379 
                return;
}


#line 3381  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_rx_pkt_ignore(struct niu *np, struct rx_ring_info *rp)
{
  
#line 3383 
  unsigned int index = rp->rcr_index;
  
#line 3384 
  int num_rcr = 0;
  
#line 3386 
  rp->rx_dropped += 1ULL;
  ldv_53748: 
#line 3387 
  ;
  {
    struct page *page;
    struct page **link;
    u64 addr;
    u64 val;
    u32 rcr_size;
    
#line 3392 
    num_rcr += 1;
    
#line 3394 
    val = __le64_to_cpup((__le64 const *)(rp->rcr + index));
    
#line 3395 
    addr = (val << 6) & 17592186044352ULL;
    
#line 3397 
    page = niu_find_rxpage(rp,addr,& link);
    
#line 3399 
    rcr_size = (unsigned int)rp->rbr_sizes[(val >> 38) & 3ULL];
    
#line 3401 
    if ((unsigned long long)((page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index - (unsigned long)rcr_size) + 4096UL) == addr) {
      
#line 3402 
      *link = (struct page *)page->__anonCompField_page_36.mapping;
      
#line 3403 
      (*((np->ops)->unmap_page))(np->device,(unsigned long long)page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
      
#line 3405 
      page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index = 0UL;
      
#line 3406 
      page->__anonCompField_page_36.mapping = (struct address_space *)0;
      
#line 3407 
      __free_pages(page,0U);
      
#line 3408 
      rp->rbr_refill_pending += 1U;
    }
    else ;
    
#line 3411 
    if (index + 1U < rp->rcr_table_size) 
#line 3411 
                                         index += 1U; else 
#line 3411 
                                                           index = 0U;
    
#line 3412 
    if (val >= (u64)0) 
#line 3413 
                       goto ldv_53747; else ;
  }
  
#line 3387 
  goto ldv_53748;
  ldv_53747: 
#line 3388 
  ;
  
#line 3416 
  rp->rcr_index = index;
  
#line 3418 
  return num_rcr;
}


#line 3421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_process_rx_pkt(struct napi_struct *napi, struct niu *np, struct rx_ring_info *rp)
{
  int __retres;
  struct rx_pkt_hdr1 *rh;
  struct sk_buff *skb;
  int len;
  int num_rcr;
  int tmp_1;
  
#line 3424 
  unsigned int index = rp->rcr_index;
  
#line 3429 
  skb = netdev_alloc_skb(np->dev,128U);
  
#line 3430 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    int tmp;
    
#line 3431 
    tmp = niu_rx_pkt_ignore(np,rp);
    
#line 3431 
    __retres = tmp;
    
#line 3431 
    goto return_label;
  }
  else ;
  
#line 3433 
  num_rcr = 0;
  ldv_53768: 
#line 3434 
  ;
  {
    struct page *page;
    struct page **link;
    u32 rcr_size;
    u32 append_size;
    u64 addr;
    u64 val;
    u64 off;
    
#line 3439 
    num_rcr += 1;
    
#line 3441 
    val = __le64_to_cpup((__le64 const *)(rp->rcr + index));
    
#line 3443 
    len = (int)(val >> 40) & 16383;
    
#line 3445 
    len += -4;
    
#line 3447 
    addr = (val << 6) & 17592186044352ULL;
    
#line 3449 
    page = niu_find_rxpage(rp,addr,& link);
    
#line 3451 
    rcr_size = (unsigned int)rp->rbr_sizes[(val >> 38) & 3ULL];
    
#line 3454 
    off = addr & 4095ULL;
    
#line 3455 
    append_size = rcr_size;
    
#line 3456 
    if (num_rcr == 1) {
      int ptype;
      
#line 3459 
      ptype = (int)(val >> 61);
      
#line 3460 
      if ((unsigned int)ptype + 4294967295U <= 1U && (val & 828662331436171264ULL) == 0ULL) 
        
#line 3464 
        skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U; else 
                                                                    
#line 3466 
                                                                    skb_checksum_none_assert((struct sk_buff const *)skb);
    }
    else 
      
#line 3467 
      if (val >= (u64)0) 
#line 3468 
                         append_size = (unsigned int)len - skb->len; else ;
    
#line 3470 
    niu_rx_skb_append(skb,page,(unsigned int)off,append_size,rcr_size);
    
#line 3471 
    if ((unsigned long long)((page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index + (unsigned long)rp->rbr_block_size) - (unsigned long)rcr_size) == addr) {
      
#line 3472 
      *link = (struct page *)page->__anonCompField_page_36.mapping;
      
#line 3473 
      (*((np->ops)->unmap_page))(np->device,(unsigned long long)page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
      
#line 3475 
      page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index = 0UL;
      
#line 3476 
      page->__anonCompField_page_36.mapping = (struct address_space *)0;
      
#line 3477 
      rp->rbr_refill_pending += 1U;
    }
    else 
#line 3479 
         get_page(page);
    
#line 3481 
    if (index + 1U < rp->rcr_table_size) 
#line 3481 
                                         index += 1U; else 
#line 3481 
                                                           index = 0U;
    
#line 3482 
    if (val >= (u64)0) 
#line 3483 
                       goto ldv_53767; else ;
  }
  
#line 3434 
  goto ldv_53768;
  ldv_53767: 
#line 3435 
  ;
  
#line 3486 
  rp->rcr_index = index;
  
#line 3488 
  len = (int)((unsigned int)len + 18U);
  {
    int tmp_0;
    
#line 3489 
    int __min1 = len;
    
#line 3489 
    int __min2 = 36;
    
#line 3489 
    if (__min1 < __min2) 
#line 3489 
                         tmp_0 = __min1; else 
#line 3489 
                                              tmp_0 = __min2;
    
#line 3489 
    tmp_1 = tmp_0;
  }
  
#line 3489 
  len = tmp_1;
  
#line 3490 
  __pskb_pull_tail(skb,len);
  
#line 3492 
  rh = (struct rx_pkt_hdr1 *)skb->data;
  
#line 3493 
  if (((np->dev)->features & 8589934592ULL) != 0ULL) 
#line 3494 
                                                     skb_set_hash(skb,((((unsigned int)rh->hashval2_0 << 24) | ((unsigned int)rh->hashval2_1 << 16)) | ((unsigned int)rh->hashval1_1 << 8)) | (unsigned int)rh->hashval1_2,(enum pkt_hash_types)PKT_HASH_TYPE_L3); else ;
  
#line 3500 
  skb_pull(skb,18U);
  
#line 3502 
  rp->rx_packets += 1ULL;
  
#line 3503 
  rp->rx_bytes += (unsigned long long)skb->len;
  
#line 3505 
  skb->protocol = eth_type_trans(skb,np->dev);
  
#line 3506 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)rp->rx_channel)));
  
#line 3507 
  napi_gro_receive(napi,skb);
  
#line 3509 
  __retres = num_rcr;
  return_label: 
#line 3509 
                return __retres;
}


#line 3512  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_rbr_fill(struct niu *np, struct rx_ring_info *rp, gfp_t mask)
{
  int err;
  
#line 3514 
  int blocks_per_page = (int)rp->rbr_blocks_per_page;
  
#line 3515 
  int index = (int)rp->rbr_index;
  
#line 3517 
  err = 0;
  
#line 3518 
  goto ldv_53782;
  ldv_53781: 
#line 3519 
  ;
  
#line 3519 
  err = niu_rbr_add_page(np,rp,mask,index);
  
#line 3520 
  if ((long)(err != 0) != 0L) 
#line 3521 
                              goto ldv_53780; else ;
  
#line 3523 
  index += blocks_per_page;
  ldv_53782: 
#line 3524 
  ;
  
#line 3518 
  if (rp->rbr_table_size - (unsigned int)blocks_per_page > (unsigned int)index) 
    
#line 3520 
    goto ldv_53781; else 
#line 3523 
                         goto ldv_53780;
  ldv_53780: 
#line 3524 
  ;
  
#line 3526 
  rp->rbr_index = (unsigned int)index;
  
#line 3527 
  return err;
}


#line 3530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_rbr_free(struct niu *np, struct rx_ring_info *rp)
{
  int i;
  
#line 3534 
  i = 0;
  
#line 3534 
  goto ldv_53795;
  ldv_53794: 
#line 3535 
  ;
  {
    struct page *page;
    
#line 3537 
    page = *(rp->rxhash + i);
    
#line 3538 
    goto ldv_53792;
    ldv_53791: 
#line 3539 
    ;
    {
      
#line 3539 
      struct page *next = (struct page *)page->__anonCompField_page_36.mapping;
      
#line 3540 
      u64 base = (unsigned long long)page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index;
      
#line 3542 
      (*((np->ops)->unmap_page))(np->device,base,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
      
#line 3544 
      page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index = 0UL;
      
#line 3545 
      page->__anonCompField_page_36.mapping = (struct address_space *)0;
      
#line 3547 
      __free_pages(page,0U);
      
#line 3549 
      page = next;
    }
    ldv_53792: 
#line 3551 
    ;
    
#line 3538 
    if (page != (struct page *)0) 
#line 3540 
                                  goto ldv_53791; else 
#line 3543 
                                                       goto ldv_53793;
    ldv_53793: 
#line 3544 
    ;
  }
  
#line 3534 
  i += 1;
  ldv_53795: 
#line 3535 
  ;
  
#line 3534 
  if (i <= 127) 
#line 3536 
                goto ldv_53794; else 
#line 3539 
                                     goto ldv_53796;
  ldv_53796: 
#line 3540 
  ;
  
#line 3553 
  i = 0;
  
#line 3553 
  goto ldv_53798;
  ldv_53797: 
#line 3554 
  ;
  
#line 3554 
  *(rp->rbr + i) = 0U;
  
#line 3553 
  i += 1;
  ldv_53798: 
#line 3554 
  ;
  
#line 3553 
  if (rp->rbr_table_size > (unsigned int)i) 
#line 3555 
                                            goto ldv_53797; else 
#line 3558 
                                                                 goto ldv_53799;
  ldv_53799: 
#line 3559 
  ;
  
#line 3555 
  rp->rbr_index = 0U;
  
#line 3556 
  return;
}


#line 3558  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int release_tx_packet(struct niu *np, struct tx_ring_info *rp, int idx)
{
  struct tx_pkt_hdr *tp;
  u64 tx_flags;
  int i;
  int len;
  unsigned int tmp;
  unsigned int tmp_1;
  unsigned char *tmp_0;
  unsigned char *tmp_2;
  
#line 3560 
  struct tx_buff_info *tb = & rp->tx_buffs[idx];
  
#line 3561 
  struct sk_buff *skb = tb->skb;
  
#line 3566 
  tp = (struct tx_pkt_hdr *)skb->data;
  
#line 3567 
  tx_flags = __le64_to_cpup((__le64 const *)(& tp->flags));
  
#line 3569 
  rp->tx_packets += 1ULL;
  
#line 3570 
  rp->tx_bytes += ((tx_flags >> 16) & 16383ULL) - (tx_flags & 7ULL) / 2ULL;
  
#line 3573 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 3573 
  len = (int)tmp;
  
#line 3574 
  (*((np->ops)->unmap_single))(np->device,tb->mapping,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 3577 
  if ((*(rp->descr + idx) & 4611686018427387904ULL) != 0ULL) 
#line 3578 
                                                             rp->mark_pending = (u16)((int)rp->mark_pending - 1); else ;
  
#line 3580 
  tb->skb = (struct sk_buff *)0;
  ldv_53811: 
#line 3581 
  ;
  
#line 3582 
  if (idx + 1 < rp->pending) 
#line 3582 
                             idx += 1; else 
#line 3582 
                                            idx = 0;
  
#line 3583 
  len += -4076;
  
#line 3584 
  if (len > 0) 
#line 3586 
               goto ldv_53811; else 
#line 3589 
                                    goto ldv_53812;
  ldv_53812: 
#line 3590 
  ;
  
#line 3586 
  i = 0;
  
#line 3586 
  goto ldv_53814;
  ldv_53813: 
#line 3587 
  ;
  
#line 3587 
  tb = & rp->tx_buffs[idx];
  
#line 3588 
  if ((long)(tb->skb != (struct sk_buff *)0) != 0L) {
    
#line 3590 
    ldv_inline_asm();
    
#line 3588 
    ;
  }
  else ;
  
#line 3590 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 3590 
  tmp_1 = skb_frag_size((skb_frag_t const *)(& ((struct skb_shared_info *)tmp_0)->frags[i]));
  
#line 3589 
  ;
  
#line 3589 
  ;
  
#line 3589 
  (*((np->ops)->unmap_page))(np->device,tb->mapping,(unsigned long)tmp_1,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 3592 
  if (idx + 1 < rp->pending) 
#line 3592 
                             idx += 1; else 
#line 3592 
                                            idx = 0;
  
#line 3586 
  i += 1;
  ldv_53814: 
#line 3587 
  ;
  
#line 3586 
  tmp_2 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 3586 
  ;
  
#line 3586 
  if ((int)((struct skb_shared_info *)tmp_2)->nr_frags > i) 
#line 3588 
                                                            goto ldv_53813; else 
                                                                    
#line 3591 
                                                                    goto ldv_53815;
  ldv_53815: 
#line 3592 
  ;
  
#line 3595 
  consume_skb(skb);
  
#line 3597 
  return idx;
}


#line 3602  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_tx_work(struct niu *np, struct tx_ring_info *rp)
{
  struct netdev_queue *txq;
  u16 pkt_cnt;
  u16 tmp;
  int cons;
  int index;
  u64 cs;
  u16 tmp_0;
  bool tmp_8;
  
#line 3609 
  index = (int)(((long)rp - (long)np->tx_rings) / 4208L);
  
#line 3610 
  txq = netdev_get_tx_queue((struct net_device const *)np->dev,(unsigned int)index);
  
#line 3612 
  cs = rp->tx_cs;
  
#line 3613 
  if ((long)((cs & 49152ULL) == 0ULL) != 0L) 
#line 3614 
                                             goto out; else ;
  
#line 3616 
  pkt_cnt = (unsigned short)((unsigned int)((unsigned short)(cs >> 48)) & 4095U);
  
#line 3616 
  tmp = pkt_cnt;
  
#line 3617 
  pkt_cnt = (unsigned short)((unsigned int)((int)pkt_cnt - (int)rp->last_pkt_cnt) & 4095U);
  
#line 3620 
  rp->last_pkt_cnt = tmp;
  
#line 3622 
  cons = rp->cons;
  
#line 3624 
  if ((np->msg_enable & 1024U) != 0U) 
#line 3624 
                                      netdev_printk("\001",(struct net_device const *)np->dev,"%s() pkt_cnt[%u] cons[%d]\n","niu_tx_work",(int)pkt_cnt,cons); else ;
  
#line 3627 
  goto ldv_53829;
  ldv_53828: 
#line 3628 
  ;
  
#line 3628 
  cons = release_tx_packet(np,rp,cons);
  ldv_53829: 
#line 3629 
  ;
  
#line 3627 
  tmp_0 = pkt_cnt;
  
#line 3627 
  pkt_cnt = (u16)((int)pkt_cnt - 1);
  
#line 3627 
  ;
  
#line 3627 
  if ((unsigned int)tmp_0 != 0U) 
#line 3629 
                                 goto ldv_53828; else 
#line 3632 
                                                      goto ldv_53830;
  ldv_53830: 
#line 3633 
  ;
  
#line 3630 
  rp->cons = cons;
  
#line 3631 
  ldv_inline_asm();
  out: 
#line 3633 
  ;
  
#line 3634 
  tmp_8 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
  
#line 3634 
  if ((long)((int)tmp_8 != 0) != 0L) {
    u32 tmp_9;
    
#line 3634 
    tmp_9 = niu_tx_avail(rp);
    
#line 3634 
    ;
    
#line 3634 
    if ((long)(tmp_9 > (unsigned int)(rp->pending / 4)) != 0L) {
      int tmp_5;
      bool tmp_6;
      {
        int pscr_ret__;
        {
          
#line 3636 
          void const *__vpp_verify = (void const *)0;
          
#line 3636 
          void const *tmp_2 = __vpp_verify;
        }
        
#line 3636 
        switch (4UL) {
          int tmp_1;
          int tmp_2_0;
          int tmp_3;
          int tmp_4;
          case (unsigned long)1: 
#line 3636 
          ;
          {
            int pfo_ret__;
            
#line 3636 
            switch (4UL) {
              case (unsigned long)1: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53836;
              case (unsigned long)2: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53836;
              case (unsigned long)4: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53836;
              case (unsigned long)8: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53836;
              default: 
#line 3636 
              ;
              
#line 3636 
              __bad_percpu_size();
            }
            ldv_53836: 
#line 3636 
            ;
            
#line 3636 
            tmp_1 = pfo_ret__;
          }
          
#line 3636 
          pscr_ret__ = tmp_1;
          
#line 3636 
          goto ldv_53842;
          case (unsigned long)2: 
#line 3636 
          ;
          {
            int pfo_ret___0;
            
#line 3636 
            switch (4UL) {
              case (unsigned long)1: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53846;
              case (unsigned long)2: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53846;
              case (unsigned long)4: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53846;
              case (unsigned long)8: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53846;
              default: 
#line 3636 
              ;
              
#line 3636 
              __bad_percpu_size();
            }
            ldv_53846: 
#line 3636 
            ;
            
#line 3636 
            tmp_2_0 = pfo_ret___0;
          }
          
#line 3636 
          pscr_ret__ = tmp_2_0;
          
#line 3636 
          goto ldv_53842;
          case (unsigned long)4: 
#line 3636 
          ;
          {
            int pfo_ret___1;
            
#line 3636 
            switch (4UL) {
              case (unsigned long)1: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53855;
              case (unsigned long)2: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53855;
              case (unsigned long)4: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53855;
              case (unsigned long)8: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53855;
              default: 
#line 3636 
              ;
              
#line 3636 
              __bad_percpu_size();
            }
            ldv_53855: 
#line 3636 
            ;
            
#line 3636 
            tmp_3 = pfo_ret___1;
          }
          
#line 3636 
          pscr_ret__ = tmp_3;
          
#line 3636 
          goto ldv_53842;
          case (unsigned long)8: 
#line 3636 
          ;
          {
            int pfo_ret___2;
            
#line 3636 
            switch (4UL) {
              case (unsigned long)1: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53864;
              case (unsigned long)2: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53864;
              case (unsigned long)4: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53864;
              case (unsigned long)8: 
#line 3636 
              ;
              
#line 3637 
              ldv_inline_asm();
              
#line 3636 
              goto ldv_53864;
              default: 
#line 3636 
              ;
              
#line 3636 
              __bad_percpu_size();
            }
            ldv_53864: 
#line 3636 
            ;
            
#line 3636 
            tmp_4 = pfo_ret___2;
          }
          
#line 3636 
          pscr_ret__ = tmp_4;
          
#line 3636 
          goto ldv_53842;
          default: 
#line 3636 
          ;
          
#line 3636 
          __bad_size_call_parameter();
          
#line 3636 
          goto ldv_53842;
        }
        ldv_53842: 
#line 3636 
        ;
        
#line 3636 
        tmp_5 = pscr_ret__;
      }
      
#line 3636 
      ;
      
#line 3636 
      __netif_tx_lock(txq,tmp_5);
      
#line 3637 
      tmp_6 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
      
#line 3637 
      if ((int)tmp_6 != 0) {
        u32 tmp_7;
        
#line 3637 
        tmp_7 = niu_tx_avail(rp);
        
#line 3637 
        ;
        
#line 3637 
        if (tmp_7 > (unsigned int)(rp->pending / 4)) 
#line 3639 
                                                     netif_tx_wake_queue(txq); else ;
      }
      else ;
      
#line 3640 
      __netif_tx_unlock(txq);
    }
    else ;
  }
  else ;
  
#line 3642 
  return;
}


#line 3644  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
__inline static void niu_sync_rx_discard_stats(struct niu *np, struct rx_ring_info *rp, int const limit)
{
  u32 misc;
  u32 wred;
  unsigned long tmp;
  unsigned long tmp_0;
  
#line 3659 
  int rx_channel = rp->rx_channel;
  
#line 3667 
  tmp = readq((void const volatile *)(np->regs + ((unsigned long)rx_channel * 512UL + 6291600UL)));
  
#line 3667 
  misc = (unsigned int)tmp;
  
#line 3668 
  if ((long)(((unsigned long long)misc & 65535ULL) > (unsigned long long)limit) != 0L) {
    
#line 3669 
    writeq(0UL,(void volatile *)(np->regs + ((unsigned long)rx_channel * 512UL + 6291600UL)));
    
#line 3670 
    rp->rx_errors += (unsigned long long)misc & 65535ULL;
    
#line 3672 
    if ((long)(((unsigned long long)misc & 65536ULL) != 0ULL) != 0L) 
      
#line 3673 
      dev_err((struct device const *)np->device,"rx-%d: Counter overflow RXMISC discard\n",rx_channel); else ;
    
#line 3676 
    if ((np->msg_enable & 64U) != 0U) 
#line 3676 
                                      netdev_printk("\001",(struct net_device const *)np->dev,"rx-%d: MISC drop=%u over=%u\n",rx_channel,misc,misc - (unsigned int)limit); else ;
  }
  else ;
  
#line 3682 
  tmp_0 = readq((void const volatile *)(np->regs + ((unsigned long)rx_channel * 64UL + 7012360UL)));
  
#line 3682 
  wred = (unsigned int)tmp_0;
  
#line 3683 
  if ((long)(((unsigned long long)wred & 65535ULL) > (unsigned long long)limit) != 0L) {
    
#line 3684 
    writeq(0UL,(void volatile *)(np->regs + ((unsigned long)rx_channel * 64UL + 7012360UL)));
    
#line 3685 
    rp->rx_dropped += (unsigned long long)wred & 65535ULL;
    
#line 3687 
    if ((long)(((unsigned long long)wred & 65536ULL) != 0ULL) != 0L) 
      
#line 3688 
      dev_err((struct device const *)np->device,"rx-%d: Counter overflow WRED discard\n",rx_channel); else ;
    
#line 3690 
    if ((np->msg_enable & 64U) != 0U) 
#line 3690 
                                      netdev_printk("\001",(struct net_device const *)np->dev,"rx-%d: WRED drop=%u over=%u\n",rx_channel,wred,wred - (unsigned int)limit); else ;
  }
  else ;
  
#line 3692 
  return;
}


#line 3696  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_rx_work(struct napi_struct *napi, struct niu *np, struct rx_ring_info *rp, int budget)
{
  int qlen;
  u64 stat;
  unsigned long tmp_0;
  int tmp_2;
  int tmp_3;
  
#line 3699 
  int rcr_done = 0;
  
#line 3699 
  int work_done = 0;
  
#line 3700 
  struct rxdma_mailbox *mbox = rp->mbox;
  
#line 3704 
  stat = (u64)readq((void const volatile *)(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL)));
  
#line 3705 
  tmp_0 = readq((void const volatile *)(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291536UL)));
  
#line 3705 
  qlen = (int)tmp_0 & 65535;
  
#line 3710 
  mbox->rx_dma_ctl_stat = 0ULL;
  
#line 3711 
  mbox->rcrstat_a = 0ULL;
  
#line 3713 
  if ((np->msg_enable & 2048U) != 0U) 
#line 3713 
                                      netdev_printk("\001",(struct net_device const *)np->dev,"%s(chan[%d]), stat[%llx] qlen=%d\n","niu_rx_work",rp->rx_channel,stat,qlen); else ;
  
#line 3717 
  work_done = 0;
  
#line 3717 
  rcr_done = work_done;
  {
    int tmp_1;
    
#line 3718 
    int _min1 = qlen;
    
#line 3718 
    int _min2 = budget;
    
#line 3718 
    if (_min1 < _min2) 
#line 3718 
                       tmp_1 = _min1; else 
#line 3718 
                                           tmp_1 = _min2;
    
#line 3718 
    tmp_2 = tmp_1;
  }
  
#line 3718 
  qlen = tmp_2;
  
#line 3719 
  goto ldv_53896;
  ldv_53895: 
#line 3720 
  ;
  
#line 3720 
  tmp_3 = niu_process_rx_pkt(napi,np,rp);
  
#line 3720 
  rcr_done = tmp_3 + rcr_done;
  
#line 3721 
  work_done += 1;
  ldv_53896: 
#line 3722 
  ;
  
#line 3719 
  if (work_done < qlen) 
#line 3721 
                        goto ldv_53895; else 
#line 3724 
                                             goto ldv_53897;
  ldv_53897: 
#line 3725 
  ;
  
#line 3724 
  if (rp->rbr_refill_pending >= rp->rbr_kick_thresh) {
    unsigned int i;
    
#line 3727 
    i = 0U;
    
#line 3727 
    goto ldv_53900;
    ldv_53899: 
#line 3728 
    ;
    
#line 3728 
    niu_rbr_refill(np,rp,32U);
    
#line 3727 
    i += 1U;
    ldv_53900: 
#line 3728 
    ;
    
#line 3727 
    if (rp->rbr_refill_pending > i) 
#line 3729 
                                    goto ldv_53899; else 
#line 3732 
                                                         goto ldv_53901;
    ldv_53901: 
#line 3733 
    ;
    
#line 3729 
    rp->rbr_refill_pending = 0U;
  }
  else ;
  
#line 3732 
  stat = ((unsigned long long)work_done | ((unsigned long long)rcr_done << 16)) | 140737488355328ULL;
  
#line 3736 
  writeq((unsigned long)stat,(void volatile *)(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL)));
  
#line 3739 
  if (qlen > 10) 
#line 3740 
                 niu_sync_rx_discard_stats(np,rp,32767); else ;
  
#line 3742 
  return work_done;
}


#line 3745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_poll_core(struct niu *np, struct niu_ldg *lp, int budget)
{
  int i;
  
#line 3747 
  u64 v0 = lp->v0;
  
#line 3748 
  u32 tx_vec = (unsigned int)(v0 >> 32);
  
#line 3749 
  u32 rx_vec = (unsigned int)v0;
  
#line 3750 
  int work_done = 0;
  
#line 3752 
  if ((np->msg_enable & 512U) != 0U) 
#line 3752 
                                     netdev_printk("\001",(struct net_device const *)np->dev,"%s() v0[%016llx]\n","niu_poll_core",v0); else ;
  
#line 3755 
  i = 0;
  
#line 3755 
  goto ldv_53915;
  ldv_53914: 
#line 3756 
  ;
  {
    
#line 3756 
    struct tx_ring_info *rp = np->tx_rings + i;
    
#line 3757 
    if (((unsigned int)(1 << (int)rp->tx_channel) & tx_vec) != 0U) 
#line 3758 
                                                                   niu_tx_work(np,rp); else ;
    
#line 3759 
    writeq(0UL,(void volatile *)(np->regs + ((unsigned long)((int)rp->tx_channel + 32) + 1280UL) * 8192UL));
  }
  
#line 3755 
  i += 1;
  ldv_53915: 
#line 3756 
  ;
  
#line 3755 
  if (np->num_tx_rings > i) 
#line 3757 
                            goto ldv_53914; else 
#line 3760 
                                                 goto ldv_53916;
  ldv_53916: 
#line 3761 
  ;
  
#line 3762 
  i = 0;
  
#line 3762 
  goto ldv_53920;
  ldv_53919: 
#line 3763 
  ;
  {
    
#line 3763 
    struct rx_ring_info *rp_0 = np->rx_rings + i;
    
#line 3765 
    if (((unsigned int)(1 << rp_0->rx_channel) & rx_vec) != 0U) {
      int this_work_done;
      
#line 3768 
      this_work_done = niu_rx_work(& lp->napi,np,rp_0,budget);
      
#line 3771 
      budget -= this_work_done;
      
#line 3772 
      work_done += this_work_done;
    }
    else ;
    
#line 3774 
    writeq(0UL,(void volatile *)(np->regs + ((unsigned long)rp_0->rx_channel + 1280UL) * 8192UL));
  }
  
#line 3762 
  i += 1;
  ldv_53920: 
#line 3763 
  ;
  
#line 3762 
  if (np->num_rx_rings > i) 
#line 3764 
                            goto ldv_53919; else 
#line 3767 
                                                 goto ldv_53921;
  ldv_53921: 
#line 3768 
  ;
  
#line 3777 
  return work_done;
}


#line 3780  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_poll(struct napi_struct *napi, int budget)
{
  struct niu_ldg *tmp;
  int work_done;
  {
    
#line 3782 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 3782 
    tmp = (struct niu_ldg *)__mptr;
  }
  
#line 3782 
  struct niu_ldg *lp = tmp;
  
#line 3783 
  struct niu *np = lp->np;
  
#line 3786 
  work_done = niu_poll_core(np,lp,budget);
  
#line 3788 
  if (work_done < budget) {
    
#line 3789 
    napi_complete(napi);
    
#line 3790 
    niu_ldg_rearm(np,lp,1);
  }
  else ;
  
#line 3792 
  return work_done;
}


#line 3795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_log_rxchan_errors(struct niu *np, struct rx_ring_info *rp, u64 stat)
{
  
#line 3798 
  netdev_err((struct net_device const *)np->dev,"RX channel %u errors ( ",rp->rx_channel);
  
#line 3800 
  if ((stat & 9007199254740992ULL) != 0ULL) 
#line 3801 
                                            printk(""); else ;
  
#line 3802 
  if ((stat & 4503599627370496ULL) != 0ULL) 
#line 3803 
                                            printk(""); else ;
  
#line 3804 
  if ((stat & 2251799813685248ULL) != 0ULL) 
#line 3805 
                                            printk(""); else ;
  
#line 3806 
  if ((stat & 1125899906842624ULL) != 0ULL) 
#line 3807 
                                            printk(""); else ;
  
#line 3808 
  if ((stat & 562949953421312ULL) != 0ULL) 
#line 3809 
                                           printk(""); else ;
  
#line 3810 
  if ((stat & 17592186044416ULL) != 0ULL) 
#line 3811 
                                          printk(""); else ;
  
#line 3812 
  if ((stat & 8796093022208ULL) != 0ULL) 
#line 3813 
                                         printk(""); else ;
  
#line 3814 
  if ((stat & 274877906944ULL) != 0ULL) 
#line 3815 
                                        printk(""); else ;
  
#line 3816 
  if ((stat & 137438953472ULL) != 0ULL) 
#line 3817 
                                        printk(""); else ;
  
#line 3818 
  if ((stat & 68719476736ULL) != 0ULL) 
#line 3819 
                                       printk(""); else ;
  
#line 3820 
  if ((stat & 17179869184ULL) != 0ULL) 
#line 3821 
                                       printk(""); else ;
  
#line 3822 
  if ((stat & 8589934592ULL) != 0ULL) 
#line 3823 
                                      printk(""); else ;
  
#line 3824 
  if ((stat & 4294967296ULL) != 0ULL) 
#line 3825 
                                      printk(""); else ;
  
#line 3826 
  if ((stat & 281474976710656ULL) != 0ULL) 
#line 3827 
                                           printk(""); else ;
  
#line 3829 
  printk("");
  
#line 3830 
  return;
}


#line 3832  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_rx_error(struct niu *np, struct rx_ring_info *rp)
{
  
#line 3834 
  u64 stat = readq((void const volatile *)(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL)));
  
#line 3835 
  int err = 0;
  
#line 3838 
  if ((stat & 17759822912946176ULL) != 0ULL) 
#line 3840 
                                             err = -22; else ;
  
#line 3842 
  if (err != 0) {
    
#line 3843 
    netdev_err((struct net_device const *)np->dev,"RX channel %u error, stat[%llx]\n",rp->rx_channel,stat);
    
#line 3847 
    niu_log_rxchan_errors(np,rp,stat);
  }
  else ;
  
#line 3850 
  writeq((unsigned long)stat & 395308789923840UL,(void volatile *)(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL)));
  
#line 3853 
  return err;
}


#line 3856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_log_txchan_errors(struct niu *np, struct tx_ring_info *rp, u64 cs)
{
  
#line 3859 
  netdev_err((struct net_device const *)np->dev,"TX channel %u errors ( ",(int)rp->tx_channel);
  
#line 3861 
  if ((cs & 128ULL) != 0ULL) 
#line 3862 
                             printk(""); else ;
  
#line 3863 
  if ((cs & 64ULL) != 0ULL) 
#line 3864 
                            printk(""); else ;
  
#line 3865 
  if ((cs & 32ULL) != 0ULL) 
#line 3866 
                            printk(""); else ;
  
#line 3867 
  if ((cs & 16ULL) != 0ULL) 
#line 3868 
                            printk(""); else ;
  
#line 3869 
  if ((cs & 8ULL) != 0ULL) 
#line 3870 
                           printk(""); else ;
  
#line 3871 
  if ((cs & 4ULL) != 0ULL) 
#line 3872 
                           printk(""); else ;
  
#line 3873 
  if ((cs & 2ULL) != 0ULL) 
#line 3874 
                           printk(""); else ;
  
#line 3875 
  if ((cs & 1ULL) != 0ULL) 
#line 3876 
                           printk(""); else ;
  
#line 3878 
  printk("");
  
#line 3879 
  return;
}


#line 3881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_tx_error(struct niu *np, struct tx_ring_info *rp)
{
  int __retres;
  u64 cs;
  u64 logh;
  u64 logl;
  
#line 3885 
  cs = (u64)readq((void const volatile *)(np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553640UL)));
  
#line 3886 
  logh = (u64)readq((void const volatile *)(np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553672UL)));
  
#line 3887 
  logl = (u64)readq((void const volatile *)(np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553680UL)));
  
#line 3889 
  netdev_err((struct net_device const *)np->dev,"TX channel %u error, cs[%llx] logh[%llx] logl[%llx]\n",(int)rp->tx_channel,cs,logh,logl);
  
#line 3895 
  niu_log_txchan_errors(np,rp,cs);
  
#line 3897 
  __retres = -19;
  
#line 3897 
  return __retres;
}


#line 3900  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_mif_interrupt(struct niu *np)
{
  int __retres;
  
#line 3902 
  u64 mif_status = readq((void const volatile *)(np->regs + 1663040U));
  
#line 3903 
  int phy_mdint = 0;
  
#line 3905 
  if ((np->flags & 65536U) != 0U) {
    
#line 3906 
    u64 xrxmac_stat = readq((void const volatile *)(np->mac_regs + 40U));
    
#line 3908 
    if ((xrxmac_stat & 65536ULL) != 0ULL) 
#line 3909 
                                          phy_mdint = 1; else ;
  }
  else ;
  
#line 3912 
  netdev_err((struct net_device const *)np->dev,"MIF interrupt, stat[%llx] phy_mdint(%d)\n",mif_status,phy_mdint);
  
#line 3915 
  __retres = -19;
  
#line 3915 
  return __retres;
}


#line 3918  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_xmac_interrupt(struct niu *np)
{
  u64 val;
  
#line 3920 
  struct niu_xmac_stats *mp = & np->mac_stats.xmac;
  
#line 3923 
  val = (u64)readq((void const volatile *)(np->mac_regs + 32U));
  
#line 3924 
  if ((val & 2048ULL) != 0ULL) 
#line 3925 
                               mp->tx_frames += 4294967295ULL; else ;
  
#line 3926 
  if ((val & 1024ULL) != 0ULL) 
#line 3927 
                               mp->tx_bytes += 4294967295ULL; else ;
  
#line 3928 
  if ((val & 16ULL) != 0ULL) 
#line 3929 
                             mp->tx_fifo_errors += 1ULL; else ;
  
#line 3930 
  if ((val & 8ULL) != 0ULL) 
#line 3931 
                            mp->tx_overflow_errors += 1ULL; else ;
  
#line 3932 
  if ((val & 4ULL) != 0ULL) 
#line 3933 
                            mp->tx_max_pkt_size_errors += 1ULL; else ;
  
#line 3934 
  if ((val & 2ULL) != 0ULL) 
#line 3935 
                            mp->tx_underflow_errors += 1ULL; else ;
  
#line 3937 
  val = (u64)readq((void const volatile *)(np->mac_regs + 40U));
  
#line 3938 
  if ((val & 524288ULL) != 0ULL) 
#line 3939 
                                 mp->rx_local_faults += 1ULL; else ;
  
#line 3940 
  if ((val & 262144ULL) != 0ULL) 
#line 3941 
                                 mp->rx_remote_faults += 1ULL; else ;
  
#line 3942 
  if ((val & 131072ULL) != 0ULL) 
#line 3943 
                                 mp->rx_link_faults += 255ULL; else ;
  
#line 3944 
  if ((val & 65536ULL) != 0ULL) 
#line 3945 
                                mp->rx_align_errors += 255ULL; else ;
  
#line 3946 
  if ((val & 32768ULL) != 0ULL) 
#line 3947 
                                mp->rx_frags += 2097151ULL; else ;
  
#line 3948 
  if ((val & 16384ULL) != 0ULL) 
#line 3949 
                                mp->rx_mcasts += 2097151ULL; else ;
  
#line 3950 
  if ((val & 8192ULL) != 0ULL) 
#line 3951 
                               mp->rx_bcasts += 2097151ULL; else ;
  
#line 3952 
  if ((val & 8192ULL) != 0ULL) 
#line 3953 
                               mp->rx_bcasts += 2097151ULL; else ;
  
#line 3954 
  if ((val & 128ULL) != 0ULL) 
#line 3955 
                              mp->rx_hist_cnt1 += 2097151ULL; else ;
  
#line 3956 
  if ((val & 256ULL) != 0ULL) 
#line 3957 
                              mp->rx_hist_cnt2 += 2097151ULL; else ;
  
#line 3958 
  if ((val & 512ULL) != 0ULL) 
#line 3959 
                              mp->rx_hist_cnt3 += 1048575ULL; else ;
  
#line 3960 
  if ((val & 1024ULL) != 0ULL) 
#line 3961 
                               mp->rx_hist_cnt4 += 524287ULL; else ;
  
#line 3962 
  if ((val & 2048ULL) != 0ULL) 
#line 3963 
                               mp->rx_hist_cnt5 += 262143ULL; else ;
  
#line 3964 
  if ((val & 4096ULL) != 0ULL) 
#line 3965 
                               mp->rx_hist_cnt6 += 65535ULL; else ;
  
#line 3966 
  if ((val & 1048576ULL) != 0ULL) 
#line 3967 
                                  mp->rx_hist_cnt7 += 134217727ULL; else ;
  
#line 3968 
  if ((val & 64ULL) != 0ULL) 
#line 3969 
                             mp->rx_octets += 4294967295ULL; else ;
  
#line 3970 
  if ((val & 32ULL) != 0ULL) 
#line 3971 
                             mp->rx_code_violations += 255ULL; else ;
  
#line 3972 
  if ((val & 16ULL) != 0ULL) 
#line 3973 
                             mp->rx_len_errors += 255ULL; else ;
  
#line 3974 
  if ((val & 8ULL) != 0ULL) 
#line 3975 
                            mp->rx_crc_errors += 255ULL; else ;
  
#line 3976 
  if ((val & 4ULL) != 0ULL) 
#line 3977 
                            mp->rx_underflows += 1ULL; else ;
  
#line 3978 
  if ((val & 2ULL) != 0ULL) 
#line 3979 
                            mp->rx_overflows += 1ULL; else ;
  
#line 3981 
  val = (u64)readq((void const volatile *)(np->mac_regs + 48U));
  
#line 3982 
  if ((val & 4ULL) != 0ULL) 
#line 3983 
                            mp->pause_off_state += 1ULL; else ;
  
#line 3984 
  if ((val & 2ULL) != 0ULL) 
#line 3985 
                            mp->pause_on_state += 1ULL; else ;
  
#line 3986 
  if ((val & 1ULL) != 0ULL) 
#line 3987 
                            mp->pause_received += 1ULL; else ;
  
#line 3988 
  return;
}


#line 3990  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_bmac_interrupt(struct niu *np)
{
  u64 val;
  
#line 3992 
  struct niu_bmac_stats *mp = & np->mac_stats.bmac;
  
#line 3995 
  val = (u64)readq((void const volatile *)(np->mac_regs + 32U));
  
#line 3996 
  if ((val & 2ULL) != 0ULL) 
#line 3997 
                            mp->tx_underflow_errors += 1ULL; else ;
  
#line 3998 
  if ((val & 4ULL) != 0ULL) 
#line 3999 
                            mp->tx_max_pkt_size_errors += 1ULL; else ;
  
#line 4000 
  if ((val & 1024ULL) != 0ULL) 
#line 4001 
                               mp->tx_bytes += 4294967295ULL; else ;
  
#line 4002 
  if ((val & 2048ULL) != 0ULL) 
#line 4003 
                               mp->tx_frames += 4294967295ULL; else ;
  
#line 4005 
  val = (u64)readq((void const volatile *)(np->mac_regs + 40U));
  
#line 4006 
  if ((val & 2ULL) != 0ULL) 
#line 4007 
                            mp->rx_overflows += 1ULL; else ;
  
#line 4008 
  if ((val & 4ULL) != 0ULL) 
#line 4009 
                            mp->rx_frames += 65535ULL; else ;
  
#line 4010 
  if ((val & 8ULL) != 0ULL) 
#line 4011 
                            mp->rx_align_errors += 65535ULL; else ;
  
#line 4012 
  if ((val & 16ULL) != 0ULL) 
#line 4013 
                             mp->rx_crc_errors += 65535ULL; else ;
  
#line 4014 
  if ((val & 32ULL) != 0ULL) 
#line 4015 
                             mp->rx_len_errors += 65535ULL; else ;
  
#line 4017 
  val = (u64)readq((void const volatile *)(np->mac_regs + 48U));
  
#line 4018 
  if ((val & 4ULL) != 0ULL) 
#line 4019 
                            mp->pause_off_state += 1ULL; else ;
  
#line 4020 
  if ((val & 2ULL) != 0ULL) 
#line 4021 
                            mp->pause_on_state += 1ULL; else ;
  
#line 4022 
  if ((val & 1ULL) != 0ULL) 
#line 4023 
                            mp->pause_received += 1ULL; else ;
  
#line 4024 
  return;
}


#line 4026  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_mac_interrupt(struct niu *np)
{
  int __retres;
  
#line 4028 
  if ((np->flags & 65536U) != 0U) 
#line 4029 
                                  niu_xmac_interrupt(np); else 
#line 4031 
                                                               niu_bmac_interrupt(np);
  
#line 4033 
  __retres = 0;
  
#line 4033 
  return __retres;
}


#line 4036  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_log_device_error(struct niu *np, u64 stat)
{
  
#line 4038 
  netdev_err((struct net_device const *)np->dev,"Core device errors ( ");
  
#line 4040 
  if ((stat & 1024ULL) != 0ULL) 
#line 4041 
                                printk(""); else ;
  
#line 4042 
  if ((stat & 512ULL) != 0ULL) 
#line 4043 
                               printk(""); else ;
  
#line 4044 
  if ((stat & 256ULL) != 0ULL) 
#line 4045 
                               printk(""); else ;
  
#line 4046 
  if ((stat & 128ULL) != 0ULL) 
#line 4047 
                               printk(""); else ;
  
#line 4048 
  if ((stat & 64ULL) != 0ULL) 
#line 4049 
                              printk(""); else ;
  
#line 4050 
  if ((stat & 32ULL) != 0ULL) 
#line 4051 
                              printk(""); else ;
  
#line 4052 
  if ((stat & 16ULL) != 0ULL) 
#line 4053 
                              printk(""); else ;
  
#line 4054 
  if ((stat & 8ULL) != 0ULL) 
#line 4055 
                             printk(""); else ;
  
#line 4056 
  if ((stat & 4ULL) != 0ULL) 
#line 4057 
                             printk(""); else ;
  
#line 4058 
  if ((stat & 2ULL) != 0ULL) 
#line 4059 
                             printk(""); else ;
  
#line 4060 
  if ((stat & 1ULL) != 0ULL) 
#line 4061 
                             printk(""); else ;
  
#line 4063 
  printk("");
  
#line 4064 
  return;
}


#line 4066  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_device_error(struct niu *np)
{
  int __retres;
  
#line 4068 
  u64 stat = readq((void const volatile *)(np->regs + 524440U));
  
#line 4070 
  netdev_err((struct net_device const *)np->dev,"Core device error, stat[%llx]\n",stat);
  
#line 4073 
  niu_log_device_error(np,stat);
  
#line 4075 
  __retres = -19;
  
#line 4075 
  return __retres;
}


#line 4078  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_slowpath_interrupt(struct niu *np, struct niu_ldg *lp, u64 v0, u64 v1, u64 v2)
{
  int i;
  
#line 4082 
  int err = 0;
  
#line 4084 
  lp->v0 = v0;
  
#line 4085 
  lp->v1 = v1;
  
#line 4086 
  lp->v2 = v2;
  
#line 4088 
  if ((v1 & 4294967295ULL) != 0ULL) {
    
#line 4089 
    u32 rx_vec = (unsigned int)v1;
    
#line 4091 
    i = 0;
    
#line 4091 
    goto ldv_53994;
    ldv_53993: 
#line 4092 
    ;
    {
      
#line 4092 
      struct rx_ring_info *rp = np->rx_rings + i;
      
#line 4094 
      if (((unsigned int)(1 << rp->rx_channel) & rx_vec) != 0U) {
        
#line 4095 
        int r = niu_rx_error(np,rp);
        
#line 4096 
        if (r != 0) 
#line 4097 
                    err = r;
        else 
          
#line 4099 
          if (v0 == 0ULL) 
#line 4100 
                          writeq(140737488355328UL,(void volatile *)(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL))); else ;
      }
      else ;
    }
    
#line 4091 
    i += 1;
    ldv_53994: 
#line 4092 
    ;
    
#line 4091 
    if (np->num_rx_rings > i) 
#line 4093 
                              goto ldv_53993; else 
#line 4096 
                                                   goto ldv_53995;
    ldv_53995: 
#line 4097 
    ;
  }
  else ;
  
#line 4106 
  if ((v1 & 9223372032559808512ULL) != 0ULL) {
    
#line 4107 
    u32 tx_vec = (unsigned int)(v1 >> 32) & 2147483647U;
    
#line 4109 
    i = 0;
    
#line 4109 
    goto ldv_54000;
    ldv_53999: 
#line 4110 
    ;
    {
      
#line 4110 
      struct tx_ring_info *rp_0 = np->tx_rings + i;
      
#line 4112 
      if (((unsigned int)(1 << (int)rp_0->tx_channel) & tx_vec) != 0U) {
        
#line 4113 
        int r_0 = niu_tx_error(np,rp_0);
        
#line 4114 
        if (r_0 != 0) 
#line 4115 
                      err = r_0; else ;
      }
      else ;
    }
    
#line 4109 
    i += 1;
    ldv_54000: 
#line 4110 
    ;
    
#line 4109 
    if (np->num_tx_rings > i) 
#line 4111 
                              goto ldv_53999; else 
#line 4114 
                                                   goto ldv_54001;
    ldv_54001: 
#line 4115 
    ;
  }
  else ;
  
#line 4119 
  if ((v0 | v1) < (unsigned long long)0) {
    
#line 4120 
    int r_1 = niu_mif_interrupt(np);
    
#line 4121 
    if (r_1 != 0) 
#line 4122 
                  err = r_1; else ;
  }
  else ;
  
#line 4124 
  if (v2 != 0ULL) {
    
#line 4125 
    if ((v2 & 495ULL) != 0ULL) {
      
#line 4126 
      int r_2 = niu_mac_interrupt(np);
      
#line 4127 
      if (r_2 != 0) 
#line 4128 
                    err = r_2; else ;
    }
    else ;
    
#line 4130 
    if ((v2 & 528ULL) != 0ULL) {
      
#line 4131 
      int r_3 = niu_device_error(np);
      
#line 4132 
      if (r_3 != 0) 
#line 4133 
                    err = r_3; else ;
    }
    else ;
  }
  else ;
  
#line 4137 
  if (err != 0) 
#line 4138 
                niu_enable_interrupts(np,0); else ;
  
#line 4140 
  return err;
}


#line 4143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_rxchan_intr(struct niu *np, struct rx_ring_info *rp, int ldn)
{
  u64 stat_write;
  
#line 4146 
  struct rxdma_mailbox *mbox = rp->mbox;
  
#line 4147 
  u64 stat = __le64_to_cpup((__le64 const *)(& mbox->rx_dma_ctl_stat));
  
#line 4149 
  stat_write = 105553116266496ULL;
  
#line 4151 
  writeq((unsigned long)stat_write,(void volatile *)(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL)));
  
#line 4153 
  if ((np->msg_enable & 512U) != 0U) 
#line 4153 
                                     netdev_printk("\001",(struct net_device const *)np->dev,"%s() stat[%llx]\n","niu_rxchan_intr",stat); else ;
  
#line 4154 
  return;
}


#line 4157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_txchan_intr(struct niu *np, struct tx_ring_info *rp, int ldn)
{
  
#line 4160 
  rp->tx_cs = (u64)readq((void const volatile *)(np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553640UL)));
  
#line 4162 
  if ((np->msg_enable & 512U) != 0U) 
#line 4162 
                                     netdev_printk("\001",(struct net_device const *)np->dev,"%s() cs[%llx]\n","niu_txchan_intr",rp->tx_cs); else ;
  
#line 4163 
  return;
}


#line 4166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void __niu_fastpath_interrupt(struct niu *np, int ldg, u64 v0)
{
  u32 rx_vec;
  u32 tx_vec;
  int i;
  
#line 4168 
  struct niu_parent *parent = np->parent;
  
#line 4172 
  tx_vec = (unsigned int)(v0 >> 32);
  
#line 4173 
  rx_vec = (unsigned int)v0;
  
#line 4175 
  i = 0;
  
#line 4175 
  goto ldv_54033;
  ldv_54032: 
#line 4176 
  ;
  {
    
#line 4176 
    struct rx_ring_info *rp = np->rx_rings + i;
    
#line 4177 
    int ldn = rp->rx_channel;
    
#line 4179 
    if ((int)parent->ldg_map[ldn] != ldg) 
#line 4180 
                                          goto ldv_54031; else ;
    
#line 4182 
    writeq(3UL,(void volatile *)(np->regs + ((unsigned long)ldn + 1280UL) * 8192UL));
    
#line 4183 
    if (((unsigned int)(1 << rp->rx_channel) & rx_vec) != 0U) 
#line 4184 
                                                              niu_rxchan_intr(np,rp,ldn); else ;
  }
  ldv_54031: 
#line 4186 
  ;
  
#line 4175 
  i += 1;
  ldv_54033: 
#line 4176 
  ;
  
#line 4175 
  if (np->num_rx_rings > i) 
#line 4177 
                            goto ldv_54032; else 
#line 4180 
                                                 goto ldv_54034;
  ldv_54034: 
#line 4181 
  ;
  
#line 4187 
  i = 0;
  
#line 4187 
  goto ldv_54039;
  ldv_54038: 
#line 4188 
  ;
  {
    
#line 4188 
    struct tx_ring_info *rp_0 = np->tx_rings + i;
    
#line 4189 
    int ldn_0 = (int)rp_0->tx_channel + 32;
    
#line 4191 
    if ((int)parent->ldg_map[ldn_0] != ldg) 
#line 4192 
                                            goto ldv_54037; else ;
    
#line 4194 
    writeq(3UL,(void volatile *)(np->regs + ((unsigned long)ldn_0 + 1280UL) * 8192UL));
    
#line 4195 
    if (((unsigned int)(1 << (int)rp_0->tx_channel) & tx_vec) != 0U) 
      
#line 4196 
      niu_txchan_intr(np,rp_0,ldn_0); else ;
  }
  ldv_54037: 
#line 4198 
  ;
  
#line 4187 
  i += 1;
  ldv_54039: 
#line 4188 
  ;
  
#line 4187 
  if (np->num_tx_rings > i) 
#line 4189 
                            goto ldv_54038; else 
#line 4192 
                                                 goto ldv_54040;
  ldv_54040: 
#line 4193 
  ;
  
#line 4194 
  return;
}


#line 4200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_schedule_napi(struct niu *np, struct niu_ldg *lp, u64 v0, u64 v1, u64 v2)
{
  bool tmp;
  
#line 4203 
  tmp = napi_schedule_prep(& lp->napi);
  
#line 4203 
  if ((long)((int)tmp != 0) != 0L) {
    
#line 4204 
    lp->v0 = v0;
    
#line 4205 
    lp->v1 = v1;
    
#line 4206 
    lp->v2 = v2;
    
#line 4207 
    __niu_fastpath_interrupt(np,(int)lp->ldg_num,v0);
    
#line 4208 
    __napi_schedule(& lp->napi);
  }
  else ;
  
#line 4210 
  return;
}


#line 4212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static irqreturn_t niu_interrupt(int irq, void *dev_id)
{
  irqreturn_t __retres;
  unsigned long flags;
  u64 v0;
  u64 v1;
  u64 v2;
  
#line 4214 
  struct niu_ldg *lp = (struct niu_ldg *)dev_id;
  
#line 4215 
  struct niu *np = lp->np;
  
#line 4216 
  int ldg = (int)lp->ldg_num;
  
#line 4220 
  if ((np->msg_enable & 512U) != 0U) 
#line 4221 
                                     printk("\001","niu_interrupt",lp,ldg); else ;
  
#line 4224 
  ldv___ldv_spin_lock_91(& np->lock);
  
#line 4226 
  v0 = (u64)readq((void const volatile *)(np->regs + ((unsigned long)ldg + 1024UL) * 8192UL));
  
#line 4227 
  v1 = (u64)readq((void const volatile *)(np->regs + ((unsigned long)ldg * 8192UL + 8388616UL)));
  
#line 4228 
  v2 = (u64)readq((void const volatile *)(np->regs + ((unsigned long)ldg * 8192UL + 8388624UL)));
  
#line 4230 
  if ((np->msg_enable & 512U) != 0U) 
#line 4231 
                                     printk("",v0,v1,v2); else ;
  
#line 4236 
  if ((long)((v0 == 0ULL && v1 == 0ULL) != 0) != 0L && (long)(v2 == 0ULL) != 0L) {
    
#line 4237 
    ldv_spin_unlock_irqrestore_92(& np->lock,flags);
    
#line 4238 
    __retres = IRQ_NONE;
    
#line 4238 
    goto return_label;
  }
  else ;
  
#line 4241 
  if ((long)((v0 < (u64)0 || v1 != 0ULL) != 0) != 0L || (long)(v2 != 0ULL) != 0L) {
    
#line 4242 
    int err = niu_slowpath_interrupt(np,lp,v0,v1,v2);
    
#line 4243 
    if (err != 0) 
#line 4244 
                  goto out; else ;
  }
  else ;
  
#line 4246 
  if ((long)((v0 & 9223372036854775807ULL) != 0ULL) != 0L) 
#line 4247 
                                                           niu_schedule_napi(np,lp,v0,v1,v2); else 
                                                                    
#line 4249 
                                                                    niu_ldg_rearm(np,lp,1);
  out: 
#line 4250 
  ;
  
#line 4251 
  ldv_spin_unlock_irqrestore_93(& np->lock,flags);
  
#line 4253 
  __retres = IRQ_HANDLED;
  return_label: 
#line 4253 
                return __retres;
}


#line 4256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_free_rx_ring_info(struct niu *np, struct rx_ring_info *rp)
{
  
#line 4258 
  if (rp->mbox != (struct rxdma_mailbox *)0) {
    
#line 4259 
    (*((np->ops)->free_coherent))(np->device,64UL,(void *)rp->mbox,rp->mbox_dma);
    
#line 4262 
    rp->mbox = (struct rxdma_mailbox *)0;
  }
  else ;
  
#line 4264 
  if (rp->rcr != (__le64 *)0ULL) {
    
#line 4265 
    (*((np->ops)->free_coherent))(np->device,2048UL,(void *)rp->rcr,rp->rcr_dma);
    
#line 4268 
    rp->rcr = (__le64 *)0ULL;
    
#line 4269 
    rp->rcr_table_size = 0U;
    
#line 4270 
    rp->rcr_index = 0U;
  }
  else ;
  
#line 4272 
  if (rp->rbr != (__le32 *)0U) {
    
#line 4273 
    niu_rbr_free(np,rp);
    
#line 4275 
    (*((np->ops)->free_coherent))(np->device,512UL,(void *)rp->rbr,rp->rbr_dma);
    
#line 4278 
    rp->rbr = (__le32 *)0U;
    
#line 4279 
    rp->rbr_table_size = 0U;
    
#line 4280 
    rp->rbr_index = 0U;
  }
  else ;
  
#line 4282 
  kfree((void const *)rp->rxhash);
  
#line 4283 
  rp->rxhash = (struct page **)0;
  
#line 4284 
  return;
}


#line 4286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_free_tx_ring_info(struct niu *np, struct tx_ring_info *rp)
{
  
#line 4288 
  if (rp->mbox != (struct txdma_mailbox *)0) {
    
#line 4289 
    (*((np->ops)->free_coherent))(np->device,64UL,(void *)rp->mbox,rp->mbox_dma);
    
#line 4292 
    rp->mbox = (struct txdma_mailbox *)0;
  }
  else ;
  
#line 4294 
  if (rp->descr != (__le64 *)0ULL) {
    int i;
    
#line 4297 
    i = 0;
    
#line 4297 
    goto ldv_54072;
    ldv_54071: 
#line 4298 
    ;
    
#line 4298 
    if (rp->tx_buffs[i].skb != (struct sk_buff *)0) 
#line 4299 
                                                    release_tx_packet(np,rp,i); else ;
    
#line 4297 
    i += 1;
    ldv_54072: 
#line 4298 
    ;
    
#line 4297 
    if (i <= 255) 
#line 4299 
                  goto ldv_54071; else 
#line 4302 
                                       goto ldv_54073;
    ldv_54073: 
#line 4303 
    ;
    
#line 4302 
    (*((np->ops)->free_coherent))(np->device,2048UL,(void *)rp->descr,rp->descr_dma);
    
#line 4305 
    rp->descr = (__le64 *)0ULL;
    
#line 4306 
    rp->pending = 0;
    
#line 4307 
    rp->prod = 0;
    
#line 4308 
    rp->cons = 0;
    
#line 4309 
    rp->wrap_bit = 0;
  }
  else ;
  
#line 4311 
  return;
}


#line 4313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_free_channels(struct niu *np)
{
  int i;
  
#line 4317 
  if (np->rx_rings != (struct rx_ring_info *)0) {
    
#line 4318 
    i = 0;
    
#line 4318 
    goto ldv_54080;
    ldv_54079: 
#line 4319 
    ;
    {
      
#line 4319 
      struct rx_ring_info *rp = np->rx_rings + i;
      
#line 4321 
      niu_free_rx_ring_info(np,rp);
    }
    
#line 4318 
    i += 1;
    ldv_54080: 
#line 4319 
    ;
    
#line 4318 
    if (np->num_rx_rings > i) 
#line 4320 
                              goto ldv_54079; else 
#line 4323 
                                                   goto ldv_54081;
    ldv_54081: 
#line 4324 
    ;
    
#line 4323 
    kfree((void const *)np->rx_rings);
    
#line 4324 
    np->rx_rings = (struct rx_ring_info *)0;
    
#line 4325 
    np->num_rx_rings = 0;
  }
  else ;
  
#line 4328 
  if (np->tx_rings != (struct tx_ring_info *)0) {
    
#line 4329 
    i = 0;
    
#line 4329 
    goto ldv_54084;
    ldv_54083: 
#line 4330 
    ;
    {
      
#line 4330 
      struct tx_ring_info *rp_0 = np->tx_rings + i;
      
#line 4332 
      niu_free_tx_ring_info(np,rp_0);
    }
    
#line 4329 
    i += 1;
    ldv_54084: 
#line 4330 
    ;
    
#line 4329 
    if (np->num_tx_rings > i) 
#line 4331 
                              goto ldv_54083; else 
#line 4334 
                                                   goto ldv_54085;
    ldv_54085: 
#line 4335 
    ;
    
#line 4334 
    kfree((void const *)np->tx_rings);
    
#line 4335 
    np->tx_rings = (struct tx_ring_info *)0;
    
#line 4336 
    np->num_tx_rings = 0;
  }
  else ;
  
#line 4338 
  return;
}


#line 4343 
void __compiletime_assert_4343(void);


#line 4340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_alloc_rx_ring_info(struct niu *np, struct rx_ring_info *rp)
{
  int __retres;
  {
    
#line 4343 
    bool __cond = (_Bool)0;
    
#line 4343 
    if ((int)__cond != 0) 
#line 4343 
                          __compiletime_assert_4343(); else ;
  }
  
#line 4345 
  rp->rxhash = (struct page **)kcalloc(128UL,8UL,208U);
  
#line 4347 
  if (rp->rxhash == (struct page **)0) {
    
#line 4348 
    __retres = -12;
    
#line 4348 
    goto return_label;
  }
  else ;
  
#line 4350 
  rp->mbox = (struct rxdma_mailbox *)(*((np->ops)->alloc_coherent))(np->device,64UL,& rp->mbox_dma,208U);
  
#line 4353 
  if (rp->mbox == (struct rxdma_mailbox *)0) {
    
#line 4354 
    __retres = -12;
    
#line 4354 
    goto return_label;
  }
  else ;
  
#line 4355 
  if (((unsigned long)rp->mbox & 63UL) != 0UL) {
    
#line 4356 
    netdev_err((struct net_device const *)np->dev,"Coherent alloc gives misaligned RXDMA mailbox %p\n",rp->mbox);
    
#line 4358 
    __retres = -22;
    
#line 4358 
    goto return_label;
  }
  else ;
  
#line 4361 
  rp->rcr = (__le64 *)(*((np->ops)->alloc_coherent))(np->device,2048UL,& rp->rcr_dma,208U);
  
#line 4364 
  if (rp->rcr == (__le64 *)0ULL) {
    
#line 4365 
    __retres = -12;
    
#line 4365 
    goto return_label;
  }
  else ;
  
#line 4366 
  if (((unsigned long)rp->rcr & 63UL) != 0UL) {
    
#line 4367 
    netdev_err((struct net_device const *)np->dev,"Coherent alloc gives misaligned RXDMA RCR table %p\n",rp->rcr);
    
#line 4369 
    __retres = -22;
    
#line 4369 
    goto return_label;
  }
  else ;
  
#line 4371 
  rp->rcr_table_size = 256U;
  
#line 4372 
  rp->rcr_index = 0U;
  
#line 4374 
  rp->rbr = (__le32 *)(*((np->ops)->alloc_coherent))(np->device,512UL,& rp->rbr_dma,208U);
  
#line 4377 
  if (rp->rbr == (__le32 *)0U) {
    
#line 4378 
    __retres = -12;
    
#line 4378 
    goto return_label;
  }
  else ;
  
#line 4379 
  if (((unsigned long)rp->rbr & 63UL) != 0UL) {
    
#line 4380 
    netdev_err((struct net_device const *)np->dev,"Coherent alloc gives misaligned RXDMA RBR table %p\n",rp->rbr);
    
#line 4382 
    __retres = -22;
    
#line 4382 
    goto return_label;
  }
  else ;
  
#line 4384 
  rp->rbr_table_size = 128U;
  
#line 4385 
  rp->rbr_index = 0U;
  
#line 4386 
  rp->rbr_pending = 0U;
  
#line 4388 
  __retres = 0;
  return_label: 
#line 4388 
                return __retres;
}


#line 4391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_set_max_burst(struct niu *np, struct tx_ring_info *rp)
{
  
#line 4393 
  int mtu = (int)(np->dev)->mtu;
  
#line 4398 
  rp->max_burst = mtu + 32;
  
#line 4399 
  if (rp->max_burst > 4096) 
#line 4400 
                            rp->max_burst = 4096; else ;
  
#line 4401 
  return;
}


#line 4406 
void __compiletime_assert_4406(void);


#line 4403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_alloc_tx_ring_info(struct niu *np, struct tx_ring_info *rp)
{
  int __retres;
  {
    
#line 4406 
    bool __cond = (_Bool)0;
    
#line 4406 
    if ((int)__cond != 0) 
#line 4406 
                          __compiletime_assert_4406(); else ;
  }
  
#line 4408 
  rp->mbox = (struct txdma_mailbox *)(*((np->ops)->alloc_coherent))(np->device,64UL,& rp->mbox_dma,208U);
  
#line 4411 
  if (rp->mbox == (struct txdma_mailbox *)0) {
    
#line 4412 
    __retres = -12;
    
#line 4412 
    goto return_label;
  }
  else ;
  
#line 4413 
  if (((unsigned long)rp->mbox & 63UL) != 0UL) {
    
#line 4414 
    netdev_err((struct net_device const *)np->dev,"Coherent alloc gives misaligned TXDMA mailbox %p\n",rp->mbox);
    
#line 4416 
    __retres = -22;
    
#line 4416 
    goto return_label;
  }
  else ;
  
#line 4419 
  rp->descr = (__le64 *)(*((np->ops)->alloc_coherent))(np->device,2048UL,& rp->descr_dma,208U);
  
#line 4422 
  if (rp->descr == (__le64 *)0ULL) {
    
#line 4423 
    __retres = -12;
    
#line 4423 
    goto return_label;
  }
  else ;
  
#line 4424 
  if (((unsigned long)rp->descr & 63UL) != 0UL) {
    
#line 4425 
    netdev_err((struct net_device const *)np->dev,"Coherent alloc gives misaligned TXDMA descr table %p\n",rp->descr);
    
#line 4427 
    __retres = -22;
    
#line 4427 
    goto return_label;
  }
  else ;
  
#line 4430 
  rp->pending = 256;
  
#line 4431 
  rp->prod = 0;
  
#line 4432 
  rp->cons = 0;
  
#line 4433 
  rp->wrap_bit = 0;
  
#line 4436 
  rp->mark_freq = (unsigned short)(rp->pending / 4);
  
#line 4438 
  niu_set_max_burst(np,rp);
  
#line 4440 
  __retres = 0;
  return_label: 
#line 4440 
                return __retres;
}


#line 4443  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_size_rbr(struct niu *np, struct rx_ring_info *rp)
{
  u16 bss;
  int tmp_0;
  {
    int tmp;
    
#line 4447 
    int _min1 = 12;
    
#line 4447 
    int _min2 = 15;
    
#line 4447 
    if (_min1 < _min2) 
#line 4447 
                       tmp = _min1; else 
#line 4447 
                                         tmp = _min2;
    
#line 4447 
    tmp_0 = tmp;
  }
  
#line 4447 
  bss = (unsigned short)tmp_0;
  
#line 4449 
  rp->rbr_block_size = (unsigned short)(1 << (int)bss);
  
#line 4450 
  rp->rbr_blocks_per_page = (unsigned short)(1 << (12 - (int)bss));
  
#line 4452 
  rp->rbr_sizes[0] = (unsigned short)256U;
  
#line 4453 
  rp->rbr_sizes[1] = (unsigned short)1024U;
  
#line 4454 
  if ((np->dev)->mtu > 1500U) {
    
#line 4455 
    switch (4096UL) {
      case (unsigned long)4096: 
#line 4456 
      ;
      
#line 4457 
      rp->rbr_sizes[2] = (unsigned short)4096U;
      
#line 4458 
      goto ldv_54116;
      default: 
#line 4460 
      ;
      
#line 4461 
      rp->rbr_sizes[2] = (unsigned short)8192U;
      
#line 4462 
      goto ldv_54116;
    }
    ldv_54116: 
#line 4464 
    ;
  }
  else 
#line 4465 
       rp->rbr_sizes[2] = (unsigned short)2048U;
  
#line 4467 
  rp->rbr_sizes[3] = rp->rbr_block_size;
  
#line 4468 
  return;
}


#line 4470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_alloc_channels(struct niu *np)
{
  int __retres;
  int first_rx_channel;
  int first_tx_channel;
  int num_rx_rings;
  int num_tx_rings;
  struct rx_ring_info *rx_rings;
  struct tx_ring_info *tx_rings;
  int i;
  int port;
  int err;
  
#line 4472 
  struct niu_parent *parent = np->parent;
  
#line 4479 
  port = (int)np->port;
  
#line 4480 
  first_tx_channel = 0;
  
#line 4480 
  first_rx_channel = first_tx_channel;
  
#line 4481 
  i = 0;
  
#line 4481 
  goto ldv_54132;
  ldv_54131: 
#line 4482 
  ;
  
#line 4482 
  first_rx_channel = (int)parent->rxchan_per_port[i] + first_rx_channel;
  
#line 4483 
  first_tx_channel = (int)parent->txchan_per_port[i] + first_tx_channel;
  
#line 4481 
  i += 1;
  ldv_54132: 
#line 4482 
  ;
  
#line 4481 
  if (i < port) 
#line 4483 
                goto ldv_54131; else 
#line 4486 
                                     goto ldv_54133;
  ldv_54133: 
#line 4487 
  ;
  
#line 4486 
  num_rx_rings = (int)parent->rxchan_per_port[port];
  
#line 4487 
  num_tx_rings = (int)parent->txchan_per_port[port];
  
#line 4489 
  rx_rings = (struct rx_ring_info *)kcalloc((unsigned long)num_rx_rings,168UL,208U);
  
#line 4491 
  err = -12;
  
#line 4492 
  if (rx_rings == (struct rx_ring_info *)0) 
#line 4493 
                                            goto out_err; else ;
  
#line 4495 
  np->num_rx_rings = num_rx_rings;
  
#line 4496 
  ldv_inline_asm();
  
#line 4497 
  np->rx_rings = rx_rings;
  
#line 4499 
  netif_set_real_num_rx_queues(np->dev,(unsigned int)num_rx_rings);
  
#line 4501 
  i = 0;
  
#line 4501 
  goto ldv_54137;
  ldv_54136: 
#line 4502 
  ;
  {
    
#line 4502 
    struct rx_ring_info *rp = np->rx_rings + i;
    
#line 4504 
    rp->np = np;
    
#line 4505 
    rp->rx_channel = first_rx_channel + i;
    
#line 4507 
    err = niu_alloc_rx_ring_info(np,rp);
    
#line 4508 
    if (err != 0) 
#line 4509 
                  goto out_err; else ;
    
#line 4511 
    niu_size_rbr(np,rp);
    
#line 4514 
    rp->nonsyn_window = 64;
    
#line 4515 
    rp->nonsyn_threshold = (int)(rp->rcr_table_size + 4294967232U);
    
#line 4516 
    rp->syn_window = 64;
    
#line 4517 
    rp->syn_threshold = (int)(rp->rcr_table_size + 4294967232U);
    
#line 4518 
    rp->rcr_pkt_threshold = 16;
    
#line 4519 
    rp->rcr_timeout = 8;
    
#line 4520 
    rp->rbr_kick_thresh = 16U;
    
#line 4521 
    if (rp->rbr_kick_thresh < (unsigned int)rp->rbr_blocks_per_page) 
      
#line 4522 
      rp->rbr_kick_thresh = (unsigned int)rp->rbr_blocks_per_page; else ;
    
#line 4524 
    err = niu_rbr_fill(np,rp,208U);
    
#line 4525 
    if (err != 0) {
      
#line 4526 
      __retres = err;
      
#line 4526 
      goto return_label;
    }
    else ;
  }
  
#line 4501 
  i += 1;
  ldv_54137: 
#line 4502 
  ;
  
#line 4501 
  if (np->num_rx_rings > i) 
#line 4503 
                            goto ldv_54136; else 
#line 4506 
                                                 goto ldv_54138;
  ldv_54138: 
#line 4507 
  ;
  
#line 4529 
  tx_rings = (struct tx_ring_info *)kcalloc((unsigned long)num_tx_rings,4208UL,208U);
  
#line 4531 
  err = -12;
  
#line 4532 
  if (tx_rings == (struct tx_ring_info *)0) 
#line 4533 
                                            goto out_err; else ;
  
#line 4535 
  np->num_tx_rings = num_tx_rings;
  
#line 4536 
  ldv_inline_asm();
  
#line 4537 
  np->tx_rings = tx_rings;
  
#line 4539 
  netif_set_real_num_tx_queues(np->dev,(unsigned int)num_tx_rings);
  
#line 4541 
  i = 0;
  
#line 4541 
  goto ldv_54141;
  ldv_54140: 
#line 4542 
  ;
  {
    
#line 4542 
    struct tx_ring_info *rp_0 = np->tx_rings + i;
    
#line 4544 
    rp_0->np = np;
    
#line 4545 
    rp_0->tx_channel = (unsigned short)((int)((unsigned short)first_tx_channel) + (int)((unsigned short)i));
    
#line 4547 
    err = niu_alloc_tx_ring_info(np,rp_0);
    
#line 4548 
    if (err != 0) 
#line 4549 
                  goto out_err; else ;
  }
  
#line 4541 
  i += 1;
  ldv_54141: 
#line 4542 
  ;
  
#line 4541 
  if (np->num_tx_rings > i) 
#line 4543 
                            goto ldv_54140; else 
#line 4546 
                                                 goto ldv_54142;
  ldv_54142: 
#line 4547 
  ;
  
#line 4552 
  __retres = 0;
  
#line 4552 
  goto return_label;
  out_err: 
#line 4554 
  ;
  
#line 4555 
  niu_free_channels(np);
  
#line 4556 
  __retres = err;
  return_label: 
#line 4556 
                return __retres;
}


#line 4559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_tx_cs_sng_poll(struct niu *np, int channel)
{
  int __retres;
  
#line 4561 
  int limit = 1000;
  
#line 4563 
  goto ldv_54150;
  ldv_54149: 
#line 4564 
  ;
  {
    
#line 4564 
    u64 val = readq((void const volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553640UL)));
    
#line 4565 
    if ((val & 134217728ULL) != 0ULL) {
      
#line 4566 
      __retres = 0;
      
#line 4566 
      goto return_label;
    }
    else ;
  }
  ldv_54150: 
#line 4568 
  ;
  
#line 4563 
  limit -= 1;
  
#line 4563 
  if (limit > 0) 
#line 4565 
                 goto ldv_54149; else 
#line 4568 
                                      goto ldv_54151;
  ldv_54151: 
#line 4569 
  ;
  
#line 4568 
  __retres = -19;
  return_label: 
#line 4568 
                return __retres;
}


#line 4571  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_tx_channel_stop(struct niu *np, int channel)
{
  int tmp_0;
  
#line 4573 
  u64 val = readq((void const volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553640UL)));
  
#line 4575 
  val |= 268435456ULL;
  
#line 4576 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553640UL)));
  
#line 4578 
  tmp_0 = niu_tx_cs_sng_poll(np,channel);
  
#line 4578 
  return tmp_0;
}


#line 4581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_tx_cs_reset_poll(struct niu *np, int channel)
{
  int __retres;
  
#line 4583 
  int limit = 1000;
  
#line 4585 
  goto ldv_54164;
  ldv_54163: 
#line 4586 
  ;
  {
    
#line 4586 
    u64 val = readq((void const volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553640UL)));
    
#line 4587 
    if ((val & 2147483648ULL) == 0ULL) {
      
#line 4588 
      __retres = 0;
      
#line 4588 
      goto return_label;
    }
    else ;
  }
  ldv_54164: 
#line 4590 
  ;
  
#line 4585 
  limit -= 1;
  
#line 4585 
  if (limit > 0) 
#line 4587 
                 goto ldv_54163; else 
#line 4590 
                                      goto ldv_54165;
  ldv_54165: 
#line 4591 
  ;
  
#line 4590 
  __retres = -19;
  return_label: 
#line 4590 
                return __retres;
}


#line 4593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_tx_channel_reset(struct niu *np, int channel)
{
  int err;
  
#line 4595 
  u64 val = readq((void const volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553640UL)));
  
#line 4598 
  val |= 2147483648ULL;
  
#line 4599 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553640UL)));
  
#line 4601 
  err = niu_tx_cs_reset_poll(np,channel);
  
#line 4602 
  if (err == 0) 
#line 4603 
                writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553624UL))); else ;
  
#line 4605 
  return err;
}


#line 4608  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_tx_channel_lpage_init(struct niu *np, int channel)
{
  int __retres;
  u64 val;
  
#line 4612 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 7077896UL)));
  
#line 4613 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 7077904UL)));
  
#line 4614 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 7077912UL)));
  
#line 4615 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 7077920UL)));
  
#line 4616 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 7077928UL)));
  
#line 4617 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 7077936UL)));
  
#line 4618 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 7077944UL)));
  
#line 4620 
  val = (unsigned long long)np->port << 2;
  
#line 4621 
  val |= 3ULL;
  
#line 4622 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)channel + 13824UL) * 512UL));
  
#line 4626 
  __retres = 0;
  
#line 4626 
  return __retres;
}


#line 4629  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_txc_enable_port(struct niu *np, int on)
{
  unsigned long flags;
  u64 val;
  u64 mask;
  
#line 4634 
  ldv___ldv_spin_lock_94(& (np->parent)->lock);
  
#line 4635 
  val = (u64)readq((void const volatile *)(np->regs + 7995392U));
  
#line 4636 
  mask = 1ULL << (int)np->port;
  
#line 4637 
  if (on != 0) 
#line 4638 
               val = (mask | val) | 16ULL;
  else {
    
#line 4640 
    val = ~ mask & val;
    
#line 4641 
    if ((val & 18446744073709551599ULL) == 0ULL) 
#line 4642 
                                                 val &= 18446744073709551599ULL; else ;
  }
  
#line 4644 
  writeq((unsigned long)val,(void volatile *)(np->regs + 7995392U));
  
#line 4645 
  ldv_spin_unlock_irqrestore_95(& (np->parent)->lock,flags);
  
#line 4646 
  return;
}


#line 4648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_txc_set_imask(struct niu *np, u64 imask)
{
  unsigned long flags;
  u64 val;
  
#line 4653 
  ldv___ldv_spin_lock_96(& (np->parent)->lock);
  
#line 4654 
  val = (u64)readq((void const volatile *)(np->regs + 7996464U));
  
#line 4655 
  val = (unsigned long long)(~ (63 << (int)np->port * 8)) & val;
  
#line 4656 
  val = (imask << (int)np->port * 8) | val;
  
#line 4657 
  ldv_spin_unlock_irqrestore_97(& (np->parent)->lock,flags);
  
#line 4658 
  return;
}


#line 4660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_txc_port_dma_enable(struct niu *np, int on)
{
  
#line 4662 
  u64 val = 0ULL;
  
#line 4664 
  if (on != 0) {
    int i;
    
#line 4667 
    i = 0;
    
#line 4667 
    goto ldv_54197;
    ldv_54196: 
#line 4668 
    ;
    
#line 4668 
    val = (unsigned long long)(1 << (int)(np->tx_rings + i)->tx_channel) | val;
    
#line 4667 
    i += 1;
    ldv_54197: 
#line 4668 
    ;
    
#line 4667 
    if (np->num_tx_rings > i) 
#line 4669 
                              goto ldv_54196; else 
#line 4672 
                                                   goto ldv_54198;
    ldv_54198: 
#line 4673 
    ;
  }
  else ;
  
#line 4670 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)np->port * 256UL + 7995432UL)));
  
#line 4671 
  return;
}


#line 4673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_one_tx_channel(struct niu *np, struct tx_ring_info *rp)
{
  int __retres;
  int err;
  u64 val;
  u64 ring_len;
  
#line 4675 
  int channel = (int)rp->tx_channel;
  
#line 4678 
  err = niu_tx_channel_stop(np,channel);
  
#line 4679 
  if (err != 0) {
    
#line 4680 
    __retres = err;
    
#line 4680 
    goto return_label;
  }
  else ;
  
#line 4682 
  err = niu_tx_channel_reset(np,channel);
  
#line 4683 
  if (err != 0) {
    
#line 4684 
    __retres = err;
    
#line 4684 
    goto return_label;
  }
  else ;
  
#line 4686 
  err = niu_tx_channel_lpage_init(np,channel);
  
#line 4687 
  if (err != 0) {
    
#line 4688 
    __retres = err;
    
#line 4688 
    goto return_label;
  }
  else ;
  
#line 4690 
  writeq((unsigned long)rp->max_burst,(void volatile *)(np->regs + ((unsigned long)channel + 1920UL) * 4096UL));
  
#line 4691 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553632UL)));
  
#line 4693 
  if ((rp->descr_dma & 18446726481523507263ULL) != 0ULL) {
    
#line 4695 
    netdev_err((struct net_device const *)np->dev,"TX ring channel %d DMA addr (%llx) is not aligned\n",channel,rp->descr_dma);
    
#line 4697 
    __retres = -22;
    
#line 4697 
    goto return_label;
  }
  else ;
  
#line 4705 
  ring_len = (unsigned long long)(rp->pending / 8);
  
#line 4707 
  val = (ring_len << 48) | rp->descr_dma;
  
#line 4709 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)channel + 12800UL) * 512UL));
  
#line 4711 
  if (((rp->mbox_dma >> 32) & 18446744073709547520ULL) != 0ULL || ((unsigned long long)((unsigned int)rp->mbox_dma) & 18446744069414584383ULL) != 0ULL) {
    
#line 4713 
    netdev_err((struct net_device const *)np->dev,"TX ring channel %d MBOX addr (%llx) has invalid bits\n",channel,rp->mbox_dma);
    
#line 4715 
    __retres = -22;
    
#line 4715 
    goto return_label;
  }
  else ;
  
#line 4717 
  writeq((unsigned long)(rp->mbox_dma >> 32),(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553648UL)));
  
#line 4718 
  writeq((unsigned long)rp->mbox_dma & 4294967232UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553656UL)));
  
#line 4720 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6553640UL)));
  
#line 4722 
  rp->last_pkt_cnt = (unsigned short)0U;
  
#line 4724 
  __retres = 0;
  return_label: 
#line 4724 
                return __retres;
}


#line 4727  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_rdc_groups(struct niu *np)
{
  int i;
  
#line 4729 
  struct niu_rdc_tables *tp = & (np->parent)->rdc_group_cfg[(int)np->port];
  
#line 4730 
  int first_table_num = tp->first_table_num;
  
#line 4732 
  i = 0;
  
#line 4732 
  goto ldv_54220;
  ldv_54219: 
#line 4733 
  ;
  {
    int slot;
    
#line 4733 
    struct rdc_table *tbl = & tp->tables[i];
    
#line 4734 
    int this_table = first_table_num + i;
    
#line 4737 
    slot = 0;
    
#line 4737 
    goto ldv_54217;
    ldv_54216: 
#line 4738 
    ;
    
#line 4738 
    writeq((unsigned long)tbl->rxdma_channel[slot],(void volatile *)(np->regs + (((unsigned long)this_table + 45568UL) * 16UL + (unsigned long)slot) * 8UL));
    
#line 4737 
    slot += 1;
    ldv_54217: 
#line 4738 
    ;
    
#line 4737 
    if (slot <= 15) 
#line 4739 
                    goto ldv_54216; else 
#line 4742 
                                         goto ldv_54218;
    ldv_54218: 
#line 4743 
    ;
  }
  
#line 4732 
  i += 1;
  ldv_54220: 
#line 4733 
  ;
  
#line 4732 
  if (tp->num_tables > i) 
#line 4734 
                          goto ldv_54219; else 
#line 4737 
                                               goto ldv_54221;
  ldv_54221: 
#line 4738 
  ;
  
#line 4742 
  writeq((unsigned long)(np->parent)->rdc_default[(int)np->port],(void volatile *)(np->regs + ((unsigned long)np->port + 851969UL) * 8UL));
  
#line 4743 
  return;
}


#line 4745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_drr_weight(struct niu *np)
{
  u32 tmp;
  u64 val;
  
#line 4747 
  tmp = phy_decode((np->parent)->port_phy,(int)np->port);
  
#line 4747 
  int type = (int)tmp;
  
#line 4750 
  switch (type) {
    case 1: 
#line 4751 
    ;
    
#line 4752 
    val = 1024ULL;
    
#line 4753 
    goto ldv_54228;
    case 2: 
#line 4755 
    ;
    default: 
#line 4756 
    ;
    
#line 4757 
    val = 102ULL;
    
#line 4758 
    goto ldv_54228;
  }
  ldv_54228: 
#line 4760 
  ;
  
#line 4760 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)np->port + 851973UL) * 8UL));
  
#line 4761 
  return;
}


#line 4763  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_hostinfo(struct niu *np)
{
  int __retres;
  int i;
  int err;
  
#line 4765 
  struct niu_parent *parent = np->parent;
  
#line 4766 
  struct niu_rdc_tables *tp = & parent->rdc_group_cfg[(int)np->port];
  
#line 4767 
  int num_alt = niu_num_alt_addr(np);
  
#line 4768 
  int first_rdc_table = tp->first_table_num;
  
#line 4770 
  err = niu_set_primary_mac_rdc_table(np,first_rdc_table,1);
  
#line 4771 
  if (err != 0) {
    
#line 4772 
    __retres = err;
    
#line 4772 
    goto return_label;
  }
  else ;
  
#line 4774 
  err = niu_set_multicast_mac_rdc_table(np,first_rdc_table,1);
  
#line 4775 
  if (err != 0) {
    
#line 4776 
    __retres = err;
    
#line 4776 
    goto return_label;
  }
  else ;
  
#line 4778 
  i = 0;
  
#line 4778 
  goto ldv_54241;
  ldv_54240: 
#line 4779 
  ;
  
#line 4779 
  err = niu_set_alt_mac_rdc_table(np,i,first_rdc_table,1);
  
#line 4780 
  if (err != 0) {
    
#line 4781 
    __retres = err;
    
#line 4781 
    goto return_label;
  }
  else ;
  
#line 4778 
  i += 1;
  ldv_54241: 
#line 4779 
  ;
  
#line 4778 
  if (i < num_alt) 
#line 4780 
                   goto ldv_54240; else 
#line 4783 
                                        goto ldv_54242;
  ldv_54242: 
#line 4784 
  ;
  
#line 4784 
  __retres = 0;
  return_label: 
#line 4784 
                return __retres;
}


#line 4789 
void __compiletime_assert_4791(void);


#line 4787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_rx_channel_reset(struct niu *np, int channel)
{
  int tmp_0;
  {
    
#line 4789 
    bool __cond = (_Bool)0;
    
#line 4789 
    if ((int)__cond != 0) 
#line 4789 
                          __compiletime_assert_4791(); else ;
  }
  
#line 4789 
  tmp_0 = __niu_set_and_wait_clear(np,((unsigned long)channel + 12288UL) * 512UL,1073741824ULL,1000,10,"RXDMA_CFIG1");
  
#line 4789 
  return tmp_0;
}


#line 4794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_rx_channel_lpage_init(struct niu *np, int channel)
{
  int __retres;
  u64 val;
  
#line 4798 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 64UL + 6946824UL)));
  
#line 4799 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 64UL + 6946832UL)));
  
#line 4800 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 64UL + 6946840UL)));
  
#line 4801 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 64UL + 6946848UL)));
  
#line 4802 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 64UL + 6946856UL)));
  
#line 4803 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 64UL + 6946864UL)));
  
#line 4804 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 64UL + 6946872UL)));
  
#line 4806 
  val = (unsigned long long)np->port << 2;
  
#line 4807 
  val |= 3ULL;
  
#line 4808 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)channel + 108544UL) * 64UL));
  
#line 4810 
  __retres = 0;
  
#line 4810 
  return __retres;
}


#line 4813  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_rx_channel_wred_init(struct niu *np, struct rx_ring_info *rp)
{
  u64 val;
  
#line 4817 
  val = (((unsigned long long)rp->nonsyn_window | ((unsigned long long)rp->nonsyn_threshold << 4)) | ((unsigned long long)rp->syn_window << 16)) | ((unsigned long long)rp->syn_threshold << 20);
  
#line 4821 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)rp->rx_channel + 109568UL) * 64UL));
  
#line 4822 
  return;
}


#line 4824  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_compute_rbr_cfig_b(struct rx_ring_info *rp, u64 *ret)
{
  int __retres;
  
#line 4826 
  u64 val = 0ULL;
  
#line 4828 
  *ret = 0ULL;
  
#line 4829 
  switch ((int)rp->rbr_block_size) {
    case 4096: 
#line 4830 
    ;
    
#line 4831 
    val = val;
    
#line 4832 
    goto ldv_54268;
    case 8192: 
#line 4833 
    ;
    
#line 4834 
    val |= 16777216ULL;
    
#line 4835 
    goto ldv_54268;
    case 16384: 
#line 4836 
    ;
    
#line 4837 
    val |= 33554432ULL;
    
#line 4838 
    goto ldv_54268;
    case 32768: 
#line 4839 
    ;
    
#line 4840 
    val |= 50331648ULL;
    
#line 4841 
    goto ldv_54268;
    default: 
#line 4842 
    ;
    
#line 4843 
    __retres = -22;
    
#line 4843 
    goto return_label;
  }
  ldv_54268: 
#line 4845 
  ;
  
#line 4845 
  val |= 8388608ULL;
  
#line 4846 
  switch ((int)rp->rbr_sizes[2]) {
    case 2048: 
#line 4847 
    ;
    
#line 4848 
    val = val;
    
#line 4849 
    goto ldv_54274;
    case 4096: 
#line 4850 
    ;
    
#line 4851 
    val |= 65536ULL;
    
#line 4852 
    goto ldv_54274;
    case 8192: 
#line 4853 
    ;
    
#line 4854 
    val |= 131072ULL;
    
#line 4855 
    goto ldv_54274;
    case 16384: 
#line 4856 
    ;
    
#line 4857 
    val |= 196608ULL;
    
#line 4858 
    goto ldv_54274;
    default: 
#line 4860 
    ;
    
#line 4861 
    __retres = -22;
    
#line 4861 
    goto return_label;
  }
  ldv_54274: 
#line 4863 
  ;
  
#line 4863 
  val |= 32768ULL;
  
#line 4864 
  switch ((int)rp->rbr_sizes[1]) {
    case 1024: 
#line 4865 
    ;
    
#line 4866 
    val = val;
    
#line 4867 
    goto ldv_54280;
    case 2048: 
#line 4868 
    ;
    
#line 4869 
    val |= 256ULL;
    
#line 4870 
    goto ldv_54280;
    case 4096: 
#line 4871 
    ;
    
#line 4872 
    val |= 512ULL;
    
#line 4873 
    goto ldv_54280;
    case 8192: 
#line 4874 
    ;
    
#line 4875 
    val |= 768ULL;
    
#line 4876 
    goto ldv_54280;
    default: 
#line 4878 
    ;
    
#line 4879 
    __retres = -22;
    
#line 4879 
    goto return_label;
  }
  ldv_54280: 
#line 4881 
  ;
  
#line 4881 
  val |= 128ULL;
  
#line 4882 
  switch ((int)rp->rbr_sizes[0]) {
    case 256: 
#line 4883 
    ;
    
#line 4884 
    val = val;
    
#line 4885 
    goto ldv_54286;
    case 512: 
#line 4886 
    ;
    
#line 4887 
    val |= 1ULL;
    
#line 4888 
    goto ldv_54286;
    case 1024: 
#line 4889 
    ;
    
#line 4890 
    val |= 2ULL;
    
#line 4891 
    goto ldv_54286;
    case 2048: 
#line 4892 
    ;
    
#line 4893 
    val |= 3ULL;
    
#line 4894 
    goto ldv_54286;
    default: 
#line 4896 
    ;
    
#line 4897 
    __retres = -22;
    
#line 4897 
    goto return_label;
  }
  ldv_54286: 
#line 4900 
  ;
  
#line 4900 
  *ret = val;
  
#line 4901 
  __retres = 0;
  return_label: 
#line 4901 
                return __retres;
}


#line 4904  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_enable_rx_channel(struct niu *np, int channel, int on)
{
  int __retres;
  int limit;
  unsigned long tmp_0;
  
#line 4906 
  u64 val = readq((void const volatile *)(np->regs + ((unsigned long)channel + 12288UL) * 512UL));
  
#line 4909 
  if (on != 0) 
#line 4910 
               val |= 2147483648ULL; else 
#line 4912 
                                          val &= 18446744071562067967ULL;
  
#line 4913 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)channel + 12288UL) * 512UL));
  
#line 4915 
  limit = 1000;
  
#line 4916 
  goto ldv_54300;
  ldv_54299: 
#line 4917 
  ;
  
#line 4917 
  tmp_0 = readq((void const volatile *)(np->regs + ((unsigned long)channel + 12288UL) * 512UL));
  
#line 4917 
  if (((unsigned long long)tmp_0 & 536870912ULL) != 0ULL) 
#line 4918 
                                                          goto ldv_54298; else ;
  
#line 4919 
  __const_udelay(42950UL);
  ldv_54300: 
#line 4921 
  ;
  
#line 4916 
  limit -= 1;
  
#line 4916 
  if (limit > 0) 
#line 4918 
                 goto ldv_54299; else 
#line 4921 
                                      goto ldv_54298;
  ldv_54298: 
#line 4922 
  ;
  
#line 4921 
  if (limit <= 0) {
    
#line 4922 
    __retres = -19;
    
#line 4922 
    goto return_label;
  }
  else ;
  
#line 4923 
  __retres = 0;
  return_label: 
#line 4923 
                return __retres;
}


#line 4926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_one_rx_channel(struct niu *np, struct rx_ring_info *rp)
{
  int __retres;
  int err;
  u64 val;
  
#line 4928 
  int channel = rp->rx_channel;
  
#line 4931 
  err = niu_rx_channel_reset(np,channel);
  
#line 4932 
  if (err != 0) {
    
#line 4933 
    __retres = err;
    
#line 4933 
    goto return_label;
  }
  else ;
  
#line 4935 
  err = niu_rx_channel_lpage_init(np,channel);
  
#line 4936 
  if (err != 0) {
    
#line 4937 
    __retres = err;
    
#line 4937 
    goto return_label;
  }
  else ;
  
#line 4939 
  niu_rx_channel_wred_init(np,rp);
  
#line 4941 
  writeq(8UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291560UL)));
  
#line 4942 
  writeq(246324964360192UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291568UL)));
  
#line 4947 
  writeq((unsigned long)(rp->mbox_dma >> 32),(void volatile *)(np->regs + ((unsigned long)channel + 12288UL) * 512UL));
  
#line 4948 
  writeq((unsigned long)((rp->mbox_dma & 4294967232ULL) | 1ULL),(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291464UL)));
  
#line 4951 
  writeq((unsigned long)(((unsigned long long)rp->rbr_table_size << 48) | (rp->rbr_dma & 17592186044352ULL)),(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291472UL)));
  
#line 4954 
  err = niu_compute_rbr_cfig_b(rp,& val);
  
#line 4955 
  if (err != 0) {
    
#line 4956 
    __retres = err;
    
#line 4956 
    goto return_label;
  }
  else ;
  
#line 4957 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291480UL)));
  
#line 4958 
  writeq((unsigned long)(((unsigned long long)rp->rcr_table_size << 48) | (rp->rcr_dma & 17592186044352ULL)),(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291520UL)));
  
#line 4961 
  writeq((unsigned long)((((unsigned long long)rp->rcr_pkt_threshold << 16) | (unsigned long long)rp->rcr_timeout) | 32768ULL),(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291528UL)));
  
#line 4966 
  err = niu_enable_rx_channel(np,channel,1);
  
#line 4967 
  if (err != 0) {
    
#line 4968 
    __retres = err;
    
#line 4968 
    goto return_label;
  }
  else ;
  
#line 4970 
  writeq((unsigned long)rp->rbr_index,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291488UL)));
  
#line 4972 
  val = (u64)readq((void const volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291568UL)));
  
#line 4973 
  val |= 34359738368ULL;
  
#line 4974 
  writeq((unsigned long)val,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291568UL)));
  
#line 4976 
  __retres = 0;
  return_label: 
#line 4976 
                return __retres;
}


#line 4979  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_rx_channels(struct niu *np)
{
  int __retres;
  unsigned long flags;
  int err;
  int i;
  
#line 4982 
  u64 seed = jiffies_64;
  
#line 4985 
  ldv___ldv_spin_lock_98(& (np->parent)->lock);
  
#line 4986 
  writeq((unsigned long)(np->parent)->rxdma_clock_divider,(void volatile *)(np->regs + 6815744U));
  
#line 4987 
  writeq((unsigned long)((seed & 65535ULL) | 65536ULL),(void volatile *)(np->regs + 6815848U));
  
#line 4988 
  ldv_spin_unlock_irqrestore_99(& (np->parent)->lock,flags);
  
#line 4992 
  niu_init_rdc_groups(np);
  
#line 4993 
  niu_init_drr_weight(np);
  
#line 4995 
  err = niu_init_hostinfo(np);
  
#line 4996 
  if (err != 0) {
    
#line 4997 
    __retres = err;
    
#line 4997 
    goto return_label;
  }
  else ;
  
#line 4999 
  i = 0;
  
#line 4999 
  goto ldv_54317;
  ldv_54316: 
#line 5000 
  ;
  {
    
#line 5000 
    struct rx_ring_info *rp = np->rx_rings + i;
    
#line 5002 
    err = niu_init_one_rx_channel(np,rp);
    
#line 5003 
    if (err != 0) {
      
#line 5004 
      __retres = err;
      
#line 5004 
      goto return_label;
    }
    else ;
  }
  
#line 4999 
  i += 1;
  ldv_54317: 
#line 5000 
  ;
  
#line 4999 
  if (np->num_rx_rings > i) 
#line 5001 
                            goto ldv_54316; else 
#line 5004 
                                                 goto ldv_54318;
  ldv_54318: 
#line 5005 
  ;
  
#line 5007 
  __retres = 0;
  return_label: 
#line 5007 
                return __retres;
}


#line 5010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_ip_frag_rule(struct niu *np)
{
  int __retres;
  struct niu_tcam_entry *tp;
  int index;
  int err;
  
#line 5012 
  struct niu_parent *parent = np->parent;
  
#line 5013 
  struct niu_classifier *cp = & np->clas;
  
#line 5017 
  index = (int)cp->tcam_top;
  
#line 5018 
  tp = & parent->tcam[index];
  
#line 5023 
  memset((void *)tp,0,80UL);
  
#line 5024 
  tp->key[1] = 288230376151711744ULL;
  
#line 5025 
  tp->key_mask[1] = 288230376151711744ULL;
  
#line 5026 
  tp->assoc_data = 1024ULL;
  
#line 5028 
  err = tcam_write(np,index,(u64 *)(& tp->key),(u64 *)(& tp->key_mask));
  
#line 5029 
  if (err != 0) {
    
#line 5030 
    __retres = err;
    
#line 5030 
    goto return_label;
  }
  else ;
  
#line 5031 
  err = tcam_assoc_write(np,index,tp->assoc_data);
  
#line 5032 
  if (err != 0) {
    
#line 5033 
    __retres = err;
    
#line 5033 
    goto return_label;
  }
  else ;
  
#line 5034 
  tp->valid = (unsigned char)1U;
  
#line 5035 
  cp->tcam_valid_entries = (u16)((int)cp->tcam_valid_entries + 1);
  
#line 5037 
  __retres = 0;
  return_label: 
#line 5037 
                return __retres;
}


#line 5040  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_classifier_hw(struct niu *np)
{
  int __retres;
  int i;
  int err;
  
#line 5042 
  struct niu_parent *parent = np->parent;
  
#line 5043 
  struct niu_classifier *cp = & np->clas;
  
#line 5046 
  writeq((unsigned long)cp->h1_init,(void volatile *)(np->regs + 3932256U));
  
#line 5047 
  writeq((unsigned long)cp->h2_init,(void volatile *)(np->regs + 3932264U));
  
#line 5049 
  err = niu_init_hostinfo(np);
  
#line 5050 
  if (err != 0) {
    
#line 5051 
    __retres = err;
    
#line 5051 
    goto return_label;
  }
  else ;
  
#line 5053 
  i = 0;
  
#line 5053 
  goto ldv_54336;
  ldv_54335: 
#line 5054 
  ;
  {
    
#line 5054 
    struct niu_vlan_rdc *vp = & cp->vlan_mappings[i];
    
#line 5056 
    vlan_tbl_write(np,(unsigned long)i,(int)np->port,(int)vp->vlan_pref,(int)vp->rdc_num);
  }
  
#line 5053 
  i += 1;
  ldv_54336: 
#line 5054 
  ;
  
#line 5053 
  if (i <= 4095) 
#line 5055 
                 goto ldv_54335; else 
#line 5058 
                                      goto ldv_54337;
  ldv_54337: 
#line 5059 
  ;
  
#line 5060 
  i = 0;
  
#line 5060 
  goto ldv_54340;
  ldv_54339: 
#line 5061 
  ;
  {
    
#line 5061 
    struct niu_altmac_rdc *ap = & cp->alt_mac_mappings[i];
    
#line 5063 
    err = niu_set_alt_mac_rdc_table(np,(int)ap->alt_mac_num,(int)ap->rdc_num,(int)ap->mac_pref);
    
#line 5065 
    if (err != 0) {
      
#line 5066 
      __retres = err;
      
#line 5066 
      goto return_label;
    }
    else ;
  }
  
#line 5060 
  i += 1;
  ldv_54340: 
#line 5061 
  ;
  
#line 5060 
  if ((int)cp->num_alt_mac_mappings > i) 
#line 5062 
                                         goto ldv_54339; else 
#line 5065 
                                                              goto ldv_54341;
  ldv_54341: 
#line 5066 
  ;
  
#line 5069 
  i = 4;
  
#line 5069 
  goto ldv_54344;
  ldv_54343: 
#line 5070 
  ;
  {
    
#line 5070 
    int index = i + -4;
    
#line 5072 
    err = niu_set_tcam_key(np,(unsigned long)i,parent->tcam_key[index]);
    
#line 5073 
    if (err != 0) {
      
#line 5074 
      __retres = err;
      
#line 5074 
      goto return_label;
    }
    else ;
    
#line 5075 
    err = niu_set_flow_key(np,(unsigned long)i,parent->flow_key[index]);
    
#line 5076 
    if (err != 0) {
      
#line 5077 
      __retres = err;
      
#line 5077 
      goto return_label;
    }
    else ;
  }
  
#line 5069 
  i += 1;
  ldv_54344: 
#line 5070 
  ;
  
#line 5069 
  if (i <= 15) 
#line 5071 
               goto ldv_54343; else 
#line 5074 
                                    goto ldv_54345;
  ldv_54345: 
#line 5075 
  ;
  
#line 5080 
  err = niu_set_ip_frag_rule(np);
  
#line 5081 
  if (err != 0) {
    
#line 5082 
    __retres = err;
    
#line 5082 
    goto return_label;
  }
  else ;
  
#line 5084 
  tcam_enable(np,1);
  
#line 5086 
  __retres = 0;
  return_label: 
#line 5086 
                return __retres;
}


#line 5102 
void __compiletime_assert_5103(void);


#line 5089  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_zcp_write(struct niu *np, int index, u64 *data)
{
  int tmp_0;
  
#line 5091 
  writeq((unsigned long)*data,(void volatile *)(np->regs + 5767256U));
  
#line 5092 
  writeq((unsigned long)*(data + 1U),(void volatile *)(np->regs + 5767264U));
  
#line 5093 
  writeq((unsigned long)*(data + 2U),(void volatile *)(np->regs + 5767272U));
  
#line 5094 
  writeq((unsigned long)*(data + 3U),(void volatile *)(np->regs + 5767280U));
  
#line 5095 
  writeq((unsigned long)*(data + 4U),(void volatile *)(np->regs + 5767288U));
  
#line 5096 
  writeq(131071UL,(void volatile *)(np->regs + 5767296U));
  
#line 5097 
  writeq((unsigned long)(((int)np->port + 16) << 12),(void volatile *)(np->regs + 5767304U));
  {
    
#line 5102 
    bool __cond = (_Bool)0;
    
#line 5102 
    if ((int)__cond != 0) 
#line 5102 
                          __compiletime_assert_5103(); else ;
  }
  
#line 5102 
  tmp_0 = __niu_wait_bits_clear(np,5767304UL,2147483648ULL,1000,100);
  
#line 5102 
  return tmp_0;
}


#line 5110 
void __compiletime_assert_5111(void);


#line 5123 
void __compiletime_assert_5124(void);


#line 5106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_zcp_read(struct niu *np, int index, u64 *data)
{
  int __retres;
  int err;
  int tmp_0;
  int tmp_3;
  {
    
#line 5110 
    bool __cond = (_Bool)0;
    
#line 5110 
    if ((int)__cond != 0) 
#line 5110 
                          __compiletime_assert_5111(); else ;
  }
  
#line 5110 
  tmp_0 = __niu_wait_bits_clear(np,5767304UL,2147483648ULL,1000,100);
  
#line 5110 
  err = tmp_0;
  
#line 5112 
  if (err != 0) {
    unsigned long tmp_1;
    
#line 5114 
    tmp_1 = readq((void const volatile *)(np->regs + 5767304U));
    
#line 5113 
    ;
    
#line 5113 
    netdev_err((struct net_device const *)np->dev,"ZCP read busy won\'t clear, ZCP_RAM_ACC[%llx]\n",(unsigned long long)tmp_1);
    
#line 5115 
    __retres = err;
    
#line 5115 
    goto return_label;
  }
  else ;
  
#line 5118 
  writeq((unsigned long)((((int)np->port + 16) << 12) | 1073741824),(void volatile *)(np->regs + 5767304U));
  {
    
#line 5123 
    bool __cond_0 = (_Bool)0;
    
#line 5123 
    if ((int)__cond_0 != 0) 
#line 5123 
                            __compiletime_assert_5124(); else ;
  }
  
#line 5123 
  tmp_3 = __niu_wait_bits_clear(np,5767304UL,2147483648ULL,1000,100);
  
#line 5123 
  err = tmp_3;
  
#line 5125 
  if (err != 0) {
    unsigned long tmp_4;
    
#line 5127 
    tmp_4 = readq((void const volatile *)(np->regs + 5767304U));
    
#line 5126 
    ;
    
#line 5126 
    netdev_err((struct net_device const *)np->dev,"ZCP read busy2 won\'t clear, ZCP_RAM_ACC[%llx]\n",(unsigned long long)tmp_4);
    
#line 5128 
    __retres = err;
    
#line 5128 
    goto return_label;
  }
  else ;
  
#line 5131 
  *data = (u64)readq((void const volatile *)(np->regs + 5767256U));
  
#line 5132 
  *(data + 1U) = (u64)readq((void const volatile *)(np->regs + 5767264U));
  
#line 5133 
  *(data + 2U) = (u64)readq((void const volatile *)(np->regs + 5767272U));
  
#line 5134 
  *(data + 3U) = (u64)readq((void const volatile *)(np->regs + 5767280U));
  
#line 5135 
  *(data + 4U) = (u64)readq((void const volatile *)(np->regs + 5767288U));
  
#line 5137 
  __retres = 0;
  return_label: 
#line 5137 
                return __retres;
}


#line 5140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_zcp_cfifo_reset(struct niu *np)
{
  
#line 5142 
  u64 val = readq((void const volatile *)(np->regs + 5767320U));
  
#line 5144 
  val = (unsigned long long)(1 << (int)np->port) | val;
  
#line 5145 
  writeq((unsigned long)val,(void volatile *)(np->regs + 5767320U));
  
#line 5146 
  __const_udelay(42950UL);
  
#line 5148 
  val = (unsigned long long)(~ (1 << (int)np->port)) & val;
  
#line 5149 
  writeq((unsigned long)val,(void volatile *)(np->regs + 5767320U));
  
#line 5150 
  return;
}


#line 5152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_zcp(struct niu *np)
{
  int __retres;
  u64 data[5U];
  u64 rbuf[5U];
  int i;
  int max;
  int err;
  
#line 5157 
  if ((unsigned int)(np->parent)->plat_type != 2U) 
    
#line 5158 
    if ((unsigned int)np->port <= 1U) 
#line 5159 
                                      max = 2048; else 
#line 5161 
                                                       max = 1024;
  else 
#line 5163 
       max = 1024;
  
#line 5165 
  data[0] = 0ULL;
  
#line 5166 
  data[1] = 0ULL;
  
#line 5167 
  data[2] = 0ULL;
  
#line 5168 
  data[3] = 0ULL;
  
#line 5169 
  data[4] = 0ULL;
  
#line 5171 
  i = 0;
  
#line 5171 
  goto ldv_54385;
  ldv_54384: 
#line 5172 
  ;
  
#line 5172 
  err = niu_zcp_write(np,i,(u64 *)(& data));
  
#line 5173 
  if (err != 0) {
    
#line 5174 
    __retres = err;
    
#line 5174 
    goto return_label;
  }
  else ;
  
#line 5175 
  err = niu_zcp_read(np,i,(u64 *)(& rbuf));
  
#line 5176 
  if (err != 0) {
    
#line 5177 
    __retres = err;
    
#line 5177 
    goto return_label;
  }
  else ;
  
#line 5171 
  i += 1;
  ldv_54385: 
#line 5172 
  ;
  
#line 5171 
  if (i < max) 
#line 5173 
               goto ldv_54384; else 
#line 5176 
                                    goto ldv_54386;
  ldv_54386: 
#line 5177 
  ;
  
#line 5180 
  niu_zcp_cfifo_reset(np);
  
#line 5181 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)np->port + 720916UL) * 8UL));
  
#line 5182 
  writeq(65535UL,(void volatile *)(np->regs + 5767176U));
  
#line 5183 
  readq((void const volatile *)(np->regs + 5767176U));
  
#line 5184 
  writeq(65535UL,(void volatile *)(np->regs + 5767184U));
  
#line 5186 
  __retres = 0;
  return_label: 
#line 5186 
                return __retres;
}


#line 5189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_ipp_write(struct niu *np, int index, u64 *data)
{
  
#line 5191 
  u64 val = readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621440U)));
  
#line 5193 
  writeq((unsigned long)(val | 32ULL),(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621440U)));
  
#line 5194 
  writeq((unsigned long)index,(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621720U)));
  
#line 5195 
  writeq((unsigned long)*data,(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621672U)));
  
#line 5196 
  writeq((unsigned long)*(data + 1U),(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621680U)));
  
#line 5197 
  writeq((unsigned long)*(data + 2U),(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621688U)));
  
#line 5198 
  writeq((unsigned long)*(data + 3U),(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621696U)));
  
#line 5199 
  writeq((unsigned long)*(data + 4U),(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621704U)));
  
#line 5200 
  writeq((unsigned long)val & 18446744073709551583UL,(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621440U)));
  
#line 5201 
  return;
}


#line 5203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_ipp_read(struct niu *np, int index, u64 *data)
{
  
#line 5205 
  writeq((unsigned long)index,(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621712U)));
  
#line 5206 
  *data = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621632U)));
  
#line 5207 
  *(data + 1U) = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621640U)));
  
#line 5208 
  *(data + 2U) = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621648U)));
  
#line 5209 
  *(data + 3U) = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621656U)));
  
#line 5210 
  *(data + 4U) = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621664U)));
  
#line 5211 
  return;
}


#line 5215 
void __compiletime_assert_5216(void);


#line 5213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_ipp_reset(struct niu *np)
{
  int tmp_0;
  {
    
#line 5215 
    bool __cond = (_Bool)0;
    
#line 5215 
    if ((int)__cond != 0) 
#line 5215 
                          __compiletime_assert_5216(); else ;
  }
  
#line 5215 
  tmp_0 = __niu_set_and_wait_clear_ipp(np,2621440UL,2147483648ULL,1000,100,"IPP_CFIG");
  
#line 5215 
  return tmp_0;
}


#line 5219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_ipp(struct niu *np)
{
  int __retres;
  u64 data[5U];
  u64 rbuf[5U];
  u64 val;
  int i;
  int max;
  int err;
  
#line 5224 
  if ((unsigned int)(np->parent)->plat_type != 2U) 
    
#line 5225 
    if ((unsigned int)np->port <= 1U) 
#line 5226 
                                      max = 2048; else 
#line 5228 
                                                       max = 1024;
  else 
#line 5230 
       max = 1024;
  
#line 5232 
  data[0] = 0ULL;
  
#line 5233 
  data[1] = 0ULL;
  
#line 5234 
  data[2] = 0ULL;
  
#line 5235 
  data[3] = 0ULL;
  
#line 5236 
  data[4] = 0ULL;
  
#line 5238 
  i = 0;
  
#line 5238 
  goto ldv_54416;
  ldv_54415: 
#line 5239 
  ;
  
#line 5239 
  niu_ipp_write(np,i,(u64 *)(& data));
  
#line 5240 
  niu_ipp_read(np,i,(u64 *)(& rbuf));
  
#line 5238 
  i += 1;
  ldv_54416: 
#line 5239 
  ;
  
#line 5238 
  if (i < max) 
#line 5240 
               goto ldv_54415; else 
#line 5243 
                                    goto ldv_54417;
  ldv_54417: 
#line 5244 
  ;
  
#line 5243 
  readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621504U)));
  
#line 5244 
  readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621504U)));
  
#line 5246 
  err = niu_ipp_reset(np);
  
#line 5247 
  if (err != 0) {
    
#line 5248 
    __retres = err;
    
#line 5248 
    goto return_label;
  }
  else ;
  
#line 5250 
  readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621472U)));
  
#line 5251 
  readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621480U)));
  
#line 5252 
  readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621488U)));
  
#line 5254 
  readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621504U)));
  
#line 5256 
  writeq(18446744073709551360UL,(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621512U)));
  
#line 5258 
  val = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621440U)));
  
#line 5259 
  val &= 18446744073675997439ULL;
  
#line 5260 
  val |= 33554205ULL;
  
#line 5265 
  writeq((unsigned long)val,(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621440U)));
  
#line 5267 
  __retres = 0;
  return_label: 
#line 5267 
                return __retres;
}


#line 5270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_handle_led(struct niu *np, int status)
{
  u64 val;
  
#line 5273 
  val = (u64)readq((void const volatile *)(np->mac_regs + 96U));
  
#line 5275 
  if ((np->flags & 262144U) != 0U && (np->flags & 131072U) != 0U) 
    
#line 5277 
    if (status != 0) {
      
#line 5278 
      val |= 4194304ULL;
      
#line 5279 
      val &= 18446744073707454463ULL;
    }
    else {
      
#line 5281 
      val |= 2097152ULL;
      
#line 5282 
      val &= 18446744073705357311ULL;
    }
  else ;
  
#line 5286 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 5287 
  return;
}


#line 5289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_xif_xmac(struct niu *np)
{
  u64 val;
  
#line 5291 
  struct niu_link_config *lp = & np->link_config;
  
#line 5294 
  if ((np->flags & 524288U) != 0U) {
    
#line 5295 
    val = (u64)readq((void const volatile *)(np->regs + 1663008U));
    
#line 5296 
    val |= 65536ULL;
    
#line 5297 
    writeq((unsigned long)val,(void volatile *)(np->regs + 1663008U));
  }
  else ;
  
#line 5300 
  val = (u64)readq((void const volatile *)(np->mac_regs + 96U));
  
#line 5301 
  val &= 18446744073701163007ULL;
  
#line 5303 
  val |= 16777216ULL;
  
#line 5305 
  if ((unsigned int)lp->loopback_mode == 2U) {
    
#line 5306 
    val &= 18446744073701163007ULL;
    
#line 5307 
    val |= 33554432ULL;
  }
  else 
#line 5309 
       val &= 18446744073675997183ULL;
  
#line 5312 
  if ((np->flags & 262144U) != 0U) 
#line 5313 
                                   val &= 18446744073642442751ULL;
  else {
    
#line 5315 
    val |= 67108864ULL;
    
#line 5316 
    if ((np->flags & 131072U) == 0U && (np->flags & 524288U) == 0U) 
#line 5318 
                                                                    val |= 1073741824ULL; else 
                                                                    
#line 5320 
                                                                    val &= 18446744072635809791ULL;
  }
  
#line 5323 
  val &= 18446744073172680703ULL;
  
#line 5325 
  if ((unsigned int)lp->active_speed == 100U) 
#line 5326 
                                              val |= 2147483648ULL; else 
                                                                    
#line 5328 
                                                                    val &= 18446744071562067967ULL;
  
#line 5330 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 5332 
  val = (u64)readq((void const volatile *)(np->mac_regs + 96U));
  
#line 5333 
  val &= 18446744073306898431ULL;
  
#line 5334 
  if ((np->flags & 262144U) != 0U) 
#line 5335 
                                   val = val;
  else 
    
#line 5337 
    if ((unsigned int)lp->active_speed == 1000U) 
#line 5338 
                                                 val |= 134217728ULL; else 
                                                                    
#line 5340 
                                                                    val |= 268435456ULL;
  
#line 5343 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 5344 
  return;
}


#line 5346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_xif_bmac(struct niu *np)
{
  u64 val;
  
#line 5348 
  struct niu_link_config *lp = & np->link_config;
  
#line 5351 
  val = 1ULL;
  
#line 5353 
  if ((unsigned int)lp->loopback_mode == 2U) 
#line 5354 
                                             val |= 2ULL; else 
#line 5356 
                                                               val &= 18446744073709551613ULL;
  
#line 5358 
  if ((unsigned int)lp->active_speed == 1000U) 
#line 5359 
                                               val |= 8ULL; else 
#line 5361 
                                                                 val &= 18446744073709551607ULL;
  
#line 5363 
  val &= 18446744073709551519ULL;
  
#line 5366 
  if (((np->flags & 262144U) == 0U && (np->flags & 131072U) == 0U) && (unsigned int)lp->active_speed == 100U) 
    
#line 5369 
    val |= 128ULL; else 
#line 5371 
                        val &= 18446744073709551487ULL;
  
#line 5373 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 120U));
  
#line 5374 
  return;
}


#line 5376  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_xif(struct niu *np)
{
  
#line 5378 
  if ((np->flags & 65536U) != 0U) 
#line 5379 
                                  niu_init_xif_xmac(np); else 
#line 5381 
                                                              niu_init_xif_bmac(np);
  
#line 5382 
  return;
}


#line 5384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_pcs_mii_reset(struct niu *np)
{
  
#line 5386 
  int limit = 1000;
  
#line 5387 
  u64 val = readq((void const volatile *)(np->regs + (np->pcs_off + (unsigned long)1572864U)));
  
#line 5388 
  val |= 32768ULL;
  
#line 5389 
  writeq((unsigned long)val,(void volatile *)(np->regs + (np->pcs_off + (unsigned long)1572864U)));
  
#line 5390 
  goto ldv_54442;
  ldv_54441: 
#line 5391 
  ;
  
#line 5391 
  __const_udelay(429500UL);
  
#line 5392 
  val = (u64)readq((void const volatile *)(np->regs + (np->pcs_off + (unsigned long)1572864U)));
  ldv_54442: 
#line 5393 
  ;
  
#line 5390 
  limit -= 1;
  
#line 5390 
  if (limit >= 0) {
    
#line 5390 
    if ((val & 32768ULL) != 0ULL) 
#line 5392 
                                  goto ldv_54441; else 
#line 5395 
                                                       goto ldv_54443;
  }
  else 
#line 5395 
       goto ldv_54443;
  ldv_54443: 
#line 5396 
  ;
  
#line 5397 
  return;
}


#line 5396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_xpcs_reset(struct niu *np)
{
  
#line 5398 
  int limit = 1000;
  
#line 5399 
  u64 val = readq((void const volatile *)(np->regs + (np->xpcs_off + (unsigned long)1572864U)));
  
#line 5400 
  val |= 32768ULL;
  
#line 5401 
  writeq((unsigned long)val,(void volatile *)(np->regs + (np->xpcs_off + (unsigned long)1572864U)));
  
#line 5402 
  goto ldv_54450;
  ldv_54449: 
#line 5403 
  ;
  
#line 5403 
  __const_udelay(429500UL);
  
#line 5404 
  val = (u64)readq((void const volatile *)(np->regs + (np->xpcs_off + (unsigned long)1572864U)));
  ldv_54450: 
#line 5405 
  ;
  
#line 5402 
  limit -= 1;
  
#line 5402 
  if (limit >= 0) {
    
#line 5402 
    if ((val & 32768ULL) != 0ULL) 
#line 5404 
                                  goto ldv_54449; else 
#line 5407 
                                                       goto ldv_54451;
  }
  else 
#line 5407 
       goto ldv_54451;
  ldv_54451: 
#line 5408 
  ;
  
#line 5409 
  return;
}


#line 5408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_pcs(struct niu *np)
{
  int __retres;
  u64 val;
  
#line 5410 
  struct niu_link_config *lp = & np->link_config;
  
#line 5413 
  switch (np->flags & 917504U) {
    case (unsigned int)131072: 
#line 5416 
    ;
    
#line 5418 
    writeq(65UL,(void volatile *)(np->regs + (np->pcs_off + (unsigned long)1572896U)));
    
#line 5419 
    writeq(0UL,(void volatile *)(np->regs + (np->pcs_off + (unsigned long)1573024U)));
    
#line 5420 
    niu_pcs_mii_reset(np);
    
#line 5421 
    goto ldv_54458;
    case (unsigned int)262144: 
#line 5423 
    ;
    case (unsigned int)393216: 
#line 5424 
    ;
    case (unsigned int)786432: 
#line 5425 
    ;
    
#line 5427 
    if ((np->flags & 65536U) == 0U) {
      
#line 5428 
      __retres = -22;
      
#line 5428 
      goto return_label;
    }
    else ;
    
#line 5431 
    val = (u64)readq((void const volatile *)(np->mac_regs + 96U));
    
#line 5432 
    val &= 18446744073172680703ULL;
    
#line 5433 
    writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
    
#line 5435 
    niu_xpcs_reset(np);
    
#line 5437 
    val = (u64)readq((void const volatile *)(np->regs + (np->xpcs_off + (unsigned long)1572864U)));
    
#line 5438 
    if ((unsigned int)lp->loopback_mode == 1U) 
#line 5439 
                                               val |= 16384ULL; else 
                                                                  
#line 5441 
                                                                  val &= 18446744073709535231ULL;
    
#line 5442 
    writeq((unsigned long)val,(void volatile *)(np->regs + (np->xpcs_off + (unsigned long)1572864U)));
    
#line 5444 
    writeq(0UL,(void volatile *)(np->regs + (np->xpcs_off + (unsigned long)1572984U)));
    
#line 5445 
    readq((void const volatile *)(np->regs + (np->xpcs_off + (unsigned long)1572992U)));
    
#line 5446 
    readq((void const volatile *)(np->regs + (np->xpcs_off + (unsigned long)1573000U)));
    
#line 5447 
    goto ldv_54458;
    case (unsigned int)524288: 
#line 5450 
    ;
    
#line 5452 
    niu_pcs_mii_reset(np);
    
#line 5453 
    writeq(65UL,(void volatile *)(np->regs + (np->pcs_off + (unsigned long)1572896U)));
    
#line 5454 
    writeq(0UL,(void volatile *)(np->regs + (np->pcs_off + (unsigned long)1573024U)));
    
#line 5455 
    goto ldv_54458;
    case (unsigned int)0: 
#line 5457 
    ;
    case (unsigned int)655360: 
#line 5459 
    ;
    
#line 5461 
    writeq(2UL,(void volatile *)(np->regs + (np->pcs_off + (unsigned long)1573024U)));
    
#line 5462 
    niu_pcs_mii_reset(np);
    
#line 5463 
    goto ldv_54458;
    default: 
#line 5465 
    ;
    
#line 5466 
    __retres = -22;
    
#line 5466 
    goto return_label;
  }
  ldv_54458: 
#line 5469 
  ;
  
#line 5469 
  __retres = 0;
  return_label: 
#line 5469 
                return __retres;
}


#line 5474 
void __compiletime_assert_5477(void);


#line 5472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_reset_tx_xmac(struct niu *np)
{
  int tmp_0;
  {
    
#line 5474 
    bool __cond = (_Bool)0;
    
#line 5474 
    if ((int)__cond != 0) 
#line 5474 
                          __compiletime_assert_5477(); else ;
  }
  
#line 5474 
  tmp_0 = __niu_set_and_wait_clear_mac(np,0UL,3ULL,1000,100,"XTXMAC_SW_RST");
  
#line 5474 
  return tmp_0;
}


#line 5480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_reset_tx_bmac(struct niu *np)
{
  int __retres;
  int limit;
  unsigned long tmp;
  
#line 5484 
  writeq(1UL,(void volatile *)np->mac_regs);
  
#line 5485 
  limit = 1000;
  
#line 5486 
  goto ldv_54480;
  ldv_54479: 
#line 5487 
  ;
  
#line 5487 
  tmp = readq((void const volatile *)np->mac_regs);
  
#line 5487 
  if (((unsigned long long)tmp & 1ULL) == 0ULL) 
#line 5488 
                                                goto ldv_54478; else ;
  
#line 5489 
  __const_udelay(429500UL);
  ldv_54480: 
#line 5491 
  ;
  
#line 5486 
  limit -= 1;
  
#line 5486 
  if (limit >= 0) 
#line 5488 
                  goto ldv_54479; else 
#line 5491 
                                       goto ldv_54478;
  ldv_54478: 
#line 5492 
  ;
  
#line 5491 
  if (limit < 0) {
    unsigned long tmp_0;
    
#line 5494 
    tmp_0 = readq((void const volatile *)np->mac_regs);
    
#line 5492 
    ;
    
#line 5492 
    ;
    
#line 5492 
    dev_err((struct device const *)np->device,"Port %u TX BMAC would not reset, BTXMAC_SW_RST[%llx]\n",(int)np->port,(unsigned long long)tmp_0);
    
#line 5495 
    __retres = -19;
    
#line 5495 
    goto return_label;
  }
  else ;
  
#line 5498 
  __retres = 0;
  return_label: 
#line 5498 
                return __retres;
}


#line 5501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_reset_tx_mac(struct niu *np)
{
  int __retres;
  
#line 5503 
  if ((np->flags & 65536U) != 0U) {
    int tmp;
    
#line 5504 
    tmp = niu_reset_tx_xmac(np);
    
#line 5504 
    __retres = tmp;
    
#line 5504 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 5506 
    tmp_0 = niu_reset_tx_bmac(np);
    
#line 5506 
    __retres = tmp_0;
    
#line 5506 
    goto return_label;
  }
  return_label: 
#line 5503 
                return __retres;
}


#line 5509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_tx_xmac(struct niu *np, u64 min, u64 max)
{
  u64 val;
  
#line 5513 
  val = (u64)readq((void const volatile *)(np->mac_regs + 136U));
  
#line 5514 
  val &= 18446744072636857344ULL;
  
#line 5516 
  val = (min << 20) | val;
  
#line 5517 
  val |= min;
  
#line 5518 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 136U));
  
#line 5520 
  writeq((unsigned long)max,(void volatile *)(np->mac_regs + 144U));
  
#line 5522 
  writeq(18446744073709551615UL,(void volatile *)(np->mac_regs + 64U));
  
#line 5524 
  val = (u64)readq((void const volatile *)(np->mac_regs + 128U));
  
#line 5525 
  if ((np->flags & 262144U) != 0U) {
    
#line 5526 
    val &= 18446744073709551608ULL;
    
#line 5527 
    val |= 3ULL;
  }
  else {
    
#line 5529 
    val &= 18446744073709486335ULL;
    
#line 5530 
    val |= 2560ULL;
  }
  
#line 5532 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 128U));
  
#line 5534 
  val = (u64)readq((void const volatile *)(np->mac_regs + 96U));
  
#line 5535 
  val &= 18446744073709551600ULL;
  
#line 5539 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 5541 
  writeq(0UL,(void volatile *)(np->mac_regs + 368U));
  
#line 5542 
  writeq(0UL,(void volatile *)(np->mac_regs + 376U));
  
#line 5543 
  return;
}


#line 5545  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_tx_bmac(struct niu *np, u64 min, u64 max)
{
  u64 val;
  
#line 5549 
  writeq((unsigned long)min,(void volatile *)(np->mac_regs + 160U));
  
#line 5550 
  writeq((unsigned long)max,(void volatile *)(np->mac_regs + 168U));
  
#line 5552 
  writeq(18446744073709551615UL,(void volatile *)(np->mac_regs + 64U));
  
#line 5553 
  writeq(34824UL,(void volatile *)(np->mac_regs + 200U));
  
#line 5554 
  writeq(7UL,(void volatile *)(np->mac_regs + 176U));
  
#line 5556 
  val = (u64)readq((void const volatile *)(np->mac_regs + 96U));
  
#line 5557 
  val &= 18446744073709551612ULL;
  
#line 5559 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 5560 
  return;
}


#line 5562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_tx_mac(struct niu *np)
{
  u64 min;
  u64 max;
  
#line 5566 
  min = 64ULL;
  
#line 5567 
  if ((np->dev)->mtu > 1500U) 
#line 5568 
                              max = 9216ULL; else 
#line 5570 
                                                  max = 1522ULL;
  
#line 5575 
  if ((long)((min & 7ULL) != 0ULL) != 0L) {
    
#line 5577 
    ldv_inline_asm();
    
#line 5575 
    ;
  }
  else ;
  
#line 5577 
  if ((np->flags & 65536U) != 0U) 
#line 5578 
                                  niu_init_tx_xmac(np,min,max); else 
                                                                  
#line 5580 
                                                                  niu_init_tx_bmac(np,min,max);
  
#line 5581 
  return;
}


#line 5583  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_reset_rx_xmac(struct niu *np)
{
  int __retres;
  int limit;
  unsigned long tmp;
  
#line 5587 
  writeq(3UL,(void volatile *)(np->mac_regs + 8U));
  
#line 5589 
  limit = 1000;
  
#line 5590 
  goto ldv_54507;
  ldv_54506: 
#line 5591 
  ;
  
#line 5591 
  tmp = readq((void const volatile *)(np->mac_regs + 8U));
  
#line 5591 
  if (((unsigned long long)tmp & 3ULL) == 0ULL) 
#line 5593 
                                                goto ldv_54505; else ;
  
#line 5594 
  __const_udelay(429500UL);
  ldv_54507: 
#line 5596 
  ;
  
#line 5590 
  limit -= 1;
  
#line 5590 
  if (limit >= 0) 
#line 5592 
                  goto ldv_54506; else 
#line 5595 
                                       goto ldv_54505;
  ldv_54505: 
#line 5596 
  ;
  
#line 5596 
  if (limit < 0) {
    unsigned long tmp_0;
    
#line 5599 
    tmp_0 = readq((void const volatile *)(np->mac_regs + 8U));
    
#line 5597 
    ;
    
#line 5597 
    ;
    
#line 5597 
    dev_err((struct device const *)np->device,"Port %u RX XMAC would not reset, XRXMAC_SW_RST[%llx]\n",(int)np->port,(unsigned long long)tmp_0);
    
#line 5600 
    __retres = -19;
    
#line 5600 
    goto return_label;
  }
  else ;
  
#line 5603 
  __retres = 0;
  return_label: 
#line 5603 
                return __retres;
}


#line 5606  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_reset_rx_bmac(struct niu *np)
{
  int __retres;
  int limit;
  unsigned long tmp;
  
#line 5610 
  writeq(1UL,(void volatile *)(np->mac_regs + 8U));
  
#line 5611 
  limit = 1000;
  
#line 5612 
  goto ldv_54514;
  ldv_54513: 
#line 5613 
  ;
  
#line 5613 
  tmp = readq((void const volatile *)(np->mac_regs + 8U));
  
#line 5613 
  if (((unsigned long long)tmp & 1ULL) == 0ULL) 
#line 5614 
                                                goto ldv_54512; else ;
  
#line 5615 
  __const_udelay(429500UL);
  ldv_54514: 
#line 5617 
  ;
  
#line 5612 
  limit -= 1;
  
#line 5612 
  if (limit >= 0) 
#line 5614 
                  goto ldv_54513; else 
#line 5617 
                                       goto ldv_54512;
  ldv_54512: 
#line 5618 
  ;
  
#line 5617 
  if (limit < 0) {
    unsigned long tmp_0;
    
#line 5620 
    tmp_0 = readq((void const volatile *)(np->mac_regs + 8U));
    
#line 5618 
    ;
    
#line 5618 
    ;
    
#line 5618 
    dev_err((struct device const *)np->device,"Port %u RX BMAC would not reset, BRXMAC_SW_RST[%llx]\n",(int)np->port,(unsigned long long)tmp_0);
    
#line 5621 
    __retres = -19;
    
#line 5621 
    goto return_label;
  }
  else ;
  
#line 5624 
  __retres = 0;
  return_label: 
#line 5624 
                return __retres;
}


#line 5627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_reset_rx_mac(struct niu *np)
{
  int __retres;
  
#line 5629 
  if ((np->flags & 65536U) != 0U) {
    int tmp;
    
#line 5630 
    tmp = niu_reset_rx_xmac(np);
    
#line 5630 
    __retres = tmp;
    
#line 5630 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 5632 
    tmp_0 = niu_reset_rx_bmac(np);
    
#line 5632 
    __retres = tmp_0;
    
#line 5632 
    goto return_label;
  }
  return_label: 
#line 5629 
                return __retres;
}


#line 5635  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_rx_xmac(struct niu *np)
{
  unsigned long i;
  u64 val;
  
#line 5637 
  struct niu_parent *parent = np->parent;
  
#line 5638 
  struct niu_rdc_tables *tp = & parent->rdc_group_cfg[(int)np->port];
  
#line 5639 
  int first_rdc_table = tp->first_table_num;
  
#line 5643 
  writeq(0UL,(void volatile *)(np->mac_regs + 2072U));
  
#line 5644 
  writeq(0UL,(void volatile *)(np->mac_regs + 2080U));
  
#line 5645 
  writeq(0UL,(void volatile *)(np->mac_regs + 2088U));
  
#line 5646 
  writeq(0UL,(void volatile *)(np->mac_regs + 2096U));
  
#line 5647 
  writeq(0UL,(void volatile *)(np->mac_regs + 2104U));
  
#line 5648 
  i = 0UL;
  
#line 5648 
  goto ldv_54527;
  ldv_54526: 
#line 5649 
  ;
  
#line 5649 
  writeq(0UL,(void volatile *)(np->mac_regs + (i + 264UL) * 8UL));
  
#line 5648 
  i += 1UL;
  ldv_54527: 
#line 5649 
  ;
  
#line 5648 
  if (i <= 15UL) 
#line 5650 
                 goto ldv_54526; else 
#line 5653 
                                      goto ldv_54528;
  ldv_54528: 
#line 5654 
  ;
  
#line 5650 
  writeq(18446744073709551615UL,(void volatile *)(np->mac_regs + 72U));
  
#line 5651 
  niu_set_primary_mac_rdc_table(np,first_rdc_table,1);
  
#line 5652 
  niu_set_multicast_mac_rdc_table(np,first_rdc_table,1);
  
#line 5654 
  val = (u64)readq((void const volatile *)(np->mac_regs + 96U));
  
#line 5655 
  val &= 18446744073707487487ULL;
  
#line 5667 
  val |= 32768ULL;
  
#line 5668 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 5670 
  writeq(0UL,(void volatile *)(np->mac_regs + 256U));
  
#line 5671 
  writeq(0UL,(void volatile *)(np->mac_regs + 264U));
  
#line 5672 
  writeq(0UL,(void volatile *)(np->mac_regs + 272U));
  
#line 5673 
  writeq(0UL,(void volatile *)(np->mac_regs + 280U));
  
#line 5674 
  writeq(0UL,(void volatile *)(np->mac_regs + 288U));
  
#line 5675 
  writeq(0UL,(void volatile *)(np->mac_regs + 296U));
  
#line 5676 
  writeq(0UL,(void volatile *)(np->mac_regs + 304U));
  
#line 5677 
  writeq(0UL,(void volatile *)(np->mac_regs + 312U));
  
#line 5678 
  writeq(0UL,(void volatile *)(np->mac_regs + 320U));
  
#line 5679 
  writeq(0UL,(void volatile *)(np->mac_regs + 328U));
  
#line 5680 
  writeq(0UL,(void volatile *)(np->mac_regs + 392U));
  
#line 5681 
  writeq(0UL,(void volatile *)(np->mac_regs + 336U));
  
#line 5682 
  writeq(0UL,(void volatile *)(np->mac_regs + 344U));
  
#line 5683 
  writeq(0UL,(void volatile *)(np->mac_regs + 352U));
  
#line 5684 
  writeq(0UL,(void volatile *)(np->mac_regs + 384U));
  
#line 5685 
  return;
}


#line 5687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_rx_bmac(struct niu *np)
{
  unsigned long i;
  u64 val;
  
#line 5689 
  struct niu_parent *parent = np->parent;
  
#line 5690 
  struct niu_rdc_tables *tp = & parent->rdc_group_cfg[(int)np->port];
  
#line 5691 
  int first_rdc_table = tp->first_table_num;
  
#line 5695 
  writeq(0UL,(void volatile *)(np->mac_regs + 664U));
  
#line 5696 
  writeq(0UL,(void volatile *)(np->mac_regs + 672U));
  
#line 5697 
  writeq(0UL,(void volatile *)(np->mac_regs + 680U));
  
#line 5698 
  writeq(0UL,(void volatile *)(np->mac_regs + 688U));
  
#line 5699 
  writeq(0UL,(void volatile *)(np->mac_regs + 696U));
  
#line 5700 
  i = 0UL;
  
#line 5700 
  goto ldv_54538;
  ldv_54537: 
#line 5701 
  ;
  
#line 5701 
  writeq(0UL,(void volatile *)(np->mac_regs + (i + 88UL) * 8UL));
  
#line 5700 
  i += 1UL;
  ldv_54538: 
#line 5701 
  ;
  
#line 5700 
  if (i <= 15UL) 
#line 5702 
                 goto ldv_54537; else 
#line 5705 
                                      goto ldv_54539;
  ldv_54539: 
#line 5706 
  ;
  
#line 5702 
  niu_set_primary_mac_rdc_table(np,first_rdc_table,1);
  
#line 5703 
  niu_set_multicast_mac_rdc_table(np,first_rdc_table,1);
  
#line 5704 
  writeq(18446744073709551615UL,(void volatile *)(np->mac_regs + 72U));
  
#line 5706 
  val = (u64)readq((void const volatile *)(np->mac_regs + 104U));
  
#line 5707 
  val &= 18446744073709551392ULL;
  
#line 5714 
  val |= 32ULL;
  
#line 5715 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 104U));
  
#line 5717 
  val = (u64)readq((void const volatile *)(np->mac_regs + 1016U));
  
#line 5718 
  val |= 1ULL;
  
#line 5719 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 1016U));
  
#line 5720 
  return;
}


#line 5722  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_init_rx_mac(struct niu *np)
{
  
#line 5724 
  niu_set_primary_mac(np,(np->dev)->dev_addr);
  
#line 5726 
  if ((np->flags & 65536U) != 0U) 
#line 5727 
                                  niu_init_rx_xmac(np); else 
#line 5729 
                                                             niu_init_rx_bmac(np);
  
#line 5730 
  return;
}


#line 5732  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_enable_tx_xmac(struct niu *np, int on)
{
  
#line 5734 
  u64 val = readq((void const volatile *)(np->mac_regs + 96U));
  
#line 5736 
  if (on != 0) 
#line 5737 
               val |= 1ULL; else 
#line 5739 
                                 val &= 18446744073709551614ULL;
  
#line 5740 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 5741 
  return;
}


#line 5743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_enable_tx_bmac(struct niu *np, int on)
{
  
#line 5745 
  u64 val = readq((void const volatile *)(np->mac_regs + 96U));
  
#line 5747 
  if (on != 0) 
#line 5748 
               val |= 1ULL; else 
#line 5750 
                                 val &= 18446744073709551614ULL;
  
#line 5751 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 5752 
  return;
}


#line 5754  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_enable_tx_mac(struct niu *np, int on)
{
  
#line 5756 
  if ((np->flags & 65536U) != 0U) 
#line 5757 
                                  niu_enable_tx_xmac(np,on); else 
#line 5759 
                                                                  niu_enable_tx_bmac(np,on);
  
#line 5760 
  return;
}


#line 5762  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_enable_rx_xmac(struct niu *np, int on)
{
  
#line 5764 
  u64 val = readq((void const volatile *)(np->mac_regs + 96U));
  
#line 5766 
  val &= 18446744073709518335ULL;
  
#line 5769 
  if ((np->flags & 2097152U) != 0U) 
#line 5770 
                                    val |= 32768ULL; else ;
  
#line 5771 
  if ((np->flags & 1048576U) != 0U) 
#line 5772 
                                    val |= 512ULL; else ;
  
#line 5774 
  if (on != 0) 
#line 5775 
               val |= 256ULL; else 
#line 5777 
                                   val &= 18446744073709551359ULL;
  
#line 5778 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U));
  
#line 5779 
  return;
}


#line 5781  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_enable_rx_bmac(struct niu *np, int on)
{
  
#line 5783 
  u64 val = readq((void const volatile *)(np->mac_regs + 104U));
  
#line 5785 
  val &= 18446744073709551575ULL;
  
#line 5788 
  if ((np->flags & 2097152U) != 0U) 
#line 5789 
                                    val |= 32ULL; else ;
  
#line 5790 
  if ((np->flags & 1048576U) != 0U) 
#line 5791 
                                    val |= 8ULL; else ;
  
#line 5793 
  if (on != 0) 
#line 5794 
               val |= 1ULL; else 
#line 5796 
                                 val &= 18446744073709551614ULL;
  
#line 5797 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 104U));
  
#line 5798 
  return;
}


#line 5800  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_enable_rx_mac(struct niu *np, int on)
{
  
#line 5802 
  if ((np->flags & 65536U) != 0U) 
#line 5803 
                                  niu_enable_rx_xmac(np,on); else 
#line 5805 
                                                                  niu_enable_rx_bmac(np,on);
  
#line 5806 
  return;
}


#line 5808  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_mac(struct niu *np)
{
  int __retres;
  int err;
  
#line 5812 
  niu_init_xif(np);
  
#line 5813 
  err = niu_init_pcs(np);
  
#line 5814 
  if (err != 0) {
    
#line 5815 
    __retres = err;
    
#line 5815 
    goto return_label;
  }
  else ;
  
#line 5817 
  err = niu_reset_tx_mac(np);
  
#line 5818 
  if (err != 0) {
    
#line 5819 
    __retres = err;
    
#line 5819 
    goto return_label;
  }
  else ;
  
#line 5820 
  niu_init_tx_mac(np);
  
#line 5821 
  err = niu_reset_rx_mac(np);
  
#line 5822 
  if (err != 0) {
    
#line 5823 
    __retres = err;
    
#line 5823 
    goto return_label;
  }
  else ;
  
#line 5824 
  niu_init_rx_mac(np);
  
#line 5831 
  niu_init_tx_mac(np);
  
#line 5832 
  niu_enable_tx_mac(np,1);
  
#line 5834 
  niu_enable_rx_mac(np,1);
  
#line 5836 
  __retres = 0;
  return_label: 
#line 5836 
                return __retres;
}


#line 5839  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_stop_one_tx_channel(struct niu *np, struct tx_ring_info *rp)
{
  
#line 5841 
  niu_tx_channel_stop(np,(int)rp->tx_channel);
  
#line 5842 
  return;
}


#line 5844  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_stop_tx_channels(struct niu *np)
{
  int i;
  
#line 5848 
  i = 0;
  
#line 5848 
  goto ldv_54585;
  ldv_54584: 
#line 5849 
  ;
  {
    
#line 5849 
    struct tx_ring_info *rp = np->tx_rings + i;
    
#line 5851 
    niu_stop_one_tx_channel(np,rp);
  }
  
#line 5848 
  i += 1;
  ldv_54585: 
#line 5849 
  ;
  
#line 5848 
  if (np->num_tx_rings > i) 
#line 5850 
                            goto ldv_54584; else 
#line 5853 
                                                 goto ldv_54586;
  ldv_54586: 
#line 5854 
  ;
  
#line 5855 
  return;
}


#line 5855  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_reset_one_tx_channel(struct niu *np, struct tx_ring_info *rp)
{
  
#line 5857 
  niu_tx_channel_reset(np,(int)rp->tx_channel);
  
#line 5858 
  return;
}


#line 5860  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_reset_tx_channels(struct niu *np)
{
  int i;
  
#line 5864 
  i = 0;
  
#line 5864 
  goto ldv_54597;
  ldv_54596: 
#line 5865 
  ;
  {
    
#line 5865 
    struct tx_ring_info *rp = np->tx_rings + i;
    
#line 5867 
    niu_reset_one_tx_channel(np,rp);
  }
  
#line 5864 
  i += 1;
  ldv_54597: 
#line 5865 
  ;
  
#line 5864 
  if (np->num_tx_rings > i) 
#line 5866 
                            goto ldv_54596; else 
#line 5869 
                                                 goto ldv_54598;
  ldv_54598: 
#line 5870 
  ;
  
#line 5871 
  return;
}


#line 5871  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_stop_one_rx_channel(struct niu *np, struct rx_ring_info *rp)
{
  
#line 5873 
  niu_enable_rx_channel(np,rp->rx_channel,0);
  
#line 5874 
  return;
}


#line 5876  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_stop_rx_channels(struct niu *np)
{
  int i;
  
#line 5880 
  i = 0;
  
#line 5880 
  goto ldv_54609;
  ldv_54608: 
#line 5881 
  ;
  {
    
#line 5881 
    struct rx_ring_info *rp = np->rx_rings + i;
    
#line 5883 
    niu_stop_one_rx_channel(np,rp);
  }
  
#line 5880 
  i += 1;
  ldv_54609: 
#line 5881 
  ;
  
#line 5880 
  if (np->num_rx_rings > i) 
#line 5882 
                            goto ldv_54608; else 
#line 5885 
                                                 goto ldv_54610;
  ldv_54610: 
#line 5886 
  ;
  
#line 5887 
  return;
}


#line 5887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_reset_one_rx_channel(struct niu *np, struct rx_ring_info *rp)
{
  
#line 5889 
  int channel = rp->rx_channel;
  
#line 5891 
  niu_rx_channel_reset(np,channel);
  
#line 5892 
  writeq(4161535UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291560UL)));
  
#line 5893 
  writeq(0UL,(void volatile *)(np->regs + ((unsigned long)channel * 512UL + 6291568UL)));
  
#line 5894 
  niu_enable_rx_channel(np,channel,0);
  
#line 5895 
  return;
}


#line 5897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_reset_rx_channels(struct niu *np)
{
  int i;
  
#line 5901 
  i = 0;
  
#line 5901 
  goto ldv_54622;
  ldv_54621: 
#line 5902 
  ;
  {
    
#line 5902 
    struct rx_ring_info *rp = np->rx_rings + i;
    
#line 5904 
    niu_reset_one_rx_channel(np,rp);
  }
  
#line 5901 
  i += 1;
  ldv_54622: 
#line 5902 
  ;
  
#line 5901 
  if (np->num_rx_rings > i) 
#line 5903 
                            goto ldv_54621; else 
#line 5906 
                                                 goto ldv_54623;
  ldv_54623: 
#line 5907 
  ;
  
#line 5908 
  return;
}


#line 5908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_disable_ipp(struct niu *np)
{
  u64 rd;
  u64 wr;
  u64 val;
  int limit;
  
#line 5913 
  rd = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621712U)));
  
#line 5914 
  wr = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621720U)));
  
#line 5915 
  limit = 100;
  
#line 5916 
  goto ldv_54632;
  ldv_54631: 
#line 5917 
  ;
  
#line 5917 
  rd = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621712U)));
  
#line 5918 
  wr = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621720U)));
  ldv_54632: 
#line 5919 
  ;
  
#line 5916 
  limit -= 1;
  
#line 5916 
  if (limit >= 0) {
    
#line 5916 
    if (rd != wr) 
#line 5918 
                  goto ldv_54631; else 
#line 5921 
                                       goto ldv_54633;
  }
  else 
#line 5921 
       goto ldv_54633;
  ldv_54633: 
#line 5922 
  ;
  
#line 5920 
  if (limit < 0 && (rd != 0ULL && wr != 1ULL)) {
    unsigned long tmp_3;
    unsigned long tmp_4;
    
#line 5924 
    tmp_3 = readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621720U)));
    
#line 5923 
    tmp_4 = readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621712U)));
    
#line 5922 
    ;
    
#line 5922 
    netdev_err((struct net_device const *)np->dev,"IPP would not quiesce, rd_ptr[%llx] wr_ptr[%llx]\n",(unsigned long long)tmp_4,(unsigned long long)tmp_3);
  }
  else ;
  
#line 5927 
  val = (u64)readq((void const volatile *)(np->regs + (np->ipp_off + (unsigned long)2621440U)));
  
#line 5928 
  val &= 18446744073709551586ULL;
  
#line 5932 
  writeq((unsigned long)val,(void volatile *)(np->regs + (np->ipp_off + (unsigned long)2621440U)));
  
#line 5934 
  niu_ipp_reset(np);
  
#line 5935 
  return;
}


#line 5937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_hw(struct niu *np)
{
  int __retres;
  int i;
  int err;
  
#line 5941 
  if ((np->msg_enable & 32U) != 0U) 
#line 5941 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Initialize TXC\n"); else ;
  
#line 5942 
  niu_txc_enable_port(np,1);
  
#line 5943 
  niu_txc_port_dma_enable(np,1);
  
#line 5944 
  niu_txc_set_imask(np,0ULL);
  
#line 5946 
  if ((np->msg_enable & 32U) != 0U) 
#line 5946 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Initialize TX channels\n"); else ;
  
#line 5947 
  i = 0;
  
#line 5947 
  goto ldv_54641;
  ldv_54640: 
#line 5948 
  ;
  {
    
#line 5948 
    struct tx_ring_info *rp = np->tx_rings + i;
    
#line 5950 
    err = niu_init_one_tx_channel(np,rp);
    
#line 5951 
    if (err != 0) {
      
#line 5952 
      __retres = err;
      
#line 5952 
      goto return_label;
    }
    else ;
  }
  
#line 5947 
  i += 1;
  ldv_54641: 
#line 5948 
  ;
  
#line 5947 
  if (np->num_tx_rings > i) 
#line 5949 
                            goto ldv_54640; else 
#line 5952 
                                                 goto ldv_54642;
  ldv_54642: 
#line 5953 
  ;
  
#line 5955 
  if ((np->msg_enable & 32U) != 0U) 
#line 5955 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Initialize RX channels\n"); else ;
  
#line 5956 
  err = niu_init_rx_channels(np);
  
#line 5957 
  if (err != 0) 
#line 5958 
                goto out_uninit_tx_channels; else ;
  
#line 5960 
  if ((np->msg_enable & 32U) != 0U) 
#line 5960 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Initialize classifier\n"); else ;
  
#line 5961 
  err = niu_init_classifier_hw(np);
  
#line 5962 
  if (err != 0) 
#line 5963 
                goto out_uninit_rx_channels; else ;
  
#line 5965 
  if ((np->msg_enable & 32U) != 0U) 
#line 5965 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Initialize ZCP\n"); else ;
  
#line 5966 
  err = niu_init_zcp(np);
  
#line 5967 
  if (err != 0) 
#line 5968 
                goto out_uninit_rx_channels; else ;
  
#line 5970 
  if ((np->msg_enable & 32U) != 0U) 
#line 5970 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Initialize IPP\n"); else ;
  
#line 5971 
  err = niu_init_ipp(np);
  
#line 5972 
  if (err != 0) 
#line 5973 
                goto out_uninit_rx_channels; else ;
  
#line 5975 
  if ((np->msg_enable & 32U) != 0U) 
#line 5975 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Initialize MAC\n"); else ;
  
#line 5976 
  err = niu_init_mac(np);
  
#line 5977 
  if (err != 0) 
#line 5978 
                goto out_uninit_ipp; else ;
  
#line 5980 
  __retres = 0;
  
#line 5980 
  goto return_label;
  out_uninit_ipp: 
#line 5982 
  ;
  
#line 5983 
  if ((np->msg_enable & 32U) != 0U) 
#line 5983 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Uninit IPP\n"); else ;
  
#line 5984 
  niu_disable_ipp(np);
  out_uninit_rx_channels: 
#line 5986 
  ;
  
#line 5987 
  if ((np->msg_enable & 32U) != 0U) 
#line 5987 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Uninit RX channels\n"); else ;
  
#line 5988 
  niu_stop_rx_channels(np);
  
#line 5989 
  niu_reset_rx_channels(np);
  out_uninit_tx_channels: 
#line 5991 
  ;
  
#line 5992 
  if ((np->msg_enable & 32U) != 0U) 
#line 5992 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Uninit TX channels\n"); else ;
  
#line 5993 
  niu_stop_tx_channels(np);
  
#line 5994 
  niu_reset_tx_channels(np);
  
#line 5996 
  __retres = err;
  return_label: 
#line 5996 
                return __retres;
}


#line 5999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_stop_hw(struct niu *np)
{
  
#line 6001 
  if ((np->msg_enable & 16U) != 0U) 
#line 6001 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Disable interrupts\n"); else ;
  
#line 6002 
  niu_enable_interrupts(np,0);
  
#line 6004 
  if ((np->msg_enable & 16U) != 0U) 
#line 6004 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Disable RX MAC\n"); else ;
  
#line 6005 
  niu_enable_rx_mac(np,0);
  
#line 6007 
  if ((np->msg_enable & 16U) != 0U) 
#line 6007 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Disable IPP\n"); else ;
  
#line 6008 
  niu_disable_ipp(np);
  
#line 6010 
  if ((np->msg_enable & 16U) != 0U) 
#line 6010 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Stop TX channels\n"); else ;
  
#line 6011 
  niu_stop_tx_channels(np);
  
#line 6013 
  if ((np->msg_enable & 16U) != 0U) 
#line 6013 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Stop RX channels\n"); else ;
  
#line 6014 
  niu_stop_rx_channels(np);
  
#line 6016 
  if ((np->msg_enable & 16U) != 0U) 
#line 6016 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Reset TX channels\n"); else ;
  
#line 6017 
  niu_reset_tx_channels(np);
  
#line 6019 
  if ((np->msg_enable & 16U) != 0U) 
#line 6019 
                                    netdev_printk("\001",(struct net_device const *)np->dev,"Reset RX channels\n"); else ;
  
#line 6020 
  niu_reset_rx_channels(np);
  
#line 6021 
  return;
}


#line 6023  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_set_irq_name(struct niu *np)
{
  int i;
  
#line 6025 
  int port = (int)np->port;
  
#line 6026 
  int j = 1;
  
#line 6028 
  sprintf((char *)(& np->irq_name[0]),"%s:MAC",(char *)(& (np->dev)->name));
  
#line 6030 
  if (port == 0) {
    
#line 6031 
    sprintf((char *)(& np->irq_name[1]),"%s:MIF",(char *)(& (np->dev)->name));
    
#line 6032 
    sprintf((char *)(& np->irq_name[2]),"%s:SYSERR",(char *)(& (np->dev)->name));
    
#line 6033 
    j = 3;
  }
  else ;
  
#line 6036 
  i = 0;
  
#line 6036 
  goto ldv_54656;
  ldv_54655: 
#line 6037 
  ;
  
#line 6037 
  if (np->num_rx_rings > i) 
#line 6038 
                            sprintf((char *)(& np->irq_name[i + j]),"%s-rx-%d",(char *)(& (np->dev)->name),i);
  else 
    
#line 6040 
    if (np->num_tx_rings + np->num_rx_rings > i) 
#line 6041 
                                                 sprintf((char *)(& np->irq_name[i + j]),"%s-tx-%d",(char *)(& (np->dev)->name),i - np->num_rx_rings); else ;
  
#line 6036 
  i += 1;
  ldv_54656: 
#line 6037 
  ;
  
#line 6036 
  if (np->num_ldg - j > i) 
#line 6038 
                           goto ldv_54655; else 
#line 6041 
                                                goto ldv_54657;
  ldv_54657: 
#line 6042 
  ;
  
#line 6043 
  return;
}


#line 6046  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_request_irq(struct niu *np)
{
  int __retres;
  int i;
  int j;
  int err;
  
#line 6050 
  niu_set_irq_name(np);
  
#line 6052 
  err = 0;
  
#line 6053 
  i = 0;
  
#line 6053 
  goto ldv_54667;
  ldv_54666: 
#line 6054 
  ;
  {
    
#line 6054 
    struct niu_ldg *lp = & np->ldg[i];
    
#line 6056 
    err = ldv_request_irq_100(lp->irq,& niu_interrupt,128UL,(char const *)(& np->irq_name[i]),(void *)lp);
    
#line 6058 
    if (err != 0) 
#line 6059 
                  goto out_free_irqs; else ;
  }
  
#line 6053 
  i += 1;
  ldv_54667: 
#line 6054 
  ;
  
#line 6053 
  if (np->num_ldg > i) 
#line 6055 
                       goto ldv_54666; else 
#line 6058 
                                            goto ldv_54668;
  ldv_54668: 
#line 6059 
  ;
  
#line 6063 
  __retres = 0;
  
#line 6063 
  goto return_label;
  out_free_irqs: 
#line 6065 
  ;
  
#line 6066 
  j = 0;
  
#line 6066 
  goto ldv_54671;
  ldv_54670: 
#line 6067 
  ;
  {
    
#line 6067 
    struct niu_ldg *lp_0 = & np->ldg[j];
    
#line 6069 
    ldv_free_irq_101(lp_0->irq,(void *)lp_0);
  }
  
#line 6066 
  j += 1;
  ldv_54671: 
#line 6067 
  ;
  
#line 6066 
  if (j < i) 
#line 6068 
             goto ldv_54670; else 
#line 6071 
                                  goto ldv_54672;
  ldv_54672: 
#line 6072 
  ;
  
#line 6071 
  __retres = err;
  return_label: 
#line 6071 
                return __retres;
}


#line 6074  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_free_irq(struct niu *np)
{
  int i;
  
#line 6078 
  i = 0;
  
#line 6078 
  goto ldv_54679;
  ldv_54678: 
#line 6079 
  ;
  {
    
#line 6079 
    struct niu_ldg *lp = & np->ldg[i];
    
#line 6081 
    ldv_free_irq_102(lp->irq,(void *)lp);
  }
  
#line 6078 
  i += 1;
  ldv_54679: 
#line 6079 
  ;
  
#line 6078 
  if (np->num_ldg > i) 
#line 6080 
                       goto ldv_54678; else 
#line 6083 
                                            goto ldv_54680;
  ldv_54680: 
#line 6084 
  ;
  
#line 6085 
  return;
}


#line 6085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_enable_napi(struct niu *np)
{
  int i;
  
#line 6089 
  i = 0;
  
#line 6089 
  goto ldv_54686;
  ldv_54685: 
#line 6090 
  ;
  
#line 6090 
  napi_enable(& np->ldg[i].napi);
  
#line 6089 
  i += 1;
  ldv_54686: 
#line 6090 
  ;
  
#line 6089 
  if (np->num_ldg > i) 
#line 6091 
                       goto ldv_54685; else 
#line 6094 
                                            goto ldv_54687;
  ldv_54687: 
#line 6095 
  ;
  
#line 6096 
  return;
}


#line 6093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_disable_napi(struct niu *np)
{
  int i;
  
#line 6097 
  i = 0;
  
#line 6097 
  goto ldv_54693;
  ldv_54692: 
#line 6098 
  ;
  
#line 6098 
  napi_disable(& np->ldg[i].napi);
  
#line 6097 
  i += 1;
  ldv_54693: 
#line 6098 
  ;
  
#line 6097 
  if (np->num_ldg > i) 
#line 6099 
                       goto ldv_54692; else 
#line 6102 
                                            goto ldv_54694;
  ldv_54694: 
#line 6103 
  ;
  
#line 6104 
  return;
}


#line 6101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_open(struct net_device *dev)
{
  int __retres;
  int err;
  
#line 6103 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6106 
  netif_carrier_off(dev);
  
#line 6108 
  err = niu_alloc_channels(np);
  
#line 6109 
  if (err != 0) 
#line 6110 
                goto out_err; else ;
  
#line 6112 
  err = niu_enable_interrupts(np,0);
  
#line 6113 
  if (err != 0) 
#line 6114 
                goto out_free_channels; else ;
  
#line 6116 
  err = niu_request_irq(np);
  
#line 6117 
  if (err != 0) 
#line 6118 
                goto out_free_channels; else ;
  
#line 6120 
  niu_enable_napi(np);
  
#line 6122 
  ldv_spin_lock_irq_103(& np->lock);
  
#line 6124 
  err = niu_init_hw(np);
  
#line 6125 
  if (err == 0) {
    {
      struct lock_class_key __key;
      
#line 6126 
      init_timer_key(& np->timer,0U,"(&np->timer)",& __key);
    }
    
#line 6127 
    np->timer.expires = jiffies + 250UL;
    
#line 6128 
    np->timer.data = (unsigned long)np;
    
#line 6129 
    np->timer.function = & niu_timer;
    
#line 6131 
    err = niu_enable_interrupts(np,1);
    
#line 6132 
    if (err != 0) 
#line 6133 
                  niu_stop_hw(np); else ;
  }
  else ;
  
#line 6136 
  ldv_spin_unlock_irq_104(& np->lock);
  
#line 6138 
  if (err != 0) {
    
#line 6139 
    niu_disable_napi(np);
    
#line 6140 
    goto out_free_irq;
  }
  else ;
  
#line 6143 
  netif_tx_start_all_queues(dev);
  
#line 6145 
  if ((unsigned int)np->link_config.loopback_mode != 0U) 
#line 6146 
                                                         netif_carrier_on(dev); else ;
  
#line 6148 
  add_timer(& np->timer);
  
#line 6150 
  __retres = 0;
  
#line 6150 
  goto return_label;
  out_free_irq: 
#line 6152 
  ;
  
#line 6153 
  niu_free_irq(np);
  out_free_channels: 
#line 6155 
  ;
  
#line 6156 
  niu_free_channels(np);
  out_err: 
#line 6158 
  ;
  
#line 6159 
  __retres = err;
  return_label: 
#line 6159 
                return __retres;
}


#line 6162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_full_shutdown(struct niu *np, struct net_device *dev)
{
  
#line 6164 
  cancel_work_sync(& np->reset_task);
  
#line 6166 
  niu_disable_napi(np);
  
#line 6167 
  netif_tx_stop_all_queues(dev);
  
#line 6169 
  ldv_del_timer_sync_105(& np->timer);
  
#line 6171 
  ldv_spin_lock_irq_106(& np->lock);
  
#line 6173 
  niu_stop_hw(np);
  
#line 6175 
  ldv_spin_unlock_irq_107(& np->lock);
  
#line 6176 
  return;
}


#line 6178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_close(struct net_device *dev)
{
  int __retres;
  
#line 6180 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6182 
  niu_full_shutdown(np,dev);
  
#line 6184 
  niu_free_irq(np);
  
#line 6186 
  niu_free_channels(np);
  
#line 6188 
  niu_handle_led(np,0);
  
#line 6190 
  __retres = 0;
  
#line 6190 
  return __retres;
}


#line 6193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_sync_xmac_stats(struct niu *np)
{
  unsigned long tmp;
  unsigned long tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  unsigned long tmp_3;
  unsigned long tmp_4;
  unsigned long tmp_5;
  unsigned long tmp_6;
  unsigned long tmp_7;
  unsigned long tmp_8;
  unsigned long tmp_9;
  unsigned long tmp_10;
  unsigned long tmp_11;
  unsigned long tmp_12;
  unsigned long tmp_13;
  unsigned long tmp_14;
  unsigned long tmp_15;
  unsigned long tmp_16;
  
#line 6195 
  struct niu_xmac_stats *mp = & np->mac_stats.xmac;
  
#line 6197 
  tmp = readq((void const volatile *)(np->mac_regs + 368U));
  
#line 6197 
  mp->tx_frames += (unsigned long long)tmp;
  
#line 6198 
  tmp_0 = readq((void const volatile *)(np->mac_regs + 376U));
  
#line 6198 
  mp->tx_bytes += (unsigned long long)tmp_0;
  
#line 6200 
  tmp_1 = readq((void const volatile *)(np->mac_regs + 384U));
  
#line 6200 
  mp->rx_link_faults += (unsigned long long)tmp_1;
  
#line 6201 
  tmp_2 = readq((void const volatile *)(np->mac_regs + 360U));
  
#line 6201 
  mp->rx_align_errors += (unsigned long long)tmp_2;
  
#line 6202 
  tmp_3 = readq((void const volatile *)(np->mac_regs + 280U));
  
#line 6202 
  mp->rx_frags += (unsigned long long)tmp_3;
  
#line 6203 
  tmp_4 = readq((void const volatile *)(np->mac_regs + 272U));
  
#line 6203 
  mp->rx_mcasts += (unsigned long long)tmp_4;
  
#line 6204 
  tmp_5 = readq((void const volatile *)(np->mac_regs + 264U));
  
#line 6204 
  mp->rx_bcasts += (unsigned long long)tmp_5;
  
#line 6205 
  tmp_6 = readq((void const volatile *)(np->mac_regs + 288U));
  
#line 6205 
  mp->rx_hist_cnt1 += (unsigned long long)tmp_6;
  
#line 6206 
  tmp_7 = readq((void const volatile *)(np->mac_regs + 296U));
  
#line 6206 
  mp->rx_hist_cnt2 += (unsigned long long)tmp_7;
  
#line 6207 
  tmp_8 = readq((void const volatile *)(np->mac_regs + 304U));
  
#line 6207 
  mp->rx_hist_cnt3 += (unsigned long long)tmp_8;
  
#line 6208 
  tmp_9 = readq((void const volatile *)(np->mac_regs + 312U));
  
#line 6208 
  mp->rx_hist_cnt4 += (unsigned long long)tmp_9;
  
#line 6209 
  tmp_10 = readq((void const volatile *)(np->mac_regs + 320U));
  
#line 6209 
  mp->rx_hist_cnt5 += (unsigned long long)tmp_10;
  
#line 6210 
  tmp_11 = readq((void const volatile *)(np->mac_regs + 328U));
  
#line 6210 
  mp->rx_hist_cnt6 += (unsigned long long)tmp_11;
  
#line 6211 
  tmp_12 = readq((void const volatile *)(np->mac_regs + 392U));
  
#line 6211 
  mp->rx_hist_cnt7 += (unsigned long long)tmp_12;
  
#line 6212 
  tmp_13 = readq((void const volatile *)(np->mac_regs + 256U));
  
#line 6212 
  mp->rx_octets += (unsigned long long)tmp_13;
  
#line 6213 
  tmp_14 = readq((void const volatile *)(np->mac_regs + 352U));
  
#line 6213 
  mp->rx_code_violations += (unsigned long long)tmp_14;
  
#line 6214 
  tmp_15 = readq((void const volatile *)(np->mac_regs + 336U));
  
#line 6214 
  mp->rx_len_errors += (unsigned long long)tmp_15;
  
#line 6215 
  tmp_16 = readq((void const volatile *)(np->mac_regs + 344U));
  
#line 6215 
  mp->rx_crc_errors += (unsigned long long)tmp_16;
  
#line 6216 
  return;
}


#line 6218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_sync_bmac_stats(struct niu *np)
{
  unsigned long tmp;
  unsigned long tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  unsigned long tmp_3;
  unsigned long tmp_4;
  
#line 6220 
  struct niu_bmac_stats *mp = & np->mac_stats.bmac;
  
#line 6222 
  tmp = readq((void const volatile *)(np->mac_regs + 1096U));
  
#line 6222 
  mp->tx_bytes += (unsigned long long)tmp;
  
#line 6223 
  tmp_0 = readq((void const volatile *)(np->mac_regs + 1104U));
  
#line 6223 
  mp->tx_frames += (unsigned long long)tmp_0;
  
#line 6225 
  tmp_1 = readq((void const volatile *)(np->mac_regs + 880U));
  
#line 6225 
  mp->rx_frames += (unsigned long long)tmp_1;
  
#line 6226 
  tmp_2 = readq((void const volatile *)(np->mac_regs + 896U));
  
#line 6226 
  mp->rx_align_errors += (unsigned long long)tmp_2;
  
#line 6227 
  tmp_3 = readq((void const volatile *)(np->mac_regs + 896U));
  
#line 6227 
  mp->rx_crc_errors += (unsigned long long)tmp_3;
  
#line 6228 
  tmp_4 = readq((void const volatile *)(np->mac_regs + 912U));
  
#line 6228 
  mp->rx_len_errors += (unsigned long long)tmp_4;
  
#line 6229 
  return;
}


#line 6231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_sync_mac_stats(struct niu *np)
{
  
#line 6233 
  if ((np->flags & 65536U) != 0U) 
#line 6234 
                                  niu_sync_xmac_stats(np); else 
#line 6236 
                                                                niu_sync_bmac_stats(np);
  
#line 6237 
  return;
}


#line 6239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_get_rx_stats(struct niu *np, struct rtnl_link_stats64 *stats)
{
  u64 pkts;
  u64 dropped;
  u64 errors;
  u64 bytes;
  struct rx_ring_info *rx_rings;
  int i;
  struct rx_ring_info * volatile *tmp;
  
#line 6246 
  bytes = 0ULL;
  
#line 6246 
  errors = bytes;
  
#line 6246 
  dropped = errors;
  
#line 6246 
  pkts = dropped;
  {
    
#line 6248 
    struct rx_ring_info *__var = (struct rx_ring_info *)0;
    
#line 6248 
    tmp = (struct rx_ring_info * volatile *)(& np->rx_rings);
  }
  
#line 6248 
  rx_rings = *tmp;
  
#line 6249 
  if (rx_rings == (struct rx_ring_info *)0) 
#line 6250 
                                            goto no_rings; else ;
  
#line 6252 
  i = 0;
  
#line 6252 
  goto ldv_54738;
  ldv_54737: 
#line 6253 
  ;
  {
    
#line 6253 
    struct rx_ring_info *rp = rx_rings + i;
    
#line 6255 
    niu_sync_rx_discard_stats(np,rp,0);
    
#line 6257 
    pkts = rp->rx_packets + pkts;
    
#line 6258 
    bytes = rp->rx_bytes + bytes;
    
#line 6259 
    dropped = rp->rx_dropped + dropped;
    
#line 6260 
    errors = rp->rx_errors + errors;
  }
  
#line 6252 
  i += 1;
  ldv_54738: 
#line 6253 
  ;
  
#line 6252 
  if (np->num_rx_rings > i) 
#line 6254 
                            goto ldv_54737; else 
#line 6257 
                                                 goto ldv_54739;
  ldv_54739: 
#line 6258 
  ;
  no_rings: 
#line 6263 
  ;
  
#line 6264 
  stats->rx_packets = pkts;
  
#line 6265 
  stats->rx_bytes = bytes;
  
#line 6266 
  stats->rx_dropped = dropped;
  
#line 6267 
  stats->rx_errors = errors;
  
#line 6268 
  return;
}


#line 6270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_get_tx_stats(struct niu *np, struct rtnl_link_stats64 *stats)
{
  u64 pkts;
  u64 errors;
  u64 bytes;
  struct tx_ring_info *tx_rings;
  int i;
  struct tx_ring_info * volatile *tmp;
  
#line 6277 
  bytes = 0ULL;
  
#line 6277 
  errors = bytes;
  
#line 6277 
  pkts = errors;
  {
    
#line 6279 
    struct tx_ring_info *__var = (struct tx_ring_info *)0;
    
#line 6279 
    tmp = (struct tx_ring_info * volatile *)(& np->tx_rings);
  }
  
#line 6279 
  tx_rings = *tmp;
  
#line 6280 
  if (tx_rings == (struct tx_ring_info *)0) 
#line 6281 
                                            goto no_rings; else ;
  
#line 6283 
  i = 0;
  
#line 6283 
  goto ldv_54754;
  ldv_54753: 
#line 6284 
  ;
  {
    
#line 6284 
    struct tx_ring_info *rp = tx_rings + i;
    
#line 6286 
    pkts = rp->tx_packets + pkts;
    
#line 6287 
    bytes = rp->tx_bytes + bytes;
    
#line 6288 
    errors = rp->tx_errors + errors;
  }
  
#line 6283 
  i += 1;
  ldv_54754: 
#line 6284 
  ;
  
#line 6283 
  if (np->num_tx_rings > i) 
#line 6285 
                            goto ldv_54753; else 
#line 6288 
                                                 goto ldv_54755;
  ldv_54755: 
#line 6289 
  ;
  no_rings: 
#line 6291 
  ;
  
#line 6292 
  stats->tx_packets = pkts;
  
#line 6293 
  stats->tx_bytes = bytes;
  
#line 6294 
  stats->tx_errors = errors;
  
#line 6295 
  return;
}


#line 6297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct rtnl_link_stats64 *niu_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
{
  bool tmp_0;
  
#line 6300 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6302 
  tmp_0 = netif_running((struct net_device const *)dev);
  
#line 6302 
  if ((int)tmp_0 != 0) {
    
#line 6303 
    niu_get_rx_stats(np,stats);
    
#line 6304 
    niu_get_tx_stats(np,stats);
  }
  else ;
  
#line 6307 
  return stats;
}


#line 6310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_load_hash_xmac(struct niu *np, u16 *hash)
{
  int i;
  
#line 6314 
  i = 0;
  
#line 6314 
  goto ldv_54767;
  ldv_54766: 
#line 6315 
  ;
  
#line 6315 
  writeq((unsigned long)*(hash + i),(void volatile *)(np->mac_regs + ((unsigned long)i + 264UL) * 8UL));
  
#line 6314 
  i += 1;
  ldv_54767: 
#line 6315 
  ;
  
#line 6314 
  if (i <= 15) 
#line 6316 
               goto ldv_54766; else 
#line 6319 
                                    goto ldv_54768;
  ldv_54768: 
#line 6320 
  ;
  
#line 6321 
  return;
}


#line 6318  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_load_hash_bmac(struct niu *np, u16 *hash)
{
  int i;
  
#line 6322 
  i = 0;
  
#line 6322 
  goto ldv_54775;
  ldv_54774: 
#line 6323 
  ;
  
#line 6323 
  writeq((unsigned long)*(hash + i),(void volatile *)(np->mac_regs + ((unsigned long)i + 88UL) * 8UL));
  
#line 6322 
  i += 1;
  ldv_54775: 
#line 6323 
  ;
  
#line 6322 
  if (i <= 15) 
#line 6324 
               goto ldv_54774; else 
#line 6327 
                                    goto ldv_54776;
  ldv_54776: 
#line 6328 
  ;
  
#line 6329 
  return;
}


#line 6326  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_load_hash(struct niu *np, u16 *hash)
{
  
#line 6328 
  if ((np->flags & 65536U) != 0U) 
#line 6329 
                                  niu_load_hash_xmac(np,hash); else 
#line 6331 
                                                                    niu_load_hash_bmac(np,hash);
  
#line 6332 
  return;
}


#line 6334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_set_rx_mode(struct net_device *dev)
{
  int i;
  int alt_cnt;
  int err;
  struct netdev_hw_addr *ha;
  unsigned long flags;
  int tmp_0;
  
#line 6336 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6340 
  u16 hash[16U] = {(unsigned short)0U};
  
#line 6342 
  ldv___ldv_spin_lock_108(& np->lock);
  
#line 6343 
  niu_enable_rx_mac(np,0);
  
#line 6345 
  np->flags &= 4291821567U;
  
#line 6346 
  if ((dev->flags & 256U) != 0U) 
#line 6347 
                                 np->flags |= 1048576U; else ;
  
#line 6348 
  if ((dev->flags & 512U) != 0U || dev->mc.count != 0) 
#line 6349 
                                                       np->flags |= 2097152U; else ;
  
#line 6351 
  alt_cnt = dev->uc.count;
  
#line 6352 
  tmp_0 = niu_num_alt_addr(np);
  
#line 6352 
  ;
  
#line 6352 
  if (tmp_0 < alt_cnt) {
    
#line 6353 
    alt_cnt = 0;
    
#line 6354 
    np->flags |= 1048576U;
  }
  else ;
  
#line 6357 
  if (alt_cnt != 0) {
    struct netdev_hw_addr *tmp_1;
    struct netdev_hw_addr *tmp_2;
    
#line 6358 
    int index = 0;
    {
      
#line 6360 
      struct list_head const *__mptr = (struct list_head const *)dev->uc.list.next;
      
#line 6360 
      tmp_1 = (struct netdev_hw_addr *)__mptr;
    }
    
#line 6360 
    ha = tmp_1;
    
#line 6360 
    goto ldv_54797;
    ldv_54796: 
#line 6361 
    ;
    
#line 6361 
    err = niu_set_alt_mac(np,index,(unsigned char *)(& ha->addr));
    
#line 6362 
    if (err != 0) 
#line 6363 
                  netdev_warn((struct net_device const *)dev,"Error %d adding alt mac %d\n",err,index); else ;
    
#line 6365 
    err = niu_enable_alt_mac(np,index,1);
    
#line 6366 
    if (err != 0) 
#line 6367 
                  netdev_warn((struct net_device const *)dev,"Error %d enabling alt mac %d\n",err,index); else ;
    
#line 6370 
    index += 1;
    {
      
#line 6360 
      struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
      
#line 6360 
      tmp_2 = (struct netdev_hw_addr *)__mptr_0;
    }
    
#line 6360 
    ha = tmp_2;
    ldv_54797: 
#line 6362 
    ;
    
#line 6360 
    if (& ha->list != & dev->uc.list) 
#line 6362 
                                      goto ldv_54796; else 
#line 6365 
                                                           goto ldv_54798;
    ldv_54798: 
#line 6366 
    ;
  }
  else {
    int alt_start;
    int tmp_3;
    
#line 6374 
    if ((np->flags & 65536U) != 0U) 
#line 6375 
                                    alt_start = 0; else 
#line 6377 
                                                        alt_start = 1;
    
#line 6378 
    i = alt_start;
    
#line 6378 
    goto ldv_54801;
    ldv_54800: 
#line 6379 
    ;
    
#line 6379 
    err = niu_enable_alt_mac(np,i,0);
    
#line 6380 
    if (err != 0) 
#line 6381 
                  netdev_warn((struct net_device const *)dev,"Error %d disabling alt mac %d\n",err,i); else ;
    
#line 6378 
    i += 1;
    ldv_54801: 
#line 6379 
    ;
    
#line 6378 
    tmp_3 = niu_num_alt_addr(np);
    
#line 6378 
    ;
    
#line 6378 
    if (tmp_3 > i) 
#line 6380 
                   goto ldv_54800; else 
#line 6383 
                                        goto ldv_54802;
    ldv_54802: 
#line 6384 
    ;
  }
  
#line 6385 
  if ((dev->flags & 512U) != 0U) {
    
#line 6386 
    i = 0;
    
#line 6386 
    goto ldv_54804;
    ldv_54803: 
#line 6387 
    ;
    
#line 6387 
    hash[i] = (unsigned short)65535U;
    
#line 6386 
    i += 1;
    ldv_54804: 
#line 6387 
    ;
    
#line 6386 
    if (i <= 15) 
#line 6388 
                 goto ldv_54803; else 
#line 6391 
                                      goto ldv_54805;
    ldv_54805: 
#line 6392 
    ;
  }
  else 
    
#line 6388 
    if (dev->mc.count != 0) {
      struct netdev_hw_addr *tmp_4;
      struct netdev_hw_addr *tmp_6;
      {
        
#line 6389 
        struct list_head const *__mptr_1 = (struct list_head const *)dev->mc.list.next;
        
#line 6389 
        tmp_4 = (struct netdev_hw_addr *)__mptr_1;
      }
      
#line 6389 
      ha = tmp_4;
      
#line 6389 
      goto ldv_54812;
      ldv_54811: 
#line 6390 
      ;
      {
        
#line 6390 
        u32 crc = crc32_le(4294967295U,(unsigned char const *)(& ha->addr),6UL);
        
#line 6392 
        crc >>= 24;
        
#line 6393 
        hash[crc >> 4] = (unsigned short)((int)hash[crc >> 4] | (1 << (~ crc & 15U)));
      }
      {
        
#line 6389 
        struct list_head const *__mptr_2 = (struct list_head const *)ha->list.next;
        
#line 6389 
        tmp_6 = (struct netdev_hw_addr *)__mptr_2;
      }
      
#line 6389 
      ha = tmp_6;
      ldv_54812: 
#line 6391 
      ;
      
#line 6389 
      if (& ha->list != & dev->mc.list) 
#line 6391 
                                        goto ldv_54811; else 
#line 6394 
                                                             goto ldv_54813;
      ldv_54813: 
#line 6395 
      ;
    }
    else ;
  
#line 6397 
  if ((np->flags & 2097152U) != 0U) 
#line 6398 
                                    niu_load_hash(np,(u16 *)(& hash)); else ;
  
#line 6400 
  niu_enable_rx_mac(np,1);
  
#line 6401 
  ldv_spin_unlock_irqrestore_109(& np->lock,flags);
  
#line 6402 
  return;
}


#line 6404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_mac_addr(struct net_device *dev, void *p)
{
  int __retres;
  unsigned long flags;
  int tmp_1;
  bool tmp_0;
  int tmp_3;
  bool tmp_2;
  
#line 6406 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6407 
  struct sockaddr *addr = (struct sockaddr *)p;
  
#line 6410 
  tmp_0 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 6410 
  if (tmp_0) 
#line 6410 
             tmp_1 = 0; else 
#line 6410 
                             tmp_1 = 1;
  
#line 6410 
  if (tmp_1) {
    
#line 6411 
    __retres = -99;
    
#line 6411 
    goto return_label;
  }
  else ;
  
#line 6413 
  memcpy((void *)dev->dev_addr,(void const *)(& addr->sa_data),6UL);
  
#line 6415 
  tmp_2 = netif_running((struct net_device const *)dev);
  
#line 6415 
  if (tmp_2) 
#line 6415 
             tmp_3 = 0; else 
#line 6415 
                             tmp_3 = 1;
  
#line 6415 
  if (tmp_3) {
    
#line 6416 
    __retres = 0;
    
#line 6416 
    goto return_label;
  }
  else ;
  
#line 6418 
  ldv___ldv_spin_lock_110(& np->lock);
  
#line 6419 
  niu_enable_rx_mac(np,0);
  
#line 6420 
  niu_set_primary_mac(np,dev->dev_addr);
  
#line 6421 
  niu_enable_rx_mac(np,1);
  
#line 6422 
  ldv_spin_unlock_irqrestore_111(& np->lock,flags);
  
#line 6424 
  __retres = 0;
  return_label: 
#line 6424 
                return __retres;
}


#line 6427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  int __retres;
  
#line 6429 
  __retres = -95;
  
#line 6429 
  return __retres;
}


#line 6432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_netif_stop(struct niu *np)
{
  
#line 6434 
  (np->dev)->trans_start = jiffies;
  
#line 6436 
  niu_disable_napi(np);
  
#line 6438 
  netif_tx_disable(np->dev);
  
#line 6439 
  return;
}


#line 6441  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_netif_start(struct niu *np)
{
  
#line 6447 
  netif_tx_wake_all_queues(np->dev);
  
#line 6449 
  niu_enable_napi(np);
  
#line 6451 
  niu_enable_interrupts(np,1);
  
#line 6452 
  return;
}


#line 6454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_reset_buffers(struct niu *np)
{
  int i;
  int j;
  int k;
  int err;
  
#line 6458 
  if (np->rx_rings != (struct rx_ring_info *)0) {
    
#line 6459 
    i = 0;
    
#line 6459 
    goto ldv_54853;
    ldv_54852: 
#line 6460 
    ;
    {
      
#line 6460 
      struct rx_ring_info *rp = np->rx_rings + i;
      
#line 6462 
      j = 0;
      
#line 6462 
      k = 0;
      
#line 6462 
      goto ldv_54847;
      ldv_54846: 
#line 6463 
      ;
      {
        struct page *page;
        
#line 6465 
        page = *(rp->rxhash + j);
        
#line 6466 
        goto ldv_54844;
        ldv_54843: 
#line 6467 
        ;
        {
          int tmp;
          
#line 6467 
          struct page *next = (struct page *)page->__anonCompField_page_36.mapping;
          
#line 6469 
          u64 base = (unsigned long long)page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index;
          
#line 6470 
          base >>= 12;
          
#line 6471 
          tmp = k;
          
#line 6471 
          k += 1;
          
#line 6471 
          *(rp->rbr + tmp) = (unsigned int)base;
          
#line 6472 
          page = next;
        }
        ldv_54844: 
#line 6474 
        ;
        
#line 6466 
        if (page != (struct page *)0) 
#line 6468 
                                      goto ldv_54843; else 
#line 6471 
                                                           goto ldv_54845;
        ldv_54845: 
#line 6472 
        ;
      }
      
#line 6462 
      j += 1;
      ldv_54847: 
#line 6463 
      ;
      
#line 6462 
      if (j <= 127) 
#line 6464 
                    goto ldv_54846; else 
#line 6467 
                                         goto ldv_54848;
      ldv_54848: 
#line 6468 
      ;
      
#line 6475 
      goto ldv_54851;
      ldv_54850: 
#line 6476 
      ;
      
#line 6476 
      err = niu_rbr_add_page(np,rp,32U,k);
      
#line 6477 
      if ((long)(err != 0) != 0L) 
#line 6478 
                                  goto ldv_54849; else ;
      
#line 6475 
      k += 1;
      ldv_54851: 
#line 6476 
      ;
      
#line 6475 
      if (k <= 127) 
#line 6477 
                    goto ldv_54850; else 
#line 6480 
                                         goto ldv_54849;
      ldv_54849: 
#line 6481 
      ;
      
#line 6481 
      rp->rbr_index = rp->rbr_table_size + 4294967295U;
      
#line 6482 
      rp->rcr_index = 0U;
      
#line 6483 
      rp->rbr_pending = 0U;
      
#line 6484 
      rp->rbr_refill_pending = 0U;
    }
    
#line 6459 
    i += 1;
    ldv_54853: 
#line 6460 
    ;
    
#line 6459 
    if (np->num_rx_rings > i) 
#line 6461 
                              goto ldv_54852; else 
#line 6464 
                                                   goto ldv_54854;
    ldv_54854: 
#line 6465 
    ;
  }
  else ;
  
#line 6487 
  if (np->tx_rings != (struct tx_ring_info *)0) {
    
#line 6488 
    i = 0;
    
#line 6488 
    goto ldv_54860;
    ldv_54859: 
#line 6489 
    ;
    {
      
#line 6489 
      struct tx_ring_info *rp_0 = np->tx_rings + i;
      
#line 6491 
      j = 0;
      
#line 6491 
      goto ldv_54857;
      ldv_54856: 
#line 6492 
      ;
      
#line 6492 
      if (rp_0->tx_buffs[j].skb != (struct sk_buff *)0) 
#line 6493 
                                                        release_tx_packet(np,rp_0,j); else ;
      
#line 6491 
      j += 1;
      ldv_54857: 
#line 6492 
      ;
      
#line 6491 
      if (j <= 255) 
#line 6493 
                    goto ldv_54856; else 
#line 6496 
                                         goto ldv_54858;
      ldv_54858: 
#line 6497 
      ;
      
#line 6496 
      rp_0->pending = 256;
      
#line 6497 
      rp_0->prod = 0;
      
#line 6498 
      rp_0->cons = 0;
      
#line 6499 
      rp_0->wrap_bit = 0;
    }
    
#line 6488 
    i += 1;
    ldv_54860: 
#line 6489 
    ;
    
#line 6488 
    if (np->num_tx_rings > i) 
#line 6490 
                              goto ldv_54859; else 
#line 6493 
                                                   goto ldv_54861;
    ldv_54861: 
#line 6494 
    ;
  }
  else ;
  
#line 6496 
  return;
}


#line 6504  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_reset_task(struct work_struct *work)
{
  struct niu *tmp;
  unsigned long flags;
  int err;
  int tmp_1;
  bool tmp_0;
  {
    
#line 6506 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 6506 
    tmp = (struct niu *)__mptr + 18446744073709529072U;
  }
  
#line 6506 
  struct niu *np = tmp;
  
#line 6510 
  ldv___ldv_spin_lock_112(& np->lock);
  
#line 6511 
  tmp_0 = netif_running((struct net_device const *)np->dev);
  
#line 6511 
  if (tmp_0) 
#line 6511 
             tmp_1 = 0; else 
#line 6511 
                             tmp_1 = 1;
  
#line 6511 
  if (tmp_1) {
    
#line 6512 
    ldv_spin_unlock_irqrestore_113(& np->lock,flags);
    
#line 6513 
    goto return_label;
  }
  else ;
  
#line 6516 
  ldv_spin_unlock_irqrestore_114(& np->lock,flags);
  
#line 6518 
  ldv_del_timer_sync_115(& np->timer);
  
#line 6520 
  niu_netif_stop(np);
  
#line 6522 
  ldv___ldv_spin_lock_116(& np->lock);
  
#line 6524 
  niu_stop_hw(np);
  
#line 6526 
  ldv_spin_unlock_irqrestore_117(& np->lock,flags);
  
#line 6528 
  niu_reset_buffers(np);
  
#line 6530 
  ldv___ldv_spin_lock_118(& np->lock);
  
#line 6532 
  err = niu_init_hw(np);
  
#line 6533 
  if (err == 0) {
    
#line 6534 
    np->timer.expires = jiffies + 250UL;
    
#line 6535 
    add_timer(& np->timer);
    
#line 6536 
    niu_netif_start(np);
  }
  else ;
  
#line 6539 
  ldv_spin_unlock_irqrestore_119(& np->lock,flags);
  return_label: 
#line 6540 
                return;
}


#line 6542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_tx_timeout(struct net_device *dev)
{
  
#line 6544 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6546 
  dev_err((struct device const *)np->device,"%s: Transmit timed out, resetting\n",(char *)(& dev->name));
  
#line 6549 
  ldv_schedule_work_120(& np->reset_task);
  
#line 6550 
  return;
}


#line 6552  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_set_txd(struct tx_ring_info *rp, int index, u64 mapping, u64 len, u64 mark, u64 n_frags)
{
  
#line 6556 
  __le64 *desc = rp->descr + index;
  
#line 6558 
  *desc = (((n_frags << 58) | mark) | (len << 44)) | (mapping & 17592186044415ULL);
  
#line 6559 
  return;
}


#line 6564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u64 niu_compute_tx_flags(struct sk_buff *skb, struct ethhdr *ehdr, u64 pad_bytes, u64 len)
{
  u16 eth_proto;
  u16 eth_proto_inner;
  u64 csum_bits;
  u64 l3off;
  u64 ihl;
  u64 ret;
  u8 ip_proto;
  int ipv6;
  int tmp_6;
  unsigned long long tmp_7;
  unsigned long long tmp_8;
  unsigned long long tmp_9;
  
#line 6572 
  if (0 != 0) 
#line 6572 
              eth_proto = (unsigned short)(((int)ehdr->h_proto << 8) | ((int)ehdr->h_proto >> 8)); else 
                                                                    
#line 6572 
                                                                    eth_proto = __fswab16((unsigned short)((int)ehdr->h_proto));
  
#line 6573 
  eth_proto_inner = eth_proto;
  
#line 6574 
  if ((unsigned int)eth_proto == 33024U) {
    
#line 6575 
    struct vlan_ethhdr *vp = (struct vlan_ethhdr *)ehdr;
    
#line 6576 
    __be16 val = vp->h_vlan_encapsulated_proto;
    
#line 6578 
    if (0 != 0) 
#line 6578 
                eth_proto_inner = (unsigned short)(((int)val << 8) | ((int)val >> 8)); else 
                                                                    
#line 6578 
                                                                    eth_proto_inner = __fswab16((unsigned short)((int)val));
  }
  else ;
  
#line 6581 
  ihl = 0ULL;
  
#line 6581 
  ipv6 = 0;
  
#line 6582 
  switch ((int)skb->protocol) {
    struct iphdr *tmp_1;
    struct iphdr *tmp_2;
    struct ipv6hdr *tmp_3;
    case 8: 
#line 6583 
    ;
    
#line 6584 
    tmp_1 = ip_hdr((struct sk_buff const *)skb);
    
#line 6584 
    ip_proto = tmp_1->protocol;
    
#line 6585 
    tmp_2 = ip_hdr((struct sk_buff const *)skb);
    
#line 6585 
    ihl = (unsigned long long)tmp_2->ihl;
    
#line 6586 
    goto ldv_54900;
    case 56710: 
#line 6587 
    ;
    
#line 6588 
    tmp_3 = ipv6_hdr((struct sk_buff const *)skb);
    
#line 6588 
    ip_proto = tmp_3->nexthdr;
    
#line 6589 
    ihl = 10ULL;
    
#line 6590 
    ipv6 = 1;
    
#line 6591 
    goto ldv_54900;
    default: 
#line 6592 
    ;
    
#line 6593 
    ihl = 0ULL;
    
#line 6593 
    ip_proto = (unsigned char)0U;
    
#line 6594 
    goto ldv_54900;
  }
  ldv_54900: 
#line 6597 
  ;
  
#line 6597 
  csum_bits = 0ULL;
  
#line 6598 
  if ((unsigned int)*((unsigned char *)skb + 145UL) == 6U) {
    u64 start;
    u64 stuff;
    int tmp_5;
    
#line 6601 
    if ((unsigned int)ip_proto != 6U) {
      unsigned long long tmp_4;
      
#line 6601 
      if ((unsigned int)ip_proto == 17U) 
#line 6601 
                                         tmp_4 = 9223372036854775808ULL; else 
                                                                    
#line 6601 
                                                                    tmp_4 = 13835058055282163712ULL;
      
#line 6601 
      csum_bits = tmp_4;
    }
    else 
#line 6601 
         csum_bits = 4611686018427387904ULL;
    
#line 6606 
    tmp_5 = skb_checksum_start_offset((struct sk_buff const *)skb);
    
#line 6606 
    start = ((unsigned long long)tmp_5 - pad_bytes) + 18446744073709551600ULL;
    
#line 6608 
    stuff = (unsigned long long)skb->__anonCompField_sk_buff_89.__anonCompField___anonunion_293_88.csum_offset + start;
    
#line 6610 
    csum_bits = (start / 2ULL << 40) | csum_bits;
    
#line 6611 
    csum_bits = (stuff / 2ULL << 32) | csum_bits;
  }
  else ;
  
#line 6614 
  tmp_6 = skb_network_offset((struct sk_buff const *)skb);
  
#line 6614 
  l3off = ((unsigned long long)tmp_6 - pad_bytes) + 18446744073709551600ULL;
  
#line 6620 
  if ((unsigned int)eth_proto_inner <= 1535U) 
#line 6620 
                                              tmp_7 = 144115188075855872ULL; else 
                                                                    
#line 6620 
                                                                    tmp_7 = 0ULL;
  
#line 6621 
  if ((unsigned int)eth_proto == 33024U) 
#line 6621 
                                         tmp_8 = 72057594037927936ULL; else 
                                                                    
#line 6621 
                                                                    tmp_8 = 0ULL;
  
#line 6622 
  if (ipv6 != 0) 
#line 6622 
                 tmp_9 = 2305843009213693952ULL; else 
#line 6622 
                                                      tmp_9 = 0ULL;
  
#line 6617 
  ret = ((((((pad_bytes / 2ULL | (len << 16)) | (l3off / 2ULL << 48)) | (ihl << 52)) | tmp_7) | tmp_8) | tmp_9) | csum_bits;
  
#line 6626 
  return ret;
}


#line 6629  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static netdev_tx_t niu_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  netdev_tx_t __retres;
  unsigned long align;
  unsigned long headroom;
  struct netdev_queue *txq;
  struct tx_ring_info *rp;
  struct tx_pkt_hdr *tp;
  unsigned int len;
  unsigned int nfg;
  struct ethhdr *ehdr;
  int prod;
  int i;
  int tlen;
  u64 mapping;
  u64 mrk;
  u16 tmp_0;
  u32 tmp_1;
  unsigned char *tmp_2;
  int tmp_3;
  unsigned int tmp_4;
  unsigned char *tmp_7;
  unsigned char *tmp_10;
  u32 tmp_12;
  
#line 6632 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6642 
  tmp_0 = skb_get_queue_mapping((struct sk_buff const *)skb);
  
#line 6642 
  i = (int)tmp_0;
  
#line 6643 
  rp = np->tx_rings + i;
  
#line 6644 
  txq = netdev_get_tx_queue((struct net_device const *)dev,(unsigned int)i);
  
#line 6646 
  tmp_1 = niu_tx_avail(rp);
  
#line 6646 
  tmp_2 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 6646 
  ;
  
#line 6646 
  if (tmp_1 <= (unsigned int)((int)((struct skb_shared_info *)tmp_2)->nr_frags + 1)) {
    
#line 6647 
    netif_tx_start_queue(txq);
    
#line 6648 
    dev_err((struct device const *)np->device,"%s: BUG! Tx ring full when queue awake!\n",(char *)(& dev->name));
    
#line 6649 
    rp->tx_errors += 1ULL;
    
#line 6650 
    __retres = NETDEV_TX_BUSY;
    
#line 6650 
    goto return_label;
  }
  else ;
  
#line 6653 
  tmp_3 = eth_skb_pad(skb);
  
#line 6653 
  if (tmp_3 != 0) 
#line 6654 
                  goto out; else ;
  
#line 6656 
  len = 31U;
  
#line 6657 
  tmp_4 = skb_headroom((struct sk_buff const *)skb);
  
#line 6657 
  ;
  
#line 6657 
  if (tmp_4 < len) {
    struct sk_buff *skb_new;
    
#line 6660 
    skb_new = skb_realloc_headroom(skb,len);
    
#line 6661 
    if (skb_new == (struct sk_buff *)0) 
#line 6662 
                                        goto out_drop; else ;
    
#line 6663 
    kfree_skb(skb);
    
#line 6664 
    skb = skb_new;
  }
  else 
#line 6666 
       skb_orphan(skb);
  
#line 6668 
  align = (unsigned long)skb->data & 15UL;
  
#line 6669 
  headroom = align + 16UL;
  
#line 6671 
  ehdr = (struct ethhdr *)skb->data;
  
#line 6672 
  tp = (struct tx_pkt_hdr *)skb_push(skb,(unsigned int)headroom);
  
#line 6674 
  len = skb->len + 4294967280U;
  
#line 6675 
  tp->flags = niu_compute_tx_flags(skb,ehdr,(unsigned long long)align,(unsigned long long)len);
  
#line 6676 
  tp->resv = 0ULL;
  
#line 6678 
  len = skb_headlen((struct sk_buff const *)skb);
  
#line 6679 
  mapping = (*((np->ops)->map_single))(np->device,(void *)skb->data,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 6682 
  prod = rp->prod;
  
#line 6684 
  rp->tx_buffs[prod].skb = skb;
  
#line 6685 
  rp->tx_buffs[prod].mapping = mapping;
  
#line 6687 
  mrk = 9223372036854775808ULL;
  
#line 6688 
  rp->mark_counter = (u16)((int)rp->mark_counter + 1);
  
#line 6688 
  ;
  
#line 6688 
  if ((int)rp->mark_counter == (int)rp->mark_freq) {
    
#line 6689 
    rp->mark_counter = (unsigned short)0U;
    
#line 6690 
    mrk |= 4611686018427387904ULL;
    
#line 6691 
    rp->mark_pending = (u16)((int)rp->mark_pending + 1);
  }
  else ;
  
#line 6694 
  tlen = (int)len;
  
#line 6695 
  tmp_7 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 6695 
  nfg = (unsigned int)((struct skb_shared_info *)tmp_7)->nr_frags;
  
#line 6696 
  goto ldv_54927;
  ldv_54926: 
#line 6697 
  ;
  
#line 6697 
  tlen += -4076;
  
#line 6698 
  nfg += 1U;
  ldv_54927: 
#line 6699 
  ;
  
#line 6696 
  if (tlen > 0) 
#line 6698 
                goto ldv_54926; else 
#line 6701 
                                     goto ldv_54928;
  ldv_54928: 
#line 6702 
  ;
  
#line 6701 
  goto ldv_54931;
  ldv_54930: 
#line 6702 
  ;
  {
    
#line 6702 
    unsigned int this_len = len;
    
#line 6704 
    if (this_len > 4076U) 
#line 6705 
                          this_len = 4076U; else ;
    
#line 6707 
    niu_set_txd(rp,prod,mapping,(unsigned long long)this_len,mrk,(unsigned long long)nfg);
    
#line 6708 
    nfg = 0U;
    
#line 6708 
    mrk = 0ULL;
    
#line 6710 
    if (prod + 1 < rp->pending) 
#line 6710 
                                prod += 1; else 
#line 6710 
                                                prod = 0;
    
#line 6711 
    mapping = (unsigned long long)this_len + mapping;
    
#line 6712 
    len -= this_len;
  }
  ldv_54931: 
#line 6714 
  ;
  
#line 6701 
  if (len != 0U) 
#line 6703 
                 goto ldv_54930; else 
#line 6706 
                                      goto ldv_54932;
  ldv_54932: 
#line 6707 
  ;
  
#line 6715 
  i = 0;
  
#line 6715 
  goto ldv_54935;
  ldv_54934: 
#line 6716 
  ;
  {
    unsigned char *tmp_8;
    struct page *tmp_9;
    
#line 6716 
    tmp_8 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 6716 
    skb_frag_t const *frag = (skb_frag_t const *)(& ((struct skb_shared_info *)tmp_8)->frags[i]);
    
#line 6718 
    len = skb_frag_size(frag);
    
#line 6719 
    ;
    
#line 6719 
    ;
    
#line 6719 
    tmp_9 = skb_frag_page(frag);
    
#line 6719 
    ;
    
#line 6719 
    mapping = (*((np->ops)->map_page))(np->device,tmp_9,(unsigned long)frag->page_offset,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 6723 
    rp->tx_buffs[prod].skb = (struct sk_buff *)0;
    
#line 6724 
    rp->tx_buffs[prod].mapping = mapping;
    
#line 6726 
    niu_set_txd(rp,prod,mapping,(unsigned long long)len,0ULL,0ULL);
    
#line 6728 
    if (prod + 1 < rp->pending) 
#line 6728 
                                prod += 1; else 
#line 6728 
                                                prod = 0;
  }
  
#line 6715 
  i += 1;
  ldv_54935: 
#line 6716 
  ;
  
#line 6715 
  tmp_10 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 6715 
  ;
  
#line 6715 
  if ((int)((struct skb_shared_info *)tmp_10)->nr_frags > i) 
#line 6717 
                                                             goto ldv_54934; else 
                                                                    
#line 6720 
                                                                    goto ldv_54936;
  ldv_54936: 
#line 6721 
  ;
  
#line 6731 
  if (rp->prod > prod) 
#line 6732 
                       rp->wrap_bit ^= 524288; else ;
  
#line 6733 
  rp->prod = prod;
  
#line 6735 
  writeq((unsigned long)(rp->wrap_bit | (prod << 3)),(void volatile *)(np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553624UL)));
  
#line 6737 
  tmp_12 = niu_tx_avail(rp);
  
#line 6737 
  if ((long)(tmp_12 <= 18U) != 0L) {
    u32 tmp_11;
    
#line 6738 
    netif_tx_start_queue(txq);
    
#line 6739 
    tmp_11 = niu_tx_avail(rp);
    
#line 6739 
    ;
    
#line 6739 
    if (tmp_11 > (unsigned int)(rp->pending / 4)) 
#line 6740 
                                                  netif_tx_wake_queue(txq); else ;
  }
  else ;
  out: 
#line 6743 
  ;
  
#line 6744 
  __retres = NETDEV_TX_OK;
  
#line 6744 
  goto return_label;
  out_drop: 
#line 6746 
  ;
  
#line 6747 
  rp->tx_errors += 1ULL;
  
#line 6748 
  kfree_skb(skb);
  
#line 6749 
  goto out;
  return_label: 
#line 6749 
                return __retres;
}


#line 6752  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_change_mtu(struct net_device *dev, int new_mtu)
{
  int __retres;
  int err;
  int orig_jumbo;
  int new_jumbo;
  int tmp_1;
  bool tmp_0;
  
#line 6754 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6757 
  if ((unsigned int)new_mtu + 4294967228U > 9148U) {
    
#line 6758 
    __retres = -22;
    
#line 6758 
    goto return_label;
  }
  else ;
  
#line 6760 
  orig_jumbo = dev->mtu > 1500U;
  
#line 6761 
  new_jumbo = new_mtu > 1500;
  
#line 6763 
  dev->mtu = (unsigned int)new_mtu;
  
#line 6765 
  tmp_0 = netif_running((struct net_device const *)dev);
  
#line 6765 
  if (tmp_0) 
#line 6765 
             tmp_1 = 0; else 
#line 6765 
                             tmp_1 = 1;
  
#line 6765 
  if (tmp_1) {
    
#line 6767 
    __retres = 0;
    
#line 6767 
    goto return_label;
  }
  else 
    
#line 6765 
    if (orig_jumbo == new_jumbo) {
      
#line 6767 
      __retres = 0;
      
#line 6767 
      goto return_label;
    }
    else ;
  
#line 6769 
  niu_full_shutdown(np,dev);
  
#line 6771 
  niu_free_channels(np);
  
#line 6773 
  niu_enable_napi(np);
  
#line 6775 
  err = niu_alloc_channels(np);
  
#line 6776 
  if (err != 0) {
    
#line 6777 
    __retres = err;
    
#line 6777 
    goto return_label;
  }
  else ;
  
#line 6779 
  ldv_spin_lock_irq_121(& np->lock);
  
#line 6781 
  err = niu_init_hw(np);
  
#line 6782 
  if (err == 0) {
    {
      struct lock_class_key __key;
      
#line 6783 
      init_timer_key(& np->timer,0U,"(&np->timer)",& __key);
    }
    
#line 6784 
    np->timer.expires = jiffies + 250UL;
    
#line 6785 
    np->timer.data = (unsigned long)np;
    
#line 6786 
    np->timer.function = & niu_timer;
    
#line 6788 
    err = niu_enable_interrupts(np,1);
    
#line 6789 
    if (err != 0) 
#line 6790 
                  niu_stop_hw(np); else ;
  }
  else ;
  
#line 6793 
  ldv_spin_unlock_irq_122(& np->lock);
  
#line 6795 
  if (err == 0) {
    
#line 6796 
    netif_tx_start_all_queues(dev);
    
#line 6797 
    if ((unsigned int)np->link_config.loopback_mode != 0U) 
#line 6798 
                                                           netif_carrier_on(dev); else ;
    
#line 6800 
    add_timer(& np->timer);
  }
  else ;
  
#line 6803 
  __retres = err;
  return_label: 
#line 6803 
                return __retres;
}


#line 6806  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  
#line 6809 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6810 
  struct niu_vpd *vpd = & np->vpd;
  
#line 6812 
  strlcpy((char *)(& info->driver),"niu",32UL);
  
#line 6813 
  strlcpy((char *)(& info->version),"1.1",32UL);
  
#line 6814 
  snprintf((char *)(& info->fw_version),32UL,"%d.%d",vpd->fcode_major,vpd->fcode_minor);
  
#line 6816 
  if ((unsigned int)(np->parent)->plat_type != 2U) {
    char const *tmp_0;
    
#line 6817 
    tmp_0 = pci_name((struct pci_dev const *)np->pdev);
    
#line 6817 
    ;
    
#line 6817 
    strlcpy((char *)(& info->bus_info),tmp_0,32UL);
  }
  else ;
  
#line 6818 
  return;
}


#line 6821  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
{
  int __retres;
  struct niu_link_config *lp;
  
#line 6823 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6826 
  lp = & np->link_config;
  
#line 6828 
  memset((void *)cmd,0,44UL);
  
#line 6829 
  cmd->phy_address = (unsigned char)np->phy_addr;
  
#line 6830 
  cmd->supported = lp->supported;
  
#line 6831 
  cmd->advertising = lp->active_advertising;
  
#line 6832 
  cmd->autoneg = lp->active_autoneg;
  
#line 6833 
  ethtool_cmd_speed_set(cmd,(unsigned int)lp->active_speed);
  
#line 6834 
  cmd->duplex = lp->active_duplex;
  
#line 6835 
  if ((np->flags & 131072U) != 0U) 
#line 6835 
                                   cmd->port = (unsigned char)3U; else 
                                                                    
#line 6835 
                                                                    cmd->port = (unsigned char)0U;
  
#line 6836 
  cmd->transceiver = (unsigned char)((unsigned int)((unsigned char)(np->flags >> 19)) & 1U);
  
#line 6839 
  __retres = 0;
  
#line 6839 
  return __retres;
}


#line 6842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
{
  __u32 tmp_0;
  int tmp_1;
  
#line 6844 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6845 
  struct niu_link_config *lp = & np->link_config;
  
#line 6847 
  lp->advertising = cmd->advertising;
  
#line 6848 
  tmp_0 = ethtool_cmd_speed((struct ethtool_cmd const *)cmd);
  
#line 6848 
  lp->speed = (unsigned short)tmp_0;
  
#line 6849 
  lp->duplex = cmd->duplex;
  
#line 6850 
  lp->autoneg = cmd->autoneg;
  
#line 6851 
  tmp_1 = niu_init_link(np);
  
#line 6851 
  return tmp_1;
}


#line 6854  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u32 niu_get_msglevel(struct net_device *dev)
{
  u32 __retres;
  
#line 6856 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6857 
  __retres = np->msg_enable;
  
#line 6857 
  return __retres;
}


#line 6860  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_set_msglevel(struct net_device *dev, u32 value)
{
  
#line 6862 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6863 
  np->msg_enable = value;
  
#line 6864 
  return;
}


#line 6866  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_nway_reset(struct net_device *dev)
{
  int __retres;
  
#line 6868 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6870 
  if ((unsigned int)np->link_config.autoneg != 0U) {
    int tmp_0;
    
#line 6871 
    tmp_0 = niu_init_link(np);
    
#line 6871 
    __retres = tmp_0;
    
#line 6871 
    goto return_label;
  }
  else ;
  
#line 6873 
  __retres = 0;
  return_label: 
#line 6873 
                return __retres;
}


#line 6876  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_eeprom_len(struct net_device *dev)
{
  int __retres;
  
#line 6878 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6880 
  __retres = (int)np->eeprom_len;
  
#line 6880 
  return __retres;
}


#line 6883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  int __retres;
  u32 offset;
  u32 len;
  u32 val;
  unsigned long tmp_2;
  
#line 6886 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 6889 
  offset = eeprom->offset;
  
#line 6890 
  len = eeprom->len;
  
#line 6892 
  if (offset + len < offset) {
    
#line 6893 
    __retres = -22;
    
#line 6893 
    goto return_label;
  }
  else ;
  
#line 6894 
  if (np->eeprom_len <= offset) {
    
#line 6895 
    __retres = -22;
    
#line 6895 
    goto return_label;
  }
  else ;
  
#line 6896 
  if (offset + len > np->eeprom_len) {
    __u32 tmp_0;
    
#line 6897 
    tmp_0 = np->eeprom_len - offset;
    
#line 6897 
    eeprom->len = tmp_0;
    
#line 6897 
    len = tmp_0;
  }
  else ;
  
#line 6899 
  if ((offset & 3U) != 0U) {
    u32 b_offset;
    u32 b_count;
    unsigned long tmp_1;
    
#line 6902 
    b_offset = offset & 3U;
    
#line 6903 
    b_count = 4U - b_offset;
    
#line 6904 
    if (b_count > len) 
#line 6905 
                       b_count = len; else ;
    
#line 6907 
    tmp_1 = readq((void const volatile *)(np->regs + ((unsigned long)((offset - b_offset) / 4U) + 1671172UL) * 8UL));
    
#line 6907 
    val = (unsigned int)tmp_1;
    
#line 6908 
    memcpy((void *)data,(void const *)(& val) + b_offset,(unsigned long)b_count);
    
#line 6909 
    data += b_count;
    
#line 6910 
    len -= b_count;
    
#line 6911 
    offset += b_count;
  }
  else ;
  
#line 6913 
  goto ldv_54993;
  ldv_54992: 
#line 6914 
  ;
  
#line 6914 
  tmp_2 = readq((void const volatile *)(np->regs + ((unsigned long)(offset / 4U) + 1671172UL) * 8UL));
  
#line 6914 
  val = (unsigned int)tmp_2;
  
#line 6915 
  memcpy((void *)data,(void const *)(& val),4UL);
  
#line 6916 
  data += 4U;
  
#line 6917 
  len += 4294967292U;
  
#line 6918 
  offset += 4U;
  ldv_54993: 
#line 6919 
  ;
  
#line 6913 
  if (len > 3U) 
#line 6915 
                goto ldv_54992; else 
#line 6918 
                                     goto ldv_54994;
  ldv_54994: 
#line 6919 
  ;
  
#line 6920 
  if (len != 0U) {
    unsigned long tmp_3;
    
#line 6921 
    tmp_3 = readq((void const volatile *)(np->regs + ((unsigned long)(offset / 4U) + 1671172UL) * 8UL));
    
#line 6921 
    val = (unsigned int)tmp_3;
    
#line 6922 
    memcpy((void *)data,(void const *)(& val),(unsigned long)len);
  }
  else ;
  
#line 6924 
  __retres = 0;
  return_label: 
#line 6924 
                return __retres;
}


#line 6927  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_ethflow_to_l3proto(int flow_type, u8 *pid)
{
  
#line 6929 
  switch (flow_type) {
    case 1: 
#line 6930 
    ;
    case 5: 
#line 6931 
    ;
    
#line 6932 
    *pid = (unsigned char)6U;
    
#line 6933 
    goto ldv_55001;
    case 2: 
#line 6934 
    ;
    case 6: 
#line 6935 
    ;
    
#line 6936 
    *pid = (unsigned char)17U;
    
#line 6937 
    goto ldv_55001;
    case 3: 
#line 6938 
    ;
    case 7: 
#line 6939 
    ;
    
#line 6940 
    *pid = (unsigned char)132U;
    
#line 6941 
    goto ldv_55001;
    case 9: 
#line 6942 
    ;
    case 11: 
#line 6943 
    ;
    
#line 6944 
    *pid = (unsigned char)51U;
    
#line 6945 
    goto ldv_55001;
    case 10: 
#line 6946 
    ;
    case 12: 
#line 6947 
    ;
    
#line 6948 
    *pid = (unsigned char)50U;
    
#line 6949 
    goto ldv_55001;
    default: 
#line 6950 
    ;
    
#line 6951 
    *pid = (unsigned char)0U;
    
#line 6952 
    goto ldv_55001;
  }
  ldv_55001: 
#line 6954 
  ;
  
#line 6955 
  return;
}


#line 6956  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_class_to_ethflow(u64 class, int *flow_type)
{
  int __retres;
  
#line 6958 
  switch (class) {
    case (u64)8: 
#line 6959 
    ;
    
#line 6960 
    *flow_type = 1;
    
#line 6961 
    goto ldv_55016;
    case (u64)9: 
#line 6962 
    ;
    
#line 6963 
    *flow_type = 2;
    
#line 6964 
    goto ldv_55016;
    case (u64)10: 
#line 6965 
    ;
    
#line 6966 
    *flow_type = 9;
    
#line 6967 
    goto ldv_55016;
    case (u64)11: 
#line 6968 
    ;
    
#line 6969 
    *flow_type = 3;
    
#line 6970 
    goto ldv_55016;
    case (u64)12: 
#line 6971 
    ;
    
#line 6972 
    *flow_type = 5;
    
#line 6973 
    goto ldv_55016;
    case (u64)13: 
#line 6974 
    ;
    
#line 6975 
    *flow_type = 6;
    
#line 6976 
    goto ldv_55016;
    case (u64)14: 
#line 6977 
    ;
    
#line 6978 
    *flow_type = 11;
    
#line 6979 
    goto ldv_55016;
    case (u64)15: 
#line 6980 
    ;
    
#line 6981 
    *flow_type = 7;
    
#line 6982 
    goto ldv_55016;
    case (u64)4: 
#line 6983 
    ;
    case (u64)5: 
#line 6984 
    ;
    case (u64)6: 
#line 6985 
    ;
    case (u64)7: 
#line 6986 
    ;
    
#line 6987 
    *flow_type = 13;
    
#line 6988 
    goto ldv_55016;
    default: 
#line 6989 
    ;
    
#line 6990 
    __retres = -22;
    
#line 6990 
    goto return_label;
  }
  ldv_55016: 
#line 6993 
  ;
  
#line 6993 
  __retres = 0;
  return_label: 
#line 6993 
                return __retres;
}


#line 6996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_ethflow_to_class(int flow_type, u64 *class)
{
  int __retres;
  
#line 6998 
  switch (flow_type) {
    case 1: 
#line 6999 
    ;
    
#line 7000 
    *class = 8ULL;
    
#line 7001 
    goto ldv_55034;
    case 2: 
#line 7002 
    ;
    
#line 7003 
    *class = 9ULL;
    
#line 7004 
    goto ldv_55034;
    case 4: 
#line 7005 
    ;
    case 9: 
#line 7006 
    ;
    case 10: 
#line 7007 
    ;
    
#line 7008 
    *class = 10ULL;
    
#line 7009 
    goto ldv_55034;
    case 3: 
#line 7010 
    ;
    
#line 7011 
    *class = 11ULL;
    
#line 7012 
    goto ldv_55034;
    case 5: 
#line 7013 
    ;
    
#line 7014 
    *class = 12ULL;
    
#line 7015 
    goto ldv_55034;
    case 6: 
#line 7016 
    ;
    
#line 7017 
    *class = 13ULL;
    
#line 7018 
    goto ldv_55034;
    case 8: 
#line 7019 
    ;
    case 11: 
#line 7020 
    ;
    case 12: 
#line 7021 
    ;
    
#line 7022 
    *class = 14ULL;
    
#line 7023 
    goto ldv_55034;
    case 7: 
#line 7024 
    ;
    
#line 7025 
    *class = 15ULL;
    
#line 7026 
    goto ldv_55034;
    default: 
#line 7027 
    ;
    
#line 7028 
    __retres = 0;
    
#line 7028 
    goto return_label;
  }
  ldv_55034: 
#line 7031 
  ;
  
#line 7031 
  __retres = 1;
  return_label: 
#line 7031 
                return __retres;
}


#line 7034  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u64 niu_flowkey_to_ethflow(u64 flow_key)
{
  
#line 7036 
  u64 ethflow = 0ULL;
  
#line 7038 
  if ((flow_key & 256ULL) != 0ULL) 
#line 7039 
                                   ethflow |= 2ULL; else ;
  
#line 7040 
  if ((flow_key & 128ULL) != 0ULL) 
#line 7041 
                                   ethflow |= 4ULL; else ;
  
#line 7042 
  if ((flow_key & 64ULL) != 0ULL) 
#line 7043 
                                  ethflow |= 16ULL; else ;
  
#line 7044 
  if ((flow_key & 32ULL) != 0ULL) 
#line 7045 
                                  ethflow |= 32ULL; else ;
  
#line 7046 
  if ((flow_key & 16ULL) != 0ULL) 
#line 7047 
                                  ethflow |= 8ULL; else ;
  
#line 7048 
  if ((flow_key & 8ULL) != 0ULL) 
#line 7049 
                                 ethflow |= 64ULL; else ;
  
#line 7050 
  if ((flow_key & 2ULL) != 0ULL) 
#line 7051 
                                 ethflow |= 128ULL; else ;
  
#line 7053 
  return ethflow;
}


#line 7057  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_ethflow_to_flowkey(u64 ethflow, u64 *flow_key)
{
  int __retres;
  
#line 7059 
  u64 key = 0ULL;
  
#line 7061 
  if ((ethflow & 2ULL) != 0ULL) 
#line 7062 
                                key |= 256ULL; else ;
  
#line 7063 
  if ((ethflow & 4ULL) != 0ULL) 
#line 7064 
                                key |= 128ULL; else ;
  
#line 7065 
  if ((ethflow & 16ULL) != 0ULL) 
#line 7066 
                                 key |= 64ULL; else ;
  
#line 7067 
  if ((ethflow & 32ULL) != 0ULL) 
#line 7068 
                                 key |= 32ULL; else ;
  
#line 7069 
  if ((ethflow & 8ULL) != 0ULL) 
#line 7070 
                                key |= 16ULL; else ;
  
#line 7071 
  if ((ethflow & 64ULL) != 0ULL) 
#line 7072 
                                 key |= 8ULL; else ;
  
#line 7073 
  if ((ethflow & 128ULL) != 0ULL) 
#line 7074 
                                  key |= 2ULL; else ;
  
#line 7076 
  *flow_key = key;
  
#line 7078 
  __retres = 1;
  
#line 7078 
  return __retres;
}


#line 7082  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_hash_opts(struct niu *np, struct ethtool_rxnfc *nfc)
{
  int __retres;
  u64 class;
  int tmp;
  
#line 7086 
  nfc->data = 0ULL;
  
#line 7088 
  tmp = niu_ethflow_to_class((int)nfc->flow_type,& class);
  
#line 7088 
  if (tmp == 0) {
    
#line 7089 
    __retres = -22;
    
#line 7089 
    goto return_label;
  }
  else ;
  
#line 7091 
  if (((np->parent)->tcam_key[class + 18446744073709551612ULL] & 8ULL) != 0ULL) 
    
#line 7093 
    nfc->data = 18446744071562067968ULL; else 
#line 7095 
                                              nfc->data = niu_flowkey_to_ethflow((np->parent)->flow_key[class + 18446744073709551612ULL]);
  
#line 7097 
  __retres = 0;
  return_label: 
#line 7097 
                return __retres;
}


#line 7100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_get_ip4fs_from_tcam_key(struct niu_tcam_entry *tp, struct ethtool_rx_flow_spec *fsp)
{
  u32 tmp;
  u16 prt;
  
#line 7106 
  tmp = (unsigned int)(tp->key[3] >> 32);
  
#line 7107 
  if (0 != 0) 
#line 7107 
              fsp->h_u.tcp_ip4_spec.ip4src = (((tmp << 24) | ((tmp << 8) & 16711680U)) | ((tmp >> 8) & 65280U)) | (tmp >> 24); else 
                                                                    
#line 7107 
                                                                    fsp->h_u.tcp_ip4_spec.ip4src = __fswab32(tmp);
  
#line 7109 
  tmp = (unsigned int)tp->key[3];
  
#line 7110 
  if (0 != 0) 
#line 7110 
              fsp->h_u.tcp_ip4_spec.ip4dst = (((tmp << 24) | ((tmp << 8) & 16711680U)) | ((tmp >> 8) & 65280U)) | (tmp >> 24); else 
                                                                    
#line 7110 
                                                                    fsp->h_u.tcp_ip4_spec.ip4dst = __fswab32(tmp);
  
#line 7112 
  tmp = (unsigned int)(tp->key_mask[3] >> 32);
  
#line 7113 
  if (0 != 0) 
#line 7113 
              fsp->m_u.tcp_ip4_spec.ip4src = (((tmp << 24) | ((tmp << 8) & 16711680U)) | ((tmp >> 8) & 65280U)) | (tmp >> 24); else 
                                                                    
#line 7113 
                                                                    fsp->m_u.tcp_ip4_spec.ip4src = __fswab32(tmp);
  
#line 7115 
  tmp = (unsigned int)tp->key_mask[3];
  
#line 7116 
  if (0 != 0) 
#line 7116 
              fsp->m_u.tcp_ip4_spec.ip4dst = (((tmp << 24) | ((tmp << 8) & 16711680U)) | ((tmp >> 8) & 65280U)) | (tmp >> 24); else 
                                                                    
#line 7116 
                                                                    fsp->m_u.tcp_ip4_spec.ip4dst = __fswab32(tmp);
  
#line 7118 
  fsp->h_u.tcp_ip4_spec.tos = (unsigned char)(tp->key[2] >> 40);
  
#line 7120 
  fsp->m_u.tcp_ip4_spec.tos = (unsigned char)(tp->key_mask[2] >> 40);
  
#line 7123 
  switch (fsp->flow_type) {
    case (__u32)1: 
#line 7124 
    ;
    case (__u32)2: 
#line 7125 
    ;
    case (__u32)3: 
#line 7126 
    ;
    
#line 7127 
    prt = (unsigned short)(tp->key[2] >> 16);
    
#line 7129 
    if (0 != 0) 
#line 7129 
                fsp->h_u.tcp_ip4_spec.psrc = (unsigned short)(((int)prt << 8) | ((int)prt >> 8)); else 
                                                                    
#line 7129 
                                                                    fsp->h_u.tcp_ip4_spec.psrc = __fswab16((unsigned short)((int)prt));
    
#line 7131 
    prt = (unsigned short)tp->key[2];
    
#line 7133 
    if (0 != 0) 
#line 7133 
                fsp->h_u.tcp_ip4_spec.pdst = (unsigned short)(((int)prt << 8) | ((int)prt >> 8)); else 
                                                                    
#line 7133 
                                                                    fsp->h_u.tcp_ip4_spec.pdst = __fswab16((unsigned short)((int)prt));
    
#line 7135 
    prt = (unsigned short)(tp->key_mask[2] >> 16);
    
#line 7137 
    if (0 != 0) 
#line 7137 
                fsp->m_u.tcp_ip4_spec.psrc = (unsigned short)(((int)prt << 8) | ((int)prt >> 8)); else 
                                                                    
#line 7137 
                                                                    fsp->m_u.tcp_ip4_spec.psrc = __fswab16((unsigned short)((int)prt));
    
#line 7139 
    prt = (unsigned short)tp->key_mask[2];
    
#line 7141 
    if (0 != 0) 
#line 7141 
                fsp->m_u.tcp_ip4_spec.pdst = (unsigned short)(((int)prt << 8) | ((int)prt >> 8)); else 
                                                                    
#line 7141 
                                                                    fsp->m_u.tcp_ip4_spec.pdst = __fswab16((unsigned short)((int)prt));
    
#line 7142 
    goto ldv_55070;
    case (__u32)9: 
#line 7143 
    ;
    case (__u32)10: 
#line 7144 
    ;
    
#line 7145 
    tmp = (unsigned int)tp->key[2];
    
#line 7147 
    if (0 != 0) 
#line 7147 
                fsp->h_u.ah_ip4_spec.spi = (((tmp << 24) | ((tmp << 8) & 16711680U)) | ((tmp >> 8) & 65280U)) | (tmp >> 24); else 
                                                                    
#line 7147 
                                                                    fsp->h_u.ah_ip4_spec.spi = __fswab32(tmp);
    
#line 7149 
    tmp = (unsigned int)tp->key_mask[2];
    
#line 7151 
    if (0 != 0) 
#line 7151 
                fsp->m_u.ah_ip4_spec.spi = (((tmp << 24) | ((tmp << 8) & 16711680U)) | ((tmp >> 8) & 65280U)) | (tmp >> 24); else 
                                                                    
#line 7151 
                                                                    fsp->m_u.ah_ip4_spec.spi = __fswab32(tmp);
    
#line 7152 
    goto ldv_55070;
    case (__u32)13: 
#line 7153 
    ;
    
#line 7154 
    tmp = (unsigned int)tp->key[2];
    
#line 7156 
    if (0 != 0) 
#line 7156 
                fsp->h_u.usr_ip4_spec.l4_4_bytes = (((tmp << 24) | ((tmp << 8) & 16711680U)) | ((tmp >> 8) & 65280U)) | (tmp >> 24); else 
                                                                    
#line 7156 
                                                                    fsp->h_u.usr_ip4_spec.l4_4_bytes = __fswab32(tmp);
    
#line 7158 
    tmp = (unsigned int)tp->key_mask[2];
    
#line 7160 
    if (0 != 0) 
#line 7160 
                fsp->m_u.usr_ip4_spec.l4_4_bytes = (((tmp << 24) | ((tmp << 8) & 16711680U)) | ((tmp >> 8) & 65280U)) | (tmp >> 24); else 
                                                                    
#line 7160 
                                                                    fsp->m_u.usr_ip4_spec.l4_4_bytes = __fswab32(tmp);
    
#line 7162 
    fsp->h_u.usr_ip4_spec.proto = (unsigned char)(tp->key[2] >> 32);
    
#line 7165 
    fsp->m_u.usr_ip4_spec.proto = (unsigned char)(tp->key_mask[2] >> 32);
    
#line 7169 
    fsp->h_u.usr_ip4_spec.ip_ver = (unsigned char)1U;
    
#line 7170 
    goto ldv_55070;
    default: 
#line 7171 
    ;
    
#line 7172 
    goto ldv_55070;
  }
  ldv_55070: 
#line 7174 
  ;
  
#line 7175 
  return;
}


#line 7176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_ethtool_tcam_entry(struct niu *np, struct ethtool_rxnfc *nfc)
{
  int __retres;
  struct niu_tcam_entry *tp;
  u16 idx;
  u64 class;
  u16 tmp;
  
#line 7179 
  struct niu_parent *parent = np->parent;
  
#line 7181 
  struct ethtool_rx_flow_spec *fsp = & nfc->fs;
  
#line 7184 
  int ret = 0;
  
#line 7186 
  idx = tcam_get_index(np,(unsigned short)((int)((unsigned short)nfc->fs.location)));
  
#line 7188 
  tp = & parent->tcam[(int)idx];
  
#line 7189 
  if ((unsigned int)tp->valid == 0U) {
    
#line 7190 
    netdev_info((struct net_device const *)np->dev,"niu%d: entry [%d] invalid for idx[%d]\n",parent->index,(int)((unsigned short)nfc->fs.location),(int)idx);
    
#line 7192 
    __retres = -22;
    
#line 7192 
    goto return_label;
  }
  else ;
  
#line 7196 
  class = (tp->key[0] >> 3) & 31ULL;
  
#line 7198 
  ret = niu_class_to_ethflow(class,(int *)(& fsp->flow_type));
  
#line 7199 
  if (ret < 0) {
    
#line 7200 
    netdev_info((struct net_device const *)np->dev,"niu%d: niu_class_to_ethflow failed\n",parent->index);
    
#line 7202 
    goto out;
  }
  else ;
  
#line 7205 
  if (fsp->flow_type == 9U || fsp->flow_type == 11U) {
    
#line 7206 
    u32 proto = (unsigned int)(tp->key[2] >> 32) & 255U;
    
#line 7208 
    if (proto == 50U) 
      
#line 7209 
      if (fsp->flow_type == 9U) 
#line 7210 
                                fsp->flow_type = 10U; else 
#line 7212 
                                                           fsp->flow_type = 12U;
    else ;
  }
  else ;
  
#line 7216 
  switch (fsp->flow_type) {
    case (__u32)1: 
#line 7217 
    ;
    case (__u32)2: 
#line 7218 
    ;
    case (__u32)3: 
#line 7219 
    ;
    case (__u32)9: 
#line 7220 
    ;
    case (__u32)10: 
#line 7221 
    ;
    
#line 7222 
    niu_get_ip4fs_from_tcam_key(tp,fsp);
    
#line 7223 
    goto ldv_55092;
    case (__u32)5: 
#line 7224 
    ;
    case (__u32)6: 
#line 7225 
    ;
    case (__u32)7: 
#line 7226 
    ;
    case (__u32)11: 
#line 7227 
    ;
    case (__u32)12: 
#line 7228 
    ;
    
#line 7230 
    ret = -22;
    
#line 7231 
    goto ldv_55092;
    case (__u32)13: 
#line 7232 
    ;
    
#line 7233 
    niu_get_ip4fs_from_tcam_key(tp,fsp);
    
#line 7234 
    goto ldv_55092;
    default: 
#line 7235 
    ;
    
#line 7236 
    ret = -22;
    
#line 7237 
    goto ldv_55092;
  }
  ldv_55092: 
#line 7240 
  ;
  
#line 7240 
  if (ret < 0) 
#line 7241 
               goto out; else ;
  
#line 7243 
  if ((tp->assoc_data & 4096ULL) != 0ULL) 
#line 7244 
                                          fsp->ring_cookie = 18446744073709551615ULL; else 
                                                                    
#line 7246 
                                                                    fsp->ring_cookie = (tp->assoc_data >> 2) & 31ULL;
  
#line 7250 
  tmp = tcam_get_size(np);
  
#line 7250 
  nfc->data = (unsigned long long)tmp;
  out: 
#line 7251 
  ;
  
#line 7252 
  __retres = ret;
  return_label: 
#line 7252 
                return __retres;
}


#line 7255  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_ethtool_tcam_all(struct niu *np, struct ethtool_rxnfc *nfc, u32 *rule_locs)
{
  struct niu_tcam_entry *tp;
  int i;
  int idx;
  int cnt;
  unsigned long flags;
  u16 tmp;
  u16 tmp_0;
  
#line 7259 
  struct niu_parent *parent = np->parent;
  
#line 7263 
  int ret = 0;
  
#line 7266 
  tmp = tcam_get_size(np);
  
#line 7266 
  nfc->data = (unsigned long long)tmp;
  
#line 7268 
  ldv___ldv_spin_lock_123(& (np->parent)->lock);
  
#line 7269 
  cnt = 0;
  
#line 7269 
  i = 0;
  
#line 7269 
  goto ldv_55115;
  ldv_55114: 
#line 7270 
  ;
  
#line 7270 
  tmp_0 = tcam_get_index(np,(unsigned short)((int)((unsigned short)i)));
  
#line 7270 
  idx = (int)tmp_0;
  
#line 7271 
  tp = & parent->tcam[idx];
  
#line 7272 
  if ((unsigned int)tp->valid == 0U) 
#line 7273 
                                     goto ldv_55112; else ;
  
#line 7274 
  if (nfc->rule_cnt == (unsigned int)cnt) {
    
#line 7275 
    ret = -90;
    
#line 7276 
    goto ldv_55113;
  }
  else ;
  
#line 7278 
  *(rule_locs + cnt) = (unsigned int)i;
  
#line 7279 
  cnt += 1;
  ldv_55112: 
#line 7280 
  ;
  
#line 7269 
  i += 1;
  ldv_55115: 
#line 7270 
  ;
  
#line 7269 
  if ((unsigned long long)i < nfc->data) 
#line 7271 
                                         goto ldv_55114; else 
#line 7274 
                                                              goto ldv_55113;
  ldv_55113: 
#line 7275 
  ;
  
#line 7281 
  ldv_spin_unlock_irqrestore_124(& (np->parent)->lock,flags);
  
#line 7283 
  nfc->rule_cnt = (unsigned int)cnt;
  
#line 7285 
  return ret;
}


#line 7288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_nfc(struct net_device *dev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  
#line 7291 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 7292 
  int ret = 0;
  
#line 7294 
  switch (cmd->cmd) {
    u16 tmp_0;
    case (__u32)41: 
#line 7295 
    ;
    
#line 7296 
    ret = niu_get_hash_opts(np,cmd);
    
#line 7297 
    goto ldv_55124;
    case (__u32)45: 
#line 7298 
    ;
    
#line 7299 
    cmd->data = (unsigned long long)np->num_rx_rings;
    
#line 7300 
    goto ldv_55124;
    case (__u32)46: 
#line 7301 
    ;
    
#line 7302 
    tmp_0 = tcam_get_valid_entry_cnt(np);
    
#line 7302 
    cmd->rule_cnt = (unsigned int)tmp_0;
    
#line 7303 
    goto ldv_55124;
    case (__u32)47: 
#line 7304 
    ;
    
#line 7305 
    ret = niu_get_ethtool_tcam_entry(np,cmd);
    
#line 7306 
    goto ldv_55124;
    case (__u32)48: 
#line 7307 
    ;
    
#line 7308 
    ret = niu_get_ethtool_tcam_all(np,cmd,rule_locs);
    
#line 7309 
    goto ldv_55124;
    default: 
#line 7310 
    ;
    
#line 7311 
    ret = -22;
    
#line 7312 
    goto ldv_55124;
  }
  ldv_55124: 
#line 7315 
  ;
  
#line 7315 
  return ret;
}


#line 7318  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_hash_opts(struct niu *np, struct ethtool_rxnfc *nfc)
{
  int __retres;
  u64 class;
  unsigned long flags;
  int tmp;
  int tmp_0;
  
#line 7321 
  u64 flow_key = 0ULL;
  
#line 7324 
  tmp = niu_ethflow_to_class((int)nfc->flow_type,& class);
  
#line 7324 
  if (tmp == 0) {
    
#line 7325 
    __retres = -22;
    
#line 7325 
    goto return_label;
  }
  else ;
  
#line 7327 
  if (class + 18446744073709551612ULL > 11ULL) {
    
#line 7329 
    __retres = -22;
    
#line 7329 
    goto return_label;
  }
  else ;
  
#line 7331 
  if ((nfc->data & 18446744071562067968ULL) != 0ULL) {
    
#line 7332 
    ldv___ldv_spin_lock_125(& (np->parent)->lock);
    
#line 7333 
    flow_key = (np->parent)->tcam_key[class + 18446744073709551612ULL];
    
#line 7335 
    flow_key |= 8ULL;
    
#line 7336 
    writeq((unsigned long)flow_key,(void volatile *)(np->regs + (class + 475138ULL) * 8ULL));
    
#line 7337 
    (np->parent)->tcam_key[class + 18446744073709551612ULL] = flow_key;
    
#line 7338 
    ldv_spin_unlock_irqrestore_126(& (np->parent)->lock,flags);
    
#line 7339 
    __retres = 0;
    
#line 7339 
    goto return_label;
  }
  else 
    
#line 7342 
    if (((np->parent)->tcam_key[class + 18446744073709551612ULL] & 8ULL) != 0ULL) {
      
#line 7344 
      ldv___ldv_spin_lock_127(& (np->parent)->lock);
      
#line 7345 
      flow_key = (np->parent)->tcam_key[class + 18446744073709551612ULL];
      
#line 7347 
      flow_key &= 18446744073709551607ULL;
      
#line 7348 
      writeq((unsigned long)flow_key,(void volatile *)(np->regs + (class + 475138ULL) * 8ULL));
      
#line 7350 
      (np->parent)->tcam_key[class + 18446744073709551612ULL] = flow_key;
      
#line 7352 
      ldv_spin_unlock_irqrestore_128(& (np->parent)->lock,flags);
    }
    else ;
  
#line 7356 
  tmp_0 = niu_ethflow_to_flowkey(nfc->data,& flow_key);
  
#line 7356 
  if (tmp_0 == 0) {
    
#line 7357 
    __retres = -22;
    
#line 7357 
    goto return_label;
  }
  else ;
  
#line 7359 
  ldv___ldv_spin_lock_129(& (np->parent)->lock);
  
#line 7360 
  writeq((unsigned long)flow_key,(void volatile *)(np->regs + (class + 491516ULL) * 8ULL));
  
#line 7361 
  (np->parent)->flow_key[class + 18446744073709551612ULL] = flow_key;
  
#line 7362 
  ldv_spin_unlock_irqrestore_130(& (np->parent)->lock,flags);
  
#line 7364 
  __retres = 0;
  return_label: 
#line 7364 
                return __retres;
}


#line 7367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_get_tcamkey_from_ip4fs(struct ethtool_rx_flow_spec *fsp, struct niu_tcam_entry *tp, int l2_rdc_tab, u64 class)
{
  u32 sip;
  u32 dip;
  u32 sipm;
  u32 dipm;
  u32 spi;
  u32 spim;
  u16 sport;
  u16 dport;
  u16 spm;
  u16 dpm;
  
#line 7371 
  u8 pid = (unsigned char)0U;
  
#line 7375 
  if (0 != 0) 
#line 7375 
              sip = (((fsp->h_u.tcp_ip4_spec.ip4src << 24) | ((fsp->h_u.tcp_ip4_spec.ip4src << 8) & 16711680U)) | ((fsp->h_u.tcp_ip4_spec.ip4src >> 8) & 65280U)) | (fsp->h_u.tcp_ip4_spec.ip4src >> 24); else 
                                                                    
#line 7375 
                                                                    sip = __fswab32(fsp->h_u.tcp_ip4_spec.ip4src);
  
#line 7376 
  if (0 != 0) 
#line 7376 
              sipm = (((fsp->m_u.tcp_ip4_spec.ip4src << 24) | ((fsp->m_u.tcp_ip4_spec.ip4src << 8) & 16711680U)) | ((fsp->m_u.tcp_ip4_spec.ip4src >> 8) & 65280U)) | (fsp->m_u.tcp_ip4_spec.ip4src >> 24); else 
                                                                    
#line 7376 
                                                                    sipm = __fswab32(fsp->m_u.tcp_ip4_spec.ip4src);
  
#line 7377 
  if (0 != 0) 
#line 7377 
              dip = (((fsp->h_u.tcp_ip4_spec.ip4dst << 24) | ((fsp->h_u.tcp_ip4_spec.ip4dst << 8) & 16711680U)) | ((fsp->h_u.tcp_ip4_spec.ip4dst >> 8) & 65280U)) | (fsp->h_u.tcp_ip4_spec.ip4dst >> 24); else 
                                                                    
#line 7377 
                                                                    dip = __fswab32(fsp->h_u.tcp_ip4_spec.ip4dst);
  
#line 7378 
  if (0 != 0) 
#line 7378 
              dipm = (((fsp->m_u.tcp_ip4_spec.ip4dst << 24) | ((fsp->m_u.tcp_ip4_spec.ip4dst << 8) & 16711680U)) | ((fsp->m_u.tcp_ip4_spec.ip4dst >> 8) & 65280U)) | (fsp->m_u.tcp_ip4_spec.ip4dst >> 24); else 
                                                                    
#line 7378 
                                                                    dipm = __fswab32(fsp->m_u.tcp_ip4_spec.ip4dst);
  
#line 7380 
  tp->key[0] = class << 3;
  
#line 7381 
  tp->key_mask[0] = 248ULL;
  
#line 7382 
  tp->key[1] = (unsigned long long)l2_rdc_tab << 59;
  
#line 7383 
  tp->key_mask[1] = 17870283321406128128ULL;
  
#line 7385 
  tp->key[3] = (unsigned long long)sip << 32;
  
#line 7386 
  tp->key[3] |= (unsigned long long)dip;
  
#line 7388 
  tp->key_mask[3] = (unsigned long long)sipm << 32;
  
#line 7389 
  tp->key_mask[3] |= (unsigned long long)dipm;
  
#line 7391 
  tp->key[2] |= (unsigned long long)fsp->h_u.tcp_ip4_spec.tos << 40;
  
#line 7393 
  tp->key_mask[2] |= (unsigned long long)fsp->m_u.tcp_ip4_spec.tos << 40;
  
#line 7395 
  switch (fsp->flow_type) {
    case (__u32)1: 
#line 7396 
    ;
    case (__u32)2: 
#line 7397 
    ;
    case (__u32)3: 
#line 7398 
    ;
    
#line 7399 
    if (0 != 0) 
#line 7399 
                sport = (unsigned short)(((int)fsp->h_u.tcp_ip4_spec.psrc << 8) | ((int)fsp->h_u.tcp_ip4_spec.psrc >> 8)); else 
                                                                    
#line 7399 
                                                                    sport = __fswab16((unsigned short)((int)fsp->h_u.tcp_ip4_spec.psrc));
    
#line 7400 
    if (0 != 0) 
#line 7400 
                spm = (unsigned short)(((int)fsp->m_u.tcp_ip4_spec.psrc << 8) | ((int)fsp->m_u.tcp_ip4_spec.psrc >> 8)); else 
                                                                    
#line 7400 
                                                                    spm = __fswab16((unsigned short)((int)fsp->m_u.tcp_ip4_spec.psrc));
    
#line 7401 
    if (0 != 0) 
#line 7401 
                dport = (unsigned short)(((int)fsp->h_u.tcp_ip4_spec.pdst << 8) | ((int)fsp->h_u.tcp_ip4_spec.pdst >> 8)); else 
                                                                    
#line 7401 
                                                                    dport = __fswab16((unsigned short)((int)fsp->h_u.tcp_ip4_spec.pdst));
    
#line 7402 
    if (0 != 0) 
#line 7402 
                dpm = (unsigned short)(((int)fsp->m_u.tcp_ip4_spec.pdst << 8) | ((int)fsp->m_u.tcp_ip4_spec.pdst >> 8)); else 
                                                                    
#line 7402 
                                                                    dpm = __fswab16((unsigned short)((int)fsp->m_u.tcp_ip4_spec.pdst));
    
#line 7404 
    tp->key[2] |= ((unsigned long long)sport << 16) | (unsigned long long)dport;
    
#line 7405 
    tp->key_mask[2] |= ((unsigned long long)spm << 16) | (unsigned long long)dpm;
    
#line 7406 
    niu_ethflow_to_l3proto((int)fsp->flow_type,& pid);
    
#line 7407 
    goto ldv_55157;
    case (__u32)9: 
#line 7408 
    ;
    case (__u32)10: 
#line 7409 
    ;
    
#line 7410 
    if (0 != 0) 
#line 7410 
                spi = (((fsp->h_u.ah_ip4_spec.spi << 24) | ((fsp->h_u.ah_ip4_spec.spi << 8) & 16711680U)) | ((fsp->h_u.ah_ip4_spec.spi >> 8) & 65280U)) | (fsp->h_u.ah_ip4_spec.spi >> 24); else 
                                                                    
#line 7410 
                                                                    spi = __fswab32(fsp->h_u.ah_ip4_spec.spi);
    
#line 7411 
    if (0 != 0) 
#line 7411 
                spim = (((fsp->m_u.ah_ip4_spec.spi << 24) | ((fsp->m_u.ah_ip4_spec.spi << 8) & 16711680U)) | ((fsp->m_u.ah_ip4_spec.spi >> 8) & 65280U)) | (fsp->m_u.ah_ip4_spec.spi >> 24); else 
                                                                    
#line 7411 
                                                                    spim = __fswab32(fsp->m_u.ah_ip4_spec.spi);
    
#line 7413 
    tp->key[2] |= (unsigned long long)spi;
    
#line 7414 
    tp->key_mask[2] |= (unsigned long long)spim;
    
#line 7415 
    niu_ethflow_to_l3proto((int)fsp->flow_type,& pid);
    
#line 7416 
    goto ldv_55157;
    case (__u32)13: 
#line 7417 
    ;
    
#line 7418 
    if (0 != 0) 
#line 7418 
                spi = (((fsp->h_u.usr_ip4_spec.l4_4_bytes << 24) | ((fsp->h_u.usr_ip4_spec.l4_4_bytes << 8) & 16711680U)) | ((fsp->h_u.usr_ip4_spec.l4_4_bytes >> 8) & 65280U)) | (fsp->h_u.usr_ip4_spec.l4_4_bytes >> 24); else 
                                                                    
#line 7418 
                                                                    spi = __fswab32(fsp->h_u.usr_ip4_spec.l4_4_bytes);
    
#line 7419 
    if (0 != 0) 
#line 7419 
                spim = (((fsp->m_u.usr_ip4_spec.l4_4_bytes << 24) | ((fsp->m_u.usr_ip4_spec.l4_4_bytes << 8) & 16711680U)) | ((fsp->m_u.usr_ip4_spec.l4_4_bytes >> 8) & 65280U)) | (fsp->m_u.usr_ip4_spec.l4_4_bytes >> 24); else 
                                                                    
#line 7419 
                                                                    spim = __fswab32(fsp->m_u.usr_ip4_spec.l4_4_bytes);
    
#line 7421 
    tp->key[2] |= (unsigned long long)spi;
    
#line 7422 
    tp->key_mask[2] |= (unsigned long long)spim;
    
#line 7423 
    pid = fsp->h_u.usr_ip4_spec.proto;
    
#line 7424 
    goto ldv_55157;
    default: 
#line 7425 
    ;
    
#line 7426 
    goto ldv_55157;
  }
  ldv_55157: 
#line 7429 
  ;
  
#line 7429 
  tp->key[2] |= (unsigned long long)pid << 32;
  
#line 7430 
  if ((unsigned int)pid != 0U) 
#line 7431 
                               tp->key_mask[2] |= 1095216660480ULL; else ;
  
#line 7432 
  return;
}


#line 7435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_add_ethtool_tcam_entry(struct niu *np, struct ethtool_rxnfc *nfc)
{
  int __retres;
  struct niu_tcam_entry *tp;
  u16 idx;
  u64 class;
  unsigned long flags;
  int err;
  int ret;
  u16 tmp;
  
#line 7438 
  struct niu_parent *parent = np->parent;
  
#line 7440 
  struct ethtool_rx_flow_spec *fsp = & nfc->fs;
  
#line 7441 
  struct niu_rdc_tables *rdc_table = & parent->rdc_group_cfg[(int)np->port];
  
#line 7442 
  int l2_rdc_table = rdc_table->first_table_num;
  
#line 7448 
  ret = 0;
  
#line 7450 
  idx = (unsigned short)nfc->fs.location;
  
#line 7451 
  tmp = tcam_get_size(np);
  
#line 7451 
  ;
  
#line 7451 
  if ((int)tmp <= (int)idx) {
    
#line 7452 
    __retres = -22;
    
#line 7452 
    goto return_label;
  }
  else ;
  
#line 7454 
  if (fsp->flow_type == 13U) {
    int i;
    
#line 7456 
    int add_usr_cls = 0;
    
#line 7457 
    struct ethtool_usrip4_spec *uspec = & fsp->h_u.usr_ip4_spec;
    
#line 7458 
    struct ethtool_usrip4_spec *umask = & fsp->m_u.usr_ip4_spec;
    
#line 7460 
    if ((unsigned int)uspec->ip_ver != 1U) {
      
#line 7461 
      __retres = -22;
      
#line 7461 
      goto return_label;
    }
    else ;
    
#line 7463 
    ldv___ldv_spin_lock_131(& (np->parent)->lock);
    
#line 7465 
    i = 0;
    
#line 7465 
    goto ldv_55189;
    ldv_55188: 
#line 7466 
    ;
    
#line 7466 
    if (parent->l3_cls[i] != 0ULL) {
      
#line 7467 
      if ((int)uspec->proto == (int)parent->l3_cls_pid[i]) {
        
#line 7468 
        class = parent->l3_cls[i];
        
#line 7469 
        parent->l3_cls_refcnt[i] = (u16)((int)parent->l3_cls_refcnt[i] + 1);
        
#line 7470 
        add_usr_cls = 1;
        
#line 7471 
        goto ldv_55180;
      }
      else ;
    }
    else {
      
#line 7475 
      switch (i) {
        case 0: 
#line 7476 
        ;
        
#line 7477 
        class = 4ULL;
        
#line 7478 
        goto ldv_55182;
        case 1: 
#line 7479 
        ;
        
#line 7480 
        class = 5ULL;
        
#line 7481 
        goto ldv_55182;
        case 2: 
#line 7482 
        ;
        
#line 7483 
        class = 6ULL;
        
#line 7484 
        goto ldv_55182;
        case 3: 
#line 7485 
        ;
        
#line 7486 
        class = 7ULL;
        
#line 7487 
        goto ldv_55182;
        default: 
#line 7488 
        ;
        
#line 7489 
        goto ldv_55182;
      }
      ldv_55182: 
#line 7491 
      ;
      
#line 7491 
      ret = tcam_user_ip_class_set(np,(unsigned long)class,0,(unsigned long long)uspec->proto,(unsigned long long)uspec->tos,(unsigned long long)umask->tos);
      
#line 7495 
      if (ret != 0) 
#line 7496 
                    goto out; else ;
      
#line 7498 
      ret = tcam_user_ip_class_enable(np,(unsigned long)class,1);
      
#line 7499 
      if (ret != 0) 
#line 7500 
                    goto out; else ;
      
#line 7501 
      parent->l3_cls[i] = class;
      
#line 7502 
      parent->l3_cls_pid[i] = uspec->proto;
      
#line 7503 
      parent->l3_cls_refcnt[i] = (u16)((int)parent->l3_cls_refcnt[i] + 1);
      
#line 7504 
      add_usr_cls = 1;
      
#line 7505 
      goto ldv_55180;
    }
    
#line 7465 
    i += 1;
    ldv_55189: 
#line 7466 
    ;
    
#line 7465 
    if (i <= 3) 
#line 7467 
                goto ldv_55188; else 
#line 7470 
                                     goto ldv_55180;
    ldv_55180: 
#line 7471 
    ;
    
#line 7508 
    if (add_usr_cls == 0) {
      
#line 7509 
      netdev_info((struct net_device const *)np->dev,"niu%d: %s(): Could not find/insert class for pid %d\n",parent->index,"niu_add_ethtool_tcam_entry",(int)uspec->proto);
      
#line 7511 
      ret = -22;
      
#line 7512 
      goto out;
    }
    else ;
    
#line 7514 
    ldv_spin_unlock_irqrestore_132(& (np->parent)->lock,flags);
  }
  else {
    int tmp_0;
    
#line 7516 
    tmp_0 = niu_ethflow_to_class((int)fsp->flow_type,& class);
    
#line 7516 
    if (tmp_0 == 0) {
      
#line 7517 
      __retres = -22;
      
#line 7517 
      goto return_label;
    }
    else ;
  }
  
#line 7521 
  ldv___ldv_spin_lock_133(& (np->parent)->lock);
  
#line 7523 
  idx = tcam_get_index(np,(unsigned short)((int)idx));
  
#line 7524 
  tp = & parent->tcam[(int)idx];
  
#line 7526 
  memset((void *)tp,0,80UL);
  
#line 7529 
  switch (fsp->flow_type) {
    case (__u32)1: 
#line 7530 
    ;
    case (__u32)2: 
#line 7531 
    ;
    case (__u32)3: 
#line 7532 
    ;
    case (__u32)9: 
#line 7533 
    ;
    case (__u32)10: 
#line 7534 
    ;
    
#line 7535 
    niu_get_tcamkey_from_ip4fs(fsp,tp,l2_rdc_table,class);
    
#line 7536 
    goto ldv_55196;
    case (__u32)5: 
#line 7537 
    ;
    case (__u32)6: 
#line 7538 
    ;
    case (__u32)7: 
#line 7539 
    ;
    case (__u32)11: 
#line 7540 
    ;
    case (__u32)12: 
#line 7541 
    ;
    
#line 7543 
    netdev_info((struct net_device const *)np->dev,"niu%d: In %s(): flow %d for IPv6 not implemented\n",parent->index,"niu_add_ethtool_tcam_entry",fsp->flow_type);
    
#line 7545 
    ret = -22;
    
#line 7546 
    goto out;
    case (__u32)13: 
#line 7547 
    ;
    
#line 7548 
    niu_get_tcamkey_from_ip4fs(fsp,tp,l2_rdc_table,class);
    
#line 7549 
    goto ldv_55196;
    default: 
#line 7550 
    ;
    
#line 7551 
    netdev_info((struct net_device const *)np->dev,"niu%d: In %s(): Unknown flow type %d\n",parent->index,"niu_add_ethtool_tcam_entry",fsp->flow_type);
    
#line 7553 
    ret = -22;
    
#line 7554 
    goto out;
  }
  ldv_55196: 
#line 7558 
  ;
  
#line 7558 
  if (fsp->ring_cookie == 18446744073709551615ULL) 
#line 7559 
                                                   tp->assoc_data = 4096ULL;
  else {
    
#line 7561 
    if (fsp->ring_cookie >= (unsigned long long)np->num_rx_rings) {
      
#line 7562 
      netdev_info((struct net_device const *)np->dev,"niu%d: In %s(): Invalid RX ring %lld\n",parent->index,"niu_add_ethtool_tcam_entry",(long long)fsp->ring_cookie);
      
#line 7565 
      ret = -22;
      
#line 7566 
      goto out;
    }
    else ;
    
#line 7568 
    tp->assoc_data = (fsp->ring_cookie << 2) | 1024ULL;
  }
  
#line 7573 
  err = tcam_write(np,(int)idx,(u64 *)(& tp->key),(u64 *)(& tp->key_mask));
  
#line 7574 
  if (err != 0) {
    
#line 7575 
    ret = -22;
    
#line 7576 
    goto out;
  }
  else ;
  
#line 7578 
  err = tcam_assoc_write(np,(int)idx,tp->assoc_data);
  
#line 7579 
  if (err != 0) {
    
#line 7580 
    ret = -22;
    
#line 7581 
    goto out;
  }
  else ;
  
#line 7585 
  tp->valid = (unsigned char)1U;
  
#line 7586 
  np->clas.tcam_valid_entries = (u16)((int)np->clas.tcam_valid_entries + 1);
  out: 
#line 7587 
  ;
  
#line 7588 
  ldv_spin_unlock_irqrestore_134(& (np->parent)->lock,flags);
  
#line 7590 
  __retres = ret;
  return_label: 
#line 7590 
                return __retres;
}


#line 7593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_del_ethtool_tcam_entry(struct niu *np, u32 loc)
{
  int __retres;
  struct niu_tcam_entry *tp;
  u16 idx;
  unsigned long flags;
  u64 class;
  u16 tmp;
  
#line 7595 
  struct niu_parent *parent = np->parent;
  
#line 7600 
  int ret = 0;
  
#line 7602 
  tmp = tcam_get_size(np);
  
#line 7602 
  ;
  
#line 7602 
  if ((unsigned int)tmp <= loc) {
    
#line 7603 
    __retres = -22;
    
#line 7603 
    goto return_label;
  }
  else ;
  
#line 7605 
  ldv___ldv_spin_lock_135(& (np->parent)->lock);
  
#line 7607 
  idx = tcam_get_index(np,(unsigned short)((int)((unsigned short)loc)));
  
#line 7608 
  tp = & parent->tcam[(int)idx];
  
#line 7611 
  class = (tp->key[0] >> 3) & 31ULL;
  
#line 7614 
  if (class + 18446744073709551612ULL <= 3ULL) {
    int i;
    
#line 7616 
    i = 0;
    
#line 7616 
    goto ldv_55218;
    ldv_55217: 
#line 7617 
    ;
    
#line 7617 
    if (parent->l3_cls[i] == class) {
      
#line 7618 
      parent->l3_cls_refcnt[i] = (u16)((int)parent->l3_cls_refcnt[i] - 1);
      
#line 7619 
      if ((unsigned int)parent->l3_cls_refcnt[i] == 0U) {
        
#line 7621 
        ret = tcam_user_ip_class_enable(np,(unsigned long)class,0);
        
#line 7624 
        if (ret != 0) 
#line 7625 
                      goto out; else ;
        
#line 7626 
        parent->l3_cls[i] = 0ULL;
        
#line 7627 
        parent->l3_cls_pid[i] = (unsigned char)0U;
      }
      else ;
      
#line 7629 
      goto ldv_55216;
    }
    else ;
    
#line 7616 
    i += 1;
    ldv_55218: 
#line 7617 
    ;
    
#line 7616 
    if (i <= 3) 
#line 7618 
                goto ldv_55217; else 
#line 7621 
                                     goto ldv_55216;
    ldv_55216: 
#line 7622 
    ;
    
#line 7632 
    if (i == 4) {
      
#line 7633 
      netdev_info((struct net_device const *)np->dev,"niu%d: In %s(): Usr class 0x%llx not found\n",parent->index,"niu_del_ethtool_tcam_entry",class);
      
#line 7636 
      ret = -22;
      
#line 7637 
      goto out;
    }
    else ;
  }
  else ;
  
#line 7641 
  ret = tcam_flush(np,(int)idx);
  
#line 7642 
  if (ret != 0) 
#line 7643 
                goto out; else ;
  
#line 7646 
  tp->valid = (unsigned char)0U;
  
#line 7647 
  np->clas.tcam_valid_entries = (u16)((int)np->clas.tcam_valid_entries - 1);
  out: 
#line 7648 
  ;
  
#line 7649 
  ldv_spin_unlock_irqrestore_136(& (np->parent)->lock,flags);
  
#line 7651 
  __retres = ret;
  return_label: 
#line 7651 
                return __retres;
}


#line 7654  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_nfc(struct net_device *dev, struct ethtool_rxnfc *cmd)
{
  
#line 7656 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 7657 
  int ret = 0;
  
#line 7659 
  switch (cmd->cmd) {
    case (__u32)42: 
#line 7660 
    ;
    
#line 7661 
    ret = niu_set_hash_opts(np,cmd);
    
#line 7662 
    goto ldv_55227;
    case (__u32)50: 
#line 7663 
    ;
    
#line 7664 
    ret = niu_add_ethtool_tcam_entry(np,cmd);
    
#line 7665 
    goto ldv_55227;
    case (__u32)49: 
#line 7666 
    ;
    
#line 7667 
    ret = niu_del_ethtool_tcam_entry(np,cmd->fs.location);
    
#line 7668 
    goto ldv_55227;
    default: 
#line 7669 
    ;
    
#line 7670 
    ret = -22;
    
#line 7671 
    goto ldv_55227;
  }
  ldv_55227: 
#line 7674 
  ;
  
#line 7674 
  return ret;
}


#line 7679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct __anonstruct_niu_xmac_stat_keys_377 const niu_xmac_stat_keys[29U] = {{.string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'c', (char)'a', (char)'l', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'e', (char)'m', (char)'o', (char)'t', (char)'e', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'1', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'2', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'3', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'4', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'5', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'6', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'7', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'v', (char)'i', (char)'o', (char)'l', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s', (char)'\000'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'o', (char)'f', (char)'f', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e', (char)'\000'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'o', (char)'n', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e', (char)'\000'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d', (char)'\000'}}};

#line 7715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct __anonstruct_niu_bmac_stat_keys_378 const niu_bmac_stat_keys[12U] = {{.string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'o', (char)'f', (char)'f', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e', (char)'\000'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'o', (char)'n', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e', (char)'\000'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d', (char)'\000'}}};

#line 7734  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct __anonstruct_niu_rxchan_stat_keys_379 const niu_rxchan_stat_keys[5U] = {{.string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'n', (char)'e', (char)'l', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}};

#line 7746  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct __anonstruct_niu_txchan_stat_keys_380 const niu_txchan_stat_keys[4U] = {{.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'n', (char)'e', (char)'l', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}};

#line 7755  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  int i;
  
#line 7757 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 7760 
  if (stringset != 1U) 
#line 7761 
                       goto return_label; else ;
  
#line 7763 
  if ((np->flags & 65536U) != 0U) {
    
#line 7764 
    memcpy((void *)data,(void const *)(& niu_xmac_stat_keys),928UL);
    
#line 7766 
    data += 928U;
  }
  else {
    
#line 7768 
    memcpy((void *)data,(void const *)(& niu_bmac_stat_keys),384UL);
    
#line 7770 
    data += 384U;
  }
  
#line 7772 
  i = 0;
  
#line 7772 
  goto ldv_55251;
  ldv_55250: 
#line 7773 
  ;
  
#line 7773 
  memcpy((void *)data,(void const *)(& niu_rxchan_stat_keys),160UL);
  
#line 7775 
  data += 160U;
  
#line 7772 
  i += 1;
  ldv_55251: 
#line 7773 
  ;
  
#line 7772 
  if (np->num_rx_rings > i) 
#line 7774 
                            goto ldv_55250; else 
#line 7777 
                                                 goto ldv_55252;
  ldv_55252: 
#line 7778 
  ;
  
#line 7777 
  i = 0;
  
#line 7777 
  goto ldv_55254;
  ldv_55253: 
#line 7778 
  ;
  
#line 7778 
  memcpy((void *)data,(void const *)(& niu_txchan_stat_keys),128UL);
  
#line 7780 
  data += 128U;
  
#line 7777 
  i += 1;
  ldv_55254: 
#line 7778 
  ;
  
#line 7777 
  if (np->num_tx_rings > i) 
#line 7779 
                            goto ldv_55253; else 
#line 7782 
                                                 goto ldv_55255;
  ldv_55255: 
#line 7783 
  ;
  return_label: 
#line 7784 
                return;
}


#line 7784  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_sset_count(struct net_device *dev, int stringset)
{
  int __retres;
  unsigned int tmp_0;
  
#line 7786 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 7788 
  if (stringset != 1) {
    
#line 7789 
    __retres = -22;
    
#line 7789 
    goto return_label;
  }
  else ;
  
#line 7794 
  if ((np->flags & 65536U) != 0U) 
#line 7794 
                                  tmp_0 = 29U; else 
#line 7794 
                                                    tmp_0 = 12U;
  
#line 7794 
  ;
  
#line 7794 
  __retres = (int)((unsigned long)tmp_0 + ((unsigned long)np->num_tx_rings * (unsigned long)4U + (unsigned long)np->num_rx_rings * (unsigned long)5U));
  return_label: 
#line 7794 
                return __retres;
}


#line 7798  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  int i;
  
#line 7801 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 7804 
  niu_sync_mac_stats(np);
  
#line 7805 
  if ((np->flags & 65536U) != 0U) {
    
#line 7806 
    memcpy((void *)data,(void const *)(& np->mac_stats.xmac),232UL);
    
#line 7808 
    data += 29U;
  }
  else {
    
#line 7810 
    memcpy((void *)data,(void const *)(& np->mac_stats.bmac),96UL);
    
#line 7812 
    data += 12U;
  }
  
#line 7814 
  i = 0;
  
#line 7814 
  goto ldv_55282;
  ldv_55281: 
#line 7815 
  ;
  {
    
#line 7815 
    struct rx_ring_info *rp = np->rx_rings + i;
    
#line 7817 
    niu_sync_rx_discard_stats(np,rp,0);
    
#line 7819 
    *data = (unsigned long long)rp->rx_channel;
    
#line 7820 
    *(data + 1U) = rp->rx_packets;
    
#line 7821 
    *(data + 2U) = rp->rx_bytes;
    
#line 7822 
    *(data + 3U) = rp->rx_dropped;
    
#line 7823 
    *(data + 4U) = rp->rx_errors;
    
#line 7824 
    data += 5U;
  }
  
#line 7814 
  i += 1;
  ldv_55282: 
#line 7815 
  ;
  
#line 7814 
  if (np->num_rx_rings > i) 
#line 7816 
                            goto ldv_55281; else 
#line 7819 
                                                 goto ldv_55283;
  ldv_55283: 
#line 7820 
  ;
  
#line 7826 
  i = 0;
  
#line 7826 
  goto ldv_55286;
  ldv_55285: 
#line 7827 
  ;
  {
    
#line 7827 
    struct tx_ring_info *rp_0 = np->tx_rings + i;
    
#line 7829 
    *data = (unsigned long long)rp_0->tx_channel;
    
#line 7830 
    *(data + 1U) = rp_0->tx_packets;
    
#line 7831 
    *(data + 2U) = rp_0->tx_bytes;
    
#line 7832 
    *(data + 3U) = rp_0->tx_errors;
    
#line 7833 
    data += 4U;
  }
  
#line 7826 
  i += 1;
  ldv_55286: 
#line 7827 
  ;
  
#line 7826 
  if (np->num_tx_rings > i) 
#line 7828 
                            goto ldv_55285; else 
#line 7831 
                                                 goto ldv_55287;
  ldv_55287: 
#line 7832 
  ;
  
#line 7833 
  return;
}


#line 7837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u64 niu_led_state_save(struct niu *np)
{
  u64 __retres;
  
#line 7839 
  if ((np->flags & 65536U) != 0U) {
    u64 tmp;
    
#line 7840 
    tmp = (u64)readq((void const volatile *)(np->mac_regs + 96U));
    
#line 7840 
    __retres = tmp;
    
#line 7840 
    goto return_label;
  }
  else {
    u64 tmp_0;
    
#line 7842 
    tmp_0 = (u64)readq((void const volatile *)(np->mac_regs + 120U));
    
#line 7842 
    __retres = tmp_0;
    
#line 7842 
    goto return_label;
  }
  return_label: 
#line 7839 
                return __retres;
}


#line 7845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_led_state_restore(struct niu *np, u64 val)
{
  
#line 7847 
  if ((np->flags & 65536U) != 0U) 
#line 7848 
                                  writeq((unsigned long)val,(void volatile *)(np->mac_regs + 96U)); else 
                                                                    
#line 7850 
                                                                    writeq((unsigned long)val,(void volatile *)(np->mac_regs + 120U));
  
#line 7851 
  return;
}


#line 7853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_force_led(struct niu *np, int on)
{
  u64 val;
  u64 reg;
  u64 bit;
  
#line 7857 
  if ((np->flags & 65536U) != 0U) {
    
#line 7858 
    reg = 96ULL;
    
#line 7859 
    bit = 2097152ULL;
  }
  else {
    
#line 7861 
    reg = 120ULL;
    
#line 7862 
    bit = 32ULL;
  }
  
#line 7865 
  val = (u64)readq((void const volatile *)(np->mac_regs + reg));
  
#line 7866 
  if (on != 0) 
#line 7867 
               val |= bit; else 
#line 7869 
                                val = ~ bit & val;
  
#line 7870 
  writeq((unsigned long)val,(void volatile *)(np->mac_regs + reg));
  
#line 7871 
  return;
}


#line 7873  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 7877 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 7879 
  tmp_0 = netif_running((struct net_device const *)dev);
  
#line 7879 
  if (tmp_0) 
#line 7879 
             tmp_1 = 0; else 
#line 7879 
                             tmp_1 = 1;
  
#line 7879 
  if (tmp_1) {
    
#line 7880 
    __retres = -11;
    
#line 7880 
    goto return_label;
  }
  else ;
  
#line 7882 
  switch ((unsigned int)state) {
    case (unsigned int)1: 
#line 7883 
    ;
    
#line 7884 
    np->orig_led_state = niu_led_state_save(np);
    
#line 7885 
    __retres = 1;
    
#line 7885 
    goto return_label;
    case (unsigned int)2: 
#line 7887 
    ;
    
#line 7888 
    niu_force_led(np,1);
    
#line 7889 
    goto ldv_55309;
    case (unsigned int)3: 
#line 7891 
    ;
    
#line 7892 
    niu_force_led(np,0);
    
#line 7893 
    goto ldv_55309;
    case (unsigned int)0: 
#line 7895 
    ;
    
#line 7896 
    niu_led_state_restore(np,np->orig_led_state);
  }
  ldv_55309: 
#line 7899 
  ;
  
#line 7899 
  __retres = 0;
  return_label: 
#line 7899 
                return __retres;
}


#line 7902  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct ethtool_ops const niu_ethtool_ops = {.get_settings = & niu_get_settings, .set_settings = & niu_set_settings, .get_drvinfo = & niu_get_drvinfo, .get_regs_len = (int (*)(struct net_device *))0, .get_regs = (void (*)(struct net_device *, struct ethtool_regs *, void *))0, .get_wol = (void (*)(struct net_device *, struct ethtool_wolinfo *))0, .set_wol = (int (*)(struct net_device *, struct ethtool_wolinfo *))0, .get_msglevel = & niu_get_msglevel, .set_msglevel = & niu_set_msglevel, .nway_reset = & niu_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = & niu_get_eeprom_len, .get_eeprom = & niu_get_eeprom, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .set_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .get_ringparam = (void (*)(struct net_device *, struct ethtool_ringparam *))0, .set_ringparam = (int (*)(struct net_device *, struct ethtool_ringparam *))0, .get_pauseparam = (void (*)(struct net_device *, struct ethtool_pauseparam *))0, .set_pauseparam = (int (*)(struct net_device *, struct ethtool_pauseparam *))0, .self_test = (void (*)(struct net_device *, struct ethtool_test *, u64 *))0, .get_strings = & niu_get_strings, .set_phys_id = & niu_set_phys_id, .get_ethtool_stats = & niu_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & niu_get_sset_count, .get_rxnfc = & niu_get_nfc, .set_rxnfc = & niu_set_nfc, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = (void (*)(struct net_device *, struct ethtool_channels *))0, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 7920  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_ldg_assign_ldn(struct niu *np, struct niu_parent *parent, int ldg, int ldn)
{
  int __retres;
  
#line 7923 
  if ((unsigned int)ldg > 63U) {
    
#line 7924 
    __retres = -22;
    
#line 7924 
    goto return_label;
  }
  else ;
  
#line 7925 
  if ((unsigned int)ldn > 68U) {
    
#line 7926 
    __retres = -22;
    
#line 7926 
    goto return_label;
  }
  else ;
  
#line 7928 
  parent->ldg_map[ldn] = (unsigned char)ldg;
  
#line 7930 
  if ((unsigned int)(np->parent)->plat_type == 2U) {
    unsigned long tmp_0;
    
#line 7936 
    tmp_0 = readq((void const volatile *)(np->regs + ((unsigned long)ldn + 81920UL) * 8UL));
    
#line 7936 
    ;
    
#line 7936 
    if (tmp_0 != (unsigned long)ldg) {
      unsigned long tmp;
      
#line 7939 
      tmp = readq((void const volatile *)(np->regs + ((unsigned long)ldn + 81920UL) * 8UL));
      
#line 7937 
      ;
      
#line 7937 
      ;
      
#line 7937 
      ;
      
#line 7937 
      ;
      
#line 7937 
      dev_err((struct device const *)np->device,"Port %u, mis-matched LDG assignment for ldn %d, should be %d is %llu\n",(int)np->port,ldn,ldg,(unsigned long long)tmp);
      
#line 7940 
      __retres = -22;
      
#line 7940 
      goto return_label;
    }
    else ;
  }
  else 
#line 7943 
       writeq((unsigned long)ldg,(void volatile *)(np->regs + ((unsigned long)ldn + 81920UL) * 8UL));
  
#line 7945 
  __retres = 0;
  return_label: 
#line 7945 
                return __retres;
}


#line 7948  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_ldg_timer_res(struct niu *np, int res)
{
  int __retres;
  
#line 7950 
  if ((unsigned int)res > 1048575U) {
    
#line 7951 
    __retres = -22;
    
#line 7951 
    goto return_label;
  }
  else ;
  
#line 7954 
  writeq((unsigned long)res,(void volatile *)(np->regs + 524296U));
  
#line 7956 
  __retres = 0;
  return_label: 
#line 7956 
                return __retres;
}


#line 7959  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_set_ldg_sid(struct niu *np, int ldg, int func, int vector)
{
  int __retres;
  
#line 7961 
  if (((unsigned int)ldg > 63U || (unsigned int)func > 3U) || (unsigned int)vector > 31U) {
    
#line 7964 
    __retres = -22;
    
#line 7964 
    goto return_label;
  }
  else ;
  
#line 7966 
  writeq((unsigned long)((func << 5) | vector),(void volatile *)(np->regs + ((unsigned long)ldg + 73792UL) * 8UL));
  
#line 7968 
  __retres = 0;
  return_label: 
#line 7968 
                return __retres;
}


#line 7971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_pci_eeprom_read(struct niu *np, u32 addr)
{
  int __retres;
  u64 frame;
  int limit;
  int tmp_0;
  int tmp_2;
  
#line 7973 
  u64 frame_base = (unsigned long long)((addr << 8) | 2147483648U);
  
#line 7977 
  if (addr > 262143U) {
    
#line 7978 
    __retres = -22;
    
#line 7978 
    goto return_label;
  }
  else ;
  
#line 7980 
  frame = frame_base;
  
#line 7981 
  writeq((unsigned long)frame,(void volatile *)(np->regs + 13369352U));
  
#line 7982 
  limit = 64;
  ldv_55337: 
#line 7983 
  ;
  
#line 7984 
  __const_udelay(21475UL);
  
#line 7985 
  frame = (u64)readq((void const volatile *)(np->regs + 13369352U));
  
#line 7986 
  if ((frame & 1073741824ULL) != 0ULL) 
#line 7987 
                                       goto ldv_55336; else ;
  
#line 7988 
  tmp_0 = limit;
  
#line 7988 
  limit -= 1;
  
#line 7988 
  ;
  
#line 7988 
  if (tmp_0 != 0) 
#line 7990 
                  goto ldv_55337; else 
#line 7993 
                                       goto ldv_55336;
  ldv_55336: 
#line 7994 
  ;
  
#line 7989 
  if ((frame & 1073741824ULL) == 0ULL) {
    
#line 7990 
    dev_err((struct device const *)np->device,"EEPROM read timeout frame[%llx]\n",frame);
    
#line 7992 
    __retres = -19;
    
#line 7992 
    goto return_label;
  }
  else ;
  
#line 7995 
  frame = frame_base;
  
#line 7996 
  writeq((unsigned long)frame,(void volatile *)(np->regs + 13369352U));
  
#line 7997 
  limit = 64;
  ldv_55339: 
#line 7998 
  ;
  
#line 7999 
  __const_udelay(21475UL);
  
#line 8000 
  frame = (u64)readq((void const volatile *)(np->regs + 13369352U));
  
#line 8001 
  if ((frame & 1073741824ULL) != 0ULL) 
#line 8002 
                                       goto ldv_55338; else ;
  
#line 8003 
  tmp_2 = limit;
  
#line 8003 
  limit -= 1;
  
#line 8003 
  ;
  
#line 8003 
  if (tmp_2 != 0) 
#line 8005 
                  goto ldv_55339; else 
#line 8008 
                                       goto ldv_55338;
  ldv_55338: 
#line 8009 
  ;
  
#line 8004 
  if ((frame & 1073741824ULL) == 0ULL) {
    
#line 8005 
    dev_err((struct device const *)np->device,"EEPROM read timeout frame[%llx]\n",frame);
    
#line 8007 
    __retres = -19;
    
#line 8007 
    goto return_label;
  }
  else ;
  
#line 8010 
  frame = (u64)readq((void const volatile *)(np->regs + 13369352U));
  
#line 8011 
  __retres = (int)frame & 255;
  return_label: 
#line 8011 
                return __retres;
}


#line 8014  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_pci_eeprom_read16(struct niu *np, u32 off)
{
  int __retres;
  u16 val;
  
#line 8016 
  int err = niu_pci_eeprom_read(np,off);
  
#line 8019 
  if (err < 0) {
    
#line 8020 
    __retres = err;
    
#line 8020 
    goto return_label;
  }
  else ;
  
#line 8021 
  val = (unsigned short)((int)((unsigned short)err) << 8U);
  
#line 8022 
  err = niu_pci_eeprom_read(np,off + 1U);
  
#line 8023 
  if (err < 0) {
    
#line 8024 
    __retres = err;
    
#line 8024 
    goto return_label;
  }
  else ;
  
#line 8025 
  val = (unsigned short)((err & 255) | (int)val);
  
#line 8027 
  __retres = (int)val;
  return_label: 
#line 8027 
                return __retres;
}


#line 8030  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_pci_eeprom_read16_swp(struct niu *np, u32 off)
{
  int __retres;
  u16 val;
  
#line 8032 
  int err = niu_pci_eeprom_read(np,off);
  
#line 8035 
  if (err < 0) {
    
#line 8036 
    __retres = err;
    
#line 8036 
    goto return_label;
  }
  else ;
  
#line 8038 
  val = (unsigned short)((unsigned int)((unsigned short)err) & 255U);
  
#line 8039 
  err = niu_pci_eeprom_read(np,off + 1U);
  
#line 8040 
  if (err < 0) {
    
#line 8041 
    __retres = err;
    
#line 8041 
    goto return_label;
  }
  else ;
  
#line 8043 
  val = (unsigned short)((err << 8) | (int)val);
  
#line 8045 
  __retres = (int)val;
  return_label: 
#line 8045 
                return __retres;
}


#line 8048  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_pci_vpd_get_propname(struct niu *np, u32 off, char *namebuf, int namebuf_len)
{
  int __retres;
  int i;
  
#line 8053 
  i = 0;
  
#line 8053 
  goto ldv_55362;
  ldv_55361: 
#line 8054 
  ;
  {
    char *tmp_0;
    
#line 8054 
    int err = niu_pci_eeprom_read(np,off + (unsigned int)i);
    
#line 8055 
    if (err < 0) {
      
#line 8056 
      __retres = err;
      
#line 8056 
      goto return_label;
    }
    else ;
    
#line 8057 
    tmp_0 = namebuf;
    
#line 8057 
    namebuf += 1;
    
#line 8057 
    *tmp_0 = (char)err;
    
#line 8058 
    if (err == 0) 
#line 8059 
                  goto ldv_55360; else ;
  }
  
#line 8053 
  i += 1;
  ldv_55362: 
#line 8054 
  ;
  
#line 8053 
  if (i < namebuf_len) 
#line 8055 
                       goto ldv_55361; else 
#line 8058 
                                            goto ldv_55360;
  ldv_55360: 
#line 8059 
  ;
  
#line 8061 
  if (i >= namebuf_len) {
    
#line 8062 
    __retres = -22;
    
#line 8062 
    goto return_label;
  }
  else ;
  
#line 8064 
  __retres = i + 1;
  return_label: 
#line 8064 
                return __retres;
}


#line 8067  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_vpd_parse_version(struct niu *np)
{
  size_t tmp;
  int i;
  int tmp_0;
  
#line 8069 
  struct niu_vpd *vpd = & np->vpd;
  
#line 8070 
  tmp = strlen((char const *)(& vpd->version));
  
#line 8070 
  int len = (int)(tmp + (size_t)1U);
  
#line 8071 
  char const *s = (char const *)(& vpd->version);
  
#line 8074 
  i = 0;
  
#line 8074 
  goto ldv_55372;
  ldv_55371: 
#line 8075 
  ;
  
#line 8075 
  tmp_0 = strncmp(s + i,"FCode ",6UL);
  
#line 8075 
  if (tmp_0 == 0) 
#line 8076 
                  goto ldv_55370; else ;
  
#line 8074 
  i += 1;
  ldv_55372: 
#line 8075 
  ;
  
#line 8074 
  if (len + -5 > i) 
#line 8076 
                    goto ldv_55371; else 
#line 8079 
                                         goto ldv_55370;
  ldv_55370: 
#line 8080 
  ;
  
#line 8078 
  if (len + -5 <= i) 
#line 8079 
                     goto return_label; else ;
  
#line 8081 
  s += (unsigned int)i + 5U;
  
#line 8082 
  sscanf(s,"%d.%d",& vpd->fcode_major,& vpd->fcode_minor);
  
#line 8084 
  if ((np->msg_enable & 2U) != 0U) 
#line 8084 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"VPD_SCAN: FCODE major(%d) minor(%d)\n",vpd->fcode_major,vpd->fcode_minor); else ;
  
#line 8087 
  if (vpd->fcode_major > 3 || (vpd->fcode_major == 3 && vpd->fcode_minor > 3)) 
    
#line 8090 
    np->flags |= 8388608U; else ;
  return_label: 
#line 8091 
                return;
}


#line 8094  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_pci_vpd_scan_props(struct niu *np, u32 start, u32 end)
{
  int __retres;
  
#line 8096 
  unsigned int found_mask = 0U;
  
#line 8105 
  if ((np->msg_enable & 2U) != 0U) 
#line 8105 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"VPD_SCAN: start[%x] end[%x]\n",start,end); else ;
  
#line 8107 
  goto ldv_55391;
  ldv_55390: 
#line 8108 
  ;
  {
    int len;
    int err;
    int prop_len;
    char namebuf[64U];
    u8 *prop_buf;
    int max_len;
    int tmp_4;
    
#line 8113 
    if (found_mask == 63U) {
      
#line 8114 
      niu_vpd_parse_version(np);
      
#line 8115 
      __retres = 1;
      
#line 8115 
      goto return_label;
    }
    else ;
    
#line 8118 
    err = niu_pci_eeprom_read(np,start + 2U);
    
#line 8119 
    if (err < 0) {
      
#line 8120 
      __retres = err;
      
#line 8120 
      goto return_label;
    }
    else ;
    
#line 8121 
    len = err;
    
#line 8122 
    start += 3U;
    
#line 8124 
    prop_len = niu_pci_eeprom_read(np,start + 4U);
    
#line 8125 
    err = niu_pci_vpd_get_propname(np,start + 5U,(char *)(& namebuf),64);
    
#line 8126 
    if (err < 0) {
      
#line 8127 
      __retres = err;
      
#line 8127 
      goto return_label;
    }
    else ;
    
#line 8129 
    prop_buf = (u8 *)0U;
    
#line 8130 
    max_len = 0;
    
#line 8131 
    tmp_4 = strcmp((char const *)(& namebuf),"model");
    
#line 8131 
    if (tmp_4 == 0) {
      
#line 8132 
      prop_buf = (u8 *)(& np->vpd.model);
      
#line 8133 
      max_len = 32;
      
#line 8134 
      found_mask |= 1U;
    }
    else {
      int tmp_3;
      
#line 8135 
      tmp_3 = strcmp((char const *)(& namebuf),"board-model");
      
#line 8135 
      if (tmp_3 == 0) {
        
#line 8136 
        prop_buf = (u8 *)(& np->vpd.board_model);
        
#line 8137 
        max_len = 16;
        
#line 8138 
        found_mask |= 2U;
      }
      else {
        int tmp_2;
        
#line 8139 
        tmp_2 = strcmp((char const *)(& namebuf),"version");
        
#line 8139 
        if (tmp_2 == 0) {
          
#line 8140 
          prop_buf = (u8 *)(& np->vpd.version);
          
#line 8141 
          max_len = 64;
          
#line 8142 
          found_mask |= 4U;
        }
        else {
          int tmp_1;
          
#line 8143 
          tmp_1 = strcmp((char const *)(& namebuf),"local-mac-address");
          
#line 8143 
          if (tmp_1 == 0) {
            
#line 8144 
            prop_buf = (u8 *)(& np->vpd.local_mac);
            
#line 8145 
            max_len = 6;
            
#line 8146 
            found_mask |= 8U;
          }
          else {
            int tmp_0;
            
#line 8147 
            tmp_0 = strcmp((char const *)(& namebuf),"num-mac-addresses");
            
#line 8147 
            if (tmp_0 == 0) {
              
#line 8148 
              prop_buf = & np->vpd.mac_num;
              
#line 8149 
              max_len = 1;
              
#line 8150 
              found_mask |= 16U;
            }
            else {
              int tmp;
              
#line 8151 
              tmp = strcmp((char const *)(& namebuf),"phy-type");
              
#line 8151 
              if (tmp == 0) {
                
#line 8152 
                prop_buf = (u8 *)(& np->vpd.phy_type);
                
#line 8153 
                max_len = 8;
                
#line 8154 
                found_mask |= 32U;
              }
              else ;
            }
          }
        }
      }
    }
    
#line 8157 
    if (max_len != 0 && prop_len > max_len) {
      
#line 8158 
      dev_err((struct device const *)np->device,"Property \'%s\' length (%d) is too long\n",(char *)(& namebuf),prop_len);
      
#line 8159 
      __retres = -22;
      
#line 8159 
      goto return_label;
    }
    else ;
    
#line 8162 
    if (prop_buf != (u8 *)0U) {
      int i;
      u8 *tmp_5;
      int tmp_6;
      
#line 8163 
      u32 off = (start + (unsigned int)err) + 5U;
      
#line 8166 
      if ((np->msg_enable & 2U) != 0U) 
#line 8166 
                                       netdev_printk("\001",(struct net_device const *)np->dev,"VPD_SCAN: Reading in property [%s] len[%d]\n",(char *)(& namebuf),prop_len); else ;
      
#line 8169 
      i = 0;
      
#line 8169 
      goto ldv_55388;
      ldv_55387: 
#line 8170 
      ;
      
#line 8170 
      tmp_5 = prop_buf;
      
#line 8170 
      prop_buf += 1;
      
#line 8170 
      tmp_6 = niu_pci_eeprom_read(np,off + (unsigned int)i);
      
#line 8170 
      *tmp_5 = (unsigned char)tmp_6;
      
#line 8169 
      i += 1;
      ldv_55388: 
#line 8170 
      ;
      
#line 8169 
      if (i < prop_len) 
#line 8171 
                        goto ldv_55387; else 
#line 8174 
                                             goto ldv_55389;
      ldv_55389: 
#line 8175 
      ;
    }
    else ;
    
#line 8173 
    start += (unsigned int)len;
  }
  ldv_55391: 
#line 8175 
  ;
  
#line 8107 
  if (start < end) 
#line 8109 
                   goto ldv_55390; else 
#line 8112 
                                        goto ldv_55392;
  ldv_55392: 
#line 8113 
  ;
  
#line 8176 
  __retres = 0;
  return_label: 
#line 8176 
                return __retres;
}


#line 8180  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_pci_vpd_fetch(struct niu *np, u32 start)
{
  u32 offset;
  int err;
  
#line 8185 
  err = niu_pci_eeprom_read16_swp(np,start + 1U);
  
#line 8186 
  if (err < 0) 
#line 8187 
               goto return_label; else ;
  
#line 8189 
  offset = (unsigned int)(err + 3);
  
#line 8191 
  goto ldv_55402;
  ldv_55401: 
#line 8192 
  ;
  {
    u32 end;
    
#line 8192 
    u32 here = start + offset;
    
#line 8195 
    err = niu_pci_eeprom_read(np,here);
    
#line 8196 
    if (err != 144) 
#line 8197 
                    goto return_label; else ;
    
#line 8199 
    err = niu_pci_eeprom_read16_swp(np,here + 1U);
    
#line 8200 
    if (err < 0) 
#line 8201 
                 goto return_label; else ;
    
#line 8203 
    here = (start + offset) + 3U;
    
#line 8204 
    end = (start + offset) + (unsigned int)err;
    
#line 8206 
    offset += (unsigned int)err;
    
#line 8208 
    err = niu_pci_vpd_scan_props(np,here,end);
    
#line 8209 
    if (err < 0 || err == 1) 
#line 8210 
                             goto return_label; else ;
  }
  ldv_55402: 
#line 8212 
  ;
  
#line 8191 
  if (start + offset <= 1048575U) 
#line 8193 
                                  goto ldv_55401; else 
#line 8196 
                                                       goto ldv_55403;
  ldv_55403: 
#line 8197 
  ;
  return_label: 
#line 8198 
                return;
}


#line 8215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u32 niu_pci_vpd_offset(struct niu *np)
{
  u32 __retres;
  u32 ret;
  int err;
  
#line 8217 
  u32 start = 0U;
  
#line 8217 
  u32 end = 1048576U;
  
#line 8220 
  goto ldv_55411;
  ldv_55412: 
#line 8221 
  ;
  
#line 8221 
  ret = start;
  
#line 8224 
  err = niu_pci_eeprom_read16(np,start);
  
#line 8225 
  if (err != 21930) {
    
#line 8226 
    __retres = 0U;
    
#line 8226 
    goto return_label;
  }
  else ;
  
#line 8229 
  err = niu_pci_eeprom_read16(np,start + 23U);
  
#line 8230 
  if (err < 0) {
    
#line 8231 
    __retres = 0U;
    
#line 8231 
    goto return_label;
  }
  else ;
  
#line 8232 
  start += (unsigned int)err;
  
#line 8235 
  err = niu_pci_eeprom_read16(np,start);
  
#line 8236 
  if (err != 20547) {
    
#line 8237 
    __retres = 0U;
    
#line 8237 
    goto return_label;
  }
  else ;
  
#line 8238 
  err = niu_pci_eeprom_read16(np,start + 2U);
  
#line 8239 
  if (err != 18770) {
    
#line 8240 
    __retres = 0U;
    
#line 8240 
    goto return_label;
  }
  else ;
  
#line 8243 
  err = niu_pci_eeprom_read(np,start + 20U);
  
#line 8244 
  if (err < 0) {
    
#line 8245 
    __retres = 0U;
    
#line 8245 
    goto return_label;
  }
  else ;
  
#line 8246 
  if (err != 1) {
    
#line 8247 
    err = niu_pci_eeprom_read(np,ret + 2U);
    
#line 8248 
    if (err < 0) {
      
#line 8249 
      __retres = 0U;
      
#line 8249 
      goto return_label;
    }
    else ;
    
#line 8251 
    start = (unsigned int)(err * 512) + ret;
    
#line 8252 
    goto ldv_55411;
  }
  else ;
  
#line 8255 
  err = niu_pci_eeprom_read16_swp(np,start + 8U);
  
#line 8256 
  if (err < 0) {
    
#line 8257 
    __retres = (unsigned int)err;
    
#line 8257 
    goto return_label;
  }
  else ;
  
#line 8258 
  ret += (unsigned int)err;
  
#line 8260 
  err = niu_pci_eeprom_read(np,ret);
  
#line 8261 
  if (err != 130) {
    
#line 8262 
    __retres = 0U;
    
#line 8262 
    goto return_label;
  }
  else ;
  
#line 8264 
  __retres = ret;
  
#line 8264 
  goto return_label;
  ldv_55411: 
#line 8265 
  ;
  
#line 8220 
  if (start < end) 
#line 8222 
                   goto ldv_55412; else 
#line 8225 
                                        goto ldv_55413;
  ldv_55413: 
#line 8226 
  ;
  
#line 8267 
  __retres = 0U;
  return_label: 
#line 8267 
                return __retres;
}


#line 8270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_phy_type_prop_decode(struct niu *np, char const *phy_prop)
{
  int __retres;
  int tmp_4;
  
#line 8272 
  tmp_4 = strcmp(phy_prop,"mif");
  
#line 8272 
  if (tmp_4 == 0) {
    
#line 8274 
    np->flags &= 4294574079U;
    
#line 8276 
    np->mac_xcvr = (unsigned char)1U;
  }
  else {
    int tmp_3;
    
#line 8277 
    tmp_3 = strcmp(phy_prop,"xgf");
    
#line 8277 
    if (tmp_3 == 0) {
      
#line 8279 
      np->flags |= 393216U;
      
#line 8281 
      np->mac_xcvr = (unsigned char)3U;
    }
    else {
      int tmp_2;
      
#line 8282 
      tmp_2 = strcmp(phy_prop,"pcs");
      
#line 8282 
      if (tmp_2 == 0) {
        
#line 8284 
        np->flags &= 4294705151U;
        
#line 8285 
        np->flags |= 131072U;
        
#line 8286 
        np->mac_xcvr = (unsigned char)2U;
      }
      else {
        int tmp_1;
        
#line 8287 
        tmp_1 = strcmp(phy_prop,"xgc");
        
#line 8287 
        if (tmp_1 == 0) {
          
#line 8289 
          np->flags |= 262144U;
          
#line 8290 
          np->flags &= 4294836223U;
          
#line 8291 
          np->mac_xcvr = (unsigned char)3U;
        }
        else {
          int tmp;
          
#line 8292 
          tmp = strcmp(phy_prop,"xgsd");
          
#line 8292 
          if (tmp == 0) 
#line 8292 
                        goto _LOR;
          else {
            int tmp_0;
            
#line 8292 
            tmp_0 = strcmp(phy_prop,"gsd");
            
#line 8292 
            if (tmp_0 == 0) {
              _LOR: {
                      
#line 8294 
                      np->flags |= 262144U;
                      
#line 8295 
                      np->flags &= 4294836223U;
                      
#line 8296 
                      np->flags |= 524288U;
                      
#line 8297 
                      np->mac_xcvr = (unsigned char)3U;
                    }
            }
            else {
              
#line 8299 
              __retres = -22;
              
#line 8299 
              goto return_label;
            }
          }
        }
      }
    }
  }
  
#line 8301 
  __retres = 0;
  return_label: 
#line 8301 
                return __retres;
}


#line 8304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_pci_vpd_get_nports(struct niu *np)
{
  int tmp_3;
  
#line 8306 
  int ports = 0;
  
#line 8308 
  tmp_3 = strcmp((char const *)(& np->vpd.model),"SUNW,pcie-qgc");
  
#line 8308 
  if (tmp_3 == 0) 
#line 8308 
                  goto _LOR;
  else {
    int tmp_4;
    
#line 8308 
    tmp_4 = strcmp((char const *)(& np->vpd.model),"SUNW,pcie-qgc-pem");
    
#line 8308 
    if (tmp_4 == 0) 
#line 8308 
                    goto _LOR;
    else {
      int tmp_5;
      
#line 8309 
      tmp_5 = strcmp((char const *)(& np->vpd.model),"SUNW,pcie-neptune");
      
#line 8309 
      if (tmp_5 == 0) 
#line 8308 
                      goto _LOR;
      else {
        int tmp_6;
        
#line 8310 
        tmp_6 = strcmp((char const *)(& np->vpd.model),"SUNW,CP3260");
        
#line 8310 
        if (tmp_6 == 0) 
#line 8308 
                        goto _LOR;
        else {
          int tmp_7;
          
#line 8311 
          tmp_7 = strcmp((char const *)(& np->vpd.model),"SUNW,CP3220");
          
#line 8311 
          if (tmp_7 == 0) _LOR: 
#line 8313 
                                ports = 4;
          else {
            int tmp;
            
#line 8314 
            tmp = strcmp((char const *)(& np->vpd.model),"SUNW,pcie-2xgf");
            
#line 8314 
            if (tmp == 0) 
#line 8318 
                          ports = 2;
            else {
              int tmp_0;
              
#line 8314 
              tmp_0 = strcmp((char const *)(& np->vpd.model),"SUNW,pcie-2xgf-pem");
              
#line 8314 
              if (tmp_0 == 0) 
#line 8318 
                              ports = 2;
              else {
                int tmp_1;
                
#line 8315 
                tmp_1 = strcmp((char const *)(& np->vpd.model),"SUNW,pcie-rfem");
                
#line 8315 
                if (tmp_1 == 0) 
#line 8318 
                                ports = 2;
                else {
                  int tmp_2;
                  
#line 8316 
                  tmp_2 = strcmp((char const *)(& np->vpd.model),"SysKonnect,pcie-2xgf");
                  
#line 8316 
                  if (tmp_2 == 0) 
#line 8318 
                                  ports = 2; else ;
                }
              }
            }
          }
        }
      }
    }
  }
  
#line 8321 
  return ports;
}


#line 8324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_pci_vpd_validate(struct niu *np)
{
  u8 val8;
  int tmp_0;
  bool tmp;
  int tmp_3;
  
#line 8326 
  struct net_device *dev = np->dev;
  
#line 8327 
  struct niu_vpd *vpd = & np->vpd;
  
#line 8330 
  tmp = is_valid_ether_addr((u8 const *)(& vpd->local_mac[0]));
  
#line 8330 
  if (tmp) 
#line 8330 
           tmp_0 = 0; else 
#line 8330 
                           tmp_0 = 1;
  
#line 8330 
  if (tmp_0) {
    
#line 8331 
    dev_err((struct device const *)np->device,"VPD MAC invalid, falling back to SPROM\n");
    
#line 8333 
    np->flags &= 4286578687U;
    
#line 8334 
    goto return_label;
  }
  else ;
  
#line 8337 
  tmp_3 = strcmp((char const *)(& np->vpd.model),"SUNW,CP3220");
  
#line 8337 
  if (tmp_3 == 0) 
#line 8337 
                  goto _LOR;
  else {
    int tmp_4;
    
#line 8337 
    tmp_4 = strcmp((char const *)(& np->vpd.model),"SUNW,CP3260");
    
#line 8337 
    if (tmp_4 == 0) {
      _LOR: {
              
#line 8339 
              np->flags |= 262144U;
              
#line 8340 
              np->flags &= 4294836223U;
              
#line 8341 
              np->flags |= 524288U;
              
#line 8342 
              np->mac_xcvr = (unsigned char)2U;
              
#line 8343 
              if ((unsigned int)np->port > 1U) {
                
#line 8344 
                np->flags |= 131072U;
                
#line 8345 
                np->flags &= 4294705151U;
              }
              else ;
              
#line 8347 
              if ((np->flags & 262144U) != 0U) 
#line 8348 
                                               np->mac_xcvr = (unsigned char)3U; else ;
            }
    }
    else {
      int tmp_2;
      
#line 8349 
      tmp_2 = strcmp((char const *)(& np->vpd.model),"SUNW,pcie-rfem");
      
#line 8349 
      if (tmp_2 == 0) 
#line 8350 
                      np->flags |= 17170432U;
      else {
        int tmp_1;
        
#line 8352 
        tmp_1 = niu_phy_type_prop_decode(np,(char const *)(& np->vpd.phy_type));
        
#line 8352 
        if (tmp_1 != 0) {
          
#line 8353 
          dev_err((struct device const *)np->device,"Illegal phy string [%s]\n",(char *)(& np->vpd.phy_type));
          
#line 8355 
          dev_err((struct device const *)np->device,"Falling back to SPROM\n");
          
#line 8356 
          np->flags &= 4286578687U;
          
#line 8357 
          goto return_label;
        }
        else ;
      }
    }
  }
  
#line 8360 
  memcpy((void *)dev->dev_addr,(void const *)(& vpd->local_mac),6UL);
  
#line 8362 
  val8 = *(dev->dev_addr + 5U);
  
#line 8363 
  *(dev->dev_addr + 5U) = (unsigned char)((int)*(dev->dev_addr + 5U) + (int)np->port);
  
#line 8364 
  if ((int)*(dev->dev_addr + 5U) < (int)val8) 
#line 8365 
                                              *(dev->dev_addr + 4U) = (unsigned char)((int)*(dev->dev_addr + 4U) + 1); else ;
  return_label: 
#line 8366 
                return;
}


#line 8368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_pci_probe_sprom(struct niu *np)
{
  int __retres;
  int len;
  int i;
  u64 val;
  u64 sum;
  u8 val8;
  unsigned long tmp;
  int tmp_5;
  bool tmp_4;
  unsigned long tmp_12;
  
#line 8370 
  struct net_device *dev = np->dev;
  
#line 8375 
  tmp = readq((void const volatile *)(np->regs + 13369544U));
  
#line 8375 
  val = (unsigned long long)tmp & 4294901760ULL;
  
#line 8376 
  val >>= 16;
  
#line 8377 
  len = (int)(val / 4ULL);
  
#line 8379 
  np->eeprom_len = (unsigned int)len;
  
#line 8381 
  if ((np->msg_enable & 2U) != 0U) 
#line 8381 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"SPROM: Image size %llu\n",val); else ;
  
#line 8384 
  sum = 0ULL;
  
#line 8385 
  i = 0;
  
#line 8385 
  goto ldv_55438;
  ldv_55437: 
#line 8386 
  ;
  
#line 8386 
  val = (u64)readq((void const volatile *)(np->regs + ((unsigned long)i + 1671172UL) * 8UL));
  
#line 8387 
  sum = (val & 255ULL) + sum;
  
#line 8388 
  sum = ((val >> 8) & 255ULL) + sum;
  
#line 8389 
  sum = ((val >> 16) & 255ULL) + sum;
  
#line 8390 
  sum = ((val >> 24) & 255ULL) + sum;
  
#line 8385 
  i += 1;
  ldv_55438: 
#line 8386 
  ;
  
#line 8385 
  if (i < len) 
#line 8387 
               goto ldv_55437; else 
#line 8390 
                                    goto ldv_55439;
  ldv_55439: 
#line 8391 
  ;
  
#line 8392 
  if ((np->msg_enable & 2U) != 0U) 
#line 8392 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"SPROM: Checksum %x\n",(int)sum & 255); else ;
  
#line 8394 
  if ((sum & 255ULL) != 171ULL) {
    
#line 8395 
    dev_err((struct device const *)np->device,"Bad SPROM checksum (%x, should be 0xab)\n",(int)sum & 255);
    
#line 8396 
    __retres = -22;
    
#line 8396 
    goto return_label;
  }
  else ;
  
#line 8399 
  val = (u64)readq((void const volatile *)(np->regs + 13369520U));
  
#line 8400 
  switch ((int)np->port) {
    case 0: 
#line 8401 
    ;
    
#line 8402 
    val8 = (unsigned char)(val >> 24);
    
#line 8404 
    goto ldv_55441;
    case 1: 
#line 8405 
    ;
    
#line 8406 
    val8 = (unsigned char)(val >> 16);
    
#line 8408 
    goto ldv_55441;
    case 2: 
#line 8409 
    ;
    
#line 8410 
    val8 = (unsigned char)(val >> 8);
    
#line 8412 
    goto ldv_55441;
    case 3: 
#line 8413 
    ;
    
#line 8414 
    val8 = (unsigned char)val;
    
#line 8416 
    goto ldv_55441;
    default: 
#line 8417 
    ;
    
#line 8418 
    dev_err((struct device const *)np->device,"Bogus port number %u\n",(int)np->port);
    
#line 8420 
    __retres = -22;
    
#line 8420 
    goto return_label;
  }
  ldv_55441: 
#line 8422 
  ;
  
#line 8422 
  if ((np->msg_enable & 2U) != 0U) 
#line 8422 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"SPROM: PHY type %x\n",(int)val8); else ;
  
#line 8425 
  switch ((int)val8) {
    case 3: 
#line 8426 
    ;
    
#line 8428 
    np->flags &= 4294574079U;
    
#line 8430 
    np->mac_xcvr = (unsigned char)1U;
    
#line 8431 
    goto ldv_55447;
    case 2: 
#line 8433 
    ;
    
#line 8435 
    np->flags &= 4294705151U;
    
#line 8436 
    np->flags |= 131072U;
    
#line 8437 
    np->mac_xcvr = (unsigned char)2U;
    
#line 8438 
    goto ldv_55447;
    case 1: 
#line 8440 
    ;
    
#line 8442 
    np->flags |= 262144U;
    
#line 8443 
    np->flags &= 4294836223U;
    
#line 8444 
    np->mac_xcvr = (unsigned char)3U;
    
#line 8445 
    goto ldv_55447;
    case 0: 
#line 8447 
    ;
    
#line 8449 
    np->flags |= 393216U;
    
#line 8451 
    np->mac_xcvr = (unsigned char)3U;
    
#line 8452 
    goto ldv_55447;
    default: 
#line 8454 
    ;
    
#line 8455 
    dev_err((struct device const *)np->device,"Bogus SPROM phy type %u\n",(int)val8);
    
#line 8456 
    __retres = -22;
    
#line 8456 
    goto return_label;
  }
  ldv_55447: 
#line 8459 
  ;
  
#line 8459 
  val = (u64)readq((void const volatile *)(np->regs + 13369376U));
  
#line 8460 
  if ((np->msg_enable & 2U) != 0U) 
#line 8460 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"SPROM: MAC_ADDR0[%08llx]\n",val); else ;
  
#line 8462 
  *(dev->dev_addr) = (unsigned char)val;
  
#line 8463 
  *(dev->dev_addr + 1U) = (unsigned char)(val >> 8);
  
#line 8464 
  *(dev->dev_addr + 2U) = (unsigned char)(val >> 16);
  
#line 8465 
  *(dev->dev_addr + 3U) = (unsigned char)(val >> 24);
  
#line 8467 
  val = (u64)readq((void const volatile *)(np->regs + 13369384U));
  
#line 8468 
  if ((np->msg_enable & 2U) != 0U) 
#line 8468 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"SPROM: MAC_ADDR1[%08llx]\n",val); else ;
  
#line 8470 
  *(dev->dev_addr + 4U) = (unsigned char)val;
  
#line 8471 
  *(dev->dev_addr + 5U) = (unsigned char)(val >> 8);
  
#line 8473 
  tmp_4 = is_valid_ether_addr((u8 const *)dev->dev_addr);
  
#line 8473 
  if (tmp_4) 
#line 8473 
             tmp_5 = 0; else 
#line 8473 
                             tmp_5 = 1;
  
#line 8473 
  if (tmp_5) {
    
#line 8474 
    dev_err((struct device const *)np->device,"SPROM MAC address invalid [ %pM ]\n",dev->dev_addr);
    
#line 8476 
    __retres = -22;
    
#line 8476 
    goto return_label;
  }
  else ;
  
#line 8479 
  val8 = *(dev->dev_addr + 5U);
  
#line 8480 
  *(dev->dev_addr + 5U) = (unsigned char)((int)*(dev->dev_addr + 5U) + (int)np->port);
  
#line 8481 
  if ((int)*(dev->dev_addr + 5U) < (int)val8) 
#line 8482 
                                              *(dev->dev_addr + 4U) = (unsigned char)((int)*(dev->dev_addr + 4U) + 1); else ;
  
#line 8484 
  val = (u64)readq((void const volatile *)(np->regs + 13369408U));
  
#line 8485 
  if ((np->msg_enable & 2U) != 0U) 
#line 8485 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"SPROM: MOD_STR_LEN[%llu]\n",val); else ;
  
#line 8487 
  if (val > 31ULL) {
    
#line 8488 
    __retres = -22;
    
#line 8488 
    goto return_label;
  }
  else ;
  
#line 8490 
  i = 0;
  
#line 8490 
  goto ldv_55454;
  ldv_55453: 
#line 8491 
  ;
  {
    
#line 8491 
    u64 tmp_7 = readq((void const volatile *)(np->regs + ((unsigned long)(i / 4 + 5) + 1671172UL) * 8UL));
    
#line 8493 
    np->vpd.model[i + 3] = (char)tmp_7;
    
#line 8494 
    np->vpd.model[i + 2] = (char)(tmp_7 >> 8);
    
#line 8495 
    np->vpd.model[i + 1] = (char)(tmp_7 >> 16);
    
#line 8496 
    np->vpd.model[i] = (char)(tmp_7 >> 24);
  }
  
#line 8490 
  i += 4;
  ldv_55454: 
#line 8491 
  ;
  
#line 8490 
  if ((unsigned long long)i < val) 
#line 8492 
                                   goto ldv_55453; else 
#line 8495 
                                                        goto ldv_55455;
  ldv_55455: 
#line 8496 
  ;
  
#line 8498 
  np->vpd.model[val] = (char)0;
  
#line 8500 
  val = (u64)readq((void const volatile *)(np->regs + 13369480U));
  
#line 8501 
  if ((np->msg_enable & 2U) != 0U) 
#line 8501 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"SPROM: BD_MOD_STR_LEN[%llu]\n",val); else ;
  
#line 8503 
  if (val > 15ULL) {
    
#line 8504 
    __retres = -22;
    
#line 8504 
    goto return_label;
  }
  else ;
  
#line 8506 
  i = 0;
  
#line 8506 
  goto ldv_55458;
  ldv_55457: 
#line 8507 
  ;
  {
    
#line 8507 
    u64 tmp_10 = readq((void const volatile *)(np->regs + ((unsigned long)(i / 4 + 14) + 1671172UL) * 8UL));
    
#line 8509 
    np->vpd.board_model[i + 3] = (char)tmp_10;
    
#line 8510 
    np->vpd.board_model[i + 2] = (char)(tmp_10 >> 8);
    
#line 8511 
    np->vpd.board_model[i + 1] = (char)(tmp_10 >> 16);
    
#line 8512 
    np->vpd.board_model[i] = (char)(tmp_10 >> 24);
  }
  
#line 8506 
  i += 4;
  ldv_55458: 
#line 8507 
  ;
  
#line 8506 
  if ((unsigned long long)i < val) 
#line 8508 
                                   goto ldv_55457; else 
#line 8511 
                                                        goto ldv_55459;
  ldv_55459: 
#line 8512 
  ;
  
#line 8514 
  np->vpd.board_model[val] = (char)0;
  
#line 8516 
  tmp_12 = readq((void const volatile *)(np->regs + 13369392U));
  
#line 8516 
  np->vpd.mac_num = (unsigned char)tmp_12;
  
#line 8518 
  if ((np->msg_enable & 2U) != 0U) 
#line 8518 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"SPROM: NUM_PORTS_MACS[%d]\n",(int)np->vpd.mac_num); else ;
  
#line 8521 
  __retres = 0;
  return_label: 
#line 8521 
                return __retres;
}


#line 8524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_and_validate_port(struct niu *np)
{
  int __retres;
  
#line 8526 
  struct niu_parent *parent = np->parent;
  
#line 8528 
  if ((unsigned int)np->port <= 1U) 
#line 8529 
                                    np->flags |= 65536U; else ;
  
#line 8531 
  if ((unsigned int)parent->num_ports == 0U) 
    
#line 8532 
    if ((unsigned int)parent->plat_type == 2U) 
#line 8533 
                                               parent->num_ports = (unsigned char)2U;
    else {
      int tmp;
      
#line 8535 
      tmp = niu_pci_vpd_get_nports(np);
      
#line 8535 
      parent->num_ports = (unsigned char)tmp;
      
#line 8536 
      if ((unsigned int)parent->num_ports == 0U) {
        unsigned long tmp_0;
        
#line 8540 
        tmp_0 = readq((void const volatile *)(np->regs + 13369392U));
        
#line 8540 
        parent->num_ports = (unsigned char)tmp_0;
        
#line 8546 
        if ((unsigned int)parent->num_ports == 0U) 
#line 8547 
                                                   parent->num_ports = (unsigned char)4U; else ;
      }
      else ;
    }
  else ;
  
#line 8552 
  if ((int)np->port >= (int)parent->num_ports) {
    
#line 8553 
    __retres = -19;
    
#line 8553 
    goto return_label;
  }
  else ;
  
#line 8555 
  __retres = 0;
  return_label: 
#line 8555 
                return __retres;
}


#line 8558  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int phy_record(struct niu_parent *parent, struct phy_probe_info *p, int dev_id_1, int dev_id_2, u8 phy_port, int type)
{
  int __retres;
  u8 idx;
  char *tmp_0;
  
#line 8561 
  u32 id = (unsigned int)((dev_id_1 << 16) | dev_id_2);
  
#line 8564 
  if (dev_id_1 < 0 || dev_id_2 < 0) {
    
#line 8565 
    __retres = 0;
    
#line 8565 
    goto return_label;
  }
  else ;
  
#line 8566 
  if ((unsigned int)type <= 1U) {
    
#line 8570 
    if ((id & 4294963440U) != 2121776U && (id & 4294963440U) != 21037088U) {
      
#line 8572 
      __retres = 0;
      
#line 8572 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 8574 
    if ((id & 4294963440U) != 2121904U) {
      
#line 8575 
      __retres = 0;
      
#line 8575 
      goto return_label;
    }
    else ;
  
#line 8578 
  ;
  
#line 8578 
  if (type != 0) {
    char *tmp;
    
#line 8578 
    if (type == 1) 
#line 8578 
                   tmp = (char *)"PCS"; else 
#line 8578 
                                             tmp = (char *)"MII";
    
#line 8578 
    tmp_0 = tmp;
  }
  else 
#line 8578 
       tmp_0 = (char *)"PMA/PMD";
  
#line 8578 
  ;
  
#line 8578 
  ;
  
#line 8578 
  printk("\001",parent->index,id,tmp_0,(int)phy_port);
  
#line 8584 
  if ((unsigned int)p->cur[type] > 3U) {
    
#line 8585 
    printk("\001");
    
#line 8586 
    __retres = -22;
    
#line 8586 
    goto return_label;
  }
  else ;
  
#line 8588 
  idx = p->cur[type];
  
#line 8589 
  p->phy_id[type][(int)idx] = id;
  
#line 8590 
  p->phy_port[type][(int)idx] = phy_port;
  
#line 8591 
  p->cur[type] = (unsigned char)((unsigned int)idx + 1U);
  
#line 8592 
  __retres = 0;
  return_label: 
#line 8592 
                return __retres;
}


#line 8595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int port_has_10g(struct phy_probe_info *p, int port)
{
  int __retres;
  int i;
  
#line 8599 
  i = 0;
  
#line 8599 
  goto ldv_55480;
  ldv_55479: 
#line 8600 
  ;
  
#line 8600 
  if ((int)p->phy_port[0][i] == port) {
    
#line 8601 
    __retres = 1;
    
#line 8601 
    goto return_label;
  }
  else ;
  
#line 8599 
  i += 1;
  ldv_55480: 
#line 8600 
  ;
  
#line 8599 
  if ((int)p->cur[0] > i) 
#line 8601 
                          goto ldv_55479; else 
#line 8604 
                                               goto ldv_55481;
  ldv_55481: 
#line 8605 
  ;
  
#line 8603 
  i = 0;
  
#line 8603 
  goto ldv_55483;
  ldv_55482: 
#line 8604 
  ;
  
#line 8604 
  if ((int)p->phy_port[1][i] == port) {
    
#line 8605 
    __retres = 1;
    
#line 8605 
    goto return_label;
  }
  else ;
  
#line 8603 
  i += 1;
  ldv_55483: 
#line 8604 
  ;
  
#line 8603 
  if ((int)p->cur[1] > i) 
#line 8605 
                          goto ldv_55482; else 
#line 8608 
                                               goto ldv_55484;
  ldv_55484: 
#line 8609 
  ;
  
#line 8608 
  __retres = 0;
  return_label: 
#line 8608 
                return __retres;
}


#line 8611  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int count_10g_ports(struct phy_probe_info *p, int *lowest)
{
  int port;
  int cnt;
  int tmp;
  
#line 8615 
  cnt = 0;
  
#line 8616 
  *lowest = 32;
  
#line 8617 
  port = 8;
  
#line 8617 
  goto ldv_55492;
  ldv_55491: 
#line 8618 
  ;
  
#line 8618 
  tmp = port_has_10g(p,port);
  
#line 8618 
  if (tmp != 0) {
    
#line 8619 
    if (cnt == 0) 
#line 8620 
                  *lowest = port; else ;
    
#line 8621 
    cnt += 1;
  }
  else ;
  
#line 8617 
  port += 1;
  ldv_55492: 
#line 8618 
  ;
  
#line 8617 
  if (port <= 31) 
#line 8619 
                  goto ldv_55491; else 
#line 8622 
                                       goto ldv_55493;
  ldv_55493: 
#line 8623 
  ;
  
#line 8625 
  return cnt;
}


#line 8628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int count_1g_ports(struct phy_probe_info *p, int *lowest)
{
  int __retres;
  
#line 8630 
  *lowest = 32;
  
#line 8631 
  if ((unsigned int)p->cur[2] != 0U) 
#line 8632 
                                     *lowest = (int)p->phy_port[2][0]; else ;
  
#line 8634 
  __retres = (int)p->cur[2];
  
#line 8634 
  return __retres;
}


#line 8637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_n2_divide_channels(struct niu_parent *parent)
{
  int i;
  
#line 8639 
  int num_ports = (int)parent->num_ports;
  
#line 8642 
  i = 0;
  
#line 8642 
  goto ldv_55504;
  ldv_55503: 
#line 8643 
  ;
  
#line 8643 
  parent->rxchan_per_port[i] = (unsigned char)(16 / num_ports);
  
#line 8644 
  parent->txchan_per_port[i] = (unsigned char)(16 / num_ports);
  
#line 8646 
  printk("\001",parent->index,i,(int)parent->rxchan_per_port[i],(int)parent->txchan_per_port[i]);
  
#line 8642 
  i += 1;
  ldv_55504: 
#line 8643 
  ;
  
#line 8642 
  if (i < num_ports) 
#line 8644 
                     goto ldv_55503; else 
#line 8647 
                                          goto ldv_55505;
  ldv_55505: 
#line 8648 
  ;
  
#line 8649 
  return;
}


#line 8653  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_divide_channels(struct niu_parent *parent, int num_10g, int num_1g)
{
  int rx_chans_per_10g;
  int rx_chans_per_1g;
  int tx_chans_per_10g;
  int tx_chans_per_1g;
  int i;
  int tot_rx;
  int tot_tx;
  
#line 8656 
  int num_ports = (int)parent->num_ports;
  
#line 8661 
  if (num_10g == 0 || num_1g == 0) {
    
#line 8662 
    rx_chans_per_1g = 16 / num_ports;
    
#line 8662 
    rx_chans_per_10g = rx_chans_per_1g;
    
#line 8664 
    tx_chans_per_1g = 24 / num_ports;
    
#line 8664 
    tx_chans_per_10g = tx_chans_per_1g;
  }
  else {
    
#line 8667 
    rx_chans_per_1g = 2;
    
#line 8668 
    rx_chans_per_10g = (16 - rx_chans_per_1g * num_1g) / num_10g;
    
#line 8672 
    tx_chans_per_1g = 4;
    
#line 8673 
    tx_chans_per_10g = (24 - tx_chans_per_1g * num_1g) / num_10g;
  }
  
#line 8678 
  tot_tx = 0;
  
#line 8678 
  tot_rx = tot_tx;
  
#line 8679 
  i = 0;
  
#line 8679 
  goto ldv_55521;
  ldv_55520: 
#line 8680 
  ;
  {
    u32 tmp;
    
#line 8680 
    tmp = phy_decode(parent->port_phy,i);
    
#line 8680 
    int type = (int)tmp;
    
#line 8682 
    if (type == 1) {
      
#line 8683 
      parent->rxchan_per_port[i] = (unsigned char)rx_chans_per_10g;
      
#line 8684 
      parent->txchan_per_port[i] = (unsigned char)tx_chans_per_10g;
    }
    else {
      
#line 8686 
      parent->rxchan_per_port[i] = (unsigned char)rx_chans_per_1g;
      
#line 8687 
      parent->txchan_per_port[i] = (unsigned char)tx_chans_per_1g;
    }
    
#line 8689 
    printk("\001",parent->index,i,(int)parent->rxchan_per_port[i],(int)parent->txchan_per_port[i]);
    
#line 8693 
    tot_rx = (int)parent->rxchan_per_port[i] + tot_rx;
    
#line 8694 
    tot_tx = (int)parent->txchan_per_port[i] + tot_tx;
  }
  
#line 8679 
  i += 1;
  ldv_55521: 
#line 8680 
  ;
  
#line 8679 
  if (i < num_ports) 
#line 8681 
                     goto ldv_55520; else 
#line 8684 
                                          goto ldv_55522;
  ldv_55522: 
#line 8685 
  ;
  
#line 8697 
  if (tot_rx > 16) {
    
#line 8698 
    printk("\001",parent->index,tot_rx);
    
#line 8700 
    i = 0;
    
#line 8700 
    goto ldv_55524;
    ldv_55523: 
#line 8701 
    ;
    
#line 8701 
    parent->rxchan_per_port[i] = (unsigned char)1U;
    
#line 8700 
    i += 1;
    ldv_55524: 
#line 8701 
    ;
    
#line 8700 
    if (i < num_ports) 
#line 8702 
                       goto ldv_55523; else 
#line 8705 
                                            goto ldv_55525;
    ldv_55525: 
#line 8706 
    ;
  }
  else ;
  
#line 8703 
  if (tot_tx > 24) {
    
#line 8704 
    printk("\001",parent->index,tot_tx);
    
#line 8706 
    i = 0;
    
#line 8706 
    goto ldv_55527;
    ldv_55526: 
#line 8707 
    ;
    
#line 8707 
    parent->txchan_per_port[i] = (unsigned char)1U;
    
#line 8706 
    i += 1;
    ldv_55527: 
#line 8707 
    ;
    
#line 8706 
    if (i < num_ports) 
#line 8708 
                       goto ldv_55526; else 
#line 8711 
                                            goto ldv_55528;
    ldv_55528: 
#line 8712 
    ;
  }
  else ;
  
#line 8709 
  if (tot_rx <= 15 || tot_tx <= 23) 
#line 8710 
                                    printk("\001",parent->index,tot_rx,tot_tx); else ;
  
#line 8711 
  return;
}


#line 8715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_divide_rdc_groups(struct niu_parent *parent, int num_10g, int num_1g)
{
  int i;
  int rdc_group;
  int rdc_groups_per_port;
  int rdc_channel_base;
  
#line 8718 
  int num_ports = (int)parent->num_ports;
  
#line 8722 
  rdc_group = 0;
  
#line 8723 
  rdc_groups_per_port = 8 / num_ports;
  
#line 8725 
  rdc_channel_base = 0;
  
#line 8727 
  i = 0;
  
#line 8727 
  goto ldv_55552;
  ldv_55551: 
#line 8728 
  ;
  {
    int grp;
    int this_channel_offset;
    
#line 8728 
    struct niu_rdc_tables *tp = & parent->rdc_group_cfg[i];
    
#line 8729 
    int num_channels = (int)parent->rxchan_per_port[i];
    
#line 8732 
    tp->first_table_num = rdc_group;
    
#line 8733 
    tp->num_tables = rdc_groups_per_port;
    
#line 8734 
    this_channel_offset = 0;
    
#line 8735 
    grp = 0;
    
#line 8735 
    goto ldv_55549;
    ldv_55548: 
#line 8736 
    ;
    {
      int slot;
      
#line 8736 
      struct rdc_table *rt = & tp->tables[grp];
      
#line 8739 
      printk("\001",parent->index,i,tp->first_table_num + grp);
      
#line 8741 
      slot = 0;
      
#line 8741 
      goto ldv_55546;
      ldv_55545: 
#line 8742 
      ;
      
#line 8742 
      rt->rxdma_channel[slot] = (unsigned char)((int)((unsigned char)rdc_channel_base) + (int)((unsigned char)this_channel_offset));
      
#line 8745 
      printk("",(int)rt->rxdma_channel[slot]);
      
#line 8747 
      this_channel_offset += 1;
      
#line 8747 
      ;
      
#line 8747 
      if (this_channel_offset == num_channels) 
#line 8748 
                                               this_channel_offset = 0; else ;
      
#line 8741 
      slot += 1;
      ldv_55546: 
#line 8742 
      ;
      
#line 8741 
      if (slot <= 15) 
#line 8743 
                      goto ldv_55545; else 
#line 8746 
                                           goto ldv_55547;
      ldv_55547: 
#line 8747 
      ;
      
#line 8750 
      printk("");
    }
    
#line 8735 
    grp += 1;
    ldv_55549: 
#line 8736 
    ;
    
#line 8735 
    if (tp->num_tables > grp) 
#line 8737 
                              goto ldv_55548; else 
#line 8740 
                                                   goto ldv_55550;
    ldv_55550: 
#line 8741 
    ;
    
#line 8753 
    parent->rdc_default[i] = (unsigned char)rdc_channel_base;
    
#line 8755 
    rdc_channel_base += num_channels;
    
#line 8756 
    rdc_group += rdc_groups_per_port;
  }
  
#line 8727 
  i += 1;
  ldv_55552: 
#line 8728 
  ;
  
#line 8727 
  if (i < num_ports) 
#line 8729 
                     goto ldv_55551; else 
#line 8732 
                                          goto ldv_55553;
  ldv_55553: 
#line 8733 
  ;
  
#line 8734 
  return;
}


#line 8760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int fill_phy_probe_info(struct niu *np, struct niu_parent *parent, struct phy_probe_info *info)
{
  unsigned long flags;
  int port;
  int err;
  
#line 8766 
  memset((void *)info,0,1792UL);
  
#line 8769 
  ldv___ldv_spin_lock_137(& (np->parent)->lock);
  
#line 8770 
  err = 0;
  
#line 8771 
  port = 8;
  
#line 8771 
  goto ldv_55566;
  ldv_55565: 
#line 8772 
  ;
  {
    int dev_id_1;
    int dev_id_2;
    
#line 8774 
    dev_id_1 = mdio_read(np,port,1,2);
    
#line 8776 
    dev_id_2 = mdio_read(np,port,1,3);
    
#line 8778 
    err = phy_record(parent,info,dev_id_1,dev_id_2,(unsigned char)((int)((unsigned char)port)),0);
    
#line 8780 
    if (err != 0) 
#line 8781 
                  goto ldv_55564; else ;
    
#line 8782 
    dev_id_1 = mdio_read(np,port,3,2);
    
#line 8784 
    dev_id_2 = mdio_read(np,port,3,3);
    
#line 8786 
    err = phy_record(parent,info,dev_id_1,dev_id_2,(unsigned char)((int)((unsigned char)port)),1);
    
#line 8788 
    if (err != 0) 
#line 8789 
                  goto ldv_55564; else ;
    
#line 8790 
    dev_id_1 = mii_read(np,port,2);
    
#line 8791 
    dev_id_2 = mii_read(np,port,3);
    
#line 8792 
    err = phy_record(parent,info,dev_id_1,dev_id_2,(unsigned char)((int)((unsigned char)port)),2);
    
#line 8794 
    if (err != 0) 
#line 8795 
                  goto ldv_55564; else ;
  }
  
#line 8771 
  port += 1;
  ldv_55566: 
#line 8772 
  ;
  
#line 8771 
  if (port <= 31) 
#line 8773 
                  goto ldv_55565; else 
#line 8776 
                                       goto ldv_55564;
  ldv_55564: 
#line 8777 
  ;
  
#line 8797 
  ldv_spin_unlock_irqrestore_138(& (np->parent)->lock,flags);
  
#line 8799 
  return err;
}


#line 8802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int walk_phys(struct niu *np, struct niu_parent *parent)
{
  int __retres;
  int lowest_10g;
  int lowest_1g;
  int num_10g;
  int num_1g;
  u32 val;
  int err;
  int tmp_28;
  
#line 8804 
  struct phy_probe_info *info = & parent->phy_probe_info;
  
#line 8810 
  num_1g = 0;
  
#line 8810 
  num_10g = num_1g;
  
#line 8812 
  tmp_28 = strcmp((char const *)(& np->vpd.model),"SUNW,CP3220");
  
#line 8812 
  if (tmp_28 == 0) 
#line 8812 
                   goto _LOR;
  else {
    int tmp_29;
    
#line 8812 
    tmp_29 = strcmp((char const *)(& np->vpd.model),"SUNW,CP3260");
    
#line 8812 
    if (tmp_29 == 0) {
      _LOR: {
              u32 tmp;
              u32 tmp_0;
              u32 tmp_1;
              u32 tmp_2;
              
#line 8814 
              num_10g = 0;
              
#line 8815 
              num_1g = 2;
              
#line 8816 
              parent->plat_type = (unsigned char)8U;
              
#line 8817 
              parent->num_ports = (unsigned char)4U;
              
#line 8818 
              tmp = phy_encode(2U,0);
              
#line 8818 
              tmp_0 = phy_encode(2U,1);
              
#line 8819 
              tmp_1 = phy_encode(2U,2);
              
#line 8820 
              tmp_2 = phy_encode(2U,3);
              
#line 8818 
              val = ((tmp | tmp_0) | tmp_1) | tmp_2;
            }
    }
    else {
      int tmp_27;
      
#line 8822 
      tmp_27 = strcmp((char const *)(& np->vpd.model),"SUNW,pcie-rfem");
      
#line 8822 
      if (tmp_27 == 0) {
        u32 tmp_3;
        u32 tmp_4;
        
#line 8823 
        num_10g = 2;
        
#line 8824 
        num_1g = 0;
        
#line 8825 
        parent->num_ports = (unsigned char)2U;
        
#line 8826 
        tmp_3 = phy_encode(1U,0);
        
#line 8826 
        tmp_4 = phy_encode(1U,1);
        
#line 8826 
        val = tmp_3 | tmp_4;
      }
      else 
        
#line 8828 
        if ((np->flags & 524288U) != 0U && (unsigned int)parent->plat_type == 2U) 
          
#line 8831 
          if ((np->flags & 262144U) != 0U) {
            u32 tmp_5;
            u32 tmp_6;
            
#line 8832 
            tmp_5 = phy_encode(1U,0);
            
#line 8832 
            tmp_6 = phy_encode(1U,1);
            
#line 8832 
            val = tmp_5 | tmp_6;
          }
          else {
            u32 tmp_7;
            u32 tmp_8;
            
#line 8835 
            tmp_7 = phy_encode(2U,0);
            
#line 8835 
            tmp_8 = phy_encode(2U,1);
            
#line 8835 
            val = tmp_7 | tmp_8;
          }
        else {
          
#line 8839 
          err = fill_phy_probe_info(np,parent,info);
          
#line 8840 
          if (err != 0) {
            
#line 8841 
            __retres = err;
            
#line 8841 
            goto return_label;
          }
          else ;
          
#line 8843 
          num_10g = count_10g_ports(info,& lowest_10g);
          
#line 8844 
          num_1g = count_1g_ports(info,& lowest_1g);
          
#line 8846 
          switch ((num_10g << 4) | num_1g) {
            u32 tmp_9;
            u32 tmp_10;
            u32 tmp_11;
            u32 tmp_12;
            u32 tmp_13;
            u32 tmp_14;
            u32 tmp_23;
            u32 tmp_24;
            u32 tmp_25;
            u32 tmp_26;
            case 36: 
#line 8847 
            ;
            
#line 8848 
            if (lowest_1g == 10) 
#line 8849 
                                 parent->plat_type = (unsigned char)3U;
            else 
              
#line 8850 
              if (lowest_1g == 26) 
#line 8851 
                                   parent->plat_type = (unsigned char)4U; else 
                                                                    
#line 8853 
                                                                    goto unknown_vg_1g_port;
            case 34: 
#line 8856 
            ;
            
#line 8857 
            tmp_9 = phy_encode(1U,0);
            
#line 8857 
            tmp_10 = phy_encode(1U,1);
            
#line 8858 
            tmp_11 = phy_encode(2U,2);
            
#line 8859 
            tmp_12 = phy_encode(2U,3);
            
#line 8857 
            val = ((tmp_9 | tmp_10) | tmp_11) | tmp_12;
            
#line 8861 
            goto ldv_55581;
            case 32: 
#line 8863 
            ;
            
#line 8864 
            tmp_13 = phy_encode(1U,0);
            
#line 8864 
            tmp_14 = phy_encode(1U,1);
            
#line 8864 
            val = tmp_13 | tmp_14;
            
#line 8866 
            goto ldv_55581;
            case 16: 
#line 8868 
            ;
            
#line 8869 
            val = phy_encode(1U,(int)np->port);
            
#line 8870 
            goto ldv_55581;
            case 20: 
#line 8872 
            ;
            
#line 8873 
            if (lowest_1g == 10) 
#line 8874 
                                 parent->plat_type = (unsigned char)3U;
            else 
              
#line 8875 
              if (lowest_1g == 26) 
#line 8876 
                                   parent->plat_type = (unsigned char)4U; else 
                                                                    
#line 8878 
                                                                    goto unknown_vg_1g_port;
            case 19: 
#line 8881 
            ;
            
#line 8882 
            if ((lowest_10g & 7) == 0) {
              u32 tmp_15;
              u32 tmp_16;
              u32 tmp_17;
              u32 tmp_18;
              
#line 8883 
              tmp_15 = phy_encode(1U,0);
              
#line 8883 
              tmp_16 = phy_encode(2U,1);
              
#line 8884 
              tmp_17 = phy_encode(2U,2);
              
#line 8885 
              tmp_18 = phy_encode(2U,3);
              
#line 8883 
              val = ((tmp_15 | tmp_16) | tmp_17) | tmp_18;
            }
            else {
              u32 tmp_19;
              u32 tmp_20;
              u32 tmp_21;
              u32 tmp_22;
              
#line 8888 
              tmp_19 = phy_encode(2U,0);
              
#line 8888 
              tmp_20 = phy_encode(1U,1);
              
#line 8889 
              tmp_21 = phy_encode(2U,2);
              
#line 8890 
              tmp_22 = phy_encode(2U,3);
              
#line 8888 
              val = ((tmp_19 | tmp_20) | tmp_21) | tmp_22;
            }
            
#line 8892 
            goto ldv_55581;
            case 4: 
#line 8894 
            ;
            
#line 8895 
            if (lowest_1g == 10) 
#line 8896 
                                 parent->plat_type = (unsigned char)3U;
            else 
              
#line 8897 
              if (lowest_1g == 26) 
#line 8898 
                                   parent->plat_type = (unsigned char)4U; else 
                                                                    
#line 8900 
                                                                    goto unknown_vg_1g_port;
            
#line 8902 
            tmp_23 = phy_encode(2U,0);
            
#line 8902 
            tmp_24 = phy_encode(2U,1);
            
#line 8903 
            tmp_25 = phy_encode(2U,2);
            
#line 8904 
            tmp_26 = phy_encode(2U,3);
            
#line 8902 
            val = ((tmp_23 | tmp_24) | tmp_25) | tmp_26;
            
#line 8906 
            goto ldv_55581;
            default: 
#line 8908 
            ;
            
#line 8909 
            printk("\001",num_10g,num_1g);
            
#line 8911 
            __retres = -22;
            
#line 8911 
            goto return_label;
          }
          ldv_55581: 
#line 8913 
          ;
        }
    }
  }
  
#line 8915 
  parent->port_phy = val;
  
#line 8917 
  if ((unsigned int)parent->plat_type == 2U) 
#line 8918 
                                             niu_n2_divide_channels(parent); else 
                                                                    
#line 8920 
                                                                    niu_divide_channels(parent,num_10g,num_1g);
  
#line 8922 
  niu_divide_rdc_groups(parent,num_10g,num_1g);
  
#line 8924 
  __retres = 0;
  
#line 8924 
  goto return_label;
  unknown_vg_1g_port: 
#line 8926 
  ;
  
#line 8927 
  printk("\001",lowest_1g);
  
#line 8928 
  __retres = -22;
  return_label: 
#line 8928 
                return __retres;
}


#line 8931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_probe_ports(struct niu *np)
{
  int __retres;
  int err;
  int i;
  
#line 8933 
  struct niu_parent *parent = np->parent;
  
#line 8936 
  if (parent->port_phy == 0U) {
    
#line 8937 
    err = walk_phys(np,parent);
    
#line 8938 
    if (err != 0) {
      
#line 8939 
      __retres = err;
      
#line 8939 
      goto return_label;
    }
    else ;
    
#line 8941 
    niu_set_ldg_timer_res(np,2);
    
#line 8942 
    i = 0;
    
#line 8942 
    goto ldv_55595;
    ldv_55594: 
#line 8943 
    ;
    
#line 8943 
    niu_ldn_irq_enable(np,i,0);
    
#line 8942 
    i += 1;
    ldv_55595: 
#line 8943 
    ;
    
#line 8942 
    if (i <= 68) 
#line 8944 
                 goto ldv_55594; else 
#line 8947 
                                      goto ldv_55596;
    ldv_55596: 
#line 8948 
    ;
  }
  else ;
  
#line 8946 
  if (parent->port_phy == 4294967295U) {
    
#line 8947 
    __retres = -22;
    
#line 8947 
    goto return_label;
  }
  else ;
  
#line 8949 
  __retres = 0;
  return_label: 
#line 8949 
                return __retres;
}


#line 8952  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_classifier_swstate_init(struct niu *np)
{
  int tmp;
  
#line 8954 
  struct niu_classifier *cp = & np->clas;
  
#line 8956 
  cp->tcam_top = (unsigned short)np->port;
  
#line 8957 
  cp->tcam_sz = (unsigned short)((int)(np->parent)->tcam_num_entries / (int)(np->parent)->num_ports);
  
#line 8958 
  cp->h1_init = 4294967295U;
  
#line 8959 
  cp->h2_init = (unsigned short)65535U;
  
#line 8961 
  tmp = fflp_early_init(np);
  
#line 8961 
  return tmp;
}


#line 8964  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_link_config_init(struct niu *np)
{
  u16 tmp;
  
#line 8966 
  struct niu_link_config *lp = & np->link_config;
  
#line 8968 
  lp->advertising = 4223U;
  
#line 8976 
  tmp = (unsigned short)65535U;
  
#line 8976 
  lp->active_speed = tmp;
  
#line 8976 
  lp->speed = tmp;
  
#line 8977 
  lp->duplex = (unsigned char)1U;
  
#line 8978 
  lp->active_duplex = (unsigned char)255U;
  
#line 8979 
  lp->autoneg = (unsigned char)1U;
  
#line 8985 
  lp->loopback_mode = (unsigned char)0U;
  
#line 8986 
  return;
}


#line 8989  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init_mac_ipp_pcs_base(struct niu *np)
{
  int __retres;
  
#line 8991 
  switch ((int)np->port) {
    case 0: 
#line 8992 
    ;
    
#line 8993 
    np->mac_regs = np->regs + 1572864U;
    
#line 8994 
    np->ipp_off = 0UL;
    
#line 8995 
    np->pcs_off = 16384UL;
    
#line 8996 
    np->xpcs_off = 8192UL;
    
#line 8997 
    goto ldv_55609;
    case 1: 
#line 8999 
    ;
    
#line 9000 
    np->mac_regs = np->regs + 1597440U;
    
#line 9001 
    np->ipp_off = 32768UL;
    
#line 9002 
    np->pcs_off = 40960UL;
    
#line 9003 
    np->xpcs_off = 32768UL;
    
#line 9004 
    goto ldv_55609;
    case 2: 
#line 9006 
    ;
    
#line 9007 
    np->mac_regs = np->regs + 1622016U;
    
#line 9008 
    np->ipp_off = 16384UL;
    
#line 9009 
    np->pcs_off = 57344UL;
    
#line 9010 
    np->xpcs_off = 18446744073709551615UL;
    
#line 9011 
    goto ldv_55609;
    case 3: 
#line 9013 
    ;
    
#line 9014 
    np->mac_regs = np->regs + 1638400U;
    
#line 9015 
    np->ipp_off = 49152UL;
    
#line 9016 
    np->pcs_off = 73728UL;
    
#line 9017 
    np->xpcs_off = 18446744073709551615UL;
    
#line 9018 
    goto ldv_55609;
    default: 
#line 9020 
    ;
    
#line 9021 
    dev_err((struct device const *)np->device,"Port %u is invalid, cannot compute MAC block offset\n",(int)np->port);
    
#line 9022 
    __retres = -22;
    
#line 9022 
    goto return_label;
  }
  ldv_55609: 
#line 9025 
  ;
  
#line 9025 
  __retres = 0;
  return_label: 
#line 9025 
                return __retres;
}


#line 9028  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_try_msix(struct niu *np, u8 *ldg_num_map)
{
  struct msix_entry msi_vec[64U];
  int i;
  int num_irqs;
  u8 first_ldg;
  int tmp;
  
#line 9031 
  struct niu_parent *parent = np->parent;
  
#line 9032 
  struct pci_dev *pdev = np->pdev;
  
#line 9036 
  first_ldg = (unsigned char)((int)((unsigned char)(64 / (int)parent->num_ports)) * (int)np->port);
  
#line 9037 
  i = 0;
  
#line 9037 
  goto ldv_55625;
  ldv_55624: 
#line 9038 
  ;
  
#line 9038 
  *(ldg_num_map + i) = (unsigned char)((int)((unsigned char)i) + (int)first_ldg);
  
#line 9037 
  i += 1;
  ldv_55625: 
#line 9038 
  ;
  
#line 9037 
  if (64 / (int)parent->num_ports > i) 
#line 9039 
                                       goto ldv_55624; else 
#line 9042 
                                                            goto ldv_55626;
  ldv_55626: 
#line 9043 
  ;
  
#line 9041 
  if ((unsigned int)np->port == 0U) 
#line 9041 
                                    tmp = 3; else 
#line 9041 
                                                  tmp = 1;
  
#line 9040 
  num_irqs = ((int)parent->rxchan_per_port[(int)np->port] + (int)parent->txchan_per_port[(int)np->port]) + tmp;
  
#line 9043 
  if ((long)(64 / (int)parent->num_ports < num_irqs) != 0L) {
    
#line 9045 
    ldv_inline_asm();
    
#line 9043 
    ;
  }
  else ;
  
#line 9045 
  i = 0;
  
#line 9045 
  goto ldv_55628;
  ldv_55627: 
#line 9046 
  ;
  
#line 9046 
  msi_vec[i].vector = 0U;
  
#line 9047 
  msi_vec[i].entry = (unsigned short)i;
  
#line 9045 
  i += 1;
  ldv_55628: 
#line 9046 
  ;
  
#line 9045 
  if (i < num_irqs) 
#line 9047 
                    goto ldv_55627; else 
#line 9050 
                                         goto ldv_55629;
  ldv_55629: 
#line 9051 
  ;
  
#line 9050 
  num_irqs = pci_enable_msix_range(pdev,(struct msix_entry *)(& msi_vec),1,num_irqs);
  
#line 9051 
  if (num_irqs < 0) {
    
#line 9052 
    np->flags &= 4290772991U;
    
#line 9053 
    goto return_label;
  }
  else ;
  
#line 9056 
  np->flags |= 4194304U;
  
#line 9057 
  i = 0;
  
#line 9057 
  goto ldv_55631;
  ldv_55630: 
#line 9058 
  ;
  
#line 9058 
  np->ldg[i].irq = msi_vec[i].vector;
  
#line 9057 
  i += 1;
  ldv_55631: 
#line 9058 
  ;
  
#line 9057 
  if (i < num_irqs) 
#line 9059 
                    goto ldv_55630; else 
#line 9062 
                                         goto ldv_55632;
  ldv_55632: 
#line 9063 
  ;
  
#line 9059 
  np->num_ldg = num_irqs;
  return_label: 
#line 9060 
                return;
}


#line 9062  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_n2_irq_init(struct niu *np, u8 *ldg_num_map)
{
  int __retres;
  
#line 9082 
  __retres = -22;
  
#line 9082 
  return __retres;
}


#line 9086  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_ldg_init(struct niu *np)
{
  int __retres;
  u8 ldg_num_map[64U];
  int first_chan;
  int num_chan;
  int i;
  int err;
  int ldg_rotor;
  u8 port;
  
#line 9088 
  struct niu_parent *parent = np->parent;
  
#line 9094 
  np->num_ldg = 1;
  
#line 9095 
  np->ldg[0].irq = (unsigned int)(np->dev)->irq;
  
#line 9096 
  if ((unsigned int)parent->plat_type == 2U) {
    
#line 9097 
    err = niu_n2_irq_init(np,(u8 *)(& ldg_num_map));
    
#line 9098 
    if (err != 0) {
      
#line 9099 
      __retres = err;
      
#line 9099 
      goto return_label;
    }
    else ;
  }
  else 
#line 9101 
       niu_try_msix(np,(u8 *)(& ldg_num_map));
  
#line 9103 
  port = np->port;
  
#line 9104 
  i = 0;
  
#line 9104 
  goto ldv_55650;
  ldv_55649: 
#line 9105 
  ;
  {
    
#line 9105 
    struct niu_ldg *lp = & np->ldg[i];
    
#line 9107 
    netif_napi_add(np->dev,& lp->napi,& niu_poll,64);
    
#line 9109 
    lp->np = np;
    
#line 9110 
    lp->ldg_num = ldg_num_map[i];
    
#line 9111 
    lp->timer = (unsigned char)2U;
    
#line 9117 
    if ((unsigned int)(np->parent)->plat_type != 2U) {
      
#line 9118 
      err = niu_set_ldg_sid(np,(int)lp->ldg_num,(int)port,i);
      
#line 9119 
      if (err != 0) {
        
#line 9120 
        __retres = err;
        
#line 9120 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  
#line 9104 
  i += 1;
  ldv_55650: 
#line 9105 
  ;
  
#line 9104 
  if (np->num_ldg > i) 
#line 9106 
                       goto ldv_55649; else 
#line 9109 
                                            goto ldv_55651;
  ldv_55651: 
#line 9110 
  ;
  
#line 9135 
  ldg_rotor = 0;
  
#line 9137 
  err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],(int)port + 64);
  
#line 9139 
  if (err != 0) {
    
#line 9140 
    __retres = err;
    
#line 9140 
    goto return_label;
  }
  else ;
  
#line 9142 
  ldg_rotor += 1;
  
#line 9143 
  if (np->num_ldg == ldg_rotor) 
#line 9144 
                                ldg_rotor = 0; else ;
  
#line 9146 
  if ((unsigned int)port == 0U) {
    
#line 9147 
    err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],63);
    
#line 9150 
    if (err != 0) {
      
#line 9151 
      __retres = err;
      
#line 9151 
      goto return_label;
    }
    else ;
    
#line 9153 
    ldg_rotor += 1;
    
#line 9154 
    if (np->num_ldg == ldg_rotor) 
#line 9155 
                                  ldg_rotor = 0; else ;
    
#line 9157 
    err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],68);
    
#line 9160 
    if (err != 0) {
      
#line 9161 
      __retres = err;
      
#line 9161 
      goto return_label;
    }
    else ;
    
#line 9163 
    ldg_rotor += 1;
    
#line 9164 
    if (np->num_ldg == ldg_rotor) 
#line 9165 
                                  ldg_rotor = 0; else ;
  }
  else ;
  
#line 9169 
  first_chan = 0;
  
#line 9170 
  i = 0;
  
#line 9170 
  goto ldv_55653;
  ldv_55652: 
#line 9171 
  ;
  
#line 9171 
  first_chan = (int)parent->rxchan_per_port[i] + first_chan;
  
#line 9170 
  i += 1;
  ldv_55653: 
#line 9171 
  ;
  
#line 9170 
  if ((int)port > i) 
#line 9172 
                     goto ldv_55652; else 
#line 9175 
                                          goto ldv_55654;
  ldv_55654: 
#line 9176 
  ;
  
#line 9172 
  num_chan = (int)parent->rxchan_per_port[(int)port];
  
#line 9174 
  i = first_chan;
  
#line 9174 
  goto ldv_55656;
  ldv_55655: 
#line 9175 
  ;
  
#line 9175 
  err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],i);
  
#line 9178 
  if (err != 0) {
    
#line 9179 
    __retres = err;
    
#line 9179 
    goto return_label;
  }
  else ;
  
#line 9180 
  ldg_rotor += 1;
  
#line 9181 
  if (np->num_ldg == ldg_rotor) 
#line 9182 
                                ldg_rotor = 0; else ;
  
#line 9174 
  i += 1;
  ldv_55656: 
#line 9175 
  ;
  
#line 9174 
  if (first_chan + num_chan > i) 
#line 9176 
                                 goto ldv_55655; else 
#line 9179 
                                                      goto ldv_55657;
  ldv_55657: 
#line 9180 
  ;
  
#line 9185 
  first_chan = 0;
  
#line 9186 
  i = 0;
  
#line 9186 
  goto ldv_55659;
  ldv_55658: 
#line 9187 
  ;
  
#line 9187 
  first_chan = (int)parent->txchan_per_port[i] + first_chan;
  
#line 9186 
  i += 1;
  ldv_55659: 
#line 9187 
  ;
  
#line 9186 
  if ((int)port > i) 
#line 9188 
                     goto ldv_55658; else 
#line 9191 
                                          goto ldv_55660;
  ldv_55660: 
#line 9192 
  ;
  
#line 9188 
  num_chan = (int)parent->txchan_per_port[(int)port];
  
#line 9189 
  i = first_chan;
  
#line 9189 
  goto ldv_55662;
  ldv_55661: 
#line 9190 
  ;
  
#line 9190 
  err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],i + 32);
  
#line 9193 
  if (err != 0) {
    
#line 9194 
    __retres = err;
    
#line 9194 
    goto return_label;
  }
  else ;
  
#line 9195 
  ldg_rotor += 1;
  
#line 9196 
  if (np->num_ldg == ldg_rotor) 
#line 9197 
                                ldg_rotor = 0; else ;
  
#line 9189 
  i += 1;
  ldv_55662: 
#line 9190 
  ;
  
#line 9189 
  if (first_chan + num_chan > i) 
#line 9191 
                                 goto ldv_55661; else 
#line 9194 
                                                      goto ldv_55663;
  ldv_55663: 
#line 9195 
  ;
  
#line 9200 
  __retres = 0;
  return_label: 
#line 9200 
                return __retres;
}


#line 9203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_ldg_free(struct niu *np)
{
  
#line 9205 
  if ((np->flags & 4194304U) != 0U) 
#line 9206 
                                    pci_disable_msix(np->pdev); else ;
  
#line 9207 
  return;
}


#line 9209  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_of_props(struct niu *np)
{
  int __retres;
  
#line 9272 
  __retres = -22;
  
#line 9272 
  return __retres;
}


#line 9276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_get_invariants(struct niu *np)
{
  int __retres;
  int err;
  int have_props;
  u32 offset;
  
#line 9281 
  err = niu_get_of_props(np);
  
#line 9282 
  if (err == -19) {
    
#line 9283 
    __retres = err;
    
#line 9283 
    goto return_label;
  }
  else ;
  
#line 9285 
  have_props = err == 0;
  
#line 9287 
  err = niu_init_mac_ipp_pcs_base(np);
  
#line 9288 
  if (err != 0) {
    
#line 9289 
    __retres = err;
    
#line 9289 
    goto return_label;
  }
  else ;
  
#line 9291 
  if (have_props != 0) {
    
#line 9292 
    err = niu_get_and_validate_port(np);
    
#line 9293 
    if (err != 0) {
      
#line 9294 
      __retres = err;
      
#line 9294 
      goto return_label;
    }
    else ;
  }
  else {
    
#line 9297 
    if ((unsigned int)(np->parent)->plat_type == 2U) {
      
#line 9298 
      __retres = -22;
      
#line 9298 
      goto return_label;
    }
    else ;
    
#line 9300 
    writeq(1UL,(void volatile *)(np->regs + 13369344U));
    
#line 9301 
    offset = niu_pci_vpd_offset(np);
    
#line 9302 
    if ((np->msg_enable & 2U) != 0U) 
#line 9302 
                                     netdev_printk("\001",(struct net_device const *)np->dev,"%s() VPD offset [%08x]\n","niu_get_invariants",offset); else ;
    
#line 9304 
    if (offset != 0U) 
#line 9305 
                      niu_pci_vpd_fetch(np,offset); else ;
    
#line 9306 
    writeq(0UL,(void volatile *)(np->regs + 13369344U));
    
#line 9308 
    if ((np->flags & 8388608U) != 0U) {
      
#line 9309 
      niu_pci_vpd_validate(np);
      
#line 9310 
      err = niu_get_and_validate_port(np);
      
#line 9311 
      if (err != 0) {
        
#line 9312 
        __retres = err;
        
#line 9312 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 9315 
    if ((np->flags & 8388608U) == 0U) {
      
#line 9316 
      err = niu_get_and_validate_port(np);
      
#line 9317 
      if (err != 0) {
        
#line 9318 
        __retres = err;
        
#line 9318 
        goto return_label;
      }
      else ;
      
#line 9319 
      err = niu_pci_probe_sprom(np);
      
#line 9320 
      if (err != 0) {
        
#line 9321 
        __retres = err;
        
#line 9321 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  
#line 9325 
  err = niu_probe_ports(np);
  
#line 9326 
  if (err != 0) {
    
#line 9327 
    __retres = err;
    
#line 9327 
    goto return_label;
  }
  else ;
  
#line 9329 
  niu_ldg_init(np);
  
#line 9331 
  niu_classifier_swstate_init(np);
  
#line 9332 
  niu_link_config_init(np);
  
#line 9334 
  err = niu_determine_phy_disposition(np);
  
#line 9335 
  if (err == 0) 
#line 9336 
                err = niu_init_link(np); else ;
  
#line 9338 
  __retres = err;
  return_label: 
#line 9338 
                return __retres;
}


#line 9341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct list_head niu_parent_list = {.next = & niu_parent_list, .prev = & niu_parent_list};

#line 9342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct mutex niu_parent_lock = {.count = {.counter = 1}, .wait_lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "niu_parent_lock.wait_lock", .cpu = 0, .ip = 0UL}}}}, .wait_list = {.next = & niu_parent_lock.wait_list, .prev = & niu_parent_lock.wait_list}, .owner = (struct task_struct *)0, .magic = (void *)(& niu_parent_lock), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "niu_parent_lock", .cpu = 0, .ip = 0UL}};

#line 9343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_parent_index;

#line 9345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static ssize_t show_port_phy(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct platform_device *tmp;
  int i;
  int tmp_4;
  {
    
#line 9348 
    struct device const *__mptr = (struct device const *)dev;
    
#line 9348 
    tmp = (struct platform_device *)__mptr + 18446744073709551600U;
  }
  
#line 9348 
  struct platform_device *plat_dev = tmp;
  
#line 9349 
  struct niu_parent *p = dev_get_platdata((struct device const *)(& plat_dev->dev));
  
#line 9350 
  u32 port_phy = p->port_phy;
  
#line 9351 
  char *orig_buf = buf;
  
#line 9354 
  if (port_phy + 4294967295U > 4294967293U) {
    
#line 9356 
    __retres = 0L;
    
#line 9356 
    goto return_label;
  }
  else ;
  
#line 9358 
  i = 0;
  
#line 9358 
  goto ldv_55696;
  ldv_55695: 
#line 9359 
  ;
  {
    char const *type_str;
    int type;
    u32 tmp_1;
    int tmp_3;
    char *tmp_2;
    
#line 9362 
    tmp_1 = phy_decode(port_phy,i);
    
#line 9362 
    type = (int)tmp_1;
    
#line 9363 
    if (type == 1) 
#line 9364 
                   type_str = "10G"; else 
#line 9366 
                                          type_str = "1G";
    
#line 9367 
    ;
    
#line 9368 
    if (i == 0) 
#line 9368 
                tmp_2 = (char *)"%s"; else 
#line 9368 
                                           tmp_2 = (char *)" %s";
    
#line 9367 
    tmp_3 = sprintf(buf,(char const *)tmp_2,type_str);
    
#line 9369 
    buf += tmp_3;
  }
  
#line 9358 
  i += 1;
  ldv_55696: 
#line 9359 
  ;
  
#line 9358 
  if ((int)p->num_ports > i) 
#line 9360 
                             goto ldv_55695; else 
#line 9363 
                                                  goto ldv_55697;
  ldv_55697: 
#line 9364 
  ;
  
#line 9371 
  tmp_4 = sprintf(buf,"\n");
  
#line 9371 
  buf += tmp_4;
  
#line 9372 
  __retres = (long)buf - (long)orig_buf;
  return_label: 
#line 9372 
                return __retres;
}


#line 9375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static ssize_t show_plat_type(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct platform_device *tmp;
  char const *type_str;
  int tmp_1;
  {
    
#line 9378 
    struct device const *__mptr = (struct device const *)dev;
    
#line 9378 
    tmp = (struct platform_device *)__mptr + 18446744073709551600U;
  }
  
#line 9378 
  struct platform_device *plat_dev = tmp;
  
#line 9379 
  struct niu_parent *p = dev_get_platdata((struct device const *)(& plat_dev->dev));
  
#line 9382 
  switch ((int)p->plat_type) {
    case 1: 
#line 9383 
    ;
    
#line 9384 
    type_str = "atlas";
    
#line 9385 
    goto ldv_55709;
    case 2: 
#line 9386 
    ;
    
#line 9387 
    type_str = "niu";
    
#line 9388 
    goto ldv_55709;
    case 3: 
#line 9389 
    ;
    
#line 9390 
    type_str = "vf_p0";
    
#line 9391 
    goto ldv_55709;
    case 4: 
#line 9392 
    ;
    
#line 9393 
    type_str = "vf_p1";
    
#line 9394 
    goto ldv_55709;
    default: 
#line 9395 
    ;
    
#line 9396 
    type_str = "unknown";
    
#line 9397 
    goto ldv_55709;
  }
  ldv_55709: 
#line 9400 
  ;
  
#line 9400 
  tmp_1 = sprintf(buf,"%s\n",type_str);
  
#line 9400 
  __retres = (long)tmp_1;
  
#line 9400 
  return __retres;
}


#line 9403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static ssize_t __show_chan_per_port(struct device *dev, struct device_attribute *attr, char *buf, int rx)
{
  ssize_t __retres;
  struct platform_device *tmp;
  u8 *arr;
  int i;
  int tmp_2;
  char *tmp_1;
  int tmp_3;
  {
    
#line 9407 
    struct device const *__mptr = (struct device const *)dev;
    
#line 9407 
    tmp = (struct platform_device *)__mptr + 18446744073709551600U;
  }
  
#line 9407 
  struct platform_device *plat_dev = tmp;
  
#line 9408 
  struct niu_parent *p = dev_get_platdata((struct device const *)(& plat_dev->dev));
  
#line 9409 
  char *orig_buf = buf;
  
#line 9413 
  if (rx != 0) 
#line 9413 
               arr = (u8 *)(& p->rxchan_per_port); else 
#line 9413 
                                                        arr = (u8 *)(& p->txchan_per_port);
  
#line 9415 
  i = 0;
  
#line 9415 
  goto ldv_55728;
  ldv_55727: 
#line 9416 
  ;
  
#line 9416 
  ;
  
#line 9417 
  if (i == 0) 
#line 9417 
              tmp_1 = (char *)"%d"; else 
#line 9417 
                                         tmp_1 = (char *)" %d";
  
#line 9416 
  tmp_2 = sprintf(buf,(char const *)tmp_1,(int)*(arr + i));
  
#line 9418 
  buf += tmp_2;
  
#line 9415 
  i += 1;
  ldv_55728: 
#line 9416 
  ;
  
#line 9415 
  if ((int)p->num_ports > i) 
#line 9417 
                             goto ldv_55727; else 
#line 9420 
                                                  goto ldv_55729;
  ldv_55729: 
#line 9421 
  ;
  
#line 9420 
  tmp_3 = sprintf(buf,"\n");
  
#line 9420 
  buf += tmp_3;
  
#line 9422 
  __retres = (long)buf - (long)orig_buf;
  
#line 9422 
  return __retres;
}


#line 9425  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static ssize_t show_rxchan_per_port(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t tmp;
  
#line 9428 
  tmp = __show_chan_per_port(dev,attr,buf,1);
  
#line 9428 
  return tmp;
}


#line 9431  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static ssize_t show_txchan_per_port(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t tmp;
  
#line 9434 
  tmp = __show_chan_per_port(dev,attr,buf,1);
  
#line 9434 
  return tmp;
}


#line 9437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static ssize_t show_num_ports(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct platform_device *tmp;
  int tmp_1;
  {
    
#line 9440 
    struct device const *__mptr = (struct device const *)dev;
    
#line 9440 
    tmp = (struct platform_device *)__mptr + 18446744073709551600U;
  }
  
#line 9440 
  struct platform_device *plat_dev = tmp;
  
#line 9441 
  struct niu_parent *p = dev_get_platdata((struct device const *)(& plat_dev->dev));
  
#line 9443 
  tmp_1 = sprintf(buf,"%d\n",(int)p->num_ports);
  
#line 9443 
  __retres = (long)tmp_1;
  
#line 9443 
  return __retres;
}


#line 9446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct device_attribute niu_parent_attributes[6U] = {{.attr = {.name = "port_phy", .mode = (unsigned short)292U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & show_port_phy, .store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0}, {.attr = {.name = "plat_type", .mode = (unsigned short)292U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & show_plat_type, .store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0}, {.attr = {.name = "rxchan_per_port", .mode = (unsigned short)292U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & show_rxchan_per_port, .store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0}, {.attr = {.name = "txchan_per_port", .mode = (unsigned short)292U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & show_txchan_per_port, .store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0}, {.attr = {.name = "num_ports", .mode = (unsigned short)292U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & show_num_ports, .store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0}, {.attr = {.name = (char const *)0, .mode = (unsigned short)0, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = (ssize_t (*)(struct device *, struct device_attribute *, char *))0, .store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0}};

#line 9455  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_parent *niu_new_parent(struct niu *np, union niu_parent_id *id, u8 ptype)
{
  struct niu_parent *__retres;
  struct platform_device *plat_dev;
  struct niu_parent *p;
  int i;
  bool tmp;
  int tmp_2;
  
#line 9462 
  plat_dev = platform_device_register_simple("niu-board",niu_parent_index,(struct resource const *)0,0U);
  
#line 9464 
  tmp = IS_ERR((void const *)plat_dev);
  
#line 9464 
  if ((int)tmp != 0) {
    
#line 9465 
    __retres = (struct niu_parent *)0;
    
#line 9465 
    goto return_label;
  }
  else ;
  
#line 9467 
  i = 0;
  
#line 9467 
  goto ldv_55851;
  ldv_55850: 
#line 9468 
  ;
  {
    
#line 9468 
    int err = ldv_device_create_file_139(& plat_dev->dev,(struct device_attribute const *)(& niu_parent_attributes[i]));
    
#line 9470 
    if (err != 0) 
#line 9471 
                  goto fail_unregister; else ;
  }
  
#line 9467 
  i += 1;
  ldv_55851: 
#line 9468 
  ;
  
#line 9467 
  if (niu_parent_attributes[i].attr.name != (char const *)0) 
#line 9469 
                                                             goto ldv_55850; else 
                                                                    
#line 9472 
                                                                    goto ldv_55852;
  ldv_55852: 
#line 9473 
  ;
  
#line 9474 
  p = (struct niu_parent *)kzalloc(23336UL,208U);
  
#line 9475 
  if (p == (struct niu_parent *)0) 
#line 9476 
                                   goto fail_unregister; else ;
  
#line 9478 
  tmp_2 = niu_parent_index;
  
#line 9478 
  niu_parent_index += 1;
  
#line 9478 
  p->index = tmp_2;
  
#line 9480 
  plat_dev->dev.platform_data = (void *)p;
  
#line 9481 
  p->plat_dev = plat_dev;
  
#line 9483 
  memcpy((void *)(& p->id),(void const *)id,16UL);
  
#line 9484 
  p->plat_type = ptype;
  
#line 9485 
  INIT_LIST_HEAD(& p->list);
  
#line 9486 
  atomic_set(& p->refcnt,0);
  
#line 9487 
  list_add(& p->list,& niu_parent_list);
  
#line 9488 
  spinlock_check(& p->lock);
  {
    struct lock_class_key __key;
    
#line 9488 
    __raw_spin_lock_init(& p->lock.__anonCompField_spinlock_18.rlock,"&(&p->lock)->rlock",& __key);
  }
  
#line 9490 
  p->rxdma_clock_divider = 7500;
  
#line 9492 
  p->tcam_num_entries = (unsigned short)256U;
  
#line 9493 
  if ((unsigned int)p->plat_type == 2U) 
#line 9494 
                                        p->tcam_num_entries = (unsigned short)128U; else ;
  
#line 9496 
  i = 4;
  
#line 9496 
  goto ldv_55856;
  ldv_55855: 
#line 9497 
  ;
  {
    
#line 9497 
    int index = i + -4;
    
#line 9499 
    p->tcam_key[index] = 4ULL;
    
#line 9500 
    p->flow_key[index] = 122ULL;
  }
  
#line 9496 
  i += 1;
  ldv_55856: 
#line 9497 
  ;
  
#line 9496 
  if (i <= 15) 
#line 9498 
               goto ldv_55855; else 
#line 9501 
                                    goto ldv_55857;
  ldv_55857: 
#line 9502 
  ;
  
#line 9509 
  i = 0;
  
#line 9509 
  goto ldv_55859;
  ldv_55858: 
#line 9510 
  ;
  
#line 9510 
  p->ldg_map[i] = (unsigned char)255U;
  
#line 9509 
  i += 1;
  ldv_55859: 
#line 9510 
  ;
  
#line 9509 
  if (i <= 68) 
#line 9511 
               goto ldv_55858; else 
#line 9514 
                                    goto ldv_55860;
  ldv_55860: 
#line 9515 
  ;
  
#line 9512 
  __retres = p;
  
#line 9512 
  goto return_label;
  fail_unregister: 
#line 9514 
  ;
  
#line 9515 
  platform_device_unregister(plat_dev);
  
#line 9516 
  __retres = (struct niu_parent *)0;
  return_label: 
#line 9516 
                return __retres;
}


#line 9519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_parent *niu_get_parent(struct niu *np, union niu_parent_id *id, u8 ptype)
{
  struct niu_parent *p;
  struct niu_parent *tmp;
  struct niu_parent *tmp_0;
  int tmp_1;
  struct niu_parent *tmp_2;
  
#line 9523 
  int port = (int)np->port;
  
#line 9525 
  ldv_mutex_lock_140(& niu_parent_lock);
  
#line 9526 
  p = (struct niu_parent *)0;
  {
    
#line 9527 
    struct list_head const *__mptr = (struct list_head const *)niu_parent_list.next;
    
#line 9527 
    tmp_0 = (struct niu_parent *)__mptr + 18446744073709551544U;
  }
  
#line 9527 
  tmp = tmp_0;
  
#line 9527 
  goto ldv_55875;
  ldv_55874: 
#line 9528 
  ;
  
#line 9528 
  tmp_1 = memcmp((void const *)id,(void const *)(& tmp->id),16UL);
  
#line 9528 
  if (tmp_1 == 0) {
    
#line 9529 
    p = tmp;
    
#line 9530 
    goto ldv_55873;
  }
  else ;
  {
    
#line 9527 
    struct list_head const *__mptr_0 = (struct list_head const *)tmp->list.next;
    
#line 9527 
    tmp_2 = (struct niu_parent *)__mptr_0 + 18446744073709551544U;
  }
  
#line 9527 
  tmp = tmp_2;
  ldv_55875: 
#line 9529 
  ;
  
#line 9527 
  if (& tmp->list != & niu_parent_list) 
#line 9529 
                                        goto ldv_55874; else 
#line 9532 
                                                             goto ldv_55873;
  ldv_55873: 
#line 9533 
  ;
  
#line 9533 
  if (p == (struct niu_parent *)0) 
#line 9534 
                                   p = niu_new_parent(np,id,(unsigned char)((int)ptype)); else ;
  
#line 9536 
  if (p != (struct niu_parent *)0) {
    char port_name[6U];
    int err;
    
#line 9540 
    sprintf((char *)(& port_name),"port%d",port);
    
#line 9541 
    err = sysfs_create_link(& (p->plat_dev)->dev.kobj,& (np->device)->kobj,(char const *)(& port_name));
    
#line 9544 
    if (err == 0) {
      
#line 9545 
      p->ports[port] = np;
      
#line 9546 
      atomic_inc(& p->refcnt);
    }
    else ;
  }
  else ;
  
#line 9549 
  ldv_mutex_unlock_141(& niu_parent_lock);
  
#line 9551 
  return p;
}


#line 9554  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_put_parent(struct niu *np)
{
  char port_name[6U];
  int tmp;
  
#line 9556 
  struct niu_parent *p = np->parent;
  
#line 9557 
  u8 port = np->port;
  
#line 9560 
  if ((long)(p == (struct niu_parent *)0) != 0L || (long)(p->ports[(int)port] != np) != 0L) {
    
#line 9562 
    ldv_inline_asm();
    
#line 9560 
    ;
  }
  else ;
  
#line 9562 
  if ((np->msg_enable & 2U) != 0U) 
#line 9562 
                                   netdev_printk("\001",(struct net_device const *)np->dev,"%s() port[%u]\n","niu_put_parent",(int)port); else ;
  
#line 9565 
  sprintf((char *)(& port_name),"port%d",(int)port);
  
#line 9567 
  ldv_mutex_lock_142(& niu_parent_lock);
  
#line 9569 
  sysfs_remove_link(& (p->plat_dev)->dev.kobj,(char const *)(& port_name));
  
#line 9571 
  p->ports[(int)port] = (struct niu *)0;
  
#line 9572 
  np->parent = (struct niu_parent *)0;
  
#line 9574 
  tmp = atomic_dec_and_test(& p->refcnt);
  
#line 9574 
  if (tmp != 0) {
    
#line 9575 
    list_del(& p->list);
    
#line 9576 
    platform_device_unregister(p->plat_dev);
  }
  else ;
  
#line 9579 
  ldv_mutex_unlock_143(& niu_parent_lock);
  
#line 9580 
  return;
}


#line 9582  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void *niu_pci_alloc_coherent(struct device *dev, size_t size, u64 *handle, gfp_t flag)
{
  dma_addr_t dh;
  void *ret;
  
#line 9588 
  ret = dma_alloc_attrs(dev,size,& dh,flag,(struct dma_attrs *)0);
  
#line 9589 
  if (ret != (void *)0) 
#line 9590 
                        *handle = dh; else ;
  
#line 9591 
  return ret;
}


#line 9594  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_pci_free_coherent(struct device *dev, size_t size, void *cpu_addr, u64 handle)
{
  
#line 9597 
  dma_free_attrs(dev,size,cpu_addr,handle,(struct dma_attrs *)0);
  
#line 9598 
  return;
}


#line 9600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u64 niu_pci_map_page(struct device *dev, struct page *page, unsigned long offset, size_t size, enum dma_data_direction direction)
{
  u64 tmp;
  
#line 9604 
  tmp = dma_map_page(dev,page,offset,size,direction);
  
#line 9604 
  return tmp;
}


#line 9607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_pci_unmap_page(struct device *dev, u64 dma_address, size_t size, enum dma_data_direction direction)
{
  
#line 9610 
  dma_unmap_page(dev,dma_address,size,direction);
  
#line 9611 
  return;
}


#line 9613  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static u64 niu_pci_map_single(struct device *dev, void *cpu_addr, size_t size, enum dma_data_direction direction)
{
  u64 tmp;
  
#line 9617 
  tmp = dma_map_single_attrs(dev,cpu_addr,size,direction,(struct dma_attrs *)0);
  
#line 9617 
  return tmp;
}


#line 9620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_pci_unmap_single(struct device *dev, u64 dma_address, size_t size, enum dma_data_direction direction)
{
  
#line 9624 
  dma_unmap_single_attrs(dev,dma_address,size,direction,(struct dma_attrs *)0);
  
#line 9625 
  return;
}


#line 9627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct niu_ops const niu_pci_ops = {.alloc_coherent = & niu_pci_alloc_coherent, .free_coherent = & niu_pci_free_coherent, .map_page = & niu_pci_map_page, .unmap_page = & niu_pci_unmap_page, .map_single = & niu_pci_map_single, .unmap_single = & niu_pci_unmap_single};

#line 9636  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_driver_version(void)
{
  int niu_version_printed;
  int tmp;
  
#line 9640 
  tmp = niu_version_printed;
  
#line 9640 
  niu_version_printed += 1;
  
#line 9640 
  ;
  
#line 9640 
  if (tmp == 0) 
#line 9641 
                printk("\001",(char *)(& version)); else ;
  
#line 9642 
  return;
}


#line 9644  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct net_device *niu_alloc_and_init(struct device *gen_dev, struct pci_dev *pdev, struct platform_device *op, struct niu_ops const *ops, u8 port)
{
  struct net_device *__retres;
  struct net_device *dev;
  struct niu *np;
  
#line 9652 
  dev = ldv_alloc_etherdev_mqs_144(31048,24U,24U);
  
#line 9653 
  if (dev == (struct net_device *)0) {
    
#line 9654 
    __retres = (struct net_device *)0;
    
#line 9654 
    goto return_label;
  }
  else ;
  
#line 9656 
  dev->dev.parent = gen_dev;
  
#line 9658 
  np = (struct niu *)netdev_priv((struct net_device const *)dev);
  
#line 9659 
  np->dev = dev;
  
#line 9660 
  np->pdev = pdev;
  
#line 9661 
  np->op = op;
  
#line 9662 
  np->device = gen_dev;
  
#line 9663 
  np->ops = ops;
  
#line 9665 
  np->msg_enable = (unsigned int)niu_debug;
  
#line 9667 
  spinlock_check(& np->lock);
  {
    struct lock_class_key __key;
    
#line 9667 
    __raw_spin_lock_init(& np->lock.__anonCompField_spinlock_18.rlock,"&(&np->lock)->rlock",& __key);
  }
  {
    struct lock_class_key __key_0;
    
#line 9668 
    __init_work(& np->reset_task,0);
    
#line 9668 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 9668 
    np->reset_task.data = __constr_expr_37;
    
#line 9668 
    lockdep_init_map(& np->reset_task.lockdep_map,"(&np->reset_task)",& __key_0,0);
    
#line 9668 
    INIT_LIST_HEAD(& np->reset_task.entry);
    
#line 9668 
    np->reset_task.func = & niu_reset_task;
  }
  
#line 9670 
  np->port = port;
  
#line 9672 
  __retres = dev;
  return_label: 
#line 9672 
                return __retres;
}


#line 9675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct net_device_ops const niu_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & niu_open, .ndo_stop = & niu_close, .ndo_start_xmit = & niu_start_xmit, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & niu_set_rx_mode, .ndo_set_mac_address = & niu_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & niu_ioctl, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & niu_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & niu_tx_timeout, .ndo_get_stats64 = & niu_get_stats, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_vlan_rx_kill_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_poll_controller = (void (*)(struct net_device *))0, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = (netdev_features_t (*)(struct net_device *, netdev_features_t ))0, .ndo_set_features = (int (*)(struct net_device *, netdev_features_t ))0, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 9688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_assign_netdev_ops(struct net_device *dev)
{
  
#line 9690 
  dev->netdev_ops = & niu_netdev_ops;
  
#line 9691 
  dev->ethtool_ops = & niu_ethtool_ops;
  
#line 9692 
  dev->watchdog_timeo = 1250;
  
#line 9693 
  return;
}


#line 9695  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_device_announce(struct niu *np)
{
  
#line 9697 
  struct net_device *dev = np->dev;
  
#line 9699 
  printk("\001",(char *)(& dev->name),dev->dev_addr);
  
#line 9701 
  if ((unsigned int)(np->parent)->plat_type == 8U) {
    char *tmp_0;
    char *tmp_1;
    char *tmp_2;
    char *tmp_3;
    
#line 9702 
    ;
    
#line 9702 
    if ((unsigned int)np->mac_xcvr != 1U) {
      char *tmp;
      
#line 9702 
      if ((unsigned int)np->mac_xcvr == 2U) 
#line 9702 
                                            tmp = (char *)"PCS"; else 
                                                                   
#line 9702 
                                                                   tmp = (char *)"XPCS";
      
#line 9702 
      tmp_0 = tmp;
    }
    else 
#line 9702 
         tmp_0 = (char *)"MII";
    
#line 9702 
    if ((np->flags & 131072U) != 0U) 
#line 9702 
                                     tmp_1 = (char *)"RGMII FIBER"; else 
                                                                    
#line 9702 
                                                                    tmp_1 = (char *)"SERDES";
    
#line 9702 
    if ((np->flags & 262144U) != 0U) 
#line 9702 
                                     tmp_2 = (char *)"10G"; else 
#line 9702 
                                                                 tmp_2 = (char *)"1G";
    
#line 9702 
    if ((np->flags & 65536U) != 0U) 
#line 9702 
                                    tmp_3 = (char *)"XMAC"; else 
#line 9702 
                                                                 tmp_3 = (char *)"BMAC";
    
#line 9702 
    ;
    
#line 9702 
    printk("\001",(char *)(& dev->name),tmp_3,tmp_2,tmp_1,tmp_0,(char *)(& np->vpd.phy_type));
  }
  else {
    char *tmp_5;
    char *tmp_7;
    char *tmp_8;
    char *tmp_9;
    
#line 9711 
    ;
    
#line 9711 
    if ((unsigned int)np->mac_xcvr != 1U) {
      char *tmp_4;
      
#line 9711 
      if ((unsigned int)np->mac_xcvr == 2U) 
#line 9711 
                                            tmp_4 = (char *)"PCS"; else 
                                                                    
#line 9711 
                                                                    tmp_4 = (char *)"XPCS";
      
#line 9711 
      tmp_5 = tmp_4;
    }
    else 
#line 9711 
         tmp_5 = (char *)"MII";
    
#line 9711 
    if ((np->flags & 131072U) == 0U) {
      char *tmp_6;
      
#line 9711 
      if ((np->flags & 524288U) != 0U) 
#line 9711 
                                       tmp_6 = (char *)"SERDES"; else 
                                                                   
#line 9711 
                                                                   tmp_6 = (char *)"COPPER";
      
#line 9711 
      tmp_7 = tmp_6;
    }
    else 
#line 9711 
         tmp_7 = (char *)"FIBER";
    
#line 9711 
    if ((np->flags & 262144U) != 0U) 
#line 9711 
                                     tmp_8 = (char *)"10G"; else 
#line 9711 
                                                                 tmp_8 = (char *)"1G";
    
#line 9711 
    if ((np->flags & 65536U) != 0U) 
#line 9711 
                                    tmp_9 = (char *)"XMAC"; else 
#line 9711 
                                                                 tmp_9 = (char *)"BMAC";
    
#line 9711 
    ;
    
#line 9711 
    printk("\001",(char *)(& dev->name),tmp_9,tmp_8,tmp_7,tmp_5,(char *)(& np->vpd.phy_type));
  }
  
#line 9712 
  return;
}


#line 9724  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_set_basic_features(struct net_device *dev)
{
  
#line 9726 
  dev->hw_features = 8589934601ULL;
  
#line 9727 
  dev->features = (dev->features | dev->hw_features) | 17179869184ULL;
  
#line 9728 
  return;
}


#line 9730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_pci_init_one(struct pci_dev *pdev, struct pci_device_id const *ent)
{
  int __retres;
  union niu_parent_id parent_id;
  struct net_device *dev;
  struct niu *np;
  int err;
  u64 dma_mask;
  int tmp_0;
  bool tmp;
  
#line 9739 
  niu_driver_version();
  
#line 9741 
  err = pci_enable_device(pdev);
  
#line 9742 
  if (err != 0) {
    
#line 9743 
    dev_err((struct device const *)(& pdev->dev),"Cannot enable PCI device, aborting\n");
    
#line 9744 
    __retres = err;
    
#line 9744 
    goto return_label;
  }
  else ;
  
#line 9747 
  if ((pdev->resource[0].flags & 512UL) == 0UL || (pdev->resource[2].flags & 512UL) == 0UL) {
    
#line 9749 
    dev_err((struct device const *)(& pdev->dev),"Cannot find proper PCI device base addresses, aborting\n");
    
#line 9750 
    err = -19;
    
#line 9751 
    goto err_out_disable_pdev;
  }
  else ;
  
#line 9754 
  err = pci_request_regions(pdev,"niu");
  
#line 9755 
  if (err != 0) {
    
#line 9756 
    dev_err((struct device const *)(& pdev->dev),"Cannot obtain PCI resources, aborting\n");
    
#line 9757 
    goto err_out_disable_pdev;
  }
  else ;
  
#line 9760 
  tmp = pci_is_pcie(pdev);
  
#line 9760 
  if (tmp) 
#line 9760 
           tmp_0 = 0; else 
#line 9760 
                           tmp_0 = 1;
  
#line 9760 
  if (tmp_0) {
    
#line 9761 
    dev_err((struct device const *)(& pdev->dev),"Cannot find PCI Express capability, aborting\n");
    
#line 9762 
    err = -19;
    
#line 9763 
    goto err_out_free_res;
  }
  else ;
  
#line 9766 
  dev = niu_alloc_and_init(& pdev->dev,pdev,(struct platform_device *)0,& niu_pci_ops,(unsigned char)((int)((unsigned char)pdev->devfn) & 7));
  
#line 9768 
  if (dev == (struct net_device *)0) {
    
#line 9769 
    err = -12;
    
#line 9770 
    goto err_out_free_res;
  }
  else ;
  
#line 9772 
  np = (struct niu *)netdev_priv((struct net_device const *)dev);
  
#line 9774 
  memset((void *)(& parent_id),0,16UL);
  
#line 9775 
  parent_id.pci.domain = pci_domain_nr(pdev->bus);
  
#line 9776 
  parent_id.pci.bus = (int)(pdev->bus)->number;
  
#line 9777 
  parent_id.pci.device = (int)(pdev->devfn >> 3) & 31;
  
#line 9779 
  np->parent = niu_get_parent(np,& parent_id,(unsigned char)1);
  
#line 9781 
  if (np->parent == (struct niu_parent *)0) {
    
#line 9782 
    err = -12;
    
#line 9783 
    goto err_out_free_dev;
  }
  else ;
  
#line 9786 
  pcie_capability_clear_and_set_word(pdev,8,(unsigned short)2048,(unsigned short)31);
  
#line 9792 
  dma_mask = 17592186044415ULL;
  
#line 9793 
  err = pci_set_dma_mask(pdev,dma_mask);
  
#line 9794 
  if (err == 0) {
    
#line 9795 
    dev->features |= 32ULL;
    
#line 9796 
    err = pci_set_consistent_dma_mask(pdev,dma_mask);
    
#line 9797 
    if (err != 0) {
      
#line 9798 
      dev_err((struct device const *)(& pdev->dev),"Unable to obtain 44 bit DMA for consistent allocations, aborting\n");
      
#line 9799 
      goto err_out_release_parent;
    }
    else ;
  }
  else ;
  
#line 9802 
  if (err != 0) {
    
#line 9803 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    
#line 9804 
    if (err != 0) {
      
#line 9805 
      dev_err((struct device const *)(& pdev->dev),"No usable DMA configuration, aborting\n");
      
#line 9806 
      goto err_out_release_parent;
    }
    else ;
  }
  else ;
  
#line 9810 
  niu_set_basic_features(dev);
  
#line 9812 
  dev->priv_flags |= 131072U;
  
#line 9814 
  np->regs = pci_ioremap_bar(pdev,0);
  
#line 9815 
  if (np->regs == (void *)0) {
    
#line 9816 
    dev_err((struct device const *)(& pdev->dev),"Cannot map device registers, aborting\n");
    
#line 9817 
    err = -12;
    
#line 9818 
    goto err_out_release_parent;
  }
  else ;
  
#line 9821 
  pci_set_master(pdev);
  
#line 9822 
  pci_save_state(pdev);
  
#line 9824 
  dev->irq = (int)pdev->irq;
  
#line 9826 
  niu_assign_netdev_ops(dev);
  
#line 9828 
  err = niu_get_invariants(np);
  
#line 9829 
  if (err != 0) {
    
#line 9830 
    if (err != -19) 
#line 9831 
                    dev_err((struct device const *)(& pdev->dev),"Problem fetching invariants of chip, aborting\n"); else ;
    
#line 9832 
    goto err_out_iounmap;
  }
  else ;
  
#line 9835 
  err = ldv_register_netdev_145(dev);
  
#line 9836 
  if (err != 0) {
    
#line 9837 
    dev_err((struct device const *)(& pdev->dev),"Cannot register net device, aborting\n");
    
#line 9838 
    goto err_out_iounmap;
  }
  else ;
  
#line 9841 
  pci_set_drvdata(pdev,(void *)dev);
  
#line 9843 
  niu_device_announce(np);
  
#line 9845 
  __retres = 0;
  
#line 9845 
  goto return_label;
  err_out_iounmap: 
#line 9847 
  ;
  
#line 9848 
  if (np->regs != (void *)0) {
    
#line 9849 
    iounmap((void volatile *)np->regs);
    
#line 9850 
    np->regs = (void *)0;
  }
  else ;
  err_out_release_parent: 
#line 9853 
  ;
  
#line 9854 
  niu_put_parent(np);
  err_out_free_dev: 
#line 9856 
  ;
  
#line 9857 
  ldv_free_netdev_146(dev);
  err_out_free_res: 
#line 9859 
  ;
  
#line 9860 
  pci_release_regions(pdev);
  err_out_disable_pdev: 
#line 9862 
  ;
  
#line 9863 
  pci_disable_device(pdev);
  
#line 9865 
  __retres = err;
  return_label: 
#line 9865 
                return __retres;
}


#line 9868  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_pci_remove_one(struct pci_dev *pdev)
{
  
#line 9870 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 9872 
  if (dev != (struct net_device *)0) {
    
#line 9873 
    struct niu *np = netdev_priv((struct net_device const *)dev);
    
#line 9875 
    ldv_unregister_netdev_147(dev);
    
#line 9876 
    if (np->regs != (void *)0) {
      
#line 9877 
      iounmap((void volatile *)np->regs);
      
#line 9878 
      np->regs = (void *)0;
    }
    else ;
    
#line 9881 
    niu_ldg_free(np);
    
#line 9883 
    niu_put_parent(np);
    
#line 9885 
    ldv_free_netdev_148(dev);
    
#line 9886 
    pci_release_regions(pdev);
    
#line 9887 
    pci_disable_device(pdev);
  }
  else ;
  
#line 9889 
  return;
}


#line 9891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_suspend(struct pci_dev *pdev, pm_message_t state)
{
  int __retres;
  unsigned long flags;
  int tmp_2;
  bool tmp_1;
  
#line 9893 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 9894 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 9897 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 9897 
  if (tmp_1) 
#line 9897 
             tmp_2 = 0; else 
#line 9897 
                             tmp_2 = 1;
  
#line 9897 
  if (tmp_2) {
    
#line 9898 
    __retres = 0;
    
#line 9898 
    goto return_label;
  }
  else ;
  
#line 9900 
  ldv_flush_work_149(& np->reset_task);
  
#line 9901 
  niu_netif_stop(np);
  
#line 9903 
  ldv_del_timer_sync_150(& np->timer);
  
#line 9905 
  ldv___ldv_spin_lock_151(& np->lock);
  
#line 9906 
  niu_enable_interrupts(np,0);
  
#line 9907 
  ldv_spin_unlock_irqrestore_152(& np->lock,flags);
  
#line 9909 
  netif_device_detach(dev);
  
#line 9911 
  ldv___ldv_spin_lock_153(& np->lock);
  
#line 9912 
  niu_stop_hw(np);
  
#line 9913 
  ldv_spin_unlock_irqrestore_154(& np->lock,flags);
  
#line 9915 
  pci_save_state(pdev);
  
#line 9917 
  __retres = 0;
  return_label: 
#line 9917 
                return __retres;
}


#line 9920  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_resume(struct pci_dev *pdev)
{
  int __retres;
  unsigned long flags;
  int err;
  int tmp_2;
  bool tmp_1;
  
#line 9922 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 9923 
  struct niu *np = netdev_priv((struct net_device const *)dev);
  
#line 9927 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 9927 
  if (tmp_1) 
#line 9927 
             tmp_2 = 0; else 
#line 9927 
                             tmp_2 = 1;
  
#line 9927 
  if (tmp_2) {
    
#line 9928 
    __retres = 0;
    
#line 9928 
    goto return_label;
  }
  else ;
  
#line 9930 
  pci_restore_state(pdev);
  
#line 9932 
  netif_device_attach(dev);
  
#line 9934 
  ldv___ldv_spin_lock_155(& np->lock);
  
#line 9936 
  err = niu_init_hw(np);
  
#line 9937 
  if (err == 0) {
    
#line 9938 
    np->timer.expires = jiffies + 250UL;
    
#line 9939 
    add_timer(& np->timer);
    
#line 9940 
    niu_netif_start(np);
  }
  else ;
  
#line 9943 
  ldv_spin_unlock_irqrestore_156(& np->lock,flags);
  
#line 9945 
  __retres = err;
  return_label: 
#line 9945 
                return __retres;
}


#line 9948  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static struct pci_driver niu_pci_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = "niu", .id_table = (struct pci_device_id const *)(& niu_pci_tbl), .probe = & niu_pci_init_one, .remove = & niu_pci_remove_one, .suspend = & niu_suspend, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = & niu_resume, .shutdown = (void (*)(struct pci_dev *))0, .sriov_configure = (int (*)(struct pci_dev *, int ))0, .err_handler = (struct pci_error_handlers const *)0, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = (struct dev_pm_ops const *)0, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 10190 
void __compiletime_assert_10190(void);


#line 10186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static int niu_init(void)
{
  u32 tmp;
  
#line 10188 
  int err = 0;
  {
    
#line 10190 
    bool __cond = (_Bool)0;
    
#line 10190 
    if ((int)__cond != 0) 
#line 10190 
                          __compiletime_assert_10190(); else ;
  }
  
#line 10192 
  tmp = netif_msg_init(debug,7);
  
#line 10192 
  niu_debug = (int)tmp;
  
#line 10198 
  if (err == 0) 
#line 10199 
                err = ldv___pci_register_driver_157(& niu_pci_driver,& __this_module,"niu"); else ;
  
#line 10206 
  return err;
}


#line 10209  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/sun/niu.c"
static void niu_exit(void)
{
  
#line 10211 
  ldv_pci_unregister_driver_158(& niu_pci_driver);
  
#line 10212 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int (*ldv_emg_alias_eth_validate_addr_7)(struct net_device *) = & eth_validate_addr;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_10)(struct net_device *) = & ethtool_op_get_link;

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
struct pci_driver *ldv_emg_alias_niu_pci_driver_2 = & niu_pci_driver;

#line 61 
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 62 
int ldv_emg_device_create_file(struct device *arg0, struct device_attribute *arg1);


#line 63 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 64 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 65 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 66 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 67 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 68 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 69 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 70 
_Bool ldv_emg_flush_work(struct work_struct *arg0);


#line 71 
_Bool ldv_emg_schedule_work(struct work_struct *arg0);


#line 72 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
unsigned int ldv_emg_wrapper_niu_get_msglevel_13(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 77 
  tmp = niu_get_msglevel(arg0);
  
#line 77 
  return tmp;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_suspend_3(struct pci_dev *arg0, struct pm_message arg1)
{
  int tmp;
  
#line 82 
  tmp = niu_suspend(arg0,arg1);
  
#line 82 
  return tmp;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
void ldv_emg_wrapper_niu_get_ethtool_stats_8(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 87 
  niu_get_ethtool_stats(arg0,arg1,arg2);
  
#line 88 
  return;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
enum netdev_tx ldv_emg_wrapper_niu_start_xmit_14(struct sk_buff *arg0, struct net_device *arg1)
{
  enum netdev_tx tmp;
  
#line 92 
  tmp = niu_start_xmit(arg0,arg1);
  
#line 92 
  return tmp;
}


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_get_settings_16(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 97 
  tmp = niu_get_settings(arg0,arg1);
  
#line 97 
  return tmp;
}


#line 101  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
void ldv_emg_wrapper_niu_set_rx_mode_22(struct net_device *arg0)
{
  
#line 102 
  niu_set_rx_mode(arg0);
  
#line 103 
  return;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 107 
  tmp = niu_open(arg0);
  
#line 107 
  return tmp;
}


#line 111  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
long ldv_emg_wrapper_show_plat_type_2(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  long tmp;
  
#line 112 
  tmp = show_plat_type(arg0,arg1,arg2);
  
#line 112 
  return tmp;
}


#line 116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_set_settings_3(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 117 
  tmp = niu_set_settings(arg0,arg1);
  
#line 117 
  return tmp;
}


#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_pci_init_one_2(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 122 
  tmp = niu_pci_init_one(arg0,(struct pci_device_id const *)arg1);
  
#line 122 
  return tmp;
}


#line 126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
enum irqreturn ldv_emg_wrapper_niu_interrupt_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 127 
  tmp = niu_interrupt(arg0,arg1);
  
#line 127 
  return tmp;
}


#line 131  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_resume_5(struct pci_dev *arg0)
{
  int tmp;
  
#line 132 
  tmp = niu_resume(arg0);
  
#line 132 
  return tmp;
}


#line 136  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_get_eeprom_len_24(struct net_device *arg0)
{
  int tmp;
  
#line 137 
  tmp = niu_get_eeprom_len(arg0);
  
#line 137 
  return tmp;
}


#line 141  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
void ldv_emg_wrapper_niu_set_msglevel_5(struct net_device *arg0, unsigned int arg1)
{
  
#line 142 
  niu_set_msglevel(arg0,arg1);
  
#line 143 
  return;
}


#line 146  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_set_nfc_11(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  int tmp;
  
#line 147 
  tmp = niu_set_nfc(arg0,arg1);
  
#line 147 
  return tmp;
}


#line 151  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
long ldv_emg_wrapper_show_port_phy_2(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  long tmp;
  
#line 152 
  tmp = show_port_phy(arg0,arg1,arg2);
  
#line 152 
  return tmp;
}


#line 156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_niu_init(void)
{
  int tmp;
  
#line 157 
  tmp = niu_init();
  
#line 157 
  return tmp;
}


#line 160  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_get_eeprom_2(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 161 
  tmp = niu_get_eeprom(arg0,arg1,arg2);
  
#line 161 
  return tmp;
}


#line 165  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
long ldv_emg_wrapper_show_num_ports_2(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  long tmp;
  
#line 166 
  tmp = show_num_ports(arg0,arg1,arg2);
  
#line 166 
  return tmp;
}


#line 170  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
void ldv_emg_wrapper_niu_tx_timeout_17(struct net_device *arg0)
{
  
#line 171 
  niu_tx_timeout(arg0);
  
#line 172 
  return;
}


#line 175  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_get_nfc_20(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  int tmp;
  
#line 176 
  tmp = niu_get_nfc(arg0,arg1,arg2);
  
#line 176 
  return tmp;
}


#line 180  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
void ldv_emg_wrapper_niu_pci_remove_one_4(struct pci_dev *arg0)
{
  
#line 181 
  niu_pci_remove_one(arg0);
  
#line 182 
  return;
}


#line 185  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_change_mtu_9(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 186 
  tmp = niu_change_mtu(arg0,arg1);
  
#line 186 
  return tmp;
}


#line 190  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
void ldv_emg_wrapper_niu_get_drvinfo_12(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 191 
  niu_get_drvinfo(arg0,arg1);
  
#line 192 
  return;
}


#line 195  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_get_sset_count_19(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 196 
  tmp = niu_get_sset_count(arg0,arg1);
  
#line 196 
  return tmp;
}


#line 200  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 201 
  tmp = niu_close(arg0);
  
#line 201 
  return tmp;
}


#line 205  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
long ldv_emg_wrapper_show_rxchan_per_port_2(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  long tmp;
  
#line 206 
  tmp = show_rxchan_per_port(arg0,arg1,arg2);
  
#line 206 
  return tmp;
}


#line 210  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
void ldv_emg_niu_exit(void)
{
  
#line 211 
  niu_exit();
  
#line 212 
  return;
}


#line 214  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
void ldv_emg_wrapper_niu_get_strings_21(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 215 
  niu_get_strings(arg0,arg1,arg2);
  
#line 216 
  return;
}


#line 219  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_ioctl_18(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  int tmp;
  
#line 220 
  tmp = niu_ioctl(arg0,arg1,arg2);
  
#line 220 
  return tmp;
}


#line 224  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_set_mac_addr_15(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 225 
  tmp = niu_set_mac_addr(arg0,arg1);
  
#line 225 
  return tmp;
}


#line 229  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
struct rtnl_link_stats64 *ldv_emg_wrapper_niu_get_stats_6(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  struct rtnl_link_stats64 *tmp;
  
#line 230 
  tmp = niu_get_stats(arg0,arg1);
  
#line 230 
  return tmp;
}


#line 234  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_nway_reset_23(struct net_device *arg0)
{
  int tmp;
  
#line 235 
  tmp = niu_nway_reset(arg0);
  
#line 235 
  return tmp;
}


#line 239  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
long ldv_emg_wrapper_show_txchan_per_port_2(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  long tmp;
  
#line 240 
  tmp = show_txchan_per_port(arg0,arg1,arg2);
  
#line 240 
  return tmp;
}


#line 244  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
int ldv_emg_wrapper_niu_set_phys_id_4(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  int tmp;
  
#line 245 
  tmp = niu_set_phys_id(arg0,arg1);
  
#line 245 
  return tmp;
}


#line 264  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static bool IS_ERR(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 268 
  ret = ldv_is_err(ptr);
  
#line 269 
  __retres = (_Bool)(ret != 0L);
  
#line 269 
  return __retres;
}


#line 282  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void atomic_add(int i, atomic_t *v)
{
  
#line 285 
  ldv_atomic_add(i,v);
  
#line 286 
  return;
}


#line 303  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 306 
  ldv_atomic_inc(v);
  
#line 307 
  return;
}


#line 317  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static int atomic_dec_and_test(atomic_t *v)
{
  int tmp;
  
#line 320 
  tmp = ldv_atomic_dec_and_test(v);
  
#line 320 
  return tmp;
}


#line 667  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 670 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 670 
  return tmp;
}


#line 674  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 677 
  tmp = ldv_kzalloc(size,flags);
  
#line 677 
  return tmp;
}


#line 787  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_lock_60(spinlock_t *lock)
{
  
#line 791 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  
#line 793 
  spin_lock(lock);
  
#line 794 
  return;
}


#line 830  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_63(spinlock_t *lock)
{
  
#line 834 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 836 
  spin_unlock(lock);
  
#line 837 
  return;
}


#line 930  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1)
{
  
#line 934 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 936 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 937 
  return;
}


#line 940  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_74(spinlock_t *lock, unsigned long flags)
{
  
#line 944 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 946 
  spin_unlock_irqrestore(lock,flags);
  
#line 947 
  return;
}


#line 950  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1)
{
  
#line 954 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 956 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 957 
  return;
}


#line 960  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags)
{
  
#line 964 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 966 
  spin_unlock_irqrestore(lock,flags);
  
#line 967 
  return;
}


#line 970  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1)
{
  
#line 974 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 976 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 977 
  return;
}


#line 980  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags)
{
  
#line 984 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 986 
  spin_unlock_irqrestore(lock,flags);
  
#line 987 
  return;
}


#line 990  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_79(spinlock_t *ldv_func_arg1)
{
  
#line 994 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 996 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 997 
  return;
}


#line 1000  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_80(spinlock_t *lock, unsigned long flags)
{
  
#line 1004 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1006 
  spin_unlock_irqrestore(lock,flags);
  
#line 1007 
  return;
}


#line 1010  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1)
{
  
#line 1014 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1016 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1017 
  return;
}


#line 1020  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags)
{
  
#line 1024 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1026 
  spin_unlock_irqrestore(lock,flags);
  
#line 1027 
  return;
}


#line 1030  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1)
{
  
#line 1034 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1036 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1037 
  return;
}


#line 1040  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_84(spinlock_t *lock, unsigned long flags)
{
  
#line 1044 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1046 
  spin_unlock_irqrestore(lock,flags);
  
#line 1047 
  return;
}


#line 1050  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_85(spinlock_t *ldv_func_arg1)
{
  
#line 1054 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1056 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1057 
  return;
}


#line 1060  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_86(spinlock_t *lock, unsigned long flags)
{
  
#line 1064 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1066 
  spin_unlock_irqrestore(lock,flags);
  
#line 1067 
  return;
}


#line 1070  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_87(spinlock_t *ldv_func_arg1)
{
  
#line 1074 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1076 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1077 
  return;
}


#line 1080  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_88(spinlock_t *lock, unsigned long flags)
{
  
#line 1084 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1086 
  spin_unlock_irqrestore(lock,flags);
  
#line 1087 
  return;
}


#line 1090  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_89(spinlock_t *ldv_func_arg1)
{
  
#line 1094 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1096 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1097 
  return;
}


#line 1100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_90(spinlock_t *lock, unsigned long flags)
{
  
#line 1104 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1106 
  spin_unlock_irqrestore(lock,flags);
  
#line 1107 
  return;
}


#line 1110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1)
{
  
#line 1114 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1116 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1117 
  return;
}


#line 1120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_92(spinlock_t *lock, unsigned long flags)
{
  
#line 1124 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1126 
  spin_unlock_irqrestore(lock,flags);
  
#line 1127 
  return;
}


#line 1130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_93(spinlock_t *lock, unsigned long flags)
{
  
#line 1134 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1136 
  spin_unlock_irqrestore(lock,flags);
  
#line 1137 
  return;
}


#line 1140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_94(spinlock_t *ldv_func_arg1)
{
  
#line 1144 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1146 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1147 
  return;
}


#line 1150  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_95(spinlock_t *lock, unsigned long flags)
{
  
#line 1154 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1156 
  spin_unlock_irqrestore(lock,flags);
  
#line 1157 
  return;
}


#line 1160  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_96(spinlock_t *ldv_func_arg1)
{
  
#line 1164 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1166 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1167 
  return;
}


#line 1170  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_97(spinlock_t *lock, unsigned long flags)
{
  
#line 1174 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1176 
  spin_unlock_irqrestore(lock,flags);
  
#line 1177 
  return;
}


#line 1180  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_98(spinlock_t *ldv_func_arg1)
{
  
#line 1184 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1186 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1187 
  return;
}


#line 1190  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_99(spinlock_t *lock, unsigned long flags)
{
  
#line 1194 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1196 
  spin_unlock_irqrestore(lock,flags);
  
#line 1197 
  return;
}


#line 1200  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static int ldv_request_irq_100(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1204 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1204 
  return tmp;
}


#line 1208  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_free_irq_101(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1212 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1213 
  return;
}


#line 1216  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_free_irq_102(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1220 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1221 
  return;
}


#line 1224  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_lock_irq_103(spinlock_t *lock)
{
  
#line 1228 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1230 
  spin_lock_irq(lock);
  
#line 1231 
  return;
}


#line 1234  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irq_104(spinlock_t *lock)
{
  
#line 1238 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1240 
  spin_unlock_irq(lock);
  
#line 1241 
  return;
}


#line 1244  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static int ldv_del_timer_sync_105(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1248 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1248 
  return tmp;
}


#line 1252  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_lock_irq_106(spinlock_t *lock)
{
  
#line 1256 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1258 
  spin_lock_irq(lock);
  
#line 1259 
  return;
}


#line 1262  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irq_107(spinlock_t *lock)
{
  
#line 1266 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1268 
  spin_unlock_irq(lock);
  
#line 1269 
  return;
}


#line 1272  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_108(spinlock_t *ldv_func_arg1)
{
  
#line 1276 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1278 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1279 
  return;
}


#line 1282  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_109(spinlock_t *lock, unsigned long flags)
{
  
#line 1286 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1288 
  spin_unlock_irqrestore(lock,flags);
  
#line 1289 
  return;
}


#line 1292  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_110(spinlock_t *ldv_func_arg1)
{
  
#line 1296 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1298 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1299 
  return;
}


#line 1302  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_111(spinlock_t *lock, unsigned long flags)
{
  
#line 1306 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1308 
  spin_unlock_irqrestore(lock,flags);
  
#line 1309 
  return;
}


#line 1312  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_112(spinlock_t *ldv_func_arg1)
{
  
#line 1316 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1318 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1319 
  return;
}


#line 1322  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_113(spinlock_t *lock, unsigned long flags)
{
  
#line 1326 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1328 
  spin_unlock_irqrestore(lock,flags);
  
#line 1329 
  return;
}


#line 1332  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_114(spinlock_t *lock, unsigned long flags)
{
  
#line 1336 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1338 
  spin_unlock_irqrestore(lock,flags);
  
#line 1339 
  return;
}


#line 1342  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static int ldv_del_timer_sync_115(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1346 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1346 
  return tmp;
}


#line 1350  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_116(spinlock_t *ldv_func_arg1)
{
  
#line 1354 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1356 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1357 
  return;
}


#line 1360  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_117(spinlock_t *lock, unsigned long flags)
{
  
#line 1364 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1366 
  spin_unlock_irqrestore(lock,flags);
  
#line 1367 
  return;
}


#line 1370  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_118(spinlock_t *ldv_func_arg1)
{
  
#line 1374 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1376 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1377 
  return;
}


#line 1380  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_119(spinlock_t *lock, unsigned long flags)
{
  
#line 1384 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1386 
  spin_unlock_irqrestore(lock,flags);
  
#line 1387 
  return;
}


#line 1390  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static bool ldv_schedule_work_120(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1394 
  tmp = ldv_emg_schedule_work(work);
  
#line 1394 
  __retres = tmp != 0;
  
#line 1394 
  return __retres;
}


#line 1398  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_lock_irq_121(spinlock_t *lock)
{
  
#line 1402 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1404 
  spin_lock_irq(lock);
  
#line 1405 
  return;
}


#line 1408  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irq_122(spinlock_t *lock)
{
  
#line 1412 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1414 
  spin_unlock_irq(lock);
  
#line 1415 
  return;
}


#line 1418  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_123(spinlock_t *ldv_func_arg1)
{
  
#line 1422 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1424 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1425 
  return;
}


#line 1428  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_124(spinlock_t *lock, unsigned long flags)
{
  
#line 1432 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1434 
  spin_unlock_irqrestore(lock,flags);
  
#line 1435 
  return;
}


#line 1438  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_125(spinlock_t *ldv_func_arg1)
{
  
#line 1442 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1444 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1445 
  return;
}


#line 1448  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_126(spinlock_t *lock, unsigned long flags)
{
  
#line 1452 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1454 
  spin_unlock_irqrestore(lock,flags);
  
#line 1455 
  return;
}


#line 1458  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_127(spinlock_t *ldv_func_arg1)
{
  
#line 1462 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1464 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1465 
  return;
}


#line 1468  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_128(spinlock_t *lock, unsigned long flags)
{
  
#line 1472 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1474 
  spin_unlock_irqrestore(lock,flags);
  
#line 1475 
  return;
}


#line 1478  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_129(spinlock_t *ldv_func_arg1)
{
  
#line 1482 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1484 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1485 
  return;
}


#line 1488  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_130(spinlock_t *lock, unsigned long flags)
{
  
#line 1492 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1494 
  spin_unlock_irqrestore(lock,flags);
  
#line 1495 
  return;
}


#line 1498  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_131(spinlock_t *ldv_func_arg1)
{
  
#line 1502 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1504 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1505 
  return;
}


#line 1508  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_132(spinlock_t *lock, unsigned long flags)
{
  
#line 1512 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1514 
  spin_unlock_irqrestore(lock,flags);
  
#line 1515 
  return;
}


#line 1518  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_133(spinlock_t *ldv_func_arg1)
{
  
#line 1522 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1524 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1525 
  return;
}


#line 1528  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_134(spinlock_t *lock, unsigned long flags)
{
  
#line 1532 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1534 
  spin_unlock_irqrestore(lock,flags);
  
#line 1535 
  return;
}


#line 1538  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_135(spinlock_t *ldv_func_arg1)
{
  
#line 1542 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1544 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1545 
  return;
}


#line 1548  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_136(spinlock_t *lock, unsigned long flags)
{
  
#line 1552 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1554 
  spin_unlock_irqrestore(lock,flags);
  
#line 1555 
  return;
}


#line 1558  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_137(spinlock_t *ldv_func_arg1)
{
  
#line 1562 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  
#line 1564 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1565 
  return;
}


#line 1568  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_138(spinlock_t *lock, unsigned long flags)
{
  
#line 1572 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  
#line 1574 
  spin_unlock_irqrestore(lock,flags);
  
#line 1575 
  return;
}


#line 1578  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static int ldv_device_create_file_139(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2)
{
  int tmp;
  
#line 1582 
  tmp = ldv_emg_device_create_file(ldv_func_arg1,(struct device_attribute *)ldv_func_arg2);
  
#line 1582 
  return tmp;
}


#line 1586  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_mutex_lock_140(struct mutex *ldv_func_arg1)
{
  
#line 1590 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"niu_parent_lock");
  
#line 1591 
  return;
}


#line 1594  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_mutex_unlock_141(struct mutex *ldv_func_arg1)
{
  
#line 1598 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"niu_parent_lock");
  
#line 1599 
  return;
}


#line 1602  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_mutex_lock_142(struct mutex *ldv_func_arg1)
{
  
#line 1606 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"niu_parent_lock");
  
#line 1607 
  return;
}


#line 1610  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_mutex_unlock_143(struct mutex *ldv_func_arg1)
{
  
#line 1614 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"niu_parent_lock");
  
#line 1615 
  return;
}


#line 1618  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_144(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 1622 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1622 
  return tmp;
}


#line 1626  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static int ldv_register_netdev_145(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 1630 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 1630 
  return tmp;
}


#line 1634  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_free_netdev_146(struct net_device *ldv_func_arg1)
{
  
#line 1638 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1639 
  return;
}


#line 1642  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_unregister_netdev_147(struct net_device *ldv_func_arg1)
{
  
#line 1646 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1647 
  return;
}


#line 1650  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_free_netdev_148(struct net_device *ldv_func_arg1)
{
  
#line 1654 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1655 
  return;
}


#line 1658  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static bool ldv_flush_work_149(struct work_struct *ldv_func_arg1)
{
  bool __retres;
  bool tmp;
  
#line 1662 
  tmp = ldv_emg_flush_work(ldv_func_arg1);
  
#line 1662 
  __retres = tmp != 0;
  
#line 1662 
  return __retres;
}


#line 1666  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static int ldv_del_timer_sync_150(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1670 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1670 
  return tmp;
}


#line 1674  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_151(spinlock_t *ldv_func_arg1)
{
  
#line 1678 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1680 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1681 
  return;
}


#line 1684  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_152(spinlock_t *lock, unsigned long flags)
{
  
#line 1688 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1690 
  spin_unlock_irqrestore(lock,flags);
  
#line 1691 
  return;
}


#line 1694  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_153(spinlock_t *ldv_func_arg1)
{
  
#line 1698 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1700 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1701 
  return;
}


#line 1704  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_154(spinlock_t *lock, unsigned long flags)
{
  
#line 1708 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1710 
  spin_unlock_irqrestore(lock,flags);
  
#line 1711 
  return;
}


#line 1714  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv___ldv_spin_lock_155(spinlock_t *ldv_func_arg1)
{
  
#line 1718 
  ldv_spin_model_lock((char *)"lock_of_niu");
  
#line 1720 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1721 
  return;
}


#line 1724  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_spin_unlock_irqrestore_156(spinlock_t *lock, unsigned long flags)
{
  
#line 1728 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  
#line 1730 
  spin_unlock_irqrestore(lock,flags);
  
#line 1731 
  return;
}


#line 1734  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static int ldv___pci_register_driver_157(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 1738 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 1738 
  return tmp;
}


#line 1742  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/weaver/.tmp_niu.c.aux"
static void ldv_pci_unregister_driver_158(struct pci_driver *ldv_func_arg1)
{
  
#line 1746 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 1747 
  return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
int main(void);


#line 95 
void *ldv_devattr_instance_18(void *arg0);


#line 97 
void ldv_dispatch_register_9_3(struct pci_driver *arg0);


#line 100 
void ldv_dispatch_register_11_3(struct device *arg0, struct device_attribute *arg1);


#line 102 
void *ldv_devattr_instance_19(void *arg0);


#line 103 
void ldv_dispatch_register_8_4(struct net_device *arg0);


#line 104 
void ldv_dispatch_irq_deregister_5_1(int arg0);


#line 106 
void ldv_dispatch_deregister_7_1(struct pci_driver *arg0);


#line 107 
void *ldv_timer_scenario_21(void *arg0);


#line 108 
void *ldv_pci_scenario_20(void *arg0);


#line 109 
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 111 
void ldv_dispatch_deregister_4_1(struct net_device *arg0);


#line 113 
void *ldv_devattr_instance_15(void *arg0);


#line 114 
void *ldv_initialization_1(void *arg0);


#line 117 
void ldv_dispatch_instance_deregister_12_1(struct timer_list *arg0);


#line 119 
void *ldv_random_allocationless_scenario_22(void *arg0);


#line 120 
void *ldv_devattr_instance_17(void *arg0);


#line 122 
void *ldv_interrupt_scenario_14(void *arg0);


#line 123 
void *ldv_devattr_instance_16(void *arg0);


#line 126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 128  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 131  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_22;

#line 132  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 133  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_20;

#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_21;

#line 138  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_12_timer_list;
  
#line 144 
  ldv_12_timer_list = arg0;
  
#line 148 
  ldv_dispatch_instance_deregister_12_1(ldv_12_timer_list);
  
#line 149 
  ;
  
#line 149 
  __retres = 0;
  
#line 149 
  return __retres;
}


#line 157  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 160 
  ldv_initialize();
  
#line 163 
  ldv_initialization_1((void *)0);
  
#line 165 
  __retres = 0;
  
#line 165 
  return __retres;
}


#line 170  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_devattr_instance_18(void *arg0)
{
  void *__retres;
  struct device_attribute *ldv_18_devattr;
  char *ldv_18_ldv_param_2_4;
  unsigned long ldv_18_ldv_param_3_3;
  char *ldv_18_ldv_param_2_2;
  struct device *ldv_18_device;
  int tmp;
  
#line 179 
  struct ldv_struct_devattr_instance_15 *data = (struct ldv_struct_devattr_instance_15 *)arg0;
  
#line 184 
  if (data != (struct ldv_struct_devattr_instance_15 *)0) {
    
#line 185 
    ldv_18_device = data->arg0;
    
#line 186 
    ldv_18_devattr = data->arg1;
    
#line 187 
    ldv_free((void *)data);
  }
  else ;
  
#line 195 
  goto ldv_main_18;
  
#line 197 
  __retres = (void *)0;
  
#line 197 
  goto return_label;
  ldv_main_18: 
#line 200 
  ;
  
#line 203 
  tmp = ldv_undef_int();
  
#line 203 
  switch (tmp) {
    case 1: 
#line 204 
    ;
    
#line 206 
    ldv_18_ldv_param_2_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 211 
    ldv_emg_wrapper_show_rxchan_per_port_2(ldv_18_device,ldv_18_devattr,ldv_18_ldv_param_2_4);
    
#line 215 
    ldv_free((void *)ldv_18_ldv_param_2_4);
    
#line 222 
    goto ldv_main_18;
    case 2: 
#line 225 
    ;
    
#line 227 
    ldv_18_ldv_param_2_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 231 
    if (ldv_18_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0) 
      
#line 233 
      (*(ldv_18_devattr->store))(ldv_18_device,ldv_18_devattr,(char const *)ldv_18_ldv_param_2_2,ldv_18_ldv_param_3_3); else ;
    
#line 238 
    ldv_free((void *)ldv_18_ldv_param_2_2);
    
#line 245 
    goto ldv_main_18;
    case 3: 
#line 248 
    ;
    
#line 254 
    __retres = (void *)0;
    
#line 254 
    goto return_label;
    default: 
#line 257 
    ;
    
#line 257 
    __VERIFIER_assume(0);
  }
  
#line 260 
  __retres = (void *)0;
  return_label: 
#line 260 
                return __retres;
}


#line 265  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 268 
  struct pci_driver *ldv_9_pci_driver = ldv_emg_alias_niu_pci_driver_2;
  
#line 272 
  tmp_0 = ldv_undef_int();
  
#line 272 
  if (tmp_0 != 0) {
    
#line 274 
    ldv_9_pci_driver = arg0;
    
#line 278 
    ldv_dispatch_register_9_3(ldv_9_pci_driver);
    
#line 282 
    __retres = 0;
    
#line 282 
    goto return_label;
  }
  else {
    int tmp;
    
#line 289 
    tmp = ldv_undef_int_negative();
    
#line 289 
    __retres = tmp;
    
#line 289 
    goto return_label;
  }
  return_label: 
#line 272 
                return __retres;
}


#line 299  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_9_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_20 *cf_arg_20;
  int tmp;
  
#line 302 
  tmp = ldv_undef_int();
  
#line 302 
  switch (tmp) {
    case 0: 
#line 303 
    ;
    
#line 304 
    cf_arg_20 = (struct ldv_struct_pci_scenario_20 *)ldv_xmalloc(16UL);
    
#line 305 
    cf_arg_20->arg0 = arg0;
    
#line 306 
    ret = pthread_create(& ldv_thread_20,(pthread_attr_t const *)0,& ldv_pci_scenario_20,(void *)cf_arg_20);
    
#line 307 
    __VERIFIER_assume(ret == 0);
    
#line 308 
    goto ldv_44957;
    default: 
#line 310 
    ;
    
#line 310 
    __VERIFIER_assume(0);
  }
  ldv_44957: 
#line 311 
  ;
  
#line 312 
  return;
}


#line 316  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_work(struct work_struct *arg0)
{
  _Bool __retres;
  struct work_struct *ldv_10_work_struct;
  int tmp;
  
#line 323 
  tmp = ldv_undef_int();
  
#line 323 
  if (tmp != 0) {
    
#line 325 
    ldv_10_work_struct = arg0;
    
#line 329 
    if (ldv_10_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 331 
      (*(ldv_10_work_struct->func))(ldv_10_work_struct); else ;
    
#line 336 
    __retres = (_Bool)1;
    
#line 336 
    goto return_label;
  }
  else {
    
#line 343 
    __retres = (_Bool)0;
    
#line 343 
    goto return_label;
  }
  return_label: 
#line 323 
                return __retres;
}


#line 353  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_3_netdev;
  int tmp_0;
  
#line 360 
  tmp_0 = ldv_undef_int();
  
#line 360 
  if (tmp_0 != 0) {
    
#line 362 
    ldv_3_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 366 
    __retres = ldv_3_netdev;
    
#line 366 
    goto return_label;
  }
  else {
    
#line 373 
    __retres = (struct net_device *)0;
    
#line 373 
    goto return_label;
  }
  return_label: 
#line 360 
                return __retres;
}


#line 383  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_11_3(struct device *arg0, struct device_attribute *arg1)
{
  int ret;
  struct ldv_struct_devattr_instance_15 *cf_arg_16;
  struct ldv_struct_devattr_instance_15 *cf_arg_17;
  struct ldv_struct_devattr_instance_15 *cf_arg_18;
  struct ldv_struct_devattr_instance_15 *cf_arg_19;
  struct ldv_struct_devattr_instance_15 *cf_arg_15;
  int tmp;
  
#line 390 
  tmp = ldv_undef_int();
  
#line 390 
  switch (tmp) {
    case 0: 
#line 391 
    ;
    
#line 392 
    cf_arg_16 = (struct ldv_struct_devattr_instance_15 *)ldv_xmalloc(24UL);
    
#line 393 
    cf_arg_16->arg0 = arg0;
    
#line 394 
    cf_arg_16->arg1 = arg1;
    
#line 395 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_devattr_instance_16,(void *)cf_arg_16);
    
#line 396 
    __VERIFIER_assume(ret == 0);
    
#line 397 
    goto ldv_44980;
    case 1: 
#line 399 
    ;
    
#line 400 
    cf_arg_17 = (struct ldv_struct_devattr_instance_15 *)ldv_xmalloc(24UL);
    
#line 401 
    cf_arg_17->arg0 = arg0;
    
#line 402 
    cf_arg_17->arg1 = arg1;
    
#line 403 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_devattr_instance_17,(void *)cf_arg_17);
    
#line 404 
    __VERIFIER_assume(ret == 0);
    
#line 405 
    goto ldv_44980;
    case 2: 
#line 407 
    ;
    
#line 408 
    cf_arg_18 = (struct ldv_struct_devattr_instance_15 *)ldv_xmalloc(24UL);
    
#line 409 
    cf_arg_18->arg0 = arg0;
    
#line 410 
    cf_arg_18->arg1 = arg1;
    
#line 411 
    ret = pthread_create(& ldv_thread_18,(pthread_attr_t const *)0,& ldv_devattr_instance_18,(void *)cf_arg_18);
    
#line 412 
    __VERIFIER_assume(ret == 0);
    
#line 413 
    goto ldv_44980;
    case 3: 
#line 415 
    ;
    
#line 416 
    cf_arg_19 = (struct ldv_struct_devattr_instance_15 *)ldv_xmalloc(24UL);
    
#line 417 
    cf_arg_19->arg0 = arg0;
    
#line 418 
    cf_arg_19->arg1 = arg1;
    
#line 419 
    ret = pthread_create(& ldv_thread_19,(pthread_attr_t const *)0,& ldv_devattr_instance_19,(void *)cf_arg_19);
    
#line 420 
    __VERIFIER_assume(ret == 0);
    
#line 421 
    goto ldv_44980;
    case 4: 
#line 423 
    ;
    
#line 424 
    cf_arg_15 = (struct ldv_struct_devattr_instance_15 *)ldv_xmalloc(24UL);
    
#line 425 
    cf_arg_15->arg0 = arg0;
    
#line 426 
    cf_arg_15->arg1 = arg1;
    
#line 427 
    ret = pthread_create(& ldv_thread_15,(pthread_attr_t const *)0,& ldv_devattr_instance_15,(void *)cf_arg_15);
    
#line 428 
    __VERIFIER_assume(ret == 0);
    
#line 429 
    goto ldv_44980;
    default: 
#line 431 
    ;
    
#line 431 
    __VERIFIER_assume(0);
  }
  ldv_44980: 
#line 432 
  ;
  
#line 433 
  return;
}


#line 437  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_device_create_file(struct device *arg0, struct device_attribute *arg1)
{
  int __retres;
  struct device_attribute *ldv_11_devattr;
  struct device *ldv_11_device;
  int tmp_0;
  
#line 445 
  tmp_0 = ldv_undef_int();
  
#line 445 
  if (tmp_0 != 0) {
    
#line 447 
    ldv_11_device = arg0;
    
#line 448 
    ldv_11_devattr = arg1;
    
#line 452 
    ldv_dispatch_register_11_3(ldv_11_device,ldv_11_devattr);
    
#line 456 
    __retres = 0;
    
#line 456 
    goto return_label;
  }
  else {
    int tmp;
    
#line 463 
    tmp = ldv_undef_int_negative();
    
#line 463 
    __retres = tmp;
    
#line 463 
    goto return_label;
  }
  return_label: 
#line 445 
                return __retres;
}


#line 473  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_devattr_instance_19(void *arg0)
{
  void *__retres;
  struct device_attribute *ldv_19_devattr;
  char *ldv_19_ldv_param_2_4;
  unsigned long ldv_19_ldv_param_3_3;
  char *ldv_19_ldv_param_2_2;
  struct device *ldv_19_device;
  int tmp;
  
#line 482 
  struct ldv_struct_devattr_instance_15 *data = (struct ldv_struct_devattr_instance_15 *)arg0;
  
#line 487 
  if (data != (struct ldv_struct_devattr_instance_15 *)0) {
    
#line 488 
    ldv_19_device = data->arg0;
    
#line 489 
    ldv_19_devattr = data->arg1;
    
#line 490 
    ldv_free((void *)data);
  }
  else ;
  
#line 498 
  goto ldv_main_19;
  
#line 500 
  __retres = (void *)0;
  
#line 500 
  goto return_label;
  ldv_main_19: 
#line 503 
  ;
  
#line 506 
  tmp = ldv_undef_int();
  
#line 506 
  switch (tmp) {
    case 1: 
#line 507 
    ;
    
#line 509 
    ldv_19_ldv_param_2_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 514 
    ldv_emg_wrapper_show_plat_type_2(ldv_19_device,ldv_19_devattr,ldv_19_ldv_param_2_4);
    
#line 518 
    ldv_free((void *)ldv_19_ldv_param_2_4);
    
#line 525 
    goto ldv_main_19;
    case 2: 
#line 528 
    ;
    
#line 530 
    ldv_19_ldv_param_2_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 534 
    if (ldv_19_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0) 
      
#line 536 
      (*(ldv_19_devattr->store))(ldv_19_device,ldv_19_devattr,(char const *)ldv_19_ldv_param_2_2,ldv_19_ldv_param_3_3); else ;
    
#line 541 
    ldv_free((void *)ldv_19_ldv_param_2_2);
    
#line 548 
    goto ldv_main_19;
    case 3: 
#line 551 
    ;
    
#line 557 
    __retres = (void *)0;
    
#line 557 
    goto return_label;
    default: 
#line 560 
    ;
    
#line 560 
    __VERIFIER_assume(0);
  }
  
#line 563 
  __retres = (void *)0;
  return_label: 
#line 563 
                return __retres;
}


#line 568  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_8_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_22 *cf_arg_22;
  int tmp;
  
#line 571 
  tmp = ldv_undef_int();
  
#line 571 
  switch (tmp) {
    case 0: 
#line 572 
    ;
    
#line 573 
    cf_arg_22 = (struct ldv_struct_random_allocationless_scenario_22 *)ldv_xmalloc(16UL);
    
#line 574 
    cf_arg_22->arg0 = arg0;
    
#line 575 
    ret = pthread_create(& ldv_thread_22,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_22,(void *)cf_arg_22);
    
#line 576 
    __VERIFIER_assume(ret == 0);
    
#line 577 
    goto ldv_45012;
    default: 
#line 579 
    ;
    
#line 579 
    __VERIFIER_assume(0);
  }
  ldv_45012: 
#line 580 
  ;
  
#line 581 
  return;
}


#line 585  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_5_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_5 *cf_arg_14;
  int tmp;
  
#line 588 
  tmp = ldv_undef_int();
  
#line 588 
  switch (tmp) {
    case 0: 
#line 589 
    ;
    
#line 590 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 591 
    __VERIFIER_assume(ret == 0);
    
#line 592 
    goto ldv_45020;
    default: 
#line 594 
    ;
    
#line 594 
    __VERIFIER_assume(0);
  }
  ldv_45020: 
#line 595 
  ;
  
#line 596 
  return;
}


#line 600  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_13_line;
  void *ldv_13_data;
  enum irqreturn (*ldv_13_thread)(int , void *);
  int tmp_0;
  
#line 605 
  enum irqreturn (*ldv_13_callback)(int , void *) = & ldv_emg_wrapper_niu_interrupt_2;
  
#line 610 
  tmp_0 = ldv_undef_int();
  
#line 610 
  if (tmp_0 != 0) {
    
#line 612 
    ldv_13_line = (int)arg0;
    
#line 613 
    ldv_13_callback = arg1;
    
#line 614 
    ldv_13_thread = (enum irqreturn (*)(int , void *))0;
    
#line 615 
    ldv_13_data = arg4;
    
#line 619 
    ldv_dispatch_irq_register_13_3(ldv_13_line,ldv_13_callback,ldv_13_thread,ldv_13_data);
    
#line 623 
    __retres = 0;
    
#line 623 
    goto return_label;
  }
  else {
    int tmp;
    
#line 630 
    tmp = ldv_undef_int_negative();
    
#line 630 
    __retres = tmp;
    
#line 630 
    goto return_label;
  }
  return_label: 
#line 610 
                return __retres;
}


#line 640  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_7_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_20 *cf_arg_20;
  int tmp;
  
#line 643 
  tmp = ldv_undef_int();
  
#line 643 
  switch (tmp) {
    case 0: 
#line 644 
    ;
    
#line 645 
    ret = pthread_join(ldv_thread_20,(void **)0);
    
#line 646 
    __VERIFIER_assume(ret == 0);
    
#line 647 
    goto ldv_45045;
    default: 
#line 649 
    ;
    
#line 649 
    __VERIFIER_assume(0);
  }
  ldv_45045: 
#line 650 
  ;
  
#line 651 
  return;
}


#line 655  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_21(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_21_container;
  
#line 665 
  if (ldv_21_container->function != (void (*)(unsigned long ))0) {
    
#line 667 
    ldv_switch_to_interrupt_context();
    
#line 669 
    (*(ldv_21_container->function))(ldv_21_container->data);
    
#line 671 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 680 
  __retres = (void *)0;
  
#line 680 
  goto return_label;
  
#line 682 
  __retres = (void *)0;
  return_label: 
#line 682 
                return __retres;
}


#line 687  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_20(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_20_resource_1;
  struct pci_device_id *ldv_20_ldv_param_1_2;
  struct pm_message ldv_20_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 692 
  struct pci_driver *ldv_20_container = ldv_emg_alias_niu_pci_driver_2;
  
#line 693 
  int ldv_20_ret = ldv_undef_int();
  
#line 696 
  struct ldv_struct_pci_scenario_20 *data = (struct ldv_struct_pci_scenario_20 *)arg0;
  
#line 700 
  ldv_20_ret = ldv_undef_int();
  
#line 703 
  if (data != (struct ldv_struct_pci_scenario_20 *)0) {
    
#line 704 
    ldv_20_container = data->arg0;
    
#line 705 
    ldv_free((void *)data);
  }
  else ;
  
#line 716 
  goto ldv_main_20;
  
#line 718 
  __retres = (void *)0;
  
#line 718 
  goto return_label;
  ldv_main_20: 
#line 721 
  ;
  
#line 724 
  tmp_2 = ldv_undef_int();
  
#line 724 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 726 
    ldv_20_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 731 
    ldv_pre_probe();
    
#line 733 
    ldv_20_ret = ldv_emg_wrapper_niu_pci_init_one_2(ldv_20_resource_1,ldv_20_ldv_param_1_2);
    
#line 735 
    ldv_20_ret = ldv_post_probe(ldv_20_ret);
    
#line 739 
    ldv_free((void *)ldv_20_ldv_param_1_2);
    
#line 742 
    tmp_1 = ldv_undef_int();
    
#line 742 
    if (tmp_1 != 0) {
      
#line 744 
      __VERIFIER_assume(ldv_20_ret == 0);
      
#line 751 
      goto ldv_call_20;
    }
    else {
      
#line 755 
      __VERIFIER_assume(ldv_20_ret != 0);
      
#line 762 
      goto ldv_main_20;
    }
  }
  else {
    
#line 774 
    __retres = (void *)0;
    
#line 774 
    goto return_label;
  }
  
#line 777 
  __retres = (void *)0;
  
#line 777 
  goto return_label;
  ldv_call_20: 
#line 780 
  ;
  
#line 783 
  tmp_3 = ldv_undef_int();
  
#line 783 
  switch (tmp_3) {
    case 1: 
#line 784 
    ;
    
#line 793 
    goto ldv_call_20;
    case 2: 
#line 796 
    ;
    
#line 799 
    ldv_20_ret = ldv_emg_wrapper_niu_suspend_3(ldv_20_resource_1,ldv_20_resource_0);
    
#line 801 
    ldv_20_ret = ldv_filter_err_code(ldv_20_ret);
    
#line 805 
    if (ldv_20_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 807 
      ldv_20_ret = (*(ldv_20_container->suspend_late))(ldv_20_resource_1,ldv_20_resource_0);
      
#line 809 
      ldv_20_ret = ldv_filter_err_code(ldv_20_ret);
    }
    else 
#line 811 
         ldv_20_ret = ldv_undef_int();
    
#line 816 
    if (ldv_20_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 818 
      (*(ldv_20_container->resume_early))(ldv_20_resource_1); else ;
    
#line 824 
    ldv_emg_wrapper_niu_resume_5(ldv_20_resource_1);
    
#line 831 
    goto ldv_call_20;
    case 3: 
#line 834 
    ;
    
#line 836 
    if (ldv_20_container->shutdown != (void (*)(struct pci_dev *))0) 
      
#line 838 
      (*(ldv_20_container->shutdown))(ldv_20_resource_1); else ;
    
#line 844 
    ldv_emg_wrapper_niu_pci_remove_one_4(ldv_20_resource_1);
    
#line 851 
    goto ldv_main_20;
    default: 
#line 854 
    ;
    
#line 854 
    __VERIFIER_assume(0);
  }
  
#line 857 
  __retres = (void *)0;
  return_label: 
#line 857 
                return __retres;
}


#line 862  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_14;
  int tmp;
  
#line 865 
  tmp = ldv_undef_int();
  
#line 865 
  switch (tmp) {
    case 0: 
#line 866 
    ;
    
#line 867 
    cf_arg_14 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 868 
    cf_arg_14->arg0 = arg0;
    
#line 869 
    cf_arg_14->arg1 = arg1;
    
#line 870 
    cf_arg_14->arg2 = arg2;
    
#line 871 
    cf_arg_14->arg3 = arg3;
    
#line 872 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_interrupt_scenario_14,(void *)cf_arg_14);
    
#line 873 
    __VERIFIER_assume(ret == 0);
    
#line 874 
    goto ldv_45079;
    default: 
#line 876 
    ;
    
#line 876 
    __VERIFIER_assume(0);
  }
  ldv_45079: 
#line 877 
  ;
  
#line 878 
  return;
}


#line 882  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_8_netdev;
  int tmp_3;
  
#line 886 
  int ldv_8_ret = ldv_undef_int();
  
#line 889 
  ldv_8_ret = ldv_undef_int();
  
#line 892 
  tmp_3 = ldv_undef_int();
  
#line 892 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 894 
    ldv_8_netdev = arg0;
    
#line 899 
    ldv_8_ret = ldv_emg_wrapper_niu_open_2(ldv_8_netdev);
    
#line 902 
    tmp_1 = ldv_undef_int();
    
#line 902 
    if (tmp_1 != 0) {
      
#line 904 
      __VERIFIER_assume(ldv_8_ret == 0);
      
#line 908 
      ldv_dispatch_register_8_4(ldv_8_netdev);
      
#line 912 
      __retres = 0;
      
#line 912 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 919 
      __VERIFIER_assume(ldv_8_ret != 0);
      
#line 920 
      ldv_failed_register_netdev();
      
#line 921 
      tmp_0 = ldv_undef_int_negative();
      
#line 921 
      __retres = tmp_0;
      
#line 921 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 929 
    ldv_failed_register_netdev();
    
#line 930 
    tmp_2 = ldv_undef_int_negative();
    
#line 930 
    __retres = tmp_2;
    
#line 930 
    goto return_label;
  }
  return_label: 
#line 892 
                return __retres;
}


#line 940  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_4_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_22 *cf_arg_22;
  int tmp;
  
#line 943 
  tmp = ldv_undef_int();
  
#line 943 
  switch (tmp) {
    case 0: 
#line 944 
    ;
    
#line 945 
    ret = pthread_join(ldv_thread_22,(void **)0);
    
#line 946 
    __VERIFIER_assume(ret == 0);
    
#line 947 
    goto ldv_45092;
    default: 
#line 949 
    ;
    
#line 949 
    __VERIFIER_assume(0);
  }
  ldv_45092: 
#line 950 
  ;
  
#line 951 
  return;
}


#line 955  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 958 
  struct pci_driver *ldv_7_pci_driver = ldv_emg_alias_niu_pci_driver_2;
  
#line 961 
  ldv_7_pci_driver = arg0;
  
#line 965 
  ldv_dispatch_deregister_7_1(ldv_7_pci_driver);
  
#line 969 
  goto return_label;
  return_label: 
#line 971 
                return;
}


#line 976  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_devattr_instance_15(void *arg0)
{
  void *__retres;
  struct device_attribute *ldv_15_devattr;
  char *ldv_15_ldv_param_2_4;
  unsigned long ldv_15_ldv_param_3_3;
  char *ldv_15_ldv_param_2_2;
  struct device *ldv_15_device;
  int tmp;
  
#line 985 
  struct ldv_struct_devattr_instance_15 *data = (struct ldv_struct_devattr_instance_15 *)arg0;
  
#line 990 
  if (data != (struct ldv_struct_devattr_instance_15 *)0) {
    
#line 991 
    ldv_15_device = data->arg0;
    
#line 992 
    ldv_15_devattr = data->arg1;
    
#line 993 
    ldv_free((void *)data);
  }
  else ;
  
#line 1001 
  goto ldv_main_15;
  
#line 1003 
  __retres = (void *)0;
  
#line 1003 
  goto return_label;
  ldv_main_15: 
#line 1006 
  ;
  
#line 1009 
  tmp = ldv_undef_int();
  
#line 1009 
  switch (tmp) {
    case 1: 
#line 1010 
    ;
    
#line 1012 
    ldv_15_ldv_param_2_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1017 
    ldv_emg_wrapper_show_txchan_per_port_2(ldv_15_device,ldv_15_devattr,ldv_15_ldv_param_2_4);
    
#line 1021 
    ldv_free((void *)ldv_15_ldv_param_2_4);
    
#line 1028 
    goto ldv_main_15;
    case 2: 
#line 1031 
    ;
    
#line 1033 
    ldv_15_ldv_param_2_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1037 
    if (ldv_15_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0) 
      
#line 1039 
      (*(ldv_15_devattr->store))(ldv_15_device,ldv_15_devattr,(char const *)ldv_15_ldv_param_2_2,ldv_15_ldv_param_3_3); else ;
    
#line 1044 
    ldv_free((void *)ldv_15_ldv_param_2_2);
    
#line 1051 
    goto ldv_main_15;
    case 3: 
#line 1054 
    ;
    
#line 1060 
    __retres = (void *)0;
    
#line 1060 
    goto return_label;
    default: 
#line 1063 
    ;
    
#line 1063 
    __VERIFIER_assume(0);
  }
  
#line 1066 
  __retres = (void *)0;
  return_label: 
#line 1066 
                return __retres;
}


#line 1071  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 1078 
  ldv_1_ret = ldv_emg_niu_init();
  
#line 1079 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 1082 
  tmp = ldv_undef_int();
  
#line 1082 
  if (tmp != 0) {
    
#line 1084 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 1088 
    __retres = (void *)0;
    
#line 1088 
    goto return_label;
  }
  else {
    
#line 1092 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 1097 
    ldv_emg_niu_exit();
    
#line 1101 
    __retres = (void *)0;
    
#line 1101 
    goto return_label;
  }
  
#line 1104 
  __retres = (void *)0;
  return_label: 
#line 1104 
                return __retres;
}


#line 1109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_4_netdev;
  
#line 1115 
  ldv_4_netdev = arg0;
  
#line 1120 
  ldv_emg_wrapper_niu_close_2(ldv_4_netdev);
  
#line 1124 
  ldv_dispatch_deregister_4_1(ldv_4_netdev);
  
#line 1128 
  goto return_label;
  return_label: 
#line 1130 
                return;
}


#line 1135  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_5_line;
  
#line 1141 
  ldv_5_line = (int)arg0;
  
#line 1145 
  ldv_dispatch_irq_deregister_5_1(ldv_5_line);
  
#line 1149 
  goto return_label;
  return_label: 
#line 1151 
                return;
}


#line 1156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_12_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_del_timer_sync_12 *cf_arg_21;
  int tmp;
  
#line 1159 
  tmp = ldv_undef_int();
  
#line 1159 
  switch (tmp) {
    case 0: 
#line 1160 
    ;
    
#line 1161 
    ret = pthread_join(ldv_thread_21,(void **)0);
    
#line 1162 
    __VERIFIER_assume(ret == 0);
    
#line 1163 
    goto ldv_45131;
    default: 
#line 1165 
    ;
    
#line 1165 
    __VERIFIER_assume(0);
  }
  ldv_45131: 
#line 1166 
  ;
  
#line 1167 
  return;
}


#line 1171  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_flush_work(struct work_struct *arg0)
{
  _Bool __retres;
  struct work_struct *ldv_6_work_struct;
  int tmp;
  
#line 1178 
  tmp = ldv_undef_int();
  
#line 1178 
  if (tmp != 0) {
    
#line 1180 
    ldv_6_work_struct = arg0;
    
#line 1184 
    if (ldv_6_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 1186 
      (*(ldv_6_work_struct->func))(ldv_6_work_struct); else ;
    
#line 1191 
    __retres = (_Bool)1;
    
#line 1191 
    goto return_label;
  }
  else {
    
#line 1198 
    __retres = (_Bool)0;
    
#line 1198 
    goto return_label;
  }
  return_label: 
#line 1178 
                return __retres;
}


#line 1208  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_22(void *arg0)
{
  void *__retres;
  struct ethtool_cmd *ldv_22_ldv_param_1_3;
  struct ethtool_rxnfc *ldv_22_ldv_param_1_10;
  unsigned char *ldv_22_ldv_param_2_15;
  struct ethtool_stats *ldv_22_ldv_param_1_8;
  struct ethtool_cmd *ldv_22_ldv_param_1_2;
  enum ethtool_phys_id_state *ldv_22_ldv_param_1_4;
  unsigned int ldv_22_ldv_param_1_5;
  struct ethtool_drvinfo *ldv_22_ldv_param_1_11;
  struct ethtool_eeprom *ldv_22_ldv_param_1_14;
  unsigned int *ldv_22_ldv_param_2_20;
  void *ldv_22_ldv_param_1_13;
  int ldv_22_ldv_param_1_16;
  unsigned char *ldv_22_ldv_param_2_22;
  unsigned int ldv_22_ldv_param_1_21;
  struct rtnl_link_stats64 *ldv_22_ldv_param_1_6;
  struct sk_buff *ldv_22_ldv_param_0_12;
  struct ifreq *ldv_22_ldv_param_1_17;
  struct ethtool_rxnfc *ldv_22_ldv_param_1_19;
  struct net_device *ldv_22_container;
  unsigned long long *ldv_22_ldv_param_2_9;
  int ldv_22_ldv_param_2_18;
  int ldv_22_ldv_param_1_7;
  int tmp_15;
  
#line 1234 
  struct ldv_struct_random_allocationless_scenario_22 *data = (struct ldv_struct_random_allocationless_scenario_22 *)arg0;
  
#line 1239 
  if (data != (struct ldv_struct_random_allocationless_scenario_22 *)0) {
    
#line 1240 
    ldv_22_container = data->arg0;
    
#line 1241 
    ldv_free((void *)data);
  }
  else ;
  
#line 1249 
  goto ldv_call_22;
  
#line 1251 
  __retres = (void *)0;
  
#line 1251 
  goto return_label;
  ldv_call_22: 
#line 1254 
  ;
  
#line 1257 
  tmp_15 = ldv_undef_int();
  
#line 1257 
  if (tmp_15 != 0) {
    int tmp_0;
    
#line 1259 
    ldv_22_ldv_param_1_2 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
    
#line 1262 
    tmp_0 = ldv_undef_int();
    
#line 1262 
    switch (tmp_0) {
      case 1: 
#line 1263 
      ;
      
#line 1266 
      ldv_emg_wrapper_niu_get_settings_16(ldv_22_container,ldv_22_ldv_param_1_2);
      
#line 1269 
      goto ldv_45165;
      case 2: 
#line 1271 
      ;
      
#line 1274 
      ldv_emg_wrapper_niu_set_rx_mode_22(ldv_22_container);
      
#line 1277 
      goto ldv_45165;
      case 3: 
#line 1279 
      ;
      
#line 1282 
      ldv_emg_wrapper_niu_nway_reset_23(ldv_22_container);
      
#line 1285 
      goto ldv_45165;
      case 4: 
#line 1287 
      ;
      
#line 1290 
      ldv_emg_wrapper_niu_get_eeprom_len_24(ldv_22_container);
      
#line 1293 
      goto ldv_45165;
      case 5: 
#line 1295 
      ;
      
#line 1297 
      ldv_22_ldv_param_2_22 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1302 
      ldv_emg_wrapper_niu_get_strings_21(ldv_22_container,ldv_22_ldv_param_1_21,ldv_22_ldv_param_2_22);
      
#line 1306 
      ldv_free((void *)ldv_22_ldv_param_2_22);
      
#line 1309 
      goto ldv_45165;
      case 6: 
#line 1311 
      ;
      
#line 1313 
      ldv_22_ldv_param_2_20 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 1314 
      ldv_22_ldv_param_1_19 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 1319 
      ldv_emg_wrapper_niu_get_nfc_20(ldv_22_container,ldv_22_ldv_param_1_19,ldv_22_ldv_param_2_20);
      
#line 1323 
      ldv_free((void *)ldv_22_ldv_param_2_20);
      
#line 1324 
      ldv_free((void *)ldv_22_ldv_param_1_19);
      
#line 1327 
      goto ldv_45165;
      case 7: 
#line 1329 
      ;
      
#line 1332 
      ldv_emg_wrapper_niu_tx_timeout_17(ldv_22_container);
      
#line 1335 
      goto ldv_45165;
      case 8: 
#line 1337 
      ;
      
#line 1339 
      ldv_22_ldv_param_1_17 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
      
#line 1344 
      ldv_emg_wrapper_niu_ioctl_18(ldv_22_container,ldv_22_ldv_param_1_17,ldv_22_ldv_param_2_18);
      
#line 1348 
      ldv_free((void *)ldv_22_ldv_param_1_17);
      
#line 1351 
      goto ldv_45165;
      case 9: 
#line 1353 
      ;
      
#line 1359 
      ldv_emg_wrapper_niu_get_sset_count_19(ldv_22_container,ldv_22_ldv_param_1_16);
      
#line 1365 
      goto ldv_45165;
      case 10: 
#line 1367 
      ;
      
#line 1369 
      ldv_22_ldv_param_2_15 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1370 
      ldv_22_ldv_param_1_14 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1375 
      ldv_emg_wrapper_niu_get_eeprom_2(ldv_22_container,ldv_22_ldv_param_1_14,ldv_22_ldv_param_2_15);
      
#line 1379 
      ldv_free((void *)ldv_22_ldv_param_2_15);
      
#line 1380 
      ldv_free((void *)ldv_22_ldv_param_1_14);
      
#line 1383 
      goto ldv_45165;
      case 11: 
#line 1385 
      ;
      
#line 1387 
      ldv_22_ldv_param_1_13 = ldv_xmalloc_unknown_size(0UL);
      
#line 1392 
      ldv_emg_wrapper_niu_set_mac_addr_15(ldv_22_container,ldv_22_ldv_param_1_13);
      
#line 1396 
      ldv_free(ldv_22_ldv_param_1_13);
      
#line 1399 
      goto ldv_45165;
      case 12: 
#line 1401 
      ;
      
#line 1403 
      ldv_22_ldv_param_0_12 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1408 
      ldv_emg_wrapper_niu_start_xmit_14(ldv_22_ldv_param_0_12,ldv_22_container);
      
#line 1412 
      ldv_free((void *)ldv_22_ldv_param_0_12);
      
#line 1415 
      goto ldv_45165;
      case 13: 
#line 1417 
      ;
      
#line 1420 
      ldv_emg_wrapper_niu_get_msglevel_13(ldv_22_container);
      
#line 1423 
      goto ldv_45165;
      case 14: 
#line 1425 
      ;
      
#line 1427 
      ldv_22_ldv_param_1_11 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1432 
      ldv_emg_wrapper_niu_get_drvinfo_12(ldv_22_container,ldv_22_ldv_param_1_11);
      
#line 1436 
      ldv_free((void *)ldv_22_ldv_param_1_11);
      
#line 1439 
      goto ldv_45165;
      case 15: 
#line 1441 
      ;
      
#line 1443 
      ldv_22_ldv_param_1_10 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 1448 
      ldv_emg_wrapper_niu_set_nfc_11(ldv_22_container,ldv_22_ldv_param_1_10);
      
#line 1452 
      ldv_free((void *)ldv_22_ldv_param_1_10);
      
#line 1455 
      goto ldv_45165;
      case 16: 
#line 1457 
      ;
      
#line 1460 
      (*ldv_emg_alias_ethtool_op_get_link_10)(ldv_22_container);
      
#line 1463 
      goto ldv_45165;
      case 17: 
#line 1465 
      ;
      
#line 1468 
      (*ldv_emg_alias_eth_validate_addr_7)(ldv_22_container);
      
#line 1471 
      goto ldv_45165;
      case 18: 
#line 1473 
      ;
      
#line 1475 
      ldv_22_ldv_param_2_9 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1476 
      ldv_22_ldv_param_1_8 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 1481 
      ldv_emg_wrapper_niu_get_ethtool_stats_8(ldv_22_container,ldv_22_ldv_param_1_8,ldv_22_ldv_param_2_9);
      
#line 1485 
      ldv_free((void *)ldv_22_ldv_param_2_9);
      
#line 1486 
      ldv_free((void *)ldv_22_ldv_param_1_8);
      
#line 1489 
      goto ldv_45165;
      case 19: 
#line 1491 
      ;
      
#line 1497 
      ldv_emg_wrapper_niu_change_mtu_9(ldv_22_container,ldv_22_ldv_param_1_7);
      
#line 1503 
      goto ldv_45165;
      case 20: 
#line 1505 
      ;
      
#line 1507 
      ldv_22_ldv_param_1_6 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
      
#line 1512 
      ldv_emg_wrapper_niu_get_stats_6(ldv_22_container,ldv_22_ldv_param_1_6);
      
#line 1516 
      ldv_free((void *)ldv_22_ldv_param_1_6);
      
#line 1519 
      goto ldv_45165;
      case 21: 
#line 1521 
      ;
      
#line 1527 
      ldv_emg_wrapper_niu_set_msglevel_5(ldv_22_container,ldv_22_ldv_param_1_5);
      
#line 1533 
      goto ldv_45165;
      case 22: 
#line 1535 
      ;
      
#line 1537 
      ldv_22_ldv_param_1_4 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
      
#line 1542 
      ldv_emg_wrapper_niu_set_phys_id_4(ldv_22_container,*ldv_22_ldv_param_1_4);
      
#line 1546 
      ldv_free((void *)ldv_22_ldv_param_1_4);
      
#line 1549 
      goto ldv_45165;
      case 23: 
#line 1551 
      ;
      
#line 1553 
      ldv_22_ldv_param_1_3 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1558 
      ldv_emg_wrapper_niu_set_settings_3(ldv_22_container,ldv_22_ldv_param_1_3);
      
#line 1562 
      ldv_free((void *)ldv_22_ldv_param_1_3);
      
#line 1565 
      goto ldv_45165;
      default: 
#line 1567 
      ;
      
#line 1567 
      __VERIFIER_assume(0);
    }
    ldv_45165: 
#line 1570 
    ;
    
#line 1570 
    ldv_free((void *)ldv_22_ldv_param_1_2);
    
#line 1577 
    goto ldv_call_22;
  }
  else {
    
#line 1585 
    __retres = (void *)0;
    
#line 1585 
    goto return_label;
  }
  
#line 1588 
  __retres = (void *)0;
  return_label: 
#line 1588 
                return __retres;
}


#line 1593  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_devattr_instance_17(void *arg0)
{
  void *__retres;
  struct device_attribute *ldv_17_devattr;
  char *ldv_17_ldv_param_2_4;
  unsigned long ldv_17_ldv_param_3_3;
  char *ldv_17_ldv_param_2_2;
  struct device *ldv_17_device;
  int tmp;
  
#line 1602 
  struct ldv_struct_devattr_instance_15 *data = (struct ldv_struct_devattr_instance_15 *)arg0;
  
#line 1607 
  if (data != (struct ldv_struct_devattr_instance_15 *)0) {
    
#line 1608 
    ldv_17_device = data->arg0;
    
#line 1609 
    ldv_17_devattr = data->arg1;
    
#line 1610 
    ldv_free((void *)data);
  }
  else ;
  
#line 1618 
  goto ldv_main_17;
  
#line 1620 
  __retres = (void *)0;
  
#line 1620 
  goto return_label;
  ldv_main_17: 
#line 1623 
  ;
  
#line 1626 
  tmp = ldv_undef_int();
  
#line 1626 
  switch (tmp) {
    case 1: 
#line 1627 
    ;
    
#line 1629 
    ldv_17_ldv_param_2_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1634 
    ldv_emg_wrapper_show_num_ports_2(ldv_17_device,ldv_17_devattr,ldv_17_ldv_param_2_4);
    
#line 1638 
    ldv_free((void *)ldv_17_ldv_param_2_4);
    
#line 1645 
    goto ldv_main_17;
    case 2: 
#line 1648 
    ;
    
#line 1650 
    ldv_17_ldv_param_2_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1654 
    if (ldv_17_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0) 
      
#line 1656 
      (*(ldv_17_devattr->store))(ldv_17_device,ldv_17_devattr,(char const *)ldv_17_ldv_param_2_2,ldv_17_ldv_param_3_3); else ;
    
#line 1661 
    ldv_free((void *)ldv_17_ldv_param_2_2);
    
#line 1668 
    goto ldv_main_17;
    case 3: 
#line 1671 
    ;
    
#line 1677 
    __retres = (void *)0;
    
#line 1677 
    goto return_label;
    default: 
#line 1680 
    ;
    
#line 1680 
    __VERIFIER_assume(0);
  }
  
#line 1683 
  __retres = (void *)0;
  return_label: 
#line 1683 
                return __retres;
}


#line 1688  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 1694 
  ldv_2_netdev = arg0;
  
#line 1695 
  ldv_free((void *)ldv_2_netdev);
  
#line 1699 
  goto return_label;
  return_label: 
#line 1701 
                return;
}


#line 1706  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_14(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_14_ret_val;
  int ldv_14_line;
  void *ldv_14_data;
  enum irqreturn (*ldv_14_thread)(int , void *);
  int tmp;
  
#line 1712 
  enum irqreturn (*ldv_14_callback)(int , void *) = & ldv_emg_wrapper_niu_interrupt_2;
  
#line 1715 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 1720 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 1721 
    ldv_14_line = data->arg0;
    
#line 1722 
    ldv_14_callback = data->arg1;
    
#line 1723 
    ldv_14_thread = data->arg2;
    
#line 1724 
    ldv_14_data = data->arg3;
    
#line 1725 
    ldv_free((void *)data);
  }
  else ;
  
#line 1731 
  ldv_switch_to_interrupt_context();
  
#line 1733 
  ldv_14_ret_val = ldv_emg_wrapper_niu_interrupt_2(ldv_14_line,ldv_14_data);
  
#line 1735 
  ldv_switch_to_process_context();
  
#line 1738 
  tmp = ldv_undef_int();
  
#line 1738 
  if (tmp != 0) {
    
#line 1740 
    __VERIFIER_assume(ldv_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 1744 
    if (ldv_14_thread != (enum irqreturn (*)(int , void *))0) 
#line 1746 
                                                              (*ldv_14_thread)(ldv_14_line,ldv_14_data); else ;
  }
  else 
#line 1753 
       __VERIFIER_assume(ldv_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 1762 
  __retres = (void *)0;
  
#line 1762 
  goto return_label;
  
#line 1764 
  __retres = (void *)0;
  return_label: 
#line 1764 
                return __retres;
}


#line 1769  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_devattr_instance_16(void *arg0)
{
  void *__retres;
  struct device_attribute *ldv_16_devattr;
  char *ldv_16_ldv_param_2_4;
  unsigned long ldv_16_ldv_param_3_3;
  char *ldv_16_ldv_param_2_2;
  struct device *ldv_16_device;
  int tmp;
  
#line 1778 
  struct ldv_struct_devattr_instance_15 *data = (struct ldv_struct_devattr_instance_15 *)arg0;
  
#line 1783 
  if (data != (struct ldv_struct_devattr_instance_15 *)0) {
    
#line 1784 
    ldv_16_device = data->arg0;
    
#line 1785 
    ldv_16_devattr = data->arg1;
    
#line 1786 
    ldv_free((void *)data);
  }
  else ;
  
#line 1794 
  goto ldv_main_16;
  
#line 1796 
  __retres = (void *)0;
  
#line 1796 
  goto return_label;
  ldv_main_16: 
#line 1799 
  ;
  
#line 1802 
  tmp = ldv_undef_int();
  
#line 1802 
  switch (tmp) {
    case 1: 
#line 1803 
    ;
    
#line 1805 
    ldv_16_ldv_param_2_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1810 
    ldv_emg_wrapper_show_port_phy_2(ldv_16_device,ldv_16_devattr,ldv_16_ldv_param_2_4);
    
#line 1814 
    ldv_free((void *)ldv_16_ldv_param_2_4);
    
#line 1821 
    goto ldv_main_16;
    case 2: 
#line 1824 
    ;
    
#line 1826 
    ldv_16_ldv_param_2_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1830 
    if (ldv_16_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0) 
      
#line 1832 
      (*(ldv_16_devattr->store))(ldv_16_device,ldv_16_devattr,(char const *)ldv_16_ldv_param_2_2,ldv_16_ldv_param_3_3); else ;
    
#line 1837 
    ldv_free((void *)ldv_16_ldv_param_2_2);
    
#line 1844 
    goto ldv_main_16;
    case 3: 
#line 1847 
    ;
    
#line 1853 
    __retres = (void *)0;
    
#line 1853 
    goto return_label;
    default: 
#line 1856 
    ;
    
#line 1856 
    __VERIFIER_assume(0);
  }
  
#line 1859 
  __retres = (void *)0;
  return_label: 
#line 1859 
                return __retres;
}


