/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long ulong;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104 
struct pollfd;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_46 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_46 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_47 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_47 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct vm_area_struct;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_48 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_48 nodemask_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 265 
struct rw_semaphore;

#line 266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_50 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_49 {
   struct __anonstruct_50 __anonCompField___anonunion_49_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_49 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_115 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_115 mm_context_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmod.h"
struct cred;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/elf.h"
struct inode;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_148 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_149 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_147 {
   struct __anonstruct_148 __anonCompField___anonunion_147_33 ;
   struct __anonstruct_149 __anonCompField___anonunion_147_34 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_147 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_150 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_152 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_156 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_155 {
   atomic_t _mapcount ;
   struct __anonstruct_156 __anonCompField___anonunion_155_38 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_154 {
   union __anonunion_155 __anonCompField___anonstruct_154_39 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_153 {
   unsigned long counters ;
   struct __anonstruct_154 __anonCompField___anonunion_153_40 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_151 {
   union __anonunion_152 __anonCompField___anonstruct_151_37 ;
   union __anonunion_153 __anonCompField___anonstruct_151_41 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_158 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_159 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_157 {
   struct list_head lru ;
   struct __anonstruct_158 __anonCompField___anonunion_157_43 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_159 __anonCompField___anonunion_157_44 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_160 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_150 __anonCompField_page_36 ;
   struct __anonstruct_151 __anonCompField_page_42 ;
   union __anonunion_157 __anonCompField_page_45 ;
   union __anonunion_160 __anonCompField_page_46 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_161 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
union __anonunion_166 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_166 __anonCompField_idr_layer_47 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_171 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_171 __anonCompField_kernfs_node_48 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
struct sock;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_172 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_172 __anonCompField_kernel_param_49 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_183 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_183 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_185 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_186 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_187 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_188 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_190 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_189 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_190 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_191 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_192 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_184 {
   int _pad[28U] ;
   struct __anonstruct__kill_185 _kill ;
   struct __anonstruct__timer_186 _timer ;
   struct __anonstruct__rt_187 _rt ;
   struct __anonstruct__sigchld_188 _sigchld ;
   struct __anonstruct__sigfault_189 _sigfault ;
   struct __anonstruct__sigpoll_191 _sigpoll ;
   struct __anonstruct__sigsys_192 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_184 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_199 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_200 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_202 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_201 {
   struct keyring_index_key index_key ;
   struct __anonstruct_202 __anonCompField___anonunion_201_52 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_203 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_205 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_204 {
   union __anonunion_payload_205 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_199 __anonCompField_key_50 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_200 __anonCompField_key_51 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_201 __anonCompField_key_53 ;
   union __anonunion_type_data_203 type_data ;
   union __anonunion_204 __anonCompField_key_54 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct backing_dev_info;

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1138 
struct io_context;

#line 1172 
struct pipe_inode_info;

#line 1173 
struct uts_namespace;

#line 1174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct proc_dir_entry;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_220 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_220 __anonCompField_pci_dev_58 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 66 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 1249 
struct kvec;

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 1911  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_221 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_221 __anonCompField_iov_iter_59 ;
   unsigned long nr_segs ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/fcntl.h"
enum ldv_23311 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_23311 socket_state;

#line 54 
struct poll_table_struct;

#line 55 
struct net;

#line 72 
struct fasync_struct;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_222 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_222 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_24163 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_227 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_228 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_24163 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_227 __anonCompField_nf_bridge_info_63 ;
   union __anonunion_228 __anonCompField_nf_bridge_info_64 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_231 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_230 {
   u64 v64 ;
   struct __anonstruct_231 __anonCompField___anonunion_230_65 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_230 __anonCompField_skb_mstamp_66 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_234 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_233 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_234 __anonCompField___anonstruct_233_67 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_232 {
   struct __anonstruct_233 __anonCompField___anonunion_232_68 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_236 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_235 {
   __wsum csum ;
   struct __anonstruct_236 __anonCompField___anonunion_235_70 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_237 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_238 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_239 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_232 __anonCompField_sk_buff_69 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_235 __anonCompField_sk_buff_71 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_237 __anonCompField_sk_buff_72 ;
   __u32 secmark ;
   union __anonunion_238 __anonCompField_sk_buff_73 ;
   union __anonunion_239 __anonCompField_sk_buff_74 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 767 
struct rtable;

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_241 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_241 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_242 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_242 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_243 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_243 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_244 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_244 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_245 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_245 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_246 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_246 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_247 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_247 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_248 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_248 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_249 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_250 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_249 ifr_ifrn ;
   union __anonunion_ifr_ifru_250 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_255 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_254 {
   struct __anonstruct_255 __anonCompField___anonunion_254_75 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_254 __anonCompField_lockref_76 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_257 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_256 {
   struct __anonstruct_257 __anonCompField___anonunion_256_77 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_256 __anonCompField_qstr_78 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_258 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_258 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_262 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_261 {
   struct __anonstruct_262 __anonCompField___anonunion_261_79 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_261 __anonCompField_radix_tree_node_80 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 47 
struct block_device;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 62 
struct kstatfs;

#line 63 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_266 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_266 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_267 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_267 __anonCompField_kqid_82 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_270 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_271 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_272 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_270 __anonCompField_inode_83 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_271 __anonCompField_inode_84 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_272 __anonCompField_inode_85 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_273 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_273 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_275 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_274 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_275 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_274 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct ipv6_devconf;

#line 39 
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_306 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_306 possible_net_t;

#line 376 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_29557 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_29557 phy_interface_t;

#line 126 
enum ldv_29610 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_29610 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 1628 
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_31320 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_31321 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_316 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_317 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_318 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_316 adj_list ;
   struct __anonstruct_all_adj_list_317 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_31320 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_31321 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_318 __anonCompField_net_device_95 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cacheflush.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_333 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_333 __anonCompField_bpf_prog_100 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_344 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_344 __anonCompField_dst_entry_101 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_345 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_345 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_347 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_346 {
   __addrpair skc_addrpair ;
   struct __anonstruct_347 __anonCompField___anonunion_346_102 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_348 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_350 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_349 {
   __portpair skc_portpair ;
   struct __anonstruct_350 __anonCompField___anonunion_349_105 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_351 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_352 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_346 __anonCompField_sock_common_103 ;
   union __anonunion_348 __anonCompField_sock_common_104 ;
   union __anonunion_349 __anonCompField_sock_common_106 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_351 __anonCompField_sock_common_107 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_352 __anonCompField_sock_common_108 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_353 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_353 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_356 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_356 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   __u8 addr_gen_mode ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
union __anonunion_378 {
   __be32 a4 ;
   __be32 a6[4U] ;
   struct in6_addr in6 ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_378 __anonCompField_inetpeer_addr_base_110 ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_379 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct __anonstruct_381 {
   atomic_t rid ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_380 {
   struct __anonstruct_381 __anonCompField___anonunion_380_112 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[16U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_379 __anonCompField_inet_peer_111 ;
   union __anonunion_380 __anonCompField_inet_peer_113 ;
   __u32 dtime ;
   atomic_t refcnt ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   int total ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct uncached_list;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};

#line 317  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};

#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_hw.h"
struct ocrdma_dev;

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.h"
struct be_dma_mem {
   void *va ;
   dma_addr_t dma ;
   u32 size ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_queue_info {
   struct be_dma_mem dma_mem ;
   u16 len ;
   u16 entry_size ;
   u16 id ;
   u16 tail ;
   u16 head ;
   bool created ;
   atomic_t used ;
};

#line 173 
struct be_adapter;

#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_eq_obj {
   struct be_queue_info q ;
   char desc[32U] ;
   bool enable_aic ;
   u32 min_eqd ;
   u32 max_eqd ;
   u32 eqd ;
   u32 cur_eqd ;
   u8 idx ;
   u8 msix_idx ;
   u16 spurious_intr ;
   struct napi_struct napi ;
   struct be_adapter *adapter ;
   cpumask_var_t affinity_mask ;
   unsigned int state ;
   spinlock_t lock ;
};

#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_aic_obj {
   bool enable ;
   u32 min_eqd ;
   u32 max_eqd ;
   u32 prev_eqd ;
   u32 et_eqd ;
   ulong jiffies ;
   u64 rx_pkts_prev ;
   u64 tx_reqs_prev ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_mcc_obj {
   struct be_queue_info q ;
   struct be_queue_info cq ;
   bool rearm_cq ;
};

#line 227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_tx_stats {
   u64 tx_bytes ;
   u64 tx_pkts ;
   u64 tx_reqs ;
   u64 tx_compl ;
   ulong tx_jiffies ;
   u32 tx_stops ;
   u32 tx_drv_drops ;
   u32 tx_hdr_parse_err ;
   u32 tx_dma_err ;
   u32 tx_tso_err ;
   u32 tx_spoof_check_err ;
   u32 tx_qinq_err ;
   u32 tx_internal_parity_err ;
   struct u64_stats_sync sync ;
   struct u64_stats_sync sync_compl ;
};

#line 246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_tx_compl_info {
   u8 status ;
   u16 end_index ;
};

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_tx_obj {
   u32 db_offset ;
   struct be_queue_info q ;
   struct be_queue_info cq ;
   struct be_tx_compl_info txcp ;
   struct sk_buff *sent_skb_list[2048U] ;
   struct be_tx_stats stats ;
   u16 pend_wrb_cnt ;
   u16 last_req_wrb_cnt ;
   u16 last_req_hdr ;
};

#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_rx_page_info {
   struct page *page ;
   dma_addr_t bus ;
   u16 page_offset ;
   bool last_frag ;
};

#line 274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_rx_stats {
   u64 rx_bytes ;
   u64 rx_pkts ;
   u32 rx_drops_no_skbs ;
   u32 rx_drops_no_frags ;
   u32 rx_post_fail ;
   u32 rx_compl ;
   u32 rx_mcast_pkts ;
   u32 rx_compl_err ;
   struct u64_stats_sync sync ;
};

#line 286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_rx_compl_info {
   u32 rss_hash ;
   u16 vlan_tag ;
   u16 pkt_size ;
   u16 port ;
   u8 vlanf ;
   u8 num_rcvd ;
   u8 err ;
   u8 ipf ;
   u8 tcpf ;
   u8 udpf ;
   u8 ip_csum ;
   u8 l4_csum ;
   u8 ipv6 ;
   u8 qnq ;
   u8 pkt_type ;
   u8 ip_frag ;
   u8 tunneled ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_rx_obj {
   struct be_adapter *adapter ;
   struct be_queue_info q ;
   struct be_queue_info cq ;
   struct be_rx_compl_info rxcp ;
   struct be_rx_page_info page_info_tbl[1024U] ;
   struct be_rx_stats stats ;
   u8 rss_id ;
   bool rx_post_starved ;
};

#line 317  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_drv_stats {
   u32 eth_red_drops ;
   u32 dma_map_errors ;
   u32 rx_drops_no_pbuf ;
   u32 rx_drops_no_txpb ;
   u32 rx_drops_no_erx_descr ;
   u32 rx_drops_no_tpre_descr ;
   u32 rx_drops_too_many_frags ;
   u32 forwarded_packets ;
   u32 rx_drops_mtu ;
   u32 rx_crc_errors ;
   u32 rx_alignment_symbol_errors ;
   u32 rx_pause_frames ;
   u32 rx_priority_pause_frames ;
   u32 rx_control_frames ;
   u32 rx_in_range_errors ;
   u32 rx_out_range_errors ;
   u32 rx_frame_too_long ;
   u32 rx_address_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rx_ip_checksum_errs ;
   u32 rx_tcp_checksum_errs ;
   u32 rx_udp_checksum_errs ;
   u32 tx_pauseframes ;
   u32 tx_priority_pauseframes ;
   u32 tx_controlframes ;
   u32 rxpp_fifo_overflow_drop ;
   u32 rx_input_fifo_overflow_drop ;
   u32 pmem_fifo_overflow_drop ;
   u32 jabber_events ;
   u32 rx_roce_bytes_lsd ;
   u32 rx_roce_bytes_msd ;
   u32 rx_roce_frames ;
   u32 roce_drops_payload_len ;
   u32 roce_drops_crc ;
};

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_vf_cfg {
   unsigned char mac_addr[6U] ;
   int if_handle ;
   int pmac_id ;
   u16 vlan_tag ;
   u32 tx_rate ;
   u32 plink_tracking ;
   u32 privileges ;
   bool spoofchk ;
};

#line 377  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct phy_info {
   u8 transceiver ;
   u8 autoneg ;
   u8 fc_autoneg ;
   u8 port_type ;
   u16 phy_type ;
   u16 interface_type ;
   u32 misc_params ;
   u16 auto_speeds_supported ;
   u16 fixed_speeds_supported ;
   int link_speed ;
   u32 advertising ;
   u32 supported ;
   u8 cable_type ;
   u8 vendor_name[17U] ;
   u8 vendor_pn[17U] ;
};

#line 415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_resources {
   u16 max_vfs ;
   u16 max_mcast_mac ;
   u16 max_tx_qs ;
   u16 max_rss_qs ;
   u16 max_rx_qs ;
   u16 max_cq_count ;
   u16 max_uc_mac ;
   u16 max_vlans ;
   u16 max_iface_count ;
   u16 max_mcc_count ;
   u16 max_evt_qs ;
   u32 if_cap_flags ;
   u32 vf_if_cap_flags ;
};

#line 431  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct rss_info {
   u64 rss_flags ;
   u8 rsstable[128U] ;
   u8 rss_queue[128U] ;
   u8 rss_hkey[40U] ;
};

#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_hwmon {
   struct device *hwmon_dev ;
   u8 be_on_die_temp ;
};

#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct __anonstruct_roce_db_388 {
   u32 size ;
   u32 total_size ;
   u64 io_addr ;
};

#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_adapter {
   struct pci_dev *pdev ;
   struct net_device *netdev ;
   u8 *csr ;
   u8 *db ;
   u8 *pcicfg ;
   struct mutex mbox_lock ;
   struct be_dma_mem mbox_mem ;
   struct be_dma_mem mbox_mem_alloced ;
   struct be_mcc_obj mcc_obj ;
   spinlock_t mcc_lock ;
   spinlock_t mcc_cq_lock ;
   u16 cfg_num_qs ;
   u16 num_evt_qs ;
   u16 num_msix_vec ;
   struct be_eq_obj eq_obj[32U] ;
   struct msix_entry msix_entries[32U] ;
   bool isr_registered ;
   u16 num_tx_qs ;
   struct be_tx_obj tx_obj[32U] ;
   u16 num_rx_qs ;
   u16 num_rss_qs ;
   u16 need_def_rxq ;
   struct be_rx_obj rx_obj[32U] ;
   u32 big_page_size ;
   struct be_drv_stats drv_stats ;
   struct be_aic_obj aic_obj[32U] ;
   u8 vlan_prio_bmap ;
   u16 recommended_prio ;
   struct be_dma_mem rx_filter ;
   struct be_dma_mem stats_cmd ;
   struct delayed_work work ;
   u16 work_counter ;
   struct delayed_work be_err_detection_work ;
   u8 err_flags ;
   u32 flags ;
   u32 cmd_privileges ;
   char fw_ver[32U] ;
   char fw_on_flash[32U] ;
   int if_handle ;
   u32 if_flags ;
   u32 *pmac_id ;
   u32 uc_macs ;
   unsigned long vids[64U] ;
   u16 vlans_added ;
   u32 beacon_state ;
   bool eeh_error ;
   bool fw_timeout ;
   bool hw_error ;
   u32 port_num ;
   char port_name ;
   u8 mc_type ;
   u32 function_mode ;
   u32 function_caps ;
   u32 rx_fc ;
   u32 tx_fc ;
   bool stats_cmd_sent ;
   struct __anonstruct_roce_db_388 roce_db ;
   u32 num_msix_roce_vec ;
   struct ocrdma_dev *ocrdma_dev ;
   struct list_head entry ;
   u32 flash_status ;
   struct completion et_cmd_compl ;
   struct be_resources pool_res ;
   struct be_resources res ;
   u16 num_vfs ;
   u8 virtfn ;
   struct be_vf_cfg *vf_cfg ;
   bool be3_native ;
   u32 sli_family ;
   u8 hba_port_num ;
   u16 pvid ;
   __be16 vxlan_port ;
   int vxlan_port_count ;
   struct phy_info phy ;
   u8 wol_cap ;
   bool wol_en ;
   u16 asic_rev ;
   u16 qnq_vid ;
   u32 msg_enable ;
   int be_get_temp_freq ;
   struct be_hwmon hwmon_info ;
   u8 pf_number ;
   struct rss_info rss_info ;
   u32 bmc_filt_mask ;
};

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_sge {
   u32 pa_lo ;
   u32 pa_hi ;
   u32 len ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
union __anonunion_payload_389 {
   u8 embedded_payload[236U] ;
   struct be_sge sgl[19U] ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_mcc_wrb {
   u32 embedded ;
   u32 payload_length ;
   u32 tag0 ;
   u32 tag1 ;
   u32 rsvd ;
   union __anonunion_payload_389 payload ;
};

#line 46 
enum mcc_base_status {
    MCC_STATUS_SUCCESS = 0,
    MCC_STATUS_FAILED = 1,
    MCC_STATUS_ILLEGAL_REQUEST = 2,
    MCC_STATUS_ILLEGAL_FIELD = 3,
    MCC_STATUS_INSUFFICIENT_BUFFER = 4,
    MCC_STATUS_UNAUTHORIZED_REQUEST = 5,
    MCC_STATUS_NOT_SUPPORTED = 66,
    MCC_STATUS_FEATURE_NOT_SUPPORTED = 68
};

#line 57 
enum mcc_addl_status {
    MCC_ADDL_STATUS_INSUFFICIENT_RESOURCES = 22,
    MCC_ADDL_STATUS_FLASH_IMAGE_CRC_MISMATCH = 77,
    MCC_ADDL_STATUS_TOO_MANY_INTERFACES = 74,
    MCC_ADDL_STATUS_INSUFFICIENT_VLANS = 171
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_mcc_compl {
   u32 status ;
   u32 tag0 ;
   u32 tag1 ;
   u32 flags ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_link_state {
   u8 physical_port ;
   u8 port_link_status ;
   u8 port_duplex ;
   u8 port_speed ;
   u8 port_fault ;
   u8 rsvd0[7U] ;
   u32 flags ;
};

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_grp5_qos_link_speed {
   u8 physical_port ;
   u8 rsvd[5U] ;
   u16 qos_link_speed ;
   u32 event_tag ;
   u32 flags ;
};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_grp5_cos_priority {
   u8 physical_port ;
   u8 available_priority_bmap ;
   u8 reco_default_priority ;
   u8 valid ;
   u8 rsvd0 ;
   u8 event_tag ;
   u32 flags ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_grp5_pvid_state {
   u8 enabled ;
   u8 rsvd0 ;
   u16 tag ;
   u32 event_tag ;
   u32 rsvd1 ;
   u32 flags ;
};

#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_qnq {
   u8 valid ;
   u8 rsvd0 ;
   u16 vlan_tag ;
   u32 event_tag ;
   u8 rsvd1[4U] ;
   u32 flags ;
};

#line 175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_event_misconfig_port {
   u32 event_data_word1 ;
   u32 event_data_word2 ;
   u32 rsvd0 ;
   u32 flags ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_async_fw_control {
   u32 event_data_word1 ;
   u32 event_data_word2 ;
   u32 evt_tag ;
   u32 event_data_word4 ;
};

#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_mcc_mailbox {
   struct be_mcc_wrb wrb ;
   struct be_mcc_compl compl ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_hdr {
   u8 opcode ;
   u8 subsystem ;
   u8 port_number ;
   u8 domain ;
   u32 timeout ;
   u32 request_length ;
   u8 version ;
   u8 rsvd[3U] ;
};

#line 294  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_hdr {
   u8 opcode ;
   u8 subsystem ;
   u8 rsvd[2U] ;
   u8 base_status ;
   u8 addl_status ;
   u8 rsvd1[2U] ;
   u32 response_length ;
   u32 actual_resp_len ;
};

#line 307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct phys_addr {
   u32 lo ;
   u32 hi ;
};

#line 343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_eq_create {
   struct be_cmd_req_hdr hdr ;
   u16 num_pages ;
   u16 rsvd0 ;
   u8 context[16U] ;
   struct phys_addr pages[8U] ;
};

#line 351  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_eq_create {
   struct be_cmd_resp_hdr resp_hdr ;
   u16 eq_id ;
   u16 msix_idx ;
};

#line 364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct mac_addr {
   u16 size_of_struct ;
   u8 addr[6U] ;
};

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_mac_query {
   struct be_cmd_req_hdr hdr ;
   u8 type ;
   u8 permanent ;
   u16 if_id ;
   u32 pmac_id ;
};

#line 378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_mac_query {
   struct be_cmd_resp_hdr hdr ;
   struct mac_addr mac ;
};

#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_pmac_add {
   struct be_cmd_req_hdr hdr ;
   u32 if_id ;
   u8 mac_address[6U] ;
   u8 rsvd0[2U] ;
};

#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_pmac_add {
   struct be_cmd_resp_hdr hdr ;
   u32 pmac_id ;
};

#line 396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_pmac_del {
   struct be_cmd_req_hdr hdr ;
   u32 if_id ;
   u32 pmac_id ;
};

#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_cq_create {
   struct be_cmd_req_hdr hdr ;
   u16 num_pages ;
   u8 page_size ;
   u8 rsvd0 ;
   u8 context[16U] ;
   struct phys_addr pages[8U] ;
};

#line 454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_cq_create {
   struct be_cmd_resp_hdr hdr ;
   u16 cq_id ;
   u16 rsvd0 ;
};

#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_fat {
   struct be_cmd_req_hdr hdr ;
   u32 fat_operation ;
   u32 read_log_offset ;
   u32 read_log_length ;
   u32 data_buffer_size ;
   u32 data_buffer[1U] ;
};

#line 470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_fat {
   struct be_cmd_resp_hdr hdr ;
   u32 log_size ;
   u32 read_log_length ;
   u32 rsvd[2U] ;
   u32 data_buffer[1U] ;
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_mcc_create {
   struct be_cmd_req_hdr hdr ;
   u16 num_pages ;
   u16 cq_id ;
   u8 context[16U] ;
   struct phys_addr pages[8U] ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_mcc_ext_create {
   struct be_cmd_req_hdr hdr ;
   u16 num_pages ;
   u16 cq_id ;
   u32 async_event_bitmap[1U] ;
   u8 context[16U] ;
   struct phys_addr pages[8U] ;
};

#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_mcc_create {
   struct be_cmd_resp_hdr hdr ;
   u16 id ;
   u16 rsvd0 ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_eth_tx_create {
   struct be_cmd_req_hdr hdr ;
   u8 num_pages ;
   u8 ulp_num ;
   u16 type ;
   u16 if_id ;
   u8 queue_size ;
   u8 rsvd0 ;
   u32 rsvd1 ;
   u16 cq_id ;
   u16 rsvd2 ;
   u32 rsvd3[13U] ;
   struct phys_addr pages[8U] ;
};

#line 550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_eth_tx_create {
   struct be_cmd_resp_hdr hdr ;
   u16 cid ;
   u16 rid ;
   u32 db_offset ;
   u32 rsvd0[4U] ;
};

#line 558  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_eth_rx_create {
   struct be_cmd_req_hdr hdr ;
   u16 cq_id ;
   u8 frag_size ;
   u8 num_pages ;
   struct phys_addr pages[2U] ;
   u32 interface_id ;
   u16 max_frame_size ;
   u16 rsvd0 ;
   u32 rss_queue ;
};

#line 571  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_eth_rx_create {
   struct be_cmd_resp_hdr hdr ;
   u16 id ;
   u8 rss_id ;
   u8 rsvd0 ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_q_destroy {
   struct be_cmd_req_hdr hdr ;
   u16 id ;
   u16 bypass_flush ;
};

#line 609  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_if_create {
   struct be_cmd_req_hdr hdr ;
   u32 version ;
   u32 capability_flags ;
   u32 enable_flags ;
   u8 mac_addr[6U] ;
   u8 rsvd0 ;
   u8 pmac_invalid ;
   u32 vlan_tag ;
};

#line 640  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_if_create {
   struct be_cmd_resp_hdr hdr ;
   u32 interface_id ;
   u32 pmac_id ;
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_if_destroy {
   struct be_cmd_req_hdr hdr ;
   u32 interface_id ;
};

#line 940  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct pport_stats_params {
   u16 pport_num ;
   u8 rsvd ;
   u8 reset_stats ;
};

#line 946  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
union __anonunion_cmd_params_390 {
   struct pport_stats_params params ;
   u8 rsvd[656U] ;
};

#line 946  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_req_pport_stats {
   struct be_cmd_req_hdr hdr ;
   union __anonunion_cmd_params_390 cmd_params ;
};

#line 966  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_cntl_addnl_attribs {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_cntl_addnl_attribs {
   struct be_cmd_resp_hdr hdr ;
   u16 ipl_file_number ;
   u8 ipl_file_version ;
   u8 rsvd0 ;
   u8 on_die_temperature ;
   u8 rsvd1[3U] ;
};

#line 980  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_vlan_config {
   struct be_cmd_req_hdr hdr ;
   u8 interface_id ;
   u8 promiscuous ;
   u8 untagged ;
   u8 num_vlan ;
   u16 normal_vlan[64U] ;
};

#line 989  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct macaddr {
   u8 byte[6U] ;
};

#line 995  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_rx_filter {
   struct be_cmd_req_hdr hdr ;
   u32 global_flags_mask ;
   u32 global_flags ;
   u32 if_flags_mask ;
   u32 if_flags ;
   u32 if_id ;
   u32 mcast_num ;
   struct macaddr mcast_mac[64U] ;
};

#line 1006  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_link_status {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
};

#line 1029  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_link_status {
   struct be_cmd_resp_hdr hdr ;
   u8 physical_port ;
   u8 mac_duplex ;
   u8 mac_speed ;
   u8 mac_fault ;
   u8 mgmt_mac_duplex ;
   u8 mgmt_mac_speed ;
   u16 link_speed ;
   u8 logical_link_status ;
   u8 rsvd1[3U] ;
};

#line 1042  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_port_type {
   struct be_cmd_req_hdr hdr ;
   __le32 page_num ;
   __le32 port ;
};

#line 1055  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_port_type {
   struct be_cmd_resp_hdr hdr ;
   u32 page_num ;
   u32 port ;
   u8 page_data[256U] ;
};

#line 1076  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_fw_version {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd0[32U] ;
   u8 rsvd1[32U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_fw_version {
   struct be_cmd_resp_hdr hdr ;
   u8 firmware_version_string[32U] ;
   u8 fw_on_flash_version_string[32U] ;
};

#line 1089  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_flow_control {
   struct be_cmd_req_hdr hdr ;
   u16 tx_flow_control ;
   u16 rx_flow_control ;
};

#line 1096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_flow_control {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
};

#line 1102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_flow_control {
   struct be_cmd_resp_hdr hdr ;
   u16 tx_flow_control ;
   u16 rx_flow_control ;
};

#line 1108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_set_eqd {
   u32 eq_id ;
   u32 phase ;
   u32 delay_multiplier ;
};

#line 1115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_modify_eq_delay {
   struct be_cmd_req_hdr hdr ;
   u32 num_eq ;
   struct be_set_eqd set_eqd[32U] ;
};

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_query_fw_cfg {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd[31U] ;
};

#line 1134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_query_fw_cfg {
   struct be_cmd_resp_hdr hdr ;
   u32 be_config_number ;
   u32 asic_revision ;
   u32 phys_port ;
   u32 function_mode ;
   u32 rsvd[26U] ;
   u32 function_caps ;
};

#line 1144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_rss_config {
   struct be_cmd_req_hdr hdr ;
   u32 if_id ;
   u16 enable_rss ;
   u16 cpu_table_size_log2 ;
   u32 hash[10U] ;
   u8 cpu_table[128U] ;
   u8 flush ;
   u8 rsvd0[3U] ;
};

#line 1178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_enable_disable_beacon {
   struct be_cmd_req_hdr hdr ;
   u8 port_num ;
   u8 beacon_state ;
   u8 beacon_duration ;
   u8 status_duration ;
};

#line 1191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_beacon_state {
   struct be_cmd_req_hdr hdr ;
   u8 port_num ;
   u8 rsvd0 ;
   u16 rsvd1 ;
};

#line 1198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_beacon_state {
   struct be_cmd_resp_hdr resp_hdr ;
   u8 beacon_state ;
   u8 rsvd0[3U] ;
};

#line 1364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flashrom_params {
   u32 op_code ;
   u32 op_type ;
   u32 data_buf_size ;
   u32 offset ;
};

#line 1378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_write_flashrom {
   struct be_cmd_req_hdr hdr ;
   struct flashrom_params params ;
   u8 data_buf[32768U] ;
   u8 rsvd[4U] ;
};

#line 1385  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_read_flash_crc {
   struct be_cmd_req_hdr hdr ;
   struct flashrom_params params ;
   u8 crc[4U] ;
   u8 rsvd[4U] ;
};

#line 1400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_req_write_object {
   struct be_cmd_req_hdr hdr ;
   u8 context[4U] ;
   u32 write_offset ;
   u8 object_name[104U] ;
   u32 descriptor_count ;
   u32 buf_len ;
   u32 addr_low ;
   u32 addr_high ;
};

#line 1411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_resp_write_object {
   u8 opcode ;
   u8 subsystem ;
   u8 rsvd1[2U] ;
   u8 status ;
   u8 additional_status ;
   u8 rsvd2[2U] ;
   u32 resp_len ;
   u32 actual_resp_len ;
   u32 actual_write_len ;
   u8 change_status ;
   u8 rsvd3[3U] ;
};

#line 1427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_req_read_object {
   struct be_cmd_req_hdr hdr ;
   u32 desired_read_len ;
   u32 read_offset ;
   u8 object_name[104U] ;
   u32 descriptor_count ;
   u32 buf_len ;
   u32 addr_low ;
   u32 addr_high ;
};

#line 1446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_resp_read_object {
   u8 opcode ;
   u8 subsystem ;
   u8 rsvd1[2U] ;
   u8 status ;
   u8 additional_status ;
   u8 rsvd2[2U] ;
   u32 resp_len ;
   u32 actual_resp_len ;
   u32 actual_read_len ;
   u32 eof ;
};

#line 1459  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_req_delete_object {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd1 ;
   u32 rsvd2 ;
   u8 object_name[104U] ;
};

#line 1466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_acpi_wol_magic_config {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd0[145U] ;
   u8 magic_mac[6U] ;
   u8 rsvd2[2U] ;
};

#line 1474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_acpi_wol_magic_config_v1 {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd0[2U] ;
   u8 query_options ;
   u8 rsvd1[5U] ;
   u32 rsvd2[288U] ;
   u8 magic_mac[6U] ;
   u8 rsvd3[22U] ;
};

#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_acpi_wol_magic_config_v1 {
   struct be_cmd_resp_hdr hdr ;
   u8 rsvd0[2U] ;
   u8 wol_settings ;
   u8 rsvd1[5U] ;
   u32 rsvd2[295U] ;
};

#line 1492  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_loopback_test {
   struct be_cmd_req_hdr hdr ;
   u32 loopback_type ;
   u32 num_pkts ;
   u64 pattern ;
   u32 src_port ;
   u32 dest_port ;
   u32 pkt_size ;
};

#line 1512  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_loopback_test {
   struct be_cmd_resp_hdr resp_hdr ;
   u32 status ;
   u32 num_txfer ;
   u32 num_rx ;
   u32 miscomp_off ;
   u32 ticks_compl ;
};

#line 1521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_lmode {
   struct be_cmd_req_hdr hdr ;
   u8 src_port ;
   u8 dest_port ;
   u8 loopback_type ;
   u8 loopback_state ;
};

#line 1529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_ddrdma_test {
   struct be_cmd_req_hdr hdr ;
   u64 pattern ;
   u32 byte_count ;
   u32 rsvd0 ;
   u8 snd_buff[4096U] ;
   u8 rsvd1[4096U] ;
};

#line 1539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_ddrdma_test {
   struct be_cmd_resp_hdr hdr ;
   u64 pattern ;
   u32 byte_cnt ;
   u32 snd_err ;
   u8 rsvd0[4096U] ;
   u8 rcv_buff[4096U] ;
};

#line 1548  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_seeprom_read {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd0[1024U] ;
};

#line 1579  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_phy_info {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd0[24U] ;
};

#line 1611  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_phy_info {
   u16 phy_type ;
   u16 interface_type ;
   u32 misc_params ;
   u16 ext_phy_details ;
   u16 rsvd ;
   u16 auto_speeds_supported ;
   u16 fixed_speeds_supported ;
   u32 future_use[2U] ;
};

#line 1627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_qos {
   struct be_cmd_req_hdr hdr ;
   u32 valid_bits ;
   u32 max_bps_nic ;
   u32 rsvd[7U] ;
};

#line 1638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct mgmt_hba_attribs {
   u32 rsvd0[24U] ;
   u8 controller_model_number[32U] ;
   u32 rsvd1[79U] ;
   u8 rsvd2[3U] ;
   u8 phy_port ;
   u32 rsvd3[13U] ;
};

#line 1648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct mgmt_controller_attrib {
   struct mgmt_hba_attribs hba_attribs ;
   u32 rsvd0[10U] ;
};

#line 1653  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_cntl_attribs {
   struct be_cmd_req_hdr hdr ;
};

#line 1657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_cntl_attribs {
   struct be_cmd_resp_hdr hdr ;
   struct mgmt_controller_attrib attribs ;
};

#line 1662  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_func_cap {
   struct be_cmd_req_hdr hdr ;
   u32 valid_cap_flags ;
   u32 cap_flags ;
   u8 rsvd[212U] ;
};

#line 1673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_set_func_cap {
   struct be_cmd_resp_hdr hdr ;
   u32 valid_cap_flags ;
   u32 cap_flags ;
   u8 rsvd[212U] ;
};

#line 1694  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_priv_map {
   u8 opcode ;
   u8 subsystem ;
   u32 priv_mask ;
};

#line 1704  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_fn_privileges {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
};

#line 1709  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_fn_privileges {
   struct be_cmd_resp_hdr hdr ;
   u32 privilege_mask ;
};

#line 1714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_fn_privileges {
   struct be_cmd_req_hdr hdr ;
   u32 privileges ;
   u32 privileges_lancer ;
};

#line 1720  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_mac_list {
   struct be_cmd_req_hdr hdr ;
   u8 mac_type ;
   u8 perm_override ;
   u16 iface_id ;
   u32 mac_id ;
   u32 rsvd[3U] ;
};

#line 1731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct __anonstruct_s_mac_id_392 {
   u8 rsvd[2U] ;
   u32 mac_id ;
};

#line 1731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
union __anonunion_mac_addr_id_391 {
   u8 macaddr[6U] ;
   struct __anonstruct_s_mac_id_392 s_mac_id ;
};

#line 1731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct get_list_macaddr {
   u16 mac_addr_size ;
   union __anonunion_mac_addr_id_391 mac_addr_id ;
};

#line 1742  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_mac_list {
   struct be_cmd_resp_hdr hdr ;
   struct get_list_macaddr fd_macaddr ;
   struct get_list_macaddr macid_macaddr ;
   u8 true_mac_count ;
   u8 pseudo_mac_count ;
   u8 mac_list_size ;
   u8 rsvd ;
   struct get_list_macaddr macaddr_list[64U] ;
};

#line 1754  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_mac_list {
   struct be_cmd_req_hdr hdr ;
   u8 mac_count ;
   u8 rsvd1 ;
   u16 rsvd2 ;
   struct macaddr mac[64U] ;
};

#line 1786  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_hsw_config {
   struct be_cmd_req_hdr hdr ;
   u8 context[20U] ;
};

#line 1810  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_hsw_config {
   struct be_cmd_req_hdr hdr ;
   u8 context[4U] ;
};

#line 1815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_hsw_config {
   struct be_cmd_resp_hdr hdr ;
   u8 context[16U] ;
   u32 rsvd ;
};

#line 1821  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_port_name {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd0 ;
};

#line 1827  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_port_name {
   struct be_cmd_req_hdr hdr ;
   u8 port_name[4U] ;
};

#line 1993  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct ext_fat_mode {
   u8 mode ;
   u8 rsvd0 ;
   u16 port_mask ;
   u32 dbg_lvl ;
   u64 fun_mask ;
};

#line 2008  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct ext_fat_modules {
   u8 modules_str[32U] ;
   u32 modules_id ;
   u32 num_modes ;
   struct ext_fat_mode trace_lvl[4U] ;
};

#line 2015  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_fat_conf_params {
   u32 max_log_entries ;
   u32 log_entry_size ;
   u8 log_type ;
   u8 max_log_funs ;
   u8 max_log_ports ;
   u8 rsvd0 ;
   u32 supp_modes ;
   u32 num_modules ;
   struct ext_fat_modules module[27U] ;
};

#line 2027  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_ext_fat_caps {
   struct be_cmd_req_hdr hdr ;
   u32 parameter_type ;
};

#line 2037  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_ext_fat_caps {
   struct be_cmd_req_hdr hdr ;
   struct be_fat_conf_params set_params ;
};

#line 2042  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_res_desc_hdr {
   u8 desc_type ;
   u8 desc_len ;
};

#line 2061  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_port_res_desc {
   struct be_res_desc_hdr hdr ;
   u8 rsvd0 ;
   u8 flags ;
   u8 link_num ;
   u8 mc_type ;
   u16 rsvd1 ;
   u8 nv_flags ;
   u8 rsvd2 ;
   __le16 nv_port ;
   u32 rsvd3[19U] ;
};

#line 2080  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_pcie_res_desc {
   struct be_res_desc_hdr hdr ;
   u8 rsvd0 ;
   u8 flags ;
   u16 rsvd1 ;
   u8 pf_num ;
   u8 rsvd2 ;
   u32 rsvd3 ;
   u8 sriov_state ;
   u8 pf_state ;
   u8 pf_type ;
   u8 rsvd4 ;
   u16 num_vfs ;
   u16 rsvd5 ;
   u32 rsvd6[17U] ;
};

#line 2097  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_nic_res_desc {
   struct be_res_desc_hdr hdr ;
   u8 rsvd1 ;
   u8 flags ;
   u8 vf_num ;
   u8 rsvd2 ;
   u8 pf_num ;
   u8 rsvd3 ;
   u16 unicast_mac_count ;
   u8 rsvd4[6U] ;
   u16 mcc_count ;
   u16 vlan_count ;
   u16 mcast_mac_count ;
   u16 txq_count ;
   u16 rq_count ;
   u16 rssq_count ;
   u16 lro_count ;
   u16 cq_count ;
   u16 toe_conn_count ;
   u16 eq_count ;
   u16 vlan_id ;
   u16 iface_count ;
   u32 cap_flags ;
   u8 link_param ;
   u8 rsvd6 ;
   u16 channel_id_param ;
   u32 bw_min ;
   u32 bw_max ;
   u8 acpi_params ;
   u8 wol_param ;
   u16 rsvd7 ;
   u16 tunnel_iface_count ;
   u16 direct_tenant_iface_count ;
   u32 rsvd8[6U] ;
};

#line 2152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_func_config {
   struct be_cmd_req_hdr hdr ;
};

#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_func_config {
   struct be_cmd_resp_hdr hdr ;
   u32 desc_count ;
   u8 func_param[23232U] ;
};

#line 2167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_profile_config {
   struct be_cmd_req_hdr hdr ;
   u8 rsvd ;
   u8 type ;
   u16 rsvd1 ;
};

#line 2176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_profile_config {
   struct be_cmd_resp_hdr hdr ;
   __le16 desc_count ;
   u16 rsvd ;
   u8 func_param[23232U] ;
};

#line 2183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_profile_config {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
   u32 desc_count ;
   u8 desc[176U] ;
};

#line 2191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_active_profile {
   struct be_cmd_req_hdr hdr ;
   u32 rsvd ;
};

#line 2196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_active_profile {
   struct be_cmd_resp_hdr hdr ;
   u16 active_profile_id ;
   u16 next_profile_id ;
};

#line 2202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_enable_disable_vf {
   struct be_cmd_req_hdr hdr ;
   u8 enable ;
   u8 rsvd[3U] ;
};

#line 2208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_intr_set {
   struct be_cmd_req_hdr hdr ;
   u8 intr_enabled ;
   u8 rsvd[3U] ;
};

#line 2219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_if_desc {
   u32 if_id ;
   u32 cap_flags ;
   u32 en_flags ;
};

#line 2226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_get_iface_list {
   struct be_cmd_req_hdr hdr ;
};

#line 2230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_iface_list {
   struct be_cmd_req_hdr hdr ;
   u32 if_cnt ;
   struct be_if_desc if_desc ;
};

#line 2236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_set_ll_link {
   struct be_cmd_req_hdr hdr ;
   u32 link_config ;
};

#line 2243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_req_manage_iface_filters {
   struct be_cmd_req_hdr hdr ;
   u8 op ;
   u8 rsvd0 ;
   u8 flags ;
   u8 rsvd1 ;
   u32 tunnel_iface_id ;
   u32 target_iface_id ;
   u8 mac[6U] ;
   u16 vlan_tag ;
   u32 tenant_id ;
   u32 filter_id ;
   u32 cap_flags ;
   u32 cap_control_flags ;
};

#line 3924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
struct __anonstruct_desc_400 {
   struct be_pcie_res_desc pcie ;
   struct be_nic_res_desc nic_vft ;
};

#line 1556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_seeprom_read {
   struct be_cmd_req_hdr hdr ;
   u8 seeprom_data[1024U] ;
};

#line 2395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_ethtool_stat {
   char desc[32U] ;
   int type ;
   int size ;
   int offset ;
};

#line 368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_hw.h"
enum be_interrupt_mode {
    BE_INTERRUPT_MODE_MSIX = 0,
    BE_INTERRUPT_MODE_INTX = 1,
    BE_INTERRUPT_MODE_MSI = 2
};

#line 374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_hw.h"
struct __anonstruct_msix_1183 {
   int num_vectors ;
   int start_vector ;
   u32 vector_list[32U] ;
};

#line 374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_dev_info {
   u8 *db ;
   u64 unmapped_db ;
   u32 db_page_size ;
   u32 db_total_size ;
   u64 dpp_unmapped_addr ;
   u32 dpp_unmapped_len ;
   struct pci_dev *pdev ;
   struct net_device *netdev ;
   u8 mac_addr[6U] ;
   u32 dev_family ;
   enum be_interrupt_mode intr_mode ;
   struct __anonstruct_msix_1183 msix ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.h"
struct ocrdma_driver {
   unsigned char name[32U] ;
   u32 be_abi_version ;
   struct ocrdma_dev *(*add)(struct be_dev_info *) ;
   void (*remove)(struct ocrdma_dev *) ;
   void (*state_change_handler)(struct ocrdma_dev *, u32 ) ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short ushort;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11752 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_1417 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_1417 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 890 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 8  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/unaligned/packed_struct.h"
struct __una_u32 {
   u32 x ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cryptohash.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_opt_hdr {
   __u8 nexthdr ;
   __u8 hdrlen ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct icmpv6_echo {
   __be16 identifier ;
   __be16 sequence ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/icmpv6.h"
struct icmpv6_nd_advt {
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) reserved : 5 ;
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) override : 1 ;
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) solicited : 1 ;
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) router : 1 ;
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(24))) reserved2 : 24 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/icmpv6.h"
struct icmpv6_nd_ra {
   __u8 hop_limit ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) reserved : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) router_pref : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) home_agent : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) other : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) managed : 1 ;
   __be16 rt_lifetime ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/icmpv6.h"
union __anonunion_icmp6_dataun_1562 {
   __be32 un_data32[1U] ;
   __be16 un_data16[2U] ;
   __u8 un_data8[4U] ;
   struct icmpv6_echo u_echo ;
   struct icmpv6_nd_advt u_nd_advt ;
   struct icmpv6_nd_ra u_nd_ra ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/icmpv6.h"
struct icmp6hdr {
   __u8 icmp6_type ;
   __u8 icmp6_code ;
   __sum16 icmp6_cksum ;
   union __anonunion_icmp6_dataun_1562 icmp6_dataun ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/icmpv6.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct firmware {
   size_t size ;
   u8 const *data ;
   struct page **pages ;
   void *priv ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hwmon.h"
struct sensor_device_attribute {
   struct device_attribute dev_attr ;
   int index ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hwmon-sysfs.h"
struct be_eq_entry {
   u32 evt ;
};

#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_wrb {
   __le32 frag_pa_hi ;
   __le32 frag_pa_lo ;
   u32 rsvd0 ;
   __le32 frag_len ;
};

#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_hdr_wrb {
   __le32 dw[4U] ;
};

#line 281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_tx_compl {
   u32 dw[4U] ;
};

#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_rx_d {
   u32 fragpa_hi ;
   u32 fragpa_lo ;
};

#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_hw.h"
struct be_eth_rx_compl {
   u32 dw[4U] ;
};

#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
struct be_wrb_params {
   u32 features ;
   u16 vlan_tag ;
   u16 lso_mss ;
};

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_port_rxf_stats_v0 {
   u32 rx_bytes_lsd ;
   u32 rx_bytes_msd ;
   u32 rx_total_frames ;
   u32 rx_unicast_frames ;
   u32 rx_multicast_frames ;
   u32 rx_broadcast_frames ;
   u32 rx_crc_errors ;
   u32 rx_alignment_symbol_errors ;
   u32 rx_pause_frames ;
   u32 rx_control_frames ;
   u32 rx_in_range_errors ;
   u32 rx_out_range_errors ;
   u32 rx_frame_too_long ;
   u32 rx_address_filtered ;
   u32 rx_vlan_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rx_64_byte_packets ;
   u32 rx_65_127_byte_packets ;
   u32 rx_128_256_byte_packets ;
   u32 rx_256_511_byte_packets ;
   u32 rx_512_1023_byte_packets ;
   u32 rx_1024_1518_byte_packets ;
   u32 rx_1519_2047_byte_packets ;
   u32 rx_2048_4095_byte_packets ;
   u32 rx_4096_8191_byte_packets ;
   u32 rx_8192_9216_byte_packets ;
   u32 rx_ip_checksum_errs ;
   u32 rx_tcp_checksum_errs ;
   u32 rx_udp_checksum_errs ;
   u32 rx_non_rss_packets ;
   u32 rx_ipv4_packets ;
   u32 rx_ipv6_packets ;
   u32 rx_ipv4_bytes_lsd ;
   u32 rx_ipv4_bytes_msd ;
   u32 rx_ipv6_bytes_lsd ;
   u32 rx_ipv6_bytes_msd ;
   u32 rx_chute1_packets ;
   u32 rx_chute2_packets ;
   u32 rx_chute3_packets ;
   u32 rx_management_packets ;
   u32 rx_switched_unicast_packets ;
   u32 rx_switched_multicast_packets ;
   u32 rx_switched_broadcast_packets ;
   u32 tx_bytes_lsd ;
   u32 tx_bytes_msd ;
   u32 tx_unicastframes ;
   u32 tx_multicastframes ;
   u32 tx_broadcastframes ;
   u32 tx_pauseframes ;
   u32 tx_controlframes ;
   u32 tx_64_byte_packets ;
   u32 tx_65_127_byte_packets ;
   u32 tx_128_256_byte_packets ;
   u32 tx_256_511_byte_packets ;
   u32 tx_512_1023_byte_packets ;
   u32 tx_1024_1518_byte_packets ;
   u32 tx_1519_2047_byte_packets ;
   u32 tx_2048_4095_byte_packets ;
   u32 tx_4096_8191_byte_packets ;
   u32 tx_8192_9216_byte_packets ;
   u32 rx_fifo_overflow ;
   u32 rx_input_fifo_overflow ;
};

#line 722  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_rxf_stats_v0 {
   struct be_port_rxf_stats_v0 port[2U] ;
   u32 rx_drops_no_pbuf ;
   u32 rx_drops_no_txpb ;
   u32 rx_drops_no_erx_descr ;
   u32 rx_drops_no_tpre_descr ;
   u32 management_rx_port_packets ;
   u32 management_rx_port_bytes ;
   u32 management_rx_port_pause_frames ;
   u32 management_rx_port_errors ;
   u32 management_tx_port_packets ;
   u32 management_tx_port_bytes ;
   u32 management_tx_port_pause ;
   u32 management_rx_port_rxfifo_overflow ;
   u32 rx_drops_too_many_frags ;
   u32 rx_drops_invalid_ring ;
   u32 forwarded_packets ;
   u32 rx_drops_mtu ;
   u32 rsvd0[7U] ;
   u32 port0_jabber_events ;
   u32 port1_jabber_events ;
   u32 rsvd1[6U] ;
};

#line 746  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_erx_stats_v0 {
   u32 rx_drops_no_fragments[44U] ;
   u32 rsvd[4U] ;
};

#line 751  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_pmem_stats {
   u32 eth_red_drops ;
   u32 rsvd[5U] ;
};

#line 756  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_hw_stats_v0 {
   struct be_rxf_stats_v0 rxf ;
   u32 rsvd[48U] ;
   struct be_erx_stats_v0 erx ;
   struct be_pmem_stats pmem ;
};

#line 768  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_stats_v0 {
   struct be_cmd_resp_hdr hdr ;
   struct be_hw_stats_v0 hw_stats ;
};

#line 773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_pport_stats {
   u32 tx_packets_lo ;
   u32 tx_packets_hi ;
   u32 tx_unicast_packets_lo ;
   u32 tx_unicast_packets_hi ;
   u32 tx_multicast_packets_lo ;
   u32 tx_multicast_packets_hi ;
   u32 tx_broadcast_packets_lo ;
   u32 tx_broadcast_packets_hi ;
   u32 tx_bytes_lo ;
   u32 tx_bytes_hi ;
   u32 tx_unicast_bytes_lo ;
   u32 tx_unicast_bytes_hi ;
   u32 tx_multicast_bytes_lo ;
   u32 tx_multicast_bytes_hi ;
   u32 tx_broadcast_bytes_lo ;
   u32 tx_broadcast_bytes_hi ;
   u32 tx_discards_lo ;
   u32 tx_discards_hi ;
   u32 tx_errors_lo ;
   u32 tx_errors_hi ;
   u32 tx_pause_frames_lo ;
   u32 tx_pause_frames_hi ;
   u32 tx_pause_on_frames_lo ;
   u32 tx_pause_on_frames_hi ;
   u32 tx_pause_off_frames_lo ;
   u32 tx_pause_off_frames_hi ;
   u32 tx_internal_mac_errors_lo ;
   u32 tx_internal_mac_errors_hi ;
   u32 tx_control_frames_lo ;
   u32 tx_control_frames_hi ;
   u32 tx_packets_64_bytes_lo ;
   u32 tx_packets_64_bytes_hi ;
   u32 tx_packets_65_to_127_bytes_lo ;
   u32 tx_packets_65_to_127_bytes_hi ;
   u32 tx_packets_128_to_255_bytes_lo ;
   u32 tx_packets_128_to_255_bytes_hi ;
   u32 tx_packets_256_to_511_bytes_lo ;
   u32 tx_packets_256_to_511_bytes_hi ;
   u32 tx_packets_512_to_1023_bytes_lo ;
   u32 tx_packets_512_to_1023_bytes_hi ;
   u32 tx_packets_1024_to_1518_bytes_lo ;
   u32 tx_packets_1024_to_1518_bytes_hi ;
   u32 tx_packets_1519_to_2047_bytes_lo ;
   u32 tx_packets_1519_to_2047_bytes_hi ;
   u32 tx_packets_2048_to_4095_bytes_lo ;
   u32 tx_packets_2048_to_4095_bytes_hi ;
   u32 tx_packets_4096_to_8191_bytes_lo ;
   u32 tx_packets_4096_to_8191_bytes_hi ;
   u32 tx_packets_8192_to_9216_bytes_lo ;
   u32 tx_packets_8192_to_9216_bytes_hi ;
   u32 tx_lso_packets_lo ;
   u32 tx_lso_packets_hi ;
   u32 rx_packets_lo ;
   u32 rx_packets_hi ;
   u32 rx_unicast_packets_lo ;
   u32 rx_unicast_packets_hi ;
   u32 rx_multicast_packets_lo ;
   u32 rx_multicast_packets_hi ;
   u32 rx_broadcast_packets_lo ;
   u32 rx_broadcast_packets_hi ;
   u32 rx_bytes_lo ;
   u32 rx_bytes_hi ;
   u32 rx_unicast_bytes_lo ;
   u32 rx_unicast_bytes_hi ;
   u32 rx_multicast_bytes_lo ;
   u32 rx_multicast_bytes_hi ;
   u32 rx_broadcast_bytes_lo ;
   u32 rx_broadcast_bytes_hi ;
   u32 rx_unknown_protos ;
   u32 rsvd_69 ;
   u32 rx_discards_lo ;
   u32 rx_discards_hi ;
   u32 rx_errors_lo ;
   u32 rx_errors_hi ;
   u32 rx_crc_errors_lo ;
   u32 rx_crc_errors_hi ;
   u32 rx_alignment_errors_lo ;
   u32 rx_alignment_errors_hi ;
   u32 rx_symbol_errors_lo ;
   u32 rx_symbol_errors_hi ;
   u32 rx_pause_frames_lo ;
   u32 rx_pause_frames_hi ;
   u32 rx_pause_on_frames_lo ;
   u32 rx_pause_on_frames_hi ;
   u32 rx_pause_off_frames_lo ;
   u32 rx_pause_off_frames_hi ;
   u32 rx_frames_too_long_lo ;
   u32 rx_frames_too_long_hi ;
   u32 rx_internal_mac_errors_lo ;
   u32 rx_internal_mac_errors_hi ;
   u32 rx_undersize_packets ;
   u32 rx_oversize_packets ;
   u32 rx_fragment_packets ;
   u32 rx_jabbers ;
   u32 rx_control_frames_lo ;
   u32 rx_control_frames_hi ;
   u32 rx_control_frames_unknown_opcode_lo ;
   u32 rx_control_frames_unknown_opcode_hi ;
   u32 rx_in_range_errors ;
   u32 rx_out_of_range_errors ;
   u32 rx_address_filtered ;
   u32 rx_vlan_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_invalid_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rx_ip_checksum_errors ;
   u32 rx_tcp_checksum_errors ;
   u32 rx_udp_checksum_errors ;
   u32 rx_non_rss_packets ;
   u32 rsvd_111 ;
   u32 rx_ipv4_packets_lo ;
   u32 rx_ipv4_packets_hi ;
   u32 rx_ipv6_packets_lo ;
   u32 rx_ipv6_packets_hi ;
   u32 rx_ipv4_bytes_lo ;
   u32 rx_ipv4_bytes_hi ;
   u32 rx_ipv6_bytes_lo ;
   u32 rx_ipv6_bytes_hi ;
   u32 rx_nic_packets_lo ;
   u32 rx_nic_packets_hi ;
   u32 rx_tcp_packets_lo ;
   u32 rx_tcp_packets_hi ;
   u32 rx_iscsi_packets_lo ;
   u32 rx_iscsi_packets_hi ;
   u32 rx_management_packets_lo ;
   u32 rx_management_packets_hi ;
   u32 rx_switched_unicast_packets_lo ;
   u32 rx_switched_unicast_packets_hi ;
   u32 rx_switched_multicast_packets_lo ;
   u32 rx_switched_multicast_packets_hi ;
   u32 rx_switched_broadcast_packets_lo ;
   u32 rx_switched_broadcast_packets_hi ;
   u32 num_forwards_lo ;
   u32 num_forwards_hi ;
   u32 rx_fifo_overflow ;
   u32 rx_input_fifo_overflow ;
   u32 rx_drops_too_many_frags_lo ;
   u32 rx_drops_too_many_frags_hi ;
   u32 rx_drops_invalid_queue ;
   u32 rsvd_141 ;
   u32 rx_drops_mtu_lo ;
   u32 rx_drops_mtu_hi ;
   u32 rx_packets_64_bytes_lo ;
   u32 rx_packets_64_bytes_hi ;
   u32 rx_packets_65_to_127_bytes_lo ;
   u32 rx_packets_65_to_127_bytes_hi ;
   u32 rx_packets_128_to_255_bytes_lo ;
   u32 rx_packets_128_to_255_bytes_hi ;
   u32 rx_packets_256_to_511_bytes_lo ;
   u32 rx_packets_256_to_511_bytes_hi ;
   u32 rx_packets_512_to_1023_bytes_lo ;
   u32 rx_packets_512_to_1023_bytes_hi ;
   u32 rx_packets_1024_to_1518_bytes_lo ;
   u32 rx_packets_1024_to_1518_bytes_hi ;
   u32 rx_packets_1519_to_2047_bytes_lo ;
   u32 rx_packets_1519_to_2047_bytes_hi ;
   u32 rx_packets_2048_to_4095_bytes_lo ;
   u32 rx_packets_2048_to_4095_bytes_hi ;
   u32 rx_packets_4096_to_8191_bytes_lo ;
   u32 rx_packets_4096_to_8191_bytes_hi ;
   u32 rx_packets_8192_to_9216_bytes_lo ;
   u32 rx_packets_8192_to_9216_bytes_hi ;
};

#line 954  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct lancer_cmd_resp_pport_stats {
   struct be_cmd_resp_hdr hdr ;
   struct lancer_pport_stats pport_stats ;
};

#line 1277  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_comp {
   unsigned long offset ;
   int optype ;
   int size ;
   int img_type ;
};

#line 1284  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct image_hdr {
   u32 imageid ;
   u32 imageoffset ;
   u32 imagelength ;
   u32 image_checksum ;
   u8 image_version[32U] ;
};

#line 1304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_file_hdr_g3 {
   u8 sign[52U] ;
   u8 ufi_version[4U] ;
   u32 file_len ;
   u32 cksum ;
   u32 antidote ;
   u32 num_imgs ;
   u8 build[24U] ;
   u8 asic_type_rev ;
   u8 rsvd[31U] ;
};

#line 1321  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_hdr {
   u32 format_rev ;
   u32 cksum ;
   u32 antidote ;
   u32 num_images ;
   u8 id_string[128U] ;
   u32 rsvd[4U] ;
};

#line 1330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_hdr_g2 {
   u32 format_rev ;
   u32 cksum ;
   u32 antidote ;
   u32 build_num ;
   u8 id_string[128U] ;
   u32 rsvd[8U] ;
};

#line 1339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_entry {
   u32 type ;
   u32 offset ;
   u32 pad_size ;
   u32 image_size ;
   u32 cksum ;
   u32 entry_point ;
   u16 optype ;
   u16 rsvd0 ;
   u32 rsvd1 ;
   u8 ver_data[32U] ;
};

#line 1352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_info {
   u8 cookie[32U] ;
   struct flash_section_hdr fsec_hdr ;
   struct flash_section_entry fsec_entry[32U] ;
};

#line 1358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct flash_section_info_g2 {
   u8 cookie[32U] ;
   struct flash_section_hdr_g2 fsec_hdr ;
   struct flash_section_entry fsec_entry[32U] ;
};

#line 1832  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_port_rxf_stats_v1 {
   u32 rsvd0[12U] ;
   u32 rx_crc_errors ;
   u32 rx_alignment_symbol_errors ;
   u32 rx_pause_frames ;
   u32 rx_priority_pause_frames ;
   u32 rx_control_frames ;
   u32 rx_in_range_errors ;
   u32 rx_out_range_errors ;
   u32 rx_frame_too_long ;
   u32 rx_address_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rsvd1[10U] ;
   u32 rx_ip_checksum_errs ;
   u32 rx_tcp_checksum_errs ;
   u32 rx_udp_checksum_errs ;
   u32 rsvd2[7U] ;
   u32 rx_switched_unicast_packets ;
   u32 rx_switched_multicast_packets ;
   u32 rx_switched_broadcast_packets ;
   u32 rsvd3[3U] ;
   u32 tx_pauseframes ;
   u32 tx_priority_pauseframes ;
   u32 tx_controlframes ;
   u32 rsvd4[10U] ;
   u32 rxpp_fifo_overflow_drop ;
   u32 rx_input_fifo_overflow_drop ;
   u32 pmem_fifo_overflow_drop ;
   u32 jabber_events ;
   u32 rsvd5[3U] ;
};

#line 1870  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_rxf_stats_v1 {
   struct be_port_rxf_stats_v1 port[4U] ;
   u32 rsvd0[2U] ;
   u32 rx_drops_no_pbuf ;
   u32 rx_drops_no_txpb ;
   u32 rx_drops_no_erx_descr ;
   u32 rx_drops_no_tpre_descr ;
   u32 rsvd1[6U] ;
   u32 rx_drops_too_many_frags ;
   u32 rx_drops_invalid_ring ;
   u32 forwarded_packets ;
   u32 rx_drops_mtu ;
   u32 rsvd2[14U] ;
};

#line 1886  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_erx_stats_v1 {
   u32 rx_drops_no_fragments[68U] ;
   u32 rsvd[4U] ;
};

#line 1891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_port_rxf_stats_v2 {
   u32 rsvd0[10U] ;
   u32 roce_bytes_received_lsd ;
   u32 roce_bytes_received_msd ;
   u32 rsvd1[5U] ;
   u32 roce_frames_received ;
   u32 rx_crc_errors ;
   u32 rx_alignment_symbol_errors ;
   u32 rx_pause_frames ;
   u32 rx_priority_pause_frames ;
   u32 rx_control_frames ;
   u32 rx_in_range_errors ;
   u32 rx_out_range_errors ;
   u32 rx_frame_too_long ;
   u32 rx_address_filtered ;
   u32 rx_dropped_too_small ;
   u32 rx_dropped_too_short ;
   u32 rx_dropped_header_too_small ;
   u32 rx_dropped_tcp_length ;
   u32 rx_dropped_runt ;
   u32 rsvd2[10U] ;
   u32 rx_ip_checksum_errs ;
   u32 rx_tcp_checksum_errs ;
   u32 rx_udp_checksum_errs ;
   u32 rsvd3[7U] ;
   u32 rx_switched_unicast_packets ;
   u32 rx_switched_multicast_packets ;
   u32 rx_switched_broadcast_packets ;
   u32 rsvd4[3U] ;
   u32 tx_pauseframes ;
   u32 tx_priority_pauseframes ;
   u32 tx_controlframes ;
   u32 rsvd5[10U] ;
   u32 rxpp_fifo_overflow_drop ;
   u32 rx_input_fifo_overflow_drop ;
   u32 pmem_fifo_overflow_drop ;
   u32 jabber_events ;
   u32 rsvd6[3U] ;
   u32 rx_drops_payload_size ;
   u32 rx_drops_clipped_header ;
   u32 rx_drops_crc ;
   u32 roce_drops_payload_len ;
   u32 roce_drops_crc ;
   u32 rsvd7[19U] ;
};

#line 1937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_rxf_stats_v2 {
   struct be_port_rxf_stats_v2 port[4U] ;
   u32 rsvd0[2U] ;
   u32 rx_drops_no_pbuf ;
   u32 rx_drops_no_txpb ;
   u32 rx_drops_no_erx_descr ;
   u32 rx_drops_no_tpre_descr ;
   u32 rsvd1[6U] ;
   u32 rx_drops_too_many_frags ;
   u32 rx_drops_invalid_ring ;
   u32 forwarded_packets ;
   u32 rx_drops_mtu ;
   u32 rsvd2[35U] ;
};

#line 1952  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_hw_stats_v1 {
   struct be_rxf_stats_v1 rxf ;
   u32 rsvd0[48U] ;
   struct be_erx_stats_v1 erx ;
   struct be_pmem_stats pmem ;
   u32 rsvd1[18U] ;
};

#line 1965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_stats_v1 {
   struct be_cmd_resp_hdr hdr ;
   struct be_hw_stats_v1 hw_stats ;
};

#line 1970  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_erx_stats_v2 {
   u32 rx_drops_no_fragments[136U] ;
   u32 rsvd[3U] ;
};

#line 1975  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_hw_stats_v2 {
   struct be_rxf_stats_v2 rxf ;
   u32 rsvd0[48U] ;
   struct be_erx_stats_v2 erx ;
   struct be_pmem_stats pmem ;
   u32 rsvd1[18U] ;
};

#line 1988  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
struct be_cmd_resp_get_stats_v2 {
   struct be_cmd_resp_hdr hdr ;
   struct be_hw_stats_v2 hw_stats ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_free_irq_4 {
   int arg0 ;
   int signal_pending ;
};

#line 18  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_12 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_14 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 31  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_11 {
   struct net_device *arg0 ;
   int signal_pending ;
};
unsigned short __builtin_bswap16(unsigned short);

void __builtin_unreachable(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/fvtp/.tmp_be_cmds.c"
void ldv_inline_asm(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 8 
void ldv_atomic_dec(atomic_t *v);


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls(int x)
{
  int __retres;
  int r;
  
#line 440 
  ldv_inline_asm();
  
#line 464 
  __retres = r + 1;
  
#line 464 
  return __retres;
}


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  int __retres;
  int tmp;
  
#line 34 
  tmp = fls((int)n);
  
#line 34 
  __retres = tmp + -1;
  
#line 34 
  return __retres;
}


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 63 
int memcmp(void const *, void const *, size_t);


#line 65 
char *strcpy(char *, char const *);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 98 
static void atomic_inc(atomic_t *v);


#line 114 
static void atomic_dec(atomic_t *v);


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
void __local_bh_disable_ip(unsigned long, unsigned int);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  __here_0: 
#line 18 
  ;
  
#line 18 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  
#line 20 
  return;
}


#line 22 
void __local_bh_enable_ip(unsigned long, unsigned int);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  __here_0: 
#line 31 
  ;
  
#line 31 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  
#line 33 
  return;
}


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 30 
void _raw_spin_lock_bh(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 42 
void _raw_spin_unlock_bh(raw_spinlock_t *);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_77(spinlock_t *lock);


#line 359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  
#line 361 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 362 
  return;
}


#line 387 
static void ldv_spin_lock_bh_73(spinlock_t *lock);


#line 391 
static void ldv_spin_lock_bh_75(spinlock_t *lock);


#line 395 
static void ldv_spin_lock_bh_79(spinlock_t *lock);


#line 399 
static void ldv_spin_lock_bh_89(spinlock_t *lock);


#line 403 
static void ldv_spin_lock_bh_91(spinlock_t *lock);


#line 407 
static void ldv_spin_lock_bh_93(spinlock_t *lock);


#line 411 
static void ldv_spin_lock_bh_101(spinlock_t *lock);


#line 415 
static void ldv_spin_lock_bh_105(spinlock_t *lock);


#line 419 
static void ldv_spin_lock_bh_107(spinlock_t *lock);


#line 423 
static void ldv_spin_lock_bh_109(spinlock_t *lock);


#line 427 
static void ldv_spin_lock_bh_111(spinlock_t *lock);


#line 431 
static void ldv_spin_lock_bh_113(spinlock_t *lock);


#line 435 
static void ldv_spin_lock_bh_115(spinlock_t *lock);


#line 439 
static void ldv_spin_lock_bh_117(spinlock_t *lock);


#line 443 
static void ldv_spin_lock_bh_119(spinlock_t *lock);


#line 447 
static void ldv_spin_lock_bh_121(spinlock_t *lock);


#line 451 
static void ldv_spin_lock_bh_123(spinlock_t *lock);


#line 455 
static void ldv_spin_lock_bh_125(spinlock_t *lock);


#line 459 
static void ldv_spin_lock_bh_127(spinlock_t *lock);


#line 463 
static void ldv_spin_lock_bh_129(spinlock_t *lock);


#line 467 
static void ldv_spin_lock_bh_131(spinlock_t *lock);


#line 471 
static void ldv_spin_lock_bh_137(spinlock_t *lock);


#line 475 
static void ldv_spin_lock_bh_139(spinlock_t *lock);


#line 479 
static void ldv_spin_lock_bh_141(spinlock_t *lock);


#line 483 
static void ldv_spin_lock_bh_143(spinlock_t *lock);


#line 487 
static void ldv_spin_lock_bh_145(spinlock_t *lock);


#line 491 
static void ldv_spin_lock_bh_148(spinlock_t *lock);


#line 495 
static void ldv_spin_lock_bh_150(spinlock_t *lock);


#line 499 
static void ldv_spin_lock_bh_152(spinlock_t *lock);


#line 503 
static void ldv_spin_lock_bh_155(spinlock_t *lock);


#line 507 
static void ldv_spin_lock_bh_157(spinlock_t *lock);


#line 511 
static void ldv_spin_lock_bh_159(spinlock_t *lock);


#line 515 
static void ldv_spin_lock_bh_161(spinlock_t *lock);


#line 519 
static void ldv_spin_lock_bh_164(spinlock_t *lock);


#line 523 
static void ldv_spin_lock_bh_166(spinlock_t *lock);


#line 527 
static void ldv_spin_lock_bh_168(spinlock_t *lock);


#line 531 
static void ldv_spin_lock_bh_170(spinlock_t *lock);


#line 535 
static void ldv_spin_lock_bh_176(spinlock_t *lock);


#line 539 
static void ldv_spin_lock_bh_178(spinlock_t *lock);


#line 543 
static void ldv_spin_lock_bh_180(spinlock_t *lock);


#line 547 
static void ldv_spin_lock_bh_182(spinlock_t *lock);


#line 551 
static void ldv_spin_lock_bh_184(spinlock_t *lock);


#line 555 
static void ldv_spin_lock_bh_186(spinlock_t *lock);


#line 559 
static void ldv_spin_lock_bh_192(spinlock_t *lock);


#line 563 
static void ldv_spin_lock_bh_198(spinlock_t *lock);


#line 567 
static void ldv_spin_lock_bh_200(spinlock_t *lock);


#line 571 
static void ldv_spin_lock_bh_202(spinlock_t *lock);


#line 575 
static void ldv_spin_lock_bh_208(spinlock_t *lock);


#line 579 
static void ldv_spin_lock_bh_210(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_78(spinlock_t *lock);


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  
#line 410 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 411 
  return;
}


#line 440 
static void ldv_spin_unlock_bh_74(spinlock_t *lock);


#line 444 
static void ldv_spin_unlock_bh_76(spinlock_t *lock);


#line 448 
static void ldv_spin_unlock_bh_81(spinlock_t *lock);


#line 452 
static void ldv_spin_unlock_bh_90(spinlock_t *lock);


#line 456 
static void ldv_spin_unlock_bh_92(spinlock_t *lock);


#line 460 
static void ldv_spin_unlock_bh_94(spinlock_t *lock);


#line 464 
static void ldv_spin_unlock_bh_102(spinlock_t *lock);


#line 468 
static void ldv_spin_unlock_bh_106(spinlock_t *lock);


#line 472 
static void ldv_spin_unlock_bh_108(spinlock_t *lock);


#line 476 
static void ldv_spin_unlock_bh_110(spinlock_t *lock);


#line 480 
static void ldv_spin_unlock_bh_112(spinlock_t *lock);


#line 484 
static void ldv_spin_unlock_bh_114(spinlock_t *lock);


#line 488 
static void ldv_spin_unlock_bh_116(spinlock_t *lock);


#line 492 
static void ldv_spin_unlock_bh_118(spinlock_t *lock);


#line 496 
static void ldv_spin_unlock_bh_120(spinlock_t *lock);


#line 500 
static void ldv_spin_unlock_bh_122(spinlock_t *lock);


#line 504 
static void ldv_spin_unlock_bh_124(spinlock_t *lock);


#line 508 
static void ldv_spin_unlock_bh_126(spinlock_t *lock);


#line 512 
static void ldv_spin_unlock_bh_128(spinlock_t *lock);


#line 516 
static void ldv_spin_unlock_bh_130(spinlock_t *lock);


#line 520 
static void ldv_spin_unlock_bh_132(spinlock_t *lock);


#line 524 
static void ldv_spin_unlock_bh_138(spinlock_t *lock);


#line 528 
static void ldv_spin_unlock_bh_140(spinlock_t *lock);


#line 532 
static void ldv_spin_unlock_bh_142(spinlock_t *lock);


#line 536 
static void ldv_spin_unlock_bh_144(spinlock_t *lock);


#line 540 
static void ldv_spin_unlock_bh_146(spinlock_t *lock);


#line 544 
static void ldv_spin_unlock_bh_147(spinlock_t *lock);


#line 548 
static void ldv_spin_unlock_bh_149(spinlock_t *lock);


#line 552 
static void ldv_spin_unlock_bh_151(spinlock_t *lock);


#line 556 
static void ldv_spin_unlock_bh_153(spinlock_t *lock);


#line 560 
static void ldv_spin_unlock_bh_154(spinlock_t *lock);


#line 564 
static void ldv_spin_unlock_bh_156(spinlock_t *lock);


#line 568 
static void ldv_spin_unlock_bh_158(spinlock_t *lock);


#line 572 
static void ldv_spin_unlock_bh_160(spinlock_t *lock);


#line 576 
static void ldv_spin_unlock_bh_162(spinlock_t *lock);


#line 580 
static void ldv_spin_unlock_bh_163(spinlock_t *lock);


#line 584 
static void ldv_spin_unlock_bh_165(spinlock_t *lock);


#line 588 
static void ldv_spin_unlock_bh_167(spinlock_t *lock);


#line 592 
static void ldv_spin_unlock_bh_169(spinlock_t *lock);


#line 596 
static void ldv_spin_unlock_bh_171(spinlock_t *lock);


#line 600 
static void ldv_spin_unlock_bh_177(spinlock_t *lock);


#line 604 
static void ldv_spin_unlock_bh_179(spinlock_t *lock);


#line 608 
static void ldv_spin_unlock_bh_181(spinlock_t *lock);


#line 612 
static void ldv_spin_unlock_bh_183(spinlock_t *lock);


#line 616 
static void ldv_spin_unlock_bh_185(spinlock_t *lock);


#line 620 
static void ldv_spin_unlock_bh_187(spinlock_t *lock);


#line 624 
static void ldv_spin_unlock_bh_193(spinlock_t *lock);


#line 628 
static void ldv_spin_unlock_bh_199(spinlock_t *lock);


#line 632 
static void ldv_spin_unlock_bh_201(spinlock_t *lock);


#line 636 
static void ldv_spin_unlock_bh_203(spinlock_t *lock);


#line 640 
static void ldv_spin_unlock_bh_209(spinlock_t *lock);


#line 644 
static void ldv_spin_unlock_bh_211(spinlock_t *lock);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_80(struct mutex *ldv_func_arg1);


#line 43 
static int ldv_mutex_lock_interruptible_83(struct mutex *ldv_func_arg1);


#line 47 
static int ldv_mutex_lock_interruptible_85(struct mutex *ldv_func_arg1);


#line 51 
static int ldv_mutex_lock_interruptible_87(struct mutex *ldv_func_arg1);


#line 55 
static int ldv_mutex_lock_interruptible_95(struct mutex *ldv_func_arg1);


#line 59 
static int ldv_mutex_lock_interruptible_97(struct mutex *ldv_func_arg1);


#line 63 
static int ldv_mutex_lock_interruptible_99(struct mutex *ldv_func_arg1);


#line 67 
static int ldv_mutex_lock_interruptible_103(struct mutex *ldv_func_arg1);


#line 71 
static int ldv_mutex_lock_interruptible_133(struct mutex *ldv_func_arg1);


#line 75 
static int ldv_mutex_lock_interruptible_135(struct mutex *ldv_func_arg1);


#line 79 
static int ldv_mutex_lock_interruptible_172(struct mutex *ldv_func_arg1);


#line 83 
static int ldv_mutex_lock_interruptible_174(struct mutex *ldv_func_arg1);


#line 87 
static int ldv_mutex_lock_interruptible_188(struct mutex *ldv_func_arg1);


#line 91 
static int ldv_mutex_lock_interruptible_190(struct mutex *ldv_func_arg1);


#line 95 
static int ldv_mutex_lock_interruptible_194(struct mutex *ldv_func_arg1);


#line 99 
static int ldv_mutex_lock_interruptible_196(struct mutex *ldv_func_arg1);


#line 103 
static int ldv_mutex_lock_interruptible_204(struct mutex *ldv_func_arg1);


#line 107 
static int ldv_mutex_lock_interruptible_206(struct mutex *ldv_func_arg1);


#line 111 
void ldv_mutex_model_lock(struct mutex *, char *);


#line 113 
void ldv_mutex_model_unlock(struct mutex *, char *);


#line 146 
void ldv_spin_model_lock(char *);


#line 147 
void ldv_spin_model_unlock(char *);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_82(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_84(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1);


#line 205 
static void ldv_mutex_unlock_88(struct mutex *ldv_func_arg1);


#line 209 
static void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1);


#line 213 
static void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1);


#line 217 
static void ldv_mutex_unlock_100(struct mutex *ldv_func_arg1);


#line 221 
static void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1);


#line 225 
static void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1);


#line 229 
static void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1);


#line 233 
static void ldv_mutex_unlock_173(struct mutex *ldv_func_arg1);


#line 237 
static void ldv_mutex_unlock_175(struct mutex *ldv_func_arg1);


#line 241 
static void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1);


#line 245 
static void ldv_mutex_unlock_191(struct mutex *ldv_func_arg1);


#line 249 
static void ldv_mutex_unlock_195(struct mutex *ldv_func_arg1);


#line 253 
static void ldv_mutex_unlock_197(struct mutex *ldv_func_arg1);


#line 257 
static void ldv_mutex_unlock_205(struct mutex *ldv_func_arg1);


#line 261 
static void ldv_mutex_unlock_207(struct mutex *ldv_func_arg1);


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/completion.h"
void wait_for_completion(struct completion *);


#line 95 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);


#line 106 
void complete(struct completion *);


#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
unsigned long __msecs_to_jiffies(unsigned int const);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int const m)
{
  unsigned long __retres;
  
#line 301 
  __retres = (unsigned long)(((long)m + 3L) / 4L);
  
#line 301 
  return __retres;
}


#line 354  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int const m)
{
  unsigned long __retres;
  
#line 356 
  if (0 != 0) {
    unsigned long tmp;
    
#line 357 
    if ((int)m < 0) {
      
#line 358 
      __retres = 4611686018427387902UL;
      
#line 358 
      goto return_label;
    }
    else ;
    
#line 359 
    tmp = _msecs_to_jiffies(m);
    
#line 359 
    __retres = tmp;
    
#line 359 
    goto return_label;
  }
  else {
    unsigned long tmp_0;
    
#line 361 
    tmp_0 = __msecs_to_jiffies(m);
    
#line 361 
    __retres = tmp_0;
    
#line 361 
    goto return_label;
  }
  return_label: 
#line 356 
                return __retres;
}


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/iomap.h"
unsigned int ioread32(void *);


#line 37 
void iowrite32(u32, void *);


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void dev_err(struct device const *, char const * , ...);


#line 1085 
void dev_warn(struct device const *, char const * , ...);


#line 1089 
void _dev_info(struct device const *, char const * , ...);


#line 863  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_bus_read_config_dword(struct pci_bus *, unsigned int, int, u32 *);


#line 891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_dword(struct pci_dev const *dev, int where, u32 *val)
{
  int tmp;
  
#line 894 
  tmp = pci_bus_read_config_dword(dev->bus,dev->devfn,where,val);
  
#line 894 
  return tmp;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static void *dma_zalloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t flag)
{
  
#line 186 
  void *ret = dma_alloc_attrs(dev,size,dma_handle,flag | 32768U,(struct dma_attrs *)0);
  
#line 188 
  return ret;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __const_udelay(unsigned long);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 47 
unsigned long msleep_interruptible(unsigned int);


#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
__inline static void ssleep(unsigned int seconds)
{
  
#line 52 
  msleep(seconds * 1000U);
  
#line 53 
  return;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 3049 
void netif_carrier_off(struct net_device *);


#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  
#line 246 
  memset((void *)addr,0,6UL);
  
#line 247 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.h"
int be_roce_mcc_cmd(void *netdev_handle, void *wrb_payload, int wrb_payload_size, u16 *cmd_status, u16 *ext_status);


#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static u32 MODULO(u16 val, u16 limit)
{
  u32 __retres;
  
#line 130 
  if ((long)(((int)limit & ((int)limit + -1)) != 0) != 0L) {
    
#line 132 
    ldv_inline_asm();
    
#line 130 
    ;
  }
  else ;
  
#line 131 
  __retres = (unsigned int)((int)val & ((int)limit + -1));
  
#line 131 
  return __retres;
}


#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void index_inc(u16 *index, u16 limit)
{
  u32 tmp;
  
#line 141 
  tmp = MODULO((unsigned short)((int)((unsigned int)*index + 1U)),(unsigned short)((int)limit));
  
#line 141 
  *index = (unsigned short)tmp;
  
#line 142 
  return;
}


#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void *queue_head_node(struct be_queue_info *q)
{
  void *__retres;
  
#line 146 
  __retres = q->dma_mem.va + (int)q->head * (int)q->entry_size;
  
#line 146 
  return __retres;
}


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void *queue_tail_node(struct be_queue_info *q)
{
  void *__retres;
  
#line 151 
  __retres = q->dma_mem.va + (int)q->tail * (int)q->entry_size;
  
#line 151 
  return __retres;
}


#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void *queue_index_node(struct be_queue_info *q, u16 index)
{
  void *__retres;
  
#line 156 
  __retres = q->dma_mem.va + (int)index * (int)q->entry_size;
  
#line 156 
  return __retres;
}


#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void queue_head_inc(struct be_queue_info *q)
{
  
#line 161 
  index_inc(& q->head,(unsigned short)((int)q->len));
  
#line 162 
  return;
}


#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void index_dec(u16 *index, u16 limit)
{
  u32 tmp;
  
#line 166 
  tmp = MODULO((unsigned short)((int)((unsigned int)*index + 65535U)),(unsigned short)((int)limit));
  
#line 166 
  *index = (unsigned short)tmp;
  
#line 167 
  return;
}


#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void queue_tail_inc(struct be_queue_info *q)
{
  
#line 171 
  index_inc(& q->tail,(unsigned short)((int)q->len));
  
#line 172 
  return;
}


#line 701  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static u32 amap_mask(u32 bitsize)
{
  unsigned int tmp;
  
#line 703 
  if (bitsize != 32U) 
#line 703 
                      tmp = (unsigned int)((1 << bitsize) + -1); else 
                                                                   
#line 703 
                                                                   tmp = 4294967295U;
  
#line 703 
  return tmp;
}


#line 707  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void amap_set(void *ptr, u32 dw_offset, u32 mask, u32 offset, u32 value)
{
  
#line 709 
  u32 *dw = (u32 *)ptr + dw_offset;
  
#line 710 
  *dw &= ~ (mask << offset);
  
#line 711 
  *dw |= (mask & value) << offset;
  
#line 712 
  return;
}


#line 721  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static u32 amap_get(void *ptr, u32 dw_offset, u32 mask, u32 offset)
{
  u32 __retres;
  
#line 723 
  u32 *dw = (u32 *)ptr;
  
#line 724 
  __retres = (*(dw + dw_offset) >> offset) & mask;
  
#line 724 
  return __retres;
}


#line 747  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void swap_dws(void *wrb, int len)
{
  
#line 749 
  return;
}


#line 798  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static u8 be_check_error(struct be_adapter *adapter, u32 err_type)
{
  u8 __retres;
  
#line 800 
  __retres = (unsigned char)((int)adapter->err_flags & (int)((unsigned char)err_type));
  
#line 800 
  return __retres;
}


#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void be_set_error(struct be_adapter *adapter, int err_type)
{
  
#line 805 
  struct net_device *netdev = adapter->netdev;
  
#line 807 
  adapter->err_flags = (unsigned char)((int)adapter->err_flags | err_type);
  
#line 808 
  netif_carrier_off(netdev);
  
#line 810 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: Link down\n",(char *)(& netdev->name));
  
#line 811 
  return;
}


#line 823 
void be_cq_notify(struct be_adapter *adapter, u16 qid, bool arm, u16 num_popped);


#line 825 
void be_link_status_update(struct be_adapter *adapter, u8 link_status);


#line 826 
void be_parse_stats(struct be_adapter *adapter);


#line 2148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
__inline static bool be_is_mc(struct be_adapter *adapter)
{
  bool __retres;
  
#line 2150 
  __retres = (_Bool)((unsigned int)adapter->mc_type > 1U);
  
#line 2150 
  return __retres;
}


#line 2265 
int be_fw_wait_ready(struct be_adapter *adapter);


#line 2266 
int be_cmd_mac_addr_query(struct be_adapter *adapter, u8 *mac_addr, bool permanent, u32 if_handle, u32 pmac_id);


#line 2268 
int be_cmd_pmac_add(struct be_adapter *adapter, u8 *mac_addr, u32 if_id, u32 *pmac_id, u32 domain);


#line 2270 
int be_cmd_pmac_del(struct be_adapter *adapter, u32 if_id, int pmac_id, u32 dom);


#line 2272 
int be_cmd_if_create(struct be_adapter *adapter, u32 cap_flags, u32 en_flags, u32 *if_handle, u32 domain);


#line 2274 
int be_cmd_if_destroy(struct be_adapter *adapter, int interface_id, u32 domain);


#line 2275 
int be_cmd_eq_create(struct be_adapter *adapter, struct be_eq_obj *eqo);


#line 2276 
int be_cmd_cq_create(struct be_adapter *adapter, struct be_queue_info *cq, struct be_queue_info *eq, bool no_delay, int coalesce_wm);


#line 2279 
int be_cmd_mccq_create(struct be_adapter *adapter, struct be_queue_info *mccq, struct be_queue_info *cq);


#line 2281 
int be_cmd_txq_create(struct be_adapter *adapter, struct be_tx_obj *txo);


#line 2282 
int be_cmd_rxq_create(struct be_adapter *adapter, struct be_queue_info *rxq, u16 cq_id, u16 frag_size, u32 if_id, u32 rss, u8 *rss_id);


#line 2284 
int be_cmd_q_destroy(struct be_adapter *adapter, struct be_queue_info *q, int queue_type);


#line 2286 
int be_cmd_rxq_destroy(struct be_adapter *adapter, struct be_queue_info *q);


#line 2287 
int be_cmd_link_status_query(struct be_adapter *adapter, u16 *link_speed, u8 *link_status, u32 dom);


#line 2290 
int be_cmd_get_stats(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd);


#line 2291 
int lancer_cmd_get_pport_stats(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd);


#line 2293 
int be_cmd_get_fw_ver(struct be_adapter *adapter);


#line 2294 
int be_cmd_modify_eqd(struct be_adapter *adapter, struct be_set_eqd *set_eqd, int num);


#line 2295 
int be_cmd_vlan_config(struct be_adapter *adapter, u32 if_id, u16 *vtag_array, u32 num, u32 domain);


#line 2297 
int be_cmd_rx_filter(struct be_adapter *adapter, u32 flags, u32 value);


#line 2298 
int be_cmd_set_flow_control(struct be_adapter *adapter, u32 tx_fc, u32 rx_fc);


#line 2299 
int be_cmd_get_flow_control(struct be_adapter *adapter, u32 *tx_fc, u32 *rx_fc);


#line 2300 
int be_cmd_query_fw_cfg(struct be_adapter *adapter);


#line 2301 
int be_cmd_reset_function(struct be_adapter *adapter);


#line 2302 
int be_cmd_rss_config(struct be_adapter *adapter, u8 *rsstable, u32 rss_hash_opts, u16 table_size, u8 const *rss_hkey);


#line 2304 
int be_process_mcc(struct be_adapter *adapter);


#line 2305 
int be_cmd_set_beacon_state(struct be_adapter *adapter, u8 port_num, u8 bcn, u8 sts, u8 state);


#line 2307 
int be_cmd_get_beacon_state(struct be_adapter *adapter, u8 port_num, u32 *state);


#line 2309 
int be_cmd_read_port_transceiver_data(struct be_adapter *adapter, u8 page_num, u8 *data);


#line 2311 
int be_cmd_query_cable_type(struct be_adapter *adapter);


#line 2312 
int be_cmd_query_sfp_info(struct be_adapter *adapter);


#line 2313 
int be_cmd_write_flashrom(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 flash_type, u32 flash_opcode, u32 img_offset, u32 buf_size);


#line 2316 
int lancer_cmd_write_object(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 data_size, u32 data_offset, char const *obj_name, u32 *data_written, u8 *change_status, u8 *addn_status);


#line 2320 
int lancer_cmd_read_object(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 data_size, u32 data_offset, char const *obj_name, u32 *data_read, u32 *eof, u8 *addn_status);


#line 2323 
int lancer_cmd_delete_object(struct be_adapter *adapter, char const *obj_name);


#line 2324 
int be_cmd_get_flash_crc(struct be_adapter *adapter, u8 *flashed_crc, u16 img_optype, u32 img_offset, u32 crc_offset);


#line 2326 
int be_cmd_enable_magic_wol(struct be_adapter *adapter, u8 *mac, struct be_dma_mem *nonemb_cmd);


#line 2328 
int be_cmd_fw_init(struct be_adapter *adapter);


#line 2329 
int be_cmd_fw_clean(struct be_adapter *adapter);


#line 2330 
void be_async_mcc_enable(struct be_adapter *adapter);


#line 2331 
void be_async_mcc_disable(struct be_adapter *adapter);


#line 2332 
int be_cmd_loopback_test(struct be_adapter *adapter, u32 port_num, u32 loopback_type, u32 pkt_size, u32 num_pkts, u64 pattern);


#line 2335 
int be_cmd_ddr_dma_test(struct be_adapter *adapter, u64 pattern, u32 byte_cnt, struct be_dma_mem *cmd);


#line 2337 
int be_cmd_get_seeprom_data(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd);


#line 2339 
int be_cmd_set_loopback(struct be_adapter *adapter, u8 port_num, u8 loopback_type, u8 enable);


#line 2341 
int be_cmd_get_phy_info(struct be_adapter *adapter);


#line 2342 
int be_cmd_config_qos(struct be_adapter *adapter, u32 max_rate, u16 link_speed, u8 domain);


#line 2344 
void be_detect_error(struct be_adapter *adapter);


#line 2345 
int be_cmd_get_die_temperature(struct be_adapter *adapter);


#line 2346 
int be_cmd_get_cntl_attributes(struct be_adapter *adapter);


#line 2347 
int be_cmd_req_native_mode(struct be_adapter *adapter);


#line 2348 
int be_cmd_get_reg_len(struct be_adapter *adapter, u32 *log_size);


#line 2349 
int be_cmd_get_regs(struct be_adapter *adapter, u32 buf_len, void *buf);


#line 2350 
int be_cmd_get_fn_privileges(struct be_adapter *adapter, u32 *privilege, u32 domain);


#line 2352 
int be_cmd_set_fn_privileges(struct be_adapter *adapter, u32 privileges, u32 domain);


#line 2354 
int be_cmd_get_mac_from_list(struct be_adapter *adapter, u8 *mac, bool *pmac_id_valid, u32 *pmac_id, u32 if_handle, u8 domain);


#line 2357 
int be_cmd_get_active_mac(struct be_adapter *adapter, u32 curr_pmac_id, u8 *mac, u32 if_handle, bool active, u32 domain);


#line 2359 
int be_cmd_get_perm_mac(struct be_adapter *adapter, u8 *mac);


#line 2360 
int be_cmd_set_mac_list(struct be_adapter *adapter, u8 *mac_array, u8 mac_count, u32 domain);


#line 2362 
int be_cmd_set_mac(struct be_adapter *adapter, u8 *mac, int if_id, u32 dom);


#line 2363 
int be_cmd_set_hsw_config(struct be_adapter *adapter, u16 pvid, u32 domain, u16 intf_id, u16 hsw_mode, u8 spoofchk);


#line 2365 
int be_cmd_get_hsw_config(struct be_adapter *adapter, u16 *pvid, u32 domain, u16 intf_id, u8 *mode, bool *spoofchk);


#line 2367 
int be_cmd_get_acpi_wol_cap(struct be_adapter *adapter);


#line 2368 
int be_cmd_set_fw_log_level(struct be_adapter *adapter, u32 level);


#line 2369 
int be_cmd_get_fw_log_level(struct be_adapter *adapter);


#line 2370 
int be_cmd_get_ext_fat_capabilites(struct be_adapter *adapter, struct be_dma_mem *cmd);


#line 2372 
int be_cmd_set_ext_fat_capabilites(struct be_adapter *adapter, struct be_dma_mem *cmd, struct be_fat_conf_params *configs);


#line 2375 
int lancer_physdev_ctrl(struct be_adapter *adapter, u32 mask);


#line 2376 
int lancer_initiate_dump(struct be_adapter *adapter);


#line 2377 
int lancer_delete_dump(struct be_adapter *adapter);


#line 2378 
bool dump_present(struct be_adapter *adapter);


#line 2380 
int be_cmd_query_port_name(struct be_adapter *adapter);


#line 2381 
int be_cmd_get_func_config(struct be_adapter *adapter, struct be_resources *res);


#line 2383 
int be_cmd_get_profile_config(struct be_adapter *adapter, struct be_resources *res, u8 query, u8 domain);


#line 2385 
int be_cmd_get_active_profile(struct be_adapter *adapter, u16 *profile_id);


#line 2386 
int be_cmd_get_if_id(struct be_adapter *adapter, struct be_vf_cfg *vf_cfg, int vf_num);


#line 2388 
int be_cmd_enable_vf(struct be_adapter *adapter, u8 domain);


#line 2389 
int be_cmd_intr_set(struct be_adapter *adapter, bool intr_enable);


#line 2390 
int be_cmd_set_logical_link_config(struct be_adapter *adapter, int link_state, u8 domain);


#line 2392 
int be_cmd_set_vxlan_port(struct be_adapter *adapter, __be16 port);


#line 2393 
int be_cmd_manage_iface(struct be_adapter *adapter, u32 iface, u8 op);


#line 2394 
int be_cmd_set_sriov_config(struct be_adapter *adapter, struct be_resources pool_res, u16 num_vfs_0, u16 num_vf_qs);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static char *be_port_misconfig_evt_desc[5U] = {(char *)"A valid SFP module detected", (char *)"Optics faulted/ incorrectly installed/ not installed.", (char *)"Optics of two types installed.", (char *)"Incompatible optics.", (char *)"Unknown port SFP status"};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static char *be_port_misconfig_remedy_desc[5U] = {(char *)"", (char *)"Reseat optics. If issue not resolved, replace", (char *)"Remove one optic or install matching pair of optics", (char *)"Replace with compatible optics for card to function", (char *)""};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_cmd_priv_map cmd_priv_map[5U] = {{.opcode = (unsigned char)12U, .subsystem = (unsigned char)3U, .priv_mask = 1800U}, {.opcode = (unsigned char)37U, .subsystem = (unsigned char)1U, .priv_mask = 1794U}, {.opcode = (unsigned char)36U, .subsystem = (unsigned char)1U, .priv_mask = 1800U}, {.opcode = (unsigned char)18U, .subsystem = (unsigned char)3U, .priv_mask = 1800U}, {.opcode = (unsigned char)102U, .subsystem = (unsigned char)1U, .priv_mask = 1800U}};

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool be_cmd_allowed(struct be_adapter *adapter, u8 opcode, u8 subsystem)
{
  bool __retres;
  int i;
  
#line 74 
  int num_entries = 5;
  
#line 75 
  u32 cmd_privileges = adapter->cmd_privileges;
  
#line 77 
  i = 0;
  
#line 77 
  goto ldv_58451;
  ldv_58450: 
#line 78 
  ;
  
#line 78 
  if ((int)cmd_priv_map[i].opcode == (int)opcode && (int)cmd_priv_map[i].subsystem == (int)subsystem) {
    
#line 80 
    if ((cmd_priv_map[i].priv_mask & cmd_privileges) == 0U) {
      
#line 81 
      __retres = (_Bool)0;
      
#line 81 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 77 
  i += 1;
  ldv_58451: 
#line 78 
  ;
  
#line 77 
  if (i < num_entries) 
#line 79 
                       goto ldv_58450; else 
#line 82 
                                            goto ldv_58452;
  ldv_58452: 
#line 83 
  ;
  
#line 83 
  __retres = (_Bool)1;
  return_label: 
#line 83 
                return __retres;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static void *embedded_payload(struct be_mcc_wrb *wrb)
{
  void *__retres;
  
#line 88 
  __retres = (void *)(& wrb->payload.embedded_payload);
  
#line 88 
  return __retres;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_mcc_notify(struct be_adapter *adapter)
{
  u8 tmp;
  
#line 93 
  struct be_queue_info *mccq = & adapter->mcc_obj.q;
  
#line 94 
  u32 val = 0U;
  
#line 96 
  tmp = be_check_error(adapter,7U);
  
#line 96 
  if ((unsigned int)tmp != 0U) 
#line 97 
                               goto return_label; else ;
  
#line 99 
  val = ((unsigned int)mccq->id & 2047U) | val;
  
#line 100 
  val |= 65536U;
  
#line 101 
  ldv_inline_asm();
  
#line 103 
  iowrite32(val,(void *)(adapter->db + 320U));
  return_label: 
#line 104 
                return;
}


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool be_mcc_compl_is_new(struct be_mcc_compl *compl)
{
  bool __retres;
  u32 flags;
  
#line 113 
  if (compl->flags != 0U) {
    
#line 114 
    flags = compl->flags;
    
#line 115 
    if (flags < (u32)0) {
      
#line 116 
      compl->flags = flags;
      
#line 117 
      __retres = (_Bool)1;
      
#line 117 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 120 
  __retres = (_Bool)0;
  return_label: 
#line 120 
                return __retres;
}


#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static void be_mcc_compl_use(struct be_mcc_compl *compl)
{
  
#line 126 
  compl->flags = 0U;
  
#line 127 
  return;
}


#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_cmd_resp_hdr *be_decode_resp_hdr(u32 tag0, u32 tag1)
{
  struct be_cmd_resp_hdr *__retres;
  unsigned long addr;
  
#line 133 
  addr = (unsigned long)tag1;
  
#line 134 
  addr = (addr << 32) | (unsigned long)tag0;
  
#line 135 
  __retres = (struct be_cmd_resp_hdr *)addr;
  
#line 135 
  return __retres;
}


#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool be_skip_err_log(u8 opcode, u16 base_status, u16 addl_status)
{
  bool __retres;
  
#line 140 
  if ((((unsigned int)base_status == 66U || (unsigned int)base_status == 2U) || ((unsigned int)addl_status == 74U || (unsigned int)addl_status == 171U)) || ((unsigned int)opcode == 7U && ((unsigned int)base_status == 3U || (unsigned int)addl_status == 77U))) {
    
#line 147 
    __retres = (_Bool)1;
    
#line 147 
    goto return_label;
  }
  else {
    
#line 149 
    __retres = (_Bool)0;
    
#line 149 
    goto return_label;
  }
  return_label: 
#line 140 
                return __retres;
}


#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_cmd_process(struct be_adapter *adapter, struct be_mcc_compl *compl, struct be_cmd_resp_hdr *resp_hdr)
{
  unsigned int tmp;
  
#line 159 
  if (compl->status != 0U) 
#line 159 
                           tmp = compl->status & 65535U; else 
#line 159 
                                                              tmp = 0U;
  
#line 159 
  enum mcc_base_status base_status = (enum mcc_base_status)tmp;
  
#line 160 
  u8 opcode = (unsigned char)0U;
  
#line 160 
  u8 subsystem = (unsigned char)0U;
  
#line 162 
  if (resp_hdr != (struct be_cmd_resp_hdr *)0) {
    
#line 163 
    opcode = resp_hdr->opcode;
    
#line 164 
    subsystem = resp_hdr->subsystem;
  }
  else ;
  
#line 167 
  if ((unsigned int)opcode == 18U && (unsigned int)subsystem == 11U) {
    
#line 169 
    complete(& adapter->et_cmd_compl);
    
#line 170 
    goto return_label;
  }
  else ;
  
#line 173 
  if (((unsigned int)opcode == 7U || (unsigned int)opcode == 172U) && (unsigned int)subsystem == 1U) {
    
#line 176 
    adapter->flash_status = compl->status;
    
#line 177 
    complete(& adapter->et_cmd_compl);
    
#line 178 
    goto return_label;
  }
  else ;
  
#line 181 
  if (((unsigned int)opcode == 4U || (unsigned int)opcode == 18U) && ((unsigned int)subsystem == 3U && base_status == (unsigned int)MCC_STATUS_SUCCESS)) {
    
#line 185 
    be_parse_stats(adapter);
    
#line 186 
    adapter->stats_cmd_sent = (_Bool)0;
    
#line 187 
    goto return_label;
  }
  else ;
  
#line 190 
  if ((unsigned int)opcode == 121U && (unsigned int)subsystem == 1U) {
    
#line 192 
    if (base_status == (unsigned int)MCC_STATUS_SUCCESS) {
      
#line 193 
      struct be_cmd_resp_get_cntl_addnl_attribs *resp = (struct be_cmd_resp_get_cntl_addnl_attribs *)resp_hdr;
      
#line 195 
      adapter->hwmon_info.be_on_die_temp = resp->on_die_temperature;
    }
    else {
      
#line 198 
      adapter->be_get_temp_freq = 0;
      
#line 199 
      adapter->hwmon_info.be_on_die_temp = (unsigned char)255U;
    }
    
#line 202 
    goto return_label;
  }
  else ;
  return_label: 
#line 204 
                return;
}


#line 206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mcc_compl_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  int __retres;
  enum mcc_base_status base_status;
  enum mcc_addl_status addl_status;
  struct be_cmd_resp_hdr *resp_hdr;
  unsigned int tmp;
  unsigned int tmp_0;
  
#line 212 
  u8 opcode = (unsigned char)0U;
  
#line 212 
  u8 subsystem = (unsigned char)0U;
  
#line 216 
  swap_dws((void *)compl,4);
  
#line 218 
  if (compl->status != 0U) 
#line 218 
                           tmp = compl->status & 65535U; else 
#line 218 
                                                              tmp = 0U;
  
#line 218 
  base_status = (enum mcc_base_status)tmp;
  
#line 219 
  if (compl->status != 0U) 
#line 219 
                           tmp_0 = (compl->status >> 16) & 255U; else 
                                                                   
#line 219 
                                                                   tmp_0 = 0U;
  
#line 219 
  addl_status = (enum mcc_addl_status)tmp_0;
  
#line 221 
  resp_hdr = be_decode_resp_hdr(compl->tag0,compl->tag1);
  
#line 222 
  if (resp_hdr != (struct be_cmd_resp_hdr *)0) {
    
#line 223 
    opcode = resp_hdr->opcode;
    
#line 224 
    subsystem = resp_hdr->subsystem;
  }
  else ;
  
#line 227 
  be_async_cmd_process(adapter,compl,resp_hdr);
  
#line 229 
  if (base_status != (unsigned int)MCC_STATUS_SUCCESS) {
    int tmp_2;
    bool tmp_1;
    
#line 230 
    tmp_1 = be_skip_err_log((unsigned char)((int)opcode),(unsigned short)((int)((unsigned short)base_status)),(unsigned short)((int)((unsigned short)addl_status)));
    
#line 230 
    if (tmp_1) 
#line 230 
               tmp_2 = 0; else 
#line 230 
                               tmp_2 = 1;
    
#line 230 
    if (tmp_2) 
      
#line 231 
      if (base_status == (unsigned int)MCC_STATUS_UNAUTHORIZED_REQUEST) 
        
#line 232 
        dev_warn((struct device const *)(& (adapter->pdev)->dev),"VF is not privileged to issue opcode %d-%d\n",(int)opcode,(int)subsystem); else 
                                                                    
#line 236 
                                                                    dev_err((struct device const *)(& (adapter->pdev)->dev),"opcode %d-%d failed:status %d-%d\n",(int)opcode,(int)subsystem,(unsigned int)base_status,(unsigned int)addl_status);
    else ;
  }
  else ;
  
#line 241 
  __retres = (int)compl->status;
  
#line 241 
  return __retres;
}


#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_link_state_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  
#line 248 
  struct be_async_event_link_state *evt = (struct be_async_event_link_state *)compl;
  
#line 252 
  adapter->phy.link_speed = -1;
  
#line 259 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) && ((int)evt->port_link_status & 2) == 0) 
    
#line 261 
    goto return_label; else ;
  
#line 266 
  if (((unsigned long)adapter->flags & 2UL) != 0UL) 
#line 267 
                                                    be_link_status_update(adapter,(unsigned char)((int)evt->port_link_status & 1)); else ;
  return_label: 
#line 269 
                return;
}


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_port_misconfig_event_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  u8 port_misconfig_evt;
  
#line 274 
  struct be_async_event_misconfig_port *evt = (struct be_async_event_misconfig_port *)compl;
  
#line 276 
  u32 sfp_mismatch_evt = evt->event_data_word1;
  
#line 277 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 280 
  port_misconfig_evt = (unsigned char)(sfp_mismatch_evt >> (int)adapter->hba_port_num * 8);
  
#line 286 
  _dev_info((struct device const *)dev,"Port %c: %s %s",(int)adapter->port_name,be_port_misconfig_evt_desc[(int)port_misconfig_evt],be_port_misconfig_remedy_desc[(int)port_misconfig_evt]);
  
#line 290 
  if ((unsigned int)port_misconfig_evt == 3U) 
#line 291 
                                              adapter->flags |= 1024U; else ;
  
#line 292 
  return;
}


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_cos_priority_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  
#line 298 
  struct be_async_event_grp5_cos_priority *evt = (struct be_async_event_grp5_cos_priority *)compl;
  
#line 301 
  if ((unsigned int)evt->valid != 0U) {
    
#line 302 
    adapter->vlan_prio_bmap = evt->available_priority_bmap;
    
#line 303 
    adapter->recommended_prio = (unsigned short)((unsigned int)adapter->recommended_prio & 8191U);
    
#line 304 
    adapter->recommended_prio = (unsigned short)((int)((unsigned short)evt->reco_default_priority) << 13U);
  }
  else ;
  
#line 307 
  return;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_qos_speed_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  
#line 313 
  struct be_async_event_grp5_qos_link_speed *evt = (struct be_async_event_grp5_qos_link_speed *)compl;
  
#line 316 
  if (adapter->phy.link_speed >= 0 && (unsigned int)evt->physical_port == adapter->port_num) 
    
#line 318 
    adapter->phy.link_speed = (int)evt->qos_link_speed * 10; else ;
  
#line 319 
  return;
}


#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_pvid_state_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  
#line 325 
  struct be_async_event_grp5_pvid_state *evt = (struct be_async_event_grp5_pvid_state *)compl;
  
#line 328 
  if ((unsigned int)evt->enabled != 0U) {
    
#line 329 
    adapter->pvid = (unsigned short)((unsigned int)evt->tag & 4095U);
    
#line 330 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"LPVID: %d\n",(int)adapter->pvid);
  }
  else 
#line 332 
       adapter->pvid = (unsigned short)0U;
  
#line 333 
  return;
}


#line 337  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_fw_control_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  
#line 340 
  struct be_async_fw_control *evt = (struct be_async_fw_control *)compl;
  
#line 341 
  u32 evt_dw1 = evt->event_data_word1;
  
#line 343 
  if ((evt_dw1 & 4U) != 0U) {
    
#line 344 
    adapter->flags |= 4096U;
    
#line 345 
    adapter->bmc_filt_mask = evt->event_data_word2;
  }
  else 
#line 347 
       adapter->flags &= 4294963199U;
  
#line 348 
  return;
}


#line 351  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_grp5_evt_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  
#line 354 
  u8 event_type = (unsigned char)(compl->flags >> 16);
  
#line 357 
  switch ((int)event_type) {
    case 2: 
#line 358 
    ;
    
#line 359 
    be_async_grp5_cos_priority_process(adapter,compl);
    
#line 360 
    goto ldv_58536;
    case 1: 
#line 361 
    ;
    
#line 362 
    be_async_grp5_qos_speed_process(adapter,compl);
    
#line 363 
    goto ldv_58536;
    case 3: 
#line 364 
    ;
    
#line 365 
    be_async_grp5_pvid_state_process(adapter,compl);
    
#line 366 
    goto ldv_58536;
    case 5: 
#line 368 
    ;
    
#line 369 
    be_async_grp5_fw_control_process(adapter,compl);
    
#line 370 
    goto ldv_58536;
    default: 
#line 371 
    ;
    
#line 372 
    goto ldv_58536;
  }
  ldv_58536: 
#line 374 
  ;
  
#line 375 
  return;
}


#line 376  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_dbg_evt_process(struct be_adapter *adapter, struct be_mcc_compl *cmp)
{
  
#line 379 
  u8 event_type = (unsigned char)0U;
  
#line 380 
  struct be_async_event_qnq *evt = (struct be_async_event_qnq *)cmp;
  
#line 382 
  event_type = (unsigned char)(cmp->flags >> 16);
  
#line 385 
  switch ((int)event_type) {
    case 1: 
#line 386 
    ;
    
#line 387 
    if ((unsigned int)evt->valid != 0U) 
#line 388 
                                        adapter->qnq_vid = evt->vlan_tag; else ;
    
#line 389 
    adapter->flags |= 128U;
    
#line 390 
    goto ldv_58548;
    default: 
#line 391 
    ;
    
#line 392 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Unknown debug event 0x%x!\n",(int)event_type);
    
#line 394 
    goto ldv_58548;
  }
  ldv_58548: 
#line 396 
  ;
  
#line 397 
  return;
}


#line 398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_async_sliport_evt_process(struct be_adapter *adapter, struct be_mcc_compl *cmp)
{
  
#line 401 
  u8 event_type = (unsigned char)(cmp->flags >> 16);
  
#line 404 
  if ((unsigned int)event_type == 9U) 
#line 405 
                                      be_async_port_misconfig_event_process(adapter,cmp); else ;
  
#line 406 
  return;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool is_link_state_evt(u32 flags)
{
  bool __retres;
  
#line 410 
  __retres = (_Bool)(((flags >> 8) & 255U) == 1U);
  
#line 410 
  return __retres;
}


#line 414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool is_grp5_evt(u32 flags)
{
  bool __retres;
  
#line 416 
  __retres = (_Bool)(((flags >> 8) & 255U) == 5U);
  
#line 416 
  return __retres;
}


#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool is_dbg_evt(u32 flags)
{
  bool __retres;
  
#line 422 
  __retres = (_Bool)(((flags >> 8) & 255U) == 6U);
  
#line 422 
  return __retres;
}


#line 426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static bool is_sliport_evt(u32 flags)
{
  bool __retres;
  
#line 428 
  __retres = (_Bool)(((flags >> 8) & 255U) == 17U);
  
#line 428 
  return __retres;
}


#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_mcc_event_process(struct be_adapter *adapter, struct be_mcc_compl *compl)
{
  bool tmp_2;
  
#line 435 
  tmp_2 = is_link_state_evt(compl->flags);
  
#line 435 
  if ((int)tmp_2 != 0) 
#line 436 
                       be_async_link_state_process(adapter,compl);
  else {
    bool tmp_1;
    
#line 437 
    tmp_1 = is_grp5_evt(compl->flags);
    
#line 437 
    if ((int)tmp_1 != 0) 
#line 438 
                         be_async_grp5_evt_process(adapter,compl);
    else {
      bool tmp_0;
      
#line 439 
      tmp_0 = is_dbg_evt(compl->flags);
      
#line 439 
      if ((int)tmp_0 != 0) 
#line 440 
                           be_async_dbg_evt_process(adapter,compl);
      else {
        bool tmp;
        
#line 441 
        tmp = is_sliport_evt(compl->flags);
        
#line 441 
        if ((int)tmp != 0) 
#line 442 
                           be_async_sliport_evt_process(adapter,compl); else ;
      }
    }
  }
  
#line 443 
  return;
}


#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_mcc_compl *be_mcc_compl_get(struct be_adapter *adapter)
{
  struct be_mcc_compl *__retres;
  bool tmp_0;
  
#line 447 
  struct be_queue_info *mcc_cq = & adapter->mcc_obj.cq;
  
#line 448 
  struct be_mcc_compl *compl = queue_tail_node(mcc_cq);
  
#line 450 
  tmp_0 = be_mcc_compl_is_new(compl);
  
#line 450 
  if ((int)tmp_0 != 0) {
    
#line 451 
    queue_tail_inc(mcc_cq);
    
#line 452 
    __retres = compl;
    
#line 452 
    goto return_label;
  }
  else ;
  
#line 454 
  __retres = (struct be_mcc_compl *)0;
  return_label: 
#line 454 
                return __retres;
}


#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
void be_async_mcc_enable(struct be_adapter *adapter)
{
  
#line 459 
  ldv_spin_lock_bh_73(& adapter->mcc_cq_lock);
  
#line 461 
  be_cq_notify(adapter,(unsigned short)((int)adapter->mcc_obj.cq.id),(_Bool)1,(unsigned short)0);
  
#line 462 
  adapter->mcc_obj.rearm_cq = (_Bool)1;
  
#line 464 
  ldv_spin_unlock_bh_74(& adapter->mcc_cq_lock);
  
#line 465 
  return;
}


#line 467  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
void be_async_mcc_disable(struct be_adapter *adapter)
{
  
#line 469 
  ldv_spin_lock_bh_75(& adapter->mcc_cq_lock);
  
#line 471 
  adapter->mcc_obj.rearm_cq = (_Bool)0;
  
#line 472 
  be_cq_notify(adapter,(unsigned short)((int)adapter->mcc_obj.cq.id),(_Bool)0,(unsigned short)0);
  
#line 474 
  ldv_spin_unlock_bh_76(& adapter->mcc_cq_lock);
  
#line 475 
  return;
}


#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_process_mcc(struct be_adapter *adapter)
{
  struct be_mcc_compl *compl;
  
#line 480 
  int num = 0;
  
#line 480 
  int status = 0;
  
#line 481 
  struct be_mcc_obj *mcc_obj = & adapter->mcc_obj;
  
#line 483 
  ldv_spin_lock_77(& adapter->mcc_cq_lock);
  
#line 485 
  goto ldv_58590;
  ldv_58589: 
#line 486 
  ;
  
#line 486 
  if (((unsigned long)compl->flags & 1073741824UL) != 0UL) 
#line 487 
                                                           be_mcc_event_process(adapter,compl);
  else 
    
#line 488 
    if (((unsigned long)compl->flags & 268435456UL) != 0UL) {
      
#line 489 
      status = be_mcc_compl_process(adapter,compl);
      
#line 490 
      atomic_dec(& mcc_obj->q.used);
    }
    else ;
  
#line 492 
  be_mcc_compl_use(compl);
  
#line 493 
  num += 1;
  ldv_58590: 
#line 494 
  ;
  
#line 485 
  compl = be_mcc_compl_get(adapter);
  
#line 485 
  if (compl != (struct be_mcc_compl *)0) 
#line 487 
                                         goto ldv_58589; else 
#line 490 
                                                              goto ldv_58591;
  ldv_58591: 
#line 491 
  ;
  
#line 496 
  if (num != 0) 
#line 497 
                be_cq_notify(adapter,(unsigned short)((int)mcc_obj->cq.id),(_Bool)((bool)((int)mcc_obj->rearm_cq) != 0),(unsigned short)((int)((unsigned short)num))); else ;
  
#line 499 
  ldv_spin_unlock_78(& adapter->mcc_cq_lock);
  
#line 500 
  return status;
}


#line 504  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mcc_wait_compl(struct be_adapter *adapter)
{
  int __retres;
  int i;
  u8 tmp;
  int tmp_0;
  
#line 507 
  int status = 0;
  
#line 508 
  struct be_mcc_obj *mcc_obj = & adapter->mcc_obj;
  
#line 510 
  i = 0;
  
#line 510 
  goto ldv_58600;
  ldv_58599: 
#line 511 
  ;
  
#line 511 
  tmp = be_check_error(adapter,7U);
  
#line 511 
  if ((unsigned int)tmp != 0U) {
    
#line 512 
    __retres = -5;
    
#line 512 
    goto return_label;
  }
  else ;
  
#line 514 
  local_bh_disable();
  
#line 515 
  status = be_process_mcc(adapter);
  
#line 516 
  local_bh_enable();
  
#line 518 
  tmp_0 = atomic_read((atomic_t const *)(& mcc_obj->q.used));
  
#line 518 
  if (tmp_0 == 0) 
#line 519 
                  goto ldv_58598; else ;
  
#line 520 
  __const_udelay(429500UL);
  
#line 510 
  i += 1;
  ldv_58600: 
#line 511 
  ;
  
#line 510 
  if (i <= 119999) 
#line 512 
                   goto ldv_58599; else 
#line 515 
                                        goto ldv_58598;
  ldv_58598: 
#line 516 
  ;
  
#line 522 
  if (i == 120000) {
    
#line 523 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"FW not responding\n");
    
#line 524 
    be_set_error(adapter,4);
    
#line 525 
    __retres = -5;
    
#line 525 
    goto return_label;
  }
  else ;
  
#line 527 
  __retres = status;
  return_label: 
#line 527 
                return __retres;
}


#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mcc_notify_wait(struct be_adapter *adapter)
{
  int status;
  struct be_mcc_wrb *wrb;
  struct be_cmd_resp_hdr *resp;
  
#line 535 
  struct be_mcc_obj *mcc_obj = & adapter->mcc_obj;
  
#line 536 
  u16 index = mcc_obj->q.head;
  
#line 539 
  index_dec(& index,(unsigned short)((int)mcc_obj->q.len));
  
#line 540 
  wrb = (struct be_mcc_wrb *)queue_index_node(& mcc_obj->q,(unsigned short)((int)index));
  
#line 542 
  resp = be_decode_resp_hdr(wrb->tag0,wrb->tag1);
  
#line 544 
  be_mcc_notify(adapter);
  
#line 546 
  status = be_mcc_wait_compl(adapter);
  
#line 547 
  if (status == -5) 
#line 548 
                    goto out; else ;
  
#line 550 
  status = (int)resp->base_status | ((int)resp->addl_status << 16);
  out: 
#line 553 
  ;
  
#line 554 
  return status;
}


#line 557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mbox_db_ready_wait(struct be_adapter *adapter, void *db)
{
  int __retres;
  u32 ready;
  u8 tmp;
  
#line 559 
  int msecs = 0;
  ldv_58617: 
#line 561 
  ;
  
#line 563 
  tmp = be_check_error(adapter,7U);
  
#line 563 
  if ((unsigned int)tmp != 0U) {
    
#line 564 
    __retres = -5;
    
#line 564 
    goto return_label;
  }
  else ;
  
#line 566 
  ready = ioread32(db);
  
#line 567 
  if (ready == 4294967295U) {
    
#line 568 
    __retres = -1;
    
#line 568 
    goto return_label;
  }
  else ;
  
#line 570 
  ready &= 1U;
  
#line 571 
  if (ready != 0U) 
#line 572 
                   goto ldv_58616; else ;
  
#line 574 
  if (msecs > 4000) {
    
#line 575 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"FW not responding\n");
    
#line 576 
    be_set_error(adapter,4);
    
#line 577 
    be_detect_error(adapter);
    
#line 578 
    __retres = -1;
    
#line 578 
    goto return_label;
  }
  else ;
  
#line 581 
  msleep(1U);
  
#line 582 
  msecs += 1;
  
#line 563 
  goto ldv_58617;
  ldv_58616: 
#line 564 
  ;
  
#line 585 
  __retres = 0;
  return_label: 
#line 585 
                return __retres;
}


#line 592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mbox_notify_wait(struct be_adapter *adapter)
{
  int __retres;
  int status;
  bool tmp;
  
#line 595 
  u32 val = 0U;
  
#line 596 
  void *db = (void *)(adapter->db + 352U);
  
#line 597 
  struct be_dma_mem *mbox_mem = & adapter->mbox_mem;
  
#line 598 
  struct be_mcc_mailbox *mbox = (struct be_mcc_mailbox *)mbox_mem->va;
  
#line 599 
  struct be_mcc_compl *compl = & mbox->compl;
  
#line 602 
  status = be_mbox_db_ready_wait(adapter,db);
  
#line 603 
  if (status != 0) {
    
#line 604 
    __retres = status;
    
#line 604 
    goto return_label;
  }
  else ;
  
#line 606 
  val |= 2U;
  
#line 608 
  val = ((unsigned int)(mbox_mem->dma >> 32) & 4294967292U) | val;
  
#line 609 
  iowrite32(val,db);
  
#line 612 
  status = be_mbox_db_ready_wait(adapter,db);
  
#line 613 
  if (status != 0) {
    
#line 614 
    __retres = status;
    
#line 614 
    goto return_label;
  }
  else ;
  
#line 616 
  val = 0U;
  
#line 618 
  val = ((unsigned int)(mbox_mem->dma >> 4) << 2) | val;
  
#line 619 
  iowrite32(val,db);
  
#line 621 
  status = be_mbox_db_ready_wait(adapter,db);
  
#line 622 
  if (status != 0) {
    
#line 623 
    __retres = status;
    
#line 623 
    goto return_label;
  }
  else ;
  
#line 626 
  tmp = be_mcc_compl_is_new(compl);
  
#line 626 
  if ((int)tmp != 0) {
    
#line 627 
    status = be_mcc_compl_process(adapter,& mbox->compl);
    
#line 628 
    be_mcc_compl_use(compl);
    
#line 629 
    if (status != 0) {
      
#line 630 
      __retres = status;
      
#line 630 
      goto return_label;
    }
    else ;
  }
  else {
    
#line 632 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"invalid mailbox completion\n");
    
#line 633 
    __retres = -1;
    
#line 633 
    goto return_label;
  }
  
#line 635 
  __retres = 0;
  return_label: 
#line 635 
                return __retres;
}


#line 638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static u16 be_POST_stage_get(struct be_adapter *adapter)
{
  u16 __retres;
  u32 sem;
  
#line 642 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
    
#line 643 
    sem = ioread32((void *)(adapter->csr + 172U)); else 
#line 645 
                                                        pci_read_config_dword((struct pci_dev const *)adapter->pdev,148,& sem);
  
#line 648 
  __retres = (unsigned short)sem;
  
#line 648 
  return __retres;
}


#line 651  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int lancer_wait_ready(struct be_adapter *adapter)
{
  int __retres;
  u32 sliport_status;
  int i;
  unsigned int tmp;
  
#line 657 
  i = 0;
  
#line 657 
  goto ldv_58637;
  ldv_58636: 
#line 658 
  ;
  
#line 658 
  sliport_status = ioread32((void *)(adapter->db + 1028U));
  
#line 659 
  if ((sliport_status & 8388608U) != 0U) {
    
#line 660 
    __retres = 0;
    
#line 660 
    goto return_label;
  }
  else ;
  
#line 662 
  if (sliport_status < (u32)0 && (sliport_status & 16777216U) == 0U) {
    
#line 664 
    __retres = -5;
    
#line 664 
    goto return_label;
  }
  else ;
  
#line 666 
  msleep(1000U);
  
#line 657 
  i += 1;
  ldv_58637: 
#line 658 
  ;
  
#line 657 
  if (i <= 29) 
#line 659 
               goto ldv_58636; else 
#line 662 
                                    goto ldv_58638;
  ldv_58638: 
#line 663 
  ;
  
#line 669 
  tmp = (unsigned int)(sliport_status != 0U);
  
#line 669 
  if (tmp) ; else 
#line 669 
                  tmp = 4294967295U;
  
#line 669 
  __retres = (int)tmp;
  return_label: 
#line 669 
                return __retres;
}


#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_fw_wait_ready(struct be_adapter *adapter)
{
  int __retres;
  u16 stage;
  int status;
  unsigned long tmp;
  
#line 675 
  int timeout = 0;
  
#line 676 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 678 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    
#line 679 
    status = lancer_wait_ready(adapter);
    
#line 680 
    if (status != 0) {
      
#line 681 
      stage = (unsigned short)status;
      
#line 682 
      goto err;
    }
    else ;
    
#line 684 
    __retres = 0;
    
#line 684 
    goto return_label;
  }
  else ;
  ldv_58647: 
#line 686 
  ;
  
#line 689 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) && (unsigned int)adapter->virtfn != 0U) {
    
#line 690 
    __retres = 0;
    
#line 690 
    goto return_label;
  }
  else ;
  
#line 692 
  stage = be_POST_stage_get(adapter);
  
#line 693 
  if ((unsigned int)stage == 49152U) {
    
#line 694 
    __retres = 0;
    
#line 694 
    goto return_label;
  }
  else ;
  
#line 696 
  _dev_info((struct device const *)dev,"Waiting for POST, %ds elapsed\n",timeout);
  
#line 697 
  tmp = msleep_interruptible(2000U);
  
#line 697 
  if (tmp != 0UL) {
    
#line 698 
    dev_err((struct device const *)dev,"Waiting for POST aborted\n");
    
#line 699 
    __retres = -4;
    
#line 699 
    goto return_label;
  }
  else ;
  
#line 701 
  timeout += 2;
  
#line 702 
  if (timeout <= 59) 
#line 704 
                     goto ldv_58647; else 
#line 707 
                                          goto ldv_58648;
  ldv_58648: 
#line 708 
  ;
  err: 
#line 704 
  ;
  
#line 705 
  dev_err((struct device const *)dev,"POST timeout; stage=%#x\n",(int)stage);
  
#line 706 
  __retres = -110;
  return_label: 
#line 706 
                return __retres;
}


#line 709  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static struct be_sge *nonembedded_sgl(struct be_mcc_wrb *wrb)
{
  struct be_sge *__retres;
  
#line 711 
  __retres = & wrb->payload.sgl[0];
  
#line 711 
  return __retres;
}


#line 714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static void fill_wrb_tags(struct be_mcc_wrb *wrb, unsigned long addr)
{
  
#line 716 
  wrb->tag0 = (unsigned int)addr;
  
#line 717 
  wrb->tag1 = (unsigned int)(addr >> 32);
  
#line 718 
  return;
}


#line 722  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_wrb_cmd_hdr_prepare(struct be_cmd_req_hdr *req_hdr, u8 subsystem, u8 opcode, int cmd_len, struct be_mcc_wrb *wrb, struct be_dma_mem *mem)
{
  struct be_sge *sge;
  
#line 729 
  req_hdr->opcode = opcode;
  
#line 730 
  req_hdr->subsystem = subsystem;
  
#line 731 
  req_hdr->request_length = (unsigned int)cmd_len + 4294967280U;
  
#line 732 
  req_hdr->version = (unsigned char)0U;
  
#line 733 
  fill_wrb_tags(wrb,(unsigned long)req_hdr);
  
#line 734 
  wrb->payload_length = (unsigned int)cmd_len;
  
#line 735 
  if (mem != (struct be_dma_mem *)0) {
    
#line 736 
    wrb->embedded |= 8U;
    
#line 738 
    sge = nonembedded_sgl(wrb);
    
#line 739 
    sge->pa_hi = (unsigned int)(mem->dma >> 32);
    
#line 740 
    sge->pa_lo = (unsigned int)mem->dma;
    
#line 741 
    sge->len = mem->size;
  }
  else 
#line 743 
       wrb->embedded |= 1U;
  
#line 744 
  swap_dws((void *)wrb,8);
  
#line 745 
  return;
}


#line 747  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_cmd_page_addrs_prepare(struct phys_addr *pages, u32 max_pages, struct be_dma_mem *mem)
{
  int i;
  unsigned int tmp_0;
  {
    unsigned int tmp;
    
#line 750 
    unsigned int _min1 = (unsigned int)(((((unsigned long)mem->va & 4095UL) + (unsigned long)mem->size) + 4095UL) >> 12);
    
#line 750 
    u32 _min2 = max_pages;
    
#line 750 
    if (_min1 < _min2) 
#line 750 
                       tmp = _min1; else 
#line 750 
                                         tmp = _min2;
    
#line 750 
    tmp_0 = tmp;
  }
  
#line 750 
  int buf_pages = (int)tmp_0;
  
#line 751 
  u64 dma = mem->dma;
  
#line 753 
  i = 0;
  
#line 753 
  goto ldv_58677;
  ldv_58676: 
#line 754 
  ;
  
#line 754 
  (pages + i)->lo = (unsigned int)dma;
  
#line 755 
  (pages + i)->hi = (unsigned int)(dma >> 32);
  
#line 756 
  dma += 4096ULL;
  
#line 753 
  i += 1;
  ldv_58677: 
#line 754 
  ;
  
#line 753 
  if (i < buf_pages) 
#line 755 
                     goto ldv_58676; else 
#line 758 
                                          goto ldv_58678;
  ldv_58678: 
#line 759 
  ;
  
#line 760 
  return;
}


#line 760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
__inline static struct be_mcc_wrb *wrb_from_mbox(struct be_adapter *adapter)
{
  
#line 762 
  struct be_dma_mem *mbox_mem = & adapter->mbox_mem;
  
#line 763 
  struct be_mcc_wrb *wrb = & ((struct be_mcc_mailbox *)mbox_mem->va)->wrb;
  
#line 765 
  memset((void *)wrb,0,256UL);
  
#line 766 
  return wrb;
}


#line 769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_mcc_wrb *wrb_from_mccq(struct be_adapter *adapter)
{
  struct be_mcc_wrb *__retres;
  struct be_mcc_wrb *wrb;
  int tmp;
  
#line 771 
  struct be_queue_info *mccq = & adapter->mcc_obj.q;
  
#line 774 
  if (! mccq->created) {
    
#line 775 
    __retres = (struct be_mcc_wrb *)0;
    
#line 775 
    goto return_label;
  }
  else ;
  
#line 777 
  tmp = atomic_read((atomic_t const *)(& mccq->used));
  
#line 777 
  ;
  
#line 777 
  if (tmp >= (int)mccq->len) {
    
#line 778 
    __retres = (struct be_mcc_wrb *)0;
    
#line 778 
    goto return_label;
  }
  else ;
  
#line 780 
  wrb = (struct be_mcc_wrb *)queue_head_node(mccq);
  
#line 781 
  queue_head_inc(mccq);
  
#line 782 
  atomic_inc(& mccq->used);
  
#line 783 
  memset((void *)wrb,0,256UL);
  
#line 784 
  __retres = wrb;
  return_label: 
#line 784 
                return __retres;
}


#line 787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool use_mcc(struct be_adapter *adapter)
{
  bool __retres;
  
#line 789 
  __retres = adapter->mcc_obj.q.created;
  
#line 789 
  return __retres;
}


#line 793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_lock(struct be_adapter *adapter)
{
  int __retres;
  bool tmp_0;
  
#line 795 
  tmp_0 = use_mcc(adapter);
  
#line 795 
  if ((int)tmp_0 != 0) {
    
#line 796 
    ldv_spin_lock_bh_79(& adapter->mcc_lock);
    
#line 797 
    __retres = 0;
    
#line 797 
    goto return_label;
  }
  else {
    int tmp;
    
#line 799 
    tmp = ldv_mutex_lock_interruptible_80(& adapter->mbox_lock);
    
#line 799 
    __retres = tmp;
    
#line 799 
    goto return_label;
  }
  return_label: 
#line 795 
                return __retres;
}


#line 804  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_cmd_unlock(struct be_adapter *adapter)
{
  bool tmp;
  
#line 806 
  tmp = use_mcc(adapter);
  
#line 806 
  if ((int)tmp != 0) 
#line 807 
                     ldv_spin_unlock_bh_81(& adapter->mcc_lock); else 
                                                                   
#line 809 
                                                                   ldv_mutex_unlock_82(& adapter->mbox_lock);
  
#line 810 
  return;
}


#line 812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_mcc_wrb *be_cmd_copy(struct be_adapter *adapter, struct be_mcc_wrb *wrb)
{
  struct be_mcc_wrb *__retres;
  struct be_mcc_wrb *dest_wrb;
  bool tmp;
  
#line 817 
  tmp = use_mcc(adapter);
  
#line 817 
  if ((int)tmp != 0) {
    
#line 818 
    dest_wrb = wrb_from_mccq(adapter);
    
#line 819 
    if (dest_wrb == (struct be_mcc_wrb *)0) {
      
#line 820 
      __retres = (struct be_mcc_wrb *)0;
      
#line 820 
      goto return_label;
    }
    else ;
  }
  else 
#line 822 
       dest_wrb = wrb_from_mbox(adapter);
  
#line 825 
  memcpy((void *)dest_wrb,(void const *)wrb,256UL);
  
#line 826 
  if ((wrb->embedded & 1U) != 0U) {
    void *tmp_0;
    
#line 827 
    tmp_0 = embedded_payload(wrb);
    
#line 827 
    ;
    
#line 827 
    fill_wrb_tags(dest_wrb,(unsigned long)tmp_0);
  }
  else ;
  
#line 829 
  __retres = dest_wrb;
  return_label: 
#line 829 
                return __retres;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_notify_wait(struct be_adapter *adapter, struct be_mcc_wrb *wrb)
{
  int __retres;
  struct be_mcc_wrb *dest_wrb;
  int status;
  bool tmp;
  
#line 839 
  status = be_cmd_lock(adapter);
  
#line 840 
  if (status != 0) {
    
#line 841 
    __retres = status;
    
#line 841 
    goto return_label;
  }
  else ;
  
#line 843 
  dest_wrb = be_cmd_copy(adapter,wrb);
  
#line 844 
  if (dest_wrb == (struct be_mcc_wrb *)0) {
    
#line 845 
    __retres = -16;
    
#line 845 
    goto return_label;
  }
  else ;
  
#line 847 
  tmp = use_mcc(adapter);
  
#line 847 
  if ((int)tmp != 0) 
#line 848 
                     status = be_mcc_notify_wait(adapter); else 
#line 850 
                                                                status = be_mbox_notify_wait(adapter);
  
#line 852 
  if (status == 0) 
#line 853 
                   memcpy((void *)wrb,(void const *)dest_wrb,256UL); else ;
  
#line 855 
  be_cmd_unlock(adapter);
  
#line 856 
  __retres = status;
  return_label: 
#line 856 
                return __retres;
}


#line 862  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_fw_init(struct be_adapter *adapter)
{
  int __retres;
  u8 *wrb;
  int status;
  int tmp;
  u8 *tmp_1;
  u8 *tmp_2;
  u8 *tmp_3;
  u8 *tmp_4;
  u8 *tmp_5;
  u8 *tmp_6;
  u8 *tmp_7;
  
#line 867 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    
#line 868 
    __retres = 0;
    
#line 868 
    goto return_label;
  }
  else ;
  
#line 870 
  tmp = ldv_mutex_lock_interruptible_83(& adapter->mbox_lock);
  
#line 870 
  if (tmp != 0) {
    
#line 871 
    __retres = -1;
    
#line 871 
    goto return_label;
  }
  else ;
  
#line 873 
  wrb = (u8 *)wrb_from_mbox(adapter);
  
#line 874 
  tmp_1 = wrb;
  
#line 874 
  wrb += 1;
  
#line 874 
  *tmp_1 = (unsigned char)255U;
  
#line 875 
  tmp_2 = wrb;
  
#line 875 
  wrb += 1;
  
#line 875 
  *tmp_2 = (unsigned char)18U;
  
#line 876 
  tmp_3 = wrb;
  
#line 876 
  wrb += 1;
  
#line 876 
  *tmp_3 = (unsigned char)52U;
  
#line 877 
  tmp_4 = wrb;
  
#line 877 
  wrb += 1;
  
#line 877 
  *tmp_4 = (unsigned char)255U;
  
#line 878 
  tmp_5 = wrb;
  
#line 878 
  wrb += 1;
  
#line 878 
  *tmp_5 = (unsigned char)255U;
  
#line 879 
  tmp_6 = wrb;
  
#line 879 
  wrb += 1;
  
#line 879 
  *tmp_6 = (unsigned char)86U;
  
#line 880 
  tmp_7 = wrb;
  
#line 880 
  wrb += 1;
  
#line 880 
  *tmp_7 = (unsigned char)120U;
  
#line 881 
  *wrb = (unsigned char)255U;
  
#line 883 
  status = be_mbox_notify_wait(adapter);
  
#line 885 
  ldv_mutex_unlock_84(& adapter->mbox_lock);
  
#line 886 
  __retres = status;
  return_label: 
#line 886 
                return __retres;
}


#line 892  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_fw_clean(struct be_adapter *adapter)
{
  int __retres;
  u8 *wrb;
  int status;
  int tmp;
  u8 *tmp_1;
  u8 *tmp_2;
  u8 *tmp_3;
  u8 *tmp_4;
  u8 *tmp_5;
  u8 *tmp_6;
  u8 *tmp_7;
  
#line 897 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    
#line 898 
    __retres = 0;
    
#line 898 
    goto return_label;
  }
  else ;
  
#line 900 
  tmp = ldv_mutex_lock_interruptible_85(& adapter->mbox_lock);
  
#line 900 
  if (tmp != 0) {
    
#line 901 
    __retres = -1;
    
#line 901 
    goto return_label;
  }
  else ;
  
#line 903 
  wrb = (u8 *)wrb_from_mbox(adapter);
  
#line 904 
  tmp_1 = wrb;
  
#line 904 
  wrb += 1;
  
#line 904 
  *tmp_1 = (unsigned char)255U;
  
#line 905 
  tmp_2 = wrb;
  
#line 905 
  wrb += 1;
  
#line 905 
  *tmp_2 = (unsigned char)170U;
  
#line 906 
  tmp_3 = wrb;
  
#line 906 
  wrb += 1;
  
#line 906 
  *tmp_3 = (unsigned char)187U;
  
#line 907 
  tmp_4 = wrb;
  
#line 907 
  wrb += 1;
  
#line 907 
  *tmp_4 = (unsigned char)255U;
  
#line 908 
  tmp_5 = wrb;
  
#line 908 
  wrb += 1;
  
#line 908 
  *tmp_5 = (unsigned char)255U;
  
#line 909 
  tmp_6 = wrb;
  
#line 909 
  wrb += 1;
  
#line 909 
  *tmp_6 = (unsigned char)204U;
  
#line 910 
  tmp_7 = wrb;
  
#line 910 
  wrb += 1;
  
#line 910 
  *tmp_7 = (unsigned char)221U;
  
#line 911 
  *wrb = (unsigned char)255U;
  
#line 913 
  status = be_mbox_notify_wait(adapter);
  
#line 915 
  ldv_mutex_unlock_86(& adapter->mbox_lock);
  
#line 916 
  __retres = status;
  return_label: 
#line 916 
                return __retres;
}


#line 919  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_eq_create(struct be_adapter *adapter, struct be_eq_obj *eqo)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_eq_create *req;
  int status;
  int tmp;
  u32 tmp_1;
  u32 tmp_2;
  int tmp_3;
  u32 tmp_4;
  
#line 923 
  struct be_dma_mem *q_mem = & eqo->q.dma_mem;
  
#line 924 
  int ver = 0;
  
#line 926 
  tmp = ldv_mutex_lock_interruptible_87(& adapter->mbox_lock);
  
#line 926 
  if (tmp != 0) {
    
#line 927 
    __retres = -1;
    
#line 927 
    goto return_label;
  }
  else ;
  
#line 929 
  wrb = wrb_from_mbox(adapter);
  
#line 930 
  req = (struct be_cmd_req_eq_create *)embedded_payload(wrb);
  
#line 932 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)13,100,wrb,(struct be_dma_mem *)0);
  
#line 937 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) && ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U)) 
    
#line 938 
    ver = 2; else ;
  
#line 940 
  req->hdr.version = (unsigned char)ver;
  
#line 941 
  req->num_pages = (unsigned short)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  
#line 943 
  tmp_1 = amap_mask(1U);
  
#line 943 
  ;
  
#line 943 
  amap_set((void *)(& req->context),0U,tmp_1,29U,1U);
  
#line 945 
  tmp_2 = amap_mask(1U);
  
#line 945 
  ;
  
#line 945 
  amap_set((void *)(& req->context),0U,tmp_2,31U,0U);
  
#line 946 
  tmp_3 = __ilog2_u32((unsigned int)eqo->q.len / 256U);
  
#line 946 
  tmp_4 = amap_mask(3U);
  
#line 946 
  ;
  
#line 946 
  amap_set((void *)(& req->context),1U,tmp_4,26U,(unsigned int)tmp_3);
  
#line 948 
  swap_dws((void *)(& req->context),16);
  
#line 950 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  
#line 952 
  status = be_mbox_notify_wait(adapter);
  
#line 953 
  if (status == 0) {
    
#line 954 
    struct be_cmd_resp_eq_create *resp = embedded_payload(wrb);
    
#line 956 
    eqo->q.id = resp->eq_id;
    
#line 957 
    if (ver == 2) 
#line 957 
                  eqo->msix_idx = (unsigned char)resp->msix_idx; else 
                                                                   
#line 957 
                                                                   eqo->msix_idx = eqo->idx;
    
#line 959 
    eqo->q.created = (_Bool)1;
  }
  else ;
  
#line 962 
  ldv_mutex_unlock_88(& adapter->mbox_lock);
  
#line 963 
  __retres = status;
  return_label: 
#line 963 
                return __retres;
}


#line 967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_mac_addr_query(struct be_adapter *adapter, u8 *mac_addr, bool permanent, u32 if_handle, u32 pmac_id)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_mac_query *req;
  int status;
  
#line 974 
  ldv_spin_lock_bh_89(& adapter->mcc_lock);
  
#line 976 
  wrb = wrb_from_mccq(adapter);
  
#line 977 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 978 
    status = -16;
    
#line 979 
    goto err;
  }
  else ;
  
#line 981 
  req = (struct be_cmd_req_mac_query *)embedded_payload(wrb);
  
#line 983 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)1,24,wrb,(struct be_dma_mem *)0);
  
#line 986 
  req->type = (unsigned char)1U;
  
#line 987 
  if ((int)permanent != 0) 
#line 988 
                           req->permanent = (unsigned char)1U;
  else {
    
#line 990 
    req->if_id = (unsigned short)if_handle;
    
#line 991 
    req->pmac_id = pmac_id;
    
#line 992 
    req->permanent = (unsigned char)0U;
  }
  
#line 995 
  status = be_mcc_notify_wait(adapter);
  
#line 996 
  if (status == 0) {
    
#line 997 
    struct be_cmd_resp_mac_query *resp = embedded_payload(wrb);
    
#line 999 
    memcpy((void *)mac_addr,(void const *)(& resp->mac.addr),6UL);
  }
  else ;
  err: 
#line 1002 
  ;
  
#line 1003 
  ldv_spin_unlock_bh_90(& adapter->mcc_lock);
  
#line 1004 
  return status;
}


#line 1008  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_pmac_add(struct be_adapter *adapter, u8 *mac_addr, u32 if_id, u32 *pmac_id, u32 domain)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_pmac_add *req;
  int status;
  
#line 1015 
  ldv_spin_lock_bh_91(& adapter->mcc_lock);
  
#line 1017 
  wrb = wrb_from_mccq(adapter);
  
#line 1018 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1019 
    status = -16;
    
#line 1020 
    goto err;
  }
  else ;
  
#line 1022 
  req = (struct be_cmd_req_pmac_add *)embedded_payload(wrb);
  
#line 1024 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)59,28,wrb,(struct be_dma_mem *)0);
  
#line 1028 
  req->hdr.domain = (unsigned char)domain;
  
#line 1029 
  req->if_id = if_id;
  
#line 1030 
  memcpy((void *)(& req->mac_address),(void const *)mac_addr,6UL);
  
#line 1032 
  status = be_mcc_notify_wait(adapter);
  
#line 1033 
  if (status == 0) {
    
#line 1034 
    struct be_cmd_resp_pmac_add *resp = embedded_payload(wrb);
    
#line 1036 
    *pmac_id = resp->pmac_id;
  }
  else ;
  err: 
#line 1039 
  ;
  
#line 1040 
  ldv_spin_unlock_bh_92(& adapter->mcc_lock);
  
#line 1042 
  if (status == 5) 
#line 1043 
                   status = -1; else ;
  
#line 1045 
  return status;
}


#line 1049  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_pmac_del(struct be_adapter *adapter, u32 if_id, int pmac_id, u32 dom)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_pmac_del *req;
  int status;
  
#line 1055 
  if (pmac_id == -1) {
    
#line 1056 
    __retres = 0;
    
#line 1056 
    goto return_label;
  }
  else ;
  
#line 1058 
  ldv_spin_lock_bh_93(& adapter->mcc_lock);
  
#line 1060 
  wrb = wrb_from_mccq(adapter);
  
#line 1061 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1062 
    status = -16;
    
#line 1063 
    goto err;
  }
  else ;
  
#line 1065 
  req = (struct be_cmd_req_pmac_del *)embedded_payload(wrb);
  
#line 1067 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)60,24,wrb,(struct be_dma_mem *)0);
  
#line 1071 
  req->hdr.domain = (unsigned char)dom;
  
#line 1072 
  req->if_id = if_id;
  
#line 1073 
  req->pmac_id = (unsigned int)pmac_id;
  
#line 1075 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 1077 
  ;
  
#line 1078 
  ldv_spin_unlock_bh_94(& adapter->mcc_lock);
  
#line 1079 
  __retres = status;
  return_label: 
#line 1079 
                return __retres;
}


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_cq_create(struct be_adapter *adapter, struct be_queue_info *cq, struct be_queue_info *eq, bool no_delay, int coalesce_wm)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_cq_create *req;
  void *ctxt;
  int status;
  int tmp;
  
#line 1088 
  struct be_dma_mem *q_mem = & cq->dma_mem;
  
#line 1092 
  tmp = ldv_mutex_lock_interruptible_95(& adapter->mbox_lock);
  
#line 1092 
  if (tmp != 0) {
    
#line 1093 
    __retres = -1;
    
#line 1093 
    goto return_label;
  }
  else ;
  
#line 1095 
  wrb = wrb_from_mbox(adapter);
  
#line 1096 
  req = (struct be_cmd_req_cq_create *)embedded_payload(wrb);
  
#line 1097 
  ctxt = (void *)(& req->context);
  
#line 1099 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)12,100,wrb,(struct be_dma_mem *)0);
  
#line 1103 
  req->num_pages = (unsigned short)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  
#line 1105 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    u32 tmp_1;
    u32 tmp_2;
    int tmp_3;
    u32 tmp_4;
    u32 tmp_5;
    u32 tmp_6;
    u32 tmp_7;
    
#line 1106 
    ;
    
#line 1106 
    tmp_1 = amap_mask(2U);
    
#line 1106 
    ;
    
#line 1106 
    amap_set(ctxt,0U,tmp_1,12U,(unsigned int)coalesce_wm);
    
#line 1108 
    ;
    
#line 1108 
    tmp_2 = amap_mask(1U);
    
#line 1108 
    ;
    
#line 1108 
    amap_set(ctxt,0U,tmp_2,14U,(unsigned int)no_delay);
    
#line 1110 
    tmp_3 = __ilog2_u32((unsigned int)cq->len / 256U);
    
#line 1110 
    tmp_4 = amap_mask(2U);
    
#line 1110 
    ;
    
#line 1110 
    amap_set(ctxt,0U,tmp_4,27U,(unsigned int)tmp_3);
    
#line 1112 
    tmp_5 = amap_mask(1U);
    
#line 1112 
    ;
    
#line 1112 
    amap_set(ctxt,0U,tmp_5,29U,1U);
    
#line 1113 
    tmp_6 = amap_mask(1U);
    
#line 1113 
    ;
    
#line 1113 
    amap_set(ctxt,0U,tmp_6,31U,1U);
    
#line 1114 
    ;
    
#line 1114 
    tmp_7 = amap_mask(8U);
    
#line 1114 
    ;
    
#line 1114 
    amap_set(ctxt,1U,tmp_7,22U,(unsigned int)eq->id);
  }
  else {
    u32 tmp_9;
    int tmp_10;
    u32 tmp_11;
    u32 tmp_12;
    u32 tmp_13;
    u32 tmp_14;
    
#line 1116 
    req->hdr.version = (unsigned char)2U;
    
#line 1117 
    req->page_size = (unsigned char)1U;
    
#line 1122 
    if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) {
      u32 tmp_8;
      
#line 1123 
      ;
      
#line 1123 
      tmp_8 = amap_mask(2U);
      
#line 1123 
      ;
      
#line 1123 
      amap_set(ctxt,0U,tmp_8,12U,(unsigned int)coalesce_wm);
    }
    else ;
    
#line 1125 
    ;
    
#line 1125 
    tmp_9 = amap_mask(1U);
    
#line 1125 
    ;
    
#line 1125 
    amap_set(ctxt,0U,tmp_9,14U,(unsigned int)no_delay);
    
#line 1127 
    tmp_10 = __ilog2_u32((unsigned int)cq->len / 256U);
    
#line 1127 
    tmp_11 = amap_mask(2U);
    
#line 1127 
    ;
    
#line 1127 
    amap_set(ctxt,0U,tmp_11,27U,(unsigned int)tmp_10);
    
#line 1129 
    tmp_12 = amap_mask(1U);
    
#line 1129 
    ;
    
#line 1129 
    amap_set(ctxt,0U,tmp_12,29U,1U);
    
#line 1130 
    tmp_13 = amap_mask(1U);
    
#line 1130 
    ;
    
#line 1130 
    amap_set(ctxt,0U,tmp_13,31U,1U);
    
#line 1131 
    ;
    
#line 1131 
    tmp_14 = amap_mask(16U);
    
#line 1131 
    ;
    
#line 1131 
    amap_set(ctxt,1U,tmp_14,0U,(unsigned int)eq->id);
  }
  
#line 1134 
  swap_dws(ctxt,16);
  
#line 1136 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  
#line 1138 
  status = be_mbox_notify_wait(adapter);
  
#line 1139 
  if (status == 0) {
    
#line 1140 
    struct be_cmd_resp_cq_create *resp = embedded_payload(wrb);
    
#line 1142 
    cq->id = resp->cq_id;
    
#line 1143 
    cq->created = (_Bool)1;
  }
  else ;
  
#line 1146 
  ldv_mutex_unlock_96(& adapter->mbox_lock);
  
#line 1148 
  __retres = status;
  return_label: 
#line 1148 
                return __retres;
}


#line 1151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static u32 be_encoded_q_len(int q_len)
{
  int tmp;
  
#line 1153 
  tmp = fls(q_len);
  
#line 1153 
  u32 len_encoded = (unsigned int)tmp;
  
#line 1155 
  if (len_encoded == 16U) 
#line 1156 
                          len_encoded = 0U; else ;
  
#line 1157 
  return len_encoded;
}


#line 1160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_mccq_ext_create(struct be_adapter *adapter, struct be_queue_info *mccq, struct be_queue_info *cq)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_mcc_ext_create *req;
  void *ctxt;
  int status;
  int tmp;
  
#line 1166 
  struct be_dma_mem *q_mem = & mccq->dma_mem;
  
#line 1170 
  tmp = ldv_mutex_lock_interruptible_97(& adapter->mbox_lock);
  
#line 1170 
  if (tmp != 0) {
    
#line 1171 
    __retres = -1;
    
#line 1171 
    goto return_label;
  }
  else ;
  
#line 1173 
  wrb = wrb_from_mbox(adapter);
  
#line 1174 
  req = (struct be_cmd_req_mcc_ext_create *)embedded_payload(wrb);
  
#line 1175 
  ctxt = (void *)(& req->context);
  
#line 1177 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)90,104,wrb,(struct be_dma_mem *)0);
  
#line 1181 
  req->num_pages = (unsigned short)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  
#line 1182 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    u32 tmp_1;
    u32 tmp_2;
    u32 tmp_3;
    u32 tmp_4;
    
#line 1183 
    tmp_1 = amap_mask(1U);
    
#line 1183 
    ;
    
#line 1183 
    amap_set(ctxt,1U,tmp_1,31U,1U);
    
#line 1184 
    tmp_2 = be_encoded_q_len((int)mccq->len);
    
#line 1184 
    tmp_3 = amap_mask(4U);
    
#line 1184 
    ;
    
#line 1184 
    amap_set(ctxt,0U,tmp_3,16U,tmp_2);
    
#line 1186 
    ;
    
#line 1186 
    tmp_4 = amap_mask(10U);
    
#line 1186 
    ;
    
#line 1186 
    amap_set(ctxt,0U,tmp_4,22U,(unsigned int)cq->id);
  }
  else {
    u32 tmp_5;
    u32 tmp_6;
    u32 tmp_7;
    u32 tmp_8;
    u32 tmp_9;
    
#line 1188 
    req->hdr.version = (unsigned char)1U;
    
#line 1189 
    req->cq_id = cq->id;
    
#line 1191 
    tmp_5 = be_encoded_q_len((int)mccq->len);
    
#line 1191 
    tmp_6 = amap_mask(4U);
    
#line 1191 
    ;
    
#line 1191 
    amap_set(ctxt,0U,tmp_6,16U,tmp_5);
    
#line 1193 
    tmp_7 = amap_mask(1U);
    
#line 1193 
    ;
    
#line 1193 
    amap_set(ctxt,1U,tmp_7,31U,1U);
    
#line 1194 
    ;
    
#line 1194 
    tmp_8 = amap_mask(16U);
    
#line 1194 
    ;
    
#line 1194 
    amap_set(ctxt,0U,tmp_8,0U,(unsigned int)cq->id);
    
#line 1196 
    tmp_9 = amap_mask(1U);
    
#line 1196 
    ;
    
#line 1196 
    amap_set(ctxt,2U,tmp_9,0U,1U);
  }
  
#line 1203 
  req->async_event_bitmap[0] = 131170U;
  
#line 1209 
  swap_dws(ctxt,16);
  
#line 1211 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  
#line 1213 
  status = be_mbox_notify_wait(adapter);
  
#line 1214 
  if (status == 0) {
    
#line 1215 
    struct be_cmd_resp_mcc_create *resp = embedded_payload(wrb);
    
#line 1217 
    mccq->id = resp->id;
    
#line 1218 
    mccq->created = (_Bool)1;
  }
  else ;
  
#line 1220 
  ldv_mutex_unlock_98(& adapter->mbox_lock);
  
#line 1222 
  __retres = status;
  return_label: 
#line 1222 
                return __retres;
}


#line 1225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_mccq_org_create(struct be_adapter *adapter, struct be_queue_info *mccq, struct be_queue_info *cq)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_mcc_create *req;
  void *ctxt;
  int status;
  int tmp;
  u32 tmp_1;
  u32 tmp_2;
  u32 tmp_3;
  u32 tmp_4;
  
#line 1231 
  struct be_dma_mem *q_mem = & mccq->dma_mem;
  
#line 1235 
  tmp = ldv_mutex_lock_interruptible_99(& adapter->mbox_lock);
  
#line 1235 
  if (tmp != 0) {
    
#line 1236 
    __retres = -1;
    
#line 1236 
    goto return_label;
  }
  else ;
  
#line 1238 
  wrb = wrb_from_mbox(adapter);
  
#line 1239 
  req = (struct be_cmd_req_mcc_create *)embedded_payload(wrb);
  
#line 1240 
  ctxt = (void *)(& req->context);
  
#line 1242 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)21,100,wrb,(struct be_dma_mem *)0);
  
#line 1246 
  req->num_pages = (unsigned short)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  
#line 1248 
  tmp_1 = amap_mask(1U);
  
#line 1248 
  ;
  
#line 1248 
  amap_set(ctxt,1U,tmp_1,31U,1U);
  
#line 1249 
  tmp_2 = be_encoded_q_len((int)mccq->len);
  
#line 1249 
  tmp_3 = amap_mask(4U);
  
#line 1249 
  ;
  
#line 1249 
  amap_set(ctxt,0U,tmp_3,16U,tmp_2);
  
#line 1251 
  ;
  
#line 1251 
  tmp_4 = amap_mask(10U);
  
#line 1251 
  ;
  
#line 1251 
  amap_set(ctxt,0U,tmp_4,22U,(unsigned int)cq->id);
  
#line 1253 
  swap_dws(ctxt,16);
  
#line 1255 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  
#line 1257 
  status = be_mbox_notify_wait(adapter);
  
#line 1258 
  if (status == 0) {
    
#line 1259 
    struct be_cmd_resp_mcc_create *resp = embedded_payload(wrb);
    
#line 1261 
    mccq->id = resp->id;
    
#line 1262 
    mccq->created = (_Bool)1;
  }
  else ;
  
#line 1265 
  ldv_mutex_unlock_100(& adapter->mbox_lock);
  
#line 1266 
  __retres = status;
  return_label: 
#line 1266 
                return __retres;
}


#line 1269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_mccq_create(struct be_adapter *adapter, struct be_queue_info *mccq, struct be_queue_info *cq)
{
  int status;
  
#line 1274 
  status = be_cmd_mccq_ext_create(adapter,mccq,cq);
  
#line 1275 
  if (status != 0 && (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U))) {
    
#line 1276 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Upgrade to F/W ver 2.102.235.0 ");
    
#line 1279 
    status = be_cmd_mccq_org_create(adapter,mccq,cq);
  }
  else ;
  
#line 1281 
  return status;
}


#line 1284  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_txq_create(struct be_adapter *adapter, struct be_tx_obj *txo)
{
  struct be_cmd_req_eth_tx_create *req;
  int status;
  u32 tmp_0;
  
#line 1286 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  
#line 1288 
  struct be_queue_info *txq = & txo->q;
  
#line 1289 
  struct be_queue_info *cq = & txo->cq;
  
#line 1290 
  struct be_dma_mem *q_mem = & txq->dma_mem;
  
#line 1291 
  int ver = 0;
  
#line 1293 
  req = (struct be_cmd_req_eth_tx_create *)embedded_payload(& wrb);
  
#line 1294 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)7,148,& wrb,(struct be_dma_mem *)0);
  
#line 1297 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    
#line 1298 
    req->hdr.version = (unsigned char)1U;
  else 
    
#line 1299 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
      
#line 1300 
      if ((adapter->function_caps & 64U) != 0U) 
#line 1301 
                                                req->hdr.version = (unsigned char)2U; else ;
    }
    else 
#line 1303 
         req->hdr.version = (unsigned char)2U;
  
#line 1306 
  if ((unsigned int)req->hdr.version != 0U) 
#line 1307 
                                            req->if_id = (unsigned short)adapter->if_handle; else ;
  
#line 1308 
  req->num_pages = (unsigned char)(((((unsigned long)q_mem->va & 4095UL) + (unsigned long)q_mem->size) + 4095UL) >> 12);
  
#line 1309 
  req->ulp_num = (unsigned char)1U;
  
#line 1310 
  req->type = (unsigned short)2U;
  
#line 1311 
  req->cq_id = cq->id;
  
#line 1312 
  tmp_0 = be_encoded_q_len((int)txq->len);
  
#line 1312 
  req->queue_size = (unsigned char)tmp_0;
  
#line 1313 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),8U,q_mem);
  
#line 1314 
  ver = (int)req->hdr.version;
  
#line 1316 
  status = be_cmd_notify_wait(adapter,& wrb);
  
#line 1317 
  if (status == 0) {
    
#line 1318 
    struct be_cmd_resp_eth_tx_create *resp = embedded_payload(& wrb);
    
#line 1320 
    txq->id = resp->cid;
    
#line 1321 
    if (ver == 2) 
#line 1322 
                  txo->db_offset = resp->db_offset; else 
#line 1324 
                                                         txo->db_offset = 96U;
    
#line 1325 
    txq->created = (_Bool)1;
  }
  else ;
  
#line 1328 
  return status;
}


#line 1332  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rxq_create(struct be_adapter *adapter, struct be_queue_info *rxq, u16 cq_id, u16 frag_size, u32 if_id, u32 rss, u8 *rss_id)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_eth_rx_create *req;
  int status;
  int tmp_0;
  
#line 1338 
  struct be_dma_mem *q_mem = & rxq->dma_mem;
  
#line 1341 
  ldv_spin_lock_bh_101(& adapter->mcc_lock);
  
#line 1343 
  wrb = wrb_from_mccq(adapter);
  
#line 1344 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1345 
    status = -16;
    
#line 1346 
    goto err;
  }
  else ;
  
#line 1348 
  req = (struct be_cmd_req_eth_rx_create *)embedded_payload(wrb);
  
#line 1350 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)8,48,wrb,(struct be_dma_mem *)0);
  
#line 1353 
  req->cq_id = cq_id;
  
#line 1354 
  tmp_0 = fls((int)frag_size);
  
#line 1354 
  req->frag_size = (unsigned char)((unsigned int)((unsigned char)tmp_0) + 255U);
  
#line 1355 
  req->num_pages = (unsigned char)2U;
  
#line 1356 
  be_cmd_page_addrs_prepare((struct phys_addr *)(& req->pages),2U,q_mem);
  
#line 1357 
  req->interface_id = if_id;
  
#line 1358 
  req->max_frame_size = (unsigned short)9018U;
  
#line 1359 
  req->rss_queue = rss;
  
#line 1361 
  status = be_mcc_notify_wait(adapter);
  
#line 1362 
  if (status == 0) {
    
#line 1363 
    struct be_cmd_resp_eth_rx_create *resp = embedded_payload(wrb);
    
#line 1365 
    rxq->id = resp->id;
    
#line 1366 
    rxq->created = (_Bool)1;
    
#line 1367 
    *rss_id = resp->rss_id;
  }
  else ;
  err: 
#line 1370 
  ;
  
#line 1371 
  ldv_spin_unlock_bh_102(& adapter->mcc_lock);
  
#line 1372 
  return status;
}


#line 1378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_q_destroy(struct be_adapter *adapter, struct be_queue_info *q, int queue_type)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_q_destroy *req;
  int status;
  int tmp;
  
#line 1383 
  u8 subsys = (unsigned char)0U;
  
#line 1383 
  u8 opcode = (unsigned char)0U;
  
#line 1386 
  tmp = ldv_mutex_lock_interruptible_103(& adapter->mbox_lock);
  
#line 1386 
  if (tmp != 0) {
    
#line 1387 
    __retres = -1;
    
#line 1387 
    goto return_label;
  }
  else ;
  
#line 1389 
  wrb = wrb_from_mbox(adapter);
  
#line 1390 
  req = (struct be_cmd_req_q_destroy *)embedded_payload(wrb);
  
#line 1392 
  switch (queue_type) {
    case 1: 
#line 1393 
    ;
    
#line 1394 
    subsys = (unsigned char)1U;
    
#line 1395 
    opcode = (unsigned char)55U;
    
#line 1396 
    goto ldv_58864;
    case 2: 
#line 1397 
    ;
    
#line 1398 
    subsys = (unsigned char)1U;
    
#line 1399 
    opcode = (unsigned char)54U;
    
#line 1400 
    goto ldv_58864;
    case 3: 
#line 1401 
    ;
    
#line 1402 
    subsys = (unsigned char)3U;
    
#line 1403 
    opcode = (unsigned char)9U;
    
#line 1404 
    goto ldv_58864;
    case 4: 
#line 1405 
    ;
    
#line 1406 
    subsys = (unsigned char)3U;
    
#line 1407 
    opcode = (unsigned char)10U;
    
#line 1408 
    goto ldv_58864;
    case 5: 
#line 1409 
    ;
    
#line 1410 
    subsys = (unsigned char)1U;
    
#line 1411 
    opcode = (unsigned char)53U;
    
#line 1412 
    goto ldv_58864;
    default: 
#line 1413 
    ;
    
#line 1414 
    ldv_inline_asm();
    
#line 1414 
    ;
  }
  ldv_58864: 
#line 1417 
  ;
  
#line 1417 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)((int)subsys),(unsigned char)((int)opcode),20,wrb,(struct be_dma_mem *)0);
  
#line 1419 
  req->id = q->id;
  
#line 1421 
  status = be_mbox_notify_wait(adapter);
  
#line 1422 
  q->created = (_Bool)0;
  
#line 1424 
  ldv_mutex_unlock_104(& adapter->mbox_lock);
  
#line 1425 
  __retres = status;
  return_label: 
#line 1425 
                return __retres;
}


#line 1429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rxq_destroy(struct be_adapter *adapter, struct be_queue_info *q)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_q_destroy *req;
  int status;
  
#line 1435 
  ldv_spin_lock_bh_105(& adapter->mcc_lock);
  
#line 1437 
  wrb = wrb_from_mccq(adapter);
  
#line 1438 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1439 
    status = -16;
    
#line 1440 
    goto err;
  }
  else ;
  
#line 1442 
  req = (struct be_cmd_req_q_destroy *)embedded_payload(wrb);
  
#line 1444 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)10,20,wrb,(struct be_dma_mem *)0);
  
#line 1446 
  req->id = q->id;
  
#line 1448 
  status = be_mcc_notify_wait(adapter);
  
#line 1449 
  q->created = (_Bool)0;
  err: 
#line 1451 
  ;
  
#line 1452 
  ldv_spin_unlock_bh_106(& adapter->mcc_lock);
  
#line 1453 
  return status;
}


#line 1459  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_if_create(struct be_adapter *adapter, u32 cap_flags, u32 en_flags, u32 *if_handle, u32 domain)
{
  struct be_cmd_req_if_create *req;
  int status;
  
#line 1462 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  
#line 1466 
  req = (struct be_cmd_req_if_create *)embedded_payload(& wrb);
  
#line 1467 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)50,40,& wrb,(struct be_dma_mem *)0);
  
#line 1470 
  req->hdr.domain = (unsigned char)domain;
  
#line 1471 
  req->capability_flags = cap_flags;
  
#line 1472 
  req->enable_flags = en_flags;
  
#line 1473 
  req->pmac_invalid = (unsigned char)1U;
  
#line 1475 
  status = be_cmd_notify_wait(adapter,& wrb);
  
#line 1476 
  if (status == 0) {
    
#line 1477 
    struct be_cmd_resp_if_create *resp = embedded_payload(& wrb);
    
#line 1479 
    *if_handle = resp->interface_id;
    
#line 1482 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) && (unsigned int)adapter->virtfn != 0U) 
      
#line 1483 
      *(adapter->pmac_id) = resp->pmac_id; else ;
  }
  else ;
  
#line 1485 
  return status;
}


#line 1489  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_if_destroy(struct be_adapter *adapter, int interface_id, u32 domain)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_if_destroy *req;
  int status;
  
#line 1495 
  if (interface_id == -1) {
    
#line 1496 
    __retres = 0;
    
#line 1496 
    goto return_label;
  }
  else ;
  
#line 1498 
  ldv_spin_lock_bh_107(& adapter->mcc_lock);
  
#line 1500 
  wrb = wrb_from_mccq(adapter);
  
#line 1501 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1502 
    status = -16;
    
#line 1503 
    goto err;
  }
  else ;
  
#line 1505 
  req = (struct be_cmd_req_if_destroy *)embedded_payload(wrb);
  
#line 1507 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)51,20,wrb,(struct be_dma_mem *)0);
  
#line 1510 
  req->hdr.domain = (unsigned char)domain;
  
#line 1511 
  req->interface_id = (unsigned int)interface_id;
  
#line 1513 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 1514 
  ;
  
#line 1515 
  ldv_spin_unlock_bh_108(& adapter->mcc_lock);
  
#line 1516 
  __retres = status;
  return_label: 
#line 1516 
                return __retres;
}


#line 1523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_stats(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_hdr *hdr;
  
#line 1527 
  int status = 0;
  
#line 1529 
  ldv_spin_lock_bh_109(& adapter->mcc_lock);
  
#line 1531 
  wrb = wrb_from_mccq(adapter);
  
#line 1532 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1533 
    status = -16;
    
#line 1534 
    goto err;
  }
  else ;
  
#line 1536 
  hdr = (struct be_cmd_req_hdr *)nonemb_cmd->va;
  
#line 1538 
  be_wrb_cmd_hdr_prepare(hdr,(unsigned char)3,(unsigned char)4,(int)nonemb_cmd->size,wrb,nonemb_cmd);
  
#line 1543 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
    
#line 1544 
    hdr->version = (unsigned char)0U; else ;
  
#line 1545 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U)) 
    
#line 1546 
    hdr->version = (unsigned char)1U; else 
#line 1548 
                                           hdr->version = (unsigned char)2U;
  
#line 1550 
  be_mcc_notify(adapter);
  
#line 1551 
  adapter->stats_cmd_sent = (_Bool)1;
  err: 
#line 1553 
  ;
  
#line 1554 
  ldv_spin_unlock_bh_110(& adapter->mcc_lock);
  
#line 1555 
  return status;
}


#line 1559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_cmd_get_pport_stats(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct lancer_cmd_req_pport_stats *req;
  int tmp_0;
  bool tmp;
  
#line 1564 
  int status = 0;
  
#line 1566 
  tmp = be_cmd_allowed(adapter,(unsigned char)18,(unsigned char)3);
  
#line 1566 
  if (tmp) 
#line 1566 
           tmp_0 = 0; else 
#line 1566 
                           tmp_0 = 1;
  
#line 1566 
  if (tmp_0) {
    
#line 1568 
    __retres = -1;
    
#line 1568 
    goto return_label;
  }
  else ;
  
#line 1570 
  ldv_spin_lock_bh_111(& adapter->mcc_lock);
  
#line 1572 
  wrb = wrb_from_mccq(adapter);
  
#line 1573 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1574 
    status = -16;
    
#line 1575 
    goto err;
  }
  else ;
  
#line 1577 
  req = (struct lancer_cmd_req_pport_stats *)nonemb_cmd->va;
  
#line 1579 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)18,(int)nonemb_cmd->size,wrb,nonemb_cmd);
  
#line 1583 
  req->cmd_params.params.pport_num = (unsigned short)adapter->hba_port_num;
  
#line 1584 
  req->cmd_params.params.reset_stats = (unsigned char)0U;
  
#line 1586 
  be_mcc_notify(adapter);
  
#line 1587 
  adapter->stats_cmd_sent = (_Bool)1;
  err: 
#line 1589 
  ;
  
#line 1590 
  ldv_spin_unlock_bh_112(& adapter->mcc_lock);
  
#line 1591 
  __retres = status;
  return_label: 
#line 1591 
                return __retres;
}


#line 1594  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_mac_to_link_speed(int mac_speed)
{
  int __retres;
  
#line 1596 
  switch (mac_speed) {
    case 0: 
#line 1597 
    ;
    
#line 1598 
    __retres = 0;
    
#line 1598 
    goto return_label;
    case 1: 
#line 1599 
    ;
    
#line 1600 
    __retres = 10;
    
#line 1600 
    goto return_label;
    case 2: 
#line 1601 
    ;
    
#line 1602 
    __retres = 100;
    
#line 1602 
    goto return_label;
    case 3: 
#line 1603 
    ;
    
#line 1604 
    __retres = 1000;
    
#line 1604 
    goto return_label;
    case 4: 
#line 1605 
    ;
    
#line 1606 
    __retres = 10000;
    
#line 1606 
    goto return_label;
    case 5: 
#line 1607 
    ;
    
#line 1608 
    __retres = 20000;
    
#line 1608 
    goto return_label;
    case 6: 
#line 1609 
    ;
    
#line 1610 
    __retres = 25000;
    
#line 1610 
    goto return_label;
    case 7: 
#line 1611 
    ;
    
#line 1612 
    __retres = 40000;
    
#line 1612 
    goto return_label;
  }
  
#line 1614 
  __retres = 0;
  return_label: 
#line 1614 
                return __retres;
}


#line 1620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_link_status_query(struct be_adapter *adapter, u16 *link_speed, u8 *link_status, u32 dom)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_link_status *req;
  int status;
  
#line 1627 
  ldv_spin_lock_bh_113(& adapter->mcc_lock);
  
#line 1629 
  if (link_status != (u8 *)0U) 
#line 1630 
                               *link_status = (unsigned char)0U; else ;
  
#line 1632 
  wrb = wrb_from_mccq(adapter);
  
#line 1633 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1634 
    status = -16;
    
#line 1635 
    goto err;
  }
  else ;
  
#line 1637 
  req = (struct be_cmd_req_link_status *)embedded_payload(wrb);
  
#line 1639 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)5,20,wrb,(struct be_dma_mem *)0);
  
#line 1644 
  if ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) 
    
#line 1645 
    req->hdr.version = (unsigned char)1U; else ;
  
#line 1647 
  req->hdr.domain = (unsigned char)dom;
  
#line 1649 
  status = be_mcc_notify_wait(adapter);
  
#line 1650 
  if (status == 0) {
    
#line 1651 
    struct be_cmd_resp_link_status *resp = embedded_payload(wrb);
    
#line 1653 
    if (link_speed != (u16 *)0U) {
      
#line 1654 
      if ((unsigned int)resp->link_speed != 0U) 
#line 1654 
                                                *link_speed = (unsigned short)((unsigned int)resp->link_speed * 10U);
      else {
        int tmp_1;
        
#line 1655 
        tmp_1 = be_mac_to_link_speed((int)resp->mac_speed);
        
#line 1654 
        *link_speed = (unsigned short)tmp_1;
      }
      
#line 1658 
      if ((unsigned int)resp->logical_link_status == 0U) 
#line 1659 
                                                         *link_speed = (unsigned short)0U; else ;
    }
    else ;
    
#line 1661 
    if (link_status != (u8 *)0U) 
#line 1662 
                                 *link_status = resp->logical_link_status; else ;
  }
  else ;
  err: 
#line 1665 
  ;
  
#line 1666 
  ldv_spin_unlock_bh_114(& adapter->mcc_lock);
  
#line 1667 
  return status;
}


#line 1671  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_die_temperature(struct be_adapter *adapter)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_cntl_addnl_attribs *req;
  
#line 1675 
  int status = 0;
  
#line 1677 
  ldv_spin_lock_bh_115(& adapter->mcc_lock);
  
#line 1679 
  wrb = wrb_from_mccq(adapter);
  
#line 1680 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1681 
    status = -16;
    
#line 1682 
    goto err;
  }
  else ;
  
#line 1684 
  req = (struct be_cmd_req_get_cntl_addnl_attribs *)embedded_payload(wrb);
  
#line 1686 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)121,24,wrb,(struct be_dma_mem *)0);
  
#line 1690 
  be_mcc_notify(adapter);
  err: 
#line 1692 
  ;
  
#line 1693 
  ldv_spin_unlock_bh_116(& adapter->mcc_lock);
  
#line 1694 
  return status;
}


#line 1698  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_reg_len(struct be_adapter *adapter, u32 *log_size)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_fat *req;
  int status;
  
#line 1704 
  ldv_spin_lock_bh_117(& adapter->mcc_lock);
  
#line 1706 
  wrb = wrb_from_mccq(adapter);
  
#line 1707 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1708 
    status = -16;
    
#line 1709 
    goto err;
  }
  else ;
  
#line 1711 
  req = (struct be_cmd_req_get_fat *)embedded_payload(wrb);
  
#line 1713 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)68,36,wrb,(struct be_dma_mem *)0);
  
#line 1716 
  req->fat_operation = 1U;
  
#line 1717 
  status = be_mcc_notify_wait(adapter);
  
#line 1718 
  if (status == 0) {
    
#line 1719 
    struct be_cmd_resp_get_fat *resp = embedded_payload(wrb);
    
#line 1721 
    if (log_size != (u32 *)0U && resp->log_size != 0U) 
#line 1722 
                                                       *log_size = resp->log_size + 4294967292U; else ;
  }
  else ;
  err: 
#line 1725 
  ;
  
#line 1726 
  ldv_spin_unlock_bh_118(& adapter->mcc_lock);
  
#line 1727 
  return status;
}


#line 1730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_regs(struct be_adapter *adapter, u32 buf_len, void *buf)
{
  int __retres;
  struct be_dma_mem get_fat_cmd;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_fat *req;
  u32 total_size;
  u32 buf_size;
  u32 payload_len;
  unsigned int tmp_0;
  
#line 1735 
  u32 offset = 0U;
  
#line 1736 
  u32 log_offset = 4U;
  
#line 1737 
  int status = 0;
  
#line 1739 
  if (buf_len == 0U) {
    
#line 1740 
    __retres = -5;
    
#line 1740 
    goto return_label;
  }
  else ;
  
#line 1742 
  total_size = buf_len;
  
#line 1744 
  get_fat_cmd.size = 61476U;
  
#line 1745 
  get_fat_cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)get_fat_cmd.size,& get_fat_cmd.dma,32U);
  
#line 1748 
  if (get_fat_cmd.va == (void *)0) {
    
#line 1749 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Memory allocation failure while reading FAT data\n");
    
#line 1751 
    __retres = -12;
    
#line 1751 
    goto return_label;
  }
  else ;
  
#line 1754 
  ldv_spin_lock_bh_119(& adapter->mcc_lock);
  
#line 1756 
  goto ldv_58972;
  ldv_58971: 
#line 1757 
  ;
  {
    u32 tmp;
    
#line 1757 
    u32 _min1 = total_size;
    
#line 1757 
    unsigned int _min2 = 61440U;
    
#line 1757 
    if (_min1 < _min2) 
#line 1757 
                       tmp = _min1; else 
#line 1757 
                                         tmp = _min2;
    
#line 1757 
    tmp_0 = tmp;
  }
  
#line 1757 
  buf_size = tmp_0;
  
#line 1758 
  total_size -= buf_size;
  
#line 1760 
  wrb = wrb_from_mccq(adapter);
  
#line 1761 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1762 
    status = -16;
    
#line 1763 
    goto err;
  }
  else ;
  
#line 1765 
  req = (struct be_cmd_req_get_fat *)get_fat_cmd.va;
  
#line 1767 
  payload_len = buf_size + 36U;
  
#line 1768 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)68,(int)payload_len,wrb,& get_fat_cmd);
  
#line 1772 
  req->fat_operation = 0U;
  
#line 1773 
  req->read_log_offset = log_offset;
  
#line 1774 
  req->read_log_length = buf_size;
  
#line 1775 
  req->data_buffer_size = buf_size;
  
#line 1777 
  status = be_mcc_notify_wait(adapter);
  
#line 1778 
  if (status == 0) {
    
#line 1779 
    struct be_cmd_resp_get_fat *resp = (struct be_cmd_resp_get_fat *)get_fat_cmd.va;
    
#line 1781 
    memcpy(buf + offset,(void const *)(& resp->data_buffer),(unsigned long)resp->read_log_length);
  }
  else {
    
#line 1785 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"FAT Table Retrieve error\n");
    
#line 1786 
    goto err;
  }
  
#line 1788 
  offset += buf_size;
  
#line 1789 
  log_offset += buf_size;
  ldv_58972: 
#line 1790 
  ;
  
#line 1756 
  if (total_size != 0U) 
#line 1758 
                        goto ldv_58971; else 
#line 1761 
                                             goto ldv_58973;
  ldv_58973: 
#line 1762 
  ;
  err: 
#line 1791 
  ;
  
#line 1792 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)get_fat_cmd.size,get_fat_cmd.va,get_fat_cmd.dma,(struct dma_attrs *)0);
  
#line 1794 
  ldv_spin_unlock_bh_120(& adapter->mcc_lock);
  
#line 1795 
  __retres = status;
  return_label: 
#line 1795 
                return __retres;
}


#line 1799  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fw_ver(struct be_adapter *adapter)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_fw_version *req;
  int status;
  
#line 1805 
  ldv_spin_lock_bh_121(& adapter->mcc_lock);
  
#line 1807 
  wrb = wrb_from_mccq(adapter);
  
#line 1808 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1809 
    status = -16;
    
#line 1810 
    goto err;
  }
  else ;
  
#line 1813 
  req = (struct be_cmd_req_get_fw_version *)embedded_payload(wrb);
  
#line 1815 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)35,80,wrb,(struct be_dma_mem *)0);
  
#line 1818 
  status = be_mcc_notify_wait(adapter);
  
#line 1819 
  if (status == 0) {
    
#line 1820 
    struct be_cmd_resp_get_fw_version *resp = embedded_payload(wrb);
    
#line 1822 
    strlcpy((char *)(& adapter->fw_ver),(char const *)(& resp->firmware_version_string),32UL);
    
#line 1824 
    strlcpy((char *)(& adapter->fw_on_flash),(char const *)(& resp->fw_on_flash_version_string),32UL);
  }
  else ;
  err: 
#line 1827 
  ;
  
#line 1828 
  ldv_spin_unlock_bh_122(& adapter->mcc_lock);
  
#line 1829 
  return status;
}


#line 1835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int __be_cmd_modify_eqd(struct be_adapter *adapter, struct be_set_eqd *set_eqd, int num)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_modify_eq_delay *req;
  int i;
  
#line 1840 
  int status = 0;
  
#line 1842 
  ldv_spin_lock_bh_123(& adapter->mcc_lock);
  
#line 1844 
  wrb = wrb_from_mccq(adapter);
  
#line 1845 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1846 
    status = -16;
    
#line 1847 
    goto err;
  }
  else ;
  
#line 1849 
  req = (struct be_cmd_req_modify_eq_delay *)embedded_payload(wrb);
  
#line 1851 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)41,404,wrb,(struct be_dma_mem *)0);
  
#line 1855 
  req->num_eq = (unsigned int)num;
  
#line 1856 
  i = 0;
  
#line 1856 
  goto ldv_58993;
  ldv_58992: 
#line 1857 
  ;
  
#line 1857 
  req->set_eqd[i].eq_id = (set_eqd + i)->eq_id;
  
#line 1858 
  req->set_eqd[i].phase = 0U;
  
#line 1859 
  req->set_eqd[i].delay_multiplier = (set_eqd + i)->delay_multiplier;
  
#line 1856 
  i += 1;
  ldv_58993: 
#line 1857 
  ;
  
#line 1856 
  if (i < num) 
#line 1858 
               goto ldv_58992; else 
#line 1861 
                                    goto ldv_58994;
  ldv_58994: 
#line 1862 
  ;
  
#line 1863 
  be_mcc_notify(adapter);
  err: 
#line 1864 
  ;
  
#line 1865 
  ldv_spin_unlock_bh_124(& adapter->mcc_lock);
  
#line 1866 
  return status;
}


#line 1869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_modify_eqd(struct be_adapter *adapter, struct be_set_eqd *set_eqd, int num)
{
  int __retres;
  int num_eqs;
  int tmp_0;
  
#line 1872 
  int i = 0;
  
#line 1874 
  goto ldv_59006;
  ldv_59005: 
#line 1875 
  ;
  {
    int tmp;
    
#line 1875 
    int _min1 = num;
    
#line 1875 
    int _min2 = 8;
    
#line 1875 
    if (_min1 < _min2) 
#line 1875 
                       tmp = _min1; else 
#line 1875 
                                         tmp = _min2;
    
#line 1875 
    tmp_0 = tmp;
  }
  
#line 1875 
  num_eqs = tmp_0;
  
#line 1876 
  __be_cmd_modify_eqd(adapter,set_eqd + i,num_eqs);
  
#line 1877 
  i += num_eqs;
  
#line 1878 
  num -= num_eqs;
  ldv_59006: 
#line 1879 
  ;
  
#line 1874 
  if (num != 0) 
#line 1876 
                goto ldv_59005; else 
#line 1879 
                                     goto ldv_59007;
  ldv_59007: 
#line 1880 
  ;
  
#line 1881 
  __retres = 0;
  
#line 1881 
  return __retres;
}


#line 1885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_vlan_config(struct be_adapter *adapter, u32 if_id, u16 *vtag_array, u32 num, u32 domain)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_vlan_config *req;
  int status;
  
#line 1892 
  ldv_spin_lock_bh_125(& adapter->mcc_lock);
  
#line 1894 
  wrb = wrb_from_mccq(adapter);
  
#line 1895 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1896 
    status = -16;
    
#line 1897 
    goto err;
  }
  else ;
  
#line 1899 
  req = (struct be_cmd_req_vlan_config *)embedded_payload(wrb);
  
#line 1901 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)4,148,wrb,(struct be_dma_mem *)0);
  
#line 1904 
  req->hdr.domain = (unsigned char)domain;
  
#line 1906 
  req->interface_id = (unsigned char)if_id;
  
#line 1907 
  req->untagged = (unsigned char)((unsigned int)((unsigned char)(adapter->res.if_cap_flags >> 5)) & 1U);
  
#line 1908 
  req->num_vlan = (unsigned char)num;
  
#line 1909 
  memcpy((void *)(& req->normal_vlan),(void const *)vtag_array,(unsigned long)req->num_vlan * 2UL);
  
#line 1912 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 1913 
  ;
  
#line 1914 
  ldv_spin_unlock_bh_126(& adapter->mcc_lock);
  
#line 1915 
  return status;
}


#line 1918  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int __be_cmd_rx_filter(struct be_adapter *adapter, u32 flags, u32 value)
{
  struct be_mcc_wrb *wrb;
  int status;
  
#line 1921 
  struct be_dma_mem *mem = & adapter->rx_filter;
  
#line 1922 
  struct be_cmd_req_rx_filter *req = (struct be_cmd_req_rx_filter *)mem->va;
  
#line 1925 
  ldv_spin_lock_bh_127(& adapter->mcc_lock);
  
#line 1927 
  wrb = wrb_from_mccq(adapter);
  
#line 1928 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1929 
    status = -16;
    
#line 1930 
    goto err;
  }
  else ;
  
#line 1932 
  memset((void *)req,0,424UL);
  
#line 1933 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)34,424,wrb,mem);
  
#line 1937 
  req->if_id = (unsigned int)adapter->if_handle;
  
#line 1938 
  req->if_flags_mask = flags;
  
#line 1939 
  if (value == 1U) 
#line 1939 
                   req->if_flags = req->if_flags_mask; else 
#line 1939 
                                                            req->if_flags = 0U;
  
#line 1941 
  if ((flags & 4096U) != 0U) {
    struct netdev_hw_addr *ha;
    struct netdev_hw_addr *tmp;
    int tmp_0;
    struct netdev_hw_addr *tmp_1;
    
#line 1943 
    int i = 0;
    
#line 1948 
    req->if_flags_mask |= adapter->res.if_cap_flags & 512U;
    
#line 1951 
    req->mcast_num = (unsigned int)(adapter->netdev)->mc.count;
    {
      
#line 1952 
      struct list_head const *__mptr = (struct list_head const *)(adapter->netdev)->mc.list.next;
      
#line 1952 
      tmp = (struct netdev_hw_addr *)__mptr;
    }
    
#line 1952 
    ha = tmp;
    
#line 1952 
    goto ldv_59036;
    ldv_59035: 
#line 1953 
    ;
    
#line 1953 
    ;
    
#line 1953 
    tmp_0 = i;
    
#line 1953 
    i += 1;
    
#line 1953 
    ;
    
#line 1953 
    memcpy((void *)(& req->mcast_mac[tmp_0].byte),(void const *)(& ha->addr),6UL);
    {
      
#line 1952 
      struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
      
#line 1952 
      tmp_1 = (struct netdev_hw_addr *)__mptr_0;
    }
    
#line 1952 
    ha = tmp_1;
    ldv_59036: 
#line 1954 
    ;
    
#line 1952 
    if (& ha->list != & (adapter->netdev)->mc.list) 
#line 1954 
                                                    goto ldv_59035; else 
                                                                    
#line 1957 
                                                                    goto ldv_59037;
    ldv_59037: 
#line 1958 
    ;
  }
  else ;
  
#line 1956 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 1957 
  ;
  
#line 1958 
  ldv_spin_unlock_bh_128(& adapter->mcc_lock);
  
#line 1959 
  return status;
}


#line 1962  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rx_filter(struct be_adapter *adapter, u32 flags, u32 value)
{
  int tmp;
  
#line 1964 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1966 
  if ((adapter->res.if_cap_flags & flags) != flags) {
    
#line 1967 
    dev_warn((struct device const *)dev,"Cannot set rx filter flags 0x%x\n",flags);
    
#line 1968 
    dev_warn((struct device const *)dev,"Interface is capable of 0x%x flags only\n",adapter->res.if_cap_flags);
  }
  else ;
  
#line 1971 
  flags = adapter->res.if_cap_flags & flags;
  
#line 1973 
  tmp = __be_cmd_rx_filter(adapter,flags,value);
  
#line 1973 
  return tmp;
}


#line 1977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_flow_control(struct be_adapter *adapter, u32 tx_fc, u32 rx_fc)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_set_flow_control *req;
  int status;
  int tmp_0;
  bool tmp;
  
#line 1983 
  tmp = be_cmd_allowed(adapter,(unsigned char)36,(unsigned char)1);
  
#line 1983 
  if (tmp) 
#line 1983 
           tmp_0 = 0; else 
#line 1983 
                           tmp_0 = 1;
  
#line 1983 
  if (tmp_0) {
    
#line 1985 
    __retres = -1;
    
#line 1985 
    goto return_label;
  }
  else ;
  
#line 1987 
  ldv_spin_lock_bh_129(& adapter->mcc_lock);
  
#line 1989 
  wrb = wrb_from_mccq(adapter);
  
#line 1990 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 1991 
    status = -16;
    
#line 1992 
    goto err;
  }
  else ;
  
#line 1994 
  req = (struct be_cmd_req_set_flow_control *)embedded_payload(wrb);
  
#line 1996 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)36,20,wrb,(struct be_dma_mem *)0);
  
#line 2000 
  req->hdr.version = (unsigned char)1U;
  
#line 2001 
  req->tx_flow_control = (unsigned short)tx_fc;
  
#line 2002 
  req->rx_flow_control = (unsigned short)rx_fc;
  
#line 2004 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 2006 
  ;
  
#line 2007 
  ldv_spin_unlock_bh_130(& adapter->mcc_lock);
  
#line 2009 
  if (status > 0 && (status & 65535) == 68) {
    
#line 2010 
    __retres = -95;
    
#line 2010 
    goto return_label;
  }
  else ;
  
#line 2012 
  __retres = status;
  return_label: 
#line 2012 
                return __retres;
}


#line 2016  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_flow_control(struct be_adapter *adapter, u32 *tx_fc, u32 *rx_fc)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_flow_control *req;
  int status;
  int tmp_0;
  bool tmp;
  
#line 2022 
  tmp = be_cmd_allowed(adapter,(unsigned char)37,(unsigned char)1);
  
#line 2022 
  if (tmp) 
#line 2022 
           tmp_0 = 0; else 
#line 2022 
                           tmp_0 = 1;
  
#line 2022 
  if (tmp_0) {
    
#line 2024 
    __retres = -1;
    
#line 2024 
    goto return_label;
  }
  else ;
  
#line 2026 
  ldv_spin_lock_bh_131(& adapter->mcc_lock);
  
#line 2028 
  wrb = wrb_from_mccq(adapter);
  
#line 2029 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2030 
    status = -16;
    
#line 2031 
    goto err;
  }
  else ;
  
#line 2033 
  req = (struct be_cmd_req_get_flow_control *)embedded_payload(wrb);
  
#line 2035 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)37,20,wrb,(struct be_dma_mem *)0);
  
#line 2039 
  status = be_mcc_notify_wait(adapter);
  
#line 2040 
  if (status == 0) {
    
#line 2042 
    struct be_cmd_resp_get_flow_control *resp = embedded_payload(wrb);
    
#line 2044 
    *tx_fc = (unsigned int)resp->tx_flow_control;
    
#line 2045 
    *rx_fc = (unsigned int)resp->rx_flow_control;
  }
  else ;
  err: 
#line 2048 
  ;
  
#line 2049 
  ldv_spin_unlock_bh_132(& adapter->mcc_lock);
  
#line 2050 
  __retres = status;
  return_label: 
#line 2050 
                return __retres;
}


#line 2054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_fw_cfg(struct be_adapter *adapter)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_query_fw_cfg *req;
  int status;
  int tmp;
  
#line 2060 
  tmp = ldv_mutex_lock_interruptible_133(& adapter->mbox_lock);
  
#line 2060 
  if (tmp != 0) {
    
#line 2061 
    __retres = -1;
    
#line 2061 
    goto return_label;
  }
  else ;
  
#line 2063 
  wrb = wrb_from_mbox(adapter);
  
#line 2064 
  req = (struct be_cmd_req_query_fw_cfg *)embedded_payload(wrb);
  
#line 2066 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)58,140,wrb,(struct be_dma_mem *)0);
  
#line 2070 
  status = be_mbox_notify_wait(adapter);
  
#line 2071 
  if (status == 0) {
    
#line 2072 
    struct be_cmd_resp_query_fw_cfg *resp = embedded_payload(wrb);
    
#line 2074 
    adapter->port_num = resp->phys_port;
    
#line 2075 
    adapter->function_mode = resp->function_mode;
    
#line 2076 
    adapter->function_caps = resp->function_caps;
    
#line 2077 
    adapter->asic_rev = (unsigned short)((unsigned int)((unsigned short)resp->asic_revision) & 255U);
    
#line 2078 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"FW config: function_mode=0x%x, function_caps=0x%x\n",adapter->function_mode,adapter->function_caps);
  }
  else ;
  
#line 2083 
  ldv_mutex_unlock_134(& adapter->mbox_lock);
  
#line 2084 
  __retres = status;
  return_label: 
#line 2084 
                return __retres;
}


#line 2088  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_reset_function(struct be_adapter *adapter)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_hdr *req;
  int status;
  int tmp;
  
#line 2094 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    
#line 2095 
    iowrite32(134217728U,(void *)(adapter->db + 1032U));
    
#line 2097 
    status = lancer_wait_ready(adapter);
    
#line 2098 
    if (status != 0) 
#line 2099 
                     dev_err((struct device const *)(& (adapter->pdev)->dev),"Adapter in non recoverable error\n"); else ;
    
#line 2101 
    __retres = status;
    
#line 2101 
    goto return_label;
  }
  else ;
  
#line 2104 
  tmp = ldv_mutex_lock_interruptible_135(& adapter->mbox_lock);
  
#line 2104 
  if (tmp != 0) {
    
#line 2105 
    __retres = -1;
    
#line 2105 
    goto return_label;
  }
  else ;
  
#line 2107 
  wrb = wrb_from_mbox(adapter);
  
#line 2108 
  req = (struct be_cmd_req_hdr *)embedded_payload(wrb);
  
#line 2110 
  be_wrb_cmd_hdr_prepare(req,(unsigned char)1,(unsigned char)61,16,wrb,(struct be_dma_mem *)0);
  
#line 2114 
  status = be_mbox_notify_wait(adapter);
  
#line 2116 
  ldv_mutex_unlock_136(& adapter->mbox_lock);
  
#line 2117 
  __retres = status;
  return_label: 
#line 2117 
                return __retres;
}


#line 2120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_rss_config(struct be_adapter *adapter, u8 *rsstable, u32 rss_hash_opts, u16 table_size, u8 const *rss_hkey)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_rss_config *req;
  int status;
  int tmp_0;
  
#line 2127 
  if ((adapter->res.if_cap_flags & 4U) == 0U) {
    
#line 2128 
    __retres = 0;
    
#line 2128 
    goto return_label;
  }
  else ;
  
#line 2130 
  ldv_spin_lock_bh_137(& adapter->mcc_lock);
  
#line 2132 
  wrb = wrb_from_mccq(adapter);
  
#line 2133 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2134 
    status = -16;
    
#line 2135 
    goto err;
  }
  else ;
  
#line 2137 
  req = (struct be_cmd_req_rss_config *)embedded_payload(wrb);
  
#line 2139 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)1,196,wrb,(struct be_dma_mem *)0);
  
#line 2142 
  req->if_id = (unsigned int)adapter->if_handle;
  
#line 2143 
  req->enable_rss = (unsigned short)rss_hash_opts;
  
#line 2144 
  tmp_0 = fls((int)table_size);
  
#line 2144 
  req->cpu_table_size_log2 = (unsigned short)((unsigned int)((unsigned short)tmp_0) + 65535U);
  
#line 2146 
  if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) 
    
#line 2147 
    req->hdr.version = (unsigned char)1U; else ;
  
#line 2149 
  memcpy((void *)(& req->cpu_table),(void const *)rsstable,(unsigned long)table_size);
  
#line 2150 
  memcpy((void *)(& req->hash),(void const *)rss_hkey,40UL);
  
#line 2151 
  swap_dws((void *)(& req->hash),40);
  
#line 2153 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 2154 
  ;
  
#line 2155 
  ldv_spin_unlock_bh_138(& adapter->mcc_lock);
  
#line 2156 
  __retres = status;
  return_label: 
#line 2156 
                return __retres;
}


#line 2160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_beacon_state(struct be_adapter *adapter, u8 port_num, u8 bcn, u8 sts, u8 state)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_enable_disable_beacon *req;
  int status;
  
#line 2167 
  ldv_spin_lock_bh_139(& adapter->mcc_lock);
  
#line 2169 
  wrb = wrb_from_mccq(adapter);
  
#line 2170 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2171 
    status = -16;
    
#line 2172 
    goto err;
  }
  else ;
  
#line 2174 
  req = (struct be_cmd_req_enable_disable_beacon *)embedded_payload(wrb);
  
#line 2176 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)69,20,wrb,(struct be_dma_mem *)0);
  
#line 2180 
  req->port_num = port_num;
  
#line 2181 
  req->beacon_state = state;
  
#line 2182 
  req->beacon_duration = bcn;
  
#line 2183 
  req->status_duration = sts;
  
#line 2185 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 2187 
  ;
  
#line 2188 
  ldv_spin_unlock_bh_140(& adapter->mcc_lock);
  
#line 2189 
  return status;
}


#line 2193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_beacon_state(struct be_adapter *adapter, u8 port_num, u32 *state)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_beacon_state *req;
  int status;
  
#line 2199 
  ldv_spin_lock_bh_141(& adapter->mcc_lock);
  
#line 2201 
  wrb = wrb_from_mccq(adapter);
  
#line 2202 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2203 
    status = -16;
    
#line 2204 
    goto err;
  }
  else ;
  
#line 2206 
  req = (struct be_cmd_req_get_beacon_state *)embedded_payload(wrb);
  
#line 2208 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)70,20,wrb,(struct be_dma_mem *)0);
  
#line 2212 
  req->port_num = port_num;
  
#line 2214 
  status = be_mcc_notify_wait(adapter);
  
#line 2215 
  if (status == 0) {
    
#line 2217 
    struct be_cmd_resp_get_beacon_state *resp = embedded_payload(wrb);
    
#line 2219 
    *state = (unsigned int)resp->beacon_state;
  }
  else ;
  err: 
#line 2222 
  ;
  
#line 2223 
  ldv_spin_unlock_bh_142(& adapter->mcc_lock);
  
#line 2224 
  return status;
}


#line 2228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_read_port_transceiver_data(struct be_adapter *adapter, u8 page_num, u8 *data)
{
  int __retres;
  struct be_dma_mem cmd;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_port_type *req;
  int status;
  
#line 2236 
  if ((unsigned int)page_num > 162U) {
    
#line 2237 
    __retres = -22;
    
#line 2237 
    goto return_label;
  }
  else ;
  
#line 2239 
  cmd.size = 280U;
  
#line 2240 
  cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,32U);
  
#line 2242 
  if (cmd.va == (void *)0) {
    
#line 2243 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Memory allocation failed\n");
    
#line 2244 
    __retres = -12;
    
#line 2244 
    goto return_label;
  }
  else ;
  
#line 2247 
  ldv_spin_lock_bh_143(& adapter->mcc_lock);
  
#line 2249 
  wrb = wrb_from_mccq(adapter);
  
#line 2250 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2251 
    status = -16;
    
#line 2252 
    goto err;
  }
  else ;
  
#line 2254 
  req = (struct be_cmd_req_port_type *)cmd.va;
  
#line 2256 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)73,(int)cmd.size,wrb,& cmd);
  
#line 2260 
  req->port = (unsigned int)adapter->hba_port_num;
  
#line 2261 
  req->page_num = (unsigned int)page_num;
  
#line 2262 
  status = be_mcc_notify_wait(adapter);
  
#line 2263 
  if (status == 0) {
    
#line 2264 
    struct be_cmd_resp_port_type *resp = (struct be_cmd_resp_port_type *)cmd.va;
    
#line 2266 
    memcpy((void *)data,(void const *)(& resp->page_data),256UL);
  }
  else ;
  err: 
#line 2268 
  ;
  
#line 2269 
  ldv_spin_unlock_bh_144(& adapter->mcc_lock);
  
#line 2270 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma,(struct dma_attrs *)0);
  
#line 2271 
  __retres = status;
  return_label: 
#line 2271 
                return __retres;
}


#line 2274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_cmd_write_object(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 data_size, u32 data_offset, char const *obj_name, u32 *data_written, u8 *change_status, u8 *addn_status)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct lancer_cmd_req_write_object *req;
  struct lancer_cmd_resp_write_object *resp;
  int status;
  u32 tmp_0;
  unsigned long tmp_4;
  unsigned long tmp_3;
  
#line 2282 
  void *ctxt = (void *)0;
  
#line 2285 
  ldv_spin_lock_bh_145(& adapter->mcc_lock);
  
#line 2286 
  adapter->flash_status = 0U;
  
#line 2288 
  wrb = wrb_from_mccq(adapter);
  
#line 2289 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2290 
    status = -16;
    
#line 2291 
    goto err_unlock;
  }
  else ;
  
#line 2294 
  req = (struct lancer_cmd_req_write_object *)embedded_payload(wrb);
  
#line 2296 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)172,144,wrb,(struct be_dma_mem *)0);
  
#line 2301 
  ctxt = (void *)(& req->context);
  
#line 2302 
  ;
  
#line 2302 
  tmp_0 = amap_mask(24U);
  
#line 2302 
  ;
  
#line 2302 
  amap_set(ctxt,0U,tmp_0,0U,data_size);
  
#line 2305 
  if (data_size == 0U) {
    u32 tmp_1;
    
#line 2306 
    tmp_1 = amap_mask(1U);
    
#line 2306 
    ;
    
#line 2306 
    amap_set(ctxt,0U,tmp_1,31U,1U);
  }
  else {
    u32 tmp_2;
    
#line 2309 
    tmp_2 = amap_mask(1U);
    
#line 2309 
    ;
    
#line 2309 
    amap_set(ctxt,0U,tmp_2,31U,0U);
  }
  
#line 2312 
  swap_dws(ctxt,4);
  
#line 2313 
  req->write_offset = data_offset;
  
#line 2314 
  strlcpy((char *)(& req->object_name),obj_name,104UL);
  
#line 2315 
  req->descriptor_count = 1U;
  
#line 2316 
  req->buf_len = data_size;
  
#line 2317 
  req->addr_low = (unsigned int)cmd->dma + 144U;
  
#line 2320 
  req->addr_high = (unsigned int)((cmd->dma + 144ULL) >> 32);
  
#line 2323 
  be_mcc_notify(adapter);
  
#line 2324 
  ldv_spin_unlock_bh_146(& adapter->mcc_lock);
  
#line 2326 
  tmp_3 = msecs_to_jiffies(60000U);
  
#line 2326 
  ;
  
#line 2326 
  tmp_4 = wait_for_completion_timeout(& adapter->et_cmd_compl,tmp_3);
  
#line 2326 
  if (tmp_4 == 0UL) 
#line 2328 
                    status = -110; else 
#line 2330 
                                        status = (int)adapter->flash_status;
  
#line 2332 
  resp = (struct lancer_cmd_resp_write_object *)embedded_payload(wrb);
  
#line 2333 
  if (status == 0) {
    
#line 2334 
    *data_written = resp->actual_write_len;
    
#line 2335 
    *change_status = resp->change_status;
  }
  else 
#line 2337 
       *addn_status = resp->additional_status;
  
#line 2340 
  __retres = status;
  
#line 2340 
  goto return_label;
  err_unlock: 
#line 2342 
  ;
  
#line 2343 
  ldv_spin_unlock_bh_147(& adapter->mcc_lock);
  
#line 2344 
  __retres = status;
  return_label: 
#line 2344 
                return __retres;
}


#line 2347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_cable_type(struct be_adapter *adapter)
{
  u8 page_data[256U];
  int status;
  
#line 2352 
  status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)160,(u8 *)(& page_data));
  
#line 2354 
  if (status == 0) {
    
#line 2355 
    switch ((int)adapter->phy.interface_type) {
      case 10: 
#line 2356 
      ;
      
#line 2357 
      adapter->phy.cable_type = page_data[131];
      
#line 2359 
      goto ldv_59141;
      case 3: 
#line 2360 
      ;
      
#line 2361 
      adapter->phy.cable_type = page_data[8];
      
#line 2363 
      goto ldv_59141;
      default: 
#line 2364 
      ;
      
#line 2365 
      adapter->phy.cable_type = (unsigned char)0U;
      
#line 2366 
      goto ldv_59141;
    }
    ldv_59141: 
#line 2368 
    ;
  }
  else ;
  
#line 2369 
  return status;
}


#line 2372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_sfp_info(struct be_adapter *adapter)
{
  u8 page_data[256U];
  int status;
  
#line 2377 
  status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)160,(u8 *)(& page_data));
  
#line 2379 
  if (status == 0) {
    
#line 2380 
    strlcpy((char *)(& adapter->phy.vendor_name),(char const *)(& page_data) + 20U,16UL);
    
#line 2382 
    strlcpy((char *)(& adapter->phy.vendor_pn),(char const *)(& page_data) + 40U,16UL);
  }
  else ;
  
#line 2387 
  return status;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_cmd_delete_object(struct be_adapter *adapter, char const *obj_name)
{
  struct lancer_cmd_req_delete_object *req;
  struct be_mcc_wrb *wrb;
  int status;
  
#line 2396 
  ldv_spin_lock_bh_148(& adapter->mcc_lock);
  
#line 2398 
  wrb = wrb_from_mccq(adapter);
  
#line 2399 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2400 
    status = -16;
    
#line 2401 
    goto err;
  }
  else ;
  
#line 2404 
  req = (struct lancer_cmd_req_delete_object *)embedded_payload(wrb);
  
#line 2406 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)174,128,wrb,(struct be_dma_mem *)0);
  
#line 2410 
  strlcpy((char *)(& req->object_name),obj_name,104UL);
  
#line 2412 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 2413 
  ;
  
#line 2414 
  ldv_spin_unlock_bh_149(& adapter->mcc_lock);
  
#line 2415 
  return status;
}


#line 2418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_cmd_read_object(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 data_size, u32 data_offset, char const *obj_name, u32 *data_read, u32 *eof, u8 *addn_status)
{
  struct be_mcc_wrb *wrb;
  struct lancer_cmd_req_read_object *req;
  struct lancer_cmd_resp_read_object *resp;
  int status;
  
#line 2427 
  ldv_spin_lock_bh_150(& adapter->mcc_lock);
  
#line 2429 
  wrb = wrb_from_mccq(adapter);
  
#line 2430 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2431 
    status = -16;
    
#line 2432 
    goto err_unlock;
  }
  else ;
  
#line 2435 
  req = (struct lancer_cmd_req_read_object *)embedded_payload(wrb);
  
#line 2437 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)171,144,wrb,(struct be_dma_mem *)0);
  
#line 2442 
  req->desired_read_len = data_size;
  
#line 2443 
  req->read_offset = data_offset;
  
#line 2444 
  strcpy((char *)(& req->object_name),obj_name);
  
#line 2445 
  req->descriptor_count = 1U;
  
#line 2446 
  req->buf_len = data_size;
  
#line 2447 
  req->addr_low = (unsigned int)cmd->dma;
  
#line 2448 
  req->addr_high = (unsigned int)(cmd->dma >> 32);
  
#line 2450 
  status = be_mcc_notify_wait(adapter);
  
#line 2452 
  resp = (struct lancer_cmd_resp_read_object *)embedded_payload(wrb);
  
#line 2453 
  if (status == 0) {
    
#line 2454 
    *data_read = resp->actual_read_len;
    
#line 2455 
    *eof = resp->eof;
  }
  else 
#line 2457 
       *addn_status = resp->additional_status;
  err_unlock: 
#line 2460 
  ;
  
#line 2461 
  ldv_spin_unlock_bh_151(& adapter->mcc_lock);
  
#line 2462 
  return status;
}


#line 2465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_write_flashrom(struct be_adapter *adapter, struct be_dma_mem *cmd, u32 flash_type, u32 flash_opcode, u32 img_offset, u32 buf_size)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_write_flashrom *req;
  int status;
  unsigned long tmp_0;
  unsigned long tmp;
  
#line 2473 
  ldv_spin_lock_bh_152(& adapter->mcc_lock);
  
#line 2474 
  adapter->flash_status = 0U;
  
#line 2476 
  wrb = wrb_from_mccq(adapter);
  
#line 2477 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2478 
    status = -16;
    
#line 2479 
    goto err_unlock;
  }
  else ;
  
#line 2481 
  req = (struct be_cmd_write_flashrom *)cmd->va;
  
#line 2483 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)7,(int)cmd->size,wrb,cmd);
  
#line 2487 
  req->params.op_type = flash_type;
  
#line 2488 
  if (flash_type == 7U) 
#line 2489 
                        req->params.offset = img_offset; else ;
  
#line 2491 
  req->params.op_code = flash_opcode;
  
#line 2492 
  req->params.data_buf_size = buf_size;
  
#line 2494 
  be_mcc_notify(adapter);
  
#line 2495 
  ldv_spin_unlock_bh_153(& adapter->mcc_lock);
  
#line 2497 
  tmp = msecs_to_jiffies(40000U);
  
#line 2497 
  ;
  
#line 2497 
  tmp_0 = wait_for_completion_timeout(& adapter->et_cmd_compl,tmp);
  
#line 2497 
  if (tmp_0 == 0UL) 
#line 2499 
                    status = -110; else 
#line 2501 
                                        status = (int)adapter->flash_status;
  
#line 2503 
  __retres = status;
  
#line 2503 
  goto return_label;
  err_unlock: 
#line 2505 
  ;
  
#line 2506 
  ldv_spin_unlock_bh_154(& adapter->mcc_lock);
  
#line 2507 
  __retres = status;
  return_label: 
#line 2507 
                return __retres;
}


#line 2510  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_flash_crc(struct be_adapter *adapter, u8 *flashed_crc, u16 img_optype, u32 img_offset, u32 crc_offset)
{
  struct be_cmd_read_flash_crc *req;
  struct be_mcc_wrb *wrb;
  int status;
  
#line 2517 
  ldv_spin_lock_bh_155(& adapter->mcc_lock);
  
#line 2519 
  wrb = wrb_from_mccq(adapter);
  
#line 2520 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2521 
    status = -16;
    
#line 2522 
    goto err;
  }
  else ;
  
#line 2524 
  req = (struct be_cmd_read_flash_crc *)embedded_payload(wrb);
  
#line 2526 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)6,40,wrb,(struct be_dma_mem *)0);
  
#line 2530 
  req->params.op_type = (unsigned int)img_optype;
  
#line 2531 
  if ((unsigned int)img_optype == 7U) 
#line 2532 
                                      req->params.offset = img_offset + crc_offset; else 
                                                                    
#line 2534 
                                                                    req->params.offset = crc_offset;
  
#line 2536 
  req->params.op_code = 4U;
  
#line 2537 
  req->params.data_buf_size = 4U;
  
#line 2539 
  status = be_mcc_notify_wait(adapter);
  
#line 2540 
  if (status == 0) 
#line 2541 
                   memcpy((void *)flashed_crc,(void const *)(& req->crc),4UL); else ;
  err: 
#line 2543 
  ;
  
#line 2544 
  ldv_spin_unlock_bh_156(& adapter->mcc_lock);
  
#line 2545 
  return status;
}


#line 2548  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_enable_magic_wol(struct be_adapter *adapter, u8 *mac, struct be_dma_mem *nonemb_cmd)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_acpi_wol_magic_config *req;
  int status;
  
#line 2555 
  ldv_spin_lock_bh_157(& adapter->mcc_lock);
  
#line 2557 
  wrb = wrb_from_mccq(adapter);
  
#line 2558 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2559 
    status = -16;
    
#line 2560 
    goto err;
  }
  else ;
  
#line 2562 
  req = (struct be_cmd_req_acpi_wol_magic_config *)nonemb_cmd->va;
  
#line 2564 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)12,604,wrb,nonemb_cmd);
  
#line 2567 
  memcpy((void *)(& req->magic_mac),(void const *)mac,6UL);
  
#line 2569 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 2571 
  ;
  
#line 2572 
  ldv_spin_unlock_bh_158(& adapter->mcc_lock);
  
#line 2573 
  return status;
}


#line 2576  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_loopback(struct be_adapter *adapter, u8 port_num, u8 loopback_type, u8 enable)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_set_lmode *req;
  int status;
  
#line 2583 
  ldv_spin_lock_bh_159(& adapter->mcc_lock);
  
#line 2585 
  wrb = wrb_from_mccq(adapter);
  
#line 2586 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2587 
    status = -16;
    
#line 2588 
    goto err;
  }
  else ;
  
#line 2591 
  req = (struct be_cmd_req_set_lmode *)embedded_payload(wrb);
  
#line 2593 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)11,(unsigned char)19,20,wrb,(struct be_dma_mem *)0);
  
#line 2597 
  req->src_port = port_num;
  
#line 2598 
  req->dest_port = port_num;
  
#line 2599 
  req->loopback_type = loopback_type;
  
#line 2600 
  req->loopback_state = enable;
  
#line 2602 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 2603 
  ;
  
#line 2604 
  ldv_spin_unlock_bh_160(& adapter->mcc_lock);
  
#line 2605 
  return status;
}


#line 2608  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_loopback_test(struct be_adapter *adapter, u32 port_num, u32 loopback_type, u32 pkt_size, u32 num_pkts, u64 pattern)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_loopback_test *req;
  struct be_cmd_resp_loopback_test *resp;
  int status;
  
#line 2617 
  ldv_spin_lock_bh_161(& adapter->mcc_lock);
  
#line 2619 
  wrb = wrb_from_mccq(adapter);
  
#line 2620 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2621 
    status = -16;
    
#line 2622 
    goto err;
  }
  else ;
  
#line 2625 
  req = (struct be_cmd_req_loopback_test *)embedded_payload(wrb);
  
#line 2627 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)11,(unsigned char)18,48,wrb,(struct be_dma_mem *)0);
  
#line 2631 
  req->hdr.timeout = 15U;
  
#line 2632 
  req->pattern = pattern;
  
#line 2633 
  req->src_port = port_num;
  
#line 2634 
  req->dest_port = port_num;
  
#line 2635 
  req->pkt_size = pkt_size;
  
#line 2636 
  req->num_pkts = num_pkts;
  
#line 2637 
  req->loopback_type = loopback_type;
  
#line 2639 
  be_mcc_notify(adapter);
  
#line 2641 
  ldv_spin_unlock_bh_162(& adapter->mcc_lock);
  
#line 2643 
  wait_for_completion(& adapter->et_cmd_compl);
  
#line 2644 
  resp = (struct be_cmd_resp_loopback_test *)embedded_payload(wrb);
  
#line 2645 
  status = (int)resp->status;
  
#line 2647 
  __retres = status;
  
#line 2647 
  goto return_label;
  err: 
#line 2648 
  ;
  
#line 2649 
  ldv_spin_unlock_bh_163(& adapter->mcc_lock);
  
#line 2650 
  __retres = status;
  return_label: 
#line 2650 
                return __retres;
}


#line 2653  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_ddr_dma_test(struct be_adapter *adapter, u64 pattern, u32 byte_cnt, struct be_dma_mem *cmd)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_ddrdma_test *req;
  int status;
  int i;
  
#line 2659 
  int j = 0;
  
#line 2661 
  ldv_spin_lock_bh_164(& adapter->mcc_lock);
  
#line 2663 
  wrb = wrb_from_mccq(adapter);
  
#line 2664 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2665 
    status = -16;
    
#line 2666 
    goto err;
  }
  else ;
  
#line 2668 
  req = (struct be_cmd_req_ddrdma_test *)cmd->va;
  
#line 2669 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)11,(unsigned char)17,(int)cmd->size,wrb,cmd);
  
#line 2673 
  req->pattern = pattern;
  
#line 2674 
  req->byte_count = byte_cnt;
  
#line 2675 
  i = 0;
  
#line 2675 
  goto ldv_59240;
  ldv_59239: 
#line 2676 
  ;
  
#line 2676 
  req->snd_buff[i] = (unsigned char)(pattern >> j * 8);
  
#line 2677 
  j += 1;
  
#line 2678 
  if (j > 7) 
#line 2679 
             j = 0; else ;
  
#line 2675 
  i += 1;
  ldv_59240: 
#line 2676 
  ;
  
#line 2675 
  if ((unsigned int)i < byte_cnt) 
#line 2677 
                                  goto ldv_59239; else 
#line 2680 
                                                       goto ldv_59241;
  ldv_59241: 
#line 2681 
  ;
  
#line 2682 
  status = be_mcc_notify_wait(adapter);
  
#line 2684 
  if (status == 0) {
    struct be_cmd_resp_ddrdma_test *resp;
    int tmp;
    
#line 2687 
    resp = (struct be_cmd_resp_ddrdma_test *)cmd->va;
    
#line 2688 
    tmp = memcmp((void const *)(& resp->rcv_buff),(void const *)(& req->snd_buff),(unsigned long)byte_cnt);
    
#line 2688 
    if (tmp != 0) 
#line 2690 
                  status = -1;
    else 
      
#line 2688 
      if (resp->snd_err != 0U) 
#line 2690 
                               status = -1; else ;
  }
  else ;
  err: 
#line 2694 
  ;
  
#line 2695 
  ldv_spin_unlock_bh_165(& adapter->mcc_lock);
  
#line 2696 
  return status;
}


#line 2699  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_seeprom_data(struct be_adapter *adapter, struct be_dma_mem *nonemb_cmd)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_seeprom_read *req;
  int status;
  
#line 2706 
  ldv_spin_lock_bh_166(& adapter->mcc_lock);
  
#line 2708 
  wrb = wrb_from_mccq(adapter);
  
#line 2709 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2710 
    status = -16;
    
#line 2711 
    goto err;
  }
  else ;
  
#line 2713 
  req = (struct be_cmd_req_seeprom_read *)nonemb_cmd->va;
  
#line 2715 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)30,1040,wrb,nonemb_cmd);
  
#line 2719 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 2721 
  ;
  
#line 2722 
  ldv_spin_unlock_bh_167(& adapter->mcc_lock);
  
#line 2723 
  return status;
}


#line 2726  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_phy_info(struct be_adapter *adapter)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_phy_info *req;
  struct be_dma_mem cmd;
  int status;
  int tmp_0;
  bool tmp;
  
#line 2733 
  tmp = be_cmd_allowed(adapter,(unsigned char)102,(unsigned char)1);
  
#line 2733 
  if (tmp) 
#line 2733 
           tmp_0 = 0; else 
#line 2733 
                           tmp_0 = 1;
  
#line 2733 
  if (tmp_0) {
    
#line 2735 
    __retres = -1;
    
#line 2735 
    goto return_label;
  }
  else ;
  
#line 2737 
  ldv_spin_lock_bh_168(& adapter->mcc_lock);
  
#line 2739 
  wrb = wrb_from_mccq(adapter);
  
#line 2740 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2741 
    status = -16;
    
#line 2742 
    goto err;
  }
  else ;
  
#line 2744 
  cmd.size = 40U;
  
#line 2745 
  cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,32U);
  
#line 2747 
  if (cmd.va == (void *)0) {
    
#line 2748 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Memory alloc failure\n");
    
#line 2749 
    status = -12;
    
#line 2750 
    goto err;
  }
  else ;
  
#line 2753 
  req = (struct be_cmd_req_get_phy_info *)cmd.va;
  
#line 2755 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)102,40,wrb,& cmd);
  
#line 2759 
  status = be_mcc_notify_wait(adapter);
  
#line 2760 
  if (status == 0) {
    
#line 2761 
    struct be_phy_info *resp_phy_info = (struct be_phy_info *)(cmd.va + 16U);
    
#line 2764 
    adapter->phy.phy_type = resp_phy_info->phy_type;
    
#line 2765 
    adapter->phy.interface_type = resp_phy_info->interface_type;
    
#line 2767 
    adapter->phy.auto_speeds_supported = resp_phy_info->auto_speeds_supported;
    
#line 2769 
    adapter->phy.fixed_speeds_supported = resp_phy_info->fixed_speeds_supported;
    
#line 2771 
    adapter->phy.misc_params = resp_phy_info->misc_params;
    
#line 2774 
    if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
      
#line 2775 
      adapter->phy.fixed_speeds_supported = (unsigned short)12U; else ;
  }
  else ;
  
#line 2780 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma,(struct dma_attrs *)0);
  err: 
#line 2781 
  ;
  
#line 2782 
  ldv_spin_unlock_bh_169(& adapter->mcc_lock);
  
#line 2783 
  __retres = status;
  return_label: 
#line 2783 
                return __retres;
}


#line 2786  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_set_qos(struct be_adapter *adapter, u32 bps, u32 domain)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_set_qos *req;
  int status;
  
#line 2792 
  ldv_spin_lock_bh_170(& adapter->mcc_lock);
  
#line 2794 
  wrb = wrb_from_mccq(adapter);
  
#line 2795 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2796 
    status = -16;
    
#line 2797 
    goto err;
  }
  else ;
  
#line 2800 
  req = (struct be_cmd_req_set_qos *)embedded_payload(wrb);
  
#line 2802 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)28,52,wrb,(struct be_dma_mem *)0);
  
#line 2805 
  req->hdr.domain = (unsigned char)domain;
  
#line 2806 
  req->valid_bits = 1U;
  
#line 2807 
  req->max_bps_nic = bps;
  
#line 2809 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 2811 
  ;
  
#line 2812 
  ldv_spin_unlock_bh_171(& adapter->mcc_lock);
  
#line 2813 
  return status;
}


#line 2816  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_cntl_attributes(struct be_adapter *adapter)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_cntl_attribs *req;
  struct be_cmd_resp_cntl_attribs *resp;
  int status;
  unsigned long tmp_0;
  struct mgmt_controller_attrib *attribs;
  struct be_dma_mem attribs_cmd;
  int tmp_1;
  {
    unsigned long tmp;
    
#line 2822 
    unsigned long _max1 = 16UL;
    
#line 2822 
    unsigned long _max2 = 556UL;
    
#line 2822 
    if (_max1 > _max2) 
#line 2822 
                       tmp = _max1; else 
#line 2822 
                                         tmp = _max2;
    
#line 2822 
    tmp_0 = tmp;
  }
  
#line 2822 
  int payload_len = (int)tmp_0;
  
#line 2826 
  tmp_1 = ldv_mutex_lock_interruptible_172(& adapter->mbox_lock);
  
#line 2826 
  if (tmp_1 != 0) {
    
#line 2827 
    __retres = -1;
    
#line 2827 
    goto return_label;
  }
  else ;
  
#line 2829 
  memset((void *)(& attribs_cmd),0,24UL);
  
#line 2830 
  attribs_cmd.size = 556U;
  
#line 2831 
  attribs_cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)attribs_cmd.size,& attribs_cmd.dma,32U);
  
#line 2834 
  if (attribs_cmd.va == (void *)0) {
    
#line 2835 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Memory allocation failure\n");
    
#line 2836 
    status = -12;
    
#line 2837 
    goto err;
  }
  else ;
  
#line 2840 
  wrb = wrb_from_mbox(adapter);
  
#line 2841 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2842 
    status = -16;
    
#line 2843 
    goto err;
  }
  else ;
  
#line 2845 
  req = (struct be_cmd_req_cntl_attribs *)attribs_cmd.va;
  
#line 2847 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)32,payload_len,wrb,& attribs_cmd);
  
#line 2851 
  status = be_mbox_notify_wait(adapter);
  
#line 2852 
  if (status == 0) {
    
#line 2853 
    attribs = (struct mgmt_controller_attrib *)(attribs_cmd.va + 16U);
    
#line 2854 
    adapter->hba_port_num = attribs->hba_attribs.phy_port;
  }
  else ;
  err: 
#line 2857 
  ;
  
#line 2858 
  ldv_mutex_unlock_173(& adapter->mbox_lock);
  
#line 2859 
  if (attribs_cmd.va != (void *)0) 
#line 2860 
                                   dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)attribs_cmd.size,attribs_cmd.va,attribs_cmd.dma,(struct dma_attrs *)0); else ;
  
#line 2862 
  __retres = status;
  return_label: 
#line 2862 
                return __retres;
}


#line 2866  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_req_native_mode(struct be_adapter *adapter)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_set_func_cap *req;
  int status;
  int tmp;
  
#line 2872 
  tmp = ldv_mutex_lock_interruptible_174(& adapter->mbox_lock);
  
#line 2872 
  if (tmp != 0) {
    
#line 2873 
    __retres = -1;
    
#line 2873 
    goto return_label;
  }
  else ;
  
#line 2875 
  wrb = wrb_from_mbox(adapter);
  
#line 2876 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2877 
    status = -16;
    
#line 2878 
    goto err;
  }
  else ;
  
#line 2881 
  req = (struct be_cmd_req_set_func_cap *)embedded_payload(wrb);
  
#line 2883 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)103,236,wrb,(struct be_dma_mem *)0);
  
#line 2887 
  req->valid_cap_flags = 6U;
  
#line 2889 
  req->cap_flags = 4U;
  
#line 2891 
  status = be_mbox_notify_wait(adapter);
  
#line 2892 
  if (status == 0) {
    
#line 2893 
    struct be_cmd_resp_set_func_cap *resp = embedded_payload(wrb);
    
#line 2895 
    adapter->be3_native = (_Bool)((resp->cap_flags & 4U) != 0U);
    
#line 2897 
    if (! adapter->be3_native) 
#line 2898 
                               dev_warn((struct device const *)(& (adapter->pdev)->dev),"adapter not in advanced mode\n"); else ;
  }
  else ;
  err: 
#line 2901 
  ;
  
#line 2902 
  ldv_mutex_unlock_175(& adapter->mbox_lock);
  
#line 2903 
  __retres = status;
  return_label: 
#line 2903 
                return __retres;
}


#line 2907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fn_privileges(struct be_adapter *adapter, u32 *privilege, u32 domain)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_fn_privileges *req;
  int status;
  
#line 2914 
  ldv_spin_lock_bh_176(& adapter->mcc_lock);
  
#line 2916 
  wrb = wrb_from_mccq(adapter);
  
#line 2917 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2918 
    status = -16;
    
#line 2919 
    goto err;
  }
  else ;
  
#line 2922 
  req = (struct be_cmd_req_get_fn_privileges *)embedded_payload(wrb);
  
#line 2924 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)170,20,wrb,(struct be_dma_mem *)0);
  
#line 2928 
  req->hdr.domain = (unsigned char)domain;
  
#line 2930 
  status = be_mcc_notify_wait(adapter);
  
#line 2931 
  if (status == 0) {
    
#line 2933 
    struct be_cmd_resp_get_fn_privileges *resp = embedded_payload(wrb);
    
#line 2935 
    *privilege = resp->privilege_mask;
    
#line 2940 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
      bool tmp_1;
      
#line 2940 
      tmp_1 = be_is_mc(adapter);
      
#line 2940 
      if ((int)tmp_1 != 0) {
        
#line 2940 
        if ((unsigned int)adapter->virtfn == 0U) 
#line 2942 
                                                 *privilege = 1792U; else ;
      }
      else ;
    }
    else ;
  }
  else ;
  err: 
#line 2945 
  ;
  
#line 2946 
  ldv_spin_unlock_bh_177(& adapter->mcc_lock);
  
#line 2947 
  return status;
}


#line 2951  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_fn_privileges(struct be_adapter *adapter, u32 privileges, u32 domain)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_set_fn_privileges *req;
  int status;
  
#line 2958 
  ldv_spin_lock_bh_178(& adapter->mcc_lock);
  
#line 2960 
  wrb = wrb_from_mccq(adapter);
  
#line 2961 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 2962 
    status = -16;
    
#line 2963 
    goto err;
  }
  else ;
  
#line 2966 
  req = (struct be_cmd_req_set_fn_privileges *)embedded_payload(wrb);
  
#line 2967 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)100,24,wrb,(struct be_dma_mem *)0);
  
#line 2970 
  req->hdr.domain = (unsigned char)domain;
  
#line 2971 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    
#line 2972 
    req->privileges_lancer = privileges; else 
#line 2974 
                                              req->privileges = privileges;
  
#line 2976 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 2977 
  ;
  
#line 2978 
  ldv_spin_unlock_bh_179(& adapter->mcc_lock);
  
#line 2979 
  return status;
}


#line 2986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_mac_from_list(struct be_adapter *adapter, u8 *mac, bool *pmac_id_valid, u32 *pmac_id, u32 if_handle, u8 domain)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_mac_list *req;
  int status;
  int mac_count;
  struct be_dma_mem get_mac_list_cmd;
  int i;
  
#line 2997 
  memset((void *)(& get_mac_list_cmd),0,24UL);
  
#line 2998 
  get_mac_list_cmd.size = 548U;
  
#line 2999 
  get_mac_list_cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)get_mac_list_cmd.size,& get_mac_list_cmd.dma,32U);
  
#line 3004 
  if (get_mac_list_cmd.va == (void *)0) {
    
#line 3005 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Memory allocation failure during GET_MAC_LIST\n");
    
#line 3007 
    __retres = -12;
    
#line 3007 
    goto return_label;
  }
  else ;
  
#line 3010 
  ldv_spin_lock_bh_180(& adapter->mcc_lock);
  
#line 3012 
  wrb = wrb_from_mccq(adapter);
  
#line 3013 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 3014 
    status = -16;
    
#line 3015 
    goto out;
  }
  else ;
  
#line 3018 
  req = (struct be_cmd_req_get_mac_list *)get_mac_list_cmd.va;
  
#line 3020 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)147,(int)get_mac_list_cmd.size,wrb,& get_mac_list_cmd);
  
#line 3023 
  req->hdr.domain = domain;
  
#line 3024 
  req->mac_type = (unsigned char)1U;
  
#line 3025 
  if ((int)*pmac_id_valid != 0) {
    
#line 3026 
    req->mac_id = *pmac_id;
    
#line 3027 
    req->iface_id = (unsigned short)if_handle;
    
#line 3028 
    req->perm_override = (unsigned char)0U;
  }
  else 
#line 3030 
       req->perm_override = (unsigned char)1U;
  
#line 3033 
  status = be_mcc_notify_wait(adapter);
  
#line 3034 
  if (status == 0) {
    
#line 3035 
    struct be_cmd_resp_get_mac_list *resp = (struct be_cmd_resp_get_mac_list *)get_mac_list_cmd.va;
    
#line 3038 
    if ((int)*pmac_id_valid != 0) {
      
#line 3039 
      memcpy((void *)mac,(void const *)(& resp->macid_macaddr.mac_addr_id.macaddr),6UL);
      
#line 3041 
      goto out;
    }
    else ;
    
#line 3044 
    mac_count = (int)resp->true_mac_count + (int)resp->pseudo_mac_count;
    
#line 3050 
    i = 0;
    
#line 3050 
    goto ldv_59330;
    ldv_59329: 
#line 3051 
    ;
    {
      struct get_list_macaddr *mac_entry;
      u16 mac_addr_size;
      u32 mac_id;
      
#line 3055 
      mac_entry = & resp->macaddr_list[i];
      
#line 3056 
      mac_addr_size = mac_entry->mac_addr_size;
      
#line 3060 
      if ((unsigned int)mac_addr_size == 4U) {
        
#line 3061 
        *pmac_id_valid = (_Bool)1;
        
#line 3062 
        mac_id = mac_entry->mac_addr_id.s_mac_id.mac_id;
        
#line 3063 
        *pmac_id = mac_id;
        
#line 3064 
        goto out;
      }
      else ;
    }
    
#line 3050 
    i += 1;
    ldv_59330: 
#line 3051 
    ;
    
#line 3050 
    if (i < mac_count) 
#line 3052 
                       goto ldv_59329; else 
#line 3055 
                                            goto ldv_59331;
    ldv_59331: 
#line 3056 
    ;
    
#line 3068 
    *pmac_id_valid = (_Bool)0;
    
#line 3069 
    memcpy((void *)mac,(void const *)(& resp->macaddr_list[0].mac_addr_id.macaddr),6UL);
  }
  else ;
  out: 
#line 3073 
  ;
  
#line 3074 
  ldv_spin_unlock_bh_181(& adapter->mcc_lock);
  
#line 3075 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)get_mac_list_cmd.size,get_mac_list_cmd.va,get_mac_list_cmd.dma,(struct dma_attrs *)0);
  
#line 3077 
  __retres = status;
  return_label: 
#line 3077 
                return __retres;
}


#line 3080  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_active_mac(struct be_adapter *adapter, u32 curr_pmac_id, u8 *mac, u32 if_handle, bool active, u32 domain)
{
  int __retres;
  
#line 3083 
  if (! active) 
#line 3084 
                be_cmd_get_mac_from_list(adapter,mac,& active,& curr_pmac_id,if_handle,(unsigned char)((int)((unsigned char)domain))); else ;
  
#line 3086 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    int tmp;
    
#line 3087 
    tmp = be_cmd_mac_addr_query(adapter,mac,(_Bool)0,if_handle,curr_pmac_id);
    
#line 3087 
    __retres = tmp;
    
#line 3087 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 3091 
    tmp_0 = be_cmd_get_mac_from_list(adapter,mac,& active,& curr_pmac_id,if_handle,(unsigned char)((int)((unsigned char)domain)));
    
#line 3091 
    __retres = tmp_0;
    
#line 3091 
    goto return_label;
  }
  return_label: 
#line 3086 
                return __retres;
}


#line 3096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_perm_mac(struct be_adapter *adapter, u8 *mac)
{
  int status;
  
#line 3099 
  bool pmac_valid = (_Bool)0;
  
#line 3101 
  eth_zero_addr(mac);
  
#line 3103 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
    
#line 3104 
    if ((unsigned int)adapter->virtfn == 0U) 
#line 3105 
                                             status = be_cmd_mac_addr_query(adapter,mac,(_Bool)1,0U,0U); else 
                                                                    
#line 3108 
                                                                    status = be_cmd_mac_addr_query(adapter,mac,(_Bool)0,(unsigned int)adapter->if_handle,0U);
  else 
#line 3111 
       status = be_cmd_get_mac_from_list(adapter,mac,& pmac_valid,(u32 *)0U,(unsigned int)adapter->if_handle,(unsigned char)0);
  
#line 3115 
  return status;
}


#line 3119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_mac_list(struct be_adapter *adapter, u8 *mac_array, u8 mac_count, u32 domain)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_set_mac_list *req;
  int status;
  struct be_dma_mem cmd;
  
#line 3127 
  memset((void *)(& cmd),0,24UL);
  
#line 3128 
  cmd.size = 404U;
  
#line 3129 
  cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,208U);
  
#line 3131 
  if (cmd.va == (void *)0) {
    
#line 3132 
    __retres = -12;
    
#line 3132 
    goto return_label;
  }
  else ;
  
#line 3134 
  ldv_spin_lock_bh_182(& adapter->mcc_lock);
  
#line 3136 
  wrb = wrb_from_mccq(adapter);
  
#line 3137 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 3138 
    status = -16;
    
#line 3139 
    goto err;
  }
  else ;
  
#line 3142 
  req = (struct be_cmd_req_set_mac_list *)cmd.va;
  
#line 3143 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)148,404,wrb,& cmd);
  
#line 3147 
  req->hdr.domain = (unsigned char)domain;
  
#line 3148 
  req->mac_count = mac_count;
  
#line 3149 
  if ((unsigned int)mac_count != 0U) 
#line 3150 
                                     memcpy((void *)(& req->mac),(void const *)mac_array,(unsigned long)((int)mac_count * 6)); else ;
  
#line 3152 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 3154 
  ;
  
#line 3155 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma,(struct dma_attrs *)0);
  
#line 3156 
  ldv_spin_unlock_bh_183(& adapter->mcc_lock);
  
#line 3157 
  __retres = status;
  return_label: 
#line 3157 
                return __retres;
}


#line 3164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_mac(struct be_adapter *adapter, u8 *mac, int if_id, u32 dom)
{
  u8 old_mac[6U];
  u32 pmac_id;
  int status;
  int tmp;
  
#line 3166 
  bool active_mac = (_Bool)0;
  
#line 3171 
  status = be_cmd_get_mac_from_list(adapter,(u8 *)(& old_mac),& active_mac,& pmac_id,(unsigned int)if_id,(unsigned char)((int)((unsigned char)dom)));
  
#line 3174 
  if (status == 0 && (int)active_mac != 0) 
#line 3175 
                                           be_cmd_pmac_del(adapter,(unsigned int)if_id,(int)pmac_id,dom); else ;
  
#line 3177 
  tmp = be_cmd_set_mac_list(adapter,mac,(unsigned char)(mac != (u8 *)0U),dom);
  
#line 3177 
  return tmp;
}


#line 3180  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_hsw_config(struct be_adapter *adapter, u16 pvid, u32 domain, u16 intf_id, u16 hsw_mode, u8 spoofchk)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_set_hsw_config *req;
  void *ctxt;
  int status;
  u32 tmp_0;
  
#line 3188 
  ldv_spin_lock_bh_184(& adapter->mcc_lock);
  
#line 3190 
  wrb = wrb_from_mccq(adapter);
  
#line 3191 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 3192 
    status = -16;
    
#line 3193 
    goto err;
  }
  else ;
  
#line 3196 
  req = (struct be_cmd_req_set_hsw_config *)embedded_payload(wrb);
  
#line 3197 
  ctxt = (void *)(& req->context);
  
#line 3199 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)153,36,wrb,(struct be_dma_mem *)0);
  
#line 3203 
  req->hdr.domain = (unsigned char)domain;
  
#line 3204 
  ;
  
#line 3204 
  tmp_0 = amap_mask(16U);
  
#line 3204 
  ;
  
#line 3204 
  amap_set(ctxt,0U,tmp_0,0U,(unsigned int)intf_id);
  
#line 3205 
  if ((unsigned int)pvid != 0U) {
    u32 tmp_1;
    u32 tmp_2;
    
#line 3206 
    tmp_1 = amap_mask(1U);
    
#line 3206 
    ;
    
#line 3206 
    amap_set(ctxt,0U,tmp_1,30U,1U);
    
#line 3207 
    ;
    
#line 3207 
    tmp_2 = amap_mask(16U);
    
#line 3207 
    ;
    
#line 3207 
    amap_set(ctxt,1U,tmp_2,16U,(unsigned int)pvid);
  }
  else ;
  
#line 3209 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) && (unsigned int)hsw_mode != 0U) {
    u32 tmp_3;
    u32 tmp_4;
    u32 tmp_5;
    
#line 3210 
    ;
    
#line 3210 
    tmp_3 = amap_mask(16U);
    
#line 3210 
    ;
    
#line 3210 
    amap_set(ctxt,0U,tmp_3,0U,(unsigned int)adapter->hba_port_num);
    
#line 3212 
    tmp_4 = amap_mask(1U);
    
#line 3212 
    ;
    
#line 3212 
    amap_set(ctxt,0U,tmp_4,31U,1U);
    
#line 3213 
    ;
    
#line 3213 
    tmp_5 = amap_mask(3U);
    
#line 3213 
    ;
    
#line 3213 
    amap_set(ctxt,1U,tmp_5,6U,(unsigned int)hsw_mode);
  }
  else ;
  
#line 3218 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) && (unsigned int)spoofchk != 0U) {
    u32 tmp_6;
    u32 tmp_7;
    
#line 3219 
    ;
    
#line 3219 
    tmp_6 = amap_mask(2U);
    
#line 3219 
    ;
    
#line 3219 
    amap_set(ctxt,0U,tmp_6,24U,(unsigned int)spoofchk);
    
#line 3221 
    ;
    
#line 3221 
    tmp_7 = amap_mask(2U);
    
#line 3221 
    ;
    
#line 3221 
    amap_set(ctxt,1U,tmp_7,14U,(unsigned int)spoofchk);
  }
  else ;
  
#line 3225 
  swap_dws((void *)(& req->context),20);
  
#line 3226 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 3228 
  ;
  
#line 3229 
  ldv_spin_unlock_bh_185(& adapter->mcc_lock);
  
#line 3230 
  return status;
}


#line 3234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_hsw_config(struct be_adapter *adapter, u16 *pvid, u32 domain, u16 intf_id, u8 *mode, bool *spoofchk)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_hsw_config *req;
  void *ctxt;
  int status;
  u16 vid;
  u32 tmp_0;
  u32 tmp_1;
  
#line 3243 
  ldv_spin_lock_bh_186(& adapter->mcc_lock);
  
#line 3245 
  wrb = wrb_from_mccq(adapter);
  
#line 3246 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 3247 
    status = -16;
    
#line 3248 
    goto err;
  }
  else ;
  
#line 3251 
  req = (struct be_cmd_req_get_hsw_config *)embedded_payload(wrb);
  
#line 3252 
  ctxt = (void *)(& req->context);
  
#line 3254 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)152,20,wrb,(struct be_dma_mem *)0);
  
#line 3258 
  req->hdr.domain = (unsigned char)domain;
  
#line 3259 
  ;
  
#line 3259 
  tmp_0 = amap_mask(16U);
  
#line 3259 
  ;
  
#line 3259 
  amap_set(ctxt,0U,tmp_0,0U,(unsigned int)intf_id);
  
#line 3261 
  tmp_1 = amap_mask(1U);
  
#line 3261 
  ;
  
#line 3261 
  amap_set(ctxt,0U,tmp_1,30U,1U);
  
#line 3263 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) && mode != (u8 *)0U) {
    u32 tmp_2;
    u32 tmp_3;
    
#line 3264 
    ;
    
#line 3264 
    tmp_2 = amap_mask(16U);
    
#line 3264 
    ;
    
#line 3264 
    amap_set(ctxt,0U,tmp_2,0U,(unsigned int)adapter->hba_port_num);
    
#line 3266 
    tmp_3 = amap_mask(1U);
    
#line 3266 
    ;
    
#line 3266 
    amap_set(ctxt,0U,tmp_3,31U,1U);
  }
  else ;
  
#line 3268 
  swap_dws((void *)(& req->context),4);
  
#line 3270 
  status = be_mcc_notify_wait(adapter);
  
#line 3271 
  if (status == 0) {
    u32 tmp_6;
    u32 tmp_5;
    
#line 3273 
    struct be_cmd_resp_get_hsw_config *resp = embedded_payload(wrb);
    
#line 3275 
    swap_dws((void *)(& resp->context),16);
    
#line 3276 
    tmp_5 = amap_mask(16U);
    
#line 3276 
    ;
    
#line 3276 
    tmp_6 = amap_get((void *)(& resp->context),0U,tmp_5,16U);
    
#line 3276 
    vid = (unsigned short)tmp_6;
    
#line 3278 
    if (pvid != (u16 *)0U) 
#line 3279 
                           *pvid = vid; else ;
    
#line 3280 
    if (mode != (u8 *)0U) {
      u32 tmp_8;
      u32 tmp_7;
      
#line 3281 
      tmp_7 = amap_mask(3U);
      
#line 3281 
      ;
      
#line 3281 
      tmp_8 = amap_get((void *)(& resp->context),0U,tmp_7,6U);
      
#line 3281 
      *mode = (unsigned char)tmp_8;
    }
    else ;
    
#line 3283 
    if (spoofchk != (bool *)0) {
      u32 tmp_10;
      u32 tmp_9;
      
#line 3285 
      tmp_9 = amap_mask(1U);
      
#line 3284 
      ;
      
#line 3284 
      tmp_10 = amap_get((void *)(& resp->context),0U,tmp_9,14U);
      
#line 3284 
      *spoofchk = (_Bool)(tmp_10 != 0U);
    }
    else ;
  }
  else ;
  err: 
#line 3289 
  ;
  
#line 3290 
  ldv_spin_unlock_bh_187(& adapter->mcc_lock);
  
#line 3291 
  return status;
}


#line 3294  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static bool be_is_wol_excluded(struct be_adapter *adapter)
{
  bool __retres;
  
#line 3296 
  struct pci_dev *pdev = adapter->pdev;
  
#line 3298 
  if ((unsigned int)adapter->virtfn != 0U) {
    
#line 3299 
    __retres = (_Bool)1;
    
#line 3299 
    goto return_label;
  }
  else ;
  
#line 3301 
  switch ((int)pdev->subsystem_device) {
    case 58882: 
#line 3302 
    ;
    case 58946: 
#line 3303 
    ;
    case 58898: 
#line 3304 
    ;
    case 58962: 
#line 3305 
    ;
    
#line 3306 
    __retres = (_Bool)1;
    
#line 3306 
    goto return_label;
    default: 
#line 3307 
    ;
    
#line 3308 
    __retres = (_Bool)0;
    
#line 3308 
    goto return_label;
  }
  return_label: 
#line 3301 
                return __retres;
}


#line 3312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_acpi_wol_cap(struct be_adapter *adapter)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_acpi_wol_magic_config_v1 *req;
  struct be_dma_mem cmd;
  int tmp_0;
  bool tmp;
  bool tmp_1;
  int tmp_2;
  
#line 3316 
  int status = 0;
  
#line 3319 
  tmp = be_cmd_allowed(adapter,(unsigned char)12,(unsigned char)3);
  
#line 3319 
  if (tmp) 
#line 3319 
           tmp_0 = 0; else 
#line 3319 
                           tmp_0 = 1;
  
#line 3319 
  if (tmp_0) {
    
#line 3321 
    __retres = -1;
    
#line 3321 
    goto return_label;
  }
  else ;
  
#line 3323 
  tmp_1 = be_is_wol_excluded(adapter);
  
#line 3323 
  if ((int)tmp_1 != 0) {
    
#line 3324 
    __retres = status;
    
#line 3324 
    goto return_label;
  }
  else ;
  
#line 3326 
  tmp_2 = ldv_mutex_lock_interruptible_188(& adapter->mbox_lock);
  
#line 3326 
  if (tmp_2 != 0) {
    
#line 3327 
    __retres = -1;
    
#line 3327 
    goto return_label;
  }
  else ;
  
#line 3329 
  memset((void *)(& cmd),0,24UL);
  
#line 3330 
  cmd.size = 1204U;
  
#line 3331 
  cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,32U);
  
#line 3333 
  if (cmd.va == (void *)0) {
    
#line 3334 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Memory allocation failure\n");
    
#line 3335 
    status = -12;
    
#line 3336 
    goto err;
  }
  else ;
  
#line 3339 
  wrb = wrb_from_mbox(adapter);
  
#line 3340 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 3341 
    status = -16;
    
#line 3342 
    goto err;
  }
  else ;
  
#line 3345 
  req = (struct be_cmd_req_acpi_wol_magic_config_v1 *)cmd.va;
  
#line 3347 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)3,(unsigned char)12,1204,wrb,& cmd);
  
#line 3351 
  req->hdr.version = (unsigned char)1U;
  
#line 3352 
  req->query_options = (unsigned char)2U;
  
#line 3354 
  status = be_mbox_notify_wait(adapter);
  
#line 3355 
  if (status == 0) {
    struct be_cmd_resp_acpi_wol_magic_config_v1 *resp;
    
#line 3358 
    resp = (struct be_cmd_resp_acpi_wol_magic_config_v1 *)cmd.va;
    
#line 3360 
    adapter->wol_cap = resp->wol_settings;
    
#line 3361 
    if (((int)adapter->wol_cap & 1) != 0) 
#line 3362 
                                          adapter->wol_en = (_Bool)1; else ;
  }
  else ;
  err: 
#line 3364 
  ;
  
#line 3365 
  ldv_mutex_unlock_189(& adapter->mbox_lock);
  
#line 3366 
  if (cmd.va != (void *)0) 
#line 3367 
                           dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma,(struct dma_attrs *)0); else ;
  
#line 3369 
  __retres = status;
  return_label: 
#line 3369 
                return __retres;
}


#line 3373  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_fw_log_level(struct be_adapter *adapter, u32 level)
{
  int __retres;
  struct be_dma_mem extfat_cmd;
  struct be_fat_conf_params *cfgs;
  int status;
  int i;
  int j;
  
#line 3380 
  memset((void *)(& extfat_cmd),0,24UL);
  
#line 3381 
  extfat_cmd.size = 2844U;
  
#line 3382 
  extfat_cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)extfat_cmd.size,& extfat_cmd.dma,32U);
  
#line 3385 
  if (extfat_cmd.va == (void *)0) {
    
#line 3386 
    __retres = -12;
    
#line 3386 
    goto return_label;
  }
  else ;
  
#line 3388 
  status = be_cmd_get_ext_fat_capabilites(adapter,& extfat_cmd);
  
#line 3389 
  if (status != 0) 
#line 3390 
                   goto err; else ;
  
#line 3392 
  cfgs = (struct be_fat_conf_params *)(extfat_cmd.va + 16U);
  
#line 3394 
  i = 0;
  
#line 3394 
  goto ldv_59428;
  ldv_59427: 
#line 3395 
  ;
  {
    
#line 3395 
    u32 num_modes = cfgs->module[i].num_modes;
    
#line 3397 
    j = 0;
    
#line 3397 
    goto ldv_59425;
    ldv_59424: 
#line 3398 
    ;
    
#line 3398 
    if ((unsigned int)cfgs->module[i].trace_lvl[j].mode == 0U) 
#line 3399 
                                                               cfgs->module[i].trace_lvl[j].dbg_lvl = level; else ;
    
#line 3397 
    j += 1;
    ldv_59425: 
#line 3398 
    ;
    
#line 3397 
    if ((unsigned int)j < num_modes) 
#line 3399 
                                     goto ldv_59424; else 
#line 3402 
                                                          goto ldv_59426;
    ldv_59426: 
#line 3403 
    ;
  }
  
#line 3394 
  i += 1;
  ldv_59428: 
#line 3395 
  ;
  
#line 3394 
  if (cfgs->num_modules > (unsigned int)i) 
#line 3396 
                                           goto ldv_59427; else 
#line 3399 
                                                                goto ldv_59429;
  ldv_59429: 
#line 3400 
  ;
  
#line 3404 
  status = be_cmd_set_ext_fat_capabilites(adapter,& extfat_cmd,cfgs);
  err: 
#line 3405 
  ;
  
#line 3406 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)extfat_cmd.size,extfat_cmd.va,extfat_cmd.dma,(struct dma_attrs *)0);
  
#line 3408 
  __retres = status;
  return_label: 
#line 3408 
                return __retres;
}


#line 3411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_fw_log_level(struct be_adapter *adapter)
{
  struct be_dma_mem extfat_cmd;
  struct be_fat_conf_params *cfgs;
  int status;
  int j;
  
#line 3416 
  int level = 0;
  
#line 3418 
  memset((void *)(& extfat_cmd),0,24UL);
  
#line 3419 
  extfat_cmd.size = 2844U;
  
#line 3420 
  extfat_cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)extfat_cmd.size,& extfat_cmd.dma,32U);
  
#line 3424 
  if (extfat_cmd.va == (void *)0) {
    
#line 3425 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Memory allocation failure\n","be_cmd_get_fw_log_level");
    
#line 3427 
    goto err;
  }
  else ;
  
#line 3430 
  status = be_cmd_get_ext_fat_capabilites(adapter,& extfat_cmd);
  
#line 3431 
  if (status == 0) {
    
#line 3432 
    cfgs = (struct be_fat_conf_params *)(extfat_cmd.va + 16U);
    
#line 3435 
    j = 0;
    
#line 3435 
    goto ldv_59441;
    ldv_59440: 
#line 3436 
    ;
    
#line 3436 
    if ((unsigned int)cfgs->module[0].trace_lvl[j].mode == 0U) 
#line 3437 
                                                               level = (int)cfgs->module[0].trace_lvl[j].dbg_lvl; else ;
    
#line 3435 
    j += 1;
    ldv_59441: 
#line 3436 
    ;
    
#line 3435 
    if (cfgs->module[0].num_modes > (unsigned int)j) 
#line 3437 
                                                     goto ldv_59440; else 
                                                                    
#line 3440 
                                                                    goto ldv_59442;
    ldv_59442: 
#line 3441 
    ;
  }
  else ;
  
#line 3440 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)extfat_cmd.size,extfat_cmd.va,extfat_cmd.dma,(struct dma_attrs *)0);
  err: 
#line 3442 
  ;
  
#line 3443 
  return level;
}


#line 3446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_ext_fat_capabilites(struct be_adapter *adapter, struct be_dma_mem *cmd)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_ext_fat_caps *req;
  int status;
  int tmp;
  
#line 3453 
  tmp = ldv_mutex_lock_interruptible_190(& adapter->mbox_lock);
  
#line 3453 
  if (tmp != 0) {
    
#line 3454 
    __retres = -1;
    
#line 3454 
    goto return_label;
  }
  else ;
  
#line 3456 
  wrb = wrb_from_mbox(adapter);
  
#line 3457 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 3458 
    status = -16;
    
#line 3459 
    goto err;
  }
  else ;
  
#line 3462 
  req = (struct be_cmd_req_get_ext_fat_caps *)cmd->va;
  
#line 3463 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)125,(int)cmd->size,wrb,cmd);
  
#line 3466 
  req->parameter_type = 1U;
  
#line 3468 
  status = be_mbox_notify_wait(adapter);
  err: 
#line 3469 
  ;
  
#line 3470 
  ldv_mutex_unlock_191(& adapter->mbox_lock);
  
#line 3471 
  __retres = status;
  return_label: 
#line 3471 
                return __retres;
}


#line 3474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_ext_fat_capabilites(struct be_adapter *adapter, struct be_dma_mem *cmd, struct be_fat_conf_params *configs)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_set_ext_fat_caps *req;
  int status;
  
#line 3482 
  ldv_spin_lock_bh_192(& adapter->mcc_lock);
  
#line 3484 
  wrb = wrb_from_mccq(adapter);
  
#line 3485 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 3486 
    status = -16;
    
#line 3487 
    goto err;
  }
  else ;
  
#line 3490 
  req = (struct be_cmd_req_set_ext_fat_caps *)cmd->va;
  
#line 3491 
  memcpy((void *)(& req->set_params),(void const *)configs,2828UL);
  
#line 3492 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)126,(int)cmd->size,wrb,cmd);
  
#line 3496 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 3497 
  ;
  
#line 3498 
  ldv_spin_unlock_bh_193(& adapter->mcc_lock);
  
#line 3499 
  return status;
}


#line 3502  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_query_port_name(struct be_adapter *adapter)
{
  int __retres;
  struct be_cmd_req_get_port_name *req;
  struct be_mcc_wrb *wrb;
  int status;
  int tmp;
  
#line 3508 
  tmp = ldv_mutex_lock_interruptible_194(& adapter->mbox_lock);
  
#line 3508 
  if (tmp != 0) {
    
#line 3509 
    __retres = -1;
    
#line 3509 
    goto return_label;
  }
  else ;
  
#line 3511 
  wrb = wrb_from_mbox(adapter);
  
#line 3512 
  req = (struct be_cmd_req_get_port_name *)embedded_payload(wrb);
  
#line 3514 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)77,20,wrb,(struct be_dma_mem *)0);
  
#line 3517 
  if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) 
    
#line 3518 
    req->hdr.version = (unsigned char)1U; else ;
  
#line 3520 
  status = be_mbox_notify_wait(adapter);
  
#line 3521 
  if (status == 0) {
    
#line 3522 
    struct be_cmd_resp_get_port_name *resp = embedded_payload(wrb);
    
#line 3524 
    adapter->port_name = (char)resp->port_name[(int)adapter->hba_port_num];
  }
  else 
#line 3526 
       adapter->port_name = (char)((unsigned int)adapter->hba_port_num + 48U);
  
#line 3529 
  ldv_mutex_unlock_195(& adapter->mbox_lock);
  
#line 3530 
  __retres = status;
  return_label: 
#line 3530 
                return __retres;
}


#line 3539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_nic_res_desc *be_get_nic_desc(u8 *buf, u32 desc_count, int desc_type)
{
  struct be_nic_res_desc *__retres;
  struct be_nic_res_desc *nic;
  int i;
  
#line 3542 
  struct be_res_desc_hdr *hdr = (struct be_res_desc_hdr *)buf;
  
#line 3546 
  i = 0;
  
#line 3546 
  goto ldv_59479;
  ldv_59478: 
#line 3547 
  ;
  
#line 3547 
  if ((unsigned int)hdr->desc_type == 65U || (unsigned int)hdr->desc_type == 81U) {
    
#line 3549 
    nic = (struct be_nic_res_desc *)hdr;
    
#line 3550 
    if (desc_type == 1 || (desc_type == 2 && ((int)nic->flags & 8) != 0)) {
      
#line 3553 
      __retres = nic;
      
#line 3553 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 3556 
  if ((int)hdr->desc_len != 0) 
#line 3556 
                               hdr->desc_len = (unsigned char)((int)hdr->desc_len); else 
                                                                    
#line 3556 
                                                                    hdr->desc_len = (unsigned char)72U;
  
#line 3557 
  hdr += (int)hdr->desc_len;
  
#line 3546 
  i += 1;
  ldv_59479: 
#line 3547 
  ;
  
#line 3546 
  if ((unsigned int)i < desc_count) 
#line 3548 
                                    goto ldv_59478; else 
#line 3551 
                                                         goto ldv_59480;
  ldv_59480: 
#line 3552 
  ;
  
#line 3559 
  __retres = (struct be_nic_res_desc *)0;
  return_label: 
#line 3559 
                return __retres;
}


#line 3562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_nic_res_desc *be_get_vft_desc(u8 *buf, u32 desc_count)
{
  struct be_nic_res_desc *tmp;
  
#line 3564 
  tmp = be_get_nic_desc(buf,desc_count,2);
  
#line 3564 
  return tmp;
}


#line 3567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_nic_res_desc *be_get_func_nic_desc(u8 *buf, u32 desc_count)
{
  struct be_nic_res_desc *tmp;
  
#line 3569 
  tmp = be_get_nic_desc(buf,desc_count,1);
  
#line 3569 
  return tmp;
}


#line 3572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_pcie_res_desc *be_get_pcie_desc(u8 devfn, u8 *buf, u32 desc_count)
{
  struct be_pcie_res_desc *__retres;
  struct be_pcie_res_desc *pcie;
  int i;
  
#line 3575 
  struct be_res_desc_hdr *hdr = (struct be_res_desc_hdr *)buf;
  
#line 3579 
  i = 0;
  
#line 3579 
  goto ldv_59498;
  ldv_59497: 
#line 3580 
  ;
  
#line 3580 
  if ((unsigned int)hdr->desc_type == 64U || (unsigned int)hdr->desc_type == 80U) {
    
#line 3582 
    pcie = (struct be_pcie_res_desc *)hdr;
    
#line 3583 
    if ((int)pcie->pf_num == (int)devfn) {
      
#line 3584 
      __retres = pcie;
      
#line 3584 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 3587 
  if ((int)hdr->desc_len != 0) 
#line 3587 
                               hdr->desc_len = (unsigned char)((int)hdr->desc_len); else 
                                                                    
#line 3587 
                                                                    hdr->desc_len = (unsigned char)72U;
  
#line 3588 
  hdr += (int)hdr->desc_len;
  
#line 3579 
  i += 1;
  ldv_59498: 
#line 3580 
  ;
  
#line 3579 
  if ((unsigned int)i < desc_count) 
#line 3581 
                                    goto ldv_59497; else 
#line 3584 
                                                         goto ldv_59499;
  ldv_59499: 
#line 3585 
  ;
  
#line 3590 
  __retres = (struct be_pcie_res_desc *)0;
  return_label: 
#line 3590 
                return __retres;
}


#line 3593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static struct be_port_res_desc *be_get_port_desc(u8 *buf, u32 desc_count)
{
  struct be_port_res_desc *__retres;
  int i;
  
#line 3595 
  struct be_res_desc_hdr *hdr = (struct be_res_desc_hdr *)buf;
  
#line 3598 
  i = 0;
  
#line 3598 
  goto ldv_59507;
  ldv_59506: 
#line 3599 
  ;
  
#line 3599 
  if ((unsigned int)hdr->desc_type == 85U) {
    
#line 3600 
    __retres = (struct be_port_res_desc *)hdr;
    
#line 3600 
    goto return_label;
  }
  else ;
  
#line 3602 
  if ((int)hdr->desc_len != 0) 
#line 3602 
                               hdr->desc_len = (unsigned char)((int)hdr->desc_len); else 
                                                                    
#line 3602 
                                                                    hdr->desc_len = (unsigned char)72U;
  
#line 3603 
  hdr += (int)hdr->desc_len;
  
#line 3598 
  i += 1;
  ldv_59507: 
#line 3599 
  ;
  
#line 3598 
  if ((unsigned int)i < desc_count) 
#line 3600 
                                    goto ldv_59506; else 
#line 3603 
                                                         goto ldv_59508;
  ldv_59508: 
#line 3604 
  ;
  
#line 3605 
  __retres = (struct be_port_res_desc *)0;
  return_label: 
#line 3605 
                return __retres;
}


#line 3608  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_copy_nic_desc(struct be_resources *res, struct be_nic_res_desc *desc)
{
  
#line 3611 
  res->max_uc_mac = desc->unicast_mac_count;
  
#line 3612 
  res->max_vlans = desc->vlan_count;
  
#line 3613 
  res->max_mcast_mac = desc->mcast_mac_count;
  
#line 3614 
  res->max_tx_qs = desc->txq_count;
  
#line 3615 
  res->max_rss_qs = desc->rssq_count;
  
#line 3616 
  res->max_rx_qs = desc->rq_count;
  
#line 3617 
  res->max_evt_qs = desc->eq_count;
  
#line 3618 
  res->max_cq_count = desc->cq_count;
  
#line 3619 
  res->max_iface_count = desc->iface_count;
  
#line 3620 
  res->max_mcc_count = desc->mcc_count;
  
#line 3622 
  res->if_cap_flags = desc->cap_flags & 16784316U;
  
#line 3623 
  return;
}


#line 3627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_func_config(struct be_adapter *adapter, struct be_resources *res)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_func_config *req;
  int status;
  struct be_dma_mem cmd;
  int tmp;
  
#line 3634 
  tmp = ldv_mutex_lock_interruptible_196(& adapter->mbox_lock);
  
#line 3634 
  if (tmp != 0) {
    
#line 3635 
    __retres = -1;
    
#line 3635 
    goto return_label;
  }
  else ;
  
#line 3637 
  memset((void *)(& cmd),0,24UL);
  
#line 3638 
  cmd.size = 23252U;
  
#line 3639 
  cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,32U);
  
#line 3641 
  if (cmd.va == (void *)0) {
    
#line 3642 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Memory alloc failure\n");
    
#line 3643 
    status = -12;
    
#line 3644 
    goto err;
  }
  else ;
  
#line 3647 
  wrb = wrb_from_mbox(adapter);
  
#line 3648 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 3649 
    status = -16;
    
#line 3650 
    goto err;
  }
  else ;
  
#line 3653 
  req = (struct be_cmd_req_get_func_config *)cmd.va;
  
#line 3655 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)160,(int)cmd.size,wrb,& cmd);
  
#line 3659 
  if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) 
    
#line 3660 
    req->hdr.version = (unsigned char)1U; else ;
  
#line 3662 
  status = be_mbox_notify_wait(adapter);
  
#line 3663 
  if (status == 0) {
    struct be_nic_res_desc *desc;
    
#line 3664 
    struct be_cmd_resp_get_func_config *resp = (struct be_cmd_resp_get_func_config *)cmd.va;
    
#line 3665 
    u32 desc_count = resp->desc_count;
    
#line 3668 
    desc = be_get_func_nic_desc((u8 *)(& resp->func_param),desc_count);
    
#line 3669 
    if (desc == (struct be_nic_res_desc *)0) {
      
#line 3670 
      status = -22;
      
#line 3671 
      goto err;
    }
    else ;
    
#line 3674 
    adapter->pf_number = desc->pf_num;
    
#line 3675 
    be_copy_nic_desc(res,desc);
  }
  else ;
  err: 
#line 3677 
  ;
  
#line 3678 
  ldv_mutex_unlock_197(& adapter->mbox_lock);
  
#line 3679 
  if (cmd.va != (void *)0) 
#line 3680 
                           dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma,(struct dma_attrs *)0); else ;
  
#line 3682 
  __retres = status;
  return_label: 
#line 3682 
                return __retres;
}


#line 3686  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_profile_config(struct be_adapter *adapter, struct be_resources *res, u8 query, u8 domain)
{
  int __retres;
  struct be_cmd_resp_get_profile_config *resp;
  struct be_cmd_req_get_profile_config *req;
  struct be_nic_res_desc *vf_res;
  struct be_pcie_res_desc *pcie;
  struct be_port_res_desc *port;
  struct be_nic_res_desc *nic;
  struct be_dma_mem cmd;
  u16 desc_count;
  int status;
  
#line 3695 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  
#line 3700 
  memset((void *)(& cmd),0,24UL);
  
#line 3701 
  cmd.size = 23252U;
  
#line 3702 
  cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,32U);
  
#line 3704 
  if (cmd.va == (void *)0) {
    
#line 3705 
    __retres = -12;
    
#line 3705 
    goto return_label;
  }
  else ;
  
#line 3707 
  req = (struct be_cmd_req_get_profile_config *)cmd.va;
  
#line 3708 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)164,(int)cmd.size,& wrb,& cmd);
  
#line 3712 
  req->hdr.domain = domain;
  
#line 3713 
  if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) 
    
#line 3714 
    req->hdr.version = (unsigned char)1U; else ;
  
#line 3715 
  req->type = (unsigned char)2U;
  
#line 3721 
  if ((unsigned int)query == 1U) 
#line 3722 
                                 req->type = (unsigned char)((unsigned int)req->type | 8U); else ;
  
#line 3724 
  status = be_cmd_notify_wait(adapter,& wrb);
  
#line 3725 
  if (status != 0) 
#line 3726 
                   goto err; else ;
  
#line 3728 
  resp = (struct be_cmd_resp_get_profile_config *)cmd.va;
  
#line 3729 
  desc_count = resp->desc_count;
  
#line 3731 
  pcie = be_get_pcie_desc((unsigned char)((int)((unsigned char)(adapter->pdev)->devfn)),(u8 *)(& resp->func_param),(unsigned int)desc_count);
  
#line 3733 
  if (pcie != (struct be_pcie_res_desc *)0) 
#line 3734 
                                            res->max_vfs = pcie->num_vfs; else ;
  
#line 3736 
  port = be_get_port_desc((u8 *)(& resp->func_param),(unsigned int)desc_count);
  
#line 3737 
  if (port != (struct be_port_res_desc *)0) 
#line 3738 
                                            adapter->mc_type = port->mc_type; else ;
  
#line 3740 
  nic = be_get_func_nic_desc((u8 *)(& resp->func_param),(unsigned int)desc_count);
  
#line 3741 
  if (nic != (struct be_nic_res_desc *)0) 
#line 3742 
                                          be_copy_nic_desc(res,nic); else ;
  
#line 3744 
  vf_res = be_get_vft_desc((u8 *)(& resp->func_param),(unsigned int)desc_count);
  
#line 3745 
  if (vf_res != (struct be_nic_res_desc *)0) 
#line 3746 
                                             res->vf_if_cap_flags = vf_res->cap_flags; else ;
  err: 
#line 3747 
  ;
  
#line 3748 
  if (cmd.va != (void *)0) 
#line 3749 
                           dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma,(struct dma_attrs *)0); else ;
  
#line 3751 
  __retres = status;
  return_label: 
#line 3751 
                return __retres;
}


#line 3755  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int be_cmd_set_profile_config(struct be_adapter *adapter, void *desc, int size, int count, u8 version, u8 domain)
{
  int __retres;
  struct be_cmd_req_set_profile_config *req;
  struct be_dma_mem cmd;
  int status;
  
#line 3759 
  struct be_mcc_wrb wrb = {.embedded = 0U, .payload_length = 0U, .tag0 = 0U, .tag1 = 0U, .rsvd = 0U, .payload = {.embedded_payload = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}};
  
#line 3763 
  memset((void *)(& cmd),0,24UL);
  
#line 3764 
  cmd.size = 200U;
  
#line 3765 
  cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,32U);
  
#line 3767 
  if (cmd.va == (void *)0) {
    
#line 3768 
    __retres = -12;
    
#line 3768 
    goto return_label;
  }
  else ;
  
#line 3770 
  req = (struct be_cmd_req_set_profile_config *)cmd.va;
  
#line 3771 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)165,(int)cmd.size,& wrb,& cmd);
  
#line 3774 
  req->hdr.version = version;
  
#line 3775 
  req->hdr.domain = domain;
  
#line 3776 
  req->desc_count = (unsigned int)count;
  
#line 3777 
  memcpy((void *)(& req->desc),(void const *)desc,(unsigned long)size);
  
#line 3779 
  status = be_cmd_notify_wait(adapter,& wrb);
  
#line 3781 
  if (cmd.va != (void *)0) 
#line 3782 
                           dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma,(struct dma_attrs *)0); else ;
  
#line 3784 
  __retres = status;
  return_label: 
#line 3784 
                return __retres;
}


#line 3788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_reset_nic_desc(struct be_nic_res_desc *nic)
{
  
#line 3790 
  memset((void *)nic,0,88UL);
  
#line 3791 
  nic->unicast_mac_count = (unsigned short)65535U;
  
#line 3792 
  nic->mcc_count = (unsigned short)65535U;
  
#line 3793 
  nic->vlan_count = (unsigned short)65535U;
  
#line 3794 
  nic->mcast_mac_count = (unsigned short)65535U;
  
#line 3795 
  nic->txq_count = (unsigned short)65535U;
  
#line 3796 
  nic->rq_count = (unsigned short)65535U;
  
#line 3797 
  nic->rssq_count = (unsigned short)65535U;
  
#line 3798 
  nic->lro_count = (unsigned short)65535U;
  
#line 3799 
  nic->cq_count = (unsigned short)65535U;
  
#line 3800 
  nic->toe_conn_count = (unsigned short)65535U;
  
#line 3801 
  nic->eq_count = (unsigned short)65535U;
  
#line 3802 
  nic->iface_count = (unsigned short)65535U;
  
#line 3803 
  nic->link_param = (unsigned char)255U;
  
#line 3804 
  nic->channel_id_param = (unsigned short)61440U;
  
#line 3805 
  nic->acpi_params = (unsigned char)255U;
  
#line 3806 
  nic->wol_param = (unsigned char)15U;
  
#line 3807 
  nic->tunnel_iface_count = (unsigned short)65535U;
  
#line 3808 
  nic->direct_tenant_iface_count = (unsigned short)65535U;
  
#line 3809 
  nic->bw_min = 4294967295U;
  
#line 3810 
  nic->bw_max = 4294967295U;
  
#line 3811 
  return;
}


#line 3814  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_reset_pcie_desc(struct be_pcie_res_desc *pcie)
{
  
#line 3816 
  memset((void *)pcie,0,88UL);
  
#line 3817 
  pcie->sriov_state = (unsigned char)255U;
  
#line 3818 
  pcie->pf_state = (unsigned char)255U;
  
#line 3819 
  pcie->pf_type = (unsigned char)255U;
  
#line 3820 
  pcie->num_vfs = (unsigned short)65535U;
  
#line 3821 
  return;
}


#line 3823  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_config_qos(struct be_adapter *adapter, u32 max_rate, u16 link_speed, u8 domain)
{
  int __retres;
  struct be_nic_res_desc nic_desc;
  u32 bw_percent;
  int tmp_0;
  
#line 3828 
  u16 version = (unsigned short)0U;
  
#line 3830 
  if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
    int tmp;
    
#line 3831 
    tmp = be_cmd_set_qos(adapter,max_rate / 10U,(unsigned int)domain);
    
#line 3831 
    __retres = tmp;
    
#line 3831 
    goto return_label;
  }
  else ;
  
#line 3833 
  be_reset_nic_desc(& nic_desc);
  
#line 3834 
  nic_desc.pf_num = adapter->pf_number;
  
#line 3835 
  nic_desc.vf_num = domain;
  
#line 3836 
  nic_desc.bw_min = 0U;
  
#line 3837 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    
#line 3838 
    nic_desc.hdr.desc_type = (unsigned char)65U;
    
#line 3839 
    nic_desc.hdr.desc_len = (unsigned char)72U;
    
#line 3840 
    nic_desc.flags = (unsigned char)208U;
    
#line 3842 
    nic_desc.bw_max = max_rate / 10U;
  }
  else {
    
#line 3844 
    version = (unsigned short)1U;
    
#line 3845 
    nic_desc.hdr.desc_type = (unsigned char)81U;
    
#line 3846 
    nic_desc.hdr.desc_len = (unsigned char)88U;
    
#line 3847 
    nic_desc.flags = (unsigned char)192U;
    
#line 3848 
    if (max_rate != 0U) 
#line 3848 
                        bw_percent = (max_rate * 100U) / (unsigned int)link_speed; else 
                                                                    
#line 3848 
                                                                    bw_percent = 100U;
    
#line 3849 
    nic_desc.bw_max = bw_percent;
  }
  
#line 3852 
  tmp_0 = be_cmd_set_profile_config(adapter,(void *)(& nic_desc),(int)nic_desc.hdr.desc_len,1,(unsigned char)((int)((unsigned char)version)),(unsigned char)((int)domain));
  
#line 3852 
  __retres = tmp_0;
  return_label: 
#line 3852 
                return __retres;
}


#line 3857  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static void be_fill_vf_res_template(struct be_adapter *adapter, struct be_resources pool_res, u16 num_vfs_0, u16 num_vf_qs, struct be_nic_res_desc *nic_vft)
{
  
#line 3862 
  u32 vf_if_cap_flags = pool_res.vf_if_cap_flags;
  
#line 3863 
  struct be_resources res_mod = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U};
  
#line 3868 
  be_cmd_get_profile_config(adapter,& res_mod,(unsigned char)1,(unsigned char)0);
  
#line 3875 
  if ((res_mod.vf_if_cap_flags & 4U) != 0U) {
    
#line 3876 
    nic_vft->flags = (unsigned char)((unsigned int)nic_vft->flags | 1U);
    
#line 3877 
    if ((unsigned int)num_vf_qs > 1U) {
      
#line 3878 
      vf_if_cap_flags |= 4U;
      
#line 3879 
      if ((pool_res.if_cap_flags & 16777216U) != 0U) 
#line 3880 
                                                     vf_if_cap_flags |= 16777216U; else ;
    }
    else 
#line 3882 
         vf_if_cap_flags &= 4278190075U;
    
#line 3886 
    nic_vft->cap_flags = vf_if_cap_flags;
  }
  else 
#line 3888 
       num_vf_qs = (unsigned short)1U;
  
#line 3891 
  nic_vft->rq_count = num_vf_qs;
  
#line 3892 
  nic_vft->txq_count = num_vf_qs;
  
#line 3893 
  nic_vft->rssq_count = num_vf_qs;
  
#line 3894 
  nic_vft->cq_count = (unsigned short)((int)pool_res.max_cq_count / ((int)num_vfs_0 + 1));
  
#line 3900 
  if ((unsigned int)res_mod.max_uc_mac == 65535U) 
#line 3901 
                                                  nic_vft->unicast_mac_count = (unsigned short)((int)pool_res.max_uc_mac / ((int)num_vfs_0 + 1)); else ;
  
#line 3904 
  if ((unsigned int)res_mod.max_vlans == 65535U) 
#line 3905 
                                                 nic_vft->vlan_count = (unsigned short)((int)pool_res.max_vlans / ((int)num_vfs_0 + 1)); else ;
  
#line 3908 
  if ((unsigned int)res_mod.max_iface_count == 65535U) 
#line 3909 
                                                       nic_vft->iface_count = (unsigned short)((int)pool_res.max_iface_count / ((int)num_vfs_0 + 1)); else ;
  
#line 3912 
  if ((unsigned int)res_mod.max_mcc_count == 65535U) 
#line 3913 
                                                     nic_vft->mcc_count = (unsigned short)((int)pool_res.max_mcc_count / ((int)num_vfs_0 + 1)); else ;
  
#line 3914 
  return;
}


#line 3917  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_sriov_config(struct be_adapter *adapter, struct be_resources pool_res, u16 num_vfs_0, u16 num_vf_qs)
{
  struct __anonstruct_desc_400 desc;
  int tmp;
  
#line 3927 
  be_reset_pcie_desc(& desc.pcie);
  
#line 3928 
  desc.pcie.hdr.desc_type = (unsigned char)80U;
  
#line 3929 
  desc.pcie.hdr.desc_len = (unsigned char)88U;
  
#line 3930 
  desc.pcie.flags = (unsigned char)192U;
  
#line 3931 
  desc.pcie.pf_num = (unsigned char)(adapter->pdev)->devfn;
  
#line 3932 
  desc.pcie.sriov_state = (unsigned char)((unsigned int)num_vfs_0 != 0U);
  
#line 3933 
  desc.pcie.num_vfs = num_vfs_0;
  
#line 3936 
  be_reset_nic_desc(& desc.nic_vft);
  
#line 3937 
  desc.nic_vft.hdr.desc_type = (unsigned char)81U;
  
#line 3938 
  desc.nic_vft.hdr.desc_len = (unsigned char)88U;
  
#line 3939 
  desc.nic_vft.flags = (unsigned char)200U;
  
#line 3940 
  desc.nic_vft.pf_num = (unsigned char)(adapter->pdev)->devfn;
  
#line 3941 
  desc.nic_vft.vf_num = (unsigned char)0U;
  
#line 3943 
  be_fill_vf_res_template(adapter,pool_res,(unsigned short)((int)num_vfs_0),(unsigned short)((int)num_vf_qs),& desc.nic_vft);
  
#line 3946 
  tmp = be_cmd_set_profile_config(adapter,(void *)(& desc),176,2,(unsigned char)1,(unsigned char)0);
  
#line 3946 
  return tmp;
}


#line 3950  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_manage_iface(struct be_adapter *adapter, u32 iface, u8 op)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_manage_iface_filters *req;
  int status;
  
#line 3956 
  if (iface == 4294967295U) {
    
#line 3957 
    __retres = -1;
    
#line 3957 
    goto return_label;
  }
  else ;
  
#line 3959 
  ldv_spin_lock_bh_198(& adapter->mcc_lock);
  
#line 3961 
  wrb = wrb_from_mccq(adapter);
  
#line 3962 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 3963 
    status = -16;
    
#line 3964 
    goto err;
  }
  else ;
  
#line 3966 
  req = (struct be_cmd_req_manage_iface_filters *)embedded_payload(wrb);
  
#line 3968 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)193,52,wrb,(struct be_dma_mem *)0);
  
#line 3971 
  req->op = op;
  
#line 3972 
  req->target_iface_id = iface;
  
#line 3974 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 3975 
  ;
  
#line 3976 
  ldv_spin_unlock_bh_199(& adapter->mcc_lock);
  
#line 3977 
  __retres = status;
  return_label: 
#line 3977 
                return __retres;
}


#line 3980  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_vxlan_port(struct be_adapter *adapter, __be16 port)
{
  struct be_port_res_desc port_desc;
  int tmp_0;
  
#line 3984 
  memset((void *)(& port_desc),0,88UL);
  
#line 3985 
  port_desc.hdr.desc_type = (unsigned char)85U;
  
#line 3986 
  port_desc.hdr.desc_len = (unsigned char)88U;
  
#line 3987 
  port_desc.flags = (unsigned char)192U;
  
#line 3988 
  port_desc.link_num = adapter->hba_port_num;
  
#line 3989 
  if ((unsigned int)port != 0U) {
    
#line 3990 
    port_desc.nv_flags = (unsigned char)23U;
    
#line 3992 
    if (0 != 0) 
#line 3992 
                port_desc.nv_port = (unsigned short)(((int)port << 8) | ((int)port >> 8)); else 
                                                                    
#line 3992 
                                                                    port_desc.nv_port = __fswab16((unsigned short)((int)port));
  }
  else {
    
#line 3994 
    port_desc.nv_flags = (unsigned char)1U;
    
#line 3995 
    port_desc.nv_port = (unsigned short)0U;
  }
  
#line 3998 
  tmp_0 = be_cmd_set_profile_config(adapter,(void *)(& port_desc),88,1,(unsigned char)1,(unsigned char)0);
  
#line 3998 
  return tmp_0;
}


#line 4002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_if_id(struct be_adapter *adapter, struct be_vf_cfg *vf_cfg, int vf_num)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_get_iface_list *req;
  struct be_cmd_resp_get_iface_list *resp;
  int status;
  
#line 4010 
  ldv_spin_lock_bh_200(& adapter->mcc_lock);
  
#line 4012 
  wrb = wrb_from_mccq(adapter);
  
#line 4013 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 4014 
    status = -16;
    
#line 4015 
    goto err;
  }
  else ;
  
#line 4017 
  req = (struct be_cmd_req_get_iface_list *)embedded_payload(wrb);
  
#line 4019 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)194,32,wrb,(struct be_dma_mem *)0);
  
#line 4022 
  req->hdr.domain = (unsigned char)((unsigned int)((unsigned char)vf_num) + 1U);
  
#line 4024 
  status = be_mcc_notify_wait(adapter);
  
#line 4025 
  if (status == 0) {
    
#line 4026 
    resp = (struct be_cmd_resp_get_iface_list *)req;
    
#line 4027 
    vf_cfg->if_handle = (int)resp->if_desc.if_id;
  }
  else ;
  err: 
#line 4030 
  ;
  
#line 4031 
  ldv_spin_unlock_bh_201(& adapter->mcc_lock);
  
#line 4032 
  return status;
}


#line 4035  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static int lancer_wait_idle(struct be_adapter *adapter)
{
  u32 reg_val;
  int i;
  
#line 4039 
  int status = 0;
  
#line 4041 
  i = 0;
  
#line 4041 
  goto ldv_59620;
  ldv_59619: 
#line 4042 
  ;
  
#line 4042 
  reg_val = ioread32((void *)(adapter->db + 1044U));
  
#line 4043 
  if ((reg_val & 1073741824U) == 0U) 
#line 4044 
                                     goto ldv_59618; else ;
  
#line 4046 
  ssleep(1U);
  
#line 4041 
  i += 1;
  ldv_59620: 
#line 4042 
  ;
  
#line 4041 
  if (i <= 29) 
#line 4043 
               goto ldv_59619; else 
#line 4046 
                                    goto ldv_59618;
  ldv_59618: 
#line 4047 
  ;
  
#line 4049 
  if (i == 30) 
#line 4050 
               status = -1; else ;
  
#line 4052 
  return status;
}


#line 4055  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_physdev_ctrl(struct be_adapter *adapter, u32 mask)
{
  int __retres;
  
#line 4057 
  int status = 0;
  
#line 4059 
  status = lancer_wait_idle(adapter);
  
#line 4060 
  if (status != 0) {
    
#line 4061 
    __retres = status;
    
#line 4061 
    goto return_label;
  }
  else ;
  
#line 4063 
  iowrite32(mask,(void *)(adapter->db + 1044U));
  
#line 4065 
  __retres = status;
  return_label: 
#line 4065 
                return __retres;
}


#line 4069  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
bool dump_present(struct be_adapter *adapter)
{
  bool __retres;
  
#line 4071 
  u32 sliport_status = 0U;
  
#line 4073 
  sliport_status = ioread32((void *)(adapter->db + 1028U));
  
#line 4074 
  __retres = (_Bool)((sliport_status & 33554432U) != 0U);
  
#line 4074 
  return __retres;
}


#line 4077  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_initiate_dump(struct be_adapter *adapter)
{
  int __retres;
  int status;
  bool tmp;
  int tmp_1;
  bool tmp_0;
  
#line 4079 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 4082 
  tmp = dump_present(adapter);
  
#line 4082 
  if ((int)tmp != 0) {
    
#line 4083 
    _dev_info((struct device const *)dev,"Previous dump not cleared, not forcing dump\n");
    
#line 4084 
    __retres = -17;
    
#line 4084 
    goto return_label;
  }
  else ;
  
#line 4088 
  status = lancer_physdev_ctrl(adapter,6U);
  
#line 4090 
  if (status < 0) {
    
#line 4091 
    dev_err((struct device const *)dev,"FW reset failed\n");
    
#line 4092 
    __retres = status;
    
#line 4092 
    goto return_label;
  }
  else ;
  
#line 4095 
  status = lancer_wait_idle(adapter);
  
#line 4096 
  if (status != 0) {
    
#line 4097 
    __retres = status;
    
#line 4097 
    goto return_label;
  }
  else ;
  
#line 4099 
  tmp_0 = dump_present(adapter);
  
#line 4099 
  if (tmp_0) 
#line 4099 
             tmp_1 = 0; else 
#line 4099 
                             tmp_1 = 1;
  
#line 4099 
  if (tmp_1) {
    
#line 4100 
    dev_err((struct device const *)dev,"FW dump not generated\n");
    
#line 4101 
    __retres = -5;
    
#line 4101 
    goto return_label;
  }
  else ;
  
#line 4104 
  __retres = 0;
  return_label: 
#line 4104 
                return __retres;
}


#line 4107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int lancer_delete_dump(struct be_adapter *adapter)
{
  int status;
  int tmp;
  
#line 4111 
  status = lancer_cmd_delete_object(adapter,"/dbg/dump.bin");
  
#line 4112 
  if (status <= 0) 
#line 4112 
                   tmp = status; else 
#line 4112 
                                      tmp = -5;
  
#line 4112 
  return tmp;
}


#line 4116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_enable_vf(struct be_adapter *adapter, u8 domain)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_enable_disable_vf *req;
  int status;
  
#line 4122 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    
#line 4123 
    __retres = 0;
    
#line 4123 
    goto return_label;
  }
  else ;
  
#line 4125 
  ldv_spin_lock_bh_202(& adapter->mcc_lock);
  
#line 4127 
  wrb = wrb_from_mccq(adapter);
  
#line 4128 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 4129 
    status = -16;
    
#line 4130 
    goto err;
  }
  else ;
  
#line 4133 
  req = (struct be_cmd_enable_disable_vf *)embedded_payload(wrb);
  
#line 4135 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)196,20,wrb,(struct be_dma_mem *)0);
  
#line 4139 
  req->hdr.domain = domain;
  
#line 4140 
  req->enable = (unsigned char)1U;
  
#line 4141 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 4142 
  ;
  
#line 4143 
  ldv_spin_unlock_bh_203(& adapter->mcc_lock);
  
#line 4144 
  __retres = status;
  return_label: 
#line 4144 
                return __retres;
}


#line 4147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_intr_set(struct be_adapter *adapter, bool intr_enable)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_intr_set *req;
  int status;
  int tmp;
  
#line 4153 
  tmp = ldv_mutex_lock_interruptible_204(& adapter->mbox_lock);
  
#line 4153 
  if (tmp != 0) {
    
#line 4154 
    __retres = -1;
    
#line 4154 
    goto return_label;
  }
  else ;
  
#line 4156 
  wrb = wrb_from_mbox(adapter);
  
#line 4158 
  req = (struct be_cmd_req_intr_set *)embedded_payload(wrb);
  
#line 4160 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)89,20,wrb,(struct be_dma_mem *)0);
  
#line 4164 
  req->intr_enabled = (unsigned char)intr_enable;
  
#line 4166 
  status = be_mbox_notify_wait(adapter);
  
#line 4168 
  ldv_mutex_unlock_205(& adapter->mbox_lock);
  
#line 4169 
  __retres = status;
  return_label: 
#line 4169 
                return __retres;
}


#line 4173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_get_active_profile(struct be_adapter *adapter, u16 *profile_id)
{
  int __retres;
  struct be_cmd_req_get_active_profile *req;
  struct be_mcc_wrb *wrb;
  int status;
  int tmp;
  
#line 4179 
  tmp = ldv_mutex_lock_interruptible_206(& adapter->mbox_lock);
  
#line 4179 
  if (tmp != 0) {
    
#line 4180 
    __retres = -1;
    
#line 4180 
    goto return_label;
  }
  else ;
  
#line 4182 
  wrb = wrb_from_mbox(adapter);
  
#line 4183 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 4184 
    status = -16;
    
#line 4185 
    goto err;
  }
  else ;
  
#line 4188 
  req = (struct be_cmd_req_get_active_profile *)embedded_payload(wrb);
  
#line 4190 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)167,20,wrb,(struct be_dma_mem *)0);
  
#line 4194 
  status = be_mbox_notify_wait(adapter);
  
#line 4195 
  if (status == 0) {
    
#line 4197 
    struct be_cmd_resp_get_active_profile *resp = embedded_payload(wrb);
    
#line 4199 
    *profile_id = resp->active_profile_id;
  }
  else ;
  err: 
#line 4202 
  ;
  
#line 4203 
  ldv_mutex_unlock_207(& adapter->mbox_lock);
  
#line 4204 
  __retres = status;
  return_label: 
#line 4204 
                return __retres;
}


#line 4207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_cmd_set_logical_link_config(struct be_adapter *adapter, int link_state, u8 domain)
{
  int __retres;
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_set_ll_link *req;
  int status;
  
#line 4214 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) || ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U)) {
    
#line 4215 
    __retres = -95;
    
#line 4215 
    goto return_label;
  }
  else ;
  
#line 4217 
  ldv_spin_lock_bh_208(& adapter->mcc_lock);
  
#line 4219 
  wrb = wrb_from_mccq(adapter);
  
#line 4220 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 4221 
    status = -16;
    
#line 4222 
    goto err;
  }
  else ;
  
#line 4225 
  req = (struct be_cmd_req_set_ll_link *)embedded_payload(wrb);
  
#line 4227 
  be_wrb_cmd_hdr_prepare(& req->hdr,(unsigned char)1,(unsigned char)80,20,wrb,(struct be_dma_mem *)0);
  
#line 4231 
  req->hdr.version = (unsigned char)1U;
  
#line 4232 
  req->hdr.domain = domain;
  
#line 4234 
  if (link_state == 1) 
#line 4235 
                       req->link_config |= 1U; else ;
  
#line 4237 
  if (link_state == 0) 
#line 4238 
                       req->link_config |= 256U; else ;
  
#line 4240 
  status = be_mcc_notify_wait(adapter);
  err: 
#line 4241 
  ;
  
#line 4242 
  ldv_spin_unlock_bh_209(& adapter->mcc_lock);
  
#line 4243 
  __retres = status;
  return_label: 
#line 4243 
                return __retres;
}


#line 4246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
int be_roce_mcc_cmd(void *netdev_handle, void *wrb_payload, int wrb_payload_size, u16 *cmd_status, u16 *ext_status)
{
  struct be_mcc_wrb *wrb;
  struct be_cmd_req_hdr *req;
  struct be_cmd_resp_hdr *resp;
  int status;
  
#line 4249 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev_handle);
  
#line 4251 
  struct be_cmd_req_hdr *hdr = (struct be_cmd_req_hdr *)wrb_payload;
  
#line 4256 
  ldv_spin_lock_bh_210(& adapter->mcc_lock);
  
#line 4258 
  wrb = wrb_from_mccq(adapter);
  
#line 4259 
  if (wrb == (struct be_mcc_wrb *)0) {
    
#line 4260 
    status = -16;
    
#line 4261 
    goto err;
  }
  else ;
  
#line 4263 
  req = (struct be_cmd_req_hdr *)embedded_payload(wrb);
  
#line 4264 
  resp = (struct be_cmd_resp_hdr *)embedded_payload(wrb);
  
#line 4266 
  be_wrb_cmd_hdr_prepare(req,(unsigned char)((int)hdr->subsystem),(unsigned char)((int)hdr->opcode),wrb_payload_size,wrb,(struct be_dma_mem *)0);
  
#line 4268 
  memcpy((void *)req,(void const *)wrb_payload,(unsigned long)wrb_payload_size);
  
#line 4269 
  swap_dws((void *)req,wrb_payload_size);
  
#line 4271 
  status = be_mcc_notify_wait(adapter);
  
#line 4272 
  if (cmd_status != (u16 *)0U) 
#line 4273 
                               *cmd_status = (unsigned short)status; else ;
  
#line 4274 
  if (ext_status != (u16 *)0U) 
#line 4275 
                               *ext_status = (unsigned short)0U; else ;
  
#line 4276 
  memcpy(wrb_payload,(void const *)resp,(unsigned long)resp->response_length + 16UL);
  
#line 4277 
  swap_dws(wrb_payload,(int)(resp->response_length + 16U));
  err: 
#line 4278 
  ;
  
#line 4279 
  ldv_spin_unlock_bh_211(& adapter->mcc_lock);
  
#line 4280 
  return status;
}


#line 4282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
static char const __kstrtab_be_roce_mcc_cmd[16U] = {(char)'b', (char)'e', (char)'_', (char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'m', (char)'c', (char)'c', (char)'_', (char)'c', (char)'m', (char)'d', (char)'\000'};

#line 4282 
struct kernel_symbol const __ksymtab_be_roce_mcc_cmd;


#line 4282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.c"
struct kernel_symbol const __ksymtab_be_roce_mcc_cmd = {.value = (unsigned long)(& be_roce_mcc_cmd), .name = (char const *)(& __kstrtab_be_roce_mcc_cmd)};

#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 123 
  ldv_atomic_inc(v);
  
#line 124 
  return;
}


#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void atomic_dec(atomic_t *v)
{
  
#line 130 
  ldv_atomic_dec(v);
  
#line 131 
  return;
}


#line 747  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_73(spinlock_t *lock)
{
  
#line 751 
  ldv_spin_model_lock((char *)"mcc_cq_lock_of_be_adapter");
  
#line 753 
  spin_lock_bh(lock);
  
#line 754 
  return;
}


#line 757  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_74(spinlock_t *lock)
{
  
#line 761 
  ldv_spin_model_unlock((char *)"mcc_cq_lock_of_be_adapter");
  
#line 763 
  spin_unlock_bh(lock);
  
#line 764 
  return;
}


#line 767  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_75(spinlock_t *lock)
{
  
#line 771 
  ldv_spin_model_lock((char *)"mcc_cq_lock_of_be_adapter");
  
#line 773 
  spin_lock_bh(lock);
  
#line 774 
  return;
}


#line 777  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_76(spinlock_t *lock)
{
  
#line 781 
  ldv_spin_model_unlock((char *)"mcc_cq_lock_of_be_adapter");
  
#line 783 
  spin_unlock_bh(lock);
  
#line 784 
  return;
}


#line 787  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_77(spinlock_t *lock)
{
  
#line 791 
  ldv_spin_model_lock((char *)"mcc_cq_lock_of_be_adapter");
  
#line 793 
  spin_lock(lock);
  
#line 794 
  return;
}


#line 797  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_78(spinlock_t *lock)
{
  
#line 801 
  ldv_spin_model_unlock((char *)"mcc_cq_lock_of_be_adapter");
  
#line 803 
  spin_unlock(lock);
  
#line 804 
  return;
}


#line 807  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_79(spinlock_t *lock)
{
  
#line 811 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 813 
  spin_lock_bh(lock);
  
#line 814 
  return;
}


#line 817  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_80(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 820 
  int nondetermined = ldv_undef_int();
  
#line 822 
  if (nondetermined != 0) {
    
#line 825 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 826 
    __retres = 0;
    
#line 826 
    goto return_label;
  }
  else {
    
#line 831 
    __retres = -4;
    
#line 831 
    goto return_label;
  }
  return_label: 
#line 822 
                return __retres;
}


#line 836  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_81(spinlock_t *lock)
{
  
#line 840 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 842 
  spin_unlock_bh(lock);
  
#line 843 
  return;
}


#line 846  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_82(struct mutex *ldv_func_arg1)
{
  
#line 850 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 851 
  return;
}


#line 854  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_83(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 857 
  int nondetermined = ldv_undef_int();
  
#line 859 
  if (nondetermined != 0) {
    
#line 862 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 863 
    __retres = 0;
    
#line 863 
    goto return_label;
  }
  else {
    
#line 868 
    __retres = -4;
    
#line 868 
    goto return_label;
  }
  return_label: 
#line 859 
                return __retres;
}


#line 873  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_84(struct mutex *ldv_func_arg1)
{
  
#line 877 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 878 
  return;
}


#line 881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_85(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 884 
  int nondetermined = ldv_undef_int();
  
#line 886 
  if (nondetermined != 0) {
    
#line 889 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 890 
    __retres = 0;
    
#line 890 
    goto return_label;
  }
  else {
    
#line 895 
    __retres = -4;
    
#line 895 
    goto return_label;
  }
  return_label: 
#line 886 
                return __retres;
}


#line 900  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1)
{
  
#line 904 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 905 
  return;
}


#line 908  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_87(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 911 
  int nondetermined = ldv_undef_int();
  
#line 913 
  if (nondetermined != 0) {
    
#line 916 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 917 
    __retres = 0;
    
#line 917 
    goto return_label;
  }
  else {
    
#line 922 
    __retres = -4;
    
#line 922 
    goto return_label;
  }
  return_label: 
#line 913 
                return __retres;
}


#line 927  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_88(struct mutex *ldv_func_arg1)
{
  
#line 931 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 932 
  return;
}


#line 935  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_89(spinlock_t *lock)
{
  
#line 939 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 941 
  spin_lock_bh(lock);
  
#line 942 
  return;
}


#line 945  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_90(spinlock_t *lock)
{
  
#line 949 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 951 
  spin_unlock_bh(lock);
  
#line 952 
  return;
}


#line 955  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_91(spinlock_t *lock)
{
  
#line 959 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 961 
  spin_lock_bh(lock);
  
#line 962 
  return;
}


#line 965  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_92(spinlock_t *lock)
{
  
#line 969 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 971 
  spin_unlock_bh(lock);
  
#line 972 
  return;
}


#line 975  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_93(spinlock_t *lock)
{
  
#line 979 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 981 
  spin_lock_bh(lock);
  
#line 982 
  return;
}


#line 985  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_94(spinlock_t *lock)
{
  
#line 989 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 991 
  spin_unlock_bh(lock);
  
#line 992 
  return;
}


#line 995  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_95(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 998 
  int nondetermined = ldv_undef_int();
  
#line 1000 
  if (nondetermined != 0) {
    
#line 1003 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 1004 
    __retres = 0;
    
#line 1004 
    goto return_label;
  }
  else {
    
#line 1009 
    __retres = -4;
    
#line 1009 
    goto return_label;
  }
  return_label: 
#line 1000 
                return __retres;
}


#line 1014  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_96(struct mutex *ldv_func_arg1)
{
  
#line 1018 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 1019 
  return;
}


#line 1022  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_97(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 1025 
  int nondetermined = ldv_undef_int();
  
#line 1027 
  if (nondetermined != 0) {
    
#line 1030 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 1031 
    __retres = 0;
    
#line 1031 
    goto return_label;
  }
  else {
    
#line 1036 
    __retres = -4;
    
#line 1036 
    goto return_label;
  }
  return_label: 
#line 1027 
                return __retres;
}


#line 1041  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1)
{
  
#line 1045 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 1046 
  return;
}


#line 1049  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_99(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 1052 
  int nondetermined = ldv_undef_int();
  
#line 1054 
  if (nondetermined != 0) {
    
#line 1057 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 1058 
    __retres = 0;
    
#line 1058 
    goto return_label;
  }
  else {
    
#line 1063 
    __retres = -4;
    
#line 1063 
    goto return_label;
  }
  return_label: 
#line 1054 
                return __retres;
}


#line 1068  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_100(struct mutex *ldv_func_arg1)
{
  
#line 1072 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 1073 
  return;
}


#line 1076  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_101(spinlock_t *lock)
{
  
#line 1080 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1082 
  spin_lock_bh(lock);
  
#line 1083 
  return;
}


#line 1086  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_102(spinlock_t *lock)
{
  
#line 1090 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1092 
  spin_unlock_bh(lock);
  
#line 1093 
  return;
}


#line 1096  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_103(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 1099 
  int nondetermined = ldv_undef_int();
  
#line 1101 
  if (nondetermined != 0) {
    
#line 1104 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 1105 
    __retres = 0;
    
#line 1105 
    goto return_label;
  }
  else {
    
#line 1110 
    __retres = -4;
    
#line 1110 
    goto return_label;
  }
  return_label: 
#line 1101 
                return __retres;
}


#line 1115  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1)
{
  
#line 1119 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 1120 
  return;
}


#line 1123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_105(spinlock_t *lock)
{
  
#line 1127 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1129 
  spin_lock_bh(lock);
  
#line 1130 
  return;
}


#line 1133  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_106(spinlock_t *lock)
{
  
#line 1137 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1139 
  spin_unlock_bh(lock);
  
#line 1140 
  return;
}


#line 1143  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_107(spinlock_t *lock)
{
  
#line 1147 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1149 
  spin_lock_bh(lock);
  
#line 1150 
  return;
}


#line 1153  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_108(spinlock_t *lock)
{
  
#line 1157 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1159 
  spin_unlock_bh(lock);
  
#line 1160 
  return;
}


#line 1163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_109(spinlock_t *lock)
{
  
#line 1167 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1169 
  spin_lock_bh(lock);
  
#line 1170 
  return;
}


#line 1173  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_110(spinlock_t *lock)
{
  
#line 1177 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1179 
  spin_unlock_bh(lock);
  
#line 1180 
  return;
}


#line 1183  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_111(spinlock_t *lock)
{
  
#line 1187 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1189 
  spin_lock_bh(lock);
  
#line 1190 
  return;
}


#line 1193  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_112(spinlock_t *lock)
{
  
#line 1197 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1199 
  spin_unlock_bh(lock);
  
#line 1200 
  return;
}


#line 1203  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_113(spinlock_t *lock)
{
  
#line 1207 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1209 
  spin_lock_bh(lock);
  
#line 1210 
  return;
}


#line 1213  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_114(spinlock_t *lock)
{
  
#line 1217 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1219 
  spin_unlock_bh(lock);
  
#line 1220 
  return;
}


#line 1223  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_115(spinlock_t *lock)
{
  
#line 1227 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1229 
  spin_lock_bh(lock);
  
#line 1230 
  return;
}


#line 1233  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_116(spinlock_t *lock)
{
  
#line 1237 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1239 
  spin_unlock_bh(lock);
  
#line 1240 
  return;
}


#line 1243  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_117(spinlock_t *lock)
{
  
#line 1247 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1249 
  spin_lock_bh(lock);
  
#line 1250 
  return;
}


#line 1253  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_118(spinlock_t *lock)
{
  
#line 1257 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1259 
  spin_unlock_bh(lock);
  
#line 1260 
  return;
}


#line 1263  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_119(spinlock_t *lock)
{
  
#line 1267 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1269 
  spin_lock_bh(lock);
  
#line 1270 
  return;
}


#line 1273  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_120(spinlock_t *lock)
{
  
#line 1277 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1279 
  spin_unlock_bh(lock);
  
#line 1280 
  return;
}


#line 1283  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_121(spinlock_t *lock)
{
  
#line 1287 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1289 
  spin_lock_bh(lock);
  
#line 1290 
  return;
}


#line 1293  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_122(spinlock_t *lock)
{
  
#line 1297 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1299 
  spin_unlock_bh(lock);
  
#line 1300 
  return;
}


#line 1303  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_123(spinlock_t *lock)
{
  
#line 1307 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1309 
  spin_lock_bh(lock);
  
#line 1310 
  return;
}


#line 1313  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_124(spinlock_t *lock)
{
  
#line 1317 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1319 
  spin_unlock_bh(lock);
  
#line 1320 
  return;
}


#line 1323  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_125(spinlock_t *lock)
{
  
#line 1327 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1329 
  spin_lock_bh(lock);
  
#line 1330 
  return;
}


#line 1333  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_126(spinlock_t *lock)
{
  
#line 1337 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1339 
  spin_unlock_bh(lock);
  
#line 1340 
  return;
}


#line 1343  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_127(spinlock_t *lock)
{
  
#line 1347 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1349 
  spin_lock_bh(lock);
  
#line 1350 
  return;
}


#line 1353  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_128(spinlock_t *lock)
{
  
#line 1357 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1359 
  spin_unlock_bh(lock);
  
#line 1360 
  return;
}


#line 1363  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_129(spinlock_t *lock)
{
  
#line 1367 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1369 
  spin_lock_bh(lock);
  
#line 1370 
  return;
}


#line 1373  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_130(spinlock_t *lock)
{
  
#line 1377 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1379 
  spin_unlock_bh(lock);
  
#line 1380 
  return;
}


#line 1383  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_131(spinlock_t *lock)
{
  
#line 1387 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1389 
  spin_lock_bh(lock);
  
#line 1390 
  return;
}


#line 1393  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_132(spinlock_t *lock)
{
  
#line 1397 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1399 
  spin_unlock_bh(lock);
  
#line 1400 
  return;
}


#line 1403  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_133(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 1406 
  int nondetermined = ldv_undef_int();
  
#line 1408 
  if (nondetermined != 0) {
    
#line 1411 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 1412 
    __retres = 0;
    
#line 1412 
    goto return_label;
  }
  else {
    
#line 1417 
    __retres = -4;
    
#line 1417 
    goto return_label;
  }
  return_label: 
#line 1408 
                return __retres;
}


#line 1422  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1)
{
  
#line 1426 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 1427 
  return;
}


#line 1430  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_135(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 1433 
  int nondetermined = ldv_undef_int();
  
#line 1435 
  if (nondetermined != 0) {
    
#line 1438 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 1439 
    __retres = 0;
    
#line 1439 
    goto return_label;
  }
  else {
    
#line 1444 
    __retres = -4;
    
#line 1444 
    goto return_label;
  }
  return_label: 
#line 1435 
                return __retres;
}


#line 1449  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1)
{
  
#line 1453 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 1454 
  return;
}


#line 1457  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_137(spinlock_t *lock)
{
  
#line 1461 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1463 
  spin_lock_bh(lock);
  
#line 1464 
  return;
}


#line 1467  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_138(spinlock_t *lock)
{
  
#line 1471 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1473 
  spin_unlock_bh(lock);
  
#line 1474 
  return;
}


#line 1477  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_139(spinlock_t *lock)
{
  
#line 1481 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1483 
  spin_lock_bh(lock);
  
#line 1484 
  return;
}


#line 1487  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_140(spinlock_t *lock)
{
  
#line 1491 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1493 
  spin_unlock_bh(lock);
  
#line 1494 
  return;
}


#line 1497  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_141(spinlock_t *lock)
{
  
#line 1501 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1503 
  spin_lock_bh(lock);
  
#line 1504 
  return;
}


#line 1507  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_142(spinlock_t *lock)
{
  
#line 1511 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1513 
  spin_unlock_bh(lock);
  
#line 1514 
  return;
}


#line 1517  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_143(spinlock_t *lock)
{
  
#line 1521 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1523 
  spin_lock_bh(lock);
  
#line 1524 
  return;
}


#line 1527  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_144(spinlock_t *lock)
{
  
#line 1531 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1533 
  spin_unlock_bh(lock);
  
#line 1534 
  return;
}


#line 1537  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_145(spinlock_t *lock)
{
  
#line 1541 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1543 
  spin_lock_bh(lock);
  
#line 1544 
  return;
}


#line 1547  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_146(spinlock_t *lock)
{
  
#line 1551 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1553 
  spin_unlock_bh(lock);
  
#line 1554 
  return;
}


#line 1557  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_147(spinlock_t *lock)
{
  
#line 1561 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1563 
  spin_unlock_bh(lock);
  
#line 1564 
  return;
}


#line 1567  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_148(spinlock_t *lock)
{
  
#line 1571 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1573 
  spin_lock_bh(lock);
  
#line 1574 
  return;
}


#line 1577  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_149(spinlock_t *lock)
{
  
#line 1581 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1583 
  spin_unlock_bh(lock);
  
#line 1584 
  return;
}


#line 1587  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_150(spinlock_t *lock)
{
  
#line 1591 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1593 
  spin_lock_bh(lock);
  
#line 1594 
  return;
}


#line 1597  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_151(spinlock_t *lock)
{
  
#line 1601 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1603 
  spin_unlock_bh(lock);
  
#line 1604 
  return;
}


#line 1607  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_152(spinlock_t *lock)
{
  
#line 1611 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1613 
  spin_lock_bh(lock);
  
#line 1614 
  return;
}


#line 1617  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_153(spinlock_t *lock)
{
  
#line 1621 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1623 
  spin_unlock_bh(lock);
  
#line 1624 
  return;
}


#line 1627  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_154(spinlock_t *lock)
{
  
#line 1631 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1633 
  spin_unlock_bh(lock);
  
#line 1634 
  return;
}


#line 1637  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_155(spinlock_t *lock)
{
  
#line 1641 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1643 
  spin_lock_bh(lock);
  
#line 1644 
  return;
}


#line 1647  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_156(spinlock_t *lock)
{
  
#line 1651 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1653 
  spin_unlock_bh(lock);
  
#line 1654 
  return;
}


#line 1657  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_157(spinlock_t *lock)
{
  
#line 1661 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1663 
  spin_lock_bh(lock);
  
#line 1664 
  return;
}


#line 1667  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_158(spinlock_t *lock)
{
  
#line 1671 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1673 
  spin_unlock_bh(lock);
  
#line 1674 
  return;
}


#line 1677  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_159(spinlock_t *lock)
{
  
#line 1681 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1683 
  spin_lock_bh(lock);
  
#line 1684 
  return;
}


#line 1687  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_160(spinlock_t *lock)
{
  
#line 1691 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1693 
  spin_unlock_bh(lock);
  
#line 1694 
  return;
}


#line 1697  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_161(spinlock_t *lock)
{
  
#line 1701 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1703 
  spin_lock_bh(lock);
  
#line 1704 
  return;
}


#line 1707  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_162(spinlock_t *lock)
{
  
#line 1711 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1713 
  spin_unlock_bh(lock);
  
#line 1714 
  return;
}


#line 1717  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_163(spinlock_t *lock)
{
  
#line 1721 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1723 
  spin_unlock_bh(lock);
  
#line 1724 
  return;
}


#line 1727  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_164(spinlock_t *lock)
{
  
#line 1731 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1733 
  spin_lock_bh(lock);
  
#line 1734 
  return;
}


#line 1737  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_165(spinlock_t *lock)
{
  
#line 1741 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1743 
  spin_unlock_bh(lock);
  
#line 1744 
  return;
}


#line 1747  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_166(spinlock_t *lock)
{
  
#line 1751 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1753 
  spin_lock_bh(lock);
  
#line 1754 
  return;
}


#line 1757  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_167(spinlock_t *lock)
{
  
#line 1761 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1763 
  spin_unlock_bh(lock);
  
#line 1764 
  return;
}


#line 1767  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_168(spinlock_t *lock)
{
  
#line 1771 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1773 
  spin_lock_bh(lock);
  
#line 1774 
  return;
}


#line 1777  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_169(spinlock_t *lock)
{
  
#line 1781 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1783 
  spin_unlock_bh(lock);
  
#line 1784 
  return;
}


#line 1787  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_170(spinlock_t *lock)
{
  
#line 1791 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1793 
  spin_lock_bh(lock);
  
#line 1794 
  return;
}


#line 1797  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_171(spinlock_t *lock)
{
  
#line 1801 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1803 
  spin_unlock_bh(lock);
  
#line 1804 
  return;
}


#line 1807  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_172(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 1810 
  int nondetermined = ldv_undef_int();
  
#line 1812 
  if (nondetermined != 0) {
    
#line 1815 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 1816 
    __retres = 0;
    
#line 1816 
    goto return_label;
  }
  else {
    
#line 1821 
    __retres = -4;
    
#line 1821 
    goto return_label;
  }
  return_label: 
#line 1812 
                return __retres;
}


#line 1826  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_173(struct mutex *ldv_func_arg1)
{
  
#line 1830 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 1831 
  return;
}


#line 1834  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_174(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 1837 
  int nondetermined = ldv_undef_int();
  
#line 1839 
  if (nondetermined != 0) {
    
#line 1842 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 1843 
    __retres = 0;
    
#line 1843 
    goto return_label;
  }
  else {
    
#line 1848 
    __retres = -4;
    
#line 1848 
    goto return_label;
  }
  return_label: 
#line 1839 
                return __retres;
}


#line 1853  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_175(struct mutex *ldv_func_arg1)
{
  
#line 1857 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 1858 
  return;
}


#line 1861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_176(spinlock_t *lock)
{
  
#line 1865 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1867 
  spin_lock_bh(lock);
  
#line 1868 
  return;
}


#line 1871  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_177(spinlock_t *lock)
{
  
#line 1875 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1877 
  spin_unlock_bh(lock);
  
#line 1878 
  return;
}


#line 1881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_178(spinlock_t *lock)
{
  
#line 1885 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1887 
  spin_lock_bh(lock);
  
#line 1888 
  return;
}


#line 1891  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_179(spinlock_t *lock)
{
  
#line 1895 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1897 
  spin_unlock_bh(lock);
  
#line 1898 
  return;
}


#line 1901  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_180(spinlock_t *lock)
{
  
#line 1905 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1907 
  spin_lock_bh(lock);
  
#line 1908 
  return;
}


#line 1911  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_181(spinlock_t *lock)
{
  
#line 1915 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1917 
  spin_unlock_bh(lock);
  
#line 1918 
  return;
}


#line 1921  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_182(spinlock_t *lock)
{
  
#line 1925 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1927 
  spin_lock_bh(lock);
  
#line 1928 
  return;
}


#line 1931  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_183(spinlock_t *lock)
{
  
#line 1935 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1937 
  spin_unlock_bh(lock);
  
#line 1938 
  return;
}


#line 1941  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_184(spinlock_t *lock)
{
  
#line 1945 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1947 
  spin_lock_bh(lock);
  
#line 1948 
  return;
}


#line 1951  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_185(spinlock_t *lock)
{
  
#line 1955 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1957 
  spin_unlock_bh(lock);
  
#line 1958 
  return;
}


#line 1961  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_186(spinlock_t *lock)
{
  
#line 1965 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 1967 
  spin_lock_bh(lock);
  
#line 1968 
  return;
}


#line 1971  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_187(spinlock_t *lock)
{
  
#line 1975 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 1977 
  spin_unlock_bh(lock);
  
#line 1978 
  return;
}


#line 1981  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_188(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 1984 
  int nondetermined = ldv_undef_int();
  
#line 1986 
  if (nondetermined != 0) {
    
#line 1989 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 1990 
    __retres = 0;
    
#line 1990 
    goto return_label;
  }
  else {
    
#line 1995 
    __retres = -4;
    
#line 1995 
    goto return_label;
  }
  return_label: 
#line 1986 
                return __retres;
}


#line 2000  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1)
{
  
#line 2004 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 2005 
  return;
}


#line 2008  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_190(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 2011 
  int nondetermined = ldv_undef_int();
  
#line 2013 
  if (nondetermined != 0) {
    
#line 2016 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 2017 
    __retres = 0;
    
#line 2017 
    goto return_label;
  }
  else {
    
#line 2022 
    __retres = -4;
    
#line 2022 
    goto return_label;
  }
  return_label: 
#line 2013 
                return __retres;
}


#line 2027  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_191(struct mutex *ldv_func_arg1)
{
  
#line 2031 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 2032 
  return;
}


#line 2035  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_192(spinlock_t *lock)
{
  
#line 2039 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 2041 
  spin_lock_bh(lock);
  
#line 2042 
  return;
}


#line 2045  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_193(spinlock_t *lock)
{
  
#line 2049 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 2051 
  spin_unlock_bh(lock);
  
#line 2052 
  return;
}


#line 2055  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_194(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 2058 
  int nondetermined = ldv_undef_int();
  
#line 2060 
  if (nondetermined != 0) {
    
#line 2063 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 2064 
    __retres = 0;
    
#line 2064 
    goto return_label;
  }
  else {
    
#line 2069 
    __retres = -4;
    
#line 2069 
    goto return_label;
  }
  return_label: 
#line 2060 
                return __retres;
}


#line 2074  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_195(struct mutex *ldv_func_arg1)
{
  
#line 2078 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 2079 
  return;
}


#line 2082  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_196(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 2085 
  int nondetermined = ldv_undef_int();
  
#line 2087 
  if (nondetermined != 0) {
    
#line 2090 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 2091 
    __retres = 0;
    
#line 2091 
    goto return_label;
  }
  else {
    
#line 2096 
    __retres = -4;
    
#line 2096 
    goto return_label;
  }
  return_label: 
#line 2087 
                return __retres;
}


#line 2101  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_197(struct mutex *ldv_func_arg1)
{
  
#line 2105 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 2106 
  return;
}


#line 2109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_198(spinlock_t *lock)
{
  
#line 2113 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 2115 
  spin_lock_bh(lock);
  
#line 2116 
  return;
}


#line 2119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_199(spinlock_t *lock)
{
  
#line 2123 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 2125 
  spin_unlock_bh(lock);
  
#line 2126 
  return;
}


#line 2129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_200(spinlock_t *lock)
{
  
#line 2133 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 2135 
  spin_lock_bh(lock);
  
#line 2136 
  return;
}


#line 2139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_201(spinlock_t *lock)
{
  
#line 2143 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 2145 
  spin_unlock_bh(lock);
  
#line 2146 
  return;
}


#line 2149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_202(spinlock_t *lock)
{
  
#line 2153 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 2155 
  spin_lock_bh(lock);
  
#line 2156 
  return;
}


#line 2159  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_203(spinlock_t *lock)
{
  
#line 2163 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 2165 
  spin_unlock_bh(lock);
  
#line 2166 
  return;
}


#line 2169  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_204(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 2172 
  int nondetermined = ldv_undef_int();
  
#line 2174 
  if (nondetermined != 0) {
    
#line 2177 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 2178 
    __retres = 0;
    
#line 2178 
    goto return_label;
  }
  else {
    
#line 2183 
    __retres = -4;
    
#line 2183 
    goto return_label;
  }
  return_label: 
#line 2174 
                return __retres;
}


#line 2188  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_205(struct mutex *ldv_func_arg1)
{
  
#line 2192 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 2193 
  return;
}


#line 2196  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static int ldv_mutex_lock_interruptible_206(struct mutex *ldv_func_arg1)
{
  int __retres;
  
#line 2199 
  int nondetermined = ldv_undef_int();
  
#line 2201 
  if (nondetermined != 0) {
    
#line 2204 
    ldv_mutex_model_lock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
    
#line 2205 
    __retres = 0;
    
#line 2205 
    goto return_label;
  }
  else {
    
#line 2210 
    __retres = -4;
    
#line 2210 
    goto return_label;
  }
  return_label: 
#line 2201 
                return __retres;
}


#line 2215  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_mutex_unlock_207(struct mutex *ldv_func_arg1)
{
  
#line 2219 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mbox_lock_of_be_adapter");
  
#line 2220 
  return;
}


#line 2223  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_208(spinlock_t *lock)
{
  
#line 2227 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 2229 
  spin_lock_bh(lock);
  
#line 2230 
  return;
}


#line 2233  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_209(spinlock_t *lock)
{
  
#line 2237 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 2239 
  spin_unlock_bh(lock);
  
#line 2240 
  return;
}


#line 2243  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_lock_bh_210(spinlock_t *lock)
{
  
#line 2247 
  ldv_spin_model_lock((char *)"mcc_lock_of_be_adapter");
  
#line 2249 
  spin_lock_bh(lock);
  
#line 2250 
  return;
}


#line 2253  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_cmds.c.aux"
static void ldv_spin_unlock_bh_211(spinlock_t *lock)
{
  
#line 2257 
  ldv_spin_model_unlock((char *)"mcc_lock_of_be_adapter");
  
#line 2259 
  spin_unlock_bh(lock);
  
#line 2260 
  return;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  unsigned long tmp_0;
  
#line 80 
  if (0 != 0) 
#line 80 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)((((((((((unsigned long long)(w >> 32) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 32) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 40) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 40) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 48) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 48) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 56) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 56) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 128ULL) != 0ULL))))); else 
                                                                    
#line 80 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  
#line 80 
  return tmp_0;
}


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 405 
int snprintf(char *, size_t, char const * , ...);


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int __bitmap_weight(unsigned long const *, unsigned int);


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  int tmp_0;
  
#line 300 
  if (0 != 0 && nbits <= 64U) {
    unsigned long tmp;
    
#line 301 
    tmp = hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
    
#line 301 
    __retres = (int)tmp;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 302 
  tmp_0 = __bitmap_weight(src,nbits);
  
#line 302 
  __retres = tmp_0;
  return_label: 
#line 302 
                return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
extern int nr_cpu_ids;


#line 89 
extern struct cpumask const * const cpu_online_mask;


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask const *srcp)
{
  unsigned int __retres;
  int tmp;
  
#line 476 
  tmp = bitmap_weight((unsigned long const *)(& srcp->bits),(unsigned int)nr_cpu_ids);
  
#line 476 
  __retres = (unsigned int)tmp;
  
#line 476 
  return __retres;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync const *syncp)
{
  unsigned int __retres;
  
#line 131 
  __retres = 0U;
  
#line 131 
  return __retres;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync const *syncp, unsigned int start)
{
  bool __retres;
  
#line 144 
  __retres = (_Bool)0;
  
#line 144 
  return __retres;
}


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 618  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static u16 be_max_qs(struct be_adapter *adapter)
{
  u16 __retres;
  int tmp_0;
  int tmp_2;
  int tmp_5;
  {
    int tmp;
    
#line 621 
    u16 __max1 = adapter->res.max_rss_qs;
    
#line 621 
    u16 __max2 = (unsigned short)1U;
    
#line 621 
    if ((int)__max1 > (int)__max2) 
#line 621 
                                   tmp = (int)__max1; else 
#line 621 
                                                           tmp = (int)__max2;
    
#line 621 
    tmp_0 = tmp;
  }
  
#line 621 
  u16 num = (unsigned short)tmp_0;
  {
    int tmp_1;
    
#line 623 
    u16 _min1 = num;
    
#line 623 
    u16 _min2 = adapter->res.max_evt_qs;
    
#line 623 
    if ((int)_min1 < (int)_min2) 
#line 623 
                                 tmp_1 = (int)_min1; else 
#line 623 
                                                          tmp_1 = (int)_min2;
    
#line 623 
    tmp_2 = tmp_1;
  }
  
#line 623 
  num = (unsigned short)tmp_2;
  {
    unsigned int tmp_3;
    int tmp_4;
    
#line 624 
    u16 __min1 = num;
    
#line 624 
    tmp_3 = cpumask_weight(cpu_online_mask);
    
#line 624 
    u16 __min2 = (unsigned short)tmp_3;
    
#line 624 
    if ((int)__min1 < (int)__min2) 
#line 624 
                                   tmp_4 = (int)__min1; else 
#line 624 
                                                             tmp_4 = (int)__min2;
    
#line 624 
    tmp_5 = tmp_4;
  }
  
#line 624 
  __retres = (unsigned short)tmp_5;
  
#line 624 
  return __retres;
}


#line 650 
struct ethtool_ops const be_ethtool_ops;


#line 818  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static bool be_multi_rxq(struct be_adapter const *adapter)
{
  bool __retres;
  
#line 820 
  __retres = (_Bool)((unsigned int)adapter->num_rx_qs > 1U);
  
#line 820 
  return __retres;
}


#line 827 
int be_load_fw(struct be_adapter *adapter, u8 *fw_file);


#line 829 
bool be_pause_supported(struct be_adapter *adapter);


#line 831 
int be_update_queues(struct be_adapter *adapter);


#line 833 
void be_eqd_update(struct be_adapter *adapter, bool force_update);


#line 2215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
__inline static bool check_privilege(struct be_adapter *adapter, u32 flags)
{
  bool __retres;
  
#line 2217 
  __retres = (_Bool)((adapter->cmd_privileges & flags) != 0U);
  
#line 2217 
  return __retres;
}


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static struct be_ethtool_stat const et_stats[37U] = {{.desc = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 36}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'m', (char)'e', (char)'n', (char)'t', (char)'_', (char)'s', (char)'y', (char)'m', (char)'b', (char)'o', (char)'l', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 40}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 44}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 52}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'i', (char)'n', (char)'_', (char)'r', (char)'a', (char)'n', (char)'g', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 56}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'r', (char)'a', (char)'n', (char)'g', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 60}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'\000'}, .type = 2, .size = 4, .offset = 64}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'d', (char)'d', (char)'r', (char)'e', (char)'s', (char)'s', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'e', (char)'d', (char)'\000'}, .type = 2, .size = 4, .offset = 68}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'s', (char)'m', (char)'a', (char)'l', (char)'l', (char)'\000'}, .type = 2, .size = 4, .offset = 72}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t', (char)'\000'}, .type = 2, .size = 4, .offset = 76}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'h', (char)'e', (char)'a', (char)'d', (char)'e', (char)'r', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'s', (char)'m', (char)'a', (char)'l', (char)'l', (char)'\000'}, .type = 2, .size = 4, .offset = 80}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'\000'}, .type = 2, .size = 4, .offset = 84}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'r', (char)'u', (char)'n', (char)'t', (char)'\000'}, .type = 2, .size = 4, .offset = 88}, {.desc = {(char)'r', (char)'x', (char)'p', (char)'p', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'\000'}, .type = 2, .size = 4, .offset = 116}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'i', (char)'n', (char)'p', (char)'u', (char)'t', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'\000'}, .type = 2, .size = 4, .offset = 120}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 92}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 96}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'d', (char)'p', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 100}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 104}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 112}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'r', (char)'i', (char)'o', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 48}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'r', (char)'i', (char)'o', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 108}, {.desc = {(char)'p', (char)'m', (char)'e', (char)'m', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'\000'}, .type = 2, .size = 4, .offset = 124}, {.desc = {(char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'e', (char)'v', (char)'e', (char)'n', (char)'t', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 128}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'p', (char)'b', (char)'u', (char)'f', (char)'\000'}, .type = 2, .size = 4, .offset = 8}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'e', (char)'r', (char)'x', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'r', (char)'\000'}, .type = 2, .size = 4, .offset = 16}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'t', (char)'p', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'r', (char)'\000'}, .type = 2, .size = 4, .offset = 20}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'m', (char)'a', (char)'n', (char)'y', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 24}, {.desc = {(char)'f', (char)'o', (char)'r', (char)'w', (char)'a', (char)'r', (char)'d', (char)'e', (char)'d', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 28}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'m', (char)'t', (char)'u', (char)'\000'}, .type = 2, .size = 4, .offset = 32}, {.desc = {(char)'d', (char)'m', (char)'a', (char)'_', (char)'m', (char)'a', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 4}, {.desc = {(char)'e', (char)'t', (char)'h', (char)'_', (char)'r', (char)'e', (char)'d', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 0}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'l', (char)'s', (char)'d', (char)'\000'}, .type = 2, .size = 4, .offset = 132}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'m', (char)'s', (char)'d', (char)'\000'}, .type = 2, .size = 4, .offset = 136}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, .type = 2, .size = 4, .offset = 140}, {.desc = {(char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'p', (char)'a', (char)'y', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'l', (char)'e', (char)'n', (char)'\000'}, .type = 2, .size = 4, .offset = 144}, {.desc = {(char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'c', (char)'r', (char)'c', (char)'\000'}, .type = 2, .size = 4, .offset = 148}};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static struct be_ethtool_stat const et_rx_stats[8U] = {{.desc = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .type = 1, .size = 8, .offset = 0}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .type = 1, .size = 8, .offset = 8}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'\000'}, .type = 1, .size = 4, .offset = 28}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .type = 1, .size = 4, .offset = 36}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .type = 1, .size = 4, .offset = 32}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'o', (char)'s', (char)'t', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'\000'}, .type = 1, .size = 4, .offset = 24}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'s', (char)'k', (char)'b', (char)'s', (char)'\000'}, .type = 1, .size = 4, .offset = 16}, {.desc = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'_', (char)'n', (char)'o', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'s', (char)'\000'}, .type = 1, .size = 4, .offset = 20}};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static struct be_ethtool_stat const et_tx_stats[12U] = {{.desc = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'\000'}, .type = 0, .size = 8, .offset = 24}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'d', (char)'r', (char)'_', (char)'p', (char)'a', (char)'r', (char)'s', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .type = 0, .size = 4, .offset = 48}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .type = 0, .size = 4, .offset = 52}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'p', (char)'o', (char)'o', (char)'f', (char)'_', (char)'c', (char)'h', (char)'e', (char)'c', (char)'k', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .type = 0, .size = 4, .offset = 60}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'s', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .type = 0, .size = 4, .offset = 56}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'q', (char)'i', (char)'n', (char)'q', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .type = 0, .size = 4, .offset = 64}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'n', (char)'a', (char)'l', (char)'_', (char)'p', (char)'a', (char)'r', (char)'i', (char)'t', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}, .type = 0, .size = 4, .offset = 68}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .type = 0, .size = 8, .offset = 0}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .type = 0, .size = 8, .offset = 8}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'r', (char)'e', (char)'q', (char)'s', (char)'\000'}, .type = 0, .size = 8, .offset = 16}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'t', (char)'o', (char)'p', (char)'s', (char)'\000'}, .type = 0, .size = 4, .offset = 40}, {.desc = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'v', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)'\000'}, .type = 0, .size = 4, .offset = 44}};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static char const et_self_tests[5U][32U] = {{(char)'M', (char)'A', (char)'C', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)'\000'}, {(char)'P', (char)'H', (char)'Y', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)'\000'}, {(char)'E', (char)'x', (char)'t', (char)'e', (char)'r', (char)'n', (char)'a', (char)'l', (char)' ', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)'\000'}, {(char)'D', (char)'D', (char)'R', (char)' ', (char)'D', (char)'M', (char)'A', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)'\000'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)'\000'}};

#line 219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  int tmp_0;
  char const *tmp_1;
  
#line 222 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 224 
  strlcpy((char *)(& drvinfo->driver),"be2net",32UL);
  
#line 225 
  strlcpy((char *)(& drvinfo->version),"10.6.0.2",32UL);
  
#line 226 
  tmp_0 = memcmp((void const *)(& adapter->fw_ver),(void const *)(& adapter->fw_on_flash),32UL);
  
#line 226 
  if (tmp_0 == 0) 
#line 227 
                  strlcpy((char *)(& drvinfo->fw_version),(char const *)(& adapter->fw_ver),32UL); else 
                                                                    
#line 230 
                                                                    snprintf((char *)(& drvinfo->fw_version),32UL,"%s [%s]",(char *)(& adapter->fw_ver),(char *)(& adapter->fw_on_flash));
  
#line 233 
  tmp_1 = pci_name((struct pci_dev const *)adapter->pdev);
  
#line 233 
  ;
  
#line 233 
  strlcpy((char *)(& drvinfo->bus_info),tmp_1,32UL);
  
#line 235 
  drvinfo->testinfo_len = 0U;
  
#line 236 
  drvinfo->regdump_len = 0U;
  
#line 237 
  drvinfo->eedump_len = 0U;
  
#line 238 
  return;
}


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 lancer_cmd_get_file_len(struct be_adapter *adapter, u8 *file_name)
{
  u32 eof;
  u8 addn_status;
  struct be_dma_mem data_len_cmd;
  int status;
  
#line 242 
  u32 data_read = 0U;
  
#line 247 
  memset((void *)(& data_len_cmd),0,24UL);
  
#line 249 
  status = lancer_cmd_read_object(adapter,& data_len_cmd,0U,0U,(char const *)file_name,& data_read,& eof,& addn_status);
  
#line 253 
  return data_read;
}


#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int lancer_cmd_read_file(struct be_adapter *adapter, u8 *file_name, u32 buf_len, void *buf)
{
  int __retres;
  struct be_dma_mem read_cmd;
  u32 chunk_size;
  u8 addn_status;
  u32 tmp_0;
  
#line 260 
  u32 read_len = 0U;
  
#line 260 
  u32 total_read_len = 0U;
  
#line 261 
  u32 eof = 0U;
  
#line 263 
  int status = 0;
  
#line 265 
  read_cmd.size = 32768U;
  
#line 266 
  read_cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)read_cmd.size,& read_cmd.dma,32U);
  
#line 269 
  if (read_cmd.va == (void *)0) {
    
#line 270 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Memory allocation failure while reading dump\n");
    
#line 272 
    __retres = -12;
    
#line 272 
    goto return_label;
  }
  else ;
  
#line 275 
  goto ldv_56926;
  ldv_56925: 
#line 276 
  ;
  {
    u32 tmp;
    
#line 276 
    u32 __min1 = buf_len - total_read_len;
    
#line 276 
    u32 __min2 = 32768U;
    
#line 276 
    if (__min1 < __min2) 
#line 276 
                         tmp = __min1; else 
#line 276 
                                            tmp = __min2;
    
#line 276 
    tmp_0 = tmp;
  }
  
#line 276 
  chunk_size = tmp_0;
  
#line 278 
  chunk_size = (chunk_size + 3U) & 4294967292U;
  
#line 279 
  status = lancer_cmd_read_object(adapter,& read_cmd,chunk_size,total_read_len,(char const *)file_name,& read_len,& eof,& addn_status);
  
#line 282 
  if (status == 0) {
    
#line 283 
    memcpy(buf + total_read_len,(void const *)read_cmd.va,(unsigned long)read_len);
    
#line 284 
    total_read_len += read_len;
    
#line 285 
    eof &= 2147483648U;
  }
  else {
    
#line 287 
    status = -5;
    
#line 288 
    goto ldv_56924;
  }
  ldv_56926: 
#line 290 
  ;
  
#line 275 
  if (total_read_len < buf_len && eof == 0U) 
#line 277 
                                             goto ldv_56925; else 
#line 280 
                                                                  goto ldv_56924;
  ldv_56924: 
#line 281 
  ;
  
#line 291 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)read_cmd.size,read_cmd.va,read_cmd.dma,(struct dma_attrs *)0);
  
#line 294 
  __retres = status;
  return_label: 
#line 294 
                return __retres;
}


#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_reg_len(struct net_device *netdev)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 299 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 300 
  u32 log_size = 0U;
  
#line 302 
  tmp_0 = check_privilege(adapter,1792U);
  
#line 302 
  if (tmp_0) 
#line 302 
             tmp_1 = 0; else 
#line 302 
                             tmp_1 = 1;
  
#line 302 
  if (tmp_1) {
    
#line 303 
    __retres = 0;
    
#line 303 
    goto return_label;
  }
  else ;
  
#line 305 
  if ((unsigned int)adapter->virtfn == 0U) 
    
#line 306 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
      
#line 307 
      log_size = lancer_cmd_get_file_len(adapter,(u8 *)"/dbg/dump.bin"); else 
                                                                    
#line 310 
                                                                    be_cmd_get_reg_len(adapter,& log_size);
  else ;
  
#line 312 
  __retres = (int)log_size;
  return_label: 
#line 312 
                return __retres;
}


#line 316  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *buf)
{
  
#line 318 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 320 
  if ((unsigned int)adapter->virtfn == 0U) {
    
#line 321 
    memset(buf,0,(unsigned long)regs->len);
    
#line 322 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
      
#line 323 
      lancer_cmd_read_file(adapter,(u8 *)"/dbg/dump.bin",regs->len,buf); else 
                                                                    
#line 326 
                                                                    be_cmd_get_regs(adapter,regs->len,buf);
  }
  else ;
  
#line 328 
  return;
}


#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *et)
{
  int __retres;
  
#line 333 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 334 
  struct be_aic_obj *aic = & adapter->aic_obj[0];
  
#line 336 
  et->rx_coalesce_usecs = aic->prev_eqd;
  
#line 337 
  et->rx_coalesce_usecs_high = aic->max_eqd;
  
#line 338 
  et->rx_coalesce_usecs_low = aic->min_eqd;
  
#line 340 
  et->tx_coalesce_usecs = aic->prev_eqd;
  
#line 341 
  et->tx_coalesce_usecs_high = aic->max_eqd;
  
#line 342 
  et->tx_coalesce_usecs_low = aic->min_eqd;
  
#line 344 
  et->use_adaptive_rx_coalesce = (unsigned int)aic->enable;
  
#line 345 
  et->use_adaptive_tx_coalesce = (unsigned int)aic->enable;
  
#line 347 
  __retres = 0;
  
#line 347 
  return __retres;
}


#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *et)
{
  int __retres;
  struct be_eq_obj *eqo;
  int i;
  unsigned int tmp_1;
  unsigned int tmp_3;
  unsigned int tmp_5;
  u32 tmp_7;
  
#line 356 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 357 
  struct be_aic_obj *aic = & adapter->aic_obj[0];
  
#line 361 
  i = 0;
  
#line 361 
  eqo = & adapter->eq_obj[i];
  
#line 361 
  goto ldv_56965;
  ldv_56964: 
#line 362 
  ;
  
#line 362 
  aic->enable = (_Bool)(et->use_adaptive_rx_coalesce != 0U);
  {
    __u32 tmp_0;
    
#line 363 
    __u32 _min1 = et->rx_coalesce_usecs_high;
    
#line 363 
    unsigned int _min2 = 128U;
    
#line 363 
    if (_min1 < _min2) 
#line 363 
                       tmp_0 = _min1; else 
#line 363 
                                           tmp_0 = _min2;
    
#line 363 
    tmp_1 = tmp_0;
  }
  
#line 363 
  aic->max_eqd = tmp_1;
  {
    __u32 tmp_2;
    
#line 364 
    __u32 _min1_0 = et->rx_coalesce_usecs_low;
    
#line 364 
    u32 _min2_0 = aic->max_eqd;
    
#line 364 
    if (_min1_0 < _min2_0) 
#line 364 
                           tmp_2 = _min1_0; else 
#line 364 
                                                 tmp_2 = _min2_0;
    
#line 364 
    tmp_3 = tmp_2;
  }
  
#line 364 
  aic->min_eqd = tmp_3;
  {
    __u32 tmp_4;
    
#line 365 
    __u32 _min1_1 = et->rx_coalesce_usecs;
    
#line 365 
    u32 _min2_1 = aic->max_eqd;
    
#line 365 
    if (_min1_1 < _min2_1) 
#line 365 
                           tmp_4 = _min1_1; else 
#line 365 
                                                 tmp_4 = _min2_1;
    
#line 365 
    tmp_5 = tmp_4;
  }
  
#line 365 
  aic->et_eqd = tmp_5;
  {
    u32 tmp_6;
    
#line 366 
    u32 _max1 = aic->et_eqd;
    
#line 366 
    u32 _max2 = aic->min_eqd;
    
#line 366 
    if (_max1 > _max2) 
#line 366 
                       tmp_6 = _max1; else 
#line 366 
                                           tmp_6 = _max2;
    
#line 366 
    tmp_7 = tmp_6;
  }
  
#line 366 
  aic->et_eqd = tmp_7;
  
#line 367 
  aic += 1;
  
#line 361 
  i += 1;
  
#line 361 
  eqo += 1;
  ldv_56965: 
#line 362 
  ;
  
#line 361 
  if ((int)adapter->num_evt_qs > i) 
#line 363 
                                    goto ldv_56964; else 
#line 366 
                                                         goto ldv_56966;
  ldv_56966: 
#line 367 
  ;
  
#line 375 
  if (et->use_adaptive_rx_coalesce == 0U && ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U)) 
    
#line 376 
    be_eqd_update(adapter,(_Bool)1); else ;
  
#line 378 
  __retres = 0;
  
#line 378 
  return __retres;
}


#line 381  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, uint64_t *data)
{
  struct be_rx_obj *rxo;
  struct be_tx_obj *txo;
  void *p;
  unsigned int i;
  unsigned int j;
  unsigned int start;
  
#line 384 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 388 
  unsigned int base = 0U;
  
#line 390 
  i = 0U;
  
#line 390 
  goto ldv_56984;
  ldv_56983: 
#line 391 
  ;
  
#line 391 
  p = (void *)(& adapter->drv_stats) + et_stats[i].offset;
  
#line 392 
  *(data + i) = (unsigned long long)*((u32 *)p);
  
#line 390 
  i += 1U;
  ldv_56984: 
#line 391 
  ;
  
#line 390 
  if (i <= 36U) 
#line 392 
                goto ldv_56983; else 
#line 395 
                                     goto ldv_56985;
  ldv_56985: 
#line 396 
  ;
  
#line 394 
  base += 37U;
  
#line 396 
  j = 0U;
  
#line 396 
  rxo = & adapter->rx_obj[j];
  
#line 396 
  goto ldv_57002;
  ldv_57001: 
#line 397 
  ;
  {
    bool tmp_0;
    
#line 397 
    struct be_rx_stats *stats_0 = & rxo->stats;
    ldv_56990: 
#line 406 
    ;
    
#line 400 
    start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& stats_0->sync));
    
#line 401 
    *(data + base) = stats_0->rx_bytes;
    
#line 402 
    *(data + (base + 1U)) = stats_0->rx_pkts;
    
#line 403 
    tmp_0 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& stats_0->sync),start);
    
#line 403 
    if ((int)tmp_0 != 0) 
#line 405 
                         goto ldv_56990; else 
#line 408 
                                              goto ldv_56991;
    ldv_56991: 
#line 409 
    ;
    
#line 405 
    i = 2U;
    
#line 405 
    goto ldv_56996;
    ldv_56995: 
#line 406 
    ;
    
#line 406 
    p = (void *)stats_0 + et_rx_stats[i].offset;
    
#line 407 
    *(data + (base + i)) = (unsigned long long)*((u32 *)p);
    
#line 405 
    i += 1U;
    ldv_56996: 
#line 406 
    ;
    
#line 405 
    if (i <= 7U) 
#line 407 
                 goto ldv_56995; else 
#line 410 
                                      goto ldv_56997;
    ldv_56997: 
#line 411 
    ;
    
#line 409 
    base += 8U;
  }
  
#line 396 
  j += 1U;
  
#line 396 
  rxo += 1;
  ldv_57002: 
#line 397 
  ;
  
#line 396 
  if ((unsigned int)adapter->num_rx_qs > j) 
#line 398 
                                            goto ldv_57001; else 
#line 401 
                                                                 goto ldv_57003;
  ldv_57003: 
#line 402 
  ;
  
#line 412 
  j = 0U;
  
#line 412 
  txo = & adapter->tx_obj[j];
  
#line 412 
  goto ldv_57019;
  ldv_57018: 
#line 413 
  ;
  {
    bool tmp_1;
    bool tmp_2;
    
#line 413 
    struct be_tx_stats *stats_1 = & txo->stats;
    ldv_57005: 
#line 418 
    ;
    
#line 416 
    start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& stats_1->sync_compl));
    
#line 417 
    *(data + base) = stats_1->tx_compl;
    
#line 418 
    tmp_1 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& stats_1->sync_compl),start);
    
#line 418 
    if ((int)tmp_1 != 0) 
#line 420 
                         goto ldv_57005; else 
#line 423 
                                              goto ldv_57006;
    ldv_57006: 
#line 424 
    ;
    ldv_57013: 
#line 425 
    ;
    
#line 421 
    start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& stats_1->sync));
    
#line 422 
    i = 1U;
    
#line 422 
    goto ldv_57011;
    ldv_57010: 
#line 423 
    ;
    
#line 423 
    p = (void *)stats_1 + et_tx_stats[i].offset;
    
#line 424 
    if (et_tx_stats[i].size == 8) 
#line 424 
                                  *(data + (base + i)) = *((u64 *)p); else 
                                                                    
#line 424 
                                                                    *(data + (base + i)) = (unsigned long long)*((u32 *)p);
    
#line 422 
    i += 1U;
    ldv_57011: 
#line 423 
    ;
    
#line 422 
    if (i <= 11U) 
#line 424 
                  goto ldv_57010; else 
#line 427 
                                       goto ldv_57012;
    ldv_57012: 
#line 428 
    ;
    
#line 428 
    tmp_2 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& stats_1->sync),start);
    
#line 428 
    if ((int)tmp_2 != 0) 
#line 430 
                         goto ldv_57013; else 
#line 433 
                                              goto ldv_57014;
    ldv_57014: 
#line 434 
    ;
    
#line 429 
    base += 12U;
  }
  
#line 412 
  j += 1U;
  
#line 412 
  txo += 1;
  ldv_57019: 
#line 413 
  ;
  
#line 412 
  if ((unsigned int)adapter->num_tx_qs > j) 
#line 414 
                                            goto ldv_57018; else 
#line 417 
                                                                 goto ldv_57020;
  ldv_57020: 
#line 418 
  ;
  
#line 419 
  return;
}


#line 433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_stat_strings(struct net_device *netdev, uint32_t stringset, uint8_t *data)
{
  int i;
  int j;
  
#line 436 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 439 
  switch (stringset) {
    case (uint32_t)1: 
#line 440 
    ;
    
#line 441 
    i = 0;
    
#line 441 
    goto ldv_57034;
    ldv_57033: 
#line 442 
    ;
    
#line 442 
    memcpy((void *)data,(void const *)(& et_stats[i].desc),32UL);
    
#line 443 
    data += 32U;
    
#line 441 
    i += 1;
    ldv_57034: 
#line 442 
    ;
    
#line 441 
    if ((unsigned int)i <= 36U) 
#line 443 
                                goto ldv_57033; else 
#line 446 
                                                     goto ldv_57035;
    ldv_57035: 
#line 447 
    ;
    
#line 445 
    i = 0;
    
#line 445 
    goto ldv_57043;
    ldv_57042: 
#line 446 
    ;
    
#line 446 
    j = 0;
    
#line 446 
    goto ldv_57040;
    ldv_57039: 
#line 447 
    ;
    
#line 447 
    sprintf((char *)data,"rxq%d: %s",i,(char const *)(& et_rx_stats[j].desc));
    
#line 449 
    data += 32U;
    
#line 446 
    j += 1;
    ldv_57040: 
#line 447 
    ;
    
#line 446 
    if ((unsigned int)j <= 7U) 
#line 448 
                               goto ldv_57039; else 
#line 451 
                                                    goto ldv_57041;
    ldv_57041: 
#line 452 
    ;
    
#line 445 
    i += 1;
    ldv_57043: 
#line 446 
    ;
    
#line 445 
    if ((int)adapter->num_rx_qs > i) 
#line 447 
                                     goto ldv_57042; else 
#line 450 
                                                          goto ldv_57044;
    ldv_57044: 
#line 451 
    ;
    
#line 452 
    i = 0;
    
#line 452 
    goto ldv_57052;
    ldv_57051: 
#line 453 
    ;
    
#line 453 
    j = 0;
    
#line 453 
    goto ldv_57049;
    ldv_57048: 
#line 454 
    ;
    
#line 454 
    sprintf((char *)data,"txq%d: %s",i,(char const *)(& et_tx_stats[j].desc));
    
#line 456 
    data += 32U;
    
#line 453 
    j += 1;
    ldv_57049: 
#line 454 
    ;
    
#line 453 
    if ((unsigned int)j <= 11U) 
#line 455 
                                goto ldv_57048; else 
#line 458 
                                                     goto ldv_57050;
    ldv_57050: 
#line 459 
    ;
    
#line 452 
    i += 1;
    ldv_57052: 
#line 453 
    ;
    
#line 452 
    if ((int)adapter->num_tx_qs > i) 
#line 454 
                                     goto ldv_57051; else 
#line 457 
                                                          goto ldv_57053;
    ldv_57053: 
#line 458 
    ;
    
#line 459 
    goto ldv_57054;
    case (uint32_t)0: 
#line 460 
    ;
    
#line 461 
    i = 0;
    
#line 461 
    goto ldv_57060;
    ldv_57059: 
#line 462 
    ;
    
#line 462 
    memcpy((void *)data,(void const *)(& et_self_tests[i]),32UL);
    
#line 463 
    data += 32U;
    
#line 461 
    i += 1;
    ldv_57060: 
#line 462 
    ;
    
#line 461 
    if ((unsigned int)i <= 4U) 
#line 463 
                               goto ldv_57059; else 
#line 466 
                                                    goto ldv_57061;
    ldv_57061: 
#line 467 
    ;
    
#line 465 
    goto ldv_57054;
  }
  ldv_57054: 
#line 467 
  ;
  
#line 468 
  return;
}


#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_sset_count(struct net_device *netdev, int stringset)
{
  int __retres;
  
#line 471 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 473 
  switch (stringset) {
    case 0: 
#line 474 
    ;
    
#line 475 
    __retres = 5;
    
#line 475 
    goto return_label;
    case 1: 
#line 476 
    ;
    
#line 478 
    __retres = (int)(((unsigned int)adapter->num_rx_qs * 8U + (unsigned int)adapter->num_tx_qs * 12U) + 37U);
    
#line 478 
    goto return_label;
    default: 
#line 480 
    ;
    
#line 481 
    __retres = -22;
    
#line 481 
    goto return_label;
  }
  return_label: 
#line 473 
                return __retres;
}


#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 be_get_port_type(struct be_adapter *adapter)
{
  u32 port;
  
#line 489 
  switch ((int)adapter->phy.interface_type) {
    case 7: 
#line 490 
    ;
    case 8: 
#line 491 
    ;
    case 9: 
#line 492 
    ;
    
#line 493 
    port = 0U;
    
#line 494 
    goto ldv_57089;
    case 3: 
#line 495 
    ;
    
#line 496 
    if (((int)adapter->phy.cable_type & 4) != 0) 
#line 497 
                                                 port = 5U; else 
#line 499 
                                                                 port = 3U;
    
#line 500 
    goto ldv_57089;
    case 10: 
#line 501 
    ;
    
#line 502 
    if (((int)adapter->phy.cable_type & 8) != 0) 
#line 503 
                                                 port = 5U; else 
#line 505 
                                                                 port = 3U;
    
#line 506 
    goto ldv_57089;
    case 1: 
#line 507 
    ;
    case 2: 
#line 508 
    ;
    
#line 509 
    port = 3U;
    
#line 510 
    goto ldv_57089;
    case 6: 
#line 511 
    ;
    
#line 512 
    port = 0U;
    
#line 513 
    goto ldv_57089;
    default: 
#line 514 
    ;
    
#line 515 
    port = 255U;
  }
  ldv_57089: 
#line 518 
  ;
  
#line 518 
  return port;
}


#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 convert_to_et_setting(struct be_adapter *adapter, u32 if_speeds)
{
  
#line 523 
  u32 val = 0U;
  
#line 525 
  switch ((int)adapter->phy.interface_type) {
    case 7: 
#line 526 
    ;
    case 8: 
#line 527 
    ;
    case 9: 
#line 528 
    ;
    
#line 529 
    val |= 128U;
    
#line 530 
    if ((if_speeds & 4U) != 0U) 
#line 531 
                                val |= 32U; else ;
    
#line 532 
    if ((if_speeds & 2U) != 0U) 
#line 533 
                                val |= 8U; else ;
    
#line 534 
    if ((if_speeds & 1U) != 0U) 
#line 535 
                                val |= 2U; else ;
    
#line 536 
    goto ldv_57104;
    case 5: 
#line 537 
    ;
    
#line 538 
    val |= 65536U;
    
#line 539 
    if ((if_speeds & 4U) != 0U) 
#line 540 
                                val |= 131072U; else ;
    
#line 541 
    if ((if_speeds & 8U) != 0U) 
#line 542 
                                val |= 262144U; else ;
    
#line 543 
    goto ldv_57104;
    case 12: 
#line 544 
    ;
    
#line 545 
    val |= 65536U;
    
#line 546 
    if ((if_speeds & 8U) != 0U) 
#line 547 
                                val |= 524288U; else ;
    
#line 548 
    if ((if_speeds & 16U) != 0U) 
#line 549 
                                 val |= 4194304U; else ;
    
#line 550 
    goto ldv_57104;
    case 4: 
#line 551 
    ;
    
#line 552 
    val |= 589824U;
    
#line 554 
    goto ldv_57104;
    case 11: 
#line 555 
    ;
    
#line 556 
    val |= 65536U;
    
#line 557 
    if ((if_speeds & 8U) != 0U) 
#line 558 
                                val |= 524288U; else ;
    
#line 559 
    if ((if_speeds & 32U) != 0U) 
#line 560 
                                 val |= 8388608U; else ;
    
#line 561 
    goto ldv_57104;
    case 10: 
#line 562 
    ;
    
#line 563 
    if ((if_speeds & 32U) != 0U) {
      
#line 564 
      switch ((int)adapter->phy.cable_type) {
        case 8: 
#line 565 
        ;
        
#line 566 
        val |= 16777216U;
        
#line 567 
        goto ldv_57111;
        case 2: 
#line 568 
        ;
        
#line 569 
        val |= 67108864U;
        
#line 570 
        goto ldv_57111;
        default: 
#line 571 
        ;
        
#line 572 
        val |= 33554432U;
        
#line 573 
        goto ldv_57111;
      }
      ldv_57111: 
#line 575 
      ;
    }
    else ;
    case 3: 
#line 576 
    ;
    case 1: 
#line 577 
    ;
    case 2: 
#line 578 
    ;
    
#line 579 
    val |= 1024U;
    
#line 580 
    if ((if_speeds & 8U) != 0U) 
#line 581 
                                val |= 4096U; else ;
    
#line 582 
    if ((if_speeds & 4U) != 0U) 
#line 583 
                                val |= 32U; else ;
    
#line 584 
    goto ldv_57104;
    case 6: 
#line 585 
    ;
    
#line 586 
    val |= 128U;
    
#line 587 
    if ((if_speeds & 8U) != 0U) 
#line 588 
                                val |= 4096U; else ;
    
#line 589 
    if ((if_speeds & 4U) != 0U) 
#line 590 
                                val |= 32U; else ;
    
#line 591 
    if ((if_speeds & 2U) != 0U) 
#line 592 
                                val |= 8U; else ;
    
#line 593 
    goto ldv_57104;
    default: 
#line 594 
    ;
    
#line 595 
    val |= 128U;
  }
  ldv_57104: 
#line 598 
  ;
  
#line 598 
  return val;
}


#line 601  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
bool be_pause_supported(struct be_adapter *adapter)
{
  bool __retres;
  
#line 605 
  __retres = (_Bool)(((unsigned int)adapter->phy.interface_type != 3U && (unsigned int)adapter->phy.interface_type != 1U) != 0);
  
#line 605 
  return __retres;
}


#line 608  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_settings(struct net_device *netdev, struct ethtool_cmd *ecmd)
{
  int __retres;
  u8 link_status;
  int status;
  u32 auto_speeds;
  u32 fixed_speeds;
  bool tmp_3;
  
#line 610 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 612 
  u16 link_speed = (unsigned short)0U;
  
#line 617 
  if (adapter->phy.link_speed < 0) {
    __u32 tmp_2;
    
#line 618 
    status = be_cmd_link_status_query(adapter,& link_speed,& link_status,0U);
    
#line 620 
    if (status == 0) 
#line 621 
                     be_link_status_update(adapter,(unsigned char)((int)link_status)); else ;
    
#line 622 
    ethtool_cmd_speed_set(ecmd,(unsigned int)link_speed);
    
#line 624 
    status = be_cmd_get_phy_info(adapter);
    
#line 625 
    if (status == 0) {
      u32 tmp_0;
      bool tmp_1;
      
#line 626 
      auto_speeds = (unsigned int)adapter->phy.auto_speeds_supported;
      
#line 627 
      fixed_speeds = (unsigned int)adapter->phy.fixed_speeds_supported;
      
#line 629 
      be_cmd_query_cable_type(adapter);
      
#line 631 
      ecmd->supported = convert_to_et_setting(adapter,auto_speeds | fixed_speeds);
      
#line 635 
      ecmd->advertising = convert_to_et_setting(adapter,auto_speeds);
      
#line 638 
      tmp_0 = be_get_port_type(adapter);
      
#line 638 
      ecmd->port = (unsigned char)tmp_0;
      
#line 640 
      if ((unsigned int)adapter->phy.auto_speeds_supported != 0U) {
        
#line 641 
        ecmd->supported |= 64U;
        
#line 642 
        ecmd->autoneg = (unsigned char)1U;
        
#line 643 
        ecmd->advertising |= 64U;
      }
      else ;
      
#line 646 
      ecmd->supported |= 8192U;
      
#line 647 
      tmp_1 = be_pause_supported(adapter);
      
#line 647 
      if ((int)tmp_1 != 0) 
#line 648 
                           ecmd->advertising |= 8192U; else ;
      
#line 650 
      switch ((int)adapter->phy.interface_type) {
        case 4: 
#line 651 
        ;
        case 5: 
#line 652 
        ;
        
#line 653 
        ecmd->transceiver = (unsigned char)0U;
        
#line 654 
        goto ldv_57134;
        default: 
#line 655 
        ;
        
#line 656 
        ecmd->transceiver = (unsigned char)1U;
        
#line 657 
        goto ldv_57134;
      }
      ldv_57134: 
#line 659 
      ;
    }
    else {
      
#line 660 
      ecmd->port = (unsigned char)255U;
      
#line 661 
      ecmd->autoneg = (unsigned char)0U;
      
#line 662 
      ecmd->transceiver = (unsigned char)2U;
    }
    
#line 666 
    tmp_2 = ethtool_cmd_speed((struct ethtool_cmd const *)ecmd);
    
#line 666 
    adapter->phy.link_speed = (int)tmp_2;
    
#line 667 
    adapter->phy.port_type = ecmd->port;
    
#line 668 
    adapter->phy.transceiver = ecmd->transceiver;
    
#line 669 
    adapter->phy.autoneg = ecmd->autoneg;
    
#line 670 
    adapter->phy.advertising = ecmd->advertising;
    
#line 671 
    adapter->phy.supported = ecmd->supported;
  }
  else {
    
#line 673 
    ethtool_cmd_speed_set(ecmd,(unsigned int)adapter->phy.link_speed);
    
#line 674 
    ecmd->port = adapter->phy.port_type;
    
#line 675 
    ecmd->transceiver = adapter->phy.transceiver;
    
#line 676 
    ecmd->autoneg = adapter->phy.autoneg;
    
#line 677 
    ecmd->advertising = adapter->phy.advertising;
    
#line 678 
    ecmd->supported = adapter->phy.supported;
  }
  
#line 681 
  tmp_3 = netif_carrier_ok((struct net_device const *)netdev);
  
#line 681 
  if ((int)tmp_3 != 0) 
#line 681 
                       ecmd->duplex = (unsigned char)1U; else 
#line 681 
                                                              ecmd->duplex = (unsigned char)255U;
  
#line 682 
  ecmd->phy_address = (unsigned char)adapter->port_num;
  
#line 684 
  __retres = 0;
  
#line 684 
  return __retres;
}


#line 687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  
#line 690 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 692 
  ring->rx_max_pending = (unsigned int)adapter->rx_obj[0].q.len;
  
#line 693 
  ring->rx_pending = (unsigned int)adapter->rx_obj[0].q.len;
  
#line 694 
  ring->tx_max_pending = (unsigned int)adapter->tx_obj[0].q.len;
  
#line 695 
  ring->tx_pending = (unsigned int)adapter->tx_obj[0].q.len;
  
#line 696 
  return;
}


#line 699  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *ecmd)
{
  
#line 701 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 703 
  be_cmd_get_flow_control(adapter,& ecmd->tx_pause,& ecmd->rx_pause);
  
#line 704 
  ecmd->autoneg = (unsigned int)adapter->phy.fc_autoneg;
  
#line 705 
  return;
}


#line 708  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *ecmd)
{
  int __retres;
  int status;
  
#line 710 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 713 
  if (ecmd->autoneg != (unsigned int)adapter->phy.fc_autoneg) {
    
#line 714 
    __retres = -22;
    
#line 714 
    goto return_label;
  }
  else ;
  
#line 716 
  status = be_cmd_set_flow_control(adapter,ecmd->tx_pause,ecmd->rx_pause);
  
#line 718 
  if (status != 0) {
    int tmp_0;
    
#line 719 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Pause param set failed\n");
    
#line 720 
    if (status <= 0) 
#line 720 
                     tmp_0 = status; else 
#line 720 
                                          tmp_0 = -5;
    
#line 720 
    __retres = tmp_0;
    
#line 720 
    goto return_label;
  }
  else ;
  
#line 723 
  adapter->tx_fc = ecmd->tx_pause;
  
#line 724 
  adapter->rx_fc = ecmd->rx_pause;
  
#line 725 
  __retres = 0;
  return_label: 
#line 725 
                return __retres;
}


#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  int __retres;
  
#line 731 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 733 
  switch ((unsigned int)state) {
    case (unsigned int)1: 
#line 734 
    ;
    
#line 735 
    be_cmd_get_beacon_state(adapter,(unsigned char)((int)adapter->hba_port_num),& adapter->beacon_state);
    
#line 737 
    __retres = 1;
    
#line 737 
    goto return_label;
    case (unsigned int)2: 
#line 739 
    ;
    
#line 740 
    be_cmd_set_beacon_state(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)0,(unsigned char)0,(unsigned char)1);
    
#line 742 
    goto ldv_57159;
    case (unsigned int)3: 
#line 744 
    ;
    
#line 745 
    be_cmd_set_beacon_state(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)0,(unsigned char)0,(unsigned char)0);
    
#line 747 
    goto ldv_57159;
    case (unsigned int)0: 
#line 749 
    ;
    
#line 750 
    be_cmd_set_beacon_state(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)0,(unsigned char)0,(unsigned char)((int)((unsigned char)adapter->beacon_state)));
  }
  ldv_57159: 
#line 754 
  ;
  
#line 754 
  __retres = 0;
  return_label: 
#line 754 
                return __retres;
}


#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_dump(struct net_device *netdev, struct ethtool_dump *dump)
{
  int __retres;
  int status;
  
#line 759 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 760 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 763 
  if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) {
    
#line 765 
    __retres = -95;
    
#line 765 
    goto return_label;
  }
  else {
    int tmp_1;
    bool tmp_0;
    
#line 764 
    tmp_0 = check_privilege(adapter,1792U);
    
#line 764 
    if (tmp_0) 
#line 764 
               tmp_1 = 0; else 
#line 764 
                               tmp_1 = 1;
    
#line 764 
    if (tmp_1) {
      
#line 765 
      __retres = -95;
      
#line 765 
      goto return_label;
    }
    else ;
  }
  
#line 767 
  switch (dump->flag) {
    case (__u32)1: 
#line 768 
    ;
    
#line 769 
    status = lancer_initiate_dump(adapter);
    
#line 770 
    if (status == 0) 
#line 771 
                     _dev_info((struct device const *)dev,"FW dump initiated successfully\n"); else ;
    
#line 772 
    goto ldv_57170;
    case (__u32)2: 
#line 773 
    ;
    
#line 774 
    status = lancer_delete_dump(adapter);
    
#line 775 
    if (status == 0) 
#line 776 
                     _dev_info((struct device const *)dev,"FW dump deleted successfully\n"); else ;
    
#line 777 
    goto ldv_57170;
    default: 
#line 778 
    ;
    
#line 779 
    dev_err((struct device const *)dev,"Invalid dump level: 0x%x\n",dump->flag);
    
#line 780 
    __retres = -22;
    
#line 780 
    goto return_label;
  }
  ldv_57170: 
#line 782 
  ;
  
#line 782 
  __retres = status;
  return_label: 
#line 782 
                return __retres;
}


#line 785  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  
#line 787 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 789 
  if (((int)adapter->wol_cap & 1) != 0) {
    
#line 790 
    wol->supported |= 32U;
    
#line 791 
    if ((int)adapter->wol_en != 0) 
#line 792 
                                   wol->wolopts |= 32U; else ;
  }
  else 
#line 794 
       wol->wolopts = 0U;
  
#line 796 
  memset((void *)(& wol->sopass),0,6UL);
  
#line 797 
  return;
}


#line 799  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  int __retres;
  
#line 801 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 803 
  if ((wol->wolopts & 4294967263U) != 0U) {
    
#line 804 
    __retres = -95;
    
#line 804 
    goto return_label;
  }
  else ;
  
#line 806 
  if (((int)adapter->wol_cap & 1) == 0) {
    
#line 807 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"WOL not supported\n");
    
#line 808 
    __retres = -95;
    
#line 808 
    goto return_label;
  }
  else ;
  
#line 811 
  if ((wol->wolopts & 32U) != 0U) 
#line 812 
                                  adapter->wol_en = (_Bool)1; else 
#line 814 
                                                                   adapter->wol_en = (_Bool)0;
  
#line 816 
  __retres = 0;
  return_label: 
#line 816 
                return __retres;
}


#line 819  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_test_ddr_dma(struct be_adapter *adapter)
{
  int __retres;
  int ret;
  int i;
  struct be_dma_mem ddrdma_cmd;
  int tmp;
  
#line 823 
  u64 const pattern[2U] = {6510615555426900570ULL, 11936128518282651045ULL};
  
#line 827 
  ddrdma_cmd.size = 8224U;
  
#line 828 
  ddrdma_cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)ddrdma_cmd.size,& ddrdma_cmd.dma,208U);
  
#line 831 
  if (ddrdma_cmd.va == (void *)0) {
    
#line 832 
    __retres = -12;
    
#line 832 
    goto return_label;
  }
  else ;
  
#line 834 
  i = 0;
  
#line 834 
  goto ldv_57192;
  ldv_57191: 
#line 835 
  ;
  
#line 835 
  ret = be_cmd_ddr_dma_test(adapter,pattern[i],4096U,& ddrdma_cmd);
  
#line 837 
  if (ret != 0) 
#line 838 
                goto err; else ;
  
#line 834 
  i += 1;
  ldv_57192: 
#line 835 
  ;
  
#line 834 
  if (i <= 1) 
#line 836 
              goto ldv_57191; else 
#line 839 
                                   goto ldv_57193;
  ldv_57193: 
#line 840 
  ;
  err: 
#line 841 
  ;
  
#line 842 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)ddrdma_cmd.size,ddrdma_cmd.va,ddrdma_cmd.dma,(struct dma_attrs *)0);
  
#line 844 
  if (ret <= 0) 
#line 844 
                tmp = ret; else 
#line 844 
                                tmp = -5;
  
#line 844 
  __retres = tmp;
  return_label: 
#line 844 
                return __retres;
}


#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u64 be_loopback_test(struct be_adapter *adapter, u8 loopback_type, u64 *status)
{
  u64 __retres;
  int tmp;
  
#line 850 
  be_cmd_set_loopback(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)((int)loopback_type),(unsigned char)1);
  
#line 851 
  tmp = be_cmd_loopback_test(adapter,(unsigned int)adapter->hba_port_num,(unsigned int)loopback_type,1500U,2U,2748ULL);
  
#line 851 
  *status = (unsigned long long)tmp;
  
#line 853 
  be_cmd_set_loopback(adapter,(unsigned char)((int)adapter->hba_port_num),(unsigned char)255,(unsigned char)1);
  
#line 854 
  __retres = *status;
  
#line 854 
  return __retres;
}


#line 857  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_self_test(struct net_device *netdev, struct ethtool_test *test, u64 *data)
{
  int status;
  
#line 860 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 862 
  u8 link_status = (unsigned char)0U;
  
#line 864 
  if ((adapter->function_caps & 64U) != 0U) {
    
#line 865 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Self test not supported\n");
    
#line 866 
    test->flags |= 2U;
    
#line 867 
    goto return_label;
  }
  else ;
  
#line 870 
  memset((void *)data,0,40UL);
  
#line 872 
  if ((test->flags & 1U) != 0U) {
    u64 tmp_0;
    u64 tmp_1;
    
#line 873 
    tmp_0 = be_loopback_test(adapter,(unsigned char)0,data);
    
#line 873 
    if (tmp_0 != 0ULL) 
#line 874 
                       test->flags |= 2U; else ;
    
#line 876 
    tmp_1 = be_loopback_test(adapter,(unsigned char)1,data + 1U);
    
#line 876 
    if (tmp_1 != 0ULL) 
#line 877 
                       test->flags |= 2U; else ;
    
#line 879 
    if ((test->flags & 4U) != 0U) {
      u64 tmp_2;
      
#line 880 
      tmp_2 = be_loopback_test(adapter,(unsigned char)2,data + 2U);
      
#line 880 
      if (tmp_2 != 0ULL) 
#line 882 
                         test->flags |= 2U; else ;
      
#line 883 
      test->flags |= 8U;
    }
    else ;
  }
  else ;
  
#line 887 
  if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) {
    int tmp_3;
    
#line 887 
    tmp_3 = be_test_ddr_dma(adapter);
    
#line 887 
    if (tmp_3 != 0) {
      
#line 888 
      *(data + 3U) = 1ULL;
      
#line 889 
      test->flags |= 2U;
    }
    else ;
  }
  else ;
  
#line 892 
  status = be_cmd_link_status_query(adapter,(u16 *)0U,& link_status,0U);
  
#line 893 
  if (status != 0) {
    
#line 894 
    test->flags |= 2U;
    
#line 895 
    *(data + 4U) = 18446744073709551615ULL;
  }
  else 
    
#line 896 
    if ((unsigned int)link_status == 0U) {
      
#line 897 
      test->flags |= 2U;
      
#line 898 
      *(data + 4U) = 1ULL;
    }
    else ;
  return_label: 
#line 900 
                return;
}


#line 902  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_do_flash(struct net_device *netdev, struct ethtool_flash *efl)
{
  int tmp_0;
  
#line 904 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 906 
  tmp_0 = be_load_fw(adapter,(u8 *)(& efl->data));
  
#line 906 
  return tmp_0;
}


#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_eeprom_len(struct net_device *netdev)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 911 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 913 
  tmp_0 = check_privilege(adapter,1792U);
  
#line 913 
  if (tmp_0) 
#line 913 
             tmp_1 = 0; else 
#line 913 
                             tmp_1 = 1;
  
#line 913 
  if (tmp_1) {
    
#line 914 
    __retres = 0;
    
#line 914 
    goto return_label;
  }
  else ;
  
#line 916 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    
#line 917 
    if ((unsigned int)adapter->virtfn == 0U) {
      u32 tmp_2;
      
#line 918 
      tmp_2 = lancer_cmd_get_file_len(adapter,(u8 *)"/vpd/ntr_pf.vpd");
      
#line 918 
      __retres = (int)tmp_2;
      
#line 918 
      goto return_label;
    }
    else {
      u32 tmp_3;
      
#line 921 
      tmp_3 = lancer_cmd_get_file_len(adapter,(u8 *)"/vpd/ntr_vf.vpd");
      
#line 921 
      __retres = (int)tmp_3;
      
#line 921 
      goto return_label;
    }
  else {
    
#line 924 
    __retres = 1024;
    
#line 924 
    goto return_label;
  }
  return_label: 
#line 916 
                return __retres;
}


#line 928  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_read_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, uint8_t *data)
{
  int __retres;
  struct be_dma_mem eeprom_cmd;
  struct be_cmd_resp_seeprom_read *resp;
  int status;
  int tmp_2;
  
#line 931 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 936 
  if (eeprom->len == 0U) {
    
#line 937 
    __retres = -22;
    
#line 937 
    goto return_label;
  }
  else ;
  
#line 939 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    
#line 940 
    if ((unsigned int)adapter->virtfn == 0U) {
      int tmp_0;
      
#line 941 
      tmp_0 = lancer_cmd_read_file(adapter,(u8 *)"/vpd/ntr_pf.vpd",eeprom->len,(void *)data);
      
#line 941 
      __retres = tmp_0;
      
#line 941 
      goto return_label;
    }
    else {
      int tmp_1;
      
#line 944 
      tmp_1 = lancer_cmd_read_file(adapter,(u8 *)"/vpd/ntr_vf.vpd",eeprom->len,(void *)data);
      
#line 944 
      __retres = tmp_1;
      
#line 944 
      goto return_label;
    }
  else ;
  
#line 948 
  eeprom->magic = (unsigned int)(((int)(adapter->pdev)->device << 16) | 6562);
  
#line 950 
  memset((void *)(& eeprom_cmd),0,24UL);
  
#line 951 
  eeprom_cmd.size = 1040U;
  
#line 952 
  eeprom_cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)eeprom_cmd.size,& eeprom_cmd.dma,208U);
  
#line 956 
  if (eeprom_cmd.va == (void *)0) {
    
#line 957 
    __retres = -12;
    
#line 957 
    goto return_label;
  }
  else ;
  
#line 959 
  status = be_cmd_get_seeprom_data(adapter,& eeprom_cmd);
  
#line 961 
  if (status == 0) {
    
#line 962 
    resp = (struct be_cmd_resp_seeprom_read *)eeprom_cmd.va;
    
#line 963 
    memcpy((void *)data,(void const *)(& resp->seeprom_data) + eeprom->offset,(unsigned long)eeprom->len);
  }
  else ;
  
#line 965 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)eeprom_cmd.size,eeprom_cmd.va,eeprom_cmd.dma,(struct dma_attrs *)0);
  
#line 968 
  if (status <= 0) 
#line 968 
                   tmp_2 = status; else 
#line 968 
                                        tmp_2 = -5;
  
#line 968 
  __retres = tmp_2;
  return_label: 
#line 968 
                return __retres;
}


#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 be_get_msg_level(struct net_device *netdev)
{
  u32 __retres;
  
#line 973 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 975 
  __retres = adapter->msg_enable;
  
#line 975 
  return __retres;
}


#line 978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_set_msg_level(struct net_device *netdev, u32 level)
{
  
#line 980 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 982 
  if (adapter->msg_enable == level) 
#line 983 
                                    goto return_label; else ;
  
#line 985 
  if (((adapter->msg_enable ^ level) & 8192U) != 0U) {
    
#line 986 
    if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
      int tmp_0;
      
#line 988 
      if ((level & 8192U) != 0U) 
#line 988 
                                 tmp_0 = 48; else 
#line 988 
                                                  tmp_0 = 64;
      
#line 987 
      ;
      
#line 987 
      be_cmd_set_fw_log_level(adapter,(unsigned int)tmp_0);
    }
    else ;
  }
  else ;
  
#line 990 
  adapter->msg_enable = level;
  return_label: 
#line 991 
                return;
}


#line 993  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u64 be_get_rss_hash_opts(struct be_adapter *adapter, u64 flow_type)
{
  
#line 995 
  u64 data = 0ULL;
  
#line 997 
  switch (flow_type) {
    case (u64)1: 
#line 998 
    ;
    
#line 999 
    if ((adapter->rss_info.rss_flags & 1ULL) != 0ULL) 
#line 1000 
                                                      data |= 48ULL; else ;
    
#line 1001 
    if ((adapter->rss_info.rss_flags & 2ULL) != 0ULL) 
#line 1002 
                                                      data |= 192ULL; else ;
    
#line 1003 
    goto ldv_57243;
    case (u64)2: 
#line 1004 
    ;
    
#line 1005 
    if ((adapter->rss_info.rss_flags & 1ULL) != 0ULL) 
#line 1006 
                                                      data |= 48ULL; else ;
    
#line 1007 
    if ((adapter->rss_info.rss_flags & 16ULL) != 0ULL) 
#line 1008 
                                                       data |= 192ULL; else ;
    
#line 1009 
    goto ldv_57243;
    case (u64)5: 
#line 1010 
    ;
    
#line 1011 
    if ((adapter->rss_info.rss_flags & 4ULL) != 0ULL) 
#line 1012 
                                                      data |= 48ULL; else ;
    
#line 1013 
    if ((adapter->rss_info.rss_flags & 8ULL) != 0ULL) 
#line 1014 
                                                      data |= 192ULL; else ;
    
#line 1015 
    goto ldv_57243;
    case (u64)6: 
#line 1016 
    ;
    
#line 1017 
    if ((adapter->rss_info.rss_flags & 4ULL) != 0ULL) 
#line 1018 
                                                      data |= 48ULL; else ;
    
#line 1019 
    if ((adapter->rss_info.rss_flags & 32ULL) != 0ULL) 
#line 1020 
                                                       data |= 192ULL; else ;
    
#line 1021 
    goto ldv_57243;
  }
  ldv_57243: 
#line 1024 
  ;
  
#line 1024 
  return data;
}


#line 1027  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 1030 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1032 
  tmp_0 = be_multi_rxq((struct be_adapter const *)adapter);
  
#line 1032 
  if (tmp_0) 
#line 1032 
             tmp_1 = 0; else 
#line 1032 
                             tmp_1 = 1;
  
#line 1032 
  if (tmp_1) {
    
#line 1033 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"ethtool::get_rxnfc: RX flow hashing is disabled\n");
    
#line 1035 
    __retres = -22;
    
#line 1035 
    goto return_label;
  }
  else ;
  
#line 1038 
  switch (cmd->cmd) {
    case (__u32)41: 
#line 1039 
    ;
    
#line 1040 
    cmd->data = be_get_rss_hash_opts(adapter,(unsigned long long)cmd->flow_type);
    
#line 1041 
    goto ldv_57254;
    case (__u32)45: 
#line 1042 
    ;
    
#line 1043 
    cmd->data = (unsigned long long)((int)adapter->num_rx_qs + -1);
    
#line 1044 
    goto ldv_57254;
    default: 
#line 1045 
    ;
    
#line 1046 
    __retres = -22;
    
#line 1046 
    goto return_label;
  }
  ldv_57254: 
#line 1049 
  ;
  
#line 1049 
  __retres = 0;
  return_label: 
#line 1049 
                return __retres;
}


#line 1052  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_rss_hash_opts(struct be_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  int __retres;
  struct be_rx_obj *rxo;
  int i;
  int j;
  u8 rsstable[128U];
  bool tmp;
  int tmp_0;
  
#line 1056 
  int status = 0;
  
#line 1058 
  u32 rss_flags = (unsigned int)adapter->rss_info.rss_flags;
  
#line 1060 
  if (cmd->data != 48ULL && cmd->data != 240ULL) {
    
#line 1062 
    __retres = -22;
    
#line 1062 
    goto return_label;
  }
  else ;
  
#line 1064 
  switch (cmd->flow_type) {
    case (__u32)1: 
#line 1065 
    ;
    
#line 1066 
    if (cmd->data == 48ULL) 
#line 1067 
                            rss_flags &= 4294967293U;
    else 
      
#line 1068 
      if (cmd->data == 240ULL) 
#line 1069 
                               rss_flags |= 3U; else ;
    
#line 1071 
    goto ldv_57268;
    case (__u32)5: 
#line 1072 
    ;
    
#line 1073 
    if (cmd->data == 48ULL) 
#line 1074 
                            rss_flags &= 4294967287U;
    else 
      
#line 1075 
      if (cmd->data == 240ULL) 
#line 1076 
                               rss_flags |= 12U; else ;
    
#line 1078 
    goto ldv_57268;
    case (__u32)2: 
#line 1079 
    ;
    
#line 1080 
    if (cmd->data == 240ULL && (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U))) {
      
#line 1082 
      __retres = -22;
      
#line 1082 
      goto return_label;
    }
    else ;
    
#line 1084 
    if (cmd->data == 48ULL) 
#line 1085 
                            rss_flags &= 4294967279U;
    else 
      
#line 1086 
      if (cmd->data == 240ULL) 
#line 1087 
                               rss_flags |= 17U; else ;
    
#line 1089 
    goto ldv_57268;
    case (__u32)6: 
#line 1090 
    ;
    
#line 1091 
    if (cmd->data == 240ULL && (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U))) {
      
#line 1093 
      __retres = -22;
      
#line 1093 
      goto return_label;
    }
    else ;
    
#line 1095 
    if (cmd->data == 48ULL) 
#line 1096 
                            rss_flags &= 4294967263U;
    else 
      
#line 1097 
      if (cmd->data == 240ULL) 
#line 1098 
                               rss_flags |= 36U; else ;
    
#line 1100 
    goto ldv_57268;
    default: 
#line 1101 
    ;
    
#line 1102 
    __retres = -22;
    
#line 1102 
    goto return_label;
  }
  ldv_57268: 
#line 1105 
  ;
  
#line 1105 
  if ((unsigned long long)rss_flags == adapter->rss_info.rss_flags) {
    
#line 1106 
    __retres = status;
    
#line 1106 
    goto return_label;
  }
  else ;
  
#line 1108 
  tmp = be_multi_rxq((struct be_adapter const *)adapter);
  
#line 1108 
  if ((int)tmp != 0) {
    
#line 1109 
    j = 0;
    
#line 1109 
    goto ldv_57277;
    ldv_57276: 
#line 1110 
    ;
    
#line 1110 
    i = 0;
    
#line 1110 
    rxo = & adapter->rx_obj[i];
    
#line 1110 
    goto ldv_57275;
    ldv_57274: 
#line 1111 
    ;
    
#line 1111 
    if (j + i > 127) 
#line 1112 
                     goto ldv_57273; else ;
    
#line 1113 
    rsstable[j + i] = rxo->rss_id;
    
#line 1110 
    i += 1;
    
#line 1110 
    rxo += 1;
    ldv_57275: 
#line 1111 
    ;
    
#line 1110 
    if ((int)adapter->num_rss_qs > i) 
#line 1112 
                                      goto ldv_57274; else 
#line 1115 
                                                           goto ldv_57273;
    ldv_57273: 
#line 1116 
    ;
    
#line 1109 
    j = (int)adapter->num_rss_qs + j;
    ldv_57277: 
#line 1110 
    ;
    
#line 1109 
    if (j <= 127) 
#line 1111 
                  goto ldv_57276; else 
#line 1114 
                                       goto ldv_57278;
    ldv_57278: 
#line 1115 
    ;
  }
  else ;
  
#line 1118 
  status = be_cmd_rss_config(adapter,(u8 *)(& adapter->rss_info.rsstable),rss_flags,(unsigned short)128,(u8 const *)(& adapter->rss_info.rss_hkey));
  
#line 1120 
  if (status == 0) 
#line 1121 
                   adapter->rss_info.rss_flags = (unsigned long long)rss_flags; else ;
  
#line 1123 
  if (status <= 0) 
#line 1123 
                   tmp_0 = status; else 
#line 1123 
                                        tmp_0 = -5;
  
#line 1123 
  __retres = tmp_0;
  return_label: 
#line 1123 
                return __retres;
}


#line 1126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 1128 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1129 
  int status = 0;
  
#line 1131 
  tmp_0 = be_multi_rxq((struct be_adapter const *)adapter);
  
#line 1131 
  if (tmp_0) 
#line 1131 
             tmp_1 = 0; else 
#line 1131 
                             tmp_1 = 1;
  
#line 1131 
  if (tmp_1) {
    
#line 1132 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"ethtool::set_rxnfc: RX flow hashing is disabled\n");
    
#line 1134 
    __retres = -22;
    
#line 1134 
    goto return_label;
  }
  else ;
  
#line 1137 
  switch (cmd->cmd) {
    case (__u32)42: 
#line 1138 
    ;
    
#line 1139 
    status = be_set_rss_hash_opts(adapter,cmd);
    
#line 1140 
    goto ldv_57286;
    default: 
#line 1141 
    ;
    
#line 1142 
    __retres = -22;
    
#line 1142 
    goto return_label;
  }
  ldv_57286: 
#line 1145 
  ;
  
#line 1145 
  __retres = status;
  return_label: 
#line 1145 
                return __retres;
}


#line 1148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static void be_get_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  u16 tmp_0;
  
#line 1151 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1153 
  ch->combined_count = (unsigned int)adapter->num_evt_qs;
  
#line 1154 
  tmp_0 = be_max_qs(adapter);
  
#line 1154 
  ch->max_combined = (unsigned int)tmp_0;
  
#line 1155 
  return;
}


#line 1157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  int __retres;
  int status;
  int tmp_1;
  
#line 1160 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1163 
  if (((ch->rx_count != 0U || ch->tx_count != 0U) || ch->other_count != 0U) || ch->combined_count == 0U) {
    
#line 1165 
    __retres = -22;
    
#line 1165 
    goto return_label;
  }
  else {
    u16 tmp_0;
    
#line 1164 
    tmp_0 = be_max_qs(adapter);
    
#line 1164 
    ;
    
#line 1164 
    if (ch->combined_count > (unsigned int)tmp_0) {
      
#line 1165 
      __retres = -22;
      
#line 1165 
      goto return_label;
    }
    else ;
  }
  
#line 1167 
  adapter->cfg_num_qs = (unsigned short)ch->combined_count;
  
#line 1169 
  status = be_update_queues(adapter);
  
#line 1170 
  if (status <= 0) 
#line 1170 
                   tmp_1 = status; else 
#line 1170 
                                        tmp_1 = -5;
  
#line 1170 
  __retres = tmp_1;
  return_label: 
#line 1170 
                return __retres;
}


#line 1173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 be_get_rxfh_indir_size(struct net_device *netdev)
{
  u32 __retres;
  
#line 1175 
  __retres = 128U;
  
#line 1175 
  return __retres;
}


#line 1178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static u32 be_get_rxfh_key_size(struct net_device *netdev)
{
  u32 __retres;
  
#line 1180 
  __retres = 40U;
  
#line 1180 
  return __retres;
}


#line 1183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_rxfh(struct net_device *netdev, u32 *indir, u8 *hkey, u8 *hfunc)
{
  int __retres;
  int i;
  
#line 1186 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1188 
  struct rss_info *rss = & adapter->rss_info;
  
#line 1190 
  if (indir != (u32 *)0U) {
    
#line 1191 
    i = 0;
    
#line 1191 
    goto ldv_57315;
    ldv_57314: 
#line 1192 
    ;
    
#line 1192 
    *(indir + i) = (unsigned int)rss->rss_queue[i];
    
#line 1191 
    i += 1;
    ldv_57315: 
#line 1192 
    ;
    
#line 1191 
    if (i <= 127) 
#line 1193 
                  goto ldv_57314; else 
#line 1196 
                                       goto ldv_57316;
    ldv_57316: 
#line 1197 
    ;
  }
  else ;
  
#line 1195 
  if (hkey != (u8 *)0U) 
#line 1196 
                        memcpy((void *)hkey,(void const *)(& rss->rss_hkey),40UL); else ;
  
#line 1198 
  if (hfunc != (u8 *)0U) 
#line 1199 
                         *hfunc = (unsigned char)1U; else ;
  
#line 1201 
  __retres = 0;
  
#line 1201 
  return __retres;
}


#line 1204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_set_rxfh(struct net_device *netdev, u32 const *indir, u8 const *hkey, u8 const hfunc)
{
  int __retres;
  int i;
  int j;
  u8 rsstable[128U];
  
#line 1207 
  int rc = 0;
  
#line 1208 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1212 
  if ((unsigned int)hfunc > 1U) {
    
#line 1213 
    __retres = -95;
    
#line 1213 
    goto return_label;
  }
  else ;
  
#line 1215 
  if (indir != (u32 const *)0U) {
    struct be_rx_obj *rxo;
    
#line 1218 
    i = 0;
    
#line 1218 
    goto ldv_57330;
    ldv_57329: 
#line 1219 
    ;
    
#line 1219 
    j = (int)*(indir + i);
    
#line 1220 
    rxo = & adapter->rx_obj[j];
    
#line 1221 
    rsstable[i] = rxo->rss_id;
    
#line 1222 
    adapter->rss_info.rss_queue[i] = (unsigned char)j;
    
#line 1218 
    i += 1;
    ldv_57330: 
#line 1219 
    ;
    
#line 1218 
    if (i <= 127) 
#line 1220 
                  goto ldv_57329; else 
#line 1223 
                                       goto ldv_57331;
    ldv_57331: 
#line 1224 
    ;
  }
  else 
#line 1225 
       memcpy((void *)(& rsstable),(void const *)(& adapter->rss_info.rsstable),128UL);
  
#line 1229 
  if (hkey == (u8 const *)0U) 
#line 1230 
                              hkey = (u8 const *)(& adapter->rss_info.rss_hkey); else ;
  
#line 1232 
  rc = be_cmd_rss_config(adapter,(u8 *)(& rsstable),(unsigned int)adapter->rss_info.rss_flags,(unsigned short)128,hkey);
  
#line 1235 
  if (rc != 0) {
    
#line 1236 
    adapter->rss_info.rss_flags = 0ULL;
    
#line 1237 
    __retres = -5;
    
#line 1237 
    goto return_label;
  }
  else ;
  
#line 1239 
  memcpy((void *)(& adapter->rss_info.rss_hkey),(void const *)hkey,40UL);
  
#line 1240 
  memcpy((void *)(& adapter->rss_info.rsstable),(void const *)(& rsstable),128UL);
  
#line 1242 
  __retres = 0;
  return_label: 
#line 1242 
                return __retres;
}


#line 1245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_module_info(struct net_device *netdev, struct ethtool_modinfo *modinfo)
{
  int __retres;
  u8 page_data[256U];
  int status;
  int tmp_1;
  bool tmp_0;
  int tmp_2;
  
#line 1248 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1252 
  tmp_0 = check_privilege(adapter,1792U);
  
#line 1252 
  if (tmp_0) 
#line 1252 
             tmp_1 = 0; else 
#line 1252 
                             tmp_1 = 1;
  
#line 1252 
  if (tmp_1) {
    
#line 1253 
    __retres = -95;
    
#line 1253 
    goto return_label;
  }
  else ;
  
#line 1255 
  status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)160,(u8 *)(& page_data));
  
#line 1257 
  if (status == 0) 
    
#line 1258 
    if ((unsigned int)page_data[94] == 0U) {
      
#line 1259 
      modinfo->type = 1U;
      
#line 1260 
      modinfo->eeprom_len = 256U;
    }
    else {
      
#line 1262 
      modinfo->type = 2U;
      
#line 1263 
      modinfo->eeprom_len = 512U;
    }
  else ;
  
#line 1266 
  if (status <= 0) 
#line 1266 
                   tmp_2 = status; else 
#line 1266 
                                        tmp_2 = -5;
  
#line 1266 
  __retres = tmp_2;
  return_label: 
#line 1266 
                return __retres;
}


#line 1269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
static int be_get_module_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *data)
{
  int __retres;
  int status;
  int tmp_1;
  bool tmp_0;
  int tmp_2;
  
#line 1272 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1275 
  tmp_0 = check_privilege(adapter,1792U);
  
#line 1275 
  if (tmp_0) 
#line 1275 
             tmp_1 = 0; else 
#line 1275 
                             tmp_1 = 1;
  
#line 1275 
  if (tmp_1) {
    
#line 1276 
    __retres = -95;
    
#line 1276 
    goto return_label;
  }
  else ;
  
#line 1278 
  status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)160,data);
  
#line 1280 
  if (status != 0) 
#line 1281 
                   goto err; else ;
  
#line 1283 
  if (eeprom->offset + eeprom->len > 256U) {
    
#line 1284 
    status = be_cmd_read_port_transceiver_data(adapter,(unsigned char)162,data + 256U);
    
#line 1288 
    if (status != 0) 
#line 1289 
                     goto err; else ;
  }
  else ;
  
#line 1291 
  if (eeprom->offset != 0U) 
#line 1292 
                            memcpy((void *)data,(void const *)(data + eeprom->offset),(unsigned long)eeprom->len); else ;
  err: 
#line 1293 
  ;
  
#line 1294 
  if (status <= 0) 
#line 1294 
                   tmp_2 = status; else 
#line 1294 
                                        tmp_2 = -5;
  
#line 1294 
  __retres = tmp_2;
  return_label: 
#line 1294 
                return __retres;
}


#line 1297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_ethtool.c"
struct ethtool_ops const be_ethtool_ops = {.get_settings = & be_get_settings, .set_settings = (int (*)(struct net_device *, struct ethtool_cmd *))0, .get_drvinfo = & be_get_drvinfo, .get_regs_len = & be_get_reg_len, .get_regs = & be_get_regs, .get_wol = & be_get_wol, .set_wol = & be_set_wol, .get_msglevel = & be_get_msg_level, .set_msglevel = & be_set_msg_level, .nway_reset = (int (*)(struct net_device *))0, .get_link = & ethtool_op_get_link, .get_eeprom_len = & be_get_eeprom_len, .get_eeprom = & be_read_eeprom, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = & be_get_coalesce, .set_coalesce = & be_set_coalesce, .get_ringparam = & be_get_ringparam, .set_ringparam = (int (*)(struct net_device *, struct ethtool_ringparam *))0, .get_pauseparam = & be_get_pauseparam, .set_pauseparam = & be_set_pauseparam, .self_test = & be_self_test, .get_strings = & be_get_stat_strings, .set_phys_id = & be_set_phys_id, .get_ethtool_stats = & be_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & be_get_sset_count, .get_rxnfc = & be_get_rxnfc, .set_rxnfc = & be_set_rxnfc, .flash_device = & be_do_flash, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = & be_get_rxfh_key_size, .get_rxfh_indir_size = & be_get_rxfh_indir_size, .get_rxfh = & be_get_rxfh, .set_rxfh = & be_set_rxfh, .get_channels = & be_get_channels, .set_channels = & be_set_channels, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = & be_set_dump, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = & be_get_module_info, .get_module_eeprom = & be_get_module_eeprom, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_26)(struct net_device *) = & ethtool_op_get_link;

#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_get_rxfh_20(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  int tmp;
  
#line 72 
  tmp = be_get_rxfh(arg0,arg1,arg2,arg3);
  
#line 72 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_get_regs_46(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  
#line 77 
  be_get_regs(arg0,arg1,arg2);
  
#line 78 
  return;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_get_sset_count_48(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 82 
  tmp = be_get_sset_count(arg0,arg1);
  
#line 82 
  return tmp;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_set_pauseparam_52(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  int tmp;
  
#line 87 
  tmp = be_set_pauseparam(arg0,arg1);
  
#line 87 
  return tmp;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_set_dump_4(struct net_device *arg0, struct ethtool_dump *arg1)
{
  int tmp;
  
#line 92 
  tmp = be_set_dump(arg0,arg1);
  
#line 92 
  return tmp;
}


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_set_phys_id_2(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  int tmp;
  
#line 97 
  tmp = be_set_phys_id(arg0,arg1);
  
#line 97 
  return tmp;
}


#line 101  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_set_rxnfc_8(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  int tmp;
  
#line 102 
  tmp = be_set_rxnfc(arg0,arg1);
  
#line 102 
  return tmp;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_get_drvinfo_9(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 107 
  be_get_drvinfo(arg0,arg1);
  
#line 108 
  return;
}


#line 111  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_get_rxnfc_18(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  int tmp;
  
#line 112 
  tmp = be_get_rxnfc(arg0,arg1,arg2);
  
#line 112 
  return tmp;
}


#line 116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_get_reg_len_50(struct net_device *arg0)
{
  int tmp;
  
#line 117 
  tmp = be_get_reg_len(arg0);
  
#line 117 
  return tmp;
}


#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_get_pauseparam_24(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  
#line 122 
  be_get_pauseparam(arg0,arg1);
  
#line 123 
  return;
}


#line 126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_do_flash_44(struct net_device *arg0, struct ethtool_flash *arg1)
{
  int tmp;
  
#line 127 
  tmp = be_do_flash(arg0,arg1);
  
#line 127 
  return tmp;
}


#line 131  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
unsigned int ldv_emg_wrapper_be_get_rxfh_indir_size_27(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 132 
  tmp = be_get_rxfh_indir_size(arg0);
  
#line 132 
  return tmp;
}


#line 136  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
unsigned int ldv_emg_wrapper_be_get_rxfh_key_size_11(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 137 
  tmp = be_get_rxfh_key_size(arg0);
  
#line 137 
  return tmp;
}


#line 141  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_set_rxfh_34(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  int tmp;
  
#line 142 
  tmp = be_set_rxfh(arg0,(u32 const *)arg1,(u8 const *)arg2,(unsigned char)((int)arg3));
  
#line 142 
  return tmp;
}


#line 146  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_get_ethtool_stats_42(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 147 
  be_get_ethtool_stats(arg0,arg1,arg2);
  
#line 148 
  return;
}


#line 151  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_self_test_15(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  
#line 152 
  be_self_test(arg0,arg1,arg2);
  
#line 153 
  return;
}


#line 156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_get_ringparam_19(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 157 
  be_get_ringparam(arg0,arg1);
  
#line 158 
  return;
}


#line 161  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_set_msg_level_49(struct net_device *arg0, unsigned int arg1)
{
  
#line 162 
  be_set_msg_level(arg0,arg1);
  
#line 163 
  return;
}


#line 166  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_get_module_info_39(struct net_device *arg0, struct ethtool_modinfo *arg1)
{
  int tmp;
  
#line 167 
  tmp = be_get_module_info(arg0,arg1);
  
#line 167 
  return tmp;
}


#line 171  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_set_wol_16(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  int tmp;
  
#line 172 
  tmp = be_set_wol(arg0,arg1);
  
#line 172 
  return tmp;
}


#line 176  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_get_coalesce_43(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 177 
  tmp = be_get_coalesce(arg0,arg1);
  
#line 177 
  return tmp;
}


#line 181  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_get_stat_strings_28(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 182 
  be_get_stat_strings(arg0,arg1,arg2);
  
#line 183 
  return;
}


#line 186  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
unsigned int ldv_emg_wrapper_be_get_msg_level_12(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 187 
  tmp = be_get_msg_level(arg0);
  
#line 187 
  return tmp;
}


#line 191  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_get_module_eeprom_5(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 192 
  tmp = be_get_module_eeprom(arg0,arg1,arg2);
  
#line 192 
  return tmp;
}


#line 196  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_get_eeprom_len_33(struct net_device *arg0)
{
  int tmp;
  
#line 197 
  tmp = be_get_eeprom_len(arg0);
  
#line 197 
  return tmp;
}


#line 201  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_read_eeprom_38(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 202 
  tmp = be_read_eeprom(arg0,arg1,arg2);
  
#line 202 
  return tmp;
}


#line 206  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_get_settings_37(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 207 
  tmp = be_get_settings(arg0,arg1);
  
#line 207 
  return tmp;
}


#line 211  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_set_coalesce_51(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 212 
  tmp = be_set_coalesce(arg0,arg1);
  
#line 212 
  return tmp;
}


#line 216  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
int ldv_emg_wrapper_be_set_channels_32(struct net_device *arg0, struct ethtool_channels *arg1)
{
  int tmp;
  
#line 217 
  tmp = be_set_channels(arg0,arg1);
  
#line 217 
  return tmp;
}


#line 221  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_get_wol_40(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  
#line 222 
  be_get_wol(arg0,arg1);
  
#line 223 
  return;
}


#line 226  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_ethtool.c.aux"
void ldv_emg_wrapper_be_get_channels_29(struct net_device *arg0, struct ethtool_channels *arg1)
{
  
#line 227 
  be_get_channels(arg0,arg1);
  
#line 228 
  return;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 48 
void __list_add(struct list_head *, struct list_head *, struct list_head *);


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  
#line 77 
  __list_add(new,head->prev,head);
  
#line 78 
  return;
}


#line 113 
void list_del(struct list_head *);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_lock_73(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_75(struct mutex *ldv_func_arg1);


#line 45 
static void ldv_mutex_lock_77(struct mutex *ldv_func_arg1);


#line 49 
static void ldv_mutex_lock_79(struct mutex *ldv_func_arg1);


#line 53 
static void ldv_mutex_lock_81(struct mutex *ldv_func_arg1);


#line 57 
static void ldv_mutex_lock_83(struct mutex *ldv_func_arg1);


#line 61 
static void ldv_mutex_lock_86(struct mutex *ldv_func_arg1);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1);


#line 205 
static void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1);


#line 209 
static void ldv_mutex_unlock_82_0(struct mutex *ldv_func_arg1);


#line 213 
static void ldv_mutex_unlock_84_0(struct mutex *ldv_func_arg1);


#line 217 
static void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1);


#line 221 
static void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1);


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 3100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_oper_up(struct net_device const *dev)
{
  bool __retres;
  
#line 3102 
  __retres = (_Bool)(((unsigned int)dev->operstate == 6U || (unsigned int)dev->operstate == 0U) != 0);
  
#line 3102 
  return __retres;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.h"
int be_roce_register_driver(struct ocrdma_driver *drv);


#line 73 
void be_roce_unregister_driver(struct ocrdma_driver *drv);


#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
void be_roce_dev_add(struct be_adapter *adapter);


#line 839 
void be_roce_dev_remove(struct be_adapter *adapter);


#line 844 
void be_roce_dev_open(struct be_adapter *adapter);


#line 845 
void be_roce_dev_close(struct be_adapter *adapter);


#line 846 
void be_roce_dev_shutdown(struct be_adapter *adapter);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
static struct ocrdma_driver *ocrdma_drv;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
static struct list_head be_adapter_list = {.next = & be_adapter_list, .prev = & be_adapter_list};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
static struct mutex be_adapter_list_lock = {.count = {.counter = 1}, .wait_lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "be_adapter_list_lock.wait_lock", .cpu = 0, .ip = 0UL}}}}, .wait_list = {.next = & be_adapter_list_lock.wait_list, .prev = & be_adapter_list_lock.wait_list}, .owner = (struct task_struct *)0, .magic = (void *)(& be_adapter_list_lock), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "be_adapter_list_lock", .cpu = 0, .ip = 0UL}};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
static void _be_roce_dev_add(struct be_adapter *adapter)
{
  struct be_dev_info dev_info;
  int i;
  int num_vec;
  
#line 34 
  struct pci_dev *pdev = adapter->pdev;
  
#line 36 
  if (ocrdma_drv == (struct ocrdma_driver *)0) 
#line 37 
                                               goto return_label; else ;
  
#line 39 
  if (ocrdma_drv->be_abi_version != 1U) {
    
#line 40 
    dev_warn((struct device const *)(& pdev->dev),"Cannot initialize RoCE due to ocrdma ABI mismatch\n");
    
#line 41 
    goto return_label;
  }
  else ;
  
#line 44 
  if ((unsigned int)pdev->device == 1824U) {
    
#line 46 
    if ((unsigned int)adapter->num_msix_vec == 0U) 
#line 47 
                                                   goto return_label; else ;
    
#line 49 
    dev_info.dpp_unmapped_addr = pdev->resource[2].start;
    
#line 50 
    if (pdev->resource[2].start != 0ULL || pdev->resource[2].end != pdev->resource[2].start) 
      
#line 50 
      dev_info.dpp_unmapped_len = ((unsigned int)pdev->resource[2].end - (unsigned int)pdev->resource[2].start) + 1U; else 
                                                                    
#line 50 
                                                                    dev_info.dpp_unmapped_len = 0U;
  }
  else {
    
#line 52 
    dev_info.dpp_unmapped_addr = 0ULL;
    
#line 53 
    dev_info.dpp_unmapped_len = 0U;
  }
  
#line 55 
  dev_info.pdev = adapter->pdev;
  
#line 56 
  dev_info.db = adapter->db;
  
#line 57 
  dev_info.unmapped_db = adapter->roce_db.io_addr;
  
#line 58 
  dev_info.db_page_size = adapter->roce_db.size;
  
#line 59 
  dev_info.db_total_size = adapter->roce_db.total_size;
  
#line 60 
  dev_info.netdev = adapter->netdev;
  
#line 61 
  memcpy((void *)(& dev_info.mac_addr),(void const *)(adapter->netdev)->dev_addr,6UL);
  
#line 62 
  dev_info.dev_family = adapter->sli_family;
  
#line 63 
  if ((unsigned int)adapter->num_msix_vec != 0U) {
    int tmp_0;
    
#line 67 
    num_vec = (int)((unsigned int)adapter->num_msix_vec + adapter->num_msix_roce_vec);
    
#line 68 
    dev_info.intr_mode = BE_INTERRUPT_MODE_MSIX;
    {
      int tmp;
      
#line 69 
      int _min1 = num_vec;
      
#line 69 
      int _min2 = 32;
      
#line 69 
      if (_min1 < _min2) 
#line 69 
                         tmp = _min1; else 
#line 69 
                                           tmp = _min2;
      
#line 69 
      tmp_0 = tmp;
    }
    
#line 69 
    dev_info.msix.num_vectors = tmp_0;
    
#line 74 
    dev_info.msix.start_vector = (int)adapter->num_evt_qs;
    
#line 75 
    i = 0;
    
#line 75 
    goto ldv_57855;
    ldv_57854: 
#line 76 
    ;
    
#line 76 
    dev_info.msix.vector_list[i] = adapter->msix_entries[i].vector;
    
#line 75 
    i += 1;
    ldv_57855: 
#line 76 
    ;
    
#line 75 
    if (dev_info.msix.num_vectors > i) 
#line 77 
                                       goto ldv_57854; else 
#line 80 
                                                            goto ldv_57856;
    ldv_57856: 
#line 81 
    ;
  }
  else {
    
#line 80 
    dev_info.msix.num_vectors = 0;
    
#line 81 
    dev_info.intr_mode = BE_INTERRUPT_MODE_INTX;
  }
  
#line 83 
  adapter->ocrdma_dev = (*(ocrdma_drv->add))(& dev_info);
  return_label: 
#line 84 
                return;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_dev_add(struct be_adapter *adapter)
{
  
#line 88 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    
#line 89 
    INIT_LIST_HEAD(& adapter->entry);
    
#line 90 
    ldv_mutex_lock_73(& be_adapter_list_lock);
    
#line 91 
    list_add_tail(& adapter->entry,& be_adapter_list);
    
#line 97 
    _be_roce_dev_add(adapter);
    
#line 98 
    ldv_mutex_unlock_74(& be_adapter_list_lock);
  }
  else ;
  
#line 100 
  return;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
static void _be_roce_dev_remove(struct be_adapter *adapter)
{
  
#line 104 
  if ((ocrdma_drv != (struct ocrdma_driver *)0 && ocrdma_drv->remove != (void (*)(struct ocrdma_dev *))0) && adapter->ocrdma_dev != (struct ocrdma_dev *)0) 
    
#line 105 
    (*(ocrdma_drv->remove))(adapter->ocrdma_dev); else ;
  
#line 106 
  adapter->ocrdma_dev = (struct ocrdma_dev *)0;
  
#line 107 
  return;
}


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_dev_remove(struct be_adapter *adapter)
{
  
#line 111 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    
#line 112 
    ldv_mutex_lock_75(& be_adapter_list_lock);
    
#line 113 
    _be_roce_dev_remove(adapter);
    
#line 114 
    list_del(& adapter->entry);
    
#line 115 
    ldv_mutex_unlock_76(& be_adapter_list_lock);
  }
  else ;
  
#line 117 
  return;
}


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
static void _be_roce_dev_open(struct be_adapter *adapter)
{
  
#line 121 
  if ((ocrdma_drv != (struct ocrdma_driver *)0 && adapter->ocrdma_dev != (struct ocrdma_dev *)0) && ocrdma_drv->state_change_handler != (void (*)(struct ocrdma_dev *, u32 ))0) 
    
#line 123 
    (*(ocrdma_drv->state_change_handler))(adapter->ocrdma_dev,0U); else ;
  
#line 124 
  return;
}


#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_dev_open(struct be_adapter *adapter)
{
  
#line 129 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    
#line 130 
    ldv_mutex_lock_77(& be_adapter_list_lock);
    
#line 131 
    _be_roce_dev_open(adapter);
    
#line 132 
    ldv_mutex_unlock_78(& be_adapter_list_lock);
  }
  else ;
  
#line 134 
  return;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
static void _be_roce_dev_close(struct be_adapter *adapter)
{
  
#line 138 
  if ((ocrdma_drv != (struct ocrdma_driver *)0 && adapter->ocrdma_dev != (struct ocrdma_dev *)0) && ocrdma_drv->state_change_handler != (void (*)(struct ocrdma_dev *, u32 ))0) 
    
#line 140 
    (*(ocrdma_drv->state_change_handler))(adapter->ocrdma_dev,1U); else ;
  
#line 141 
  return;
}


#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_dev_close(struct be_adapter *adapter)
{
  
#line 146 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    
#line 147 
    ldv_mutex_lock_79(& be_adapter_list_lock);
    
#line 148 
    _be_roce_dev_close(adapter);
    
#line 149 
    ldv_mutex_unlock_80(& be_adapter_list_lock);
  }
  else ;
  
#line 151 
  return;
}


#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_dev_shutdown(struct be_adapter *adapter)
{
  
#line 155 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    
#line 156 
    ldv_mutex_lock_81(& be_adapter_list_lock);
    
#line 157 
    if ((ocrdma_drv != (struct ocrdma_driver *)0 && adapter->ocrdma_dev != (struct ocrdma_dev *)0) && ocrdma_drv->state_change_handler != (void (*)(struct ocrdma_dev *, u32 ))0) 
      
#line 159 
      (*(ocrdma_drv->state_change_handler))(adapter->ocrdma_dev,2U); else ;
    
#line 161 
    ldv_mutex_unlock_82_0(& be_adapter_list_lock);
  }
  else ;
  
#line 163 
  return;
}


#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
int be_roce_register_driver(struct ocrdma_driver *drv)
{
  int __retres;
  struct be_adapter *dev;
  struct be_adapter *tmp;
  struct be_adapter *tmp_2;
  
#line 169 
  ldv_mutex_lock_83(& be_adapter_list_lock);
  
#line 170 
  if (ocrdma_drv != (struct ocrdma_driver *)0) {
    
#line 171 
    ldv_mutex_unlock_84_0(& be_adapter_list_lock);
    
#line 172 
    __retres = -22;
    
#line 172 
    goto return_label;
  }
  else ;
  
#line 174 
  ocrdma_drv = drv;
  {
    
#line 175 
    struct list_head const *__mptr = (struct list_head const *)be_adapter_list.next;
    
#line 175 
    tmp = (struct be_adapter *)__mptr + 18446744073708208432U;
  }
  
#line 175 
  dev = tmp;
  
#line 175 
  goto ldv_57891;
  ldv_57890: 
#line 176 
  ;
  {
    struct net_device *netdev;
    bool tmp_0;
    
#line 178 
    _be_roce_dev_add(dev);
    
#line 179 
    netdev = dev->netdev;
    
#line 180 
    tmp_0 = netif_running((struct net_device const *)netdev);
    
#line 180 
    if ((int)tmp_0 != 0) {
      bool tmp_1;
      
#line 180 
      tmp_1 = netif_oper_up((struct net_device const *)netdev);
      
#line 180 
      if ((int)tmp_1 != 0) 
#line 181 
                           _be_roce_dev_open(dev); else ;
    }
    else ;
  }
  {
    
#line 175 
    struct list_head const *__mptr_0 = (struct list_head const *)dev->entry.next;
    
#line 175 
    tmp_2 = (struct be_adapter *)__mptr_0 + 18446744073708208432U;
  }
  
#line 175 
  dev = tmp_2;
  ldv_57891: 
#line 177 
  ;
  
#line 175 
  if (& dev->entry != & be_adapter_list) 
#line 177 
                                         goto ldv_57890; else 
#line 180 
                                                              goto ldv_57892;
  ldv_57892: 
#line 181 
  ;
  
#line 183 
  ldv_mutex_unlock_85(& be_adapter_list_lock);
  
#line 184 
  __retres = 0;
  return_label: 
#line 184 
                return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
static char const __kstrtab_be_roce_register_driver[24U] = {(char)'b', (char)'e', (char)'_', (char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'d', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)'\000'};

#line 186 
struct kernel_symbol const __ksymtab_be_roce_register_driver;


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
struct kernel_symbol const __ksymtab_be_roce_register_driver = {.value = (unsigned long)(& be_roce_register_driver), .name = (char const *)(& __kstrtab_be_roce_register_driver)};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
void be_roce_unregister_driver(struct ocrdma_driver *drv)
{
  struct be_adapter *dev;
  struct be_adapter *tmp;
  struct be_adapter *tmp_0;
  
#line 192 
  ldv_mutex_lock_86(& be_adapter_list_lock);
  {
    
#line 193 
    struct list_head const *__mptr = (struct list_head const *)be_adapter_list.next;
    
#line 193 
    tmp = (struct be_adapter *)__mptr + 18446744073708208432U;
  }
  
#line 193 
  dev = tmp;
  
#line 193 
  goto ldv_57909;
  ldv_57908: 
#line 194 
  ;
  
#line 194 
  if (dev->ocrdma_dev != (struct ocrdma_dev *)0) 
#line 195 
                                                 _be_roce_dev_remove(dev); else ;
  {
    
#line 193 
    struct list_head const *__mptr_0 = (struct list_head const *)dev->entry.next;
    
#line 193 
    tmp_0 = (struct be_adapter *)__mptr_0 + 18446744073708208432U;
  }
  
#line 193 
  dev = tmp_0;
  ldv_57909: 
#line 195 
  ;
  
#line 193 
  if (& dev->entry != & be_adapter_list) 
#line 195 
                                         goto ldv_57908; else 
#line 198 
                                                              goto ldv_57910;
  ldv_57910: 
#line 199 
  ;
  
#line 197 
  ocrdma_drv = (struct ocrdma_driver *)0;
  
#line 198 
  ldv_mutex_unlock_87(& be_adapter_list_lock);
  
#line 199 
  return;
}


#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
static char const __kstrtab_be_roce_unregister_driver[26U] = {(char)'b', (char)'e', (char)'_', (char)'r', (char)'o', (char)'c', (char)'e', (char)'_', (char)'u', (char)'n', (char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'d', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)'\000'};

#line 200 
struct kernel_symbol const __ksymtab_be_roce_unregister_driver;


#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_roce.c"
struct kernel_symbol const __ksymtab_be_roce_unregister_driver = {.value = (unsigned long)(& be_roce_unregister_driver), .name = (char const *)(& __kstrtab_be_roce_unregister_driver)};

#line 747  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_lock_73(struct mutex *ldv_func_arg1)
{
  
#line 751 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 752 
  return;
}


#line 755  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1)
{
  
#line 759 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 760 
  return;
}


#line 763  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_lock_75(struct mutex *ldv_func_arg1)
{
  
#line 767 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 768 
  return;
}


#line 771  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1)
{
  
#line 775 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 776 
  return;
}


#line 779  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_lock_77(struct mutex *ldv_func_arg1)
{
  
#line 783 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 784 
  return;
}


#line 787  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1)
{
  
#line 791 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 792 
  return;
}


#line 795  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_lock_79(struct mutex *ldv_func_arg1)
{
  
#line 799 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 800 
  return;
}


#line 803  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1)
{
  
#line 807 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_lock_81(struct mutex *ldv_func_arg1)
{
  
#line 815 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 816 
  return;
}


#line 819  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_unlock_82_0(struct mutex *ldv_func_arg1)
{
  
#line 823 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 824 
  return;
}


#line 827  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_lock_83(struct mutex *ldv_func_arg1)
{
  
#line 831 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 832 
  return;
}


#line 835  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_unlock_84_0(struct mutex *ldv_func_arg1)
{
  
#line 839 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 840 
  return;
}


#line 843  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1)
{
  
#line 847 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_lock_86(struct mutex *ldv_func_arg1)
{
  
#line 855 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 856 
  return;
}


#line 859  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_roce.c.aux"
static void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1)
{
  
#line 863 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"be_adapter_list_lock");
  
#line 864 
  return;
}

void __builtin_prefetch(void const * , ...);


#line 4  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
void ldv_atomic_add(int i, atomic_t *v);


#line 5 
void ldv_atomic_sub(int i, atomic_t *v);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(long nr, unsigned long const volatile *addr)
{
  int oldbit;
  
#line 317 
  ldv_inline_asm();
  
#line 323 
  return oldbit;
}


#line 479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  int __retres;
  
#line 481 
  int bitpos = -1;
  
#line 482 
  ldv_inline_asm();
  
#line 490 
  __retres = bitpos + 1;
  
#line 490 
  return __retres;
}


#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_next_bit(unsigned long const *, unsigned long, unsigned long);


#line 42 
unsigned long find_first_bit(unsigned long const *, unsigned long);


#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static __u32 rol32(__u32 word, unsigned int shift)
{
  __u32 __retres;
  
#line 110 
  __retres = (word << shift) | (word >> ((unsigned long)8 * sizeof(word) - (unsigned long)shift));
  
#line 110 
  return __retres;
}


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
int ____ilog2_NaN(void);


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_sleep(char const *, int, int);


#line 418 
int sscanf(char const *, char const * , ...);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_null(char const *, int const);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/getorder.h"
__inline static int __get_order(unsigned long size)
{
  int order;
  
#line 17 
  size -= 1UL;
  
#line 18 
  size >>= 12;
  
#line 22 
  order = fls64((unsigned long long)size);
  
#line 24 
  return order;
}


#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memmove(void *, void const *, size_t);


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  {
    bool __warned;
    
#line 117 
    int __ret_warn_once = cpu >= (unsigned int)nr_cpu_ids;
    
#line 117 
    if ((long)(__ret_warn_once != 0) != 0L) {
      int tmp;
      {
        
#line 117 
        int __ret_warn_on = ! __warned;
        
#line 117 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 117 
                                              warn_slowpath_null("include/linux/cpumask.h",117); else ;
        
#line 117 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 117 
      if ((long)tmp != 0L) 
#line 117 
                           __warned = (_Bool)1; else ;
    }
    else ;
    
#line 117 
    long tmp_2 = (long)(__ret_warn_once != 0);
  }
  
#line 119 
  return cpu;
}


#line 209 
unsigned int cpumask_local_spread(unsigned int, int);


#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  unsigned int tmp;
  
#line 272 
  ;
  
#line 272 
  tmp = cpumask_check(cpu);
  
#line 272 
  set_bit((long)tmp,(unsigned long volatile *)(& dstp->bits));
  
#line 273 
  return;
}


#line 659 
bool zalloc_cpumask_var(cpumask_var_t **, gfp_t);


#line 661 
void free_cpumask_var(cpumask_var_t);


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_add(int i, atomic_t *v);


#line 67 
static void atomic_sub(int i, atomic_t *v);


#line 98 
static void atomic_inc_0(atomic_t *v);


#line 114 
static void atomic_dec_0(atomic_t *v);


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 346 
static void ldv_spin_lock_60(spinlock_t *lock);


#line 358 
static void ldv_spin_lock_73(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_75(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 391 
static void ldv_spin_lock_bh_77(spinlock_t *lock);


#line 395 
static void ldv_spin_lock_bh_79_0(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 395 
static void ldv_spin_unlock_63(spinlock_t *lock);


#line 407 
static void ldv_spin_unlock_74(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_76(spinlock_t *lock);


#line 412  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  
#line 414 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 415 
  return;
}


#line 444 
static void ldv_spin_unlock_bh_78(spinlock_t *lock);


#line 448 
static void ldv_spin_unlock_bh_80(spinlock_t *lock);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmdebug.h"
void dump_page(struct page *, char const *);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
void __init_waitqueue_head(wait_queue_head_t *, char const *, struct lock_class_key *);


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
void __mutex_init(struct mutex *, char const *, struct lock_class_key *);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/completion.h"
__inline static void init_completion(struct completion *x)
{
  
#line 75 
  x->done = 0U;
  {
    struct lock_class_key __key;
    
#line 76 
    __init_waitqueue_head(& x->wait,"&x->wait",& __key);
  }
  
#line 78 
  return;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 284 
unsigned int jiffies_to_msecs(unsigned long const);


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void delayed_work_timer_fn(unsigned long);


#line 181 
void __init_work(struct work_struct *, int);


#line 448 
bool cancel_delayed_work_sync(struct delayed_work *);


#line 597 
static bool ldv_schedule_delayed_work_86(struct delayed_work *dwork, unsigned long delay);


#line 601 
static bool ldv_schedule_delayed_work_87(struct delayed_work *dwork, unsigned long delay);


#line 605 
static bool ldv_schedule_delayed_work_88(struct delayed_work *dwork, unsigned long delay);


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/iomap.h"
void pci_iounmap(struct pci_dev *, void *);


#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci_iomap.h"
void *pci_iomap(struct pci_dev *, int, unsigned long);


#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct page *alloc_pages_current(gfp_t, unsigned int);


#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp;
  
#line 327 
  tmp = alloc_pages_current(gfp_mask,order);
  
#line 327 
  return tmp;
}


#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  int __retres;
  
#line 848 
  __retres = dev->numa_node;
  
#line 848 
  return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 542 
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_bus_write_config_dword(struct pci_bus *, unsigned int, int, u32);


#line 904  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_write_config_dword(struct pci_dev const *dev, int where, u32 val)
{
  int tmp;
  
#line 907 
  tmp = pci_bus_write_config_dword(dev->bus,dev->devfn,where,val);
  
#line 907 
  return tmp;
}


#line 951 
int pci_enable_device(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1040 
int pci_set_power_state(struct pci_dev *, pci_power_t);


#line 1041 
pci_power_t pci_choose_state(struct pci_dev *, pm_message_t);


#line 1044 
int __pci_enable_wake(struct pci_dev *, pci_power_t, bool, bool);


#line 1053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_wake(struct pci_dev *dev, pci_power_t state, bool enable)
{
  int tmp;
  
#line 1056 
  tmp = __pci_enable_wake(dev,state,(_Bool)0,(_Bool)((bool)((int)enable) != 0));
  
#line 1056 
  return tmp;
}


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_94(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_95(struct pci_driver *ldv_func_arg1);


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page-flags.h"
__inline static int PageTail(struct page const *page)
{
  int tmp;
  
#line 400 
  tmp = constant_test_bit(15L,(unsigned long const volatile *)(& page->flags));
  
#line 400 
  return tmp;
}


#line 532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
bool __get_page_tail(struct page *);


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  int tmp_0;
  int tmp_1;
  
#line 536 
  tmp_0 = PageTail((struct page const *)page);
  
#line 536 
  if ((long)(tmp_0 != 0) != 0L) {
    bool tmp;
    
#line 537 
    tmp = __get_page_tail(page);
    
#line 537 
    if ((long)((int)tmp != 0) != 0L) 
#line 538 
                                     goto return_label; else ;
  }
  else ;
  
#line 543 
  tmp_1 = atomic_read((atomic_t const *)(& page->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count));
  
#line 543 
  if ((long)(tmp_1 <= 0) != 0L) {
    
#line 543 
    dump_page(page,"VM_BUG_ON_PAGE(");
    
#line 544 
    ldv_inline_asm();
    
#line 543 
    ;
  }
  else ;
  
#line 544 
  atomic_inc_0(& page->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count);
  return_label: 
#line 545 
                return;
}


#line 569 
void put_page(struct page *);


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 1216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
void pci_disable_msix(struct pci_dev *);


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 59 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 106 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 108 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 108 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 110 
    ldv_inline_asm();
    
#line 108 
    ;
  }
  else ;
  
#line 109 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 110 
    (*(ops->sync_single_for_cpu))(dev,addr,size,dir); else ;
  
#line 111 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  
#line 112 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 60 
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  
#line 118 
  int rc = dma_set_mask(dev,mask);
  
#line 119 
  if (rc == 0) 
#line 120 
               dma_set_coherent_mask(dev,mask); else ;
  
#line 121 
  return rc;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 1672 
int pci_enable_sriov(struct pci_dev *, int);


#line 1673 
void pci_disable_sriov(struct pci_dev *);


#line 1674 
int pci_num_vf(struct pci_dev *);


#line 1675 
int pci_vfs_assigned(struct pci_dev *);


#line 1676 
int pci_sriov_set_totalvfs(struct pci_dev *, u16);


#line 1677 
int pci_sriov_get_totalvfs(struct pci_dev *);


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  
#line 237 
  frag->size = size;
  
#line 238 
  return;
}


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_size_add(skb_frag_t *frag, int delta)
{
  
#line 242 
  frag->size += (unsigned int)delta;
  
#line 243 
  return;
}


#line 772 
void kfree_skb(struct sk_buff *);


#line 775 
void consume_skb(struct sk_buff *);


#line 842 
struct sk_buff *skb_clone(struct sk_buff *, gfp_t);


#line 852 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);


#line 862 
int skb_pad(struct sk_buff *, int);


#line 926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  
#line 928 
  skb->l4_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))(type == (unsigned int)PKT_HASH_TYPE_L4);
  
#line 929 
  skb->sw_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 930 
  skb->hash = hash;
  
#line 931 
  return;
}


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  
#line 1087 
  atomic_inc_0(& skb->users);
  
#line 1088 
  return skb;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff const *skb)
{
  int __retres;
  int dataref;
  unsigned char *tmp;
  
#line 1131 
  if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) {
    
#line 1132 
    __retres = 0;
    
#line 1132 
    goto return_label;
  }
  else ;
  
#line 1134 
  tmp = skb_end_pointer(skb);
  
#line 1134 
  dataref = atomic_read((atomic_t const *)(& ((struct skb_shared_info *)tmp)->dataref));
  
#line 1135 
  dataref = (dataref & 65535) - (dataref >> 16);
  
#line 1136 
  __retres = dataref != 1;
  return_label: 
#line 1136 
                return __retres;
}


#line 1176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_shared(struct sk_buff const *skb)
{
  int __retres;
  int tmp;
  
#line 1178 
  tmp = atomic_read(& skb->users);
  
#line 1178 
  __retres = tmp != 1;
  
#line 1178 
  return __retres;
}


#line 1194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *skb_share_check(struct sk_buff *skb, gfp_t pri)
{
  int tmp_0;
  
#line 1196 
  if ((pri & 16U) != 0U) 
#line 1196 
                         __might_sleep("include/linux/skbuff.h",1196,0); else ;
  
#line 1197 
  tmp_0 = skb_shared((struct sk_buff const *)skb);
  
#line 1197 
  if (tmp_0 != 0) {
    
#line 1198 
    struct sk_buff *nskb = skb_clone(skb,pri);
    
#line 1200 
    if ((long)(nskb != (struct sk_buff *)0) != 0L) 
#line 1201 
                                                   consume_skb(skb); else 
                                                                    
#line 1203 
                                                                    kfree_skb(skb);
    
#line 1204 
    skb = nskb;
  }
  else ;
  
#line 1206 
  return skb;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff const *skb)
{
  bool __retres;
  
#line 1569 
  __retres = (_Bool)(skb->data_len != 0U);
  
#line 1569 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1652 
  __retres = skb->head + skb->tail;
  
#line 1652 
  return __retres;
}


#line 1655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  
#line 1657 
  skb->tail = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1658 
  return;
}


#line 1660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_tail_pointer(struct sk_buff *skb, int const offset)
{
  
#line 1662 
  skb_reset_tail_pointer(skb);
  
#line 1663 
  skb->tail += (unsigned int)offset;
  
#line 1664 
  return;
}


#line 1689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
  bool tmp_1;
  
#line 1691 
  unsigned char *tmp = skb_tail_pointer((struct sk_buff const *)skb);
  
#line 1692 
  tmp_1 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 1692 
  if ((long)((int)tmp_1 != 0) != 0L) {
    
#line 1694 
    ldv_inline_asm();
    
#line 1692 
    ;
  }
  else ;
  
#line 1693 
  skb->tail += len;
  
#line 1694 
  skb->len += len;
  
#line 1695 
  return tmp;
}


#line 1698 
unsigned char *skb_push(struct sk_buff *, unsigned int);


#line 1719 
unsigned char *__pskb_pull_tail(struct sk_buff *, int);


#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  unsigned int tmp;
  unsigned char *tmp_1;
  unsigned int tmp_0;
  
#line 1737 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 1737 
  ;
  
#line 1737 
  if ((long)(tmp >= len) != 0L) {
    
#line 1738 
    __retres = 1;
    
#line 1738 
    goto return_label;
  }
  else ;
  
#line 1739 
  if ((long)(skb->len < len) != 0L) {
    
#line 1740 
    __retres = 0;
    
#line 1740 
    goto return_label;
  }
  else ;
  
#line 1741 
  tmp_0 = skb_headlen((struct sk_buff const *)skb);
  
#line 1741 
  ;
  
#line 1741 
  ;
  
#line 1741 
  tmp_1 = __pskb_pull_tail(skb,(int)(len - tmp_0));
  
#line 1741 
  __retres = tmp_1 != (unsigned char *)0U;
  return_label: 
#line 1741 
                return __retres;
}


#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1752 
  __retres = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1752 
  return __retres;
}


#line 1842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1844 
  __retres = skb->head + (int)skb->inner_network_header;
  
#line 1844 
  return __retres;
}


#line 1859  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_mac_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1861 
  __retres = skb->head + (int)skb->inner_mac_header;
  
#line 1861 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1899 
  __retres = skb->head + (int)skb->network_header;
  
#line 1899 
  return __retres;
}


#line 2045 
int ___pskb_trim(struct sk_buff *, unsigned int);


#line 2047  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_trim(struct sk_buff *skb, unsigned int len)
{
  bool tmp_0;
  
#line 2049 
  tmp_0 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 2049 
  if ((long)((int)tmp_0 != 0) != 0L) {
    {
      
#line 2050 
      int __ret_warn_on = 1;
      
#line 2050 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 2050 
                                            warn_slowpath_null("include/linux/skbuff.h",2050); else ;
      
#line 2050 
      long tmp = (long)(__ret_warn_on != 0);
    }
    
#line 2051 
    goto return_label;
  }
  else ;
  
#line 2053 
  skb->len = len;
  
#line 2054 
  skb_set_tail_pointer(skb,(int)len);
  return_label: 
#line 2055 
                return;
}


#line 2059  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  
#line 2061 
  if (skb->data_len != 0U) {
    int tmp;
    
#line 2062 
    tmp = ___pskb_trim(skb,len);
    
#line 2062 
    __retres = tmp;
    
#line 2062 
    goto return_label;
  }
  else ;
  
#line 2063 
  __skb_trim(skb,len);
  
#line 2064 
  __retres = 0;
  return_label: 
#line 2064 
                return __retres;
}


#line 2067  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int pskb_trim(struct sk_buff *skb, unsigned int len)
{
  int tmp_0;
  
#line 2069 
  if (skb->len > len) 
#line 2069 
                      tmp_0 = __pskb_trim(skb,len); else 
#line 2069 
                                                         tmp_0 = 0;
  
#line 2069 
  return tmp_0;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  
#line 2179 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  
#line 2183 
  return skb;
}


#line 2186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2189 
  tmp = __netdev_alloc_skb_ip_align(dev,length,32U);
  
#line 2189 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_frag_set_page(skb_frag_t *frag, struct page *page)
{
  
#line 2360 
  frag->page.p = page;
  
#line 2361 
  return;
}


#line 2371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_set_page(struct sk_buff *skb, int f, struct page *page)
{
  unsigned char *tmp;
  
#line 2374 
  ;
  
#line 2374 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2374 
  __skb_frag_set_page(& ((struct skb_shared_info *)tmp)->frags[f],page);
  
#line 2375 
  return;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  int __retres;
  unsigned int tmp_0;
  
#line 2430 
  int delta = 0;
  
#line 2432 
  tmp_0 = skb_headroom((struct sk_buff const *)skb);
  
#line 2432 
  ;
  
#line 2432 
  if (tmp_0 < headroom) {
    unsigned int tmp;
    
#line 2433 
    tmp = skb_headroom((struct sk_buff const *)skb);
    
#line 2433 
    delta = (int)(headroom - tmp);
  }
  else ;
  
#line 2435 
  if (delta != 0 || cloned != 0) {
    int tmp_5;
    int tmp_2;
    int tmp_4;
    {
      int tmp_1;
      
#line 2436 
      int _max1 = 32;
      
#line 2436 
      int _max2 = 64;
      
#line 2436 
      if (_max1 > _max2) 
#line 2436 
                         tmp_1 = _max1; else 
#line 2436 
                                             tmp_1 = _max2;
      
#line 2436 
      tmp_2 = tmp_1;
    }
    {
      int tmp_3;
      
#line 2436 
      int _max1_0 = 32;
      
#line 2436 
      int _max2_0 = 64;
      
#line 2436 
      if (_max1_0 > _max2_0) 
#line 2436 
                             tmp_3 = _max1_0; else 
#line 2436 
                                                   tmp_3 = _max2_0;
      
#line 2436 
      tmp_4 = tmp_3;
    }
    
#line 2436 
    ;
    
#line 2436 
    ;
    
#line 2436 
    tmp_5 = pskb_expand_head(skb,((tmp_2 + -1) + delta) & ~ (tmp_4 + -1),0,32U);
    
#line 2436 
    __retres = tmp_5;
    
#line 2436 
    goto return_label;
  }
  else ;
  
#line 2438 
  __retres = 0;
  return_label: 
#line 2438 
                return __retres;
}


#line 2468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  int tmp_0;
  int tmp;
  
#line 2470 
  tmp = skb_header_cloned((struct sk_buff const *)skb);
  
#line 2470 
  ;
  
#line 2470 
  ;
  
#line 2470 
  tmp_0 = __skb_cow(skb,headroom,tmp);
  
#line 2470 
  return tmp_0;
}


#line 2501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  
#line 2503 
  unsigned int size = skb->len;
  
#line 2505 
  if ((long)(size < len) != 0L) {
    int tmp;
    
#line 2506 
    len -= size;
    
#line 2507 
    tmp = skb_pad(skb,(int)len);
    
#line 2507 
    if (tmp != 0) {
      
#line 2508 
      __retres = -12;
      
#line 2508 
      goto return_label;
    }
    else ;
    
#line 2509 
    __skb_put(skb,len);
  }
  else ;
  
#line 2511 
  __retres = 0;
  return_label: 
#line 2511 
                return __retres;
}


#line 3295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff const *skb)
{
  u16 __retres;
  
#line 3297 
  __retres = skb->queue_mapping;
  
#line 3297 
  return __retres;
}


#line 3305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  
#line 3307 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  
#line 3308 
  return;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3386 
  tmp = skb_end_pointer(skb);
  
#line 3386 
  ;
  
#line 3386 
  __retres = (_Bool)((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U);
  
#line 3386 
  return __retres;
}


#line 3390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso_v6(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3392 
  tmp = skb_end_pointer(skb);
  
#line 3392 
  ;
  
#line 3392 
  __retres = (_Bool)(((int)((struct skb_shared_info *)tmp)->gso_type & 16) != 0);
  
#line 3392 
  return __retres;
}


#line 3426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff const *skb)
{
  
#line 3428 
  return;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  
#line 73 
  return;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hardirq.h"
void synchronize_irq(unsigned int);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_81(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_83(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static void ldv_free_irq_82(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 161 
static void ldv_free_irq_84(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 165 
static void ldv_free_irq_85(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 263 
int irq_set_affinity_hint(unsigned int, struct cpumask const *);


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 478 
void napi_hash_add(struct napi_struct *);


#line 487 
void napi_hash_del(struct napi_struct *);


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 1920 
void netif_napi_del(struct napi_struct *);


#line 2205 
static void ldv_free_netdev_90(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_93(struct net_device *ldv_func_arg1);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2535 
  i = 0U;
  
#line 2535 
  goto ldv_44844;
  ldv_44843: 
#line 2536 
  ;
  {
    
#line 2536 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2537 
    netif_tx_start_queue(txq);
  }
  
#line 2535 
  i += 1U;
  ldv_44844: 
#line 2536 
  ;
  
#line 2535 
  if (dev->num_tx_queues > i) 
#line 2537 
                              goto ldv_44843; else 
#line 2540 
                                                   goto ldv_44845;
  ldv_44845: 
#line 2541 
  ;
  
#line 2542 
  return;
}


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  
#line 2804 
  struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,(unsigned int)queue_index);
  
#line 2805 
  netif_tx_start_queue(txq);
  
#line 2806 
  return;
}


#line 2815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device const *dev, u16 queue_index)
{
  bool tmp_0;
  
#line 2818 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  
#line 2820 
  tmp_0 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
  
#line 2820 
  return tmp_0;
}


#line 2829 
void netif_wake_subqueue(struct net_device *, u16);


#line 2832 
int netif_set_xps_queue(struct net_device *, struct cpumask const *, u16);


#line 2867 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);


#line 2870 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);


#line 2892 
int netif_get_num_default_rss_queues(void);


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2936  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  
#line 2938 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  
#line 2939 
  return;
}


#line 2943 
int netif_receive_skb_sk(struct sock *, struct sk_buff *);


#line 2944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netif_receive_skb(struct sk_buff *skb)
{
  int tmp;
  
#line 2946 
  tmp = netif_receive_skb_sk(skb->sk,skb);
  
#line 2946 
  return tmp;
}


#line 2950 
struct sk_buff *napi_get_frags(struct napi_struct *);


#line 2951 
gro_result_t napi_gro_frags(struct napi_struct *);


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  
#line 3172 
  ldv_spin_lock_60(& txq->_xmit_lock);
  
#line 3173 
  txq->xmit_lock_owner = cpu;
  
#line 3174 
  return;
}


#line 3190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  
#line 3192 
  txq->xmit_lock_owner = -1;
  
#line 3193 
  ldv_spin_unlock_63(& txq->_xmit_lock);
  
#line 3194 
  return;
}


#line 3282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  unsigned int i;
  int cpu;
  int tmp_3;
  
#line 3287 
  local_bh_disable();
  {
    int pscr_ret__;
    {
      
#line 3288 
      void const *__vpp_verify = (void const *)0;
      
#line 3288 
      void const *tmp = __vpp_verify;
    }
    
#line 3288 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3288 
      ;
      {
        int pfo_ret__;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45418;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45418;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45418;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45418;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45418: 
#line 3288 
        ;
        
#line 3288 
        tmp_0 = pfo_ret__;
      }
      
#line 3288 
      pscr_ret__ = tmp_0;
      
#line 3288 
      goto ldv_45424;
      case (unsigned long)2: 
#line 3288 
      ;
      {
        int pfo_ret___0;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45428;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45428;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45428;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45428;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45428: 
#line 3288 
        ;
        
#line 3288 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3288 
      pscr_ret__ = tmp_0_0;
      
#line 3288 
      goto ldv_45424;
      case (unsigned long)4: 
#line 3288 
      ;
      {
        int pfo_ret___1;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45437;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45437;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45437;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45437;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45437: 
#line 3288 
        ;
        
#line 3288 
        tmp_1 = pfo_ret___1;
      }
      
#line 3288 
      pscr_ret__ = tmp_1;
      
#line 3288 
      goto ldv_45424;
      case (unsigned long)8: 
#line 3288 
      ;
      {
        int pfo_ret___2;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45446;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45446;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45446;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45446;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45446: 
#line 3288 
        ;
        
#line 3288 
        tmp_2 = pfo_ret___2;
      }
      
#line 3288 
      pscr_ret__ = tmp_2;
      
#line 3288 
      goto ldv_45424;
      default: 
#line 3288 
      ;
      
#line 3288 
      __bad_size_call_parameter();
      
#line 3288 
      goto ldv_45424;
    }
    ldv_45424: 
#line 3288 
    ;
    
#line 3288 
    tmp_3 = pscr_ret__;
  }
  
#line 3288 
  cpu = tmp_3;
  
#line 3289 
  i = 0U;
  
#line 3289 
  goto ldv_45456;
  ldv_45455: 
#line 3290 
  ;
  {
    
#line 3290 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3292 
    __netif_tx_lock(txq,cpu);
    
#line 3293 
    netif_tx_start_queue(txq);
    
#line 3294 
    __netif_tx_unlock(txq);
  }
  
#line 3289 
  i += 1U;
  ldv_45456: 
#line 3290 
  ;
  
#line 3289 
  if (dev->num_tx_queues > i) 
#line 3291 
                              goto ldv_45455; else 
#line 3294 
                                                   goto ldv_45457;
  ldv_45457: 
#line 3295 
  ;
  
#line 3296 
  local_bh_enable();
  
#line 3297 
  return;
}


#line 3355 
static int ldv_register_netdev_92(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_89(struct net_device *ldv_func_arg1);


#line 3549 
void netdev_rss_key_fill(void *, size_t);


#line 3730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_set_gso_max_size(struct net_device *dev, unsigned int size)
{
  
#line 3733 
  dev->gso_max_size = size;
  
#line 3734 
  return;
}


#line 3834 
void netdev_info(struct net_device const *, char const * , ...);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 47 
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_91(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 161 
  __retres = (_Bool)((unsigned int)(((int)*((u16 const *)addr) & (int)*((u16 const *)(addr + 2U))) & (int)*((u16 const *)(addr + 4U))) == 65535U);
  
#line 161 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 const *src)
{
  
#line 274 
  *((u32 *)dst) = *((u32 const *)src);
  
#line 275 
  *((u16 *)(dst + 4U)) = *((u16 const *)(src + 4U));
  
#line 276 
  return;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 const *addr1, u8 const *addr2)
{
  bool __retres;
  
#line 313 
  u32 fold = (*((u32 const *)addr1) ^ *((u32 const *)addr2)) | (unsigned int)((int)*((u16 const *)(addr1 + 4U)) ^ (int)*((u16 const *)(addr2 + 4U)));
  
#line 316 
  __retres = (_Bool)(fold == 0U);
  
#line 316 
  return __retres;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
void rtnl_lock(void);


#line 28 
void rtnl_unlock(void);


#line 115 
int ndo_dflt_bridge_getlink(struct sk_buff *, u32, u32, struct net_device *, u16, u32, u32, int, u32, int (*)(struct sk_buff *, struct net_device *, u32 ));


#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
struct nlattr *nla_find(struct nlattr const *, int, int);


#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static void *nlmsg_data(struct nlmsghdr const *nlh)
{
  void *__retres;
  
#line 294 
  __retres = (void *)nlh + 16U;
  
#line 294 
  return __retres;
}


#line 301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nlmsg_len(struct nlmsghdr const *nlh)
{
  int __retres;
  
#line 303 
  __retres = (int)(nlh->nlmsg_len + 4294967280U);
  
#line 303 
  return __retres;
}


#line 311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static struct nlattr *nlmsg_attrdata(struct nlmsghdr const *nlh, int hdrlen)
{
  struct nlattr *__retres;
  
#line 314 
  unsigned char *data = nlmsg_data(nlh);
  
#line 315 
  __retres = (struct nlattr *)(data + (((unsigned int)hdrlen + 3U) & 4294967292U));
  
#line 315 
  return __retres;
}


#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nlmsg_attrlen(struct nlmsghdr const *nlh, int hdrlen)
{
  int __retres;
  int tmp;
  
#line 325 
  tmp = nlmsg_len(nlh);
  
#line 325 
  ;
  
#line 325 
  __retres = (int)((unsigned int)tmp - (((unsigned int)hdrlen + 3U) & 4294967292U));
  
#line 325 
  return __retres;
}


#line 387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static struct nlattr *nlmsg_find_attr(struct nlmsghdr const *nlh, int hdrlen, int attrtype)
{
  struct nlattr *tmp_1;
  int tmp;
  struct nlattr *tmp_0;
  
#line 390 
  ;
  
#line 390 
  tmp = nlmsg_attrlen(nlh,hdrlen);
  
#line 390 
  tmp_0 = nlmsg_attrdata(nlh,hdrlen);
  
#line 390 
  tmp_1 = nla_find((struct nlattr const *)tmp_0,tmp,attrtype);
  
#line 390 
  return tmp_1;
}


#line 660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nla_type(struct nlattr const *nla)
{
  int __retres;
  
#line 662 
  __retres = (int)nla->nla_type & -49153;
  
#line 662 
  return __retres;
}


#line 669  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static void *nla_data(struct nlattr const *nla)
{
  void *__retres;
  
#line 671 
  __retres = (void *)nla + 4U;
  
#line 671 
  return __retres;
}


#line 678  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nla_len(struct nlattr const *nla)
{
  int __retres;
  
#line 680 
  __retres = (int)nla->nla_len + -4;
  
#line 680 
  return __retres;
}


#line 688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nla_ok(struct nlattr const *nla, int remaining)
{
  int __retres;
  
#line 691 
  __retres = ((remaining > 3 && (unsigned int)nla->nla_len > 3U) && (int)nla->nla_len <= remaining) != 0;
  
#line 691 
  return __retres;
}


#line 703  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static struct nlattr *nla_next(struct nlattr const *nla, int *remaining)
{
  struct nlattr *__retres;
  
#line 705 
  int totlen = ((int)nla->nla_len + 3) & -4;
  
#line 707 
  *remaining -= totlen;
  
#line 708 
  __retres = (struct nlattr *)nla + totlen;
  
#line 708 
  return __retres;
}


#line 1010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static u16 nla_get_u16(struct nlattr const *nla)
{
  u16 __retres;
  void *tmp;
  
#line 1012 
  tmp = nla_data(nla);
  
#line 1012 
  __retres = *((u16 *)tmp);
  
#line 1012 
  return __retres;
}


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/unaligned/packed_struct.h"
__inline static u32 __get_unaligned_cpu32(void const *p)
{
  u32 __retres;
  
#line 18 
  struct __una_u32 const *ptr = (struct __una_u32 const *)p;
  
#line 19 
  __retres = ptr->x;
  
#line 19 
  return __retres;
}


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
__inline static u32 jhash(void const *key, u32 length, u32 initval)
{
  u32 a;
  u32 b;
  u32 c;
  u32 tmp;
  u32 tmp_0;
  u32 tmp_1;
  __u32 tmp_2;
  __u32 tmp_3;
  __u32 tmp_4;
  __u32 tmp_5;
  __u32 tmp_6;
  __u32 tmp_7;
  
#line 73 
  u8 const *k = (u8 const *)key;
  
#line 76 
  c = (length + initval) + 3735928559U;
  
#line 76 
  b = c;
  
#line 76 
  a = b;
  
#line 79 
  goto ldv_49990;
  ldv_49989: 
#line 80 
  ;
  
#line 80 
  tmp = __get_unaligned_cpu32((void const *)k);
  
#line 80 
  a = tmp + a;
  
#line 81 
  tmp_0 = __get_unaligned_cpu32((void const *)(k + 4U));
  
#line 81 
  b = tmp_0 + b;
  
#line 82 
  tmp_1 = __get_unaligned_cpu32((void const *)(k + 8U));
  
#line 82 
  c = tmp_1 + c;
  
#line 83 
  a -= c;
  
#line 83 
  tmp_2 = rol32(c,4U);
  
#line 83 
  a = tmp_2 ^ a;
  
#line 83 
  c += b;
  
#line 83 
  b -= a;
  
#line 83 
  tmp_3 = rol32(a,6U);
  
#line 83 
  b = tmp_3 ^ b;
  
#line 83 
  a += c;
  
#line 83 
  c -= b;
  
#line 83 
  tmp_4 = rol32(b,8U);
  
#line 83 
  c = tmp_4 ^ c;
  
#line 83 
  b += a;
  
#line 83 
  a -= c;
  
#line 83 
  tmp_5 = rol32(c,16U);
  
#line 83 
  a = tmp_5 ^ a;
  
#line 83 
  c += b;
  
#line 83 
  b -= a;
  
#line 83 
  tmp_6 = rol32(a,19U);
  
#line 83 
  b = tmp_6 ^ b;
  
#line 83 
  a += c;
  
#line 83 
  c -= b;
  
#line 83 
  tmp_7 = rol32(b,4U);
  
#line 83 
  c = tmp_7 ^ c;
  
#line 83 
  b += a;
  
#line 84 
  length += 4294967284U;
  
#line 85 
  k += 12U;
  ldv_49990: 
#line 86 
  ;
  
#line 79 
  if (length > 12U) 
#line 81 
                    goto ldv_49989; else 
#line 84 
                                         goto ldv_49991;
  ldv_49991: 
#line 85 
  ;
  
#line 89 
  switch (length) {
    __u32 tmp_8;
    __u32 tmp_9;
    __u32 tmp_10;
    __u32 tmp_11;
    __u32 tmp_12;
    __u32 tmp_13;
    __u32 tmp_14;
    case (u32)12: 
#line 90 
    ;
    
#line 90 
    c = ((unsigned int)*(k + 11U) << 24) + c;
    case (u32)11: 
#line 91 
    ;
    
#line 91 
    c = ((unsigned int)*(k + 10U) << 16) + c;
    case (u32)10: 
#line 92 
    ;
    
#line 92 
    c = ((unsigned int)*(k + 9U) << 8) + c;
    case (u32)9: 
#line 93 
    ;
    
#line 93 
    c = (unsigned int)*(k + 8U) + c;
    case (u32)8: 
#line 94 
    ;
    
#line 94 
    b = ((unsigned int)*(k + 7U) << 24) + b;
    case (u32)7: 
#line 95 
    ;
    
#line 95 
    b = ((unsigned int)*(k + 6U) << 16) + b;
    case (u32)6: 
#line 96 
    ;
    
#line 96 
    b = ((unsigned int)*(k + 5U) << 8) + b;
    case (u32)5: 
#line 97 
    ;
    
#line 97 
    b = (unsigned int)*(k + 4U) + b;
    case (u32)4: 
#line 98 
    ;
    
#line 98 
    a = ((unsigned int)*(k + 3U) << 24) + a;
    case (u32)3: 
#line 99 
    ;
    
#line 99 
    a = ((unsigned int)*(k + 2U) << 16) + a;
    case (u32)2: 
#line 100 
    ;
    
#line 100 
    a = ((unsigned int)*(k + 1U) << 8) + a;
    case (u32)1: 
#line 101 
    ;
    
#line 101 
    a = (unsigned int)*k + a;
    
#line 102 
    c ^= b;
    
#line 102 
    tmp_8 = rol32(b,14U);
    
#line 102 
    c -= tmp_8;
    
#line 102 
    a ^= c;
    
#line 102 
    tmp_9 = rol32(c,11U);
    
#line 102 
    a -= tmp_9;
    
#line 102 
    b ^= a;
    
#line 102 
    tmp_10 = rol32(a,25U);
    
#line 102 
    b -= tmp_10;
    
#line 102 
    c ^= b;
    
#line 102 
    tmp_11 = rol32(b,16U);
    
#line 102 
    c -= tmp_11;
    
#line 102 
    a ^= c;
    
#line 102 
    tmp_12 = rol32(c,4U);
    
#line 102 
    a -= tmp_12;
    
#line 102 
    b ^= a;
    
#line 102 
    tmp_13 = rol32(a,14U);
    
#line 102 
    b -= tmp_13;
    
#line 102 
    c ^= b;
    
#line 102 
    tmp_14 = rol32(b,24U);
    
#line 102 
    c -= tmp_14;
    case (u32)0: 
#line 103 
    ;
    
#line 104 
    goto ldv_50005;
  }
  ldv_50005: 
#line 107 
  ;
  
#line 107 
  return c;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 25 
  tmp = (struct iphdr *)skb_network_header(skb);
  
#line 25 
  return tmp;
}


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *inner_ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 30 
  tmp = (struct iphdr *)skb_inner_network_header(skb);
  
#line 30 
  return tmp;
}


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/icmpv6.h"
__inline static struct icmp6hdr *icmp6_hdr(struct sk_buff const *skb)
{
  struct icmp6hdr *tmp;
  
#line 9 
  tmp = (struct icmp6hdr *)skb_transport_header(skb);
  
#line 9 
  return tmp;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/udp.h"
__inline static struct udphdr *udp_hdr(struct sk_buff const *skb)
{
  struct udphdr *tmp;
  
#line 27 
  tmp = (struct udphdr *)skb_transport_header(skb);
  
#line 27 
  return tmp;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 76 
  tmp = (struct ipv6hdr *)skb_network_header(skb);
  
#line 76 
  return tmp;
}


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *inner_ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 81 
  tmp = (struct ipv6hdr *)skb_inner_network_header(skb);
  
#line 81 
  return tmp;
}


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static int __vlan_insert_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  int __retres;
  struct vlan_ethhdr *veth;
  int tmp;
  
#line 300 
  tmp = skb_cow_head(skb,4U);
  
#line 300 
  if (tmp < 0) {
    
#line 301 
    __retres = -12;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 303 
  veth = (struct vlan_ethhdr *)skb_push(skb,4U);
  
#line 306 
  memmove((void *)skb->data,(void const *)(skb->data + 4U),12UL);
  
#line 307 
  skb->mac_header = (unsigned short)((unsigned int)skb->mac_header + 65532U);
  
#line 310 
  veth->h_vlan_proto = vlan_proto;
  
#line 313 
  if (0 != 0) 
#line 313 
              veth->h_vlan_TCI = (unsigned short)(((int)vlan_tci << 8) | ((int)vlan_tci >> 8)); else 
                                                                    
#line 313 
                                                                    veth->h_vlan_TCI = __fswab16((unsigned short)((int)vlan_tci));
  
#line 315 
  __retres = 0;
  return_label: 
#line 315 
                return __retres;
}


#line 332  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static struct sk_buff *vlan_insert_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  struct sk_buff *__retres;
  int err;
  
#line 337 
  err = __vlan_insert_tag(skb,(unsigned short)((int)vlan_proto),(unsigned short)((int)vlan_tci));
  
#line 338 
  if (err != 0) {
    
#line 339 
    dev_kfree_skb_any(skb);
    
#line 340 
    __retres = (struct sk_buff *)0;
    
#line 340 
    goto return_label;
  }
  else ;
  
#line 342 
  __retres = skb;
  return_label: 
#line 342 
                return __retres;
}


#line 357  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static struct sk_buff *vlan_insert_tag_set_proto(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 361 
  skb = vlan_insert_tag(skb,(unsigned short)((int)vlan_proto),(unsigned short)((int)vlan_tci));
  
#line 362 
  if (skb != (struct sk_buff *)0) 
#line 363 
                                  skb->protocol = vlan_proto; else ;
  
#line 364 
  return skb;
}


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  __be16 __retres;
  
#line 484 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  
#line 490 
  if ((unsigned int)type == 129U || (unsigned int)type == 43144U) {
    
#line 491 
    if (vlan_depth != 0U) {
      int tmp;
      {
        
#line 492 
        int __ret_warn_on = vlan_depth <= 3U;
        
#line 492 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 492 
                                              warn_slowpath_null("include/linux/if_vlan.h",492); else ;
        
#line 492 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 492 
      if ((long)tmp != 0L) {
        
#line 493 
        __retres = (unsigned short)0U;
        
#line 493 
        goto return_label;
      }
      else ;
      
#line 494 
      vlan_depth += 4294967292U;
    }
    else 
#line 496 
         vlan_depth = 14U;
    ldv_55511: 
#line 497 
    ;
    {
      struct vlan_hdr *vh;
      int tmp_0;
      
#line 501 
      tmp_0 = pskb_may_pull(skb,vlan_depth + 4U);
      
#line 501 
      if ((long)(tmp_0 == 0) != 0L) {
        
#line 503 
        __retres = (unsigned short)0U;
        
#line 503 
        goto return_label;
      }
      else ;
      
#line 505 
      vh = (struct vlan_hdr *)(skb->data + vlan_depth);
      
#line 506 
      type = vh->h_vlan_encapsulated_proto;
      
#line 507 
      vlan_depth += 4U;
    }
    
#line 509 
    if ((unsigned int)type == 129U || (unsigned int)type == 43144U) 
#line 511 
                                                                    goto ldv_55511; else 
                                                                    
#line 514 
                                                                    goto ldv_55512;
    ldv_55512: 
#line 515 
    ;
  }
  else ;
  
#line 512 
  if (depth != (int *)0) 
#line 513 
                         *depth = (int)vlan_depth; else ;
  
#line 515 
  __retres = type;
  return_label: 
#line 515 
                return __retres;
}


#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  __be16 tmp;
  
#line 527 
  tmp = __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
  
#line 527 
  return tmp;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/firmware.h"
int request_firmware(struct firmware const **, char const *, struct device *);


#line 51 
void release_firmware(struct firmware const *);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hwmon.h"
struct device *devm_hwmon_device_register_with_groups(struct device *, char const *, void *, struct attribute_group const **);


#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void index_adv(u16 *index, u16 val, u16 limit)
{
  u32 tmp;
  
#line 136 
  tmp = MODULO((unsigned short)((int)*index + (int)val),(unsigned short)((int)limit));
  
#line 136 
  *index = (unsigned short)tmp;
  
#line 137 
  return;
}


#line 774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static u8 is_udp_pkt(struct sk_buff *skb)
{
  struct iphdr *tmp_2;
  
#line 776 
  u8 val = (unsigned char)0U;
  
#line 778 
  tmp_2 = ip_hdr((struct sk_buff const *)skb);
  
#line 778 
  ;
  
#line 778 
  if ((unsigned int)*((unsigned char *)tmp_2 + 0UL) == 64U) {
    struct iphdr *tmp;
    
#line 779 
    tmp = ip_hdr((struct sk_buff const *)skb);
    
#line 779 
    val = (unsigned char)((unsigned int)tmp->protocol == 17U);
  }
  else {
    struct iphdr *tmp_1;
    
#line 780 
    tmp_1 = ip_hdr((struct sk_buff const *)skb);
    
#line 780 
    ;
    
#line 780 
    if ((unsigned int)*((unsigned char *)tmp_1 + 0UL) == 96U) {
      struct ipv6hdr *tmp_0;
      
#line 781 
      tmp_0 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 781 
      val = (unsigned char)((unsigned int)tmp_0->nexthdr == 17U);
    }
    else ;
  }
  
#line 783 
  return val;
}


#line 786  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static bool is_ipv4_pkt(struct sk_buff *skb)
{
  bool __retres;
  int tmp_0;
  
#line 788 
  if ((unsigned int)skb->protocol == 8U) {
    struct iphdr *tmp;
    
#line 788 
    tmp = ip_hdr((struct sk_buff const *)skb);
    
#line 788 
    ;
    
#line 788 
    if ((unsigned int)*((unsigned char *)tmp + 0UL) == 64U) 
#line 788 
                                                            tmp_0 = 1; else 
                                                                    
#line 788 
                                                                    tmp_0 = 0;
  }
  else 
#line 788 
       tmp_0 = 0;
  
#line 788 
  __retres = (_Bool)(tmp_0 != 0);
  
#line 788 
  return __retres;
}


#line 813  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be.h"
__inline static void be_clear_error(struct be_adapter *adapter, int err_type)
{
  
#line 815 
  adapter->err_flags = (unsigned char)((int)adapter->err_flags & ~ err_type);
  
#line 816 
  return;
}


#line 832 
int be_poll(struct napi_struct *napi, int budget);


#line 961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_cmds.h"
__inline static struct lancer_pport_stats *pport_stats_from_cmd(struct be_adapter *adapter)
{
  struct lancer_pport_stats *__retres;
  
#line 963 
  struct lancer_cmd_resp_pport_stats *cmd = (struct lancer_cmd_resp_pport_stats *)adapter->stats_cmd.va;
  
#line 964 
  __retres = & cmd->pport_stats;
  
#line 964 
  return __retres;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/aer.h"
int pci_enable_pcie_error_reporting(struct pci_dev *);


#line 43 
int pci_disable_pcie_error_reporting(struct pci_dev *);


#line 44 
int pci_cleanup_aer_uncorrect_error_status(struct pci_dev *);


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/busy_poll.h"
__inline static void skb_mark_napi_id(struct sk_buff *skb, struct napi_struct *napi)
{
  
#line 124 
  skb->__anonCompField_sk_buff_72.napi_id = napi->napi_id;
  
#line 125 
  return;
}


#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/vxlan.h"
void vxlan_get_rx_port(struct net_device *);


#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static unsigned int num_vfs;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static ushort rx_frag_size = (unsigned short)2048U;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct pci_device_id const be_dev_ids[9U] = {{.vendor = 6562U, .device = 529U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 6562U, .device = 545U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 6562U, .device = 1792U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 6562U, .device = 1808U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4319U, .device = 57888U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4319U, .device = 57896U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4319U, .device = 1824U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4319U, .device = 1832U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
struct pci_device_id const __mod_pci__be_dev_ids_device_table[9U];

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static char const * const ue_status_low_desc[32U] = {"CEV", "CTX", "DBUF", "ERX", "Host", "MPU", "NDMA", "PTC ", "RDMA ", "RXF ", "RXIPS ", "RXULP0 ", "RXULP1 ", "RXULP2 ", "TIM ", "TPOST ", "TPRE ", "TXIPS ", "TXULP0 ", "TXULP1 ", "UC ", "WDMA ", "TXULP2 ", "HOST1 ", "P0_OB_LINK ", "P1_OB_LINK ", "HOST_GPIO ", "MBOX ", "ERX2 ", "SPARE ", "JTAG ", "MPU_INTPEND "};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static char const * const ue_status_hi_desc[32U] = {"LPCMEMHOST", "MGMT_MAC", "PCS0ONLINE", "MPU_IRAM", "PCS1ONLINE", "PCTL0", "PCTL1", "PMEM", "RR", "TXPB", "RXPP", "XAUI", "TXP", "ARM", "IPC", "HOST2", "HOST3", "HOST4", "HOST5", "HOST6", "HOST7", "ECRC", "Poison TLP", "NETC", "PERIPH", "LLTXULP", "D2P", "RCON", "LDMA", "LLTXP", "LLTXPB", "Unknown"};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_queue_free(struct be_adapter *adapter, struct be_queue_info *q)
{
  
#line 130 
  struct be_dma_mem *mem = & q->dma_mem;
  
#line 132 
  if (mem->va != (void *)0) {
    
#line 133 
    dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)mem->size,mem->va,mem->dma,(struct dma_attrs *)0);
    
#line 135 
    mem->va = (void *)0;
  }
  else ;
  
#line 137 
  return;
}


#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_queue_alloc(struct be_adapter *adapter, struct be_queue_info *q, u16 len, u16 entry_size)
{
  int __retres;
  
#line 142 
  struct be_dma_mem *mem = & q->dma_mem;
  
#line 144 
  memset((void *)q,0,40UL);
  
#line 145 
  q->len = len;
  
#line 146 
  q->entry_size = entry_size;
  
#line 147 
  mem->size = (unsigned int)((int)len * (int)entry_size);
  
#line 148 
  mem->va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)mem->size,& mem->dma,208U);
  
#line 150 
  if (mem->va == (void *)0) {
    
#line 151 
    __retres = -12;
    
#line 151 
    goto return_label;
  }
  else ;
  
#line 152 
  __retres = 0;
  return_label: 
#line 152 
                return __retres;
}


#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_reg_intr_set(struct be_adapter *adapter, bool enable)
{
  u32 reg;
  u32 enabled;
  
#line 159 
  pci_read_config_dword((struct pci_dev const *)adapter->pdev,252,& reg);
  
#line 161 
  enabled = reg & 536870912U;
  
#line 163 
  if (enabled == 0U && (int)enable != 0) 
#line 164 
                                         reg |= 536870912U;
  else 
    
#line 165 
    if (enabled != 0U && ! enable) 
#line 166 
                                   reg &= 3758096383U; else 
#line 168 
                                                            goto return_label;
  
#line 170 
  pci_write_config_dword((struct pci_dev const *)adapter->pdev,252,reg);
  return_label: 
#line 171 
                return;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_intr_set(struct be_adapter *adapter, bool enable)
{
  u8 tmp;
  
#line 176 
  int status = 0;
  
#line 179 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    
#line 180 
    goto return_label; else ;
  
#line 182 
  tmp = be_check_error(adapter,1U);
  
#line 182 
  if ((unsigned int)tmp != 0U) 
#line 183 
                               goto return_label; else ;
  
#line 185 
  status = be_cmd_intr_set(adapter,(_Bool)((bool)((int)enable) != 0));
  
#line 186 
  if (status != 0) 
#line 187 
                   be_reg_intr_set(adapter,(_Bool)((bool)((int)enable) != 0)); else ;
  return_label: 
#line 188 
                return;
}


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rxq_notify(struct be_adapter *adapter, u16 qid, u16 posted)
{
  u8 tmp;
  
#line 192 
  u32 val = 0U;
  
#line 194 
  tmp = be_check_error(adapter,3U);
  
#line 194 
  if ((unsigned int)tmp != 0U) 
#line 195 
                               goto return_label; else ;
  
#line 197 
  val = ((unsigned int)qid & 1023U) | val;
  
#line 198 
  val = (unsigned int)((int)posted << 24) | val;
  
#line 199 
  ldv_inline_asm();
  
#line 201 
  iowrite32(val,(void *)(adapter->db + 256U));
  return_label: 
#line 202 
                return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_txq_notify(struct be_adapter *adapter, struct be_tx_obj *txo, u16 posted)
{
  u8 tmp;
  
#line 207 
  u32 val = 0U;
  
#line 209 
  tmp = be_check_error(adapter,3U);
  
#line 209 
  if ((unsigned int)tmp != 0U) 
#line 210 
                               goto return_label; else ;
  
#line 212 
  val = ((unsigned int)txo->q.id & 2047U) | val;
  
#line 213 
  val = ((unsigned int)((int)posted << 16) & 1073676288U) | val;
  
#line 214 
  ldv_inline_asm();
  
#line 216 
  iowrite32(val,(void *)(adapter->db + txo->db_offset));
  return_label: 
#line 217 
                return;
}


#line 219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_eq_notify(struct be_adapter *adapter, u16 qid, bool arm, bool clear_int, u16 num_popped, u32 eq_delay_mult_enc)
{
  u8 tmp;
  
#line 223 
  u32 val = 0U;
  
#line 225 
  val = ((unsigned int)qid & 511U) | val;
  
#line 226 
  val = ((unsigned int)((int)qid << 2) & 63488U) | val;
  
#line 228 
  tmp = be_check_error(adapter,3U);
  
#line 228 
  if ((unsigned int)tmp != 0U) 
#line 229 
                               goto return_label; else ;
  
#line 231 
  if ((int)arm != 0) 
#line 232 
                     val |= 536870912U; else ;
  
#line 233 
  if ((int)clear_int != 0) 
#line 234 
                           val |= 512U; else ;
  
#line 235 
  val |= 1024U;
  
#line 236 
  val = (unsigned int)((int)num_popped << 16) | val;
  
#line 237 
  val = (eq_delay_mult_enc << 30) | val;
  
#line 238 
  iowrite32(val,(void *)(adapter->db + 288U));
  return_label: 
#line 239 
                return;
}


#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
void be_cq_notify(struct be_adapter *adapter, u16 qid, bool arm, u16 num_popped)
{
  u8 tmp;
  
#line 243 
  u32 val = 0U;
  
#line 245 
  val = ((unsigned int)qid & 1023U) | val;
  
#line 246 
  val = ((unsigned int)((int)qid << 1) & 63488U) | val;
  
#line 249 
  tmp = be_check_error(adapter,3U);
  
#line 249 
  if ((unsigned int)tmp != 0U) 
#line 250 
                               goto return_label; else ;
  
#line 252 
  if ((int)arm != 0) 
#line 253 
                     val |= 536870912U; else ;
  
#line 254 
  val = (unsigned int)((int)num_popped << 16) | val;
  
#line 255 
  iowrite32(val,(void *)(adapter->db + 288U));
  return_label: 
#line 256 
                return;
}


#line 258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_mac_addr_set(struct net_device *netdev, void *p)
{
  int __retres;
  int status;
  u8 mac[6U];
  int tmp_1;
  bool tmp_0;
  bool tmp_2;
  int tmp_4;
  bool tmp_3;
  int tmp_6;
  bool tmp_5;
  
#line 260 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 261 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 262 
  struct sockaddr *addr = (struct sockaddr *)p;
  
#line 265 
  u32 old_pmac_id = *(adapter->pmac_id);
  
#line 265 
  u32 curr_pmac_id = 0U;
  
#line 267 
  tmp_0 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 267 
  if (tmp_0) 
#line 267 
             tmp_1 = 0; else 
#line 267 
                             tmp_1 = 1;
  
#line 267 
  if (tmp_1) {
    
#line 268 
    __retres = -99;
    
#line 268 
    goto return_label;
  }
  else ;
  
#line 273 
  tmp_2 = ether_addr_equal((u8 const *)(& addr->sa_data),(u8 const *)netdev->dev_addr);
  
#line 273 
  if ((int)tmp_2 != 0) {
    
#line 274 
    __retres = 0;
    
#line 274 
    goto return_label;
  }
  else ;
  
#line 277 
  tmp_3 = netif_running((struct net_device const *)netdev);
  
#line 277 
  if (tmp_3) 
#line 277 
             tmp_4 = 0; else 
#line 277 
                             tmp_4 = 1;
  
#line 277 
  if (tmp_4) 
#line 278 
             goto done; else ;
  
#line 286 
  status = be_cmd_pmac_add(adapter,(u8 *)(& addr->sa_data),(unsigned int)adapter->if_handle,adapter->pmac_id,0U);
  
#line 288 
  if (status == 0) {
    
#line 289 
    curr_pmac_id = *(adapter->pmac_id);
    
#line 294 
    if (*(adapter->pmac_id) != old_pmac_id) 
#line 295 
                                            be_cmd_pmac_del(adapter,(unsigned int)adapter->if_handle,(int)old_pmac_id,0U); else ;
  }
  else ;
  
#line 302 
  status = be_cmd_get_active_mac(adapter,curr_pmac_id,(u8 *)(& mac),(unsigned int)adapter->if_handle,(_Bool)1,0U);
  
#line 304 
  if (status != 0) 
#line 305 
                   goto err; else ;
  
#line 310 
  tmp_5 = ether_addr_equal((u8 const *)(& addr->sa_data),(u8 const *)(& mac));
  
#line 310 
  if (tmp_5) 
#line 310 
             tmp_6 = 0; else 
#line 310 
                             tmp_6 = 1;
  
#line 310 
  if (tmp_6) {
    
#line 311 
    status = -1;
    
#line 312 
    goto err;
  }
  else ;
  done: 
#line 314 
  ;
  
#line 315 
  ether_addr_copy(netdev->dev_addr,(u8 const *)(& addr->sa_data));
  
#line 316 
  _dev_info((struct device const *)dev,"MAC address changed to %pM\n",(char *)(& addr->sa_data));
  
#line 317 
  __retres = 0;
  
#line 317 
  goto return_label;
  err: 
#line 318 
  ;
  
#line 319 
  dev_warn((struct device const *)dev,"MAC address change to %pM failed\n",(char *)(& addr->sa_data));
  
#line 320 
  __retres = status;
  return_label: 
#line 320 
                return __retres;
}


#line 324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void *hw_stats_from_cmd(struct be_adapter *adapter)
{
  void *__retres;
  
#line 326 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) {
    
#line 327 
    struct be_cmd_resp_get_stats_v0 *cmd = (struct be_cmd_resp_get_stats_v0 *)adapter->stats_cmd.va;
    
#line 329 
    __retres = (void *)(& cmd->hw_stats);
    
#line 329 
    goto return_label;
  }
  else 
    
#line 330 
    if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
      
#line 331 
      struct be_cmd_resp_get_stats_v1 *cmd_0 = (struct be_cmd_resp_get_stats_v1 *)adapter->stats_cmd.va;
      
#line 333 
      __retres = (void *)(& cmd_0->hw_stats);
      
#line 333 
      goto return_label;
    }
    else {
      
#line 335 
      struct be_cmd_resp_get_stats_v2 *cmd_1 = (struct be_cmd_resp_get_stats_v2 *)adapter->stats_cmd.va;
      
#line 337 
      __retres = (void *)(& cmd_1->hw_stats);
      
#line 337 
      goto return_label;
    }
  return_label: 
#line 326 
                return __retres;
}


#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void *be_erx_stats_from_cmd(struct be_adapter *adapter)
{
  void *__retres;
  
#line 344 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) {
    
#line 345 
    struct be_hw_stats_v0 *hw_stats = hw_stats_from_cmd(adapter);
    
#line 347 
    __retres = (void *)(& hw_stats->erx);
    
#line 347 
    goto return_label;
  }
  else 
    
#line 348 
    if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
      
#line 349 
      struct be_hw_stats_v1 *hw_stats_0 = hw_stats_from_cmd(adapter);
      
#line 351 
      __retres = (void *)(& hw_stats_0->erx);
      
#line 351 
      goto return_label;
    }
    else {
      
#line 353 
      struct be_hw_stats_v2 *hw_stats_1 = hw_stats_from_cmd(adapter);
      
#line 355 
      __retres = (void *)(& hw_stats_1->erx);
      
#line 355 
      goto return_label;
    }
  return_label: 
#line 344 
                return __retres;
}


#line 359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_be_v0_stats(struct be_adapter *adapter)
{
  
#line 361 
  struct be_hw_stats_v0 *hw_stats = hw_stats_from_cmd(adapter);
  
#line 362 
  struct be_pmem_stats *pmem_sts = & hw_stats->pmem;
  
#line 363 
  struct be_rxf_stats_v0 *rxf_stats = & hw_stats->rxf;
  
#line 364 
  struct be_port_rxf_stats_v0 *port_stats = & rxf_stats->port[adapter->port_num];
  
#line 366 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  
#line 368 
  swap_dws((void *)hw_stats,1060);
  
#line 369 
  drvs->rx_pause_frames = port_stats->rx_pause_frames;
  
#line 370 
  drvs->rx_crc_errors = port_stats->rx_crc_errors;
  
#line 371 
  drvs->rx_control_frames = port_stats->rx_control_frames;
  
#line 372 
  drvs->rx_in_range_errors = port_stats->rx_in_range_errors;
  
#line 373 
  drvs->rx_frame_too_long = port_stats->rx_frame_too_long;
  
#line 374 
  drvs->rx_dropped_runt = port_stats->rx_dropped_runt;
  
#line 375 
  drvs->rx_ip_checksum_errs = port_stats->rx_ip_checksum_errs;
  
#line 376 
  drvs->rx_tcp_checksum_errs = port_stats->rx_tcp_checksum_errs;
  
#line 377 
  drvs->rx_udp_checksum_errs = port_stats->rx_udp_checksum_errs;
  
#line 378 
  drvs->rxpp_fifo_overflow_drop = port_stats->rx_fifo_overflow;
  
#line 379 
  drvs->rx_dropped_tcp_length = port_stats->rx_dropped_tcp_length;
  
#line 380 
  drvs->rx_dropped_too_small = port_stats->rx_dropped_too_small;
  
#line 381 
  drvs->rx_dropped_too_short = port_stats->rx_dropped_too_short;
  
#line 382 
  drvs->rx_out_range_errors = port_stats->rx_out_range_errors;
  
#line 383 
  drvs->rx_input_fifo_overflow_drop = port_stats->rx_input_fifo_overflow;
  
#line 384 
  drvs->rx_dropped_header_too_small = port_stats->rx_dropped_header_too_small;
  
#line 386 
  drvs->rx_address_filtered = port_stats->rx_address_filtered + port_stats->rx_vlan_filtered;
  
#line 389 
  drvs->rx_alignment_symbol_errors = port_stats->rx_alignment_symbol_errors;
  
#line 392 
  drvs->tx_pauseframes = port_stats->tx_pauseframes;
  
#line 393 
  drvs->tx_controlframes = port_stats->tx_controlframes;
  
#line 395 
  if (adapter->port_num != 0U) 
#line 396 
                               drvs->jabber_events = rxf_stats->port1_jabber_events; else 
                                                                    
#line 398 
                                                                    drvs->jabber_events = rxf_stats->port0_jabber_events;
  
#line 399 
  drvs->rx_drops_no_pbuf = rxf_stats->rx_drops_no_pbuf;
  
#line 400 
  drvs->rx_drops_no_erx_descr = rxf_stats->rx_drops_no_erx_descr;
  
#line 401 
  drvs->forwarded_packets = rxf_stats->forwarded_packets;
  
#line 402 
  drvs->rx_drops_mtu = rxf_stats->rx_drops_mtu;
  
#line 403 
  drvs->rx_drops_no_tpre_descr = rxf_stats->rx_drops_no_tpre_descr;
  
#line 404 
  drvs->rx_drops_too_many_frags = rxf_stats->rx_drops_too_many_frags;
  
#line 405 
  adapter->drv_stats.eth_red_drops = pmem_sts->eth_red_drops;
  
#line 406 
  return;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_be_v1_stats(struct be_adapter *adapter)
{
  
#line 410 
  struct be_hw_stats_v1 *hw_stats = hw_stats_from_cmd(adapter);
  
#line 411 
  struct be_pmem_stats *pmem_sts = & hw_stats->pmem;
  
#line 412 
  struct be_rxf_stats_v1 *rxf_stats = & hw_stats->rxf;
  
#line 413 
  struct be_port_rxf_stats_v1 *port_stats = & rxf_stats->port[adapter->port_num];
  
#line 415 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  
#line 417 
  swap_dws((void *)hw_stats,1848);
  
#line 418 
  drvs->pmem_fifo_overflow_drop = port_stats->pmem_fifo_overflow_drop;
  
#line 419 
  drvs->rx_priority_pause_frames = port_stats->rx_priority_pause_frames;
  
#line 420 
  drvs->rx_pause_frames = port_stats->rx_pause_frames;
  
#line 421 
  drvs->rx_crc_errors = port_stats->rx_crc_errors;
  
#line 422 
  drvs->rx_control_frames = port_stats->rx_control_frames;
  
#line 423 
  drvs->rx_in_range_errors = port_stats->rx_in_range_errors;
  
#line 424 
  drvs->rx_frame_too_long = port_stats->rx_frame_too_long;
  
#line 425 
  drvs->rx_dropped_runt = port_stats->rx_dropped_runt;
  
#line 426 
  drvs->rx_ip_checksum_errs = port_stats->rx_ip_checksum_errs;
  
#line 427 
  drvs->rx_tcp_checksum_errs = port_stats->rx_tcp_checksum_errs;
  
#line 428 
  drvs->rx_udp_checksum_errs = port_stats->rx_udp_checksum_errs;
  
#line 429 
  drvs->rx_dropped_tcp_length = port_stats->rx_dropped_tcp_length;
  
#line 430 
  drvs->rx_dropped_too_small = port_stats->rx_dropped_too_small;
  
#line 431 
  drvs->rx_dropped_too_short = port_stats->rx_dropped_too_short;
  
#line 432 
  drvs->rx_out_range_errors = port_stats->rx_out_range_errors;
  
#line 433 
  drvs->rx_dropped_header_too_small = port_stats->rx_dropped_header_too_small;
  
#line 435 
  drvs->rx_input_fifo_overflow_drop = port_stats->rx_input_fifo_overflow_drop;
  
#line 437 
  drvs->rx_address_filtered = port_stats->rx_address_filtered;
  
#line 438 
  drvs->rx_alignment_symbol_errors = port_stats->rx_alignment_symbol_errors;
  
#line 440 
  drvs->rxpp_fifo_overflow_drop = port_stats->rxpp_fifo_overflow_drop;
  
#line 441 
  drvs->tx_pauseframes = port_stats->tx_pauseframes;
  
#line 442 
  drvs->tx_controlframes = port_stats->tx_controlframes;
  
#line 443 
  drvs->tx_priority_pauseframes = port_stats->tx_priority_pauseframes;
  
#line 444 
  drvs->jabber_events = port_stats->jabber_events;
  
#line 445 
  drvs->rx_drops_no_pbuf = rxf_stats->rx_drops_no_pbuf;
  
#line 446 
  drvs->rx_drops_no_erx_descr = rxf_stats->rx_drops_no_erx_descr;
  
#line 447 
  drvs->forwarded_packets = rxf_stats->forwarded_packets;
  
#line 448 
  drvs->rx_drops_mtu = rxf_stats->rx_drops_mtu;
  
#line 449 
  drvs->rx_drops_no_tpre_descr = rxf_stats->rx_drops_no_tpre_descr;
  
#line 450 
  drvs->rx_drops_too_many_frags = rxf_stats->rx_drops_too_many_frags;
  
#line 451 
  adapter->drv_stats.eth_red_drops = pmem_sts->eth_red_drops;
  
#line 452 
  return;
}


#line 454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_be_v2_stats(struct be_adapter *adapter)
{
  
#line 456 
  struct be_hw_stats_v2 *hw_stats = hw_stats_from_cmd(adapter);
  
#line 457 
  struct be_pmem_stats *pmem_sts = & hw_stats->pmem;
  
#line 458 
  struct be_rxf_stats_v2 *rxf_stats = & hw_stats->rxf;
  
#line 459 
  struct be_port_rxf_stats_v2 *port_stats = & rxf_stats->port[adapter->port_num];
  
#line 461 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  
#line 463 
  swap_dws((void *)hw_stats,2680);
  
#line 464 
  drvs->pmem_fifo_overflow_drop = port_stats->pmem_fifo_overflow_drop;
  
#line 465 
  drvs->rx_priority_pause_frames = port_stats->rx_priority_pause_frames;
  
#line 466 
  drvs->rx_pause_frames = port_stats->rx_pause_frames;
  
#line 467 
  drvs->rx_crc_errors = port_stats->rx_crc_errors;
  
#line 468 
  drvs->rx_control_frames = port_stats->rx_control_frames;
  
#line 469 
  drvs->rx_in_range_errors = port_stats->rx_in_range_errors;
  
#line 470 
  drvs->rx_frame_too_long = port_stats->rx_frame_too_long;
  
#line 471 
  drvs->rx_dropped_runt = port_stats->rx_dropped_runt;
  
#line 472 
  drvs->rx_ip_checksum_errs = port_stats->rx_ip_checksum_errs;
  
#line 473 
  drvs->rx_tcp_checksum_errs = port_stats->rx_tcp_checksum_errs;
  
#line 474 
  drvs->rx_udp_checksum_errs = port_stats->rx_udp_checksum_errs;
  
#line 475 
  drvs->rx_dropped_tcp_length = port_stats->rx_dropped_tcp_length;
  
#line 476 
  drvs->rx_dropped_too_small = port_stats->rx_dropped_too_small;
  
#line 477 
  drvs->rx_dropped_too_short = port_stats->rx_dropped_too_short;
  
#line 478 
  drvs->rx_out_range_errors = port_stats->rx_out_range_errors;
  
#line 479 
  drvs->rx_dropped_header_too_small = port_stats->rx_dropped_header_too_small;
  
#line 481 
  drvs->rx_input_fifo_overflow_drop = port_stats->rx_input_fifo_overflow_drop;
  
#line 483 
  drvs->rx_address_filtered = port_stats->rx_address_filtered;
  
#line 484 
  drvs->rx_alignment_symbol_errors = port_stats->rx_alignment_symbol_errors;
  
#line 486 
  drvs->rxpp_fifo_overflow_drop = port_stats->rxpp_fifo_overflow_drop;
  
#line 487 
  drvs->tx_pauseframes = port_stats->tx_pauseframes;
  
#line 488 
  drvs->tx_controlframes = port_stats->tx_controlframes;
  
#line 489 
  drvs->tx_priority_pauseframes = port_stats->tx_priority_pauseframes;
  
#line 490 
  drvs->jabber_events = port_stats->jabber_events;
  
#line 491 
  drvs->rx_drops_no_pbuf = rxf_stats->rx_drops_no_pbuf;
  
#line 492 
  drvs->rx_drops_no_erx_descr = rxf_stats->rx_drops_no_erx_descr;
  
#line 493 
  drvs->forwarded_packets = rxf_stats->forwarded_packets;
  
#line 494 
  drvs->rx_drops_mtu = rxf_stats->rx_drops_mtu;
  
#line 495 
  drvs->rx_drops_no_tpre_descr = rxf_stats->rx_drops_no_tpre_descr;
  
#line 496 
  drvs->rx_drops_too_many_frags = rxf_stats->rx_drops_too_many_frags;
  
#line 497 
  adapter->drv_stats.eth_red_drops = pmem_sts->eth_red_drops;
  
#line 498 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    
#line 499 
    drvs->rx_roce_bytes_lsd = port_stats->roce_bytes_received_lsd;
    
#line 500 
    drvs->rx_roce_bytes_msd = port_stats->roce_bytes_received_msd;
    
#line 501 
    drvs->rx_roce_frames = port_stats->roce_frames_received;
    
#line 502 
    drvs->roce_drops_crc = port_stats->roce_drops_crc;
    
#line 503 
    drvs->roce_drops_payload_len = port_stats->roce_drops_payload_len;
  }
  else ;
  
#line 506 
  return;
}


#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_lancer_stats(struct be_adapter *adapter)
{
  
#line 510 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  
#line 511 
  struct lancer_pport_stats *pport_stats = pport_stats_from_cmd(adapter);
  
#line 513 
  swap_dws((void *)pport_stats,656);
  
#line 514 
  drvs->rx_pause_frames = pport_stats->rx_pause_frames_lo;
  
#line 515 
  drvs->rx_crc_errors = pport_stats->rx_crc_errors_lo;
  
#line 516 
  drvs->rx_control_frames = pport_stats->rx_control_frames_lo;
  
#line 517 
  drvs->rx_in_range_errors = pport_stats->rx_in_range_errors;
  
#line 518 
  drvs->rx_frame_too_long = pport_stats->rx_frames_too_long_lo;
  
#line 519 
  drvs->rx_dropped_runt = pport_stats->rx_dropped_runt;
  
#line 520 
  drvs->rx_ip_checksum_errs = pport_stats->rx_ip_checksum_errors;
  
#line 521 
  drvs->rx_tcp_checksum_errs = pport_stats->rx_tcp_checksum_errors;
  
#line 522 
  drvs->rx_udp_checksum_errs = pport_stats->rx_udp_checksum_errors;
  
#line 523 
  drvs->rx_dropped_tcp_length = pport_stats->rx_dropped_invalid_tcp_length;
  
#line 525 
  drvs->rx_dropped_too_small = pport_stats->rx_dropped_too_small;
  
#line 526 
  drvs->rx_dropped_too_short = pport_stats->rx_dropped_too_short;
  
#line 527 
  drvs->rx_out_range_errors = pport_stats->rx_out_of_range_errors;
  
#line 528 
  drvs->rx_dropped_header_too_small = pport_stats->rx_dropped_header_too_small;
  
#line 530 
  drvs->rx_input_fifo_overflow_drop = pport_stats->rx_fifo_overflow;
  
#line 531 
  drvs->rx_address_filtered = pport_stats->rx_address_filtered + pport_stats->rx_vlan_filtered;
  
#line 534 
  drvs->rx_alignment_symbol_errors = pport_stats->rx_symbol_errors_lo;
  
#line 535 
  drvs->rxpp_fifo_overflow_drop = pport_stats->rx_fifo_overflow;
  
#line 536 
  drvs->tx_pauseframes = pport_stats->tx_pause_frames_lo;
  
#line 537 
  drvs->tx_controlframes = pport_stats->tx_control_frames_lo;
  
#line 538 
  drvs->jabber_events = pport_stats->rx_jabbers;
  
#line 539 
  drvs->forwarded_packets = pport_stats->num_forwards_lo;
  
#line 540 
  drvs->rx_drops_mtu = pport_stats->rx_drops_mtu_lo;
  
#line 541 
  drvs->rx_drops_too_many_frags = pport_stats->rx_drops_too_many_frags_lo;
  
#line 543 
  return;
}


#line 545  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void accumulate_16bit_val(u32 *acc, u16 val)
{
  u32 volatile *tmp;
  
#line 549 
  bool wrapped = (_Bool)((unsigned int)val < (*acc & 65535U));
  
#line 550 
  u32 newacc = (*acc & 4294901760U) + (unsigned int)val;
  
#line 552 
  if ((int)wrapped != 0) 
#line 553 
                         newacc += 65536U; else ;
  {
    
#line 554 
    u32 __var = 0U;
    
#line 554 
    tmp = (u32 volatile *)acc;
  }
  
#line 554 
  *tmp = newacc;
  
#line 555 
  return;
}


#line 557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void populate_erx_stats(struct be_adapter *adapter, struct be_rx_obj *rxo, u32 erx_stat)
{
  
#line 560 
  if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) 
    
#line 561 
    rxo->stats.rx_drops_no_frags = erx_stat; else 
#line 566 
                                                  accumulate_16bit_val(& rxo->stats.rx_drops_no_frags,(unsigned short)((int)((unsigned short)erx_stat)));
  
#line 568 
  return;
}


#line 570  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
void be_parse_stats(struct be_adapter *adapter)
{
  struct be_rx_obj *rxo;
  int i;
  u32 erx_stat;
  
#line 572 
  struct be_erx_stats_v2 *erx = be_erx_stats_from_cmd(adapter);
  
#line 577 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    
#line 578 
    populate_lancer_stats(adapter);
  else {
    
#line 580 
    if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
      
#line 581 
      populate_be_v0_stats(adapter);
    else 
      
#line 582 
      if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) 
        
#line 584 
        populate_be_v1_stats(adapter); else 
#line 586 
                                            populate_be_v2_stats(adapter);
    
#line 589 
    i = 0;
    
#line 589 
    rxo = & adapter->rx_obj[i];
    
#line 589 
    goto ldv_58431;
    ldv_58430: 
#line 590 
    ;
    
#line 590 
    erx_stat = erx->rx_drops_no_fragments[(int)rxo->q.id];
    
#line 591 
    populate_erx_stats(adapter,rxo,erx_stat);
    
#line 589 
    i += 1;
    
#line 589 
    rxo += 1;
    ldv_58431: 
#line 590 
    ;
    
#line 589 
    if ((int)adapter->num_rx_qs > i) 
#line 591 
                                     goto ldv_58430; else 
#line 594 
                                                          goto ldv_58432;
    ldv_58432: 
#line 595 
    ;
  }
  
#line 597 
  return;
}


#line 596  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct rtnl_link_stats64 *be_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  struct be_rx_obj *rxo;
  struct be_tx_obj *txo;
  u64 pkts;
  u64 bytes;
  unsigned int start;
  int i;
  
#line 599 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 600 
  struct be_drv_stats *drvs = & adapter->drv_stats;
  
#line 607 
  i = 0;
  
#line 607 
  rxo = & adapter->rx_obj[i];
  
#line 607 
  goto ldv_58449;
  ldv_58448: 
#line 608 
  ;
  {
    bool tmp_0;
    
#line 608 
    struct be_rx_stats const *rx_stats = (struct be_rx_stats const *)(& rxo->stats);
    ldv_58446: 
#line 609 
    ;
    
#line 611 
    start = u64_stats_fetch_begin_irq(& rx_stats->sync);
    
#line 612 
    pkts = rxo->stats.rx_pkts;
    
#line 613 
    bytes = rxo->stats.rx_bytes;
    
#line 614 
    tmp_0 = u64_stats_fetch_retry_irq(& rx_stats->sync,start);
    
#line 614 
    if ((int)tmp_0 != 0) 
#line 616 
                         goto ldv_58446; else 
#line 619 
                                              goto ldv_58447;
    ldv_58447: 
#line 620 
    ;
    
#line 615 
    stats->rx_packets += pkts;
    
#line 616 
    stats->rx_bytes += bytes;
    
#line 617 
    stats->multicast += (unsigned long long)rxo->stats.rx_mcast_pkts;
    
#line 618 
    stats->rx_dropped += (unsigned long long)(rxo->stats.rx_drops_no_skbs + rxo->stats.rx_drops_no_frags);
  }
  
#line 607 
  i += 1;
  
#line 607 
  rxo += 1;
  ldv_58449: 
#line 608 
  ;
  
#line 607 
  if ((int)adapter->num_rx_qs > i) 
#line 609 
                                   goto ldv_58448; else 
#line 612 
                                                        goto ldv_58450;
  ldv_58450: 
#line 613 
  ;
  
#line 622 
  i = 0;
  
#line 622 
  txo = & adapter->tx_obj[i];
  
#line 622 
  goto ldv_58455;
  ldv_58454: 
#line 623 
  ;
  {
    bool tmp_1;
    
#line 623 
    struct be_tx_stats const *tx_stats = (struct be_tx_stats const *)(& txo->stats);
    ldv_58452: 
#line 624 
    ;
    
#line 626 
    start = u64_stats_fetch_begin_irq(& tx_stats->sync);
    
#line 627 
    pkts = txo->stats.tx_pkts;
    
#line 628 
    bytes = txo->stats.tx_bytes;
    
#line 629 
    tmp_1 = u64_stats_fetch_retry_irq(& tx_stats->sync,start);
    
#line 629 
    if ((int)tmp_1 != 0) 
#line 631 
                         goto ldv_58452; else 
#line 634 
                                              goto ldv_58453;
    ldv_58453: 
#line 635 
    ;
    
#line 630 
    stats->tx_packets += pkts;
    
#line 631 
    stats->tx_bytes += bytes;
  }
  
#line 622 
  i += 1;
  
#line 622 
  txo += 1;
  ldv_58455: 
#line 623 
  ;
  
#line 622 
  if ((int)adapter->num_tx_qs > i) 
#line 624 
                                   goto ldv_58454; else 
#line 627 
                                                        goto ldv_58456;
  ldv_58456: 
#line 628 
  ;
  
#line 635 
  stats->rx_errors = (unsigned long long)(((((((((drvs->rx_crc_errors + drvs->rx_alignment_symbol_errors) + drvs->rx_in_range_errors) + drvs->rx_out_range_errors) + drvs->rx_frame_too_long) + drvs->rx_dropped_too_small) + drvs->rx_dropped_too_short) + drvs->rx_dropped_header_too_small) + drvs->rx_dropped_tcp_length) + drvs->rx_dropped_runt);
  
#line 647 
  stats->rx_length_errors = (unsigned long long)((drvs->rx_in_range_errors + drvs->rx_out_range_errors) + drvs->rx_frame_too_long);
  
#line 651 
  stats->rx_crc_errors = (unsigned long long)drvs->rx_crc_errors;
  
#line 654 
  stats->rx_frame_errors = (unsigned long long)drvs->rx_alignment_symbol_errors;
  
#line 658 
  stats->rx_fifo_errors = (unsigned long long)((drvs->rxpp_fifo_overflow_drop + drvs->rx_input_fifo_overflow_drop) + drvs->rx_drops_no_pbuf);
  
#line 661 
  return stats;
}


#line 664  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
void be_link_status_update(struct be_adapter *adapter, u8 link_status)
{
  char *tmp;
  
#line 666 
  struct net_device *netdev = adapter->netdev;
  
#line 668 
  if (((unsigned long)adapter->flags & 2UL) == 0UL) {
    
#line 669 
    netif_carrier_off(netdev);
    
#line 670 
    adapter->flags |= 2U;
  }
  else ;
  
#line 673 
  if ((unsigned int)link_status != 0U) 
#line 674 
                                       netif_carrier_on(netdev); else 
                                                                   
#line 676 
                                                                   netif_carrier_off(netdev);
  
#line 678 
  if ((unsigned int)link_status != 0U) 
#line 678 
                                       tmp = (char *)"Up"; else 
#line 678 
                                                                tmp = (char *)"Down";
  
#line 678 
  ;
  
#line 678 
  netdev_info((struct net_device const *)netdev,"Link is %s\n",tmp);
  
#line 679 
  return;
}


#line 681  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_stats_update(struct be_tx_obj *txo, struct sk_buff *skb)
{
  int tmp_0;
  unsigned char *tmp_1;
  
#line 683 
  struct be_tx_stats *stats = & txo->stats;
  
#line 685 
  u64_stats_init(& stats->sync);
  
#line 686 
  stats->tx_reqs += 1ULL;
  
#line 687 
  stats->tx_bytes += (unsigned long long)skb->len;
  
#line 688 
  tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 688 
  tmp_0 = (int)((struct skb_shared_info *)tmp_1)->gso_segs != 0;
  
#line 688 
  if (tmp_0) ; else 
#line 688 
                    tmp_0 = 1;
  
#line 688 
  stats->tx_pkts += (unsigned long long)tmp_0;
  
#line 689 
  u64_stats_init(& stats->sync);
  
#line 690 
  return;
}


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u32 skb_wrb_cnt(struct sk_buff *skb)
{
  u32 __retres;
  int tmp_0;
  unsigned int tmp;
  unsigned char *tmp_1;
  
#line 696 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 696 
  if (tmp != 0U) 
#line 696 
                 tmp_0 = 2; else 
#line 696 
                                 tmp_0 = 1;
  
#line 696 
  tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 696 
  ;
  
#line 696 
  __retres = (unsigned int)(tmp_0 + (int)((struct skb_shared_info *)tmp_1)->nr_frags);
  
#line 696 
  return __retres;
}


#line 699  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void wrb_fill(struct be_eth_wrb *wrb, u64 addr, int len)
{
  
#line 701 
  wrb->frag_pa_hi = (unsigned int)(addr >> 32);
  
#line 702 
  wrb->frag_pa_lo = (unsigned int)addr;
  
#line 703 
  wrb->frag_len = (unsigned int)len & 65535U;
  
#line 704 
  wrb->rsvd0 = 0U;
  
#line 705 
  return;
}


#line 710  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void wrb_fill_dummy(struct be_eth_wrb *wrb)
{
  
#line 712 
  wrb->frag_pa_hi = 0U;
  
#line 713 
  wrb->frag_pa_lo = 0U;
  
#line 714 
  wrb->frag_len = 0U;
  
#line 715 
  wrb->rsvd0 = 0U;
  
#line 716 
  return;
}


#line 718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static u16 be_get_tx_vlan_tag(struct be_adapter *adapter, struct sk_buff *skb)
{
  u8 vlan_prio;
  u16 vlan_tag;
  
#line 724 
  vlan_tag = (unsigned short)((unsigned int)skb->vlan_tci & 61439U);
  
#line 725 
  vlan_prio = (unsigned char)((int)vlan_tag >> 13);
  
#line 727 
  if ((((int)adapter->vlan_prio_bmap >> (int)vlan_prio) & 1) == 0) 
#line 728 
                                                                   vlan_tag = (unsigned short)(((int)vlan_tag & 8191) | (int)adapter->recommended_prio); else ;
  
#line 731 
  return vlan_tag;
}


#line 735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u16 skb_inner_ip_proto(struct sk_buff *skb)
{
  u16 __retres;
  int tmp_2;
  struct iphdr *tmp;
  
#line 737 
  tmp = inner_ip_hdr((struct sk_buff const *)skb);
  
#line 738 
  ;
  
#line 738 
  if ((unsigned int)*((unsigned char *)tmp + 0UL) == 64U) {
    struct iphdr *tmp_0;
    
#line 738 
    tmp_0 = inner_ip_hdr((struct sk_buff const *)skb);
    
#line 738 
    tmp_2 = (int)((unsigned short)tmp_0->protocol);
  }
  else {
    struct ipv6hdr *tmp_1;
    
#line 738 
    tmp_1 = inner_ipv6_hdr((struct sk_buff const *)skb);
    
#line 738 
    tmp_2 = (int)((unsigned short)tmp_1->nexthdr);
  }
  
#line 738 
  __retres = (unsigned short)tmp_2;
  
#line 738 
  return __retres;
}


#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u16 skb_ip_proto(struct sk_buff *skb)
{
  u16 __retres;
  int tmp_2;
  struct iphdr *tmp;
  
#line 743 
  tmp = ip_hdr((struct sk_buff const *)skb);
  
#line 744 
  ;
  
#line 744 
  if ((unsigned int)*((unsigned char *)tmp + 0UL) == 64U) {
    struct iphdr *tmp_0;
    
#line 744 
    tmp_0 = ip_hdr((struct sk_buff const *)skb);
    
#line 744 
    tmp_2 = (int)((unsigned short)tmp_0->protocol);
  }
  else {
    struct ipv6hdr *tmp_1;
    
#line 744 
    tmp_1 = ipv6_hdr((struct sk_buff const *)skb);
    
#line 744 
    tmp_2 = (int)((unsigned short)tmp_1->nexthdr);
  }
  
#line 744 
  __retres = (unsigned short)tmp_2;
  
#line 744 
  return __retres;
}


#line 747  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_is_txq_full(struct be_tx_obj *txo)
{
  bool __retres;
  int tmp;
  
#line 749 
  tmp = atomic_read((atomic_t const *)(& txo->q.used));
  
#line 749 
  ;
  
#line 749 
  __retres = (_Bool)(tmp + 30 >= (int)txo->q.len);
  
#line 749 
  return __retres;
}


#line 752  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_can_txq_wake(struct be_tx_obj *txo)
{
  bool __retres;
  int tmp;
  
#line 754 
  tmp = atomic_read((atomic_t const *)(& txo->q.used));
  
#line 754 
  ;
  
#line 754 
  __retres = (_Bool)(tmp < (int)((unsigned int)txo->q.len / 2U));
  
#line 754 
  return __retres;
}


#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_is_tx_compl_pending(struct be_tx_obj *txo)
{
  bool __retres;
  int tmp;
  
#line 759 
  tmp = atomic_read((atomic_t const *)(& txo->q.used));
  
#line 759 
  ;
  
#line 759 
  __retres = (_Bool)(tmp > (int)txo->pend_wrb_cnt);
  
#line 759 
  return __retres;
}


#line 762  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_get_wrb_params_from_skb(struct be_adapter *adapter, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  u16 proto;
  bool tmp_1;
  
#line 768 
  tmp_1 = skb_is_gso((struct sk_buff const *)skb);
  
#line 768 
  if ((int)tmp_1 != 0) {
    unsigned char *tmp;
    bool tmp_0;
    
#line 769 
    wrb_params->features |= 16U;
    
#line 770 
    tmp = skb_end_pointer((struct sk_buff const *)skb);
    
#line 770 
    wrb_params->lso_mss = ((struct skb_shared_info *)tmp)->gso_size;
    
#line 771 
    tmp_0 = skb_is_gso_v6((struct sk_buff const *)skb);
    
#line 771 
    if ((int)tmp_0 != 0) {
      
#line 771 
      if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) 
        
#line 772 
        wrb_params->features |= 32U; else ;
    }
    else ;
  }
  else 
    
#line 773 
    if ((unsigned int)*((unsigned char *)skb + 145UL) == 6U) {
      
#line 774 
      if ((unsigned int)*((unsigned char *)skb + 146UL) != 0U) {
        
#line 775 
        wrb_params->features |= 2U;
        
#line 776 
        proto = skb_inner_ip_proto(skb);
      }
      else 
#line 778 
           proto = skb_ip_proto(skb);
      
#line 780 
      if ((unsigned int)proto == 6U) 
#line 781 
                                     wrb_params->features |= 4U;
      else 
        
#line 782 
        if ((unsigned int)proto == 17U) 
#line 783 
                                        wrb_params->features |= 8U; else ;
    }
    else ;
  
#line 786 
  if (((int)skb->vlan_tci & 4096) != 0) {
    
#line 787 
    wrb_params->features |= 64U;
    
#line 788 
    wrb_params->vlan_tag = be_get_tx_vlan_tag(adapter,skb);
  }
  else ;
  
#line 791 
  wrb_params->features |= 1U;
  
#line 792 
  return;
}


#line 794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void wrb_fill_hdr(struct be_adapter *adapter, struct be_eth_hdr_wrb *hdr, struct be_wrb_params *wrb_params, struct sk_buff *skb)
{
  u32 tmp;
  u32 tmp_0;
  u32 tmp_1;
  u32 tmp_2;
  u32 tmp_3;
  u32 tmp_4;
  u32 tmp_5;
  u32 tmp_6;
  u32 tmp_7;
  u32 tmp_8;
  u32 tmp_9;
  u32 tmp_10;
  u32 tmp_11;
  u32 tmp_12;
  
#line 799 
  memset((void *)hdr,0,16UL);
  
#line 801 
  ;
  
#line 801 
  tmp = amap_mask(1U);
  
#line 801 
  ;
  
#line 801 
  amap_set((void *)hdr,2U,tmp,2U,wrb_params->features & 1U);
  
#line 803 
  ;
  
#line 803 
  tmp_0 = amap_mask(1U);
  
#line 803 
  ;
  
#line 803 
  amap_set((void *)hdr,2U,tmp_0,6U,(unsigned int)((unsigned long)wrb_params->features >> 1) & 1U);
  
#line 805 
  ;
  
#line 805 
  tmp_1 = amap_mask(1U);
  
#line 805 
  ;
  
#line 805 
  amap_set((void *)hdr,2U,tmp_1,8U,(unsigned int)((unsigned long)wrb_params->features >> 2) & 1U);
  
#line 807 
  ;
  
#line 807 
  tmp_2 = amap_mask(1U);
  
#line 807 
  ;
  
#line 807 
  amap_set((void *)hdr,2U,tmp_2,7U,(unsigned int)((unsigned long)wrb_params->features >> 3) & 1U);
  
#line 810 
  ;
  
#line 810 
  tmp_3 = amap_mask(1U);
  
#line 810 
  ;
  
#line 810 
  amap_set((void *)hdr,2U,tmp_3,9U,(unsigned int)((unsigned long)wrb_params->features >> 4) & 1U);
  
#line 812 
  ;
  
#line 812 
  tmp_4 = amap_mask(1U);
  
#line 812 
  ;
  
#line 812 
  amap_set((void *)hdr,2U,tmp_4,4U,(unsigned int)((unsigned long)wrb_params->features >> 5) & 1U);
  
#line 814 
  ;
  
#line 814 
  tmp_5 = amap_mask(14U);
  
#line 814 
  ;
  
#line 814 
  amap_set((void *)hdr,2U,tmp_5,18U,(unsigned int)wrb_params->lso_mss);
  
#line 819 
  ;
  
#line 819 
  tmp_6 = amap_mask(1U);
  
#line 819 
  ;
  
#line 819 
  amap_set((void *)hdr,2U,tmp_6,1U,(unsigned int)((unsigned long)wrb_params->features >> 7) & 1U);
  
#line 821 
  ;
  
#line 821 
  tmp_7 = amap_mask(1U);
  
#line 821 
  ;
  
#line 821 
  amap_set((void *)hdr,2U,tmp_7,10U,(unsigned int)((unsigned long)wrb_params->features >> 6) & 1U);
  
#line 823 
  ;
  
#line 823 
  tmp_8 = amap_mask(16U);
  
#line 823 
  ;
  
#line 823 
  amap_set((void *)hdr,3U,tmp_8,16U,(unsigned int)wrb_params->vlan_tag);
  
#line 825 
  tmp_9 = skb_wrb_cnt(skb);
  
#line 825 
  tmp_10 = amap_mask(5U);
  
#line 825 
  ;
  
#line 825 
  amap_set((void *)hdr,2U,tmp_10,13U,tmp_9);
  
#line 826 
  ;
  
#line 826 
  tmp_11 = amap_mask(16U);
  
#line 826 
  ;
  
#line 826 
  amap_set((void *)hdr,3U,tmp_11,0U,skb->len);
  
#line 827 
  ;
  
#line 827 
  tmp_12 = amap_mask(1U);
  
#line 827 
  ;
  
#line 827 
  amap_set((void *)hdr,2U,tmp_12,5U,(unsigned int)((unsigned long)wrb_params->features >> 8) & 1U);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void unmap_tx_frag(struct device *dev, struct be_eth_wrb *wrb, bool unmap_single)
{
  dma_addr_t dma;
  
#line 835 
  u32 frag_len = wrb->frag_len;
  
#line 838 
  dma = ((unsigned long long)wrb->frag_pa_hi << 32) | (unsigned long long)wrb->frag_pa_lo;
  
#line 840 
  if (frag_len != 0U) 
    
#line 841 
    if ((int)unmap_single != 0) 
#line 842 
                                dma_unmap_single_attrs(dev,dma,(unsigned long)frag_len,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0); else 
                                                                    
#line 844 
                                                                    dma_unmap_page(dev,dma,(unsigned long)frag_len,(enum dma_data_direction)DMA_TO_DEVICE);
  else ;
  
#line 845 
  return;
}


#line 849  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u16 be_tx_get_wrb_hdr(struct be_tx_obj *txo)
{
  
#line 851 
  u16 head = txo->q.head;
  
#line 853 
  queue_head_inc(& txo->q);
  
#line 854 
  return head;
}


#line 858  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_setup_wrb_hdr(struct be_adapter *adapter, struct be_tx_obj *txo, struct be_wrb_params *wrb_params, struct sk_buff *skb, u16 head)
{
  
#line 863 
  u32 num_frags = skb_wrb_cnt(skb);
  
#line 864 
  struct be_queue_info *txq = & txo->q;
  
#line 865 
  struct be_eth_hdr_wrb *hdr = queue_index_node(txq,(unsigned short)((int)head));
  
#line 867 
  wrb_fill_hdr(adapter,hdr,wrb_params,skb);
  
#line 868 
  swap_dws((void *)hdr,16);
  
#line 870 
  if ((long)(txo->sent_skb_list[(int)head] != (struct sk_buff *)0) != 0L) {
    
#line 872 
    ldv_inline_asm();
    
#line 870 
    ;
  }
  else ;
  
#line 871 
  txo->sent_skb_list[(int)head] = skb;
  
#line 872 
  txo->last_req_hdr = head;
  
#line 873 
  atomic_add((int)num_frags,& txq->used);
  
#line 874 
  txo->last_req_wrb_cnt = (unsigned short)num_frags;
  
#line 875 
  txo->pend_wrb_cnt = (unsigned short)((int)txo->pend_wrb_cnt + (int)((unsigned short)num_frags));
  
#line 876 
  return;
}


#line 879  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_setup_wrb_frag(struct be_tx_obj *txo, dma_addr_t busaddr, int len)
{
  struct be_eth_wrb *wrb;
  
#line 883 
  struct be_queue_info *txq = & txo->q;
  
#line 885 
  wrb = (struct be_eth_wrb *)queue_head_node(txq);
  
#line 886 
  wrb_fill(wrb,busaddr,len);
  
#line 887 
  queue_head_inc(txq);
  
#line 888 
  return;
}


#line 894  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_xmit_restore(struct be_adapter *adapter, struct be_tx_obj *txo, u16 head, bool map_single, u32 copied)
{
  struct device *dev;
  struct be_eth_wrb *wrb;
  
#line 900 
  struct be_queue_info *txq = & txo->q;
  
#line 902 
  dev = & (adapter->pdev)->dev;
  
#line 903 
  txq->head = head;
  
#line 906 
  queue_head_inc(txq);
  
#line 907 
  goto ldv_58550;
  ldv_58549: 
#line 908 
  ;
  
#line 908 
  wrb = (struct be_eth_wrb *)queue_head_node(txq);
  
#line 909 
  unmap_tx_frag(dev,wrb,(_Bool)((bool)((int)map_single) != 0));
  
#line 910 
  map_single = (_Bool)0;
  
#line 911 
  copied -= wrb->frag_len;
  
#line 912 
  queue_head_inc(txq);
  ldv_58550: 
#line 913 
  ;
  
#line 907 
  if (copied != 0U) 
#line 909 
                    goto ldv_58549; else 
#line 912 
                                         goto ldv_58551;
  ldv_58551: 
#line 913 
  ;
  
#line 915 
  txq->head = head;
  
#line 916 
  return;
}


#line 922  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u32 be_xmit_enqueue(struct be_adapter *adapter, struct be_tx_obj *txo, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  u32 __retres;
  u32 i;
  dma_addr_t busaddr;
  int len;
  unsigned char *tmp_5;
  
#line 926 
  u32 copied = 0U;
  
#line 926 
  u32 wrb_cnt = skb_wrb_cnt(skb);
  
#line 927 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 928 
  struct be_queue_info *txq = & txo->q;
  
#line 929 
  bool map_single = (_Bool)0;
  
#line 930 
  u16 head = txq->head;
  
#line 934 
  head = be_tx_get_wrb_hdr(txo);
  
#line 936 
  if (skb->len > skb->data_len) {
    unsigned int tmp_0;
    int tmp_1;
    
#line 937 
    tmp_0 = skb_headlen((struct sk_buff const *)skb);
    
#line 937 
    len = (int)tmp_0;
    
#line 939 
    busaddr = dma_map_single_attrs(dev,(void *)skb->data,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
    
#line 940 
    tmp_1 = dma_mapping_error(dev,busaddr);
    
#line 940 
    if (tmp_1 != 0) 
#line 941 
                    goto dma_err; else ;
    
#line 942 
    map_single = (_Bool)1;
    
#line 943 
    be_tx_setup_wrb_frag(txo,busaddr,len);
    
#line 944 
    copied += (unsigned int)len;
  }
  else ;
  
#line 947 
  i = 0U;
  
#line 947 
  goto ldv_58570;
  ldv_58569: 
#line 948 
  ;
  {
    unsigned char *tmp_2;
    unsigned int tmp_3;
    int tmp_4;
    
#line 948 
    tmp_2 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 948 
    struct skb_frag_struct const *frag = (struct skb_frag_struct const *)(& ((struct skb_shared_info *)tmp_2)->frags[i]);
    
#line 949 
    tmp_3 = skb_frag_size(frag);
    
#line 949 
    len = (int)tmp_3;
    
#line 951 
    busaddr = skb_frag_dma_map(dev,frag,0UL,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 952 
    tmp_4 = dma_mapping_error(dev,busaddr);
    
#line 952 
    if (tmp_4 != 0) 
#line 953 
                    goto dma_err; else ;
    
#line 954 
    be_tx_setup_wrb_frag(txo,busaddr,len);
    
#line 955 
    copied += (unsigned int)len;
  }
  
#line 947 
  i += 1U;
  ldv_58570: 
#line 948 
  ;
  
#line 947 
  tmp_5 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 947 
  ;
  
#line 947 
  if ((unsigned int)((struct skb_shared_info *)tmp_5)->nr_frags > i) 
    
#line 949 
    goto ldv_58569; else 
#line 952 
                         goto ldv_58571;
  ldv_58571: 
#line 953 
  ;
  
#line 958 
  be_tx_setup_wrb_hdr(adapter,txo,wrb_params,skb,(unsigned short)((int)head));
  
#line 960 
  be_tx_stats_update(txo,skb);
  
#line 961 
  __retres = wrb_cnt;
  
#line 961 
  goto return_label;
  dma_err: 
#line 963 
  ;
  
#line 964 
  adapter->drv_stats.dma_map_errors += 1U;
  
#line 965 
  be_xmit_restore(adapter,txo,(unsigned short)((int)head),(_Bool)((bool)((int)map_single) != 0),copied);
  
#line 966 
  __retres = 0U;
  return_label: 
#line 966 
                return __retres;
}


#line 969  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static int qnq_async_evt_rcvd(struct be_adapter *adapter)
{
  int __retres;
  
#line 971 
  __retres = (int)adapter->flags & 128;
  
#line 971 
  return __retres;
}


#line 974  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct sk_buff *be_insert_vlan_in_pkt(struct be_adapter *adapter, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  struct sk_buff *__retres;
  int tmp;
  
#line 979 
  u16 vlan_tag = (unsigned short)0U;
  
#line 981 
  skb = skb_share_check(skb,32U);
  
#line 982 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    
#line 983 
    __retres = skb;
    
#line 983 
    goto return_label;
  }
  else ;
  
#line 985 
  if (((int)skb->vlan_tci & 4096) != 0) 
#line 986 
                                        vlan_tag = be_get_tx_vlan_tag(adapter,skb); else ;
  
#line 988 
  tmp = qnq_async_evt_rcvd(adapter);
  
#line 988 
  if (tmp != 0) {
    
#line 988 
    if ((unsigned int)adapter->pvid != 0U) {
      
#line 989 
      if ((unsigned int)vlan_tag == 0U) 
#line 990 
                                        vlan_tag = adapter->pvid; else ;
      
#line 994 
      wrb_params->features |= 128U;
    }
    else ;
  }
  else ;
  
#line 997 
  if ((unsigned int)vlan_tag != 0U) {
    
#line 998 
    skb = vlan_insert_tag_set_proto(skb,(unsigned short)129,(unsigned short)((int)vlan_tag));
    
#line 1000 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      
#line 1001 
      __retres = skb;
      
#line 1001 
      goto return_label;
    }
    else ;
    
#line 1002 
    skb->vlan_tci = (unsigned short)0U;
  }
  else ;
  
#line 1006 
  if ((unsigned int)adapter->qnq_vid != 0U) {
    
#line 1007 
    vlan_tag = adapter->qnq_vid;
    
#line 1008 
    skb = vlan_insert_tag_set_proto(skb,(unsigned short)129,(unsigned short)((int)vlan_tag));
    
#line 1010 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      
#line 1011 
      __retres = skb;
      
#line 1011 
      goto return_label;
    }
    else ;
    
#line 1012 
    wrb_params->features |= 128U;
  }
  else ;
  
#line 1015 
  __retres = skb;
  return_label: 
#line 1015 
                return __retres;
}


#line 1018  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static bool be_ipv6_exthdr_check(struct sk_buff *skb)
{
  bool __retres;
  
#line 1020 
  struct ethhdr *eh = (struct ethhdr *)skb->data;
  
#line 1021 
  u16 offset = (unsigned short)14U;
  
#line 1023 
  if ((unsigned int)eh->h_proto == 56710U) {
    
#line 1024 
    struct ipv6hdr *ip6h = (struct ipv6hdr *)(skb->data + (int)offset);
    
#line 1026 
    offset = (unsigned short)((unsigned int)offset + 40U);
    
#line 1027 
    if ((unsigned int)ip6h->nexthdr != 6U && (unsigned int)ip6h->nexthdr != 17U) {
      
#line 1029 
      struct ipv6_opt_hdr *ehdr = (struct ipv6_opt_hdr *)(skb->data + (int)offset);
      
#line 1033 
      if ((unsigned int)ehdr->hdrlen == 255U) {
        
#line 1034 
        __retres = (_Bool)1;
        
#line 1034 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1037 
  __retres = (_Bool)0;
  return_label: 
#line 1037 
                return __retres;
}


#line 1040  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vlan_tag_tx_chk(struct be_adapter *adapter, struct sk_buff *skb)
{
  int __retres;
  
#line 1042 
  __retres = ((((int)skb->vlan_tci & 4096) != 0 || (unsigned int)adapter->pvid != 0U) || (unsigned int)adapter->qnq_vid != 0U) != 0;
  
#line 1042 
  return __retres;
}


#line 1045  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_ipv6_tx_stall_chk(struct be_adapter *adapter, struct sk_buff *skb)
{
  int tmp_0;
  
#line 1047 
  if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
    bool tmp;
    
#line 1047 
    tmp = be_ipv6_exthdr_check(skb);
    
#line 1047 
    if ((int)tmp != 0) 
#line 1047 
                       tmp_0 = 1; else 
#line 1047 
                                       tmp_0 = 0;
  }
  else 
#line 1047 
       tmp_0 = 0;
  
#line 1047 
  return tmp_0;
}


#line 1050  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct sk_buff *be_lancer_xmit_workarounds(struct be_adapter *adapter, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  struct sk_buff *__retres;
  unsigned int eth_hdr_len;
  struct iphdr *ip;
  int tmp_1;
  int tmp_0;
  int tmp_6;
  int tmp_5;
  int tmp_8;
  
#line 1055 
  struct vlan_ethhdr *veh = (struct vlan_ethhdr *)skb->data;
  
#line 1064 
  if (0 != 0) 
#line 1064 
              tmp_0 = (((int)skb->protocol << 8) | ((int)skb->protocol >> 8)) == -32512;
  else {
    __u16 tmp;
    
#line 1063 
    tmp = __fswab16((unsigned short)((int)skb->protocol));
    
#line 1064 
    tmp_0 = (unsigned int)tmp == 33024U;
  }
  
#line 1064 
  if (tmp_0) 
#line 1064 
             tmp_1 = 18; else 
#line 1064 
                              tmp_1 = 14;
  
#line 1063 
  eth_hdr_len = (unsigned int)tmp_1;
  
#line 1065 
  if (skb->len <= 60U && (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) || ((int)skb->vlan_tci & 4096) != 0)) {
    bool tmp_4;
    
#line 1066 
    tmp_4 = is_ipv4_pkt(skb);
    
#line 1066 
    if ((int)tmp_4 != 0) {
      int tmp_3;
      
#line 1068 
      ip = ip_hdr((struct sk_buff const *)skb);
      
#line 1069 
      if (0 != 0) 
#line 1069 
                  tmp_3 = (int)((unsigned short)(((int)ip->tot_len << 8) | ((int)ip->tot_len >> 8)));
      else {
        __u16 tmp_2;
        
#line 1069 
        tmp_2 = __fswab16((unsigned short)((int)ip->tot_len));
        
#line 1069 
        tmp_3 = (int)tmp_2;
      }
      
#line 1069 
      ;
      
#line 1069 
      ;
      
#line 1069 
      pskb_trim(skb,(unsigned int)tmp_3 + eth_hdr_len);
    }
    else ;
  }
  else ;
  
#line 1075 
  if ((unsigned int)adapter->pvid != 0U && (unsigned int)veh->h_vlan_proto == 129U) 
    
#line 1077 
    wrb_params->features |= 128U; else ;
  
#line 1083 
  if ((unsigned int)*((unsigned char *)skb + 145UL) != 6U && ((int)skb->vlan_tci & 4096) != 0) {
    
#line 1085 
    skb = be_insert_vlan_in_pkt(adapter,skb,wrb_params);
    
#line 1086 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
#line 1087 
                                                  goto err; else ;
  }
  else ;
  
#line 1094 
  tmp_5 = be_ipv6_tx_stall_chk(adapter,skb);
  
#line 1094 
  if ((long)(tmp_5 != 0) != 0L) 
    
#line 1094 
    if ((((long)((unsigned int)adapter->pvid != 0U) != 0L || (long)((unsigned int)adapter->qnq_vid != 0U) != 0L) != 0) != 0) 
      
#line 1094 
      tmp_6 = 1; else 
#line 1094 
                      tmp_6 = 0;
  else 
#line 1094 
       tmp_6 = 0;
  
#line 1094 
  if (tmp_6 != 0) {
    int tmp_7;
    
#line 1094 
    tmp_7 = qnq_async_evt_rcvd(adapter);
    
#line 1094 
    if ((long)(tmp_7 == 0) != 0L) 
#line 1097 
                                  goto tx_drop; else ;
  }
  else ;
  
#line 1105 
  tmp_8 = be_ipv6_tx_stall_chk(adapter,skb);
  
#line 1105 
  if (tmp_8 != 0) {
    int tmp_9;
    
#line 1105 
    tmp_9 = be_vlan_tag_tx_chk(adapter,skb);
    
#line 1105 
    if (tmp_9 != 0) {
      
#line 1107 
      skb = be_insert_vlan_in_pkt(adapter,skb,wrb_params);
      
#line 1108 
      if ((long)(skb == (struct sk_buff *)0) != 0L) 
#line 1109 
                                                    goto err; else ;
    }
    else ;
  }
  else ;
  
#line 1112 
  __retres = skb;
  
#line 1112 
  goto return_label;
  tx_drop: 
#line 1113 
  ;
  
#line 1114 
  dev_kfree_skb_any(skb);
  err: 
#line 1115 
  ;
  
#line 1116 
  __retres = (struct sk_buff *)0;
  return_label: 
#line 1116 
                return __retres;
}


#line 1119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct sk_buff *be_xmit_workarounds(struct be_adapter *adapter, struct sk_buff *skb, struct be_wrb_params *wrb_params)
{
  struct sk_buff *__retres;
  
#line 1127 
  if ((((long)(((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) != 0) != 0L && (long)(((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) != 0) != 0L) != 0) != 0 && (long)(skb->len <= 32U) != 0L) {
    int tmp;
    
#line 1128 
    tmp = skb_put_padto(skb,36U);
    
#line 1128 
    if (tmp != 0) {
      
#line 1129 
      __retres = (struct sk_buff *)0;
      
#line 1129 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1132 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) || ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U)) {
    
#line 1133 
    skb = be_lancer_xmit_workarounds(adapter,skb,wrb_params);
    
#line 1134 
    if (skb == (struct sk_buff *)0) {
      
#line 1135 
      __retres = (struct sk_buff *)0;
      
#line 1135 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1138 
  __retres = skb;
  return_label: 
#line 1138 
                return __retres;
}


#line 1141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_xmit_flush(struct be_adapter *adapter, struct be_tx_obj *txo)
{
  
#line 1143 
  struct be_queue_info *txq = & txo->q;
  
#line 1144 
  struct be_eth_hdr_wrb *hdr = queue_index_node(txq,(unsigned short)((int)txo->last_req_hdr));
  
#line 1147 
  if ((hdr->dw[2] & 2U) == 0U) 
#line 1148 
                               hdr->dw[2] |= 3U; else ;
  
#line 1151 
  if (((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) && ((int)txo->pend_wrb_cnt & 1) != 0) {
    void *tmp_0;
    
#line 1152 
    tmp_0 = queue_head_node(txq);
    
#line 1152 
    wrb_fill_dummy((struct be_eth_wrb *)tmp_0);
    
#line 1153 
    queue_head_inc(txq);
    
#line 1154 
    atomic_inc_0(& txq->used);
    
#line 1155 
    txo->pend_wrb_cnt = (u16)((int)txo->pend_wrb_cnt + 1);
    
#line 1156 
    hdr->dw[2] &= 4294713343U;
    
#line 1158 
    hdr->dw[2] |= (unsigned int)(((int)txo->last_req_wrb_cnt + 1) << 13);
  }
  else ;
  
#line 1161 
  be_txq_notify(adapter,txo,(unsigned short)((int)txo->pend_wrb_cnt));
  
#line 1162 
  txo->pend_wrb_cnt = (unsigned short)0U;
  
#line 1163 
  return;
}


#line 1219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static bool be_send_pkt_to_bmc(struct be_adapter *adapter, struct sk_buff **skb)
{
  int tmp_0;
  bool tmp;
  u8 tmp_8;
  
#line 1222 
  struct ethhdr *eh = (struct ethhdr *)(*skb)->data;
  
#line 1223 
  bool os2bmc = (_Bool)0;
  
#line 1225 
  if (((unsigned long)adapter->flags & 4096UL) == 0UL) 
#line 1226 
                                                       goto done; else ;
  
#line 1228 
  tmp = is_multicast_ether_addr((u8 const *)(& eh->h_dest));
  
#line 1228 
  if (tmp) 
#line 1228 
           tmp_0 = 0; else 
#line 1228 
                           tmp_0 = 1;
  
#line 1228 
  if (tmp_0) 
#line 1229 
             goto done; else ;
  
#line 1231 
  if (((unsigned long)adapter->bmc_filt_mask & 32768UL) == 0UL) {
    bool tmp_1;
    
#line 1231 
    tmp_1 = is_multicast_ether_addr((u8 const *)(& eh->h_dest));
    
#line 1231 
    if ((int)tmp_1 != 0) {
      int tmp_3;
      bool tmp_2;
      
#line 1231 
      tmp_2 = is_broadcast_ether_addr((u8 const *)(& eh->h_dest));
      
#line 1231 
      if (tmp_2) 
#line 1231 
                 tmp_3 = 0; else 
#line 1231 
                                 tmp_3 = 1;
      
#line 1231 
      if (tmp_3) 
#line 1231 
                 goto _LOR; else 
#line 1231 
                                 goto _LAND_1;
    }
    else 
#line 1231 
         goto _LAND_1;
  }
  else {
    _LAND_1: 
#line 1231 
    ;
    
#line 1231 
    if (((unsigned long)adapter->bmc_filt_mask & 128UL) == 0UL) {
      bool tmp_4;
      
#line 1232 
      tmp_4 = is_broadcast_ether_addr((u8 const *)(& eh->h_dest));
      
#line 1232 
      if ((int)tmp_4 != 0) 
#line 1231 
                           goto _LOR; else 
#line 1231 
                                           goto _LAND;
    }
    else 
      _LAND: 
#line 1232 
             if ((unsigned int)(*skb)->protocol == 1544U && ((unsigned long)adapter->bmc_filt_mask & 1UL) != 0UL) {
               _LOR: {
                       
#line 1234 
                       os2bmc = (_Bool)1;
                       
#line 1235 
                       goto done;
                     }
             }
             else ;
  }
  
#line 1238 
  if ((unsigned int)(*skb)->protocol == 56710U) {
    
#line 1239 
    struct ipv6hdr *hdr = ipv6_hdr((struct sk_buff const *)*skb);
    
#line 1240 
    u8 nexthdr = hdr->nexthdr;
    
#line 1242 
    if ((unsigned int)nexthdr == 58U) {
      
#line 1243 
      struct icmp6hdr *icmp6 = icmp6_hdr((struct sk_buff const *)*skb);
      
#line 1245 
      switch ((int)icmp6->icmp6_type) {
        case 134: 
#line 1246 
        ;
        
#line 1247 
        os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 512UL) != 0UL);
        
#line 1248 
        goto done;
        case 136: 
#line 1249 
        ;
        
#line 1250 
        os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 256UL) != 0UL);
        
#line 1251 
        goto done;
        default: 
#line 1252 
        ;
        
#line 1253 
        goto ldv_58630;
      }
      ldv_58630: 
#line 1255 
      ;
    }
    else ;
  }
  else ;
  
#line 1258 
  tmp_8 = is_udp_pkt(*skb);
  
#line 1258 
  if ((unsigned int)tmp_8 != 0U) {
    
#line 1259 
    struct udphdr *udp = udp_hdr((struct sk_buff const *)*skb);
    
#line 1261 
    switch ((int)udp->dest) {
      case 68: 
#line 1262 
      ;
      
#line 1263 
      os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 2UL) != 0UL);
      
#line 1264 
      goto done;
      case 67: 
#line 1265 
      ;
      
#line 1266 
      os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 4UL) != 0UL);
      
#line 1267 
      goto done;
      case 137: 
#line 1268 
      ;
      case 138: 
#line 1269 
      ;
      
#line 1270 
      os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 8UL) != 0UL);
      
#line 1271 
      goto done;
      case 547: 
#line 1272 
      ;
      
#line 1273 
      os2bmc = (_Bool)(((unsigned long)adapter->bmc_filt_mask & 1024UL) != 0UL);
      
#line 1274 
      goto done;
      default: 
#line 1275 
      ;
      
#line 1276 
      goto ldv_58638;
    }
    ldv_58638: 
#line 1278 
    ;
  }
  else ;
  done: 
#line 1279 
  ;
  
#line 1283 
  if ((int)os2bmc != 0) 
#line 1284 
                        *skb = be_insert_vlan_in_pkt(adapter,*skb,(struct be_wrb_params *)0); else ;
  
#line 1286 
  return os2bmc;
}


#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static netdev_tx_t be_xmit(struct sk_buff *skb, struct net_device *netdev)
{
  netdev_tx_t __retres;
  u16 wrb_cnt;
  u32 tmp_1;
  bool tmp_3;
  bool tmp_4;
  
#line 1291 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1292 
  u16 q_idx = skb_get_queue_mapping((struct sk_buff const *)skb);
  
#line 1293 
  struct be_tx_obj *txo = & adapter->tx_obj[(int)q_idx];
  
#line 1294 
  struct be_wrb_params wrb_params = {.features = 0U, .vlan_tag = (unsigned short)0, .lso_mss = (unsigned short)0};
  
#line 1295 
  bool flush = (_Bool)((unsigned int)*((unsigned char *)skb + 142UL) == 0U);
  
#line 1298 
  skb = be_xmit_workarounds(adapter,skb,& wrb_params);
  
#line 1299 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
#line 1300 
                                                goto drop; else ;
  
#line 1302 
  be_get_wrb_params_from_skb(adapter,skb,& wrb_params);
  
#line 1304 
  tmp_1 = be_xmit_enqueue(adapter,txo,skb,& wrb_params);
  
#line 1304 
  wrb_cnt = (unsigned short)tmp_1;
  
#line 1305 
  if ((long)((unsigned int)wrb_cnt == 0U) != 0L) {
    
#line 1306 
    dev_kfree_skb_any(skb);
    
#line 1307 
    goto drop;
  }
  else ;
  
#line 1313 
  tmp_3 = be_send_pkt_to_bmc(adapter,& skb);
  
#line 1313 
  if ((int)tmp_3 != 0) {
    u32 tmp_2;
    
#line 1314 
    wrb_params.features |= 256U;
    
#line 1315 
    tmp_2 = be_xmit_enqueue(adapter,txo,skb,& wrb_params);
    
#line 1315 
    wrb_cnt = (unsigned short)tmp_2;
    
#line 1316 
    if ((long)((unsigned int)wrb_cnt == 0U) != 0L) 
#line 1317 
                                                   goto drop; else 
#line 1319 
                                                                   skb_get(skb);
  }
  else ;
  
#line 1322 
  tmp_4 = be_is_txq_full(txo);
  
#line 1322 
  if ((int)tmp_4 != 0) {
    
#line 1323 
    netif_stop_subqueue(netdev,(unsigned short)((int)q_idx));
    
#line 1324 
    txo->stats.tx_stops += 1U;
  }
  else ;
  
#line 1327 
  if ((int)flush != 0) 
#line 1328 
                       be_xmit_flush(adapter,txo);
  else {
    bool tmp_5;
    
#line 1327 
    tmp_5 = __netif_subqueue_stopped((struct net_device const *)netdev,(unsigned short)((int)q_idx));
    
#line 1327 
    if ((int)tmp_5 != 0) 
#line 1328 
                         be_xmit_flush(adapter,txo); else ;
  }
  
#line 1330 
  __retres = NETDEV_TX_OK;
  
#line 1330 
  goto return_label;
  drop: 
#line 1331 
  ;
  
#line 1332 
  txo->stats.tx_drv_drops += 1U;
  
#line 1334 
  if ((int)flush != 0 && (unsigned int)txo->pend_wrb_cnt != 0U) 
#line 1335 
                                                                be_xmit_flush(adapter,txo); else ;
  
#line 1337 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 1337 
                return __retres;
}


#line 1340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_change_mtu(struct net_device *netdev, int new_mtu)
{
  int __retres;
  
#line 1342 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1343 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1345 
  if ((unsigned int)new_mtu + 4294967040U > 8744U) {
    
#line 1346 
    _dev_info((struct device const *)dev,"MTU must be between %d and %d bytes\n",256,9000);
    
#line 1348 
    __retres = -22;
    
#line 1348 
    goto return_label;
  }
  else ;
  
#line 1351 
  _dev_info((struct device const *)dev,"MTU changed from %d to %d bytes\n",netdev->mtu,new_mtu);
  
#line 1353 
  netdev->mtu = (unsigned int)new_mtu;
  
#line 1354 
  __retres = 0;
  return_label: 
#line 1354 
                return __retres;
}


#line 1357  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_in_all_promisc(struct be_adapter *adapter)
{
  bool __retres;
  
#line 1359 
  __retres = (_Bool)((adapter->if_flags & 648U) == 648U);
  
#line 1359 
  return __retres;
}


#line 1363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vlan_promisc(struct be_adapter *adapter)
{
  int __retres;
  int status;
  
#line 1365 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1368 
  if ((adapter->if_flags & 128U) != 0U) {
    
#line 1369 
    __retres = 0;
    
#line 1369 
    goto return_label;
  }
  else ;
  
#line 1371 
  status = be_cmd_rx_filter(adapter,128U,1U);
  
#line 1372 
  if (status == 0) {
    
#line 1373 
    _dev_info((struct device const *)dev,"Enabled VLAN promiscuous mode\n");
    
#line 1374 
    adapter->if_flags |= 128U;
  }
  else 
#line 1376 
       dev_err((struct device const *)dev,"Failed to enable VLAN promiscuous mode\n");
  
#line 1378 
  __retres = status;
  return_label: 
#line 1378 
                return __retres;
}


#line 1381  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_clear_vlan_promisc(struct be_adapter *adapter)
{
  int status;
  
#line 1383 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1386 
  status = be_cmd_rx_filter(adapter,128U,0U);
  
#line 1387 
  if (status == 0) {
    
#line 1388 
    _dev_info((struct device const *)dev,"Disabling VLAN promiscuous mode\n");
    
#line 1389 
    adapter->if_flags &= 4294967167U;
  }
  else ;
  
#line 1391 
  return status;
}


#line 1398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vid_config(struct be_adapter *adapter)
{
  int __retres;
  u16 vids[64U];
  bool tmp;
  unsigned long tmp_1;
  u16 tmp_2;
  unsigned long tmp_3;
  
#line 1400 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1402 
  u16 num = (unsigned short)0U;
  
#line 1402 
  u16 i = (unsigned short)0U;
  
#line 1403 
  int status = 0;
  
#line 1406 
  tmp = be_in_all_promisc(adapter);
  
#line 1406 
  if ((int)tmp != 0) {
    
#line 1407 
    __retres = 0;
    
#line 1407 
    goto return_label;
  }
  else ;
  
#line 1409 
  if ((int)adapter->vlans_added > (int)adapter->res.max_vlans) {
    int tmp_0;
    
#line 1410 
    tmp_0 = be_set_vlan_promisc(adapter);
    
#line 1410 
    __retres = tmp_0;
    
#line 1410 
    goto return_label;
  }
  else ;
  
#line 1413 
  tmp_1 = find_first_bit((unsigned long const *)(& adapter->vids),4096UL);
  
#line 1413 
  i = (unsigned short)tmp_1;
  
#line 1413 
  goto ldv_58678;
  ldv_58677: 
#line 1414 
  ;
  
#line 1414 
  tmp_2 = num;
  
#line 1414 
  num = (u16)((int)num + 1);
  
#line 1414 
  vids[(int)tmp_2] = i;
  
#line 1413 
  tmp_3 = find_next_bit((unsigned long const *)(& adapter->vids),4096UL,(unsigned long)((int)i + 1));
  
#line 1413 
  i = (unsigned short)tmp_3;
  ldv_58678: 
#line 1414 
  ;
  
#line 1413 
  if ((unsigned int)i <= 4095U) 
#line 1415 
                                goto ldv_58677; else 
#line 1418 
                                                     goto ldv_58679;
  ldv_58679: 
#line 1419 
  ;
  
#line 1416 
  status = be_cmd_vlan_config(adapter,(unsigned int)adapter->if_handle,(u16 *)(& vids),(unsigned int)num,0U);
  
#line 1417 
  if (status != 0) {
    
#line 1418 
    dev_err((struct device const *)dev,"Setting HW VLAN filtering failed\n");
    
#line 1420 
    if (status > 0 && (((status >> 16) & 255) == 171 || ((status >> 16) & 255) == 22)) {
      int tmp_4;
      
#line 1423 
      tmp_4 = be_set_vlan_promisc(adapter);
      
#line 1423 
      __retres = tmp_4;
      
#line 1423 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 1424 
    if ((adapter->if_flags & 128U) != 0U) 
#line 1425 
                                          status = be_clear_vlan_promisc(adapter); else ;
  
#line 1427 
  __retres = status;
  return_label: 
#line 1427 
                return __retres;
}


#line 1430  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vlan_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  int tmp_2;
  
#line 1432 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1433 
  int status = 0;
  
#line 1436 
  if (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) && (unsigned int)vid == 0U) {
    
#line 1437 
    __retres = status;
    
#line 1437 
    goto return_label;
  }
  else ;
  
#line 1439 
  if (0 != 0) {
    int tmp_0;
    
#line 1439 
    tmp_0 = constant_test_bit((long)vid,(unsigned long const volatile *)(& adapter->vids));
    
#line 1439 
    tmp_2 = tmp_0 != 0;
  }
  else {
    int tmp_1;
    
#line 1439 
    tmp_1 = variable_test_bit((long)vid,(unsigned long const volatile *)(& adapter->vids));
    
#line 1439 
    tmp_2 = tmp_1 != 0;
  }
  
#line 1439 
  if (tmp_2) {
    
#line 1440 
    __retres = status;
    
#line 1440 
    goto return_label;
  }
  else ;
  
#line 1442 
  set_bit((long)vid,(unsigned long volatile *)(& adapter->vids));
  
#line 1443 
  adapter->vlans_added = (u16)((int)adapter->vlans_added + 1);
  
#line 1445 
  status = be_vid_config(adapter);
  
#line 1446 
  if (status != 0) {
    
#line 1447 
    adapter->vlans_added = (u16)((int)adapter->vlans_added - 1);
    
#line 1448 
    set_bit((long)vid,(unsigned long volatile *)(& adapter->vids));
  }
  else ;
  
#line 1451 
  __retres = status;
  return_label: 
#line 1451 
                return __retres;
}


#line 1454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vlan_rem_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  int tmp_0;
  
#line 1456 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1459 
  if (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) && (unsigned int)vid == 0U) {
    
#line 1460 
    __retres = 0;
    
#line 1460 
    goto return_label;
  }
  else ;
  
#line 1462 
  set_bit((long)vid,(unsigned long volatile *)(& adapter->vids));
  
#line 1463 
  adapter->vlans_added = (u16)((int)adapter->vlans_added - 1);
  
#line 1465 
  tmp_0 = be_vid_config(adapter);
  
#line 1465 
  __retres = tmp_0;
  return_label: 
#line 1465 
                return __retres;
}


#line 1468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_clear_all_promisc(struct be_adapter *adapter)
{
  
#line 1470 
  be_cmd_rx_filter(adapter,648U,0U);
  
#line 1471 
  adapter->if_flags &= 4294966647U;
  
#line 1472 
  return;
}


#line 1474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_all_promisc(struct be_adapter *adapter)
{
  
#line 1476 
  be_cmd_rx_filter(adapter,648U,1U);
  
#line 1477 
  adapter->if_flags |= 648U;
  
#line 1478 
  return;
}


#line 1480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_mc_promisc(struct be_adapter *adapter)
{
  int status;
  
#line 1484 
  if ((adapter->if_flags & 512U) != 0U) 
#line 1485 
                                        goto return_label; else ;
  
#line 1487 
  status = be_cmd_rx_filter(adapter,512U,1U);
  
#line 1488 
  if (status == 0) 
#line 1489 
                   adapter->if_flags |= 512U; else ;
  return_label: 
#line 1490 
                return;
}


#line 1492  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_mc_list(struct be_adapter *adapter)
{
  int status;
  
#line 1496 
  status = be_cmd_rx_filter(adapter,4096U,1U);
  
#line 1497 
  if (status == 0) 
#line 1498 
                   adapter->if_flags &= 4294966783U; else 
#line 1500 
                                                          be_set_mc_promisc(adapter);
  
#line 1501 
  return;
}


#line 1503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_uc_list(struct be_adapter *adapter)
{
  struct netdev_hw_addr *ha;
  struct netdev_hw_addr *tmp;
  struct netdev_hw_addr *tmp_0;
  
#line 1506 
  int i = 1;
  
#line 1508 
  goto ldv_58713;
  ldv_58712: 
#line 1509 
  ;
  
#line 1509 
  be_cmd_pmac_del(adapter,(unsigned int)adapter->if_handle,(int)*(adapter->pmac_id + i),0U);
  
#line 1508 
  adapter->uc_macs -= 1U;
  
#line 1508 
  i += 1;
  ldv_58713: 
#line 1509 
  ;
  
#line 1508 
  if (adapter->uc_macs != 0U) 
#line 1510 
                              goto ldv_58712; else 
#line 1513 
                                                   goto ldv_58714;
  ldv_58714: 
#line 1514 
  ;
  
#line 1512 
  if ((adapter->netdev)->uc.count > (int)adapter->res.max_uc_mac) {
    
#line 1513 
    be_set_all_promisc(adapter);
    
#line 1514 
    goto return_label;
  }
  else ;
  {
    
#line 1517 
    struct list_head const *__mptr = (struct list_head const *)(adapter->netdev)->uc.list.next;
    
#line 1517 
    tmp = (struct netdev_hw_addr *)__mptr;
  }
  
#line 1517 
  ha = tmp;
  
#line 1517 
  goto ldv_58720;
  ldv_58719: 
#line 1518 
  ;
  
#line 1518 
  adapter->uc_macs += 1U;
  
#line 1519 
  be_cmd_pmac_add(adapter,(u8 *)(& ha->addr),(unsigned int)adapter->if_handle,adapter->pmac_id + adapter->uc_macs,0U);
  {
    
#line 1517 
    struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
    
#line 1517 
    tmp_0 = (struct netdev_hw_addr *)__mptr_0;
  }
  
#line 1517 
  ha = tmp_0;
  ldv_58720: 
#line 1519 
  ;
  
#line 1517 
  if (& ha->list != & (adapter->netdev)->uc.list) 
#line 1519 
                                                  goto ldv_58719; else 
                                                                    
#line 1522 
                                                                    goto ldv_58721;
  ldv_58721: 
#line 1523 
  ;
  return_label: 
#line 1524 
                return;
}


#line 1524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_clear_uc_list(struct be_adapter *adapter)
{
  int i;
  
#line 1528 
  i = 1;
  
#line 1528 
  goto ldv_58727;
  ldv_58726: 
#line 1529 
  ;
  
#line 1529 
  be_cmd_pmac_del(adapter,(unsigned int)adapter->if_handle,(int)*(adapter->pmac_id + i),0U);
  
#line 1528 
  i += 1;
  ldv_58727: 
#line 1529 
  ;
  
#line 1528 
  if (adapter->uc_macs + 1U > (unsigned int)i) 
#line 1530 
                                               goto ldv_58726; else 
#line 1533 
                                                                    goto ldv_58728;
  ldv_58728: 
#line 1534 
  ;
  
#line 1531 
  adapter->uc_macs = 0U;
  
#line 1532 
  return;
}


#line 1534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_set_rx_mode(struct net_device *netdev)
{
  bool tmp_0;
  
#line 1536 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1538 
  if ((netdev->flags & 256U) != 0U) {
    
#line 1539 
    be_set_all_promisc(adapter);
    
#line 1540 
    goto return_label;
  }
  else ;
  
#line 1544 
  tmp_0 = be_in_all_promisc(adapter);
  
#line 1544 
  if ((int)tmp_0 != 0) {
    
#line 1545 
    be_clear_all_promisc(adapter);
    
#line 1546 
    if ((unsigned int)adapter->vlans_added != 0U) 
#line 1547 
                                                  be_vid_config(adapter); else ;
  }
  else ;
  
#line 1551 
  if ((netdev->flags & 512U) != 0U || netdev->mc.count > (int)adapter->res.max_mcast_mac) {
    
#line 1553 
    be_set_mc_promisc(adapter);
    
#line 1554 
    goto return_label;
  }
  else ;
  
#line 1557 
  if ((unsigned int)netdev->uc.count != adapter->uc_macs) 
#line 1558 
                                                          be_set_uc_list(adapter); else ;
  
#line 1560 
  be_set_mc_list(adapter);
  return_label: 
#line 1561 
                return;
}


#line 1563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_mac(struct net_device *netdev, int vf, u8 *mac)
{
  int __retres;
  int status;
  int tmp_1;
  bool tmp_0;
  bool tmp_2;
  
#line 1565 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1566 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + vf;
  
#line 1569 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) {
    
#line 1570 
    __retres = -1;
    
#line 1570 
    goto return_label;
  }
  else ;
  
#line 1572 
  tmp_0 = is_valid_ether_addr((u8 const *)mac);
  
#line 1572 
  if (tmp_0) 
#line 1572 
             tmp_1 = 0; else 
#line 1572 
                             tmp_1 = 1;
  
#line 1572 
  if (tmp_1) {
    
#line 1573 
    __retres = -22;
    
#line 1573 
    goto return_label;
  }
  else 
    
#line 1572 
    if ((int)adapter->num_vfs <= vf) {
      
#line 1573 
      __retres = -22;
      
#line 1573 
      goto return_label;
    }
    else ;
  
#line 1578 
  tmp_2 = ether_addr_equal((u8 const *)mac,(u8 const *)(& vf_cfg->mac_addr));
  
#line 1578 
  if ((int)tmp_2 != 0) {
    
#line 1579 
    __retres = 0;
    
#line 1579 
    goto return_label;
  }
  else ;
  
#line 1581 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    
#line 1582 
    be_cmd_pmac_del(adapter,(unsigned int)vf_cfg->if_handle,vf_cfg->pmac_id,(unsigned int)(vf + 1));
    
#line 1585 
    status = be_cmd_pmac_add(adapter,mac,(unsigned int)vf_cfg->if_handle,(u32 *)(& vf_cfg->pmac_id),(unsigned int)(vf + 1));
  }
  else 
#line 1588 
       status = be_cmd_set_mac(adapter,mac,vf_cfg->if_handle,(unsigned int)(vf + 1));
  
#line 1592 
  if (status != 0) {
    int tmp_3;
    
#line 1593 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"MAC %pM set on VF %d Failed: %#x",mac,vf,status);
    
#line 1595 
    if (status <= 0) 
#line 1595 
                     tmp_3 = status; else 
#line 1595 
                                          tmp_3 = -5;
    
#line 1595 
    __retres = tmp_3;
    
#line 1595 
    goto return_label;
  }
  else ;
  
#line 1598 
  ether_addr_copy((u8 *)(& vf_cfg->mac_addr),(u8 const *)mac);
  
#line 1600 
  __retres = 0;
  return_label: 
#line 1600 
                return __retres;
}


#line 1603  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *vi)
{
  int __retres;
  
#line 1606 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1607 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + vf;
  
#line 1609 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) {
    
#line 1610 
    __retres = -1;
    
#line 1610 
    goto return_label;
  }
  else ;
  
#line 1612 
  if ((int)adapter->num_vfs <= vf) {
    
#line 1613 
    __retres = -22;
    
#line 1613 
    goto return_label;
  }
  else ;
  
#line 1615 
  vi->vf = (unsigned int)vf;
  
#line 1616 
  vi->max_tx_rate = vf_cfg->tx_rate;
  
#line 1617 
  vi->min_tx_rate = 0U;
  
#line 1618 
  vi->vlan = (unsigned int)vf_cfg->vlan_tag & 4095U;
  
#line 1619 
  vi->qos = (unsigned int)((int)vf_cfg->vlan_tag >> 13);
  
#line 1620 
  memcpy((void *)(& vi->mac),(void const *)(& vf_cfg->mac_addr),6UL);
  
#line 1621 
  vi->linkstate = (adapter->vf_cfg + vf)->plink_tracking;
  
#line 1622 
  vi->spoofchk = (unsigned int)(adapter->vf_cfg + vf)->spoofchk;
  
#line 1624 
  __retres = 0;
  return_label: 
#line 1624 
                return __retres;
}


#line 1627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_tvt(struct be_adapter *adapter, int vf, u16 vlan)
{
  int __retres;
  u16 vids[64U];
  int status;
  
#line 1629 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + vf;
  
#line 1631 
  int vf_if_id = vf_cfg->if_handle;
  
#line 1635 
  status = be_cmd_set_hsw_config(adapter,(unsigned short)((int)vlan),(unsigned int)(vf + 1),(unsigned short)((int)((unsigned short)vf_if_id)),(unsigned short)0,(unsigned char)0);
  
#line 1636 
  if (status != 0) {
    
#line 1637 
    __retres = status;
    
#line 1637 
    goto return_label;
  }
  else ;
  
#line 1640 
  vids[0] = (unsigned short)0U;
  
#line 1641 
  status = be_cmd_vlan_config(adapter,(unsigned int)vf_if_id,(u16 *)(& vids),1U,(unsigned int)(vf + 1));
  
#line 1642 
  if (status == 0) 
#line 1643 
                   _dev_info((struct device const *)(& (adapter->pdev)->dev),"Cleared guest VLANs on VF%d",vf); else ;
  
#line 1647 
  if ((vf_cfg->privileges & 64U) != 0U) {
    
#line 1648 
    status = be_cmd_set_fn_privileges(adapter,vf_cfg->privileges & 4294967231U,(unsigned int)(vf + 1));
    
#line 1650 
    if (status == 0) 
#line 1651 
                     vf_cfg->privileges &= 4294967231U; else ;
  }
  else ;
  
#line 1653 
  __retres = 0;
  return_label: 
#line 1653 
                return __retres;
}


#line 1656  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_clear_vf_tvt(struct be_adapter *adapter, int vf)
{
  int __retres;
  int status;
  
#line 1658 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + vf;
  
#line 1659 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1663 
  status = be_cmd_set_hsw_config(adapter,(unsigned short)65535,(unsigned int)(vf + 1),(unsigned short)((int)((unsigned short)vf_cfg->if_handle)),(unsigned short)0,(unsigned char)0);
  
#line 1665 
  if (status != 0) {
    
#line 1666 
    __retres = status;
    
#line 1666 
    goto return_label;
  }
  else ;
  
#line 1669 
  if ((vf_cfg->privileges & 64U) == 0U) {
    
#line 1670 
    status = be_cmd_set_fn_privileges(adapter,vf_cfg->privileges | 64U,(unsigned int)(vf + 1));
    
#line 1672 
    if (status == 0) {
      
#line 1673 
      vf_cfg->privileges |= 64U;
      
#line 1674 
      _dev_info((struct device const *)dev,"VF%d: FILTMGMT priv enabled",vf);
    }
    else ;
  }
  else ;
  
#line 1678 
  _dev_info((struct device const *)dev,"Disable/re-enable i/f in VM to clear Transparent VLAN tag");
  
#line 1680 
  __retres = 0;
  return_label: 
#line 1680 
                return __retres;
}


#line 1683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos)
{
  int __retres;
  int status;
  
#line 1685 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1686 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + vf;
  
#line 1689 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) {
    
#line 1690 
    __retres = -1;
    
#line 1690 
    goto return_label;
  }
  else ;
  
#line 1692 
  if ((int)adapter->num_vfs <= vf || ((unsigned int)vlan > 4095U || (unsigned int)qos > 7U)) {
    
#line 1693 
    __retres = -22;
    
#line 1693 
    goto return_label;
  }
  else ;
  
#line 1695 
  if ((unsigned int)vlan != 0U || (unsigned int)qos != 0U) {
    
#line 1696 
    vlan = (unsigned short)(((int)qos << 13) | (int)vlan);
    
#line 1697 
    status = be_set_vf_tvt(adapter,vf,(unsigned short)((int)vlan));
  }
  else 
#line 1699 
       status = be_clear_vf_tvt(adapter,vf);
  
#line 1702 
  if (status != 0) {
    int tmp_0;
    
#line 1703 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"VLAN %d config on VF %d failed : %#x\n",(int)vlan,vf,status);
    
#line 1706 
    if (status <= 0) 
#line 1706 
                     tmp_0 = status; else 
#line 1706 
                                          tmp_0 = -5;
    
#line 1706 
    __retres = tmp_0;
    
#line 1706 
    goto return_label;
  }
  else ;
  
#line 1709 
  vf_cfg->vlan_tag = vlan;
  
#line 1710 
  __retres = 0;
  return_label: 
#line 1710 
                return __retres;
}


#line 1713  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_tx_rate(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate)
{
  int __retres;
  int percent_rate;
  u8 link_status;
  int tmp_0;
  
#line 1716 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1717 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1718 
  int status = 0;
  
#line 1719 
  u16 link_speed = (unsigned short)0U;
  
#line 1722 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) {
    
#line 1723 
    __retres = -1;
    
#line 1723 
    goto return_label;
  }
  else ;
  
#line 1725 
  if ((int)adapter->num_vfs <= vf) {
    
#line 1726 
    __retres = -22;
    
#line 1726 
    goto return_label;
  }
  else ;
  
#line 1728 
  if (min_tx_rate != 0) {
    
#line 1729 
    __retres = -22;
    
#line 1729 
    goto return_label;
  }
  else ;
  
#line 1731 
  if (max_tx_rate == 0) 
#line 1732 
                        goto config_qos; else ;
  
#line 1734 
  status = be_cmd_link_status_query(adapter,& link_speed,& link_status,0U);
  
#line 1736 
  if (status != 0) 
#line 1737 
                   goto err; else ;
  
#line 1739 
  if ((unsigned int)link_status == 0U) {
    
#line 1740 
    dev_err((struct device const *)dev,"TX-rate setting not allowed when link is down\n");
    
#line 1741 
    status = -100;
    
#line 1742 
    goto err;
  }
  else ;
  
#line 1745 
  if (max_tx_rate <= 99 || (int)link_speed < max_tx_rate) {
    
#line 1746 
    dev_err((struct device const *)dev,"TX-rate must be between 100 and %d Mbps\n",(int)link_speed);
    
#line 1748 
    status = -22;
    
#line 1749 
    goto err;
  }
  else ;
  
#line 1753 
  percent_rate = (int)((unsigned int)link_speed / 100U);
  
#line 1754 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && max_tx_rate % percent_rate != 0) {
    
#line 1755 
    dev_err((struct device const *)dev,"TX-rate must be a multiple of %d Mbps\n",percent_rate);
    
#line 1757 
    status = -22;
    
#line 1758 
    goto err;
  }
  else ;
  config_qos: 
#line 1761 
  ;
  
#line 1762 
  status = be_cmd_config_qos(adapter,(unsigned int)max_tx_rate,(unsigned short)((int)link_speed),(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
  
#line 1763 
  if (status != 0) 
#line 1764 
                   goto err; else ;
  
#line 1766 
  (adapter->vf_cfg + vf)->tx_rate = (unsigned int)max_tx_rate;
  
#line 1767 
  __retres = 0;
  
#line 1767 
  goto return_label;
  err: 
#line 1769 
  ;
  
#line 1770 
  dev_err((struct device const *)dev,"TX-rate setting of %dMbps on VF%d failed\n",max_tx_rate,vf);
  
#line 1772 
  if (status <= 0) 
#line 1772 
                   tmp_0 = status; else 
#line 1772 
                                        tmp_0 = -5;
  
#line 1772 
  __retres = tmp_0;
  return_label: 
#line 1772 
                return __retres;
}


#line 1775  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_link_state(struct net_device *netdev, int vf, int link_state)
{
  int __retres;
  int status;
  
#line 1778 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1781 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) {
    
#line 1782 
    __retres = -1;
    
#line 1782 
    goto return_label;
  }
  else ;
  
#line 1784 
  if ((int)adapter->num_vfs <= vf) {
    
#line 1785 
    __retres = -22;
    
#line 1785 
    goto return_label;
  }
  else ;
  
#line 1787 
  status = be_cmd_set_logical_link_config(adapter,link_state,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
  
#line 1788 
  if (status != 0) {
    int tmp_0;
    
#line 1789 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Link state change on VF %d failed: %#x\n",vf,status);
    
#line 1791 
    if (status <= 0) 
#line 1791 
                     tmp_0 = status; else 
#line 1791 
                                          tmp_0 = -5;
    
#line 1791 
    __retres = tmp_0;
    
#line 1791 
    goto return_label;
  }
  else ;
  
#line 1794 
  (adapter->vf_cfg + vf)->plink_tracking = (unsigned int)link_state;
  
#line 1796 
  __retres = 0;
  return_label: 
#line 1796 
                return __retres;
}


#line 1799  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_set_vf_spoofchk(struct net_device *netdev, int vf, bool enable)
{
  int __retres;
  u8 spoofchk;
  int status;
  
#line 1801 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1802 
  struct be_vf_cfg *vf_cfg = adapter->vf_cfg + vf;
  
#line 1806 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) {
    
#line 1807 
    __retres = -1;
    
#line 1807 
    goto return_label;
  }
  else ;
  
#line 1809 
  if ((int)adapter->num_vfs <= vf) {
    
#line 1810 
    __retres = -22;
    
#line 1810 
    goto return_label;
  }
  else ;
  
#line 1812 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    
#line 1813 
    __retres = -95;
    
#line 1813 
    goto return_label;
  }
  else ;
  
#line 1815 
  if ((int)vf_cfg->spoofchk == (int)enable) {
    
#line 1816 
    __retres = 0;
    
#line 1816 
    goto return_label;
  }
  else ;
  
#line 1818 
  if ((int)enable != 0) 
#line 1818 
                        spoofchk = (unsigned char)2U; else 
#line 1818 
                                                           spoofchk = (unsigned char)3U;
  
#line 1820 
  status = be_cmd_set_hsw_config(adapter,(unsigned short)0,(unsigned int)(vf + 1),(unsigned short)((int)((unsigned short)vf_cfg->if_handle)),(unsigned short)0,(unsigned char)((int)spoofchk));
  
#line 1822 
  if (status != 0) {
    int tmp_0;
    
#line 1823 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Spoofchk change on VF %d failed: %#x\n",vf,status);
    
#line 1825 
    if (status <= 0) 
#line 1825 
                     tmp_0 = status; else 
#line 1825 
                                          tmp_0 = -5;
    
#line 1825 
    __retres = tmp_0;
    
#line 1825 
    goto return_label;
  }
  else ;
  
#line 1828 
  vf_cfg->spoofchk = enable;
  
#line 1829 
  __retres = 0;
  return_label: 
#line 1829 
                return __retres;
}


#line 1832  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_aic_update(struct be_aic_obj *aic, u64 rx_pkts, u64 tx_pkts, ulong now)
{
  
#line 1835 
  aic->rx_pkts_prev = rx_pkts;
  
#line 1836 
  aic->tx_reqs_prev = tx_pkts;
  
#line 1837 
  aic->jiffies = now;
  
#line 1838 
  return;
}


#line 1840  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_new_eqd(struct be_eq_obj *eqo)
{
  int __retres;
  int eqd;
  int start;
  struct be_aic_obj *aic;
  struct be_rx_obj *rxo;
  struct be_tx_obj *txo;
  ulong now;
  u32 pps;
  u32 delta;
  int i;
  unsigned int tmp;
  bool tmp_0;
  unsigned int tmp_1;
  bool tmp_2;
  u32 tmp_6;
  u32 tmp_8;
  
#line 1842 
  struct be_adapter *adapter = eqo->adapter;
  
#line 1847 
  u64 rx_pkts = 0ULL;
  
#line 1847 
  u64 tx_pkts = 0ULL;
  
#line 1852 
  aic = & adapter->aic_obj[(int)eqo->idx];
  
#line 1853 
  if (! aic->enable) {
    
#line 1854 
    if (aic->jiffies != 0UL) 
#line 1855 
                             aic->jiffies = 0UL; else ;
    
#line 1856 
    eqd = (int)aic->et_eqd;
    
#line 1857 
    __retres = eqd;
    
#line 1857 
    goto return_label;
  }
  else ;
  
#line 1860 
  i = (int)eqo->idx;
  
#line 1860 
  rxo = & adapter->rx_obj[i];
  
#line 1860 
  goto ldv_58827;
  ldv_58826: 
#line 1861 
  ;
  ldv_58824: 
#line 1862 
  ;
  
#line 1862 
  tmp = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& rxo->stats.sync));
  
#line 1862 
  start = (int)tmp;
  
#line 1863 
  rx_pkts = rxo->stats.rx_pkts + rx_pkts;
  
#line 1864 
  tmp_0 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& rxo->stats.sync),(unsigned int)start);
  
#line 1864 
  if ((int)tmp_0 != 0) 
#line 1866 
                       goto ldv_58824; else 
#line 1869 
                                            goto ldv_58825;
  ldv_58825: 
#line 1870 
  ;
  
#line 1860 
  i = (int)adapter->num_evt_qs + i;
  
#line 1860 
  rxo += (int)adapter->num_evt_qs;
  ldv_58827: 
#line 1861 
  ;
  
#line 1860 
  if ((int)adapter->num_rx_qs > i) 
#line 1862 
                                   goto ldv_58826; else 
#line 1865 
                                                        goto ldv_58828;
  ldv_58828: 
#line 1866 
  ;
  
#line 1867 
  i = (int)eqo->idx;
  
#line 1867 
  txo = & adapter->tx_obj[i];
  
#line 1867 
  goto ldv_58832;
  ldv_58831: 
#line 1868 
  ;
  ldv_58829: 
#line 1869 
  ;
  
#line 1869 
  tmp_1 = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& txo->stats.sync));
  
#line 1869 
  start = (int)tmp_1;
  
#line 1870 
  tx_pkts = txo->stats.tx_reqs + tx_pkts;
  
#line 1871 
  tmp_2 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& txo->stats.sync),(unsigned int)start);
  
#line 1871 
  if ((int)tmp_2 != 0) 
#line 1873 
                       goto ldv_58829; else 
#line 1876 
                                            goto ldv_58830;
  ldv_58830: 
#line 1877 
  ;
  
#line 1867 
  i = (int)adapter->num_evt_qs + i;
  
#line 1867 
  txo += (int)adapter->num_evt_qs;
  ldv_58832: 
#line 1868 
  ;
  
#line 1867 
  if ((int)adapter->num_tx_qs > i) 
#line 1869 
                                   goto ldv_58831; else 
#line 1872 
                                                        goto ldv_58833;
  ldv_58833: 
#line 1873 
  ;
  
#line 1875 
  now = jiffies;
  
#line 1876 
  if (aic->jiffies == 0UL) 
#line 1876 
                           goto _LOR;
  else {
    int tmp_3;
    {
      unsigned long __dummy;
      ulong __dummy2;
      
#line 1876 
      tmp_3 = 1;
    }
    
#line 1876 
    if (tmp_3 != 0) {
      int tmp_4;
      {
        unsigned long __dummy_0;
        ulong __dummy2_0;
        
#line 1876 
        tmp_4 = 1;
      }
      
#line 1876 
      if (tmp_4 != 0) {
        
#line 1876 
        if ((long)(now - aic->jiffies) < 0L) 
#line 1876 
                                             goto _LOR; else 
#line 1876 
                                                             goto _LAND_0;
      }
      else 
#line 1876 
           goto _LAND_0;
    }
    else {
      _LAND_0: 
#line 1876 
      ;
      
#line 1876 
      if (aic->rx_pkts_prev > rx_pkts) 
#line 1876 
                                       goto _LOR;
      else 
        
#line 1877 
        if (aic->tx_reqs_prev > tx_pkts) {
          _LOR: {
                  
#line 1879 
                  be_aic_update(aic,rx_pkts,tx_pkts,now);
                  
#line 1880 
                  __retres = (int)aic->prev_eqd;
                  
#line 1880 
                  goto return_label;
                }
        }
        else ;
    }
  }
  
#line 1883 
  delta = jiffies_to_msecs(now - aic->jiffies);
  
#line 1884 
  if (delta == 0U) {
    
#line 1885 
    __retres = (int)aic->prev_eqd;
    
#line 1885 
    goto return_label;
  }
  else ;
  
#line 1887 
  pps = (((unsigned int)rx_pkts - (unsigned int)aic->rx_pkts_prev) * 1000U) / delta + (((unsigned int)tx_pkts - (unsigned int)aic->tx_reqs_prev) * 1000U) / delta;
  
#line 1889 
  eqd = (int)(pps / 15000U << 2);
  
#line 1891 
  if (eqd <= 7) 
#line 1892 
                eqd = 0; else ;
  {
    u32 tmp_5;
    
#line 1893 
    u32 __min1 = (unsigned int)eqd;
    
#line 1893 
    u32 __min2 = aic->max_eqd;
    
#line 1893 
    if (__min1 < __min2) 
#line 1893 
                         tmp_5 = __min1; else 
#line 1893 
                                              tmp_5 = __min2;
    
#line 1893 
    tmp_6 = tmp_5;
  }
  
#line 1893 
  eqd = (int)tmp_6;
  {
    u32 tmp_7;
    
#line 1894 
    u32 __max1 = (unsigned int)eqd;
    
#line 1894 
    u32 __max2 = aic->min_eqd;
    
#line 1894 
    if (__max1 > __max2) 
#line 1894 
                         tmp_7 = __max1; else 
#line 1894 
                                              tmp_7 = __max2;
    
#line 1894 
    tmp_8 = tmp_7;
  }
  
#line 1894 
  eqd = (int)tmp_8;
  
#line 1896 
  be_aic_update(aic,rx_pkts,tx_pkts,now);
  
#line 1898 
  __retres = eqd;
  return_label: 
#line 1898 
                return __retres;
}


#line 1902  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u32 be_get_eq_delay_mult_enc(struct be_eq_obj *eqo)
{
  u32 __retres;
  int eqd;
  u32 mult_enc;
  int tmp;
  
#line 1904 
  struct be_adapter *adapter = eqo->adapter;
  
#line 1905 
  struct be_aic_obj *aic = & adapter->aic_obj[(int)eqo->idx];
  
#line 1906 
  ulong now = jiffies;
  
#line 1910 
  if (! aic->enable) {
    
#line 1911 
    __retres = 0U;
    
#line 1911 
    goto return_label;
  }
  else ;
  {
    unsigned long __dummy;
    ulong __dummy2;
    
#line 1913 
    tmp = 1;
  }
  
#line 1913 
  if (tmp != 0) {
    int tmp_0;
    {
      unsigned long __dummy_0;
      ulong __dummy2_0;
      
#line 1913 
      tmp_0 = 1;
    }
    
#line 1913 
    if (tmp_0 != 0) {
      
#line 1913 
      if ((long)(aic->jiffies - now) >= 0L) 
#line 1913 
                                            goto _LOR; else 
#line 1913 
                                                            goto _LAND_0;
    }
    else 
#line 1913 
         goto _LAND_0;
  }
  else {
    unsigned int tmp_1;
    _LAND_0: 
#line 1913 
    tmp_1 = jiffies_to_msecs(now - aic->jiffies);
    
#line 1913 
    if (tmp_1 == 0U) _LOR: 
#line 1915 
                           eqd = (int)aic->prev_eqd; else 
#line 1917 
                                                          eqd = be_get_new_eqd(eqo);
  }
  
#line 1919 
  if (eqd > 100) 
#line 1920 
                 mult_enc = 1U;
  else 
    
#line 1921 
    if (eqd > 60) 
#line 1922 
                  mult_enc = 2U;
    else 
      
#line 1923 
      if (eqd > 20) 
#line 1924 
                    mult_enc = 3U; else 
#line 1926 
                                        mult_enc = 0U;
  
#line 1928 
  aic->prev_eqd = (unsigned int)eqd;
  
#line 1930 
  __retres = mult_enc;
  return_label: 
#line 1930 
                return __retres;
}


#line 1933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
void be_eqd_update(struct be_adapter *adapter, bool force_update)
{
  struct be_set_eqd set_eqd[32U];
  struct be_aic_obj *aic;
  struct be_eq_obj *eqo;
  int i;
  int eqd;
  
#line 1938 
  int num = 0;
  
#line 1940 
  i = 0;
  
#line 1940 
  eqo = & adapter->eq_obj[i];
  
#line 1940 
  goto ldv_58871;
  ldv_58870: 
#line 1941 
  ;
  
#line 1941 
  aic = & adapter->aic_obj[(int)eqo->idx];
  
#line 1942 
  eqd = be_get_new_eqd(eqo);
  
#line 1943 
  if ((int)force_update != 0 || aic->prev_eqd != (unsigned int)eqd) {
    
#line 1944 
    set_eqd[num].delay_multiplier = (unsigned int)((eqd * 65) / 100);
    
#line 1945 
    set_eqd[num].eq_id = (unsigned int)eqo->q.id;
    
#line 1946 
    aic->prev_eqd = (unsigned int)eqd;
    
#line 1947 
    num += 1;
  }
  else ;
  
#line 1940 
  i += 1;
  
#line 1940 
  eqo += 1;
  ldv_58871: 
#line 1941 
  ;
  
#line 1940 
  if ((int)adapter->num_evt_qs > i) 
#line 1942 
                                    goto ldv_58870; else 
#line 1945 
                                                         goto ldv_58872;
  ldv_58872: 
#line 1946 
  ;
  
#line 1951 
  if (num != 0) 
#line 1952 
                be_cmd_modify_eqd(adapter,(struct be_set_eqd *)(& set_eqd),num); else ;
  
#line 1953 
  return;
}


#line 1955  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_stats_update(struct be_rx_obj *rxo, struct be_rx_compl_info *rxcp)
{
  
#line 1958 
  struct be_rx_stats *stats = & rxo->stats;
  
#line 1960 
  u64_stats_init(& stats->sync);
  
#line 1961 
  stats->rx_compl += 1U;
  
#line 1962 
  stats->rx_bytes += (unsigned long long)rxcp->pkt_size;
  
#line 1963 
  stats->rx_pkts += 1ULL;
  
#line 1964 
  if ((unsigned int)rxcp->pkt_type == 1U) 
#line 1965 
                                          stats->rx_mcast_pkts += 1U; else ;
  
#line 1966 
  if ((unsigned int)rxcp->err != 0U) 
#line 1967 
                                     stats->rx_compl_err += 1U; else ;
  
#line 1968 
  u64_stats_init(& stats->sync);
  
#line 1969 
  return;
}


#line 1971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool csum_passed(struct be_rx_compl_info *rxcp)
{
  bool __retres;
  
#line 1977 
  __retres = (_Bool)((((((unsigned int)rxcp->tcpf != 0U || (unsigned int)rxcp->udpf != 0U) && (unsigned int)rxcp->l4_csum != 0U) && ((unsigned int)rxcp->ip_csum != 0U || (unsigned int)rxcp->ipv6 != 0U)) && (unsigned int)rxcp->err == 0U) != 0);
  
#line 1977 
  return __retres;
}


#line 1980  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct be_rx_page_info *get_rx_page_info(struct be_rx_obj *rxo)
{
  struct be_rx_page_info *rx_page_info;
  
#line 1982 
  struct be_adapter *adapter = rxo->adapter;
  
#line 1984 
  struct be_queue_info *rxq = & rxo->q;
  
#line 1985 
  u16 frag_idx = rxq->tail;
  
#line 1987 
  rx_page_info = & rxo->page_info_tbl[(int)frag_idx];
  
#line 1988 
  if ((long)(rx_page_info->page == (struct page *)0) != 0L) {
    
#line 1990 
    ldv_inline_asm();
    
#line 1988 
    ;
  }
  else ;
  
#line 1990 
  if ((int)rx_page_info->last_frag != 0) {
    
#line 1991 
    dma_unmap_page(& (adapter->pdev)->dev,rx_page_info->bus,(unsigned long)adapter->big_page_size,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 1994 
    rx_page_info->last_frag = (_Bool)0;
  }
  else 
#line 1996 
       dma_sync_single_for_cpu(& (adapter->pdev)->dev,rx_page_info->bus,(unsigned long)rx_frag_size,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 2001 
  queue_tail_inc(rxq);
  
#line 2002 
  atomic_dec_0(& rxq->used);
  
#line 2003 
  return rx_page_info;
}


#line 2007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_compl_discard(struct be_rx_obj *rxo, struct be_rx_compl_info *rxcp)
{
  struct be_rx_page_info *page_info;
  u16 i;
  
#line 2011 
  u16 num_rcvd = (unsigned short)rxcp->num_rcvd;
  
#line 2013 
  i = (unsigned short)0U;
  
#line 2013 
  goto ldv_58896;
  ldv_58895: 
#line 2014 
  ;
  
#line 2014 
  page_info = get_rx_page_info(rxo);
  
#line 2015 
  put_page(page_info->page);
  
#line 2016 
  memset((void *)page_info,0,24UL);
  
#line 2013 
  i = (u16)((int)i + 1);
  ldv_58896: 
#line 2014 
  ;
  
#line 2013 
  if ((int)i < (int)num_rcvd) 
#line 2015 
                              goto ldv_58895; else 
#line 2018 
                                                   goto ldv_58897;
  ldv_58897: 
#line 2019 
  ;
  
#line 2020 
  return;
}


#line 2024  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void skb_fill_rx_data(struct be_rx_obj *rxo, struct sk_buff *skb, struct be_rx_compl_info *rxcp)
{
  struct be_rx_page_info *page_info;
  u16 i;
  u16 j;
  u16 hdr_len;
  u16 curr_frag_len;
  u16 remaining;
  u8 *start;
  void *tmp;
  int tmp_1;
  int tmp_6;
  unsigned char *tmp_10;
  
#line 2032 
  page_info = get_rx_page_info(rxo);
  
#line 2033 
  tmp = lowmem_page_address((struct page const *)page_info->page);
  
#line 2033 
  start = (u8 *)(tmp + (int)page_info->page_offset);
  
#line 2034 
  __builtin_prefetch((void const *)start);
  {
    int tmp_0;
    
#line 2037 
    u16 _min1 = rxcp->pkt_size;
    
#line 2037 
    ushort _min2 = rx_frag_size;
    
#line 2037 
    if ((int)_min1 < (int)_min2) 
#line 2037 
                                 tmp_0 = (int)_min1; else 
#line 2037 
                                                          tmp_0 = (int)_min2;
    
#line 2037 
    tmp_1 = tmp_0;
  }
  
#line 2037 
  curr_frag_len = (unsigned short)tmp_1;
  
#line 2039 
  skb->len = (unsigned int)curr_frag_len;
  
#line 2040 
  if ((unsigned int)curr_frag_len <= 64U) {
    
#line 2041 
    memcpy((void *)skb->data,(void const *)start,(unsigned long)curr_frag_len);
    
#line 2043 
    put_page(page_info->page);
    
#line 2044 
    skb->data_len = 0U;
    
#line 2045 
    skb->tail += (unsigned int)curr_frag_len;
  }
  else {
    unsigned char *tmp_2;
    unsigned char *tmp_3;
    unsigned char *tmp_4;
    
#line 2047 
    hdr_len = (unsigned short)14U;
    
#line 2048 
    memcpy((void *)skb->data,(void const *)start,(unsigned long)hdr_len);
    
#line 2049 
    tmp_2 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2049 
    ((struct skb_shared_info *)tmp_2)->nr_frags = (unsigned char)1U;
    
#line 2050 
    skb_frag_set_page(skb,0,page_info->page);
    
#line 2051 
    tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2051 
    ((struct skb_shared_info *)tmp_3)->frags[0].page_offset = (unsigned int)((int)page_info->page_offset + (int)hdr_len);
    
#line 2053 
    ;
    
#line 2053 
    tmp_4 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2053 
    skb_frag_size_set(& ((struct skb_shared_info *)tmp_4)->frags[0],(unsigned int)((int)curr_frag_len - (int)hdr_len));
    
#line 2055 
    skb->data_len = (unsigned int)((int)curr_frag_len - (int)hdr_len);
    
#line 2056 
    skb->truesize += (unsigned int)rx_frag_size;
    
#line 2057 
    skb->tail += (unsigned int)hdr_len;
  }
  
#line 2059 
  page_info->page = (struct page *)0;
  
#line 2061 
  if ((int)rxcp->pkt_size <= (int)rx_frag_size) {
    
#line 2062 
    if ((long)((unsigned int)rxcp->num_rcvd != 1U) != 0L) {
      
#line 2064 
      ldv_inline_asm();
      
#line 2062 
      ;
    }
    else ;
    
#line 2063 
    goto return_label;
  }
  else ;
  
#line 2067 
  remaining = (unsigned short)((int)rxcp->pkt_size - (int)curr_frag_len);
  
#line 2068 
  i = (unsigned short)1U;
  
#line 2068 
  j = (unsigned short)0U;
  
#line 2068 
  goto ldv_58917;
  ldv_58916: 
#line 2069 
  ;
  
#line 2069 
  page_info = get_rx_page_info(rxo);
  {
    int tmp_5;
    
#line 2070 
    u16 _min1_0 = remaining;
    
#line 2070 
    ushort _min2_0 = rx_frag_size;
    
#line 2070 
    if ((int)_min1_0 < (int)_min2_0) 
#line 2070 
                                     tmp_5 = (int)_min1_0; else 
#line 2070 
                                                                tmp_5 = (int)_min2_0;
    
#line 2070 
    tmp_6 = tmp_5;
  }
  
#line 2070 
  curr_frag_len = (unsigned short)tmp_6;
  
#line 2073 
  if ((unsigned int)page_info->page_offset == 0U) {
    unsigned char *tmp_7;
    unsigned char *tmp_8;
    unsigned char *tmp_9;
    
#line 2075 
    j = (u16)((int)j + 1);
    
#line 2076 
    skb_frag_set_page(skb,(int)j,page_info->page);
    
#line 2077 
    tmp_7 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2077 
    ((struct skb_shared_info *)tmp_7)->frags[(int)j].page_offset = (unsigned int)page_info->page_offset;
    
#line 2079 
    tmp_8 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2079 
    skb_frag_size_set(& ((struct skb_shared_info *)tmp_8)->frags[(int)j],0U);
    
#line 2080 
    tmp_9 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2080 
    ((struct skb_shared_info *)tmp_9)->nr_frags = (unsigned char)((int)((struct skb_shared_info *)tmp_9)->nr_frags + 1);
  }
  else 
#line 2082 
       put_page(page_info->page);
  
#line 2085 
  ;
  
#line 2085 
  tmp_10 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2085 
  skb_frag_size_add(& ((struct skb_shared_info *)tmp_10)->frags[(int)j],(int)curr_frag_len);
  
#line 2086 
  skb->len += (unsigned int)curr_frag_len;
  
#line 2087 
  skb->data_len += (unsigned int)curr_frag_len;
  
#line 2088 
  skb->truesize += (unsigned int)rx_frag_size;
  
#line 2089 
  remaining = (unsigned short)((int)remaining - (int)curr_frag_len);
  
#line 2090 
  page_info->page = (struct page *)0;
  
#line 2068 
  i = (u16)((int)i + 1);
  ldv_58917: 
#line 2069 
  ;
  
#line 2068 
  if ((int)((unsigned short)rxcp->num_rcvd) > (int)i) 
#line 2070 
                                                      goto ldv_58916; else 
                                                                    
#line 2073 
                                                                    goto ldv_58918;
  ldv_58918: 
#line 2074 
  ;
  
#line 2092 
  if ((long)((unsigned int)j > 17U) != 0L) {
    
#line 2094 
    ldv_inline_asm();
    
#line 2092 
    ;
  }
  else ;
  return_label: 
#line 2094 
                return;
}


#line 2096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_compl_process(struct be_rx_obj *rxo, struct napi_struct *napi, struct be_rx_compl_info *rxcp)
{
  struct sk_buff *skb;
  
#line 2099 
  struct be_adapter *adapter = rxo->adapter;
  
#line 2100 
  struct net_device *netdev = adapter->netdev;
  
#line 2103 
  skb = netdev_alloc_skb_ip_align(netdev,128U);
  
#line 2104 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    
#line 2105 
    rxo->stats.rx_drops_no_skbs += 1U;
    
#line 2106 
    be_rx_compl_discard(rxo,rxcp);
    
#line 2107 
    goto return_label;
  }
  else ;
  
#line 2110 
  skb_fill_rx_data(rxo,skb,rxcp);
  
#line 2112 
  if ((long)((netdev->features & 17179869184ULL) != 0ULL) != 0L) {
    bool tmp;
    
#line 2112 
    tmp = csum_passed(rxcp);
    
#line 2112 
    if ((long)((int)tmp != 0) != 0L) 
#line 2113 
                                     skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U; else 
                                                                    
#line 2115 
                                                                    skb_checksum_none_assert((struct sk_buff const *)skb);
  }
  else 
#line 2115 
       skb_checksum_none_assert((struct sk_buff const *)skb);
  
#line 2117 
  skb->protocol = eth_type_trans(skb,netdev);
  
#line 2118 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)(((long)rxo - (long)(& adapter->rx_obj[0])) / 24768L))));
  
#line 2119 
  if ((netdev->features & 8589934592ULL) != 0ULL) 
#line 2120 
                                                  skb_set_hash(skb,rxcp->rss_hash,(enum pkt_hash_types)PKT_HASH_TYPE_L3); else ;
  
#line 2122 
  skb->csum_level = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))rxcp->tunneled;
  
#line 2123 
  skb_mark_napi_id(skb,napi);
  
#line 2125 
  if ((unsigned int)rxcp->vlanf != 0U) 
#line 2126 
                                       __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)rxcp->vlan_tag)); else ;
  
#line 2128 
  netif_receive_skb(skb);
  return_label: 
#line 2129 
                return;
}


#line 2132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_compl_process_gro(struct be_rx_obj *rxo, struct napi_struct *napi, struct be_rx_compl_info *rxcp)
{
  struct be_rx_page_info *page_info;
  u16 remaining;
  u16 curr_frag_len;
  u16 i;
  u16 j;
  int tmp_0;
  unsigned char *tmp_3;
  unsigned char *tmp_4;
  
#line 2136 
  struct be_adapter *adapter = rxo->adapter;
  
#line 2138 
  struct sk_buff *skb = (struct sk_buff *)0;
  
#line 2142 
  skb = napi_get_frags(napi);
  
#line 2143 
  if (skb == (struct sk_buff *)0) {
    
#line 2144 
    be_rx_compl_discard(rxo,rxcp);
    
#line 2145 
    goto return_label;
  }
  else ;
  
#line 2148 
  remaining = rxcp->pkt_size;
  
#line 2149 
  i = (unsigned short)0U;
  
#line 2149 
  j = (unsigned short)65535U;
  
#line 2149 
  goto ldv_58943;
  ldv_58942: 
#line 2150 
  ;
  
#line 2150 
  page_info = get_rx_page_info(rxo);
  {
    int tmp;
    
#line 2152 
    u16 _min1 = remaining;
    
#line 2152 
    ushort _min2 = rx_frag_size;
    
#line 2152 
    if ((int)_min1 < (int)_min2) 
#line 2152 
                                 tmp = (int)_min1; else 
#line 2152 
                                                        tmp = (int)_min2;
    
#line 2152 
    tmp_0 = tmp;
  }
  
#line 2152 
  curr_frag_len = (unsigned short)tmp_0;
  
#line 2155 
  if ((unsigned int)i == 0U || (unsigned int)page_info->page_offset == 0U) {
    unsigned char *tmp_1;
    unsigned char *tmp_2;
    
#line 2157 
    j = (u16)((int)j + 1);
    
#line 2158 
    skb_frag_set_page(skb,(int)j,page_info->page);
    
#line 2159 
    tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2159 
    ((struct skb_shared_info *)tmp_1)->frags[(int)j].page_offset = (unsigned int)page_info->page_offset;
    
#line 2161 
    tmp_2 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2161 
    skb_frag_size_set(& ((struct skb_shared_info *)tmp_2)->frags[(int)j],0U);
  }
  else 
#line 2163 
       put_page(page_info->page);
  
#line 2165 
  ;
  
#line 2165 
  tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2165 
  skb_frag_size_add(& ((struct skb_shared_info *)tmp_3)->frags[(int)j],(int)curr_frag_len);
  
#line 2166 
  skb->truesize += (unsigned int)rx_frag_size;
  
#line 2167 
  remaining = (unsigned short)((int)remaining - (int)curr_frag_len);
  
#line 2168 
  memset((void *)page_info,0,24UL);
  
#line 2149 
  i = (u16)((int)i + 1);
  ldv_58943: 
#line 2150 
  ;
  
#line 2149 
  if ((int)((unsigned short)rxcp->num_rcvd) > (int)i) 
#line 2151 
                                                      goto ldv_58942; else 
                                                                    
#line 2154 
                                                                    goto ldv_58944;
  ldv_58944: 
#line 2155 
  ;
  
#line 2170 
  if ((long)((unsigned int)j > 17U) != 0L) {
    
#line 2172 
    ldv_inline_asm();
    
#line 2170 
    ;
  }
  else ;
  
#line 2172 
  tmp_4 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2172 
  ((struct skb_shared_info *)tmp_4)->nr_frags = (unsigned char)((unsigned int)((unsigned char)j) + 1U);
  
#line 2173 
  skb->len = (unsigned int)rxcp->pkt_size;
  
#line 2174 
  skb->data_len = (unsigned int)rxcp->pkt_size;
  
#line 2175 
  skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  
#line 2176 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)(((long)rxo - (long)(& adapter->rx_obj[0])) / 24768L))));
  
#line 2177 
  if (((adapter->netdev)->features & 8589934592ULL) != 0ULL) 
#line 2178 
                                                             skb_set_hash(skb,rxcp->rss_hash,(enum pkt_hash_types)PKT_HASH_TYPE_L3); else ;
  
#line 2180 
  skb->csum_level = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))rxcp->tunneled;
  
#line 2181 
  skb_mark_napi_id(skb,napi);
  
#line 2183 
  if ((unsigned int)rxcp->vlanf != 0U) 
#line 2184 
                                       __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)rxcp->vlan_tag)); else ;
  
#line 2186 
  napi_gro_frags(napi);
  return_label: 
#line 2187 
                return;
}


#line 2189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_parse_rx_compl_v1(struct be_eth_rx_compl *compl, struct be_rx_compl_info *rxcp)
{
  u32 tmp_0;
  u32 tmp;
  u32 tmp_2;
  u32 tmp_1;
  u32 tmp_4;
  u32 tmp_3;
  u32 tmp_6;
  u32 tmp_5;
  u32 tmp_8;
  u32 tmp_7;
  u32 tmp_10;
  u32 tmp_9;
  u32 tmp_12;
  u32 tmp_11;
  u32 tmp_14;
  u32 tmp_13;
  u32 tmp_16;
  u32 tmp_15;
  u32 tmp_18;
  u32 tmp_17;
  u32 tmp_19;
  u32 tmp_25;
  u32 tmp_24;
  u32 tmp_27;
  u32 tmp_26;
  
#line 2192 
  tmp = amap_mask(14U);
  
#line 2192 
  ;
  
#line 2192 
  tmp_0 = amap_get((void *)compl,0U,tmp,16U);
  
#line 2192 
  rxcp->pkt_size = (unsigned short)tmp_0;
  
#line 2193 
  tmp_1 = amap_mask(1U);
  
#line 2193 
  ;
  
#line 2193 
  tmp_2 = amap_get((void *)compl,0U,tmp_1,30U);
  
#line 2193 
  rxcp->vlanf = (unsigned char)tmp_2;
  
#line 2194 
  tmp_3 = amap_mask(1U);
  
#line 2194 
  ;
  
#line 2194 
  tmp_4 = amap_get((void *)compl,1U,tmp_3,0U);
  
#line 2194 
  rxcp->err = (unsigned char)tmp_4;
  
#line 2195 
  tmp_5 = amap_mask(1U);
  
#line 2195 
  ;
  
#line 2195 
  tmp_6 = amap_get((void *)compl,1U,tmp_5,3U);
  
#line 2195 
  rxcp->tcpf = (unsigned char)tmp_6;
  
#line 2196 
  tmp_7 = amap_mask(1U);
  
#line 2196 
  ;
  
#line 2196 
  tmp_8 = amap_get((void *)compl,1U,tmp_7,4U);
  
#line 2196 
  rxcp->udpf = (unsigned char)tmp_8;
  
#line 2197 
  tmp_9 = amap_mask(1U);
  
#line 2197 
  ;
  
#line 2197 
  tmp_10 = amap_get((void *)compl,1U,tmp_9,5U);
  
#line 2197 
  rxcp->ip_csum = (unsigned char)tmp_10;
  
#line 2198 
  tmp_11 = amap_mask(1U);
  
#line 2198 
  ;
  
#line 2198 
  tmp_12 = amap_get((void *)compl,1U,tmp_11,6U);
  
#line 2198 
  rxcp->l4_csum = (unsigned char)tmp_12;
  
#line 2199 
  tmp_13 = amap_mask(1U);
  
#line 2199 
  ;
  
#line 2199 
  tmp_14 = amap_get((void *)compl,1U,tmp_13,7U);
  
#line 2199 
  rxcp->ipv6 = (unsigned char)tmp_14;
  
#line 2200 
  tmp_15 = amap_mask(3U);
  
#line 2200 
  ;
  
#line 2200 
  tmp_16 = amap_get((void *)compl,1U,tmp_15,29U);
  
#line 2200 
  rxcp->num_rcvd = (unsigned char)tmp_16;
  
#line 2201 
  tmp_17 = amap_mask(2U);
  
#line 2201 
  ;
  
#line 2201 
  tmp_18 = amap_get((void *)compl,2U,tmp_17,1U);
  
#line 2201 
  rxcp->pkt_type = (unsigned char)tmp_18;
  
#line 2202 
  tmp_19 = amap_mask(32U);
  
#line 2202 
  ;
  
#line 2202 
  rxcp->rss_hash = amap_get((void *)compl,3U,tmp_19,0U);
  
#line 2203 
  if ((unsigned int)rxcp->vlanf != 0U) {
    u32 tmp_21;
    u32 tmp_20;
    u32 tmp_23;
    u32 tmp_22;
    
#line 2204 
    tmp_20 = amap_mask(1U);
    
#line 2204 
    ;
    
#line 2204 
    tmp_21 = amap_get((void *)compl,2U,tmp_20,3U);
    
#line 2204 
    rxcp->qnq = (unsigned char)tmp_21;
    
#line 2205 
    tmp_22 = amap_mask(16U);
    
#line 2205 
    ;
    
#line 2205 
    tmp_23 = amap_get((void *)compl,0U,tmp_22,0U);
    
#line 2205 
    rxcp->vlan_tag = (unsigned short)tmp_23;
  }
  else ;
  
#line 2207 
  tmp_24 = amap_mask(2U);
  
#line 2207 
  ;
  
#line 2207 
  tmp_25 = amap_get((void *)compl,2U,tmp_24,5U);
  
#line 2207 
  rxcp->port = (unsigned short)tmp_25;
  
#line 2209 
  tmp_26 = amap_mask(1U);
  
#line 2208 
  ;
  
#line 2208 
  tmp_27 = amap_get((void *)compl,2U,tmp_26,30U);
  
#line 2208 
  rxcp->tunneled = (unsigned char)tmp_27;
  
#line 2210 
  return;
}


#line 2212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_parse_rx_compl_v0(struct be_eth_rx_compl *compl, struct be_rx_compl_info *rxcp)
{
  u32 tmp_0;
  u32 tmp;
  u32 tmp_2;
  u32 tmp_1;
  u32 tmp_4;
  u32 tmp_3;
  u32 tmp_6;
  u32 tmp_5;
  u32 tmp_8;
  u32 tmp_7;
  u32 tmp_10;
  u32 tmp_9;
  u32 tmp_12;
  u32 tmp_11;
  u32 tmp_14;
  u32 tmp_13;
  u32 tmp_16;
  u32 tmp_15;
  u32 tmp_18;
  u32 tmp_17;
  u32 tmp_19;
  u32 tmp_25;
  u32 tmp_24;
  u32 tmp_27;
  u32 tmp_26;
  
#line 2215 
  tmp = amap_mask(14U);
  
#line 2215 
  ;
  
#line 2215 
  tmp_0 = amap_get((void *)compl,0U,tmp,16U);
  
#line 2215 
  rxcp->pkt_size = (unsigned short)tmp_0;
  
#line 2216 
  tmp_1 = amap_mask(1U);
  
#line 2216 
  ;
  
#line 2216 
  tmp_2 = amap_get((void *)compl,1U,tmp_1,14U);
  
#line 2216 
  rxcp->vlanf = (unsigned char)tmp_2;
  
#line 2217 
  tmp_3 = amap_mask(1U);
  
#line 2217 
  ;
  
#line 2217 
  tmp_4 = amap_get((void *)compl,1U,tmp_3,0U);
  
#line 2217 
  rxcp->err = (unsigned char)tmp_4;
  
#line 2218 
  tmp_5 = amap_mask(1U);
  
#line 2218 
  ;
  
#line 2218 
  tmp_6 = amap_get((void *)compl,1U,tmp_5,3U);
  
#line 2218 
  rxcp->tcpf = (unsigned char)tmp_6;
  
#line 2219 
  tmp_7 = amap_mask(1U);
  
#line 2219 
  ;
  
#line 2219 
  tmp_8 = amap_get((void *)compl,1U,tmp_7,4U);
  
#line 2219 
  rxcp->udpf = (unsigned char)tmp_8;
  
#line 2220 
  tmp_9 = amap_mask(1U);
  
#line 2220 
  ;
  
#line 2220 
  tmp_10 = amap_get((void *)compl,1U,tmp_9,5U);
  
#line 2220 
  rxcp->ip_csum = (unsigned char)tmp_10;
  
#line 2221 
  tmp_11 = amap_mask(1U);
  
#line 2221 
  ;
  
#line 2221 
  tmp_12 = amap_get((void *)compl,1U,tmp_11,6U);
  
#line 2221 
  rxcp->l4_csum = (unsigned char)tmp_12;
  
#line 2222 
  tmp_13 = amap_mask(1U);
  
#line 2222 
  ;
  
#line 2222 
  tmp_14 = amap_get((void *)compl,1U,tmp_13,7U);
  
#line 2222 
  rxcp->ipv6 = (unsigned char)tmp_14;
  
#line 2223 
  tmp_15 = amap_mask(3U);
  
#line 2223 
  ;
  
#line 2223 
  tmp_16 = amap_get((void *)compl,1U,tmp_15,29U);
  
#line 2223 
  rxcp->num_rcvd = (unsigned char)tmp_16;
  
#line 2224 
  tmp_17 = amap_mask(2U);
  
#line 2224 
  ;
  
#line 2224 
  tmp_18 = amap_get((void *)compl,2U,tmp_17,1U);
  
#line 2224 
  rxcp->pkt_type = (unsigned char)tmp_18;
  
#line 2225 
  tmp_19 = amap_mask(32U);
  
#line 2225 
  ;
  
#line 2225 
  rxcp->rss_hash = amap_get((void *)compl,3U,tmp_19,0U);
  
#line 2226 
  if ((unsigned int)rxcp->vlanf != 0U) {
    u32 tmp_21;
    u32 tmp_20;
    u32 tmp_23;
    u32 tmp_22;
    
#line 2227 
    tmp_20 = amap_mask(1U);
    
#line 2227 
    ;
    
#line 2227 
    tmp_21 = amap_get((void *)compl,2U,tmp_20,3U);
    
#line 2227 
    rxcp->qnq = (unsigned char)tmp_21;
    
#line 2228 
    tmp_22 = amap_mask(16U);
    
#line 2228 
    ;
    
#line 2228 
    tmp_23 = amap_get((void *)compl,0U,tmp_22,0U);
    
#line 2228 
    rxcp->vlan_tag = (unsigned short)tmp_23;
  }
  else ;
  
#line 2230 
  tmp_24 = amap_mask(1U);
  
#line 2230 
  ;
  
#line 2230 
  tmp_25 = amap_get((void *)compl,0U,tmp_24,30U);
  
#line 2230 
  rxcp->port = (unsigned short)tmp_25;
  
#line 2231 
  tmp_26 = amap_mask(1U);
  
#line 2231 
  ;
  
#line 2231 
  tmp_27 = amap_get((void *)compl,1U,tmp_26,15U);
  
#line 2231 
  rxcp->ip_frag = (unsigned char)tmp_27;
  
#line 2232 
  return;
}


#line 2234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct be_rx_compl_info *be_rx_compl_get(struct be_rx_obj *rxo)
{
  struct be_rx_compl_info *__retres;
  
#line 2236 
  struct be_eth_rx_compl *compl = queue_tail_node(& rxo->cq);
  
#line 2237 
  struct be_rx_compl_info *rxcp = & rxo->rxcp;
  
#line 2238 
  struct be_adapter *adapter = rxo->adapter;
  
#line 2242 
  if (compl->dw[2UL] == 0U) {
    
#line 2243 
    __retres = (struct be_rx_compl_info *)0;
    
#line 2243 
    goto return_label;
  }
  else ;
  
#line 2244 
  ldv_inline_asm();
  
#line 2246 
  swap_dws((void *)compl,16);
  
#line 2248 
  if ((int)adapter->be3_native != 0) 
#line 2249 
                                     be_parse_rx_compl_v1(compl,rxcp); else 
                                                                    
#line 2251 
                                                                    be_parse_rx_compl_v0(compl,rxcp);
  
#line 2253 
  if ((unsigned int)rxcp->ip_frag != 0U) 
#line 2254 
                                         rxcp->l4_csum = (unsigned char)0U; else ;
  
#line 2256 
  if ((unsigned int)rxcp->vlanf != 0U) {
    
#line 2261 
    if ((adapter->function_mode & 1024U) != 0U && (unsigned int)rxcp->qnq == 0U) 
      
#line 2262 
      rxcp->vlanf = (unsigned char)0U; else ;
    
#line 2264 
    if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) 
      
#line 2265 
      if (0 != 0) 
#line 2265 
                  rxcp->vlan_tag = (unsigned short)(((int)rxcp->vlan_tag << 8) | ((int)rxcp->vlan_tag >> 8)); else 
                                                                    
#line 2265 
                                                                    rxcp->vlan_tag = __fswab16((unsigned short)((int)rxcp->vlan_tag));
    else ;
    
#line 2267 
    if ((int)adapter->pvid == ((int)rxcp->vlan_tag & 4095)) {
      int tmp_3;
      
#line 2267 
      if (0 != 0) {
        int tmp_1;
        
#line 2268 
        tmp_1 = constant_test_bit((long)rxcp->vlan_tag,(unsigned long const volatile *)(& adapter->vids));
        
#line 2267 
        tmp_3 = tmp_1 == 0;
      }
      else {
        int tmp_2;
        
#line 2267 
        tmp_2 = variable_test_bit((long)rxcp->vlan_tag,(unsigned long const volatile *)(& adapter->vids));
        
#line 2267 
        tmp_3 = tmp_2 == 0;
      }
      
#line 2267 
      if (tmp_3) 
#line 2269 
                 rxcp->vlanf = (unsigned char)0U; else ;
    }
    else ;
  }
  else ;
  
#line 2273 
  compl->dw[2UL] = 0U;
  
#line 2275 
  queue_tail_inc(& rxo->cq);
  
#line 2276 
  __retres = rxcp;
  return_label: 
#line 2276 
                return __retres;
}


#line 2279  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static struct page *be_alloc_pages(u32 size, gfp_t gfp)
{
  int tmp_70;
  struct page *tmp_71;
  
#line 2281 
  if (0 != 0) {
    int tmp_68;
    
#line 2281 
    if (size != 0U) {
      int tmp_67;
      
#line 2281 
      if (size > 4095U) {
        int tmp_66;
        
#line 2281 
        if (0 != 0) {
          int tmp_64;
          
#line 2281 
          if (size == 1U) {
            int tmp;
            
#line 2281 
            tmp = ____ilog2_NaN();
            
#line 2281 
            tmp_64 = tmp + -11;
          }
          else {
            int tmp_63;
            
#line 2281 
            if (((unsigned long long)(size + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              int tmp_62;
              
#line 2281 
              if (((unsigned long long)(size + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                int tmp_61;
                
#line 2281 
                if (((unsigned long long)(size + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  int tmp_60;
                  
#line 2281 
                  if (((unsigned long long)(size + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    int tmp_59;
                    
#line 2281 
                    if (((unsigned long long)(size + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      int tmp_58;
                      
#line 2281 
                      if (((unsigned long long)(size + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        int tmp_57;
                        
#line 2281 
                        if (((unsigned long long)(size + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          int tmp_56;
                          
#line 2281 
                          if (((unsigned long long)(size + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            int tmp_55;
                            
#line 2281 
                            if (((unsigned long long)(size + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              int tmp_54;
                              
#line 2281 
                              if (((unsigned long long)(size + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                int tmp_53;
                                
#line 2281 
                                if (((unsigned long long)(size + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  int tmp_52;
                                  
#line 2281 
                                  if (((unsigned long long)(size + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    int tmp_51;
                                    
#line 2281 
                                    if (((unsigned long long)(size + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      int tmp_50;
                                      
#line 2281 
                                      if (((unsigned long long)(size + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        int tmp_49;
                                        
#line 2281 
                                        if (((unsigned long long)(size + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          int tmp_48;
                                          
#line 2281 
                                          if (((unsigned long long)(size + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            int tmp_47;
                                            
#line 2281 
                                            if (((unsigned long long)(size + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              int tmp_46;
                                              
#line 2281 
                                              if (((unsigned long long)(size + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                int tmp_45;
                                                
#line 2281 
                                                if (((unsigned long long)(size + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  int tmp_44;
                                                  
#line 2281 
                                                  if (((unsigned long long)(size + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    int tmp_43;
                                                    
#line 2281 
                                                    if (((unsigned long long)(size + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      int tmp_42;
                                                      
#line 2281 
                                                      if (((unsigned long long)(size + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        int tmp_41;
                                                        
#line 2281 
                                                        if (((unsigned long long)(size + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          int tmp_40;
                                                          
#line 2281 
                                                          if (((unsigned long long)(size + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            int tmp_39;
                                                            
#line 2281 
                                                            if (((unsigned long long)(size + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              int tmp_38;
                                                              
#line 2281 
                                                              if (((unsigned long long)(size + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                int tmp_37;
                                                                
#line 2281 
                                                                if (((unsigned long long)(size + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  int tmp_36;
                                                                  
#line 2281 
                                                                  if (
                                                                    ((unsigned long long)(size + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    int tmp_35;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    int tmp_34;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    int tmp_33;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    int tmp_32;
                                                                    
#line 2281 
                                                                    if (
                                                                    size + 4294967295U >= (u32)0) {
                                                                    int tmp_31;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    int tmp_30;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    int tmp_29;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    int tmp_28;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    int tmp_27;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    int tmp_26;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    int tmp_25;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    int tmp_24;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    int tmp_23;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    int tmp_22;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    int tmp_21;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    int tmp_20;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    int tmp_19;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    int tmp_18;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    int tmp_17;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    int tmp_16;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    int tmp_15;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    int tmp_14;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    int tmp_13;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    int tmp_12;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    int tmp_11;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    int tmp_10;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 512ULL) == 0ULL) {
                                                                    int tmp_9;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 256ULL) == 0ULL) {
                                                                    int tmp_8;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 128ULL) == 0ULL) {
                                                                    int tmp_7;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 64ULL) == 0ULL) {
                                                                    int tmp_6;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 32ULL) == 0ULL) {
                                                                    int tmp_5;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 16ULL) == 0ULL) {
                                                                    int tmp_4;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 8ULL) == 0ULL) {
                                                                    int tmp_3;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 4ULL) == 0ULL) {
                                                                    int tmp_2;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 2ULL) == 0ULL) {
                                                                    int tmp_1;
                                                                    
#line 2281 
                                                                    if (
                                                                    ((unsigned long long)(size + 4294967295U) & 1ULL) == 0ULL) {
                                                                    int tmp_0;
                                                                    
#line 2281 
                                                                    tmp_0 = ____ilog2_NaN();
                                                                    
#line 2281 
                                                                    tmp_1 = tmp_0 + -11;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_1 = -11;
                                                                    
#line 2281 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_2 = -10;
                                                                    
#line 2281 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_3 = -9;
                                                                    
#line 2281 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_4 = -8;
                                                                    
#line 2281 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_5 = -7;
                                                                    
#line 2281 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_6 = -6;
                                                                    
#line 2281 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_7 = -5;
                                                                    
#line 2281 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_8 = -4;
                                                                    
#line 2281 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_9 = -3;
                                                                    
#line 2281 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_10 = -2;
                                                                    
#line 2281 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_11 = -1;
                                                                    
#line 2281 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_12 = 0;
                                                                    
#line 2281 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_13 = 1;
                                                                    
#line 2281 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_14 = 2;
                                                                    
#line 2281 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_15 = 3;
                                                                    
#line 2281 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_16 = 4;
                                                                    
#line 2281 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_17 = 5;
                                                                    
#line 2281 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_18 = 6;
                                                                    
#line 2281 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_19 = 7;
                                                                    
#line 2281 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_20 = 8;
                                                                    
#line 2281 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_21 = 9;
                                                                    
#line 2281 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_22 = 10;
                                                                    
#line 2281 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_23 = 11;
                                                                    
#line 2281 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_24 = 12;
                                                                    
#line 2281 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_25 = 13;
                                                                    
#line 2281 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_26 = 14;
                                                                    
#line 2281 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_27 = 15;
                                                                    
#line 2281 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_28 = 16;
                                                                    
#line 2281 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_29 = 17;
                                                                    
#line 2281 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_30 = 18;
                                                                    
#line 2281 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_31 = 19;
                                                                    
#line 2281 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_32 = 20;
                                                                    
#line 2281 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_33 = 21;
                                                                    
#line 2281 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_34 = 22;
                                                                    
#line 2281 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 2281 
                                                                    tmp_35 = 23;
                                                                    
#line 2281 
                                                                    tmp_36 = tmp_35;
                                                                  }
                                                                  else 
                                                                    
#line 2281 
                                                                    tmp_36 = 24;
                                                                  
#line 2281 
                                                                  tmp_37 = tmp_36;
                                                                }
                                                                else 
                                                                  
#line 2281 
                                                                  tmp_37 = 25;
                                                                
#line 2281 
                                                                tmp_38 = tmp_37;
                                                              }
                                                              else 
#line 2281 
                                                                   tmp_38 = 26;
                                                              
#line 2281 
                                                              tmp_39 = tmp_38;
                                                            }
                                                            else 
#line 2281 
                                                                 tmp_39 = 27;
                                                            
#line 2281 
                                                            tmp_40 = tmp_39;
                                                          }
                                                          else 
#line 2281 
                                                               tmp_40 = 28;
                                                          
#line 2281 
                                                          tmp_41 = tmp_40;
                                                        }
                                                        else 
#line 2281 
                                                             tmp_41 = 29;
                                                        
#line 2281 
                                                        tmp_42 = tmp_41;
                                                      }
                                                      else 
#line 2281 
                                                           tmp_42 = 30;
                                                      
#line 2281 
                                                      tmp_43 = tmp_42;
                                                    }
                                                    else 
#line 2281 
                                                         tmp_43 = 31;
                                                    
#line 2281 
                                                    tmp_44 = tmp_43;
                                                  }
                                                  else 
#line 2281 
                                                       tmp_44 = 32;
                                                  
#line 2281 
                                                  tmp_45 = tmp_44;
                                                }
                                                else 
#line 2281 
                                                     tmp_45 = 33;
                                                
#line 2281 
                                                tmp_46 = tmp_45;
                                              }
                                              else 
#line 2281 
                                                   tmp_46 = 34;
                                              
#line 2281 
                                              tmp_47 = tmp_46;
                                            }
                                            else 
#line 2281 
                                                 tmp_47 = 35;
                                            
#line 2281 
                                            tmp_48 = tmp_47;
                                          }
                                          else 
#line 2281 
                                               tmp_48 = 36;
                                          
#line 2281 
                                          tmp_49 = tmp_48;
                                        }
                                        else 
#line 2281 
                                             tmp_49 = 37;
                                        
#line 2281 
                                        tmp_50 = tmp_49;
                                      }
                                      else 
#line 2281 
                                           tmp_50 = 38;
                                      
#line 2281 
                                      tmp_51 = tmp_50;
                                    }
                                    else 
#line 2281 
                                         tmp_51 = 39;
                                    
#line 2281 
                                    tmp_52 = tmp_51;
                                  }
                                  else 
#line 2281 
                                       tmp_52 = 40;
                                  
#line 2281 
                                  tmp_53 = tmp_52;
                                }
                                else 
#line 2281 
                                     tmp_53 = 41;
                                
#line 2281 
                                tmp_54 = tmp_53;
                              }
                              else 
#line 2281 
                                   tmp_54 = 42;
                              
#line 2281 
                              tmp_55 = tmp_54;
                            }
                            else 
#line 2281 
                                 tmp_55 = 43;
                            
#line 2281 
                            tmp_56 = tmp_55;
                          }
                          else 
#line 2281 
                               tmp_56 = 44;
                          
#line 2281 
                          tmp_57 = tmp_56;
                        }
                        else 
#line 2281 
                             tmp_57 = 45;
                        
#line 2281 
                        tmp_58 = tmp_57;
                      }
                      else 
#line 2281 
                           tmp_58 = 46;
                      
#line 2281 
                      tmp_59 = tmp_58;
                    }
                    else 
#line 2281 
                         tmp_59 = 47;
                    
#line 2281 
                    tmp_60 = tmp_59;
                  }
                  else 
#line 2281 
                       tmp_60 = 48;
                  
#line 2281 
                  tmp_61 = tmp_60;
                }
                else 
#line 2281 
                     tmp_61 = 49;
                
#line 2281 
                tmp_62 = tmp_61;
              }
              else 
#line 2281 
                   tmp_62 = 50;
              
#line 2281 
              tmp_63 = tmp_62;
            }
            else 
#line 2281 
                 tmp_63 = 51;
            
#line 2281 
            tmp_64 = tmp_63;
          }
          
#line 2281 
          tmp_66 = tmp_64;
        }
        else {
          int tmp_65;
          
#line 2281 
          tmp_65 = __ilog2_u32(size + 4294967295U);
          
#line 2281 
          tmp_66 = tmp_65 + -11;
        }
        
#line 2281 
        tmp_67 = tmp_66;
      }
      else 
#line 2281 
           tmp_67 = 0;
      
#line 2281 
      tmp_68 = tmp_67;
    }
    else 
#line 2281 
         tmp_68 = 52;
    
#line 2281 
    tmp_70 = tmp_68;
  }
  else 
#line 2281 
       tmp_70 = __get_order((unsigned long)size);
  
#line 2281 
  u32 order = (unsigned int)tmp_70;
  
#line 2283 
  if (order != 0U) 
#line 2284 
                   gfp |= 16384U; else ;
  
#line 2285 
  tmp_71 = alloc_pages(gfp,order);
  
#line 2285 
  return tmp_71;
}


#line 2292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_post_rx_frags(struct be_rx_obj *rxo, gfp_t gfp, u32 frags_needed)
{
  struct be_eth_rx_d *rxd;
  u64 frag_dmaaddr;
  u32 posted;
  
#line 2294 
  struct be_adapter *adapter = rxo->adapter;
  
#line 2295 
  struct be_rx_page_info *page_info = (struct be_rx_page_info *)0;
  
#line 2295 
  struct be_rx_page_info *prev_page_info = (struct be_rx_page_info *)0;
  
#line 2296 
  struct be_queue_info *rxq = & rxo->q;
  
#line 2297 
  struct page *pagep = (struct page *)0;
  
#line 2298 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 2300 
  u64 page_dmaaddr = 0ULL;
  
#line 2301 
  u32 page_offset = 0U;
  
#line 2301 
  u32 notify = 0U;
  
#line 2303 
  page_info = & rxo->page_info_tbl[(int)rxq->head];
  
#line 2304 
  posted = 0U;
  
#line 2304 
  goto ldv_58983;
  ldv_58982: 
#line 2305 
  ;
  
#line 2305 
  if (pagep == (struct page *)0) {
    int tmp;
    
#line 2306 
    pagep = be_alloc_pages(adapter->big_page_size,gfp);
    
#line 2307 
    if ((long)(pagep == (struct page *)0) != 0L) {
      
#line 2308 
      rxo->stats.rx_post_fail += 1U;
      
#line 2309 
      goto ldv_58981;
    }
    else ;
    
#line 2311 
    page_dmaaddr = dma_map_page(dev,pagep,0UL,(unsigned long)adapter->big_page_size,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 2314 
    tmp = dma_mapping_error(dev,page_dmaaddr);
    
#line 2314 
    if (tmp != 0) {
      
#line 2315 
      put_page(pagep);
      
#line 2316 
      pagep = (struct page *)0;
      
#line 2317 
      adapter->drv_stats.dma_map_errors += 1U;
      
#line 2318 
      goto ldv_58981;
    }
    else ;
    
#line 2320 
    page_offset = 0U;
  }
  else {
    
#line 2322 
    get_page(pagep);
    
#line 2323 
    page_offset = (unsigned int)rx_frag_size + page_offset;
  }
  
#line 2325 
  page_info->page_offset = (unsigned short)page_offset;
  
#line 2326 
  page_info->page = pagep;
  
#line 2328 
  rxd = (struct be_eth_rx_d *)queue_head_node(rxq);
  
#line 2329 
  frag_dmaaddr = (unsigned long long)page_info->page_offset + page_dmaaddr;
  
#line 2330 
  rxd->fragpa_lo = (unsigned int)frag_dmaaddr;
  
#line 2331 
  rxd->fragpa_hi = (unsigned int)(frag_dmaaddr >> 32);
  
#line 2334 
  if (((unsigned int)rx_frag_size + page_offset) + (unsigned int)rx_frag_size > adapter->big_page_size) {
    
#line 2336 
    pagep = (struct page *)0;
    
#line 2337 
    page_info->last_frag = (_Bool)1;
    
#line 2338 
    page_info->bus = page_dmaaddr;
  }
  else 
#line 2340 
       page_info->bus = frag_dmaaddr;
  
#line 2343 
  prev_page_info = page_info;
  
#line 2344 
  queue_head_inc(rxq);
  
#line 2345 
  page_info = & rxo->page_info_tbl[(int)rxq->head];
  
#line 2304 
  posted += 1U;
  ldv_58983: 
#line 2305 
  ;
  
#line 2304 
  if (posted < frags_needed && page_info->page == (struct page *)0) 
#line 2306 
                                                                    goto ldv_58982; else 
                                                                    
#line 2309 
                                                                    goto ldv_58981;
  ldv_58981: 
#line 2310 
  ;
  
#line 2351 
  if (pagep != (struct page *)0) {
    
#line 2352 
    prev_page_info->last_frag = (_Bool)1;
    
#line 2353 
    prev_page_info->bus = page_dmaaddr;
  }
  else ;
  
#line 2356 
  if (posted != 0U) {
    unsigned int tmp_2;
    
#line 2357 
    atomic_add((int)posted,& rxq->used);
    
#line 2358 
    if ((int)rxo->rx_post_starved != 0) 
#line 2359 
                                        rxo->rx_post_starved = (_Bool)0; else ;
    ldv_58987: 
#line 2360 
    ;
    {
      unsigned int tmp_1;
      
#line 2361 
      unsigned int _min1 = 255U;
      
#line 2361 
      u32 _min2 = posted;
      
#line 2361 
      if (_min1 < _min2) 
#line 2361 
                         tmp_1 = _min1; else 
#line 2361 
                                             tmp_1 = _min2;
      
#line 2361 
      tmp_2 = tmp_1;
    }
    
#line 2361 
    notify = tmp_2;
    
#line 2362 
    be_rxq_notify(adapter,(unsigned short)((int)rxq->id),(unsigned short)((int)((unsigned short)notify)));
    
#line 2363 
    posted -= notify;
    
#line 2364 
    if (posted != 0U) 
#line 2366 
                      goto ldv_58987; else 
#line 2369 
                                           goto ldv_58988;
    ldv_58988: 
#line 2370 
    ;
  }
  else {
    int tmp_3;
    
#line 2365 
    tmp_3 = atomic_read((atomic_t const *)(& rxq->used));
    
#line 2365 
    if (tmp_3 == 0) 
#line 2367 
                    rxo->rx_post_starved = (_Bool)1; else ;
  }
  
#line 2368 
  return;
}


#line 2371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct be_tx_compl_info *be_tx_compl_get(struct be_tx_obj *txo)
{
  struct be_tx_compl_info *__retres;
  u32 tmp_1;
  u32 tmp_0;
  u32 tmp_3;
  u32 tmp_2;
  
#line 2373 
  struct be_queue_info *tx_cq = & txo->cq;
  
#line 2374 
  struct be_tx_compl_info *txcp = & txo->txcp;
  
#line 2375 
  struct be_eth_tx_compl *compl = queue_tail_node(tx_cq);
  
#line 2377 
  if (compl->dw[3UL] == 0U) {
    
#line 2378 
    __retres = (struct be_tx_compl_info *)0;
    
#line 2378 
    goto return_label;
  }
  else ;
  
#line 2379 
  ldv_inline_asm();
  
#line 2382 
  swap_dws((void *)compl,16);
  
#line 2384 
  tmp_0 = amap_mask(4U);
  
#line 2384 
  ;
  
#line 2384 
  tmp_1 = amap_get((void *)compl,0U,tmp_0,28U);
  
#line 2384 
  txcp->status = (unsigned char)tmp_1;
  
#line 2385 
  tmp_2 = amap_mask(16U);
  
#line 2385 
  ;
  
#line 2385 
  tmp_3 = amap_get((void *)compl,0U,tmp_2,0U);
  
#line 2385 
  txcp->end_index = (unsigned short)tmp_3;
  
#line 2387 
  compl->dw[3UL] = 0U;
  
#line 2388 
  queue_tail_inc(tx_cq);
  
#line 2389 
  __retres = txcp;
  return_label: 
#line 2389 
                return __retres;
}


#line 2392  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u16 be_tx_compl_process(struct be_adapter *adapter, struct be_tx_obj *txo, u16 last_index)
{
  u16 frag_index;
  struct be_eth_wrb *wrb;
  int tmp_1;
  
#line 2395 
  struct sk_buff **sent_skbs = (struct sk_buff **)(& txo->sent_skb_list);
  
#line 2396 
  struct be_queue_info *txq = & txo->q;
  
#line 2397 
  u16 num_wrbs = (unsigned short)0U;
  
#line 2398 
  struct sk_buff *skb = (struct sk_buff *)0;
  
#line 2399 
  bool unmap_skb_hdr = (_Bool)0;
  ldv_59007: 
#line 2401 
  ;
  
#line 2403 
  if (*(sent_skbs + (int)txq->tail) != (struct sk_buff *)0) {
    
#line 2405 
    if (skb != (struct sk_buff *)0) 
#line 2406 
                                    dev_consume_skb_any(skb); else ;
    
#line 2407 
    skb = *(sent_skbs + (int)txq->tail);
    
#line 2408 
    *(sent_skbs + (int)txq->tail) = (struct sk_buff *)0;
    
#line 2409 
    queue_tail_inc(txq);
    
#line 2410 
    num_wrbs = (u16)((int)num_wrbs + 1);
    
#line 2411 
    unmap_skb_hdr = (_Bool)1;
  }
  else ;
  
#line 2413 
  wrb = (struct be_eth_wrb *)queue_tail_node(txq);
  
#line 2414 
  frag_index = txq->tail;
  
#line 2416 
  if ((int)unmap_skb_hdr != 0) {
    unsigned int tmp_0;
    
#line 2416 
    tmp_0 = skb_headlen((struct sk_buff const *)skb);
    
#line 2416 
    if (tmp_0 != 0U) 
#line 2416 
                     tmp_1 = 1; else 
#line 2416 
                                     tmp_1 = 0;
  }
  else 
#line 2416 
       tmp_1 = 0;
  
#line 2415 
  ;
  
#line 2415 
  ;
  
#line 2415 
  unmap_tx_frag(& (adapter->pdev)->dev,wrb,(_Bool)((int)((_Bool)(tmp_1 != 0))));
  
#line 2417 
  unmap_skb_hdr = (_Bool)0;
  
#line 2418 
  queue_tail_inc(txq);
  
#line 2419 
  num_wrbs = (u16)((int)num_wrbs + 1);
  
#line 2420 
  if ((int)frag_index != (int)last_index) 
#line 2422 
                                          goto ldv_59007; else 
#line 2425 
                                                               goto ldv_59008;
  ldv_59008: 
#line 2426 
  ;
  
#line 2421 
  dev_consume_skb_any(skb);
  
#line 2423 
  return num_wrbs;
}


#line 2427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static int events_get(struct be_eq_obj *eqo)
{
  struct be_eq_entry *eqe;
  
#line 2430 
  int num = 0;
  ldv_59015: 
#line 2431 
  ;
  
#line 2433 
  eqe = (struct be_eq_entry *)queue_tail_node(& eqo->q);
  
#line 2434 
  if (eqe->evt == 0U) 
#line 2435 
                      goto ldv_59014; else ;
  
#line 2436 
  ldv_inline_asm();
  
#line 2438 
  eqe->evt = 0U;
  
#line 2439 
  num += 1;
  
#line 2440 
  queue_tail_inc(& eqo->q);
  
#line 2433 
  goto ldv_59015;
  ldv_59014: 
#line 2434 
  ;
  
#line 2443 
  return num;
}


#line 2447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_eq_clean(struct be_eq_obj *eqo)
{
  
#line 2449 
  int num = events_get(eqo);
  
#line 2451 
  be_eq_notify(eqo->adapter,(unsigned short)((int)eqo->q.id),(_Bool)0,(_Bool)1,(unsigned short)((int)((unsigned short)num)),0U);
  
#line 2452 
  return;
}


#line 2455  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rxq_clean(struct be_rx_obj *rxo)
{
  struct be_rx_page_info *page_info;
  int tmp;
  int tmp_0;
  
#line 2457 
  struct be_queue_info *rxq = & rxo->q;
  
#line 2460 
  goto ldv_59026;
  ldv_59025: 
#line 2461 
  ;
  
#line 2461 
  page_info = get_rx_page_info(rxo);
  
#line 2462 
  put_page(page_info->page);
  
#line 2463 
  memset((void *)page_info,0,24UL);
  ldv_59026: 
#line 2464 
  ;
  
#line 2460 
  tmp = atomic_read((atomic_t const *)(& rxq->used));
  
#line 2460 
  if (tmp > 0) 
#line 2462 
               goto ldv_59025; else 
#line 2465 
                                    goto ldv_59027;
  ldv_59027: 
#line 2466 
  ;
  
#line 2465 
  tmp_0 = atomic_read((atomic_t const *)(& rxq->used));
  
#line 2465 
  if ((long)(tmp_0 != 0) != 0L) {
    
#line 2467 
    ldv_inline_asm();
    
#line 2465 
    ;
  }
  else ;
  
#line 2466 
  rxq->tail = (unsigned short)0U;
  
#line 2467 
  rxq->head = (unsigned short)0U;
  
#line 2468 
  return;
}


#line 2470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_cq_clean(struct be_rx_obj *rxo)
{
  struct be_rx_compl_info *rxcp;
  
#line 2472 
  struct be_queue_info *rx_cq = & rxo->cq;
  
#line 2474 
  struct be_adapter *adapter = rxo->adapter;
  
#line 2475 
  int flush_wait = 0;
  ldv_59040: 
#line 2476 
  ;
  
#line 2484 
  rxcp = be_rx_compl_get(rxo);
  
#line 2485 
  if (rxcp == (struct be_rx_compl_info *)0) {
    int tmp;
    
#line 2486 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
      
#line 2487 
      goto ldv_59035; else ;
    
#line 2489 
    tmp = flush_wait;
    
#line 2489 
    flush_wait += 1;
    
#line 2489 
    ;
    
#line 2489 
    if (tmp > 50) 
#line 2489 
                  goto _LOR;
    else {
      u8 tmp_0;
      
#line 2489 
      tmp_0 = be_check_error(adapter,3U);
      
#line 2489 
      if ((unsigned int)tmp_0 != 0U) {
        _LOR: {
                
#line 2492 
                dev_warn((struct device const *)(& (adapter->pdev)->dev),"did not receive flush compl\n");
                
#line 2494 
                goto ldv_59035;
              }
      }
      else ;
    }
    
#line 2496 
    be_cq_notify(adapter,(unsigned short)((int)rx_cq->id),(_Bool)1,(unsigned short)0);
    
#line 2497 
    if (1) 
#line 2497 
           __const_udelay(4295000UL);
    else {
      
#line 2497 
      unsigned long __ms = 1UL;
      {
        unsigned long tmp_1;
        
#line 2497 
        goto ldv_59038;
        ldv_59037: 
#line 2498 
        ;
        
#line 2497 
        __const_udelay(4295000UL);
        ldv_59038: 
#line 2499 
        ;
        
#line 2497 
        tmp_1 = __ms;
        
#line 2497 
        __ms -= 1UL;
        
#line 2497 
        ;
        
#line 2497 
        if (tmp_1 != 0UL) 
#line 2499 
                          goto ldv_59037; else 
#line 2502 
                                               goto ldv_59039;
        ldv_59039: 
#line 2503 
        ;
      }
    }
  }
  else {
    
#line 2499 
    be_rx_compl_discard(rxo,rxcp);
    
#line 2500 
    be_cq_notify(adapter,(unsigned short)((int)rx_cq->id),(_Bool)0,(unsigned short)1);
    
#line 2501 
    if ((unsigned int)rxcp->num_rcvd == 0U) 
#line 2502 
                                            goto ldv_59035; else ;
  }
  
#line 2484 
  goto ldv_59040;
  ldv_59035: 
#line 2485 
  ;
  
#line 2507 
  be_cq_notify(adapter,(unsigned short)((int)rx_cq->id),(_Bool)0,(unsigned short)0);
  
#line 2508 
  return;
}


#line 2510  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_compl_clean(struct be_adapter *adapter)
{
  u16 end_idx;
  u16 notified_idx;
  struct be_tx_compl_info *txcp;
  struct be_queue_info *txq;
  struct be_tx_obj *txo;
  int i;
  int pending_txqs;
  u16 tmp;
  int tmp_1;
  bool tmp_0;
  int tmp_7;
  
#line 2512 
  u16 cmpl = (unsigned short)0U;
  
#line 2512 
  u16 timeo = (unsigned short)0U;
  
#line 2512 
  u16 num_wrbs = (unsigned short)0U;
  
#line 2513 
  struct device *dev = & (adapter->pdev)->dev;
  ldv_59066: 
#line 2518 
  ;
  
#line 2521 
  pending_txqs = (int)adapter->num_tx_qs;
  
#line 2523 
  i = 0;
  
#line 2523 
  txo = & adapter->tx_obj[i];
  
#line 2523 
  goto ldv_59059;
  ldv_59058: 
#line 2524 
  ;
  
#line 2524 
  cmpl = (unsigned short)0U;
  
#line 2525 
  num_wrbs = (unsigned short)0U;
  
#line 2526 
  txq = & txo->q;
  
#line 2527 
  goto ldv_59056;
  ldv_59055: 
#line 2528 
  ;
  
#line 2528 
  tmp = be_tx_compl_process(adapter,txo,(unsigned short)((int)txcp->end_index));
  
#line 2530 
  num_wrbs = (unsigned short)((int)tmp + (int)num_wrbs);
  
#line 2531 
  cmpl = (u16)((int)cmpl + 1);
  ldv_59056: 
#line 2532 
  ;
  
#line 2527 
  txcp = be_tx_compl_get(txo);
  
#line 2527 
  if (txcp != (struct be_tx_compl_info *)0) 
#line 2529 
                                            goto ldv_59055; else 
#line 2532 
                                                                 goto ldv_59057;
  ldv_59057: 
#line 2533 
  ;
  
#line 2533 
  if ((unsigned int)cmpl != 0U) {
    
#line 2534 
    be_cq_notify(adapter,(unsigned short)((int)txo->cq.id),(_Bool)0,(unsigned short)((int)cmpl));
    
#line 2535 
    atomic_sub((int)num_wrbs,& txq->used);
    
#line 2536 
    timeo = (unsigned short)0U;
  }
  else ;
  
#line 2538 
  tmp_0 = be_is_tx_compl_pending(txo);
  
#line 2538 
  if (tmp_0) 
#line 2538 
             tmp_1 = 0; else 
#line 2538 
                             tmp_1 = 1;
  
#line 2538 
  if (tmp_1) 
#line 2539 
             pending_txqs -= 1; else ;
  
#line 2523 
  i += 1;
  
#line 2523 
  txo += 1;
  ldv_59059: 
#line 2524 
  ;
  
#line 2523 
  if ((int)adapter->num_tx_qs > i) 
#line 2525 
                                   goto ldv_59058; else 
#line 2528 
                                                        goto ldv_59060;
  ldv_59060: 
#line 2529 
  ;
  
#line 2542 
  if (pending_txqs == 0) 
#line 2544 
                         goto ldv_59061;
  else {
    
#line 2542 
    timeo = (u16)((int)timeo + 1);
    
#line 2542 
    if ((unsigned int)timeo > 10U) 
#line 2544 
                                   goto ldv_59061;
    else {
      u8 tmp_2;
      
#line 2542 
      tmp_2 = be_check_error(adapter,3U);
      
#line 2542 
      if ((unsigned int)tmp_2 != 0U) 
#line 2544 
                                     goto ldv_59061; else ;
    }
  }
  
#line 2546 
  if (1) 
#line 2546 
         __const_udelay(4295000UL);
  else {
    
#line 2546 
    unsigned long __ms = 1UL;
    {
      unsigned long tmp_3;
      
#line 2546 
      goto ldv_59064;
      ldv_59063: 
#line 2547 
      ;
      
#line 2546 
      __const_udelay(4295000UL);
      ldv_59064: 
#line 2548 
      ;
      
#line 2546 
      tmp_3 = __ms;
      
#line 2546 
      __ms -= 1UL;
      
#line 2546 
      ;
      
#line 2546 
      if (tmp_3 != 0UL) 
#line 2548 
                        goto ldv_59063; else 
#line 2551 
                                             goto ldv_59065;
      ldv_59065: 
#line 2552 
      ;
    }
  }
  
#line 2521 
  goto ldv_59066;
  ldv_59061: 
#line 2522 
  ;
  
#line 2550 
  i = 0;
  
#line 2550 
  txo = & adapter->tx_obj[i];
  
#line 2550 
  goto ldv_59068;
  ldv_59067: 
#line 2551 
  ;
  
#line 2551 
  txq = & txo->q;
  
#line 2553 
  tmp_7 = atomic_read((atomic_t const *)(& txq->used));
  
#line 2553 
  if (tmp_7 != 0) {
    int tmp_4;
    int tmp_5;
    int tmp_6;
    
#line 2554 
    tmp_4 = atomic_read((atomic_t const *)(& txq->used));
    
#line 2554 
    ;
    
#line 2554 
    ;
    
#line 2554 
    _dev_info((struct device const *)dev,"txq%d: cleaning %d pending tx-wrbs\n",i,tmp_4);
    
#line 2556 
    notified_idx = txq->tail;
    
#line 2557 
    end_idx = txq->tail;
    
#line 2558 
    ;
    
#line 2558 
    tmp_5 = atomic_read((atomic_t const *)(& txq->used));
    
#line 2558 
    index_adv(& end_idx,(unsigned short)((int)((unsigned int)((unsigned short)tmp_5) + 65535U)),(unsigned short)((int)txq->len));
    
#line 2563 
    num_wrbs = be_tx_compl_process(adapter,txo,(unsigned short)((int)end_idx));
    
#line 2564 
    atomic_sub((int)num_wrbs,& txq->used);
    
#line 2565 
    tmp_6 = atomic_read((atomic_t const *)(& txq->used));
    
#line 2565 
    if ((long)(tmp_6 != 0) != 0L) {
      
#line 2567 
      ldv_inline_asm();
      
#line 2565 
      ;
    }
    else ;
    
#line 2566 
    txo->pend_wrb_cnt = (unsigned short)0U;
    
#line 2570 
    txq->head = notified_idx;
    
#line 2571 
    txq->tail = notified_idx;
  }
  else ;
  
#line 2550 
  i += 1;
  
#line 2550 
  txo += 1;
  ldv_59068: 
#line 2551 
  ;
  
#line 2550 
  if ((int)adapter->num_tx_qs > i) 
#line 2552 
                                   goto ldv_59067; else 
#line 2555 
                                                        goto ldv_59069;
  ldv_59069: 
#line 2556 
  ;
  
#line 2557 
  return;
}


#line 2576  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_evt_queues_destroy(struct be_adapter *adapter)
{
  struct be_eq_obj *eqo;
  int i;
  
#line 2581 
  i = 0;
  
#line 2581 
  eqo = & adapter->eq_obj[i];
  
#line 2581 
  goto ldv_59076;
  ldv_59075: 
#line 2582 
  ;
  
#line 2582 
  if ((int)eqo->q.created != 0) {
    
#line 2583 
    be_eq_clean(eqo);
    
#line 2584 
    be_cmd_q_destroy(adapter,& eqo->q,1);
    
#line 2585 
    napi_hash_del(& eqo->napi);
    
#line 2586 
    netif_napi_del(& eqo->napi);
    
#line 2587 
    free_cpumask_var(eqo->affinity_mask);
  }
  else ;
  
#line 2589 
  be_queue_free(adapter,& eqo->q);
  
#line 2581 
  i += 1;
  
#line 2581 
  eqo += 1;
  ldv_59076: 
#line 2582 
  ;
  
#line 2581 
  if ((int)adapter->num_evt_qs > i) 
#line 2583 
                                    goto ldv_59075; else 
#line 2586 
                                                         goto ldv_59077;
  ldv_59077: 
#line 2587 
  ;
  
#line 2588 
  return;
}


#line 2593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_evt_queues_create(struct be_adapter *adapter)
{
  int __retres;
  struct be_queue_info *eq;
  struct be_eq_obj *eqo;
  struct be_aic_obj *aic;
  int i;
  int rc;
  int tmp_1;
  {
    unsigned int tmp;
    int tmp_0;
    
#line 2600 
    if ((unsigned int)adapter->num_msix_vec != 0U) 
#line 2600 
                                                   tmp = (unsigned int)adapter->num_msix_vec; else 
                                                                    
#line 2600 
                                                                    tmp = 1U;
    
#line 2600 
    u16 __min1 = (unsigned short)tmp;
    
#line 2600 
    u16 __min2 = adapter->cfg_num_qs;
    
#line 2600 
    if ((int)__min1 < (int)__min2) 
#line 2600 
                                   tmp_0 = (int)__min1; else 
#line 2600 
                                                             tmp_0 = (int)__min2;
    
#line 2600 
    tmp_1 = tmp_0;
  }
  
#line 2600 
  adapter->num_evt_qs = (unsigned short)tmp_1;
  
#line 2603 
  i = 0;
  
#line 2603 
  eqo = & adapter->eq_obj[i];
  
#line 2603 
  goto ldv_59091;
  ldv_59090: 
#line 2604 
  ;
  {
    int tmp_4;
    bool tmp_3;
    unsigned int tmp_5;
    
#line 2604 
    int numa_node_0 = dev_to_node(& (adapter->pdev)->dev);
    
#line 2606 
    aic = & adapter->aic_obj[i];
    
#line 2607 
    eqo->adapter = adapter;
    
#line 2608 
    eqo->idx = (unsigned char)i;
    
#line 2609 
    aic->max_eqd = 128U;
    
#line 2610 
    aic->enable = (_Bool)1;
    
#line 2612 
    eq = & eqo->q;
    
#line 2613 
    rc = be_queue_alloc(adapter,eq,(unsigned short)1024,(unsigned short)4);
    
#line 2615 
    if (rc != 0) {
      
#line 2616 
      __retres = rc;
      
#line 2616 
      goto return_label;
    }
    else ;
    
#line 2618 
    rc = be_cmd_eq_create(adapter,eqo);
    
#line 2619 
    if (rc != 0) {
      
#line 2620 
      __retres = rc;
      
#line 2620 
      goto return_label;
    }
    else ;
    
#line 2622 
    tmp_3 = zalloc_cpumask_var((cpumask_var_t **)(& eqo->affinity_mask),208U);
    
#line 2622 
    if (tmp_3) 
#line 2622 
               tmp_4 = 0; else 
#line 2622 
                               tmp_4 = 1;
    
#line 2622 
    if (tmp_4) {
      
#line 2623 
      __retres = -12;
      
#line 2623 
      goto return_label;
    }
    else ;
    
#line 2624 
    ;
    
#line 2624 
    tmp_5 = cpumask_local_spread((unsigned int)i,numa_node_0);
    
#line 2624 
    cpumask_set_cpu(tmp_5,eqo->affinity_mask);
    
#line 2626 
    netif_napi_add(adapter->netdev,& eqo->napi,& be_poll,64);
    
#line 2628 
    napi_hash_add(& eqo->napi);
  }
  
#line 2603 
  i += 1;
  
#line 2603 
  eqo += 1;
  ldv_59091: 
#line 2604 
  ;
  
#line 2603 
  if ((int)adapter->num_evt_qs > i) 
#line 2605 
                                    goto ldv_59090; else 
#line 2608 
                                                         goto ldv_59092;
  ldv_59092: 
#line 2609 
  ;
  
#line 2630 
  __retres = 0;
  return_label: 
#line 2630 
                return __retres;
}


#line 2633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_mcc_queues_destroy(struct be_adapter *adapter)
{
  struct be_queue_info *q;
  
#line 2637 
  q = & adapter->mcc_obj.q;
  
#line 2638 
  if ((int)q->created != 0) 
#line 2639 
                            be_cmd_q_destroy(adapter,q,5); else ;
  
#line 2640 
  be_queue_free(adapter,q);
  
#line 2642 
  q = & adapter->mcc_obj.cq;
  
#line 2643 
  if ((int)q->created != 0) 
#line 2644 
                            be_cmd_q_destroy(adapter,q,2); else ;
  
#line 2645 
  be_queue_free(adapter,q);
  
#line 2646 
  return;
}


#line 2649  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_mcc_queues_create(struct be_adapter *adapter)
{
  int __retres;
  struct be_queue_info *q;
  struct be_queue_info *cq;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 2653 
  cq = & adapter->mcc_obj.cq;
  
#line 2654 
  tmp = be_queue_alloc(adapter,cq,(unsigned short)256,(unsigned short)16);
  
#line 2654 
  if (tmp != 0) 
#line 2656 
                goto err; else ;
  
#line 2659 
  tmp_0 = be_cmd_cq_create(adapter,cq,& adapter->eq_obj[0].q,(_Bool)1,0);
  
#line 2659 
  if (tmp_0 != 0) 
#line 2660 
                  goto mcc_cq_free; else ;
  
#line 2662 
  q = & adapter->mcc_obj.q;
  
#line 2663 
  tmp_1 = be_queue_alloc(adapter,q,(unsigned short)128,(unsigned short)256);
  
#line 2663 
  if (tmp_1 != 0) 
#line 2664 
                  goto mcc_cq_destroy; else ;
  
#line 2666 
  tmp_2 = be_cmd_mccq_create(adapter,q,cq);
  
#line 2666 
  if (tmp_2 != 0) 
#line 2667 
                  goto mcc_q_free; else ;
  
#line 2669 
  __retres = 0;
  
#line 2669 
  goto return_label;
  mcc_q_free: 
#line 2671 
  ;
  
#line 2672 
  be_queue_free(adapter,q);
  mcc_cq_destroy: 
#line 2673 
  ;
  
#line 2674 
  be_cmd_q_destroy(adapter,cq,2);
  mcc_cq_free: 
#line 2675 
  ;
  
#line 2676 
  be_queue_free(adapter,cq);
  err: 
#line 2677 
  ;
  
#line 2678 
  __retres = -1;
  return_label: 
#line 2678 
                return __retres;
}


#line 2681  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_tx_queues_destroy(struct be_adapter *adapter)
{
  struct be_queue_info *q;
  struct be_tx_obj *txo;
  u8 i;
  
#line 2687 
  i = (unsigned char)0U;
  
#line 2687 
  txo = & adapter->tx_obj[(int)i];
  
#line 2687 
  goto ldv_59113;
  ldv_59112: 
#line 2688 
  ;
  
#line 2688 
  q = & txo->q;
  
#line 2689 
  if ((int)q->created != 0) 
#line 2690 
                            be_cmd_q_destroy(adapter,q,3); else ;
  
#line 2691 
  be_queue_free(adapter,q);
  
#line 2693 
  q = & txo->cq;
  
#line 2694 
  if ((int)q->created != 0) 
#line 2695 
                            be_cmd_q_destroy(adapter,q,2); else ;
  
#line 2696 
  be_queue_free(adapter,q);
  
#line 2687 
  i = (u8)((int)i + 1);
  
#line 2687 
  txo += 1;
  ldv_59113: 
#line 2688 
  ;
  
#line 2687 
  if ((int)((unsigned short)i) < (int)adapter->num_tx_qs) 
#line 2689 
                                                          goto ldv_59112; else 
                                                                    
#line 2692 
                                                                    goto ldv_59114;
  ldv_59114: 
#line 2693 
  ;
  
#line 2694 
  return;
}


#line 2700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_tx_qs_create(struct be_adapter *adapter)
{
  int __retres;
  struct be_queue_info *cq;
  struct be_tx_obj *txo;
  struct be_eq_obj *eqo;
  int status;
  int i;
  int tmp_0;
  {
    int tmp;
    
#line 2707 
    u16 _min1 = adapter->num_evt_qs;
    
#line 2707 
    u16 _min2 = adapter->res.max_tx_qs;
    
#line 2707 
    if ((int)_min1 < (int)_min2) 
#line 2707 
                                 tmp = (int)_min1; else 
#line 2707 
                                                        tmp = (int)_min2;
    
#line 2707 
    tmp_0 = tmp;
  }
  
#line 2707 
  adapter->num_tx_qs = (unsigned short)tmp_0;
  
#line 2709 
  i = 0;
  
#line 2709 
  txo = & adapter->tx_obj[i];
  
#line 2709 
  goto ldv_59127;
  ldv_59126: 
#line 2710 
  ;
  
#line 2710 
  cq = & txo->cq;
  
#line 2711 
  status = be_queue_alloc(adapter,cq,(unsigned short)1024,(unsigned short)16);
  
#line 2713 
  if (status != 0) {
    
#line 2714 
    __retres = status;
    
#line 2714 
    goto return_label;
  }
  else ;
  
#line 2716 
  u64_stats_init(& txo->stats.sync);
  
#line 2717 
  u64_stats_init(& txo->stats.sync_compl);
  
#line 2722 
  eqo = & adapter->eq_obj[i % (int)adapter->num_evt_qs];
  
#line 2723 
  status = be_cmd_cq_create(adapter,cq,& eqo->q,(_Bool)0,3);
  
#line 2724 
  if (status != 0) {
    
#line 2725 
    __retres = status;
    
#line 2725 
    goto return_label;
  }
  else ;
  
#line 2727 
  status = be_queue_alloc(adapter,& txo->q,(unsigned short)2048,(unsigned short)16);
  
#line 2729 
  if (status != 0) {
    
#line 2730 
    __retres = status;
    
#line 2730 
    goto return_label;
  }
  else ;
  
#line 2732 
  status = be_cmd_txq_create(adapter,txo);
  
#line 2733 
  if (status != 0) {
    
#line 2734 
    __retres = status;
    
#line 2734 
    goto return_label;
  }
  else ;
  
#line 2736 
  netif_set_xps_queue(adapter->netdev,(struct cpumask const *)eqo->affinity_mask,(unsigned short)((int)eqo->idx));
  
#line 2709 
  i += 1;
  
#line 2709 
  txo += 1;
  ldv_59127: 
#line 2710 
  ;
  
#line 2709 
  if ((int)adapter->num_tx_qs > i) 
#line 2711 
                                   goto ldv_59126; else 
#line 2714 
                                                        goto ldv_59128;
  ldv_59128: 
#line 2715 
  ;
  
#line 2740 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"created %d TX queue(s)\n",(int)adapter->num_tx_qs);
  
#line 2742 
  __retres = 0;
  return_label: 
#line 2742 
                return __retres;
}


#line 2745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_cqs_destroy(struct be_adapter *adapter)
{
  struct be_queue_info *q;
  struct be_rx_obj *rxo;
  int i;
  
#line 2751 
  i = 0;
  
#line 2751 
  rxo = & adapter->rx_obj[i];
  
#line 2751 
  goto ldv_59136;
  ldv_59135: 
#line 2752 
  ;
  
#line 2752 
  q = & rxo->cq;
  
#line 2753 
  if ((int)q->created != 0) 
#line 2754 
                            be_cmd_q_destroy(adapter,q,2); else ;
  
#line 2755 
  be_queue_free(adapter,q);
  
#line 2751 
  i += 1;
  
#line 2751 
  rxo += 1;
  ldv_59136: 
#line 2752 
  ;
  
#line 2751 
  if ((int)adapter->num_rx_qs > i) 
#line 2753 
                                   goto ldv_59135; else 
#line 2756 
                                                        goto ldv_59137;
  ldv_59137: 
#line 2757 
  ;
  
#line 2758 
  return;
}


#line 2759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_rx_cqs_create(struct be_adapter *adapter)
{
  int __retres;
  struct be_queue_info *eq;
  struct be_queue_info *cq;
  struct be_rx_obj *rxo;
  int rc;
  int i;
  unsigned int tmp_71;
  
#line 2766 
  adapter->num_rss_qs = adapter->num_evt_qs;
  
#line 2769 
  if ((unsigned int)adapter->num_rss_qs <= 1U) 
#line 2770 
                                               adapter->num_rss_qs = (unsigned short)0U; else ;
  
#line 2772 
  adapter->num_rx_qs = (unsigned short)((int)adapter->num_rss_qs + (int)adapter->need_def_rxq);
  
#line 2777 
  if ((unsigned int)adapter->num_rx_qs == 0U) 
#line 2778 
                                              adapter->num_rx_qs = (unsigned short)1U; else ;
  
#line 2780 
  if (0 != 0) {
    unsigned int tmp_69;
    
#line 2780 
    if ((unsigned int)rx_frag_size != 0U) {
      unsigned int tmp_68;
      
#line 2780 
      if ((unsigned int)rx_frag_size > 4095U) {
        unsigned int tmp_67;
        
#line 2780 
        if (0 != 0) {
          unsigned int tmp_65;
          
#line 2780 
          if ((int)rx_frag_size + -1 <= 0) {
            int tmp;
            
#line 2780 
            tmp = ____ilog2_NaN();
            
#line 2780 
            tmp_65 = (unsigned int)(1 << (tmp + -11));
          }
          else {
            unsigned int tmp_64;
            
#line 2780 
            if ((int)rx_frag_size + -1 >= 0) {
              unsigned int tmp_63;
              
#line 2780 
              if (((unsigned long long)((int)rx_frag_size + -1) & 4611686018427387904ULL) == 0ULL) {
                unsigned int tmp_62;
                
#line 2780 
                if (((unsigned long long)((int)rx_frag_size + -1) & 2305843009213693952ULL) == 0ULL) {
                  unsigned int tmp_61;
                  
#line 2780 
                  if (((unsigned long long)((int)rx_frag_size + -1) & 1152921504606846976ULL) == 0ULL) {
                    unsigned int tmp_60;
                    
#line 2780 
                    if (((unsigned long long)((int)rx_frag_size + -1) & 576460752303423488ULL) == 0ULL) {
                      unsigned int tmp_59;
                      
#line 2780 
                      if (((unsigned long long)((int)rx_frag_size + -1) & 288230376151711744ULL) == 0ULL) {
                        unsigned int tmp_58;
                        
#line 2780 
                        if (((unsigned long long)((int)rx_frag_size + -1) & 144115188075855872ULL) == 0ULL) {
                          unsigned int tmp_57;
                          
#line 2780 
                          if (((unsigned long long)((int)rx_frag_size + -1) & 72057594037927936ULL) == 0ULL) {
                            unsigned int tmp_56;
                            
#line 2780 
                            if (((unsigned long long)((int)rx_frag_size + -1) & 36028797018963968ULL) == 0ULL) {
                              unsigned int tmp_55;
                              
#line 2780 
                              if (((unsigned long long)((int)rx_frag_size + -1) & 18014398509481984ULL) == 0ULL) {
                                unsigned int tmp_54;
                                
#line 2780 
                                if (((unsigned long long)((int)rx_frag_size + -1) & 9007199254740992ULL) == 0ULL) {
                                  unsigned int tmp_53;
                                  
#line 2780 
                                  if (((unsigned long long)((int)rx_frag_size + -1) & 4503599627370496ULL) == 0ULL) {
                                    unsigned int tmp_52;
                                    
#line 2780 
                                    if (((unsigned long long)((int)rx_frag_size + -1) & 2251799813685248ULL) == 0ULL) {
                                      unsigned int tmp_51;
                                      
#line 2780 
                                      if (((unsigned long long)((int)rx_frag_size + -1) & 1125899906842624ULL) == 0ULL) {
                                        unsigned int tmp_50;
                                        
#line 2780 
                                        if (((unsigned long long)((int)rx_frag_size + -1) & 562949953421312ULL) == 0ULL) {
                                          unsigned int tmp_49;
                                          
#line 2780 
                                          if (((unsigned long long)((int)rx_frag_size + -1) & 281474976710656ULL) == 0ULL) {
                                            unsigned int tmp_48;
                                            
#line 2780 
                                            if (((unsigned long long)((int)rx_frag_size + -1) & 140737488355328ULL) == 0ULL) {
                                              unsigned int tmp_47;
                                              
#line 2780 
                                              if (((unsigned long long)((int)rx_frag_size + -1) & 70368744177664ULL) == 0ULL) {
                                                unsigned int tmp_46;
                                                
#line 2780 
                                                if (((unsigned long long)((int)rx_frag_size + -1) & 35184372088832ULL) == 0ULL) {
                                                  unsigned int tmp_45;
                                                  
#line 2780 
                                                  if (((unsigned long long)((int)rx_frag_size + -1) & 17592186044416ULL) == 0ULL) {
                                                    unsigned int tmp_44;
                                                    
#line 2780 
                                                    if (((unsigned long long)((int)rx_frag_size + -1) & 8796093022208ULL) == 0ULL) {
                                                      unsigned int tmp_43;
                                                      
#line 2780 
                                                      if (((unsigned long long)((int)rx_frag_size + -1) & 4398046511104ULL) == 0ULL) {
                                                        int tmp_42;
                                                        
#line 2780 
                                                        if (((unsigned long long)((int)rx_frag_size + -1) & 2199023255552ULL) == 0ULL) {
                                                          int tmp_41;
                                                          
#line 2780 
                                                          if (((unsigned long long)((int)rx_frag_size + -1) & 1099511627776ULL) == 0ULL) {
                                                            int tmp_40;
                                                            
#line 2780 
                                                            if (((unsigned long long)((int)rx_frag_size + -1) & 549755813888ULL) == 0ULL) {
                                                              int tmp_39;
                                                              
#line 2780 
                                                              if (((unsigned long long)((int)rx_frag_size + -1) & 274877906944ULL) == 0ULL) {
                                                                int tmp_38;
                                                                
#line 2780 
                                                                if (((unsigned long long)((int)rx_frag_size + -1) & 137438953472ULL) == 0ULL) {
                                                                  int tmp_37;
                                                                  
#line 2780 
                                                                  if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 68719476736ULL) == 0ULL) {
                                                                    int tmp_36;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 34359738368ULL) == 0ULL) {
                                                                    int tmp_35;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 17179869184ULL) == 0ULL) {
                                                                    int tmp_34;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 8589934592ULL) == 0ULL) {
                                                                    int tmp_33;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 4294967296ULL) == 0ULL) {
                                                                    int tmp_32;
                                                                    
#line 2780 
                                                                    if (
                                                                    (int)rx_frag_size + -1 >= 0) {
                                                                    int tmp_31;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 1073741824ULL) == 0ULL) {
                                                                    int tmp_30;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 536870912ULL) == 0ULL) {
                                                                    int tmp_29;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 268435456ULL) == 0ULL) {
                                                                    int tmp_28;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 134217728ULL) == 0ULL) {
                                                                    int tmp_27;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 67108864ULL) == 0ULL) {
                                                                    int tmp_26;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 33554432ULL) == 0ULL) {
                                                                    int tmp_25;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 16777216ULL) == 0ULL) {
                                                                    int tmp_24;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 8388608ULL) == 0ULL) {
                                                                    int tmp_23;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 4194304ULL) == 0ULL) {
                                                                    int tmp_22;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 2097152ULL) == 0ULL) {
                                                                    int tmp_21;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 1048576ULL) == 0ULL) {
                                                                    int tmp_20;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 524288ULL) == 0ULL) {
                                                                    int tmp_19;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 262144ULL) == 0ULL) {
                                                                    int tmp_18;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 131072ULL) == 0ULL) {
                                                                    int tmp_17;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 65536ULL) == 0ULL) {
                                                                    int tmp_16;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 32768ULL) == 0ULL) {
                                                                    int tmp_15;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 16384ULL) == 0ULL) {
                                                                    int tmp_14;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 8192ULL) == 0ULL) {
                                                                    int tmp_13;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 4096ULL) == 0ULL) {
                                                                    int tmp_12;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 2048ULL) == 0ULL) {
                                                                    int tmp_11;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 1024ULL) == 0ULL) {
                                                                    int tmp_10;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 512ULL) == 0ULL) {
                                                                    int tmp_9;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 256ULL) == 0ULL) {
                                                                    int tmp_8;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 128ULL) == 0ULL) {
                                                                    int tmp_7;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 64ULL) == 0ULL) {
                                                                    int tmp_6;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 32ULL) == 0ULL) {
                                                                    int tmp_5;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 16ULL) == 0ULL) {
                                                                    int tmp_4;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 8ULL) == 0ULL) {
                                                                    int tmp_3;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 4ULL) == 0ULL) {
                                                                    int tmp_2;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 2ULL) == 0ULL) {
                                                                    int tmp_1;
                                                                    
#line 2780 
                                                                    if (
                                                                    ((unsigned long long)((int)rx_frag_size + -1) & 1ULL) == 0ULL) {
                                                                    int tmp_0;
                                                                    
#line 2780 
                                                                    tmp_0 = ____ilog2_NaN();
                                                                    
#line 2780 
                                                                    tmp_1 = 1 << (tmp_0 + -11);
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_1 = 0;
                                                                    
#line 2780 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_2 = 0;
                                                                    
#line 2780 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_3 = 0;
                                                                    
#line 2780 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_4 = 0;
                                                                    
#line 2780 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_5 = 0;
                                                                    
#line 2780 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_6 = 0;
                                                                    
#line 2780 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_7 = 0;
                                                                    
#line 2780 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_8 = 0;
                                                                    
#line 2780 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_9 = 0;
                                                                    
#line 2780 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_10 = 0;
                                                                    
#line 2780 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_11 = 0;
                                                                    
#line 2780 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_12 = 1;
                                                                    
#line 2780 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_13 = 2;
                                                                    
#line 2780 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_14 = 4;
                                                                    
#line 2780 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_15 = 8;
                                                                    
#line 2780 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_16 = 16;
                                                                    
#line 2780 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_17 = 32;
                                                                    
#line 2780 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_18 = 64;
                                                                    
#line 2780 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_19 = 128;
                                                                    
#line 2780 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_20 = 256;
                                                                    
#line 2780 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_21 = 512;
                                                                    
#line 2780 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_22 = 1024;
                                                                    
#line 2780 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_23 = 2048;
                                                                    
#line 2780 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_24 = 4096;
                                                                    
#line 2780 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_25 = 8192;
                                                                    
#line 2780 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_26 = 16384;
                                                                    
#line 2780 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_27 = 32768;
                                                                    
#line 2780 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_28 = 65536;
                                                                    
#line 2780 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_29 = 131072;
                                                                    
#line 2780 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_30 = 262144;
                                                                    
#line 2780 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_31 = 524288;
                                                                    
#line 2780 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_32 = 1048576;
                                                                    
#line 2780 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_33 = 2097152;
                                                                    
#line 2780 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_34 = 4194304;
                                                                    
#line 2780 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_35 = 8388608;
                                                                    
#line 2780 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 2780 
                                                                    tmp_36 = 16777216;
                                                                    
#line 2780 
                                                                    tmp_37 = tmp_36;
                                                                  }
                                                                  else 
                                                                    
#line 2780 
                                                                    tmp_37 = 33554432;
                                                                  
#line 2780 
                                                                  tmp_38 = tmp_37;
                                                                }
                                                                else 
                                                                  
#line 2780 
                                                                  tmp_38 = 67108864;
                                                                
#line 2780 
                                                                tmp_39 = tmp_38;
                                                              }
                                                              else 
#line 2780 
                                                                   tmp_39 = 134217728;
                                                              
#line 2780 
                                                              tmp_40 = tmp_39;
                                                            }
                                                            else 
#line 2780 
                                                                 tmp_40 = 268435456;
                                                            
#line 2780 
                                                            tmp_41 = tmp_40;
                                                          }
                                                          else 
#line 2780 
                                                               tmp_41 = 536870912;
                                                          
#line 2780 
                                                          tmp_42 = tmp_41;
                                                        }
                                                        else 
#line 2780 
                                                             tmp_42 = 1073741824;
                                                        
#line 2780 
                                                        tmp_43 = (unsigned int)tmp_42;
                                                      }
                                                      else 
#line 2780 
                                                           tmp_43 = -2147483648;
                                                      
#line 2780 
                                                      tmp_44 = tmp_43;
                                                    }
                                                    else 
#line 2780 
                                                         tmp_44 = (unsigned int)0;
                                                    
#line 2780 
                                                    tmp_45 = tmp_44;
                                                  }
                                                  else 
#line 2780 
                                                       tmp_45 = (unsigned int)0;
                                                  
#line 2780 
                                                  tmp_46 = tmp_45;
                                                }
                                                else 
#line 2780 
                                                     tmp_46 = (unsigned int)0;
                                                
#line 2780 
                                                tmp_47 = tmp_46;
                                              }
                                              else 
#line 2780 
                                                   tmp_47 = (unsigned int)0;
                                              
#line 2780 
                                              tmp_48 = tmp_47;
                                            }
                                            else 
#line 2780 
                                                 tmp_48 = (unsigned int)0;
                                            
#line 2780 
                                            tmp_49 = tmp_48;
                                          }
                                          else 
#line 2780 
                                               tmp_49 = (unsigned int)0;
                                          
#line 2780 
                                          tmp_50 = tmp_49;
                                        }
                                        else 
#line 2780 
                                             tmp_50 = (unsigned int)0;
                                        
#line 2780 
                                        tmp_51 = tmp_50;
                                      }
                                      else 
#line 2780 
                                           tmp_51 = (unsigned int)0;
                                      
#line 2780 
                                      tmp_52 = tmp_51;
                                    }
                                    else 
#line 2780 
                                         tmp_52 = (unsigned int)0;
                                    
#line 2780 
                                    tmp_53 = tmp_52;
                                  }
                                  else 
#line 2780 
                                       tmp_53 = (unsigned int)0;
                                  
#line 2780 
                                  tmp_54 = tmp_53;
                                }
                                else 
#line 2780 
                                     tmp_54 = (unsigned int)0;
                                
#line 2780 
                                tmp_55 = tmp_54;
                              }
                              else 
#line 2780 
                                   tmp_55 = (unsigned int)0;
                              
#line 2780 
                              tmp_56 = tmp_55;
                            }
                            else 
#line 2780 
                                 tmp_56 = (unsigned int)0;
                            
#line 2780 
                            tmp_57 = tmp_56;
                          }
                          else 
#line 2780 
                               tmp_57 = (unsigned int)0;
                          
#line 2780 
                          tmp_58 = tmp_57;
                        }
                        else 
#line 2780 
                             tmp_58 = (unsigned int)0;
                        
#line 2780 
                        tmp_59 = tmp_58;
                      }
                      else 
#line 2780 
                           tmp_59 = (unsigned int)0;
                      
#line 2780 
                      tmp_60 = tmp_59;
                    }
                    else 
#line 2780 
                         tmp_60 = (unsigned int)0;
                    
#line 2780 
                    tmp_61 = tmp_60;
                  }
                  else 
#line 2780 
                       tmp_61 = (unsigned int)0;
                  
#line 2780 
                  tmp_62 = tmp_61;
                }
                else 
#line 2780 
                     tmp_62 = (unsigned int)0;
                
#line 2780 
                tmp_63 = tmp_62;
              }
              else 
#line 2780 
                   tmp_63 = (unsigned int)0;
              
#line 2780 
              tmp_64 = tmp_63;
            }
            else 
#line 2780 
                 tmp_64 = (unsigned int)0;
            
#line 2780 
            tmp_65 = tmp_64;
          }
          
#line 2780 
          tmp_67 = tmp_65;
        }
        else {
          int tmp_66;
          
#line 2780 
          tmp_66 = __ilog2_u32((unsigned int)((int)rx_frag_size + -1));
          
#line 2780 
          tmp_67 = (unsigned int)(1 << (tmp_66 + -11));
        }
        
#line 2780 
        tmp_68 = tmp_67;
      }
      else 
#line 2780 
           tmp_68 = (unsigned int)1;
      
#line 2780 
      tmp_69 = tmp_68;
    }
    else 
#line 2780 
         tmp_69 = (unsigned int)0;
    
#line 2780 
    tmp_71 = tmp_69;
  }
  else {
    int tmp_70;
    
#line 2780 
    tmp_70 = __get_order((unsigned long)rx_frag_size);
    
#line 2780 
    tmp_71 = (unsigned int)(1 << tmp_70);
  }
  
#line 2780 
  adapter->big_page_size = (unsigned int)((unsigned long)tmp_71) * 4096U;
  
#line 2781 
  i = 0;
  
#line 2781 
  rxo = & adapter->rx_obj[i];
  
#line 2781 
  goto ldv_59147;
  ldv_59146: 
#line 2782 
  ;
  
#line 2782 
  rxo->adapter = adapter;
  
#line 2783 
  cq = & rxo->cq;
  
#line 2784 
  rc = be_queue_alloc(adapter,cq,(unsigned short)1024,(unsigned short)16);
  
#line 2786 
  if (rc != 0) {
    
#line 2787 
    __retres = rc;
    
#line 2787 
    goto return_label;
  }
  else ;
  
#line 2789 
  u64_stats_init(& rxo->stats.sync);
  
#line 2790 
  eq = & adapter->eq_obj[i % (int)adapter->num_evt_qs].q;
  
#line 2791 
  rc = be_cmd_cq_create(adapter,cq,eq,(_Bool)0,3);
  
#line 2792 
  if (rc != 0) {
    
#line 2793 
    __retres = rc;
    
#line 2793 
    goto return_label;
  }
  else ;
  
#line 2781 
  i += 1;
  
#line 2781 
  rxo += 1;
  ldv_59147: 
#line 2782 
  ;
  
#line 2781 
  if ((int)adapter->num_rx_qs > i) 
#line 2783 
                                   goto ldv_59146; else 
#line 2786 
                                                        goto ldv_59148;
  ldv_59148: 
#line 2787 
  ;
  
#line 2796 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"created %d RX queue(s)\n",(int)adapter->num_rx_qs);
  
#line 2798 
  __retres = 0;
  return_label: 
#line 2798 
                return __retres;
}


#line 2801  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static irqreturn_t be_intx(int irq, void *dev)
{
  irqreturn_t __retres;
  bool tmp;
  
#line 2803 
  struct be_eq_obj *eqo = (struct be_eq_obj *)dev;
  
#line 2804 
  struct be_adapter *adapter = eqo->adapter;
  
#line 2805 
  int num_evts = 0;
  
#line 2815 
  tmp = napi_schedule_prep(& eqo->napi);
  
#line 2815 
  if ((int)tmp != 0) {
    
#line 2816 
    num_evts = events_get(eqo);
    
#line 2817 
    __napi_schedule(& eqo->napi);
    
#line 2818 
    if (num_evts != 0) 
#line 2819 
                       eqo->spurious_intr = (unsigned short)0U; else ;
  }
  else ;
  
#line 2821 
  be_eq_notify(adapter,(unsigned short)((int)eqo->q.id),(_Bool)0,(_Bool)1,(unsigned short)((int)((unsigned short)num_evts)),0U);
  
#line 2827 
  if (num_evts != 0) 
#line 2827 
                     goto _LOR;
  else {
    u16 tmp_0;
    
#line 2827 
    tmp_0 = eqo->spurious_intr;
    
#line 2827 
    eqo->spurious_intr = (u16)((int)eqo->spurious_intr + 1);
    
#line 2827 
    ;
    
#line 2827 
    if ((unsigned int)tmp_0 == 0U) {
      _LOR: {
              
#line 2828 
              __retres = IRQ_HANDLED;
              
#line 2828 
              goto return_label;
            }
    }
    else {
      
#line 2830 
      __retres = IRQ_NONE;
      
#line 2830 
      goto return_label;
    }
  }
  return_label: 
#line 2827 
                return __retres;
}


#line 2833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static irqreturn_t be_msix(int irq, void *dev)
{
  irqreturn_t __retres;
  
#line 2835 
  struct be_eq_obj *eqo = (struct be_eq_obj *)dev;
  
#line 2837 
  be_eq_notify(eqo->adapter,(unsigned short)((int)eqo->q.id),(_Bool)0,(_Bool)1,(unsigned short)0,0U);
  
#line 2838 
  napi_schedule(& eqo->napi);
  
#line 2839 
  __retres = IRQ_HANDLED;
  
#line 2839 
  return __retres;
}


#line 2842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool do_gro(struct be_rx_compl_info *rxcp)
{
  bool __retres;
  
#line 2844 
  __retres = (_Bool)((((unsigned int)rxcp->tcpf != 0U && (unsigned int)rxcp->err == 0U) && (unsigned int)rxcp->l4_csum != 0U) != 0);
  
#line 2844 
  return __retres;
}


#line 2847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_process_rx(struct be_rx_obj *rxo, struct napi_struct *napi, int budget, int polling)
{
  int __retres;
  struct be_rx_compl_info *rxcp;
  u32 work_done;
  bool tmp;
  
#line 2850 
  struct be_adapter *adapter = rxo->adapter;
  
#line 2851 
  struct be_queue_info *rx_cq = & rxo->cq;
  
#line 2854 
  u32 frags_consumed = 0U;
  
#line 2856 
  work_done = 0U;
  
#line 2856 
  goto ldv_59178;
  ldv_59177: 
#line 2857 
  ;
  
#line 2857 
  rxcp = be_rx_compl_get(rxo);
  
#line 2858 
  if (rxcp == (struct be_rx_compl_info *)0) 
#line 2859 
                                            goto ldv_59175; else ;
  
#line 2862 
  if ((long)((unsigned int)rxcp->num_rcvd == 0U) != 0L) 
#line 2863 
                                                        goto loop_continue; else ;
  
#line 2866 
  if ((long)((unsigned int)rxcp->pkt_size == 0U) != 0L) {
    
#line 2867 
    be_rx_compl_discard(rxo,rxcp);
    
#line 2868 
    goto loop_continue;
  }
  else ;
  
#line 2874 
  if ((long)((unsigned int)rxcp->port != adapter->port_num) != 0L && (long)(((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) != 0) != 0L) {
    
#line 2876 
    be_rx_compl_discard(rxo,rxcp);
    
#line 2877 
    goto loop_continue;
  }
  else ;
  
#line 2881 
  tmp = do_gro(rxcp);
  
#line 2881 
  if ((int)tmp != 0) 
    
#line 2881 
    if (polling != 1) 
#line 2882 
                      be_rx_compl_process_gro(rxo,napi,rxcp); else 
#line 2884 
                                                                   be_rx_compl_process(rxo,napi,rxcp);
  else 
#line 2884 
       be_rx_compl_process(rxo,napi,rxcp);
  loop_continue: 
#line 2886 
  ;
  
#line 2887 
  frags_consumed = (unsigned int)rxcp->num_rcvd + frags_consumed;
  
#line 2888 
  be_rx_stats_update(rxo,rxcp);
  
#line 2856 
  work_done += 1U;
  ldv_59178: 
#line 2857 
  ;
  
#line 2856 
  if (work_done < (unsigned int)budget) 
#line 2858 
                                        goto ldv_59177; else 
#line 2861 
                                                             goto ldv_59175;
  ldv_59175: 
#line 2862 
  ;
  
#line 2891 
  if (work_done != 0U) {
    int tmp_2;
    
#line 2892 
    be_cq_notify(adapter,(unsigned short)((int)rx_cq->id),(_Bool)1,(unsigned short)((int)((unsigned short)work_done)));
    
#line 2897 
    tmp_2 = atomic_read((atomic_t const *)(& rxo->q.used));
    
#line 2897 
    if (tmp_2 <= 959) {
      
#line 2898 
      if (! rxo->rx_post_starved) {
        u32 tmp_1;
        {
          u32 tmp_0;
          
#line 2900 
          u32 __max1 = 64U;
          
#line 2900 
          u32 __max2 = frags_consumed;
          
#line 2900 
          if (__max1 > __max2) 
#line 2900 
                               tmp_0 = __max1; else 
#line 2900 
                                                    tmp_0 = __max2;
          
#line 2900 
          tmp_1 = tmp_0;
        }
        
#line 2899 
        ;
        
#line 2899 
        be_post_rx_frags(rxo,32U,tmp_1);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 2904 
  __retres = (int)work_done;
  
#line 2904 
  return __retres;
}


#line 2907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void be_update_tx_err(struct be_tx_obj *txo, u8 status)
{
  
#line 2909 
  switch ((int)status) {
    case 2: 
#line 2910 
    ;
    
#line 2911 
    txo->stats.tx_hdr_parse_err += 1U;
    
#line 2912 
    goto ldv_59187;
    case 3: 
#line 2913 
    ;
    
#line 2914 
    txo->stats.tx_dma_err += 1U;
    
#line 2915 
    goto ldv_59187;
    case 5: 
#line 2916 
    ;
    
#line 2917 
    txo->stats.tx_spoof_check_err += 1U;
    
#line 2918 
    goto ldv_59187;
  }
  ldv_59187: 
#line 2920 
  ;
  
#line 2921 
  return;
}


#line 2922  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void lancer_update_tx_err(struct be_tx_obj *txo, u8 status)
{
  
#line 2924 
  switch ((int)status) {
    case 1: 
#line 2925 
    ;
    
#line 2926 
    txo->stats.tx_tso_err += 1U;
    
#line 2927 
    goto ldv_59195;
    case 3: 
#line 2928 
    ;
    case 5: 
#line 2929 
    ;
    
#line 2930 
    txo->stats.tx_spoof_check_err += 1U;
    
#line 2931 
    goto ldv_59195;
    case 7: 
#line 2932 
    ;
    
#line 2933 
    txo->stats.tx_qinq_err += 1U;
    
#line 2934 
    goto ldv_59195;
    case 11: 
#line 2935 
    ;
    
#line 2936 
    txo->stats.tx_internal_parity_err += 1U;
    
#line 2937 
    goto ldv_59195;
    case 13: 
#line 2938 
    ;
    
#line 2939 
    txo->stats.tx_dma_err += 1U;
    
#line 2940 
    goto ldv_59195;
  }
  ldv_59195: 
#line 2942 
  ;
  
#line 2943 
  return;
}


#line 2944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_process_tx(struct be_adapter *adapter, struct be_tx_obj *txo, int idx)
{
  struct be_tx_compl_info *txcp;
  u16 tmp;
  
#line 2947 
  int num_wrbs = 0;
  
#line 2947 
  int work_done = 0;
  
#line 2950 
  goto ldv_59210;
  ldv_59209: 
#line 2951 
  ;
  
#line 2951 
  tmp = be_tx_compl_process(adapter,txo,(unsigned short)((int)txcp->end_index));
  
#line 2951 
  num_wrbs = (int)tmp + num_wrbs;
  
#line 2952 
  work_done += 1;
  
#line 2954 
  if ((unsigned int)txcp->status != 0U) 
    
#line 2955 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
      
#line 2956 
      lancer_update_tx_err(txo,(unsigned char)((int)txcp->status)); else 
                                                                    
#line 2958 
                                                                    be_update_tx_err(txo,(unsigned char)((int)txcp->status));
  else ;
  ldv_59210: 
#line 2959 
  ;
  
#line 2950 
  txcp = be_tx_compl_get(txo);
  
#line 2950 
  if (txcp != (struct be_tx_compl_info *)0) 
#line 2952 
                                            goto ldv_59209; else 
#line 2955 
                                                                 goto ldv_59211;
  ldv_59211: 
#line 2956 
  ;
  
#line 2962 
  if (work_done != 0) {
    bool tmp_0;
    
#line 2963 
    be_cq_notify(adapter,(unsigned short)((int)txo->cq.id),(_Bool)1,(unsigned short)((int)((unsigned short)work_done)));
    
#line 2964 
    atomic_sub(num_wrbs,& txo->q.used);
    
#line 2968 
    tmp_0 = __netif_subqueue_stopped((struct net_device const *)adapter->netdev,(unsigned short)((int)((unsigned short)idx)));
    
#line 2968 
    if ((int)tmp_0 != 0) {
      bool tmp_1;
      
#line 2968 
      tmp_1 = be_can_txq_wake(txo);
      
#line 2968 
      if ((int)tmp_1 != 0) 
#line 2970 
                           netif_wake_subqueue(adapter->netdev,(unsigned short)((int)((unsigned short)idx))); else ;
    }
    else ;
    
#line 2973 
    u64_stats_init(& txo->stats.sync_compl);
    
#line 2974 
    txo->stats.tx_compl += (unsigned long long)work_done;
    
#line 2975 
    u64_stats_init(& txo->stats.sync_compl);
  }
  else ;
  
#line 2977 
  return;
}


#line 2980  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_lock_napi(struct be_eq_obj *eqo)
{
  
#line 2982 
  bool status = (_Bool)1;
  
#line 2984 
  ldv_spin_lock_73(& eqo->lock);
  
#line 2985 
  if ((eqo->state & 3U) != 0U) {
    {
      
#line 2986 
      int __ret_warn_on = (eqo->state & 1U) != 0U;
      
#line 2986 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 2986 
                                            warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c",2986); else ;
      
#line 2986 
      long tmp = (long)(__ret_warn_on != 0);
    }
    
#line 2987 
    eqo->state |= 4U;
    
#line 2988 
    status = (_Bool)0;
  }
  else 
#line 2990 
       eqo->state = 1U;
  
#line 2992 
  ldv_spin_unlock_74(& eqo->lock);
  
#line 2993 
  return status;
}


#line 2996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void be_unlock_napi(struct be_eq_obj *eqo)
{
  
#line 2998 
  ldv_spin_lock_75(& eqo->lock);
  {
    
#line 3000 
    int __ret_warn_on = (eqo->state & 6U) != 0U;
    
#line 3000 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 3000 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c",3000); else ;
    
#line 3000 
    long tmp = (long)(__ret_warn_on != 0);
  }
  
#line 3001 
  eqo->state = 0U;
  
#line 3003 
  ldv_spin_unlock_76(& eqo->lock);
  
#line 3004 
  return;
}


#line 3006  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static bool be_lock_busy_poll(struct be_eq_obj *eqo)
{
  
#line 3008 
  bool status = (_Bool)1;
  
#line 3010 
  ldv_spin_lock_bh_77(& eqo->lock);
  
#line 3011 
  if ((eqo->state & 3U) != 0U) {
    
#line 3012 
    eqo->state |= 8U;
    
#line 3013 
    status = (_Bool)0;
  }
  else 
#line 3015 
       eqo->state |= 2U;
  
#line 3017 
  ldv_spin_unlock_bh_78(& eqo->lock);
  
#line 3018 
  return status;
}


#line 3021  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void be_unlock_busy_poll(struct be_eq_obj *eqo)
{
  
#line 3023 
  ldv_spin_lock_bh_79_0(& eqo->lock);
  {
    
#line 3025 
    int __ret_warn_on = (eqo->state & 1U) != 0U;
    
#line 3025 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 3025 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c",3025); else ;
    
#line 3025 
    long tmp = (long)(__ret_warn_on != 0);
  }
  
#line 3026 
  eqo->state = 0U;
  
#line 3028 
  ldv_spin_unlock_bh_80(& eqo->lock);
  
#line 3029 
  return;
}


#line 3031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void be_enable_busy_poll(struct be_eq_obj *eqo)
{
  
#line 3033 
  spinlock_check(& eqo->lock);
  {
    struct lock_class_key __key;
    
#line 3033 
    __raw_spin_lock_init(& eqo->lock.__anonCompField_spinlock_18.rlock,"&(&eqo->lock)->rlock",& __key);
  }
  
#line 3034 
  eqo->state = 0U;
  
#line 3035 
  return;
}


#line 3037  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static void be_disable_busy_poll(struct be_eq_obj *eqo)
{
  int tmp_1;
  bool tmp_0;
  
#line 3039 
  local_bh_disable();
  
#line 3044 
  goto ldv_59244;
  ldv_59243: 
#line 3045 
  ;
  
#line 3045 
  if (1) 
#line 3045 
         __const_udelay(4295000UL);
  else {
    
#line 3045 
    unsigned long __ms = 1UL;
    {
      unsigned long tmp;
      
#line 3045 
      goto ldv_59241;
      ldv_59240: 
#line 3046 
      ;
      
#line 3045 
      __const_udelay(4295000UL);
      ldv_59241: 
#line 3047 
      ;
      
#line 3045 
      tmp = __ms;
      
#line 3045 
      __ms -= 1UL;
      
#line 3045 
      ;
      
#line 3045 
      if (tmp != 0UL) 
#line 3047 
                      goto ldv_59240; else 
#line 3050 
                                           goto ldv_59242;
      ldv_59242: 
#line 3051 
      ;
    }
  }
  ldv_59244: 
#line 3054 
  ;
  
#line 3044 
  tmp_0 = be_lock_napi(eqo);
  
#line 3044 
  if (tmp_0) 
#line 3044 
             tmp_1 = 0; else 
#line 3044 
                             tmp_1 = 1;
  
#line 3044 
  if (tmp_1) 
#line 3046 
             goto ldv_59243; else 
#line 3049 
                                  goto ldv_59245;
  ldv_59245: 
#line 3050 
  ;
  
#line 3047 
  local_bh_enable();
  
#line 3048 
  return;
}


#line 3079  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
int be_poll(struct napi_struct *napi, int budget)
{
  struct be_eq_obj *tmp;
  int work;
  int i;
  int num_evts;
  struct be_rx_obj *rxo;
  struct be_tx_obj *txo;
  bool tmp_2;
  {
    
#line 3081 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 3081 
    tmp = (struct be_eq_obj *)__mptr + 18446744073709551520U;
  }
  
#line 3081 
  struct be_eq_obj *eqo = tmp;
  
#line 3082 
  struct be_adapter *adapter = eqo->adapter;
  
#line 3083 
  int max_work = 0;
  
#line 3086 
  u32 mult_enc = 0U;
  
#line 3088 
  num_evts = events_get(eqo);
  
#line 3090 
  i = (int)eqo->idx;
  
#line 3090 
  txo = & adapter->tx_obj[i];
  
#line 3090 
  goto ldv_59262;
  ldv_59261: 
#line 3091 
  ;
  
#line 3091 
  be_process_tx(adapter,txo,i);
  
#line 3090 
  i = (int)adapter->num_evt_qs + i;
  
#line 3090 
  txo += (int)adapter->num_evt_qs;
  ldv_59262: 
#line 3091 
  ;
  
#line 3090 
  if ((int)adapter->num_tx_qs > i) 
#line 3092 
                                   goto ldv_59261; else 
#line 3095 
                                                        goto ldv_59263;
  ldv_59263: 
#line 3096 
  ;
  
#line 3093 
  tmp_2 = be_lock_napi(eqo);
  
#line 3093 
  if ((int)tmp_2 != 0) {
    int tmp_1;
    
#line 3098 
    i = (int)eqo->idx;
    
#line 3098 
    rxo = & adapter->rx_obj[i];
    
#line 3098 
    goto ldv_59268;
    ldv_59267: 
#line 3099 
    ;
    
#line 3099 
    work = be_process_rx(rxo,napi,budget,0);
    {
      int tmp_0;
      
#line 3100 
      int _max1 = work;
      
#line 3100 
      int _max2 = max_work;
      
#line 3100 
      if (_max1 > _max2) 
#line 3100 
                         tmp_0 = _max1; else 
#line 3100 
                                             tmp_0 = _max2;
      
#line 3100 
      tmp_1 = tmp_0;
    }
    
#line 3100 
    max_work = tmp_1;
    
#line 3098 
    i = (int)adapter->num_evt_qs + i;
    
#line 3098 
    rxo += (int)adapter->num_evt_qs;
    ldv_59268: 
#line 3099 
    ;
    
#line 3098 
    if ((int)adapter->num_rx_qs > i) 
#line 3100 
                                     goto ldv_59267; else 
#line 3103 
                                                          goto ldv_59269;
    ldv_59269: 
#line 3104 
    ;
    
#line 3102 
    be_unlock_napi(eqo);
  }
  else 
#line 3104 
       max_work = budget;
  
#line 3107 
  if ((unsigned int)eqo->idx == 0U) 
#line 3108 
                                    be_process_mcc(adapter); else ;
  
#line 3110 
  if (max_work < budget) {
    
#line 3111 
    napi_complete(napi);
    
#line 3116 
    if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) 
      
#line 3117 
      mult_enc = be_get_eq_delay_mult_enc(eqo); else ;
    
#line 3119 
    be_eq_notify(adapter,(unsigned short)((int)eqo->q.id),(_Bool)1,(_Bool)0,(unsigned short)((int)((unsigned short)num_evts)),mult_enc);
  }
  else 
#line 3123 
       be_eq_notify(adapter,(unsigned short)((int)eqo->q.id),(_Bool)0,(_Bool)0,(unsigned short)((int)((unsigned short)num_evts)),0U);
  
#line 3125 
  return max_work;
}


#line 3129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_busy_poll(struct napi_struct *napi)
{
  int __retres;
  struct be_eq_obj *tmp;
  struct be_rx_obj *rxo;
  int i;
  int tmp_1;
  bool tmp_0;
  {
    
#line 3131 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 3131 
    tmp = (struct be_eq_obj *)__mptr + 18446744073709551520U;
  }
  
#line 3131 
  struct be_eq_obj *eqo = tmp;
  
#line 3132 
  struct be_adapter *adapter = eqo->adapter;
  
#line 3134 
  int work = 0;
  
#line 3136 
  tmp_0 = be_lock_busy_poll(eqo);
  
#line 3136 
  if (tmp_0) 
#line 3136 
             tmp_1 = 0; else 
#line 3136 
                             tmp_1 = 1;
  
#line 3136 
  if (tmp_1) {
    
#line 3137 
    __retres = -2;
    
#line 3137 
    goto return_label;
  }
  else ;
  
#line 3139 
  i = (int)eqo->idx;
  
#line 3139 
  rxo = & adapter->rx_obj[i];
  
#line 3139 
  goto ldv_59282;
  ldv_59281: 
#line 3140 
  ;
  
#line 3140 
  work = be_process_rx(rxo,napi,4,1);
  
#line 3141 
  if (work != 0) 
#line 3142 
                 goto ldv_59280; else ;
  
#line 3139 
  i = (int)adapter->num_evt_qs + i;
  
#line 3139 
  rxo += (int)adapter->num_evt_qs;
  ldv_59282: 
#line 3140 
  ;
  
#line 3139 
  if ((int)adapter->num_rx_qs > i) 
#line 3141 
                                   goto ldv_59281; else 
#line 3144 
                                                        goto ldv_59280;
  ldv_59280: 
#line 3145 
  ;
  
#line 3145 
  be_unlock_busy_poll(eqo);
  
#line 3146 
  __retres = work;
  return_label: 
#line 3146 
                return __retres;
}


#line 3150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
void be_detect_error(struct be_adapter *adapter)
{
  u32 i;
  u8 tmp;
  
#line 3152 
  u32 ue_lo = 0U;
  
#line 3152 
  u32 ue_hi = 0U;
  
#line 3152 
  u32 ue_lo_mask = 0U;
  
#line 3152 
  u32 ue_hi_mask = 0U;
  
#line 3153 
  u32 sliport_status = 0U;
  
#line 3153 
  u32 sliport_err1 = 0U;
  
#line 3153 
  u32 sliport_err2 = 0U;
  
#line 3155 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 3157 
  tmp = be_check_error(adapter,3U);
  
#line 3157 
  if ((unsigned int)tmp != 0U) 
#line 3158 
                               goto return_label; else ;
  
#line 3160 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    
#line 3161 
    sliport_status = ioread32((void *)(adapter->db + 1028U));
    
#line 3162 
    if (sliport_status < (u32)0) {
      
#line 3163 
      be_set_error(adapter,2);
      
#line 3164 
      sliport_err1 = ioread32((void *)(adapter->db + 1036U));
      
#line 3166 
      sliport_err2 = ioread32((void *)(adapter->db + 1040U));
      
#line 3169 
      if (sliport_err1 == 2U && sliport_err2 == 0U) 
#line 3171 
                                                    _dev_info((struct device const *)dev,"Firmware update in progress\n");
      else {
        
#line 3173 
        dev_err((struct device const *)dev,"Error detected in the card\n");
        
#line 3174 
        dev_err((struct device const *)dev,"ERR: sliport status 0x%x\n",sliport_status);
        
#line 3176 
        dev_err((struct device const *)dev,"ERR: sliport error1 0x%x\n",sliport_err1);
        
#line 3178 
        dev_err((struct device const *)dev,"ERR: sliport error2 0x%x\n",sliport_err2);
      }
    }
    else ;
  }
  else {
    
#line 3183 
    ue_lo = ioread32((void *)(adapter->pcicfg + 160U));
    
#line 3184 
    ue_hi = ioread32((void *)(adapter->pcicfg + 164U));
    
#line 3185 
    ue_lo_mask = ioread32((void *)(adapter->pcicfg + 168U));
    
#line 3187 
    ue_hi_mask = ioread32((void *)(adapter->pcicfg + 172U));
    
#line 3190 
    ue_lo = ~ ue_lo_mask & ue_lo;
    
#line 3191 
    ue_hi = ~ ue_hi_mask & ue_hi;
    
#line 3198 
    if (ue_lo != 0U || ue_hi != 0U) {
      
#line 3199 
      dev_err((struct device const *)dev,"Unrecoverable Error detected in the adapter");
      
#line 3201 
      dev_err((struct device const *)dev,"Please reboot server to recover");
      
#line 3202 
      if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) 
        
#line 3203 
        be_set_error(adapter,2); else ;
      
#line 3205 
      i = 0U;
      
#line 3205 
      goto ldv_59296;
      ldv_59295: 
#line 3206 
      ;
      
#line 3206 
      if ((ue_lo & 1U) != 0U) 
#line 3207 
                              dev_err((struct device const *)dev,"UE: %s bit set\n",ue_status_low_desc[i]); else ;
      
#line 3205 
      ue_lo >>= 1;
      
#line 3205 
      i += 1U;
      ldv_59296: 
#line 3206 
      ;
      
#line 3205 
      if (ue_lo != 0U) 
#line 3207 
                       goto ldv_59295; else 
#line 3210 
                                            goto ldv_59297;
      ldv_59297: 
#line 3211 
      ;
      
#line 3210 
      i = 0U;
      
#line 3210 
      goto ldv_59299;
      ldv_59298: 
#line 3211 
      ;
      
#line 3211 
      if ((ue_hi & 1U) != 0U) 
#line 3212 
                              dev_err((struct device const *)dev,"UE: %s bit set\n",ue_status_hi_desc[i]); else ;
      
#line 3210 
      ue_hi >>= 1;
      
#line 3210 
      i += 1U;
      ldv_59299: 
#line 3211 
      ;
      
#line 3210 
      if (ue_hi != 0U) 
#line 3212 
                       goto ldv_59298; else 
#line 3215 
                                            goto ldv_59300;
      ldv_59300: 
#line 3216 
      ;
    }
    else ;
  }
  return_label: 
#line 3219 
                return;
}


#line 3219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_msix_disable(struct be_adapter *adapter)
{
  
#line 3221 
  if ((unsigned int)adapter->num_msix_vec != 0U) {
    
#line 3222 
    pci_disable_msix(adapter->pdev);
    
#line 3223 
    adapter->num_msix_vec = (unsigned short)0U;
    
#line 3224 
    adapter->num_msix_roce_vec = 0U;
  }
  else ;
  
#line 3226 
  return;
}


#line 3228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_msix_enable(struct be_adapter *adapter)
{
  int __retres;
  int i;
  int num_vec;
  
#line 3231 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 3237 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) {
    int tmp_1;
    {
      unsigned int tmp;
      int tmp_0;
      
#line 3238 
      int __min1 = (int)adapter->res.max_evt_qs * 2;
      
#line 3238 
      tmp = cpumask_weight(cpu_online_mask);
      
#line 3238 
      int __min2 = (int)(tmp * 2U);
      
#line 3238 
      if (__min1 < __min2) 
#line 3238 
                           tmp_0 = __min1; else 
#line 3238 
                                                tmp_0 = __min2;
      
#line 3238 
      tmp_1 = tmp_0;
    }
    
#line 3238 
    num_vec = tmp_1;
  }
  else 
#line 3241 
       num_vec = (int)adapter->cfg_num_qs;
  
#line 3243 
  i = 0;
  
#line 3243 
  goto ldv_59314;
  ldv_59313: 
#line 3244 
  ;
  
#line 3244 
  adapter->msix_entries[i].entry = (unsigned short)i;
  
#line 3243 
  i += 1;
  ldv_59314: 
#line 3244 
  ;
  
#line 3243 
  if (i < num_vec) 
#line 3245 
                   goto ldv_59313; else 
#line 3248 
                                        goto ldv_59315;
  ldv_59315: 
#line 3249 
  ;
  
#line 3246 
  num_vec = pci_enable_msix_range(adapter->pdev,(struct msix_entry *)(& adapter->msix_entries),1,num_vec);
  
#line 3248 
  if (num_vec < 0) 
#line 3249 
                   goto fail; else ;
  
#line 3251 
  if ((((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) && num_vec > 1) {
    
#line 3252 
    adapter->num_msix_roce_vec = (unsigned int)(num_vec / 2);
    
#line 3253 
    _dev_info((struct device const *)dev,"enabled %d MSI-x vector(s) for RoCE\n",adapter->num_msix_roce_vec);
  }
  else ;
  
#line 3257 
  adapter->num_msix_vec = (unsigned short)((int)((unsigned short)num_vec) - (int)((unsigned short)adapter->num_msix_roce_vec));
  
#line 3259 
  _dev_info((struct device const *)dev,"enabled %d MSI-x vector(s) for NIC\n",(int)adapter->num_msix_vec);
  
#line 3261 
  __retres = 0;
  
#line 3261 
  goto return_label;
  fail: 
#line 3263 
  ;
  
#line 3264 
  dev_warn((struct device const *)dev,"MSIx enable failed\n");
  
#line 3267 
  if ((unsigned int)adapter->virtfn != 0U) {
    
#line 3268 
    __retres = num_vec;
    
#line 3268 
    goto return_label;
  }
  else ;
  
#line 3269 
  __retres = 0;
  return_label: 
#line 3269 
                return __retres;
}


#line 3272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static int be_msix_vec_get(struct be_adapter *adapter, struct be_eq_obj *eqo)
{
  int __retres;
  
#line 3275 
  __retres = (int)adapter->msix_entries[(int)eqo->msix_idx].vector;
  
#line 3275 
  return __retres;
}


#line 3278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_msix_register(struct be_adapter *adapter)
{
  int __retres;
  struct be_eq_obj *eqo;
  int status;
  int i;
  int vec;
  int tmp;
  
#line 3280 
  struct net_device *netdev = adapter->netdev;
  
#line 3284 
  i = 0;
  
#line 3284 
  eqo = & adapter->eq_obj[i];
  
#line 3284 
  goto ldv_59331;
  ldv_59330: 
#line 3285 
  ;
  
#line 3285 
  sprintf((char *)(& eqo->desc),"%s-q%d",(char *)(& netdev->name),i);
  
#line 3286 
  vec = be_msix_vec_get(adapter,eqo);
  
#line 3287 
  status = ldv_request_irq_81((unsigned int)vec,& be_msix,0UL,(char const *)(& eqo->desc),(void *)eqo);
  
#line 3288 
  if (status != 0) 
#line 3289 
                   goto err_msix; else ;
  
#line 3291 
  irq_set_affinity_hint((unsigned int)vec,(struct cpumask const *)eqo->affinity_mask);
  
#line 3284 
  i += 1;
  
#line 3284 
  eqo += 1;
  ldv_59331: 
#line 3285 
  ;
  
#line 3284 
  if ((int)adapter->num_evt_qs > i) 
#line 3286 
                                    goto ldv_59330; else 
#line 3289 
                                                         goto ldv_59332;
  ldv_59332: 
#line 3290 
  ;
  
#line 3294 
  __retres = 0;
  
#line 3294 
  goto return_label;
  err_msix: 
#line 3295 
  ;
  
#line 3296 
  i -= 1;
  
#line 3296 
  eqo = & adapter->eq_obj[i];
  
#line 3296 
  goto ldv_59334;
  ldv_59333: 
#line 3297 
  ;
  
#line 3297 
  ;
  
#line 3297 
  tmp = be_msix_vec_get(adapter,eqo);
  
#line 3297 
  ldv_free_irq_82((unsigned int)tmp,(void *)eqo);
  
#line 3296 
  i -= 1;
  
#line 3296 
  eqo -= 1;
  ldv_59334: 
#line 3297 
  ;
  
#line 3296 
  if (i >= 0) 
#line 3298 
              goto ldv_59333; else 
#line 3301 
                                   goto ldv_59335;
  ldv_59335: 
#line 3302 
  ;
  
#line 3298 
  dev_warn((struct device const *)(& (adapter->pdev)->dev),"MSIX Request IRQ failed - err %d\n",status);
  
#line 3300 
  be_msix_disable(adapter);
  
#line 3301 
  __retres = status;
  return_label: 
#line 3301 
                return __retres;
}


#line 3304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_irq_register(struct be_adapter *adapter)
{
  int __retres;
  int status;
  
#line 3306 
  struct net_device *netdev = adapter->netdev;
  
#line 3309 
  if ((unsigned int)adapter->num_msix_vec != 0U) {
    
#line 3310 
    status = be_msix_register(adapter);
    
#line 3311 
    if (status == 0) 
#line 3312 
                     goto done; else ;
    
#line 3314 
    if ((unsigned int)adapter->virtfn != 0U) {
      
#line 3315 
      __retres = status;
      
#line 3315 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 3319 
  netdev->irq = (int)(adapter->pdev)->irq;
  
#line 3320 
  status = ldv_request_irq_83((unsigned int)netdev->irq,& be_intx,128UL,(char const *)(& netdev->name),(void *)(& adapter->eq_obj[0]));
  
#line 3322 
  if (status != 0) {
    
#line 3323 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"INTx request IRQ failed - err %d\n",status);
    
#line 3325 
    __retres = status;
    
#line 3325 
    goto return_label;
  }
  else ;
  done: 
#line 3327 
  ;
  
#line 3328 
  adapter->isr_registered = (_Bool)1;
  
#line 3329 
  __retres = 0;
  return_label: 
#line 3329 
                return __retres;
}


#line 3332  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_irq_unregister(struct be_adapter *adapter)
{
  struct be_eq_obj *eqo;
  int i;
  int vec;
  
#line 3334 
  struct net_device *netdev = adapter->netdev;
  
#line 3338 
  if (! adapter->isr_registered) 
#line 3339 
                                 goto return_label; else ;
  
#line 3342 
  if ((unsigned int)adapter->num_msix_vec == 0U) {
    
#line 3343 
    ldv_free_irq_84((unsigned int)netdev->irq,(void *)(& adapter->eq_obj[0]));
    
#line 3344 
    goto done;
  }
  else ;
  
#line 3348 
  i = 0;
  
#line 3348 
  eqo = & adapter->eq_obj[i];
  
#line 3348 
  goto ldv_59351;
  ldv_59350: 
#line 3349 
  ;
  
#line 3349 
  vec = be_msix_vec_get(adapter,eqo);
  
#line 3350 
  irq_set_affinity_hint((unsigned int)vec,(struct cpumask const *)0);
  
#line 3351 
  ldv_free_irq_85((unsigned int)vec,(void *)eqo);
  
#line 3348 
  i += 1;
  
#line 3348 
  eqo += 1;
  ldv_59351: 
#line 3349 
  ;
  
#line 3348 
  if ((int)adapter->num_evt_qs > i) 
#line 3350 
                                    goto ldv_59350; else 
#line 3353 
                                                         goto ldv_59352;
  ldv_59352: 
#line 3354 
  ;
  done: 
#line 3354 
  ;
  
#line 3355 
  adapter->isr_registered = (_Bool)0;
  return_label: 
#line 3356 
                return;
}


#line 3358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_rx_qs_destroy(struct be_adapter *adapter)
{
  struct be_queue_info *q;
  struct be_rx_obj *rxo;
  int i;
  
#line 3364 
  i = 0;
  
#line 3364 
  rxo = & adapter->rx_obj[i];
  
#line 3364 
  goto ldv_59360;
  ldv_59359: 
#line 3365 
  ;
  
#line 3365 
  q = & rxo->q;
  
#line 3366 
  if ((int)q->created != 0) {
    
#line 3373 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
      int tmp;
      
#line 3374 
      be_rx_cq_clean(rxo);
      
#line 3375 
      tmp = atomic_read((atomic_t const *)(& q->used));
      
#line 3375 
      if (tmp == 0) 
#line 3376 
                    be_post_rx_frags(rxo,208U,64U); else ;
    }
    else ;
    
#line 3380 
    be_cmd_rxq_destroy(adapter,q);
    
#line 3381 
    be_rx_cq_clean(rxo);
    
#line 3382 
    be_rxq_clean(rxo);
  }
  else ;
  
#line 3384 
  be_queue_free(adapter,q);
  
#line 3364 
  i += 1;
  
#line 3364 
  rxo += 1;
  ldv_59360: 
#line 3365 
  ;
  
#line 3364 
  if ((int)adapter->num_rx_qs > i) 
#line 3366 
                                   goto ldv_59359; else 
#line 3369 
                                                        goto ldv_59361;
  ldv_59361: 
#line 3370 
  ;
  
#line 3371 
  return;
}


#line 3388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_disable_if_filters(struct be_adapter *adapter)
{
  
#line 3390 
  be_cmd_pmac_del(adapter,(unsigned int)adapter->if_handle,(int)*(adapter->pmac_id),0U);
  
#line 3393 
  be_clear_uc_list(adapter);
  
#line 3409 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) {
    
#line 3410 
    be_cmd_rx_filter(adapter,6840U,0U);
    
#line 3411 
    adapter->if_flags &= 4294960455U;
  }
  else ;
  
#line 3413 
  return;
}


#line 3415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_close(struct net_device *netdev)
{
  int __retres;
  struct be_eq_obj *eqo;
  int i;
  
#line 3417 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3424 
  if (((unsigned long)adapter->flags & 512UL) == 0UL) {
    
#line 3425 
    __retres = 0;
    
#line 3425 
    goto return_label;
  }
  else ;
  
#line 3427 
  be_disable_if_filters(adapter);
  
#line 3429 
  be_roce_dev_close(adapter);
  
#line 3431 
  if (((unsigned long)adapter->flags & 64UL) != 0UL) {
    
#line 3432 
    i = 0;
    
#line 3432 
    eqo = & adapter->eq_obj[i];
    
#line 3432 
    goto ldv_59372;
    ldv_59371: 
#line 3433 
    ;
    
#line 3433 
    napi_disable(& eqo->napi);
    
#line 3434 
    be_disable_busy_poll(eqo);
    
#line 3432 
    i += 1;
    
#line 3432 
    eqo += 1;
    ldv_59372: 
#line 3433 
    ;
    
#line 3432 
    if ((int)adapter->num_evt_qs > i) 
#line 3434 
                                      goto ldv_59371; else 
#line 3437 
                                                           goto ldv_59373;
    ldv_59373: 
#line 3438 
    ;
    
#line 3436 
    adapter->flags &= 4294967231U;
  }
  else ;
  
#line 3439 
  be_async_mcc_disable(adapter);
  
#line 3444 
  netif_tx_disable(netdev);
  
#line 3445 
  be_tx_compl_clean(adapter);
  
#line 3447 
  be_rx_qs_destroy(adapter);
  
#line 3449 
  i = 0;
  
#line 3449 
  eqo = & adapter->eq_obj[i];
  
#line 3449 
  goto ldv_59375;
  ldv_59374: 
#line 3450 
  ;
  
#line 3450 
  if ((unsigned int)adapter->num_msix_vec != 0U) {
    int tmp_0;
    
#line 3451 
    tmp_0 = be_msix_vec_get(adapter,eqo);
    
#line 3451 
    synchronize_irq((unsigned int)tmp_0);
  }
  else 
#line 3453 
       synchronize_irq((unsigned int)netdev->irq);
  
#line 3454 
  be_eq_clean(eqo);
  
#line 3449 
  i += 1;
  
#line 3449 
  eqo += 1;
  ldv_59375: 
#line 3450 
  ;
  
#line 3449 
  if ((int)adapter->num_evt_qs > i) 
#line 3451 
                                    goto ldv_59374; else 
#line 3454 
                                                         goto ldv_59376;
  ldv_59376: 
#line 3455 
  ;
  
#line 3457 
  be_irq_unregister(adapter);
  
#line 3459 
  __retres = 0;
  return_label: 
#line 3459 
                return __retres;
}


#line 3462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_rx_qs_create(struct be_adapter *adapter)
{
  int __retres;
  u8 rss_key[40U];
  struct be_rx_obj *rxo;
  int rc;
  int i;
  int j;
  bool tmp;
  
#line 3464 
  struct rss_info *rss = & adapter->rss_info;
  
#line 3469 
  i = 0;
  
#line 3469 
  rxo = & adapter->rx_obj[i];
  
#line 3469 
  goto ldv_59387;
  ldv_59386: 
#line 3470 
  ;
  
#line 3470 
  rc = be_queue_alloc(adapter,& rxo->q,(unsigned short)1024,(unsigned short)8);
  
#line 3472 
  if (rc != 0) {
    
#line 3473 
    __retres = rc;
    
#line 3473 
    goto return_label;
  }
  else ;
  
#line 3469 
  i += 1;
  
#line 3469 
  rxo += 1;
  ldv_59387: 
#line 3470 
  ;
  
#line 3469 
  if ((int)adapter->num_rx_qs > i) 
#line 3471 
                                   goto ldv_59386; else 
#line 3474 
                                                        goto ldv_59388;
  ldv_59388: 
#line 3475 
  ;
  
#line 3476 
  if ((unsigned int)adapter->need_def_rxq != 0U || (unsigned int)adapter->num_rss_qs == 0U) {
    
#line 3477 
    rxo = & adapter->rx_obj[(int)adapter->num_rx_qs + -1];
    
#line 3478 
    rc = be_cmd_rxq_create(adapter,& rxo->q,(unsigned short)((int)rxo->cq.id),(unsigned short)((int)rx_frag_size),(unsigned int)adapter->if_handle,0U,& rxo->rss_id);
    
#line 3481 
    if (rc != 0) {
      
#line 3482 
      __retres = rc;
      
#line 3482 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 3485 
  i = 0;
  
#line 3485 
  rxo = & adapter->rx_obj[i];
  
#line 3485 
  goto ldv_59390;
  ldv_59389: 
#line 3486 
  ;
  
#line 3486 
  rc = be_cmd_rxq_create(adapter,& rxo->q,(unsigned short)((int)rxo->cq.id),(unsigned short)((int)rx_frag_size),(unsigned int)adapter->if_handle,1U,& rxo->rss_id);
  
#line 3489 
  if (rc != 0) {
    
#line 3490 
    __retres = rc;
    
#line 3490 
    goto return_label;
  }
  else ;
  
#line 3485 
  i += 1;
  
#line 3485 
  rxo += 1;
  ldv_59390: 
#line 3486 
  ;
  
#line 3485 
  if ((int)adapter->num_rss_qs > i) 
#line 3487 
                                    goto ldv_59389; else 
#line 3490 
                                                         goto ldv_59391;
  ldv_59391: 
#line 3491 
  ;
  
#line 3493 
  tmp = be_multi_rxq((struct be_adapter const *)adapter);
  
#line 3493 
  if ((int)tmp != 0) {
    
#line 3494 
    j = 0;
    
#line 3494 
    goto ldv_59396;
    ldv_59395: 
#line 3495 
    ;
    
#line 3495 
    i = 0;
    
#line 3495 
    rxo = & adapter->rx_obj[i];
    
#line 3495 
    goto ldv_59394;
    ldv_59393: 
#line 3496 
    ;
    
#line 3496 
    if (j + i > 127) 
#line 3497 
                     goto ldv_59392; else ;
    
#line 3498 
    rss->rsstable[j + i] = rxo->rss_id;
    
#line 3499 
    rss->rss_queue[j + i] = (unsigned char)i;
    
#line 3495 
    i += 1;
    
#line 3495 
    rxo += 1;
    ldv_59394: 
#line 3496 
    ;
    
#line 3495 
    if ((int)adapter->num_rss_qs > i) 
#line 3497 
                                      goto ldv_59393; else 
#line 3500 
                                                           goto ldv_59392;
    ldv_59392: 
#line 3501 
    ;
    
#line 3494 
    j = (int)adapter->num_rss_qs + j;
    ldv_59396: 
#line 3495 
    ;
    
#line 3494 
    if (j <= 127) 
#line 3496 
                  goto ldv_59395; else 
#line 3499 
                                       goto ldv_59397;
    ldv_59397: 
#line 3500 
    ;
    
#line 3502 
    rss->rss_flags = 15ULL;
    
#line 3505 
    if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) 
      
#line 3506 
      rss->rss_flags |= 48ULL; else ;
  }
  else 
#line 3510 
       rss->rss_flags = 0ULL;
  
#line 3513 
  netdev_rss_key_fill((void *)(& rss_key),40UL);
  
#line 3514 
  rc = be_cmd_rss_config(adapter,(u8 *)(& rss->rsstable),(unsigned int)rss->rss_flags,(unsigned short)128,(u8 const *)(& rss_key));
  
#line 3516 
  if (rc != 0) {
    
#line 3517 
    rss->rss_flags = 0ULL;
    
#line 3518 
    __retres = rc;
    
#line 3518 
    goto return_label;
  }
  else ;
  
#line 3521 
  memcpy((void *)(& rss->rss_hkey),(void const *)(& rss_key),40UL);
  
#line 3526 
  i = 0;
  
#line 3526 
  rxo = & adapter->rx_obj[i];
  
#line 3526 
  goto ldv_59399;
  ldv_59398: 
#line 3527 
  ;
  
#line 3527 
  be_post_rx_frags(rxo,208U,1023U);
  
#line 3526 
  i += 1;
  
#line 3526 
  rxo += 1;
  ldv_59399: 
#line 3527 
  ;
  
#line 3526 
  if ((int)adapter->num_rx_qs > i) 
#line 3528 
                                   goto ldv_59398; else 
#line 3531 
                                                        goto ldv_59400;
  ldv_59400: 
#line 3532 
  ;
  
#line 3529 
  __retres = 0;
  return_label: 
#line 3529 
                return __retres;
}


#line 3532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_enable_if_filters(struct be_adapter *adapter)
{
  int __retres;
  int status;
  
#line 3536 
  status = be_cmd_rx_filter(adapter,6192U,1U);
  
#line 3537 
  if (status != 0) {
    
#line 3538 
    __retres = status;
    
#line 3538 
    goto return_label;
  }
  else ;
  
#line 3541 
  if ((((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) || (unsigned int)adapter->virtfn == 0U) {
    
#line 3542 
    status = be_cmd_pmac_add(adapter,(adapter->netdev)->dev_addr,(unsigned int)adapter->if_handle,adapter->pmac_id,0U);
    
#line 3545 
    if (status != 0) {
      
#line 3546 
      __retres = status;
      
#line 3546 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 3549 
  if ((unsigned int)adapter->vlans_added != 0U) 
#line 3550 
                                                be_vid_config(adapter); else ;
  
#line 3552 
  be_set_rx_mode(adapter->netdev);
  
#line 3554 
  __retres = 0;
  return_label: 
#line 3554 
                return __retres;
}


#line 3557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_open(struct net_device *netdev)
{
  int __retres;
  struct be_eq_obj *eqo;
  struct be_rx_obj *rxo;
  struct be_tx_obj *txo;
  u8 link_status;
  int status;
  int i;
  
#line 3559 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3566 
  status = be_rx_qs_create(adapter);
  
#line 3567 
  if (status != 0) 
#line 3568 
                   goto err; else ;
  
#line 3570 
  status = be_enable_if_filters(adapter);
  
#line 3571 
  if (status != 0) 
#line 3572 
                   goto err; else ;
  
#line 3574 
  status = be_irq_register(adapter);
  
#line 3575 
  if (status != 0) 
#line 3576 
                   goto err; else ;
  
#line 3578 
  i = 0;
  
#line 3578 
  rxo = & adapter->rx_obj[i];
  
#line 3578 
  goto ldv_59417;
  ldv_59416: 
#line 3579 
  ;
  
#line 3579 
  be_cq_notify(adapter,(unsigned short)((int)rxo->cq.id),(_Bool)1,(unsigned short)0);
  
#line 3578 
  i += 1;
  
#line 3578 
  rxo += 1;
  ldv_59417: 
#line 3579 
  ;
  
#line 3578 
  if ((int)adapter->num_rx_qs > i) 
#line 3580 
                                   goto ldv_59416; else 
#line 3583 
                                                        goto ldv_59418;
  ldv_59418: 
#line 3584 
  ;
  
#line 3581 
  i = 0;
  
#line 3581 
  txo = & adapter->tx_obj[i];
  
#line 3581 
  goto ldv_59420;
  ldv_59419: 
#line 3582 
  ;
  
#line 3582 
  be_cq_notify(adapter,(unsigned short)((int)txo->cq.id),(_Bool)1,(unsigned short)0);
  
#line 3581 
  i += 1;
  
#line 3581 
  txo += 1;
  ldv_59420: 
#line 3582 
  ;
  
#line 3581 
  if ((int)adapter->num_tx_qs > i) 
#line 3583 
                                   goto ldv_59419; else 
#line 3586 
                                                        goto ldv_59421;
  ldv_59421: 
#line 3587 
  ;
  
#line 3584 
  be_async_mcc_enable(adapter);
  
#line 3586 
  i = 0;
  
#line 3586 
  eqo = & adapter->eq_obj[i];
  
#line 3586 
  goto ldv_59423;
  ldv_59422: 
#line 3587 
  ;
  
#line 3587 
  napi_enable(& eqo->napi);
  
#line 3588 
  be_enable_busy_poll(eqo);
  
#line 3589 
  be_eq_notify(adapter,(unsigned short)((int)eqo->q.id),(_Bool)1,(_Bool)1,(unsigned short)0,0U);
  
#line 3586 
  i += 1;
  
#line 3586 
  eqo += 1;
  ldv_59423: 
#line 3587 
  ;
  
#line 3586 
  if ((int)adapter->num_evt_qs > i) 
#line 3588 
                                    goto ldv_59422; else 
#line 3591 
                                                         goto ldv_59424;
  ldv_59424: 
#line 3592 
  ;
  
#line 3591 
  adapter->flags |= 64U;
  
#line 3593 
  status = be_cmd_link_status_query(adapter,(u16 *)0U,& link_status,0U);
  
#line 3594 
  if (status == 0) 
#line 3595 
                   be_link_status_update(adapter,(unsigned char)((int)link_status)); else ;
  
#line 3597 
  netif_tx_start_all_queues(netdev);
  
#line 3598 
  be_roce_dev_open(adapter);
  
#line 3601 
  if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) 
    
#line 3602 
    vxlan_get_rx_port(netdev); else ;
  
#line 3605 
  __retres = 0;
  
#line 3605 
  goto return_label;
  err: 
#line 3606 
  ;
  
#line 3607 
  be_close(adapter->netdev);
  
#line 3608 
  __retres = -5;
  return_label: 
#line 3608 
                return __retres;
}


#line 3611  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_setup_wol(struct be_adapter *adapter, bool enable)
{
  int __retres;
  struct be_dma_mem cmd;
  u8 mac[6U];
  
#line 3614 
  int status = 0;
  
#line 3617 
  eth_zero_addr((u8 *)(& mac));
  
#line 3619 
  cmd.size = 604U;
  
#line 3620 
  cmd.va = dma_zalloc_coherent(& (adapter->pdev)->dev,(unsigned long)cmd.size,& cmd.dma,208U);
  
#line 3622 
  if (cmd.va == (void *)0) {
    
#line 3623 
    __retres = -12;
    
#line 3623 
    goto return_label;
  }
  else ;
  
#line 3625 
  if ((int)enable != 0) {
    
#line 3626 
    status = pci_write_config_dword((struct pci_dev const *)adapter->pdev,68,264U);
    
#line 3629 
    if (status != 0) {
      
#line 3630 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Could not enable Wake-on-lan\n");
      
#line 3632 
      dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma,(struct dma_attrs *)0);
      
#line 3634 
      __retres = status;
      
#line 3634 
      goto return_label;
    }
    else ;
    
#line 3636 
    status = be_cmd_enable_magic_wol(adapter,(adapter->netdev)->dev_addr,& cmd);
    
#line 3639 
    pci_enable_wake(adapter->pdev,3,(_Bool)1);
    
#line 3640 
    pci_enable_wake(adapter->pdev,4,(_Bool)1);
  }
  else {
    
#line 3642 
    status = be_cmd_enable_magic_wol(adapter,(u8 *)(& mac),& cmd);
    
#line 3643 
    pci_enable_wake(adapter->pdev,3,(_Bool)0);
    
#line 3644 
    pci_enable_wake(adapter->pdev,4,(_Bool)0);
  }
  
#line 3647 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)cmd.size,cmd.va,cmd.dma,(struct dma_attrs *)0);
  
#line 3648 
  __retres = status;
  return_label: 
#line 3648 
                return __retres;
}


#line 3651  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_vf_eth_addr_generate(struct be_adapter *adapter, u8 *mac)
{
  u32 addr;
  
#line 3655 
  addr = jhash((void const *)(adapter->netdev)->dev_addr,6U,0U);
  
#line 3657 
  *(mac + 5U) = (unsigned char)addr;
  
#line 3658 
  *(mac + 4U) = (unsigned char)(addr >> 8);
  
#line 3659 
  *(mac + 3U) = (unsigned char)(addr >> 16);
  
#line 3661 
  memcpy((void *)mac,(void const *)(adapter->netdev)->dev_addr,3UL);
  
#line 3662 
  return;
}


#line 3670  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vf_eth_addr_config(struct be_adapter *adapter)
{
  u32 vf;
  u8 mac[6U];
  struct be_vf_cfg *vf_cfg;
  
#line 3673 
  int status = 0;
  
#line 3677 
  be_vf_eth_addr_generate(adapter,(u8 *)(& mac));
  
#line 3679 
  vf = 0U;
  
#line 3679 
  vf_cfg = adapter->vf_cfg + vf;
  
#line 3679 
  goto ldv_59445;
  ldv_59444: 
#line 3680 
  ;
  
#line 3680 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
    
#line 3681 
    status = be_cmd_pmac_add(adapter,(u8 *)(& mac),(unsigned int)vf_cfg->if_handle,(u32 *)(& vf_cfg->pmac_id),vf + 1U); else 
                                                                    
#line 3685 
                                                                    status = be_cmd_set_mac(adapter,(u8 *)(& mac),vf_cfg->if_handle,vf + 1U);
  
#line 3688 
  if (status != 0) 
#line 3689 
                   dev_err((struct device const *)(& (adapter->pdev)->dev),"Mac address assignment failed for VF %d\n",vf); else 
                                                                    
#line 3693 
                                                                    memcpy((void *)(& vf_cfg->mac_addr),(void const *)(& mac),6UL);
  
#line 3695 
  mac[5] = (unsigned char)((unsigned int)mac[5] + 1U);
  
#line 3679 
  vf += 1U;
  
#line 3679 
  vf_cfg += 1;
  ldv_59445: 
#line 3680 
  ;
  
#line 3679 
  if ((unsigned int)adapter->num_vfs > vf) 
#line 3681 
                                           goto ldv_59444; else 
#line 3684 
                                                                goto ldv_59446;
  ldv_59446: 
#line 3685 
  ;
  
#line 3697 
  return status;
}


#line 3700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vfs_mac_query(struct be_adapter *adapter)
{
  int __retres;
  int status;
  int vf;
  u8 mac[6U];
  struct be_vf_cfg *vf_cfg;
  
#line 3706 
  vf = 0;
  
#line 3706 
  vf_cfg = adapter->vf_cfg + vf;
  
#line 3706 
  goto ldv_59455;
  ldv_59454: 
#line 3707 
  ;
  
#line 3707 
  status = be_cmd_get_active_mac(adapter,(unsigned int)vf_cfg->pmac_id,(u8 *)(& mac),(unsigned int)vf_cfg->if_handle,(_Bool)0,(unsigned int)(vf + 1));
  
#line 3710 
  if (status != 0) {
    
#line 3711 
    __retres = status;
    
#line 3711 
    goto return_label;
  }
  else ;
  
#line 3712 
  memcpy((void *)(& vf_cfg->mac_addr),(void const *)(& mac),6UL);
  
#line 3706 
  vf += 1;
  
#line 3706 
  vf_cfg += 1;
  ldv_59455: 
#line 3707 
  ;
  
#line 3706 
  if ((int)adapter->num_vfs > vf) 
#line 3708 
                                  goto ldv_59454; else 
#line 3711 
                                                       goto ldv_59456;
  ldv_59456: 
#line 3712 
  ;
  
#line 3714 
  __retres = 0;
  return_label: 
#line 3714 
                return __retres;
}


#line 3717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_vf_clear(struct be_adapter *adapter)
{
  struct be_vf_cfg *vf_cfg;
  u32 vf;
  int tmp;
  
#line 3722 
  tmp = pci_vfs_assigned(adapter->pdev);
  
#line 3722 
  if (tmp != 0) {
    
#line 3723 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"VFs are assigned to VMs: not disabling VFs\n");
    
#line 3725 
    goto done;
  }
  else ;
  
#line 3728 
  pci_disable_sriov(adapter->pdev);
  
#line 3730 
  vf = 0U;
  
#line 3730 
  vf_cfg = adapter->vf_cfg + vf;
  
#line 3730 
  goto ldv_59464;
  ldv_59463: 
#line 3731 
  ;
  
#line 3731 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) 
    
#line 3732 
    be_cmd_pmac_del(adapter,(unsigned int)vf_cfg->if_handle,vf_cfg->pmac_id,vf + 1U); else 
                                                                    
#line 3735 
                                                                    be_cmd_set_mac(adapter,(u8 *)0U,vf_cfg->if_handle,vf + 1U);
  
#line 3738 
  be_cmd_if_destroy(adapter,vf_cfg->if_handle,vf + 1U);
  
#line 3730 
  vf += 1U;
  
#line 3730 
  vf_cfg += 1;
  ldv_59464: 
#line 3731 
  ;
  
#line 3730 
  if ((unsigned int)adapter->num_vfs > vf) 
#line 3732 
                                           goto ldv_59463; else 
#line 3735 
                                                                goto ldv_59465;
  ldv_59465: 
#line 3736 
  ;
  done: 
#line 3740 
  ;
  
#line 3741 
  kfree((void const *)adapter->vf_cfg);
  
#line 3742 
  adapter->num_vfs = (unsigned short)0U;
  
#line 3743 
  adapter->flags &= 4294967291U;
  
#line 3744 
  return;
}


#line 3746  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_clear_queues(struct be_adapter *adapter)
{
  
#line 3748 
  be_mcc_queues_destroy(adapter);
  
#line 3749 
  be_rx_cqs_destroy(adapter);
  
#line 3750 
  be_tx_queues_destroy(adapter);
  
#line 3751 
  be_evt_queues_destroy(adapter);
  
#line 3752 
  return;
}


#line 3754  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_cancel_worker(struct be_adapter *adapter)
{
  
#line 3756 
  if (((unsigned long)adapter->flags & 8UL) != 0UL) {
    
#line 3757 
    cancel_delayed_work_sync(& adapter->work);
    
#line 3758 
    adapter->flags &= 4294967287U;
  }
  else ;
  
#line 3760 
  return;
}


#line 3762  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_cancel_err_detection(struct be_adapter *adapter)
{
  
#line 3764 
  if (((unsigned long)adapter->flags & 2048UL) != 0UL) {
    
#line 3765 
    cancel_delayed_work_sync(& adapter->be_err_detection_work);
    
#line 3766 
    adapter->flags &= 4294965247U;
  }
  else ;
  
#line 3768 
  return;
}


#line 3771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_disable_vxlan_offloads(struct be_adapter *adapter)
{
  
#line 3773 
  struct net_device *netdev = adapter->netdev;
  
#line 3775 
  if (((unsigned long)adapter->flags & 256UL) != 0UL) 
#line 3776 
                                                      be_cmd_manage_iface(adapter,(unsigned int)adapter->if_handle,(unsigned char)1); else ;
  
#line 3779 
  if ((unsigned int)adapter->vxlan_port != 0U) 
#line 3780 
                                               be_cmd_set_vxlan_port(adapter,(unsigned short)0); else ;
  
#line 3782 
  adapter->flags &= 4294967039U;
  
#line 3783 
  adapter->vxlan_port = (unsigned short)0U;
  
#line 3785 
  netdev->hw_enc_features = 0ULL;
  
#line 3786 
  netdev->hw_features &= 18446744073642442751ULL;
  
#line 3787 
  netdev->features &= 18446744073642442751ULL;
  
#line 3788 
  return;
}


#line 3791  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u16 be_calculate_vf_qs(struct be_adapter *adapter, u16 num_vfs_0)
{
  
#line 3793 
  struct be_resources res = adapter->pool_res;
  
#line 3794 
  u16 num_vf_qs = (unsigned short)1U;
  
#line 3799 
  if ((unsigned int)num_vfs_0 != 0U) {
    int tmp_0;
    bool tmp;
    
#line 3799 
    tmp = be_is_mc(adapter);
    
#line 3799 
    if (tmp) 
#line 3799 
             tmp_0 = 0; else 
#line 3799 
                             tmp_0 = 1;
    
#line 3799 
    if (tmp_0) {
      
#line 3804 
      if ((int)num_vfs_0 < (int)adapter->pool_res.max_vfs + -8) 
#line 3805 
                                                                num_vf_qs = (unsigned short)(((int)res.max_rss_qs + -8) / (int)num_vfs_0); else 
                                                                    
#line 3807 
                                                                    num_vf_qs = (unsigned short)((int)res.max_rss_qs / (int)num_vfs_0);
      
#line 3813 
      if ((unsigned int)num_vfs_0 > 14U) 
#line 3814 
                                         num_vf_qs = (unsigned short)1U; else ;
    }
    else ;
  }
  else ;
  
#line 3816 
  return num_vf_qs;
}


#line 3819  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_clear(struct be_adapter *adapter)
{
  int __retres;
  u16 num_vf_qs;
  
#line 3821 
  struct pci_dev *pdev = adapter->pdev;
  
#line 3824 
  be_cancel_worker(adapter);
  
#line 3826 
  if (((unsigned long)adapter->flags & 4UL) != 0UL) 
#line 3827 
                                                    be_vf_clear(adapter); else ;
  
#line 3832 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (unsigned int)adapter->virtfn == 0U) {
    int tmp_1;
    
#line 3832 
    tmp_1 = pci_vfs_assigned(pdev);
    
#line 3832 
    if (tmp_1 == 0) {
      int tmp;
      int tmp_0;
      
#line 3834 
      tmp = pci_sriov_get_totalvfs(pdev);
      
#line 3834 
      ;
      
#line 3834 
      num_vf_qs = be_calculate_vf_qs(adapter,(unsigned short)((int)((unsigned short)tmp)));
      
#line 3836 
      ;
      
#line 3836 
      tmp_0 = pci_sriov_get_totalvfs(pdev);
      
#line 3836 
      ;
      
#line 3836 
      ;
      
#line 3836 
      be_cmd_set_sriov_config(adapter,adapter->pool_res,(unsigned short)((int)((unsigned short)tmp_0)),(unsigned short)((int)num_vf_qs));
    }
    else ;
  }
  else ;
  
#line 3842 
  be_disable_vxlan_offloads(adapter);
  
#line 3844 
  kfree((void const *)adapter->pmac_id);
  
#line 3845 
  adapter->pmac_id = (u32 *)0U;
  
#line 3847 
  be_cmd_if_destroy(adapter,adapter->if_handle,0U);
  
#line 3849 
  be_clear_queues(adapter);
  
#line 3851 
  be_msix_disable(adapter);
  
#line 3852 
  adapter->flags &= 4294966783U;
  
#line 3853 
  __retres = 0;
  
#line 3853 
  return __retres;
}


#line 3856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vfs_if_create(struct be_adapter *adapter)
{
  int __retres;
  u32 cap_flags;
  u32 en_flags;
  u32 vf;
  struct be_vf_cfg *vf_cfg;
  int status;
  
#line 3858 
  struct be_resources res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U};
  
#line 3864 
  cap_flags = 6192U;
  
#line 3867 
  vf = 0U;
  
#line 3867 
  vf_cfg = adapter->vf_cfg + vf;
  
#line 3867 
  goto ldv_59500;
  ldv_59499: 
#line 3868 
  ;
  
#line 3868 
  if ((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) {
    
#line 3869 
    status = be_cmd_get_profile_config(adapter,& res,(unsigned char)0,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
    
#line 3872 
    if (status == 0) {
      
#line 3873 
      cap_flags = res.if_cap_flags;
      
#line 3877 
      cap_flags &= 4294967167U;
    }
    else ;
  }
  else ;
  
#line 3881 
  en_flags = cap_flags & 6192U;
  
#line 3885 
  status = be_cmd_if_create(adapter,cap_flags,en_flags,(u32 *)(& vf_cfg->if_handle),vf + 1U);
  
#line 3887 
  if (status != 0) {
    
#line 3888 
    __retres = status;
    
#line 3888 
    goto return_label;
  }
  else ;
  
#line 3867 
  vf += 1U;
  
#line 3867 
  vf_cfg += 1;
  ldv_59500: 
#line 3868 
  ;
  
#line 3867 
  if ((unsigned int)adapter->num_vfs > vf) 
#line 3869 
                                           goto ldv_59499; else 
#line 3872 
                                                                goto ldv_59501;
  ldv_59501: 
#line 3873 
  ;
  
#line 3891 
  __retres = 0;
  return_label: 
#line 3891 
                return __retres;
}


#line 3894  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vf_setup_init(struct be_adapter *adapter)
{
  int __retres;
  struct be_vf_cfg *vf_cfg;
  int vf;
  
#line 3899 
  adapter->vf_cfg = (struct be_vf_cfg *)kcalloc((unsigned long)adapter->num_vfs,36UL,208U);
  
#line 3901 
  if (adapter->vf_cfg == (struct be_vf_cfg *)0) {
    
#line 3902 
    __retres = -12;
    
#line 3902 
    goto return_label;
  }
  else ;
  
#line 3904 
  vf = 0;
  
#line 3904 
  vf_cfg = adapter->vf_cfg + vf;
  
#line 3904 
  goto ldv_59508;
  ldv_59507: 
#line 3905 
  ;
  
#line 3905 
  vf_cfg->if_handle = -1;
  
#line 3906 
  vf_cfg->pmac_id = -1;
  
#line 3904 
  vf += 1;
  
#line 3904 
  vf_cfg += 1;
  ldv_59508: 
#line 3905 
  ;
  
#line 3904 
  if ((int)adapter->num_vfs > vf) 
#line 3906 
                                  goto ldv_59507; else 
#line 3909 
                                                       goto ldv_59509;
  ldv_59509: 
#line 3910 
  ;
  
#line 3908 
  __retres = 0;
  return_label: 
#line 3908 
                return __retres;
}


#line 3911  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_vf_setup(struct be_adapter *adapter)
{
  int __retres;
  struct be_vf_cfg *vf_cfg;
  int status;
  int old_vfs;
  int vf;
  bool spoofchk;
  
#line 3913 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 3918 
  old_vfs = pci_num_vf(adapter->pdev);
  
#line 3920 
  status = be_vf_setup_init(adapter);
  
#line 3921 
  if (status != 0) 
#line 3922 
                   goto err; else ;
  
#line 3924 
  if (old_vfs != 0) {
    
#line 3925 
    vf = 0;
    
#line 3925 
    vf_cfg = adapter->vf_cfg + vf;
    
#line 3925 
    goto ldv_59521;
    ldv_59520: 
#line 3926 
    ;
    
#line 3926 
    status = be_cmd_get_if_id(adapter,vf_cfg,vf);
    
#line 3927 
    if (status != 0) 
#line 3928 
                     goto err; else ;
    
#line 3925 
    vf += 1;
    
#line 3925 
    vf_cfg += 1;
    ldv_59521: 
#line 3926 
    ;
    
#line 3925 
    if ((int)adapter->num_vfs > vf) 
#line 3927 
                                    goto ldv_59520; else 
#line 3930 
                                                         goto ldv_59522;
    ldv_59522: 
#line 3931 
    ;
    
#line 3931 
    status = be_vfs_mac_query(adapter);
    
#line 3932 
    if (status != 0) 
#line 3933 
                     goto err; else ;
  }
  else {
    
#line 3935 
    status = be_vfs_if_create(adapter);
    
#line 3936 
    if (status != 0) 
#line 3937 
                     goto err; else ;
    
#line 3939 
    status = be_vf_eth_addr_config(adapter);
    
#line 3940 
    if (status != 0) 
#line 3941 
                     goto err; else ;
  }
  
#line 3944 
  vf = 0;
  
#line 3944 
  vf_cfg = adapter->vf_cfg + vf;
  
#line 3944 
  goto ldv_59524;
  ldv_59523: 
#line 3945 
  ;
  
#line 3946 
  status = be_cmd_get_fn_privileges(adapter,& vf_cfg->privileges,(unsigned int)(vf + 1));
  
#line 3948 
  if (status == 0 && (vf_cfg->privileges & 64U) == 0U) {
    
#line 3949 
    status = be_cmd_set_fn_privileges(adapter,vf_cfg->privileges | 64U,(unsigned int)(vf + 1));
    
#line 3953 
    if (status == 0) {
      
#line 3954 
      vf_cfg->privileges |= 64U;
      
#line 3955 
      _dev_info((struct device const *)dev,"VF%d has FILTMGMT privilege\n",vf);
    }
    else ;
  }
  else ;
  
#line 3961 
  if (old_vfs == 0) 
#line 3962 
                    be_cmd_config_qos(adapter,0U,(unsigned short)0,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U))); else ;
  
#line 3964 
  status = be_cmd_get_hsw_config(adapter,(u16 *)0U,(unsigned int)(vf + 1),(unsigned short)((int)((unsigned short)vf_cfg->if_handle)),(u8 *)0U,& spoofchk);
  
#line 3967 
  if (status == 0) 
#line 3968 
                   vf_cfg->spoofchk = spoofchk; else ;
  
#line 3970 
  if (old_vfs == 0) {
    
#line 3971 
    be_cmd_enable_vf(adapter,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
    
#line 3972 
    be_cmd_set_logical_link_config(adapter,0,(unsigned char)((int)((unsigned int)((unsigned char)vf) + 1U)));
  }
  else ;
  
#line 3944 
  vf += 1;
  
#line 3944 
  vf_cfg += 1;
  ldv_59524: 
#line 3945 
  ;
  
#line 3944 
  if ((int)adapter->num_vfs > vf) 
#line 3946 
                                  goto ldv_59523; else 
#line 3949 
                                                       goto ldv_59525;
  ldv_59525: 
#line 3950 
  ;
  
#line 3978 
  if (old_vfs == 0) {
    
#line 3979 
    status = pci_enable_sriov(adapter->pdev,(int)adapter->num_vfs);
    
#line 3980 
    if (status != 0) {
      
#line 3981 
      dev_err((struct device const *)dev,"SRIOV enable failed\n");
      
#line 3982 
      adapter->num_vfs = (unsigned short)0U;
      
#line 3983 
      goto err;
    }
    else ;
  }
  else ;
  
#line 3987 
  adapter->flags |= 4U;
  
#line 3988 
  __retres = 0;
  
#line 3988 
  goto return_label;
  err: 
#line 3989 
  ;
  
#line 3990 
  dev_err((struct device const *)dev,"VF setup failed\n");
  
#line 3991 
  be_vf_clear(adapter);
  
#line 3992 
  __retres = status;
  return_label: 
#line 3992 
                return __retres;
}


#line 3997  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u8 be_convert_mc_type(u32 function_mode)
{
  u8 __retres;
  
#line 3999 
  if ((function_mode & 131072U) != 0U && (function_mode & 1024U) != 0U) {
    
#line 4000 
    __retres = (unsigned char)4U;
    
#line 4000 
    goto return_label;
  }
  else 
    
#line 4001 
    if ((function_mode & 1024U) != 0U) {
      
#line 4002 
      __retres = (unsigned char)3U;
      
#line 4002 
      goto return_label;
    }
    else 
      
#line 4003 
      if ((function_mode & 131072U) != 0U) {
        
#line 4004 
        __retres = (unsigned char)7U;
        
#line 4004 
        goto return_label;
      }
      else 
        
#line 4005 
        if ((function_mode & 16777216U) != 0U) {
          
#line 4006 
          __retres = (unsigned char)2U;
          
#line 4006 
          goto return_label;
        }
        else {
          
#line 4008 
          __retres = (unsigned char)1U;
          
#line 4008 
          goto return_label;
        }
  return_label: 
#line 3999 
                return __retres;
}


#line 4012  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void BEx_get_resources(struct be_adapter *adapter, struct be_resources *res)
{
  bool tmp;
  
#line 4015 
  bool use_sriov = (_Bool)((unsigned int)adapter->num_vfs != 0U);
  
#line 4017 
  if ((unsigned int)adapter->virtfn == 0U) 
#line 4018 
                                           res->max_uc_mac = (unsigned short)30U; else 
                                                                    
#line 4020 
                                                                    res->max_uc_mac = (unsigned short)2U;
  
#line 4022 
  adapter->mc_type = be_convert_mc_type(adapter->function_mode);
  
#line 4024 
  tmp = be_is_mc(adapter);
  
#line 4024 
  if ((int)tmp != 0) 
    
#line 4028 
    if ((adapter->function_mode & 1024U) != 0U) 
#line 4029 
                                                res->max_vlans = (unsigned short)8U; else 
                                                                    
#line 4034 
                                                                    res->max_vlans = (unsigned short)15U;
  else 
#line 4036 
       res->max_vlans = (unsigned short)64U;
  
#line 4039 
  res->max_mcast_mac = (unsigned short)64U;
  
#line 4045 
  if (((((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) || (int)use_sriov != 0) || adapter->port_num > 1U) || (unsigned int)adapter->virtfn != 0U) 
    
#line 4045 
    goto _LOR;
  else {
    bool tmp_0;
    
#line 4046 
    tmp_0 = be_is_mc(adapter);
    
#line 4046 
    if ((int)tmp_0 != 0) {
      
#line 4047 
      if ((adapter->function_caps & 2U) == 0U) _LOR: 
#line 4049 
                                                     res->max_tx_qs = (unsigned short)1U; else 
                                                                    
#line 4045 
                                                                    goto _LAND;
    }
    else {
      _LAND: 
#line 4050 
      ;
      
#line 4050 
      if ((adapter->function_caps & 64U) != 0U) {
        
#line 4051 
        struct be_resources super_nic_res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U};
        
#line 4056 
        be_cmd_get_profile_config(adapter,& super_nic_res,(unsigned char)0,(unsigned char)0);
        
#line 4059 
        if ((int)super_nic_res.max_tx_qs != 0) 
#line 4059 
                                               res->max_tx_qs = (unsigned short)((int)super_nic_res.max_tx_qs); else 
                                                                    
#line 4059 
                                                                    res->max_tx_qs = (unsigned short)16U;
      }
      else 
#line 4061 
           res->max_tx_qs = (unsigned short)16U;
    }
  }
  
#line 4064 
  if (((adapter->function_caps & 2U) != 0U && ! use_sriov) && (unsigned int)adapter->virtfn == 0U) 
    
#line 4066 
    if ((int)adapter->be3_native != 0) 
#line 4066 
                                       res->max_rss_qs = (unsigned short)16U; else 
                                                                    
#line 4066 
                                                                    res->max_rss_qs = (unsigned short)4U;
  else ;
  
#line 4068 
  res->max_rx_qs = (unsigned short)((unsigned int)res->max_rss_qs + 1U);
  
#line 4070 
  if ((unsigned int)adapter->virtfn == 0U) 
    
#line 4071 
    if ((unsigned int)adapter->pool_res.max_vfs != 0U) 
#line 4071 
                                                       res->max_evt_qs = (unsigned short)8U; else 
                                                                    
#line 4071 
                                                                    res->max_evt_qs = (unsigned short)16U;
  else 
#line 4074 
       res->max_evt_qs = (unsigned short)1U;
  
#line 4076 
  res->if_cap_flags = 16784316U;
  
#line 4077 
  res->if_cap_flags &= 4278190079U;
  
#line 4078 
  if ((adapter->function_caps & 2U) == 0U) 
#line 4079 
                                           res->if_cap_flags &= 4294967291U; else ;
  
#line 4080 
  return;
}


#line 4082  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_setup_init(struct be_adapter *adapter)
{
  
#line 4084 
  adapter->vlan_prio_bmap = (unsigned char)255U;
  
#line 4085 
  adapter->phy.link_speed = -1;
  
#line 4086 
  adapter->if_handle = -1;
  
#line 4087 
  adapter->be3_native = (_Bool)0;
  
#line 4088 
  adapter->if_flags = 0U;
  
#line 4089 
  if ((unsigned int)adapter->virtfn == 0U) 
#line 4090 
                                           adapter->cmd_privileges = 1792U; else 
                                                                    
#line 4092 
                                                                    adapter->cmd_privileges = 1U;
  
#line 4093 
  return;
}


#line 4095  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_sriov_config(struct be_adapter *adapter)
{
  int __retres;
  int max_vfs;
  int old_vfs;
  
#line 4097 
  struct be_resources res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U};
  
#line 4100 
  be_cmd_get_profile_config(adapter,& res,(unsigned char)0,(unsigned char)0);
  
#line 4103 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) && (unsigned int)res.max_vfs == 0U) {
    
#line 4104 
    max_vfs = pci_sriov_get_totalvfs(adapter->pdev);
    
#line 4105 
    if (max_vfs > 0) {
      int tmp_0;
      {
        int tmp;
        
#line 4105 
        int _min1 = 30;
        
#line 4105 
        int _min2 = max_vfs;
        
#line 4105 
        if (_min1 < _min2) 
#line 4105 
                           tmp = _min1; else 
#line 4105 
                                             tmp = _min2;
        
#line 4105 
        tmp_0 = tmp;
      }
      
#line 4105 
      res.max_vfs = (unsigned short)tmp_0;
    }
    else 
#line 4105 
         res.max_vfs = (unsigned short)0U;
  }
  else ;
  
#line 4108 
  adapter->pool_res = res;
  
#line 4114 
  old_vfs = pci_num_vf(adapter->pdev);
  
#line 4115 
  if (old_vfs != 0) {
    int tmp_1;
    
#line 4116 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%d VFs are already enabled\n",old_vfs);
    
#line 4119 
    tmp_1 = pci_sriov_get_totalvfs(adapter->pdev);
    
#line 4119 
    adapter->pool_res.max_vfs = (unsigned short)tmp_1;
    
#line 4121 
    adapter->num_vfs = (unsigned short)old_vfs;
  }
  else ;
  
#line 4124 
  __retres = 0;
  
#line 4124 
  return __retres;
}


#line 4127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_alloc_sriov_res(struct be_adapter *adapter)
{
  u16 num_vf_qs;
  int status;
  
#line 4129 
  int old_vfs = pci_num_vf(adapter->pdev);
  
#line 4133 
  be_get_sriov_config(adapter);
  
#line 4135 
  if (old_vfs == 0) 
#line 4136 
                    pci_sriov_set_totalvfs(adapter->pdev,(unsigned short)((int)adapter->pool_res.max_vfs)); else ;
  
#line 4143 
  if ((((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (unsigned int)adapter->pool_res.max_vfs != 0U) && old_vfs == 0) {
    
#line 4144 
    num_vf_qs = be_calculate_vf_qs(adapter,(unsigned short)0);
    
#line 4145 
    status = be_cmd_set_sriov_config(adapter,adapter->pool_res,(unsigned short)0,(unsigned short)((int)num_vf_qs));
    
#line 4147 
    if (status != 0) 
#line 4148 
                     dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to optimize SRIOV resources\n"); else ;
  }
  else ;
  
#line 4151 
  return;
}


#line 4153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_resources(struct be_adapter *adapter)
{
  int __retres;
  int status;
  int tmp_2;
  
#line 4155 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 4156 
  struct be_resources res = {.max_vfs = (unsigned short)0U, .max_mcast_mac = (unsigned short)0, .max_tx_qs = (unsigned short)0, .max_rss_qs = (unsigned short)0, .max_rx_qs = (unsigned short)0, .max_cq_count = (unsigned short)0, .max_uc_mac = (unsigned short)0, .max_vlans = (unsigned short)0, .max_iface_count = (unsigned short)0, .max_mcc_count = (unsigned short)0, .max_evt_qs = (unsigned short)0, .if_cap_flags = 0U, .vf_if_cap_flags = 0U};
  
#line 4159 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    
#line 4160 
    BEx_get_resources(adapter,& res);
    
#line 4161 
    adapter->res = res;
  }
  else ;
  
#line 4168 
  if (((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) && ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U)) {
    
#line 4169 
    status = be_cmd_get_func_config(adapter,& res);
    
#line 4170 
    if (status != 0) {
      
#line 4171 
      __retres = status;
      
#line 4171 
      goto return_label;
    }
    else ;
    
#line 4174 
    if (((unsigned int)res.max_rss_qs != 0U && (int)res.max_rss_qs == (int)res.max_rx_qs) && (res.if_cap_flags & 16777216U) == 0U) 
      
#line 4176 
      res.max_rss_qs = (unsigned short)((unsigned int)res.max_rss_qs + 65535U); else ;
    
#line 4179 
    if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) && (adapter->function_mode & 4U) != 0U) 
      
#line 4180 
      res.max_evt_qs = (unsigned short)((unsigned int)res.max_evt_qs / 2U); else ;
    
#line 4181 
    adapter->res = res;
  }
  else ;
  
#line 4187 
  adapter->need_def_rxq = (unsigned short)((adapter->res.if_cap_flags & 16777216U) == 0U);
  
#line 4190 
  _dev_info((struct device const *)dev,"Max: txqs %d, rxqs %d, rss %d, eqs %d, vfs %d\n",(int)adapter->res.max_tx_qs,(int)adapter->res.max_rx_qs,(int)adapter->res.max_rss_qs,(int)adapter->res.max_evt_qs,(int)adapter->pool_res.max_vfs);
  
#line 4194 
  _dev_info((struct device const *)dev,"Max: uc-macs %d, mc-macs %d, vlans %d\n",(int)adapter->res.max_uc_mac,(int)adapter->res.max_mcast_mac,(int)adapter->res.max_vlans);
  {
    int tmp;
    int tmp_1;
    
#line 4199 
    tmp = netif_get_num_default_rss_queues();
    
#line 4199 
    u16 __min1 = (unsigned short)tmp;
    
#line 4199 
    u16 __min2 = be_max_qs(adapter);
    
#line 4199 
    if ((int)__min1 < (int)__min2) 
#line 4199 
                                   tmp_1 = (int)__min1; else 
#line 4199 
                                                             tmp_1 = (int)__min2;
    
#line 4199 
    tmp_2 = tmp_1;
  }
  
#line 4199 
  adapter->cfg_num_qs = (unsigned short)tmp_2;
  
#line 4201 
  __retres = 0;
  return_label: 
#line 4201 
                return __retres;
}


#line 4204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_get_config(struct be_adapter *adapter)
{
  int __retres;
  int status;
  int level;
  u16 profile_id;
  
#line 4209 
  status = be_cmd_get_cntl_attributes(adapter);
  
#line 4210 
  if (status != 0) {
    
#line 4211 
    __retres = status;
    
#line 4211 
    goto return_label;
  }
  else ;
  
#line 4213 
  status = be_cmd_query_fw_cfg(adapter);
  
#line 4214 
  if (status != 0) {
    
#line 4215 
    __retres = status;
    
#line 4215 
    goto return_label;
  }
  else ;
  
#line 4217 
  if (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) {
    int tmp;
    
#line 4218 
    level = be_cmd_get_fw_log_level(adapter);
    
#line 4220 
    if (level <= 48) 
#line 4220 
                     tmp = 8192; else 
#line 4220 
                                      tmp = 0;
    
#line 4219 
    adapter->msg_enable = (unsigned int)tmp;
  }
  else ;
  
#line 4223 
  be_cmd_get_acpi_wol_cap(adapter);
  
#line 4225 
  be_cmd_query_port_name(adapter);
  
#line 4227 
  if ((unsigned int)adapter->virtfn == 0U) {
    
#line 4228 
    status = be_cmd_get_active_profile(adapter,& profile_id);
    
#line 4229 
    if (status == 0) 
#line 4230 
                     _dev_info((struct device const *)(& (adapter->pdev)->dev),"Using profile 0x%x\n",(int)profile_id); else ;
  }
  else ;
  
#line 4234 
  status = be_get_resources(adapter);
  
#line 4235 
  if (status != 0) {
    
#line 4236 
    __retres = status;
    
#line 4236 
    goto return_label;
  }
  else ;
  
#line 4238 
  adapter->pmac_id = (u32 *)kcalloc((unsigned long)adapter->res.max_uc_mac,4UL,208U);
  
#line 4240 
  if (adapter->pmac_id == (u32 *)0U) {
    
#line 4241 
    __retres = -12;
    
#line 4241 
    goto return_label;
  }
  else ;
  
#line 4243 
  __retres = 0;
  return_label: 
#line 4243 
                return __retres;
}


#line 4246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_mac_setup(struct be_adapter *adapter)
{
  int __retres;
  u8 mac[6U];
  int status;
  bool tmp;
  
#line 4251 
  tmp = is_zero_ether_addr((u8 const *)(adapter->netdev)->dev_addr);
  
#line 4251 
  if ((int)tmp != 0) {
    
#line 4252 
    status = be_cmd_get_perm_mac(adapter,(u8 *)(& mac));
    
#line 4253 
    if (status != 0) {
      
#line 4254 
      __retres = status;
      
#line 4254 
      goto return_label;
    }
    else ;
    
#line 4256 
    memcpy((void *)(adapter->netdev)->dev_addr,(void const *)(& mac),6UL);
    
#line 4257 
    memcpy((void *)(& (adapter->netdev)->perm_addr),(void const *)(& mac),6UL);
  }
  else ;
  
#line 4260 
  __retres = 0;
  return_label: 
#line 4260 
                return __retres;
}


#line 4263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_schedule_worker(struct be_adapter *adapter)
{
  unsigned long tmp;
  
#line 4265 
  tmp = msecs_to_jiffies(1000U);
  
#line 4265 
  ;
  
#line 4265 
  ldv_schedule_delayed_work_86(& adapter->work,tmp);
  
#line 4266 
  adapter->flags |= 8U;
  
#line 4267 
  return;
}


#line 4269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_schedule_err_detection(struct be_adapter *adapter)
{
  unsigned long tmp;
  
#line 4271 
  tmp = msecs_to_jiffies(1000U);
  
#line 4271 
  ;
  
#line 4271 
  ldv_schedule_delayed_work_87(& adapter->be_err_detection_work,tmp);
  
#line 4273 
  adapter->flags |= 2048U;
  
#line 4274 
  return;
}


#line 4276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_setup_queues(struct be_adapter *adapter)
{
  int __retres;
  int status;
  
#line 4278 
  struct net_device *netdev = adapter->netdev;
  
#line 4281 
  status = be_evt_queues_create(adapter);
  
#line 4282 
  if (status != 0) 
#line 4283 
                   goto err; else ;
  
#line 4285 
  status = be_tx_qs_create(adapter);
  
#line 4286 
  if (status != 0) 
#line 4287 
                   goto err; else ;
  
#line 4289 
  status = be_rx_cqs_create(adapter);
  
#line 4290 
  if (status != 0) 
#line 4291 
                   goto err; else ;
  
#line 4293 
  status = be_mcc_queues_create(adapter);
  
#line 4294 
  if (status != 0) 
#line 4295 
                   goto err; else ;
  
#line 4297 
  status = netif_set_real_num_rx_queues(netdev,(unsigned int)adapter->num_rx_qs);
  
#line 4298 
  if (status != 0) 
#line 4299 
                   goto err; else ;
  
#line 4301 
  status = netif_set_real_num_tx_queues(netdev,(unsigned int)adapter->num_tx_qs);
  
#line 4302 
  if (status != 0) 
#line 4303 
                   goto err; else ;
  
#line 4305 
  __retres = 0;
  
#line 4305 
  goto return_label;
  err: 
#line 4306 
  ;
  
#line 4307 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"queue_setup failed\n");
  
#line 4308 
  __retres = status;
  return_label: 
#line 4308 
                return __retres;
}


#line 4311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
int be_update_queues(struct be_adapter *adapter)
{
  int __retres;
  int status;
  bool tmp;
  bool tmp_0;
  
#line 4313 
  struct net_device *netdev = adapter->netdev;
  
#line 4316 
  tmp = netif_running((struct net_device const *)netdev);
  
#line 4316 
  if ((int)tmp != 0) 
#line 4317 
                     be_close(netdev); else ;
  
#line 4319 
  be_cancel_worker(adapter);
  
#line 4324 
  if (adapter->num_msix_roce_vec == 0U) 
#line 4325 
                                        be_msix_disable(adapter); else ;
  
#line 4327 
  be_clear_queues(adapter);
  
#line 4329 
  if ((unsigned int)adapter->num_msix_vec == 0U) {
    
#line 4330 
    status = be_msix_enable(adapter);
    
#line 4331 
    if (status != 0) {
      
#line 4332 
      __retres = status;
      
#line 4332 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4335 
  status = be_setup_queues(adapter);
  
#line 4336 
  if (status != 0) {
    
#line 4337 
    __retres = status;
    
#line 4337 
    goto return_label;
  }
  else ;
  
#line 4339 
  be_schedule_worker(adapter);
  
#line 4341 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 4341 
  if ((int)tmp_0 != 0) 
#line 4342 
                       status = be_open(netdev); else ;
  
#line 4344 
  __retres = status;
  return_label: 
#line 4344 
                return __retres;
}


#line 4347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static int fw_major_num(char const *fw_ver)
{
  int __retres;
  int i;
  
#line 4349 
  int fw_major = 0;
  
#line 4351 
  i = sscanf(fw_ver,"%d.",& fw_major);
  
#line 4352 
  if (i != 1) {
    
#line 4353 
    __retres = 0;
    
#line 4353 
    goto return_label;
  }
  else ;
  
#line 4355 
  __retres = fw_major;
  return_label: 
#line 4355 
                return __retres;
}


#line 4359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static bool be_reset_required(struct be_adapter *adapter)
{
  bool __retres;
  int tmp;
  
#line 4361 
  tmp = pci_num_vf(adapter->pdev);
  
#line 4361 
  __retres = (_Bool)(tmp == 0);
  
#line 4361 
  return __retres;
}


#line 4365  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_func_init(struct be_adapter *adapter)
{
  int __retres;
  int status;
  bool tmp;
  
#line 4369 
  status = be_fw_wait_ready(adapter);
  
#line 4370 
  if (status != 0) {
    
#line 4371 
    __retres = status;
    
#line 4371 
    goto return_label;
  }
  else ;
  
#line 4373 
  tmp = be_reset_required(adapter);
  
#line 4373 
  if ((int)tmp != 0) {
    
#line 4374 
    status = be_cmd_reset_function(adapter);
    
#line 4375 
    if (status != 0) {
      
#line 4376 
      __retres = status;
      
#line 4376 
      goto return_label;
    }
    else ;
    
#line 4379 
    msleep(100U);
    
#line 4382 
    be_clear_error(adapter,255);
  }
  else ;
  
#line 4386 
  status = be_cmd_fw_init(adapter);
  
#line 4387 
  if (status != 0) {
    
#line 4388 
    __retres = status;
    
#line 4388 
    goto return_label;
  }
  else ;
  
#line 4391 
  be_intr_set(adapter,(_Bool)1);
  
#line 4393 
  __retres = 0;
  return_label: 
#line 4393 
                return __retres;
}


#line 4396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_setup(struct be_adapter *adapter)
{
  int __retres;
  u32 en_flags;
  int status;
  
#line 4398 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 4402 
  status = be_func_init(adapter);
  
#line 4403 
  if (status != 0) {
    
#line 4404 
    __retres = status;
    
#line 4404 
    goto return_label;
  }
  else ;
  
#line 4406 
  be_setup_init(adapter);
  
#line 4408 
  if ((unsigned int)(adapter->pdev)->device != 57888U && (unsigned int)(adapter->pdev)->device != 57896U) 
    
#line 4409 
    be_cmd_req_native_mode(adapter); else ;
  
#line 4411 
  if (((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) && (unsigned int)adapter->virtfn == 0U) 
    
#line 4412 
    be_alloc_sriov_res(adapter); else ;
  
#line 4414 
  status = be_get_config(adapter);
  
#line 4415 
  if (status != 0) 
#line 4416 
                   goto err; else ;
  
#line 4418 
  status = be_msix_enable(adapter);
  
#line 4419 
  if (status != 0) 
#line 4420 
                   goto err; else ;
  
#line 4423 
  en_flags = 16777220U;
  
#line 4424 
  en_flags = adapter->res.if_cap_flags & en_flags;
  
#line 4425 
  status = be_cmd_if_create(adapter,adapter->res.if_cap_flags,en_flags,(u32 *)(& adapter->if_handle),0U);
  
#line 4427 
  if (status != 0) 
#line 4428 
                   goto err; else ;
  
#line 4431 
  rtnl_lock();
  
#line 4432 
  status = be_setup_queues(adapter);
  
#line 4433 
  rtnl_unlock();
  
#line 4434 
  if (status != 0) 
#line 4435 
                   goto err; else ;
  
#line 4437 
  be_cmd_get_fn_privileges(adapter,& adapter->cmd_privileges,0U);
  
#line 4439 
  status = be_mac_setup(adapter);
  
#line 4440 
  if (status != 0) 
#line 4441 
                   goto err; else ;
  
#line 4443 
  be_cmd_get_fw_ver(adapter);
  
#line 4444 
  _dev_info((struct device const *)dev,"FW version is %s\n",(char *)(& adapter->fw_ver));
  
#line 4446 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) {
    int tmp;
    
#line 4446 
    tmp = fw_major_num((char const *)(& adapter->fw_ver));
    
#line 4446 
    if (tmp <= 3) {
      
#line 4447 
      dev_err((struct device const *)dev,"Firmware on card is old(%s), IRQs may not work",(char *)(& adapter->fw_ver));
      
#line 4449 
      dev_err((struct device const *)dev,"Please upgrade firmware to version >= 4.0\n");
    }
    else ;
  }
  else ;
  
#line 4452 
  status = be_cmd_set_flow_control(adapter,adapter->tx_fc,adapter->rx_fc);
  
#line 4454 
  if (status != 0) 
#line 4455 
                   be_cmd_get_flow_control(adapter,& adapter->tx_fc,& adapter->rx_fc); else ;
  
#line 4458 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"HW Flow control - TX:%d RX:%d\n",adapter->tx_fc,adapter->rx_fc);
  
#line 4461 
  if ((unsigned int)adapter->virtfn == 0U) 
#line 4462 
                                           be_cmd_set_logical_link_config(adapter,0,(unsigned char)0); else ;
  
#line 4465 
  if ((unsigned int)adapter->num_vfs != 0U) 
#line 4466 
                                            be_vf_setup(adapter); else ;
  
#line 4468 
  status = be_cmd_get_phy_info(adapter);
  
#line 4469 
  if (status == 0) {
    bool tmp_0;
    
#line 4469 
    tmp_0 = be_pause_supported(adapter);
    
#line 4469 
    if ((int)tmp_0 != 0) 
#line 4470 
                         adapter->phy.fc_autoneg = (unsigned char)1U; else ;
  }
  else ;
  
#line 4472 
  be_schedule_worker(adapter);
  
#line 4473 
  adapter->flags |= 512U;
  
#line 4474 
  __retres = 0;
  
#line 4474 
  goto return_label;
  err: 
#line 4475 
  ;
  
#line 4476 
  be_clear(adapter);
  
#line 4477 
  __retres = status;
  return_label: 
#line 4477 
                return __retres;
}


#line 4481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_netpoll(struct net_device *netdev)
{
  struct be_eq_obj *eqo;
  int i;
  
#line 4483 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 4487 
  i = 0;
  
#line 4487 
  eqo = & adapter->eq_obj[i];
  
#line 4487 
  goto ldv_59616;
  ldv_59615: 
#line 4488 
  ;
  
#line 4488 
  be_eq_notify(eqo->adapter,(unsigned short)((int)eqo->q.id),(_Bool)0,(_Bool)1,(unsigned short)0,0U);
  
#line 4489 
  napi_schedule(& eqo->napi);
  
#line 4487 
  i += 1;
  
#line 4487 
  eqo += 1;
  ldv_59616: 
#line 4488 
  ;
  
#line 4487 
  if ((int)adapter->num_evt_qs > i) 
#line 4489 
                                    goto ldv_59615; else 
#line 4492 
                                                         goto ldv_59617;
  ldv_59617: 
#line 4493 
  ;
  
#line 4494 
  return;
}


#line 4494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static char flash_cookie[2U][16U] = {{(char)'*', (char)'*', (char)'*', (char)' ', (char)'S', (char)'E', (char)' ', (char)'F', (char)'L', (char)'A', (char)'S', (char)'\000'}, {(char)'H', (char)' ', (char)'D', (char)'I', (char)'R', (char)'E', (char)'C', (char)'T', (char)'O', (char)'R', (char)'Y', (char)' ', (char)'*', (char)'*', (char)'*', (char)' '}};

#line 4496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static bool phy_flashing_required(struct be_adapter *adapter)
{
  bool __retres;
  
#line 4498 
  __retres = (_Bool)(((unsigned int)adapter->phy.phy_type == 13U && (unsigned int)adapter->phy.interface_type == 6U) != 0);
  
#line 4498 
  return __retres;
}


#line 4502  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static bool is_comp_in_ufi(struct be_adapter *adapter, struct flash_section_info *fsec, int type)
{
  bool __retres;
  
#line 4505 
  int i = 0;
  
#line 4505 
  int img_type = 0;
  
#line 4506 
  struct flash_section_info_g2 *fsec_g2 = (struct flash_section_info_g2 *)0;
  
#line 4508 
  if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
    
#line 4509 
    fsec_g2 = (struct flash_section_info_g2 *)fsec; else ;
  
#line 4511 
  i = 0;
  
#line 4511 
  goto ldv_59631;
  ldv_59630: 
#line 4512 
  ;
  
#line 4512 
  if (fsec_g2 != (struct flash_section_info_g2 *)0) 
#line 4513 
                                                    img_type = (int)fsec_g2->fsec_entry[i].type; else 
                                                                    
#line 4515 
                                                                    img_type = (int)fsec->fsec_entry[i].type;
  
#line 4517 
  if (img_type == type) {
    
#line 4518 
    __retres = (_Bool)1;
    
#line 4518 
    goto return_label;
  }
  else ;
  
#line 4511 
  i += 1;
  ldv_59631: 
#line 4512 
  ;
  
#line 4511 
  if (i <= 31) 
#line 4513 
               goto ldv_59630; else 
#line 4516 
                                    goto ldv_59632;
  ldv_59632: 
#line 4517 
  ;
  
#line 4520 
  __retres = (_Bool)0;
  return_label: 
#line 4520 
                return __retres;
}


#line 4524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct flash_section_info *get_fsec_info(struct be_adapter *adapter, int header_size, struct firmware const *fw)
{
  struct flash_section_info *__retres;
  int tmp;
  
#line 4528 
  struct flash_section_info *fsec = (struct flash_section_info *)0;
  
#line 4529 
  u8 const *p = fw->data;
  
#line 4531 
  p += header_size;
  
#line 4532 
  goto ldv_59641;
  ldv_59640: 
#line 4533 
  ;
  
#line 4533 
  fsec = (struct flash_section_info *)p;
  
#line 4534 
  tmp = memcmp((void const *)(& flash_cookie),(void const *)(& fsec->cookie),32UL);
  
#line 4534 
  if (tmp == 0) {
    
#line 4535 
    __retres = fsec;
    
#line 4535 
    goto return_label;
  }
  else ;
  
#line 4536 
  p += 32U;
  ldv_59641: 
#line 4537 
  ;
  
#line 4532 
  if (fw->data + fw->size > p) 
#line 4534 
                               goto ldv_59640; else 
#line 4537 
                                                    goto ldv_59642;
  ldv_59642: 
#line 4538 
  ;
  
#line 4538 
  __retres = (struct flash_section_info *)0;
  return_label: 
#line 4538 
                return __retres;
}


#line 4541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_check_flash_crc(struct be_adapter *adapter, u8 const *p, u32 img_offset, u32 img_size, int hdr_size, u16 img_optype, bool *crc_match)
{
  int __retres;
  u32 crc_offset;
  int status;
  u8 crc[4U];
  int tmp;
  
#line 4549 
  status = be_cmd_get_flash_crc(adapter,(u8 *)(& crc),(unsigned short)((int)img_optype),img_offset,img_size + 4294967292U);
  
#line 4551 
  if (status != 0) {
    
#line 4552 
    __retres = status;
    
#line 4552 
    goto return_label;
  }
  else ;
  
#line 4554 
  crc_offset = (((unsigned int)hdr_size + img_offset) + img_size) + 4294967292U;
  
#line 4557 
  tmp = memcmp((void const *)(& crc),(void const *)(p + crc_offset),4UL);
  
#line 4557 
  if (tmp == 0) 
#line 4558 
                *crc_match = (_Bool)1; else 
#line 4560 
                                            *crc_match = (_Bool)0;
  
#line 4562 
  __retres = status;
  return_label: 
#line 4562 
                return __retres;
}


#line 4565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_flash(struct be_adapter *adapter, u8 const *img, struct be_dma_mem *flash_cmd, int optype, int img_size, u32 img_offset)
{
  int __retres;
  u32 flash_op;
  u32 num_bytes;
  int status;
  u32 tmp_0;
  
#line 4569 
  u32 total_bytes = (unsigned int)img_size;
  
#line 4569 
  u32 bytes_sent = 0U;
  
#line 4570 
  struct be_cmd_write_flashrom *req = (struct be_cmd_write_flashrom *)flash_cmd->va;
  
#line 4573 
  goto ldv_59674;
  ldv_59673: 
#line 4574 
  ;
  {
    u32 tmp;
    
#line 4574 
    u32 __min1 = 32768U;
    
#line 4574 
    u32 __min2 = total_bytes;
    
#line 4574 
    if (__min1 < __min2) 
#line 4574 
                         tmp = __min1; else 
#line 4574 
                                            tmp = __min2;
    
#line 4574 
    tmp_0 = tmp;
  }
  
#line 4574 
  num_bytes = tmp_0;
  
#line 4576 
  total_bytes -= num_bytes;
  
#line 4578 
  if (total_bytes == 0U) 
    
#line 4579 
    if (optype == 99) 
#line 4580 
                      flash_op = 9U; else 
#line 4582 
                                          flash_op = 1U;
  else 
    
#line 4584 
    if (optype == 99) 
#line 4585 
                      flash_op = 10U; else 
#line 4587 
                                           flash_op = 2U;
  
#line 4590 
  memcpy((void *)(& req->data_buf),(void const *)img,(unsigned long)num_bytes);
  
#line 4591 
  img += num_bytes;
  
#line 4592 
  status = be_cmd_write_flashrom(adapter,flash_cmd,(unsigned int)optype,flash_op,img_offset + bytes_sent,num_bytes);
  
#line 4595 
  if ((status > 0 && (status & 65535) == 2) && optype == 99) 
#line 4597 
                                                             goto ldv_59672;
  else 
    
#line 4598 
    if (status != 0) {
      
#line 4599 
      __retres = status;
      
#line 4599 
      goto return_label;
    }
    else ;
  
#line 4601 
  bytes_sent += num_bytes;
  ldv_59674: 
#line 4602 
  ;
  
#line 4573 
  if (total_bytes != 0U) 
#line 4575 
                         goto ldv_59673; else 
#line 4578 
                                              goto ldv_59672;
  ldv_59672: 
#line 4579 
  ;
  
#line 4603 
  __retres = 0;
  return_label: 
#line 4603 
                return __retres;
}


#line 4607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_flash_BEx(struct be_adapter *adapter, struct firmware const *fw, struct be_dma_mem *flash_cmd, int num_of_images)
{
  int __retres;
  int status;
  int i;
  int filehdr_size;
  int num_comp;
  struct flash_comp const *pflashcomp;
  bool crc_match;
  u8 const *p;
  int tmp_0;
  bool tmp;
  
#line 4611 
  int img_hdrs_size = (int)((unsigned long)num_of_images * (unsigned long)48U);
  
#line 4612 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 4613 
  struct flash_section_info *fsec = (struct flash_section_info *)0;
  
#line 4619 
  struct flash_comp gen3_flash_types[10U] = {{.offset = 2097152UL, .optype = 0, .size = 2097152, .img_type = 160}, {.offset = 262144UL, .optype = 1, .size = 1048576, .img_type = 224}, {.offset = 12582912UL, .optype = 2, .size = 524288, .img_type = 34}, {.offset = 13107200UL, .optype = 3, .size = 524288, .img_type = 32}, {.offset = 13631488UL, .optype = 8, .size = 524288, .img_type = 33}, {.offset = 4194304UL, .optype = 9, .size = 2097152, .img_type = 176}, {.offset = 6291456UL, .optype = 10, .size = 2097152, .img_type = 162}, {.offset = 8388608UL, .optype = 11, .size = 2097152, .img_type = 178}, {.offset = 15990784UL, .optype = 13, .size = 262144, .img_type = 16}, {.offset = 1310720UL, .optype = 99, .size = 262144, .img_type = 192}};
  
#line 4642 
  struct flash_comp gen2_flash_types[8U] = {{.offset = 1048576UL, .optype = 0, .size = 1310720, .img_type = 160}, {.offset = 0UL, .optype = 1, .size = 262144, .img_type = 224}, {.offset = 7340032UL, .optype = 2, .size = 262144, .img_type = 34}, {.offset = 7864320UL, .optype = 3, .size = 262144, .img_type = 32}, {.offset = 524288UL, .optype = 8, .size = 262144, .img_type = 33}, {.offset = 2359296UL, .optype = 9, .size = 1310720, .img_type = 176}, {.offset = 3670016UL, .optype = 10, .size = 1310720, .img_type = 162}, {.offset = 4980736UL, .optype = 11, .size = 1310720, .img_type = 178}};
  
#line 4661 
  if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) {
    
#line 4662 
    pflashcomp = (struct flash_comp const *)(& gen3_flash_types);
    
#line 4663 
    filehdr_size = 128;
    
#line 4664 
    num_comp = 10;
  }
  else {
    
#line 4666 
    pflashcomp = (struct flash_comp const *)(& gen2_flash_types);
    
#line 4667 
    filehdr_size = 96;
    
#line 4668 
    num_comp = 8;
    
#line 4669 
    img_hdrs_size = 0;
  }
  
#line 4673 
  fsec = get_fsec_info(adapter,filehdr_size + img_hdrs_size,fw);
  
#line 4674 
  if (fsec == (struct flash_section_info *)0) {
    
#line 4675 
    dev_err((struct device const *)dev,"Invalid Cookie. FW image may be corrupted\n");
    
#line 4676 
    __retres = -1;
    
#line 4676 
    goto return_label;
  }
  else ;
  
#line 4678 
  i = 0;
  
#line 4678 
  goto ldv_59701;
  ldv_59700: 
#line 4679 
  ;
  
#line 4679 
  tmp = is_comp_in_ufi(adapter,fsec,(pflashcomp + i)->img_type);
  
#line 4679 
  if (tmp) 
#line 4679 
           tmp_0 = 0; else 
#line 4679 
                           tmp_0 = 1;
  
#line 4679 
  if (tmp_0) 
#line 4680 
             goto ldv_59699; else ;
  
#line 4682 
  if ((pflashcomp + i)->optype == 13) {
    int tmp_1;
    
#line 4682 
    tmp_1 = memcmp((void const *)(& adapter->fw_ver),(void const *)"3.102.148.0",11UL);
    
#line 4682 
    if (tmp_1 < 0) 
#line 4684 
                   goto ldv_59699; else ;
  }
  else ;
  
#line 4686 
  if ((pflashcomp + i)->optype == 99) {
    int tmp_3;
    bool tmp_2;
    
#line 4687 
    tmp_2 = phy_flashing_required(adapter);
    
#line 4687 
    if (tmp_2) 
#line 4687 
               tmp_3 = 0; else 
#line 4687 
                               tmp_3 = 1;
    
#line 4687 
    if (tmp_3) 
#line 4688 
               goto ldv_59699; else ;
  }
  else ;
  
#line 4690 
  if ((pflashcomp + i)->optype == 1) {
    
#line 4691 
    status = be_check_flash_crc(adapter,fw->data,(unsigned int)(pflashcomp + i)->offset,(unsigned int)(pflashcomp + i)->size,filehdr_size + img_hdrs_size,(unsigned short)1,& crc_match);
    
#line 4697 
    if (status != 0) {
      
#line 4698 
      dev_err((struct device const *)dev,"Could not get CRC for 0x%x region\n",(pflashcomp + i)->optype);
      
#line 4701 
      goto ldv_59699;
    }
    else ;
    
#line 4704 
    if ((int)crc_match != 0) 
#line 4705 
                             goto ldv_59699; else ;
  }
  else ;
  
#line 4708 
  p = fw->data + (((unsigned long)filehdr_size + (pflashcomp + i)->offset) + (unsigned long)img_hdrs_size);
  
#line 4710 
  if (p + (pflashcomp + i)->size > fw->data + fw->size) {
    
#line 4711 
    __retres = -1;
    
#line 4711 
    goto return_label;
  }
  else ;
  
#line 4713 
  status = be_flash(adapter,p,flash_cmd,(pflashcomp + i)->optype,(pflashcomp + i)->size,0U);
  
#line 4715 
  if (status != 0) {
    
#line 4716 
    dev_err((struct device const *)dev,"Flashing section type 0x%x failed\n",(pflashcomp + i)->img_type);
    
#line 4718 
    __retres = status;
    
#line 4718 
    goto return_label;
  }
  else ;
  ldv_59699: 
#line 4720 
  ;
  
#line 4678 
  i += 1;
  ldv_59701: 
#line 4679 
  ;
  
#line 4678 
  if (i < num_comp) 
#line 4680 
                    goto ldv_59700; else 
#line 4683 
                                         goto ldv_59702;
  ldv_59702: 
#line 4684 
  ;
  
#line 4721 
  __retres = 0;
  return_label: 
#line 4721 
                return __retres;
}


#line 4724  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static u16 be_get_img_optype(struct flash_section_entry fsec_entry)
{
  u16 __retres;
  
#line 4726 
  u32 img_type = fsec_entry.type;
  
#line 4727 
  u16 img_optype = fsec_entry.optype;
  
#line 4729 
  if ((unsigned int)img_optype != 65535U) {
    
#line 4730 
    __retres = img_optype;
    
#line 4730 
    goto return_label;
  }
  else ;
  
#line 4732 
  switch (img_type) {
    case (u32)160: 
#line 4733 
    ;
    
#line 4734 
    img_optype = (unsigned short)0U;
    
#line 4735 
    goto ldv_59709;
    case (u32)224: 
#line 4736 
    ;
    
#line 4737 
    img_optype = (unsigned short)1U;
    
#line 4738 
    goto ldv_59709;
    case (u32)34: 
#line 4739 
    ;
    
#line 4740 
    img_optype = (unsigned short)2U;
    
#line 4741 
    goto ldv_59709;
    case (u32)32: 
#line 4742 
    ;
    
#line 4743 
    img_optype = (unsigned short)3U;
    
#line 4744 
    goto ldv_59709;
    case (u32)33: 
#line 4745 
    ;
    
#line 4746 
    img_optype = (unsigned short)8U;
    
#line 4747 
    goto ldv_59709;
    case (u32)176: 
#line 4748 
    ;
    
#line 4749 
    img_optype = (unsigned short)9U;
    
#line 4750 
    goto ldv_59709;
    case (u32)16: 
#line 4751 
    ;
    
#line 4752 
    img_optype = (unsigned short)13U;
    
#line 4753 
    goto ldv_59709;
    case (u32)48: 
#line 4754 
    ;
    
#line 4755 
    img_optype = (unsigned short)22U;
    
#line 4756 
    goto ldv_59709;
    case (u32)192: 
#line 4757 
    ;
    
#line 4758 
    img_optype = (unsigned short)21U;
    
#line 4759 
    goto ldv_59709;
    case (u32)208: 
#line 4760 
    ;
    
#line 4761 
    img_optype = (unsigned short)18U;
    
#line 4762 
    goto ldv_59709;
    case (u32)209: 
#line 4763 
    ;
    
#line 4764 
    img_optype = (unsigned short)19U;
    
#line 4765 
    goto ldv_59709;
    case (u32)210: 
#line 4766 
    ;
    
#line 4767 
    img_optype = (unsigned short)23U;
    
#line 4768 
    goto ldv_59709;
    default: 
#line 4769 
    ;
    
#line 4770 
    goto ldv_59709;
  }
  ldv_59709: 
#line 4773 
  ;
  
#line 4773 
  __retres = img_optype;
  return_label: 
#line 4773 
                return __retres;
}


#line 4776  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_flash_skyhawk(struct be_adapter *adapter, struct firmware const *fw, struct be_dma_mem *flash_cmd, int num_of_images)
{
  int __retres;
  bool crc_match;
  bool old_fw_img;
  u32 img_offset;
  u32 img_size;
  u32 img_type;
  u16 img_optype;
  u16 flash_optype;
  int status;
  int i;
  int filehdr_size;
  u8 const *p;
  
#line 4780 
  int img_hdrs_size = (int)((unsigned long)num_of_images * (unsigned long)48U);
  
#line 4781 
  bool flash_offset_support = (_Bool)1;
  
#line 4782 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 4783 
  struct flash_section_info *fsec = (struct flash_section_info *)0;
  
#line 4789 
  filehdr_size = 128;
  
#line 4790 
  fsec = get_fsec_info(adapter,filehdr_size + img_hdrs_size,fw);
  
#line 4791 
  if (fsec == (struct flash_section_info *)0) {
    
#line 4792 
    dev_err((struct device const *)dev,"Invalid Cookie. FW image may be corrupted\n");
    
#line 4793 
    __retres = -22;
    
#line 4793 
    goto return_label;
  }
  else ;
  retry_flash: 
#line 4796 
  ;
  
#line 4797 
  i = 0;
  
#line 4797 
  goto ldv_59747;
  ldv_59746: 
#line 4798 
  ;
  
#line 4798 
  img_offset = fsec->fsec_entry[i].offset;
  
#line 4799 
  img_size = fsec->fsec_entry[i].pad_size;
  
#line 4800 
  img_type = fsec->fsec_entry[i].type;
  
#line 4801 
  img_optype = be_get_img_optype(fsec->fsec_entry[i]);
  
#line 4802 
  old_fw_img = (_Bool)((unsigned int)fsec->fsec_entry[i].optype == 65535U);
  
#line 4804 
  if ((unsigned int)img_optype == 65535U) 
#line 4805 
                                          goto ldv_59744; else ;
  
#line 4807 
  if ((int)flash_offset_support != 0) 
#line 4808 
                                      flash_optype = (unsigned short)7U; else 
                                                                    
#line 4810 
                                                                    flash_optype = img_optype;
  
#line 4815 
  if ((int)old_fw_img != 0) 
#line 4816 
                            goto flash; else ;
  
#line 4818 
  status = be_check_flash_crc(adapter,fw->data,img_offset,img_size,filehdr_size + img_hdrs_size,(unsigned short)((int)flash_optype),& crc_match);
  
#line 4822 
  if (status > 0 && ((unsigned int)status & 65535U) + 4294967294U <= 1U) {
    
#line 4828 
    if ((unsigned int)flash_optype == 7U) {
      
#line 4829 
      flash_offset_support = (_Bool)0;
      
#line 4830 
      goto retry_flash;
    }
    else ;
    
#line 4840 
    dev_err((struct device const *)dev,"Flash incomplete. Reset the server\n");
    
#line 4841 
    dev_err((struct device const *)dev,"Download FW image again after reset\n");
    
#line 4842 
    __retres = -11;
    
#line 4842 
    goto return_label;
  }
  else 
    
#line 4843 
    if (status != 0) {
      
#line 4844 
      dev_err((struct device const *)dev,"Could not get CRC for 0x%x region\n",(int)img_optype);
      
#line 4846 
      __retres = -14;
      
#line 4846 
      goto return_label;
    }
    else ;
  
#line 4849 
  if ((int)crc_match != 0) 
#line 4850 
                           goto ldv_59744; else ;
  flash: 
#line 4852 
  ;
  
#line 4853 
  p = fw->data + (((u32)filehdr_size + img_offset) + (u32)img_hdrs_size);
  
#line 4854 
  if (p + img_size > fw->data + fw->size) {
    
#line 4855 
    __retres = -1;
    
#line 4855 
    goto return_label;
  }
  else ;
  
#line 4857 
  status = be_flash(adapter,p,flash_cmd,(int)flash_optype,(int)img_size,img_offset);
  
#line 4864 
  if ((status > 0 && (status & 65535) == 3) && (unsigned int)flash_optype == 7U) {
    
#line 4866 
    flash_offset_support = (_Bool)0;
    
#line 4867 
    goto retry_flash;
  }
  else ;
  
#line 4873 
  if ((int)old_fw_img != 0 && ((status > 0 && (status & 65535) == 3) || (((unsigned int)img_optype == 23U && status > 0) && (status & 65535) == 1))) 
    
#line 4877 
    goto ldv_59744;
  else 
    
#line 4878 
    if (status != 0) {
      
#line 4879 
      dev_err((struct device const *)dev,"Flashing section type 0x%x failed\n",img_type);
      
#line 4881 
      __retres = -14;
      
#line 4881 
      goto return_label;
    }
    else ;
  ldv_59744: 
#line 4883 
  ;
  
#line 4797 
  i += 1;
  ldv_59747: 
#line 4798 
  ;
  
#line 4797 
  if (fsec->fsec_hdr.num_images > (unsigned int)i) 
#line 4799 
                                                   goto ldv_59746; else 
                                                                    
#line 4802 
                                                                    goto ldv_59748;
  ldv_59748: 
#line 4803 
  ;
  
#line 4884 
  __retres = 0;
  return_label: 
#line 4884 
                return __retres;
}


#line 4887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int lancer_fw_download(struct be_adapter *adapter, struct firmware const *fw)
{
  int __retres;
  struct be_dma_mem flash_cmd;
  u8 change_status;
  u32 tmp_0;
  
#line 4892 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 4894 
  u8 const *data_ptr = (u8 const *)0U;
  
#line 4895 
  u8 *dest_image_ptr = (u8 *)0U;
  
#line 4896 
  size_t image_size = 0UL;
  
#line 4897 
  u32 chunk_size = 0U;
  
#line 4898 
  u32 data_written = 0U;
  
#line 4899 
  u32 offset = 0U;
  
#line 4900 
  int status = 0;
  
#line 4901 
  u8 add_status = (unsigned char)0U;
  
#line 4904 
  if ((fw->size & 3UL) != 0UL) {
    
#line 4905 
    dev_err((struct device const *)dev,"FW image size should be multiple of 4\n");
    
#line 4906 
    __retres = -22;
    
#line 4906 
    goto return_label;
  }
  else ;
  
#line 4909 
  flash_cmd.size = 32912U;
  
#line 4911 
  flash_cmd.va = dma_zalloc_coherent(dev,(unsigned long)flash_cmd.size,& flash_cmd.dma,208U);
  
#line 4913 
  if (flash_cmd.va == (void *)0) {
    
#line 4914 
    __retres = -12;
    
#line 4914 
    goto return_label;
  }
  else ;
  
#line 4916 
  dest_image_ptr = (u8 *)(flash_cmd.va + 144U);
  
#line 4918 
  image_size = fw->size;
  
#line 4919 
  data_ptr = fw->data;
  
#line 4921 
  goto ldv_59769;
  ldv_59768: 
#line 4922 
  ;
  {
    u32 tmp;
    
#line 4922 
    u32 __min1 = (unsigned int)image_size;
    
#line 4922 
    u32 __min2 = 32768U;
    
#line 4922 
    if (__min1 < __min2) 
#line 4922 
                         tmp = __min1; else 
#line 4922 
                                            tmp = __min2;
    
#line 4922 
    tmp_0 = tmp;
  }
  
#line 4922 
  chunk_size = tmp_0;
  
#line 4925 
  memcpy((void *)dest_image_ptr,(void const *)data_ptr,(unsigned long)chunk_size);
  
#line 4927 
  status = lancer_cmd_write_object(adapter,& flash_cmd,chunk_size,offset,"/prg",& data_written,& change_status,& add_status);
  
#line 4932 
  if (status != 0) 
#line 4933 
                   goto ldv_59767; else ;
  
#line 4935 
  offset += data_written;
  
#line 4936 
  data_ptr += data_written;
  
#line 4937 
  image_size -= (unsigned long)data_written;
  ldv_59769: 
#line 4938 
  ;
  
#line 4921 
  if (image_size != 0UL) 
#line 4923 
                         goto ldv_59768; else 
#line 4926 
                                              goto ldv_59767;
  ldv_59767: 
#line 4927 
  ;
  
#line 4940 
  if (status == 0) 
#line 4942 
                   status = lancer_cmd_write_object(adapter,& flash_cmd,0U,offset,"/prg",& data_written,& change_status,& add_status); else ;
  
#line 4949 
  dma_free_attrs(dev,(unsigned long)flash_cmd.size,flash_cmd.va,flash_cmd.dma,(struct dma_attrs *)0);
  
#line 4950 
  if (status != 0) {
    int tmp_1;
    
#line 4951 
    dev_err((struct device const *)dev,"Firmware load error\n");
    
#line 4952 
    if (status <= 0) 
#line 4952 
                     tmp_1 = status; else 
#line 4952 
                                          tmp_1 = -5;
    
#line 4952 
    __retres = tmp_1;
    
#line 4952 
    goto return_label;
  }
  else ;
  
#line 4955 
  _dev_info((struct device const *)dev,"Firmware flashed successfully\n");
  
#line 4957 
  if ((unsigned int)change_status == 2U) {
    
#line 4958 
    _dev_info((struct device const *)dev,"Resetting adapter to activate new FW\n");
    
#line 4959 
    status = lancer_physdev_ctrl(adapter,2U);
    
#line 4961 
    if (status != 0) {
      
#line 4962 
      dev_err((struct device const *)dev,"Adapter busy, could not reset FW\n");
      
#line 4963 
      dev_err((struct device const *)dev,"Reboot server to activate new FW\n");
    }
    else ;
  }
  else 
    
#line 4965 
    if ((unsigned int)change_status != 0U) 
#line 4966 
                                           _dev_info((struct device const *)dev,"Reboot server to activate new FW\n"); else ;
  
#line 4969 
  __retres = 0;
  return_label: 
#line 4969 
                return __retres;
}


#line 4975  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static bool be_check_ufi_compatibility(struct be_adapter *adapter, struct flash_file_hdr_g3 *fhdr)
{
  bool __retres;
  
#line 4978 
  if (fhdr == (struct flash_file_hdr_g3 *)0) {
    
#line 4979 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Invalid FW UFI file");
    
#line 4980 
    __retres = (_Bool)1;
    
#line 4980 
    goto return_label;
  }
  else ;
  
#line 4986 
  switch ((int)fhdr->build[0]) {
    case 52: 
#line 4987 
    ;
    
#line 4988 
    if ((unsigned int)(adapter->pdev)->device != 1824U && (unsigned int)(adapter->pdev)->device != 1832U) {
      
#line 4989 
      __retres = (_Bool)0;
      
#line 4989 
      goto return_label;
    }
    else ;
    
#line 4990 
    goto ldv_59775;
    case 51: 
#line 4991 
    ;
    
#line 4992 
    if ((unsigned int)(adapter->pdev)->device != 545U && (unsigned int)(adapter->pdev)->device != 1808U) {
      
#line 4993 
      __retres = (_Bool)0;
      
#line 4993 
      goto return_label;
    }
    else ;
    
#line 4994 
    goto ldv_59775;
    case 50: 
#line 4995 
    ;
    
#line 4996 
    if ((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) {
      
#line 4997 
      __retres = (_Bool)0;
      
#line 4997 
      goto return_label;
    }
    else ;
    
#line 4998 
    goto ldv_59775;
    default: 
#line 4999 
    ;
    
#line 5000 
    __retres = (_Bool)0;
    
#line 5000 
    goto return_label;
  }
  ldv_59775: 
#line 5003 
  ;
  
#line 5003 
  __retres = (_Bool)((int)((unsigned short)fhdr->asic_type_rev) >= (int)adapter->asic_rev);
  return_label: 
#line 5003 
                return __retres;
}


#line 5006  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_fw_download(struct be_adapter *adapter, struct firmware const *fw)
{
  int __retres;
  struct flash_file_hdr_g3 *fhdr3;
  struct image_hdr *img_hdr_ptr;
  int i;
  int num_imgs;
  struct be_dma_mem flash_cmd;
  int tmp_0;
  bool tmp;
  
#line 5008 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 5011 
  int status = 0;
  
#line 5014 
  fhdr3 = (struct flash_file_hdr_g3 *)fw->data;
  
#line 5015 
  tmp = be_check_ufi_compatibility(adapter,fhdr3);
  
#line 5015 
  if (tmp) 
#line 5015 
           tmp_0 = 0; else 
#line 5015 
                           tmp_0 = 1;
  
#line 5015 
  if (tmp_0) {
    
#line 5016 
    dev_err((struct device const *)dev,"Flash image is not compatible with adapter\n");
    
#line 5017 
    __retres = -22;
    
#line 5017 
    goto return_label;
  }
  else ;
  
#line 5020 
  flash_cmd.size = 32804U;
  
#line 5021 
  flash_cmd.va = dma_zalloc_coherent(dev,(unsigned long)flash_cmd.size,& flash_cmd.dma,208U);
  
#line 5023 
  if (flash_cmd.va == (void *)0) {
    
#line 5024 
    __retres = -12;
    
#line 5024 
    goto return_label;
  }
  else ;
  
#line 5026 
  num_imgs = (int)fhdr3->num_imgs;
  
#line 5027 
  i = 0;
  
#line 5027 
  goto ldv_59792;
  ldv_59791: 
#line 5028 
  ;
  
#line 5028 
  img_hdr_ptr = (struct image_hdr *)(fw->data + ((unsigned long)i * 48UL + 128UL));
  
#line 5031 
  if (((unsigned int)(adapter->pdev)->device != 529U && (unsigned int)(adapter->pdev)->device != 1792U) && img_hdr_ptr->imageid != 1U) 
    
#line 5033 
    goto ldv_59790; else ;
  
#line 5035 
  if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) 
    
#line 5036 
    status = be_flash_skyhawk(adapter,fw,& flash_cmd,num_imgs); else 
                                                                  
#line 5039 
                                                                  status = be_flash_BEx(adapter,fw,& flash_cmd,num_imgs);
  ldv_59790: 
#line 5040 
  ;
  
#line 5027 
  i += 1;
  ldv_59792: 
#line 5028 
  ;
  
#line 5027 
  if (i < num_imgs) 
#line 5029 
                    goto ldv_59791; else 
#line 5032 
                                         goto ldv_59793;
  ldv_59793: 
#line 5033 
  ;
  
#line 5043 
  dma_free_attrs(dev,(unsigned long)flash_cmd.size,flash_cmd.va,flash_cmd.dma,(struct dma_attrs *)0);
  
#line 5044 
  if (status == 0) 
#line 5045 
                   _dev_info((struct device const *)dev,"Firmware flashed successfully\n"); else ;
  
#line 5047 
  __retres = status;
  return_label: 
#line 5047 
                return __retres;
}


#line 5050  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
int be_load_fw(struct be_adapter *adapter, u8 *fw_file)
{
  int __retres;
  struct firmware const *fw;
  int status;
  int tmp_0;
  bool tmp;
  
#line 5055 
  tmp = netif_running((struct net_device const *)adapter->netdev);
  
#line 5055 
  if (tmp) 
#line 5055 
           tmp_0 = 0; else 
#line 5055 
                           tmp_0 = 1;
  
#line 5055 
  if (tmp_0) {
    
#line 5056 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Firmware load not allowed (interface is down)\n");
    
#line 5058 
    __retres = -100;
    
#line 5058 
    goto return_label;
  }
  else ;
  
#line 5061 
  status = request_firmware(& fw,(char const *)fw_file,& (adapter->pdev)->dev);
  
#line 5062 
  if (status != 0) 
#line 5063 
                   goto fw_exit; else ;
  
#line 5065 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Flashing firmware file %s\n",fw_file);
  
#line 5067 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    
#line 5068 
    status = lancer_fw_download(adapter,fw); else 
#line 5070 
                                                  status = be_fw_download(adapter,fw);
  
#line 5072 
  if (status == 0) 
#line 5073 
                   be_cmd_get_fw_ver(adapter); else ;
  fw_exit: 
#line 5075 
  ;
  
#line 5076 
  release_firmware(fw);
  
#line 5077 
  __retres = status;
  return_label: 
#line 5077 
                return __retres;
}


#line 5080  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_ndo_bridge_setlink(struct net_device *dev, struct nlmsghdr *nlh, u16 flags)
{
  int __retres;
  struct nlattr *attr;
  struct nlattr *br_spec;
  int rem;
  int tmp_1;
  int tmp_2;
  unsigned int tmp_3;
  char *tmp_4;
  int tmp_5;
  char *tmp_6;
  
#line 5083 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 5086 
  int status = 0;
  
#line 5087 
  u16 mode = (unsigned short)0U;
  
#line 5089 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) {
    
#line 5090 
    __retres = -95;
    
#line 5090 
    goto return_label;
  }
  else ;
  
#line 5092 
  br_spec = nlmsg_find_attr((struct nlmsghdr const *)nlh,16,26);
  
#line 5093 
  if (br_spec == (struct nlattr *)0) {
    
#line 5094 
    __retres = -22;
    
#line 5094 
    goto return_label;
  }
  else ;
  
#line 5096 
  attr = (struct nlattr *)nla_data((struct nlattr const *)br_spec);
  
#line 5096 
  rem = nla_len((struct nlattr const *)br_spec);
  
#line 5096 
  goto ldv_59815;
  ldv_59814: 
#line 5097 
  ;
  
#line 5097 
  tmp_1 = nla_type((struct nlattr const *)attr);
  
#line 5097 
  if (tmp_1 != 1) 
#line 5098 
                  goto ldv_59812; else ;
  
#line 5100 
  tmp_2 = nla_len((struct nlattr const *)attr);
  
#line 5100 
  if ((unsigned int)tmp_2 <= 1U) {
    
#line 5101 
    __retres = -22;
    
#line 5101 
    goto return_label;
  }
  else ;
  
#line 5103 
  mode = nla_get_u16((struct nlattr const *)attr);
  
#line 5104 
  if ((unsigned int)mode > 1U) {
    
#line 5105 
    __retres = -22;
    
#line 5105 
    goto return_label;
  }
  else ;
  
#line 5108 
  if ((unsigned int)mode == 1U) 
#line 5108 
                                tmp_3 = 3U; else 
#line 5108 
                                                 tmp_3 = 2U;
  
#line 5107 
  ;
  
#line 5107 
  ;
  
#line 5107 
  status = be_cmd_set_hsw_config(adapter,(unsigned short)0,0U,(unsigned short)((int)((unsigned short)adapter->if_handle)),(unsigned short)((int)tmp_3),(unsigned char)0);
  
#line 5112 
  if (status != 0) 
#line 5113 
                   goto err; else ;
  
#line 5115 
  if ((unsigned int)mode == 1U) 
#line 5115 
                                tmp_4 = (char *)"VEPA"; else 
#line 5115 
                                                             tmp_4 = (char *)"VEB";
  
#line 5115 
  ;
  
#line 5115 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"enabled switch mode: %s\n",tmp_4);
  
#line 5118 
  __retres = status;
  
#line 5118 
  goto return_label;
  ldv_59812: 
#line 5119 
  ;
  
#line 5096 
  attr = nla_next((struct nlattr const *)attr,& rem);
  ldv_59815: 
#line 5097 
  ;
  
#line 5096 
  tmp_5 = nla_ok((struct nlattr const *)attr,rem);
  
#line 5096 
  if (tmp_5 != 0) 
#line 5098 
                  goto ldv_59814; else 
#line 5101 
                                       goto ldv_59816;
  ldv_59816: 
#line 5102 
  ;
  err: 
#line 5120 
  ;
  
#line 5121 
  if ((unsigned int)mode == 1U) 
#line 5121 
                                tmp_6 = (char *)"VEPA"; else 
#line 5121 
                                                             tmp_6 = (char *)"VEB";
  
#line 5121 
  ;
  
#line 5121 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to set switch mode %s\n",tmp_6);
  
#line 5124 
  __retres = status;
  return_label: 
#line 5124 
                return __retres;
}


#line 5127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_ndo_bridge_getlink(struct sk_buff *skb, u32 pid, u32 seq, struct net_device *dev, u32 filter_mask, int nlflags)
{
  int __retres;
  u8 hsw_mode;
  int tmp_0;
  
#line 5131 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 5132 
  int status = 0;
  
#line 5135 
  if (((unsigned long)adapter->flags & 4UL) == 0UL) {
    
#line 5136 
    __retres = 0;
    
#line 5136 
    goto return_label;
  }
  else ;
  
#line 5139 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) || ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U)) 
    
#line 5140 
    hsw_mode = (unsigned char)2U;
  else {
    
#line 5142 
    status = be_cmd_get_hsw_config(adapter,(u16 *)0U,0U,(unsigned short)((int)((unsigned short)adapter->if_handle)),& hsw_mode,(bool *)0);
    
#line 5145 
    if (status != 0) {
      
#line 5146 
      __retres = 0;
      
#line 5146 
      goto return_label;
    }
    else ;
  }
  
#line 5149 
  tmp_0 = ndo_dflt_bridge_getlink(skb,pid,seq,dev,(unsigned short)((unsigned int)hsw_mode == 3U),0U,0U,nlflags,filter_mask,(int (*)(struct sk_buff *, struct net_device *, u32 ))0);
  
#line 5149 
  __retres = tmp_0;
  return_label: 
#line 5149 
                return __retres;
}


#line 5170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_add_vxlan_port(struct net_device *netdev, sa_family_t sa_family, __be16 port)
{
  int status;
  int tmp_1;
  int tmp_3;
  
#line 5173 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5174 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 5177 
  if (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) || (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U))) 
    
#line 5178 
    goto return_label;
  else {
    bool tmp_0;
    
#line 5177 
    tmp_0 = be_is_mc(adapter);
    
#line 5177 
    if ((int)tmp_0 != 0) 
#line 5178 
                         goto return_label; else ;
  }
  
#line 5180 
  if (((unsigned long)adapter->flags & 256UL) != 0UL) {
    
#line 5181 
    _dev_info((struct device const *)dev,"Only one UDP port supported for VxLAN offloads\n");
    
#line 5183 
    _dev_info((struct device const *)dev,"Disabling VxLAN offloads\n");
    
#line 5184 
    adapter->vxlan_port_count += 1;
    
#line 5185 
    goto err;
  }
  else ;
  
#line 5188 
  tmp_1 = adapter->vxlan_port_count;
  
#line 5188 
  adapter->vxlan_port_count += 1;
  
#line 5188 
  ;
  
#line 5188 
  if (tmp_1 > 0) 
#line 5189 
                 goto return_label; else ;
  
#line 5191 
  status = be_cmd_manage_iface(adapter,(unsigned int)adapter->if_handle,(unsigned char)0);
  
#line 5193 
  if (status != 0) {
    
#line 5194 
    dev_warn((struct device const *)dev,"Failed to convert normal interface to tunnel\n");
    
#line 5195 
    goto err;
  }
  else ;
  
#line 5198 
  status = be_cmd_set_vxlan_port(adapter,(unsigned short)((int)port));
  
#line 5199 
  if (status != 0) {
    
#line 5200 
    dev_warn((struct device const *)dev,"Failed to add VxLAN port\n");
    
#line 5201 
    goto err;
  }
  else ;
  
#line 5203 
  adapter->flags |= 256U;
  
#line 5204 
  adapter->vxlan_port = port;
  
#line 5206 
  netdev->hw_enc_features |= 68222994ULL;
  
#line 5209 
  netdev->hw_features |= 67108864ULL;
  
#line 5210 
  netdev->features |= 67108864ULL;
  
#line 5212 
  if (0 != 0) 
#line 5212 
              tmp_3 = (int)((unsigned short)(((int)port << 8) | ((int)port >> 8)));
  else {
    __u16 tmp_2;
    
#line 5212 
    tmp_2 = __fswab16((unsigned short)((int)port));
    
#line 5212 
    tmp_3 = (int)tmp_2;
  }
  
#line 5212 
  ;
  
#line 5212 
  _dev_info((struct device const *)dev,"Enabled VxLAN offloads for UDP port %d\n",tmp_3);
  
#line 5214 
  goto return_label;
  err: 
#line 5215 
  ;
  
#line 5216 
  be_disable_vxlan_offloads(adapter);
  return_label: 
#line 5217 
                return;
}


#line 5219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_del_vxlan_port(struct net_device *netdev, sa_family_t sa_family, __be16 port)
{
  int tmp_2;
  
#line 5222 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5224 
  if (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) || (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U))) 
    
#line 5225 
    goto return_label;
  else {
    bool tmp_0;
    
#line 5224 
    tmp_0 = be_is_mc(adapter);
    
#line 5224 
    if ((int)tmp_0 != 0) 
#line 5225 
                         goto return_label; else ;
  }
  
#line 5227 
  if ((int)adapter->vxlan_port != (int)port) 
#line 5228 
                                             goto done; else ;
  
#line 5230 
  be_disable_vxlan_offloads(adapter);
  
#line 5232 
  if (0 != 0) 
#line 5232 
              tmp_2 = (int)((unsigned short)(((int)port << 8) | ((int)port >> 8)));
  else {
    __u16 tmp_1;
    
#line 5232 
    tmp_1 = __fswab16((unsigned short)((int)port));
    
#line 5232 
    tmp_2 = (int)tmp_1;
  }
  
#line 5232 
  ;
  
#line 5232 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Disabled VxLAN offloads for UDP port %d\n",tmp_2);
  done: 
#line 5235 
  ;
  
#line 5236 
  adapter->vxlan_port_count -= 1;
  return_label: 
#line 5237 
                return;
}


#line 5239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static netdev_features_t be_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  netdev_features_t __retres;
  __be16 tmp_0;
  
#line 5243 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 5244 
  u8 l4_hdr = (unsigned char)0U;
  
#line 5249 
  if ((unsigned int)*((unsigned char *)skb + 146UL) == 0U || ((unsigned long)adapter->flags & 256UL) == 0UL) {
    
#line 5251 
    __retres = features;
    
#line 5251 
    goto return_label;
  }
  else ;
  
#line 5259 
  tmp_0 = vlan_get_protocol(skb);
  
#line 5259 
  switch ((int)tmp_0) {
    struct iphdr *tmp_1;
    struct ipv6hdr *tmp_2;
    case 8: 
#line 5260 
    ;
    
#line 5261 
    tmp_1 = ip_hdr((struct sk_buff const *)skb);
    
#line 5261 
    l4_hdr = tmp_1->protocol;
    
#line 5262 
    goto ldv_59852;
    case 56710: 
#line 5263 
    ;
    
#line 5264 
    tmp_2 = ipv6_hdr((struct sk_buff const *)skb);
    
#line 5264 
    l4_hdr = tmp_2->nexthdr;
    
#line 5265 
    goto ldv_59852;
    default: 
#line 5266 
    ;
    
#line 5267 
    __retres = features;
    
#line 5267 
    goto return_label;
  }
  ldv_59852: 
#line 5270 
  ;
  
#line 5270 
  if (((unsigned int)l4_hdr != 17U || (unsigned int)*((unsigned char *)skb + 147UL) != 0U) || (unsigned int)skb->__anonCompField_sk_buff_74.inner_protocol != 22629U) {
    
#line 5275 
    __retres = features & 18446744073172746213ULL;
    
#line 5275 
    goto return_label;
  }
  else {
    unsigned char *tmp_3;
    unsigned char *tmp_4;
    
#line 5272 
    tmp_3 = skb_inner_mac_header((struct sk_buff const *)skb);
    
#line 5273 
    tmp_4 = skb_transport_header((struct sk_buff const *)skb);
    
#line 5272 
    if ((long)tmp_3 - (long)tmp_4 != 16L) {
      
#line 5275 
      __retres = features & 18446744073172746213ULL;
      
#line 5275 
      goto return_label;
    }
    else ;
  }
  
#line 5277 
  __retres = features;
  return_label: 
#line 5277 
                return __retres;
}


#line 5281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct net_device_ops const be_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & be_open, .ndo_stop = & be_close, .ndo_start_xmit = & be_xmit, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & be_set_rx_mode, .ndo_set_mac_address = & be_mac_addr_set, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = (int (*)(struct net_device *, struct ifreq *, int ))0, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & be_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = (void (*)(struct net_device *))0, .ndo_get_stats64 = & be_get_stats64, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = & be_vlan_add_vid, .ndo_vlan_rx_kill_vid = & be_vlan_rem_vid, .ndo_poll_controller = & be_netpoll, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = & be_busy_poll, .ndo_set_vf_mac = & be_set_vf_mac, .ndo_set_vf_vlan = & be_set_vf_vlan, .ndo_set_vf_rate = & be_set_vf_tx_rate, .ndo_set_vf_spoofchk = & be_set_vf_spoofchk, .ndo_get_vf_config = & be_get_vf_config, .ndo_set_vf_link_state = & be_set_vf_link_state, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = (netdev_features_t (*)(struct net_device *, netdev_features_t ))0, .ndo_set_features = (int (*)(struct net_device *, netdev_features_t ))0, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = & be_ndo_bridge_setlink, .ndo_bridge_getlink = & be_ndo_bridge_getlink, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = & be_add_vxlan_port, .ndo_del_vxlan_port = & be_del_vxlan_port, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = & be_features_check, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 5313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_netdev_init(struct net_device *netdev)
{
  bool tmp_0;
  
#line 5315 
  struct be_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5317 
  netdev->hw_features |= 17180983443ULL;
  
#line 5320 
  tmp_0 = be_multi_rxq((struct be_adapter const *)adapter);
  
#line 5320 
  if ((int)tmp_0 != 0) 
#line 5321 
                       netdev->hw_features |= 8589934592ULL; else ;
  
#line 5323 
  netdev->features = (netdev->features | netdev->hw_features) | 768ULL;
  
#line 5326 
  netdev->vlan_features |= 1114131ULL;
  
#line 5329 
  netdev->priv_flags |= 131072U;
  
#line 5331 
  netdev->flags |= 4096U;
  
#line 5333 
  netif_set_gso_max_size(netdev,65521U);
  
#line 5335 
  netdev->netdev_ops = & be_netdev_ops;
  
#line 5337 
  netdev->ethtool_ops = & be_ethtool_ops;
  
#line 5338 
  return;
}


#line 5340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_cleanup(struct be_adapter *adapter)
{
  bool tmp;
  
#line 5342 
  struct net_device *netdev = adapter->netdev;
  
#line 5344 
  rtnl_lock();
  
#line 5345 
  netif_device_detach(netdev);
  
#line 5346 
  tmp = netif_running((struct net_device const *)netdev);
  
#line 5346 
  if ((int)tmp != 0) 
#line 5347 
                     be_close(netdev); else ;
  
#line 5348 
  rtnl_unlock();
  
#line 5350 
  be_clear(adapter);
  
#line 5351 
  return;
}


#line 5353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_resume(struct be_adapter *adapter)
{
  int __retres;
  int status;
  bool tmp;
  
#line 5355 
  struct net_device *netdev = adapter->netdev;
  
#line 5358 
  status = be_setup(adapter);
  
#line 5359 
  if (status != 0) {
    
#line 5360 
    __retres = status;
    
#line 5360 
    goto return_label;
  }
  else ;
  
#line 5362 
  tmp = netif_running((struct net_device const *)netdev);
  
#line 5362 
  if ((int)tmp != 0) {
    
#line 5363 
    status = be_open(netdev);
    
#line 5364 
    if (status != 0) {
      
#line 5365 
      __retres = status;
      
#line 5365 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 5368 
  netif_device_attach(netdev);
  
#line 5370 
  __retres = 0;
  return_label: 
#line 5370 
                return __retres;
}


#line 5373  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_err_recover(struct be_adapter *adapter)
{
  int __retres;
  int status;
  
#line 5375 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 5378 
  status = be_resume(adapter);
  
#line 5379 
  if (status != 0) 
#line 5380 
                   goto err; else ;
  
#line 5382 
  _dev_info((struct device const *)dev,"Adapter recovery successful\n");
  
#line 5383 
  __retres = 0;
  
#line 5383 
  goto return_label;
  err: 
#line 5384 
  ;
  
#line 5385 
  if ((unsigned int)adapter->virtfn == 0U) 
#line 5386 
                                           dev_err((struct device const *)dev,"Adapter recovery failed\n"); else 
                                                                    
#line 5388 
                                                                    dev_err((struct device const *)dev,"Re-trying adapter recovery\n");
  
#line 5390 
  __retres = status;
  return_label: 
#line 5390 
                return __retres;
}


#line 5393  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_err_detection_task(struct work_struct *work)
{
  struct be_adapter *tmp;
  u8 tmp_0;
  {
    
#line 5396 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 5396 
    tmp = (struct be_adapter *)__mptr + 18446744073708209344U;
  }
  
#line 5395 
  struct be_adapter *adapter = tmp;
  
#line 5398 
  int status = 0;
  
#line 5400 
  be_detect_error(adapter);
  
#line 5402 
  tmp_0 = be_check_error(adapter,3U);
  
#line 5402 
  if ((unsigned int)tmp_0 != 0U) {
    
#line 5403 
    be_cleanup(adapter);
    
#line 5406 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
      
#line 5407 
      status = be_err_recover(adapter); else ;
  }
  else ;
  
#line 5411 
  if (status == 0 || (unsigned int)adapter->virtfn != 0U) 
#line 5412 
                                                          be_schedule_err_detection(adapter); else ;
  
#line 5413 
  return;
}


#line 5415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_log_sfp_info(struct be_adapter *adapter)
{
  int status;
  
#line 5419 
  status = be_cmd_query_sfp_info(adapter);
  
#line 5420 
  if (status == 0) 
#line 5421 
                   dev_err((struct device const *)(& (adapter->pdev)->dev),"Unqualified SFP+ detected on %c from %s part no: %s",(int)adapter->port_name,(u8 *)(& adapter->phy.vendor_name),(u8 *)(& adapter->phy.vendor_pn)); else ;
  
#line 5426 
  adapter->flags &= 4294966271U;
  
#line 5427 
  return;
}


#line 5429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_worker(struct work_struct *work)
{
  struct be_adapter *tmp;
  struct be_rx_obj *rxo;
  int i;
  int tmp_1;
  bool tmp_0;
  unsigned long tmp_3;
  {
    
#line 5432 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 5432 
    tmp = (struct be_adapter *)__mptr + 18446744073708209576U;
  }
  
#line 5431 
  struct be_adapter *adapter = tmp;
  
#line 5439 
  tmp_0 = netif_running((struct net_device const *)adapter->netdev);
  
#line 5439 
  if (tmp_0) 
#line 5439 
             tmp_1 = 0; else 
#line 5439 
                             tmp_1 = 1;
  
#line 5439 
  if (tmp_1) {
    
#line 5440 
    local_bh_disable();
    
#line 5441 
    be_process_mcc(adapter);
    
#line 5442 
    local_bh_enable();
    
#line 5443 
    goto reschedule;
  }
  else ;
  
#line 5446 
  if (! adapter->stats_cmd_sent) 
    
#line 5447 
    if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
      
#line 5448 
      lancer_cmd_get_pport_stats(adapter,& adapter->stats_cmd); else 
                                                                  
#line 5451 
                                                                  be_cmd_get_stats(adapter,& adapter->stats_cmd);
  else ;
  
#line 5454 
  if ((unsigned int)adapter->virtfn == 0U) {
    u32 tmp_2;
    
#line 5454 
    tmp_2 = MODULO((unsigned short)((int)adapter->work_counter),(unsigned short)((int)((unsigned short)adapter->be_get_temp_freq)));
    
#line 5454 
    if (tmp_2 == 0U) 
#line 5456 
                     be_cmd_get_die_temperature(adapter); else ;
  }
  else ;
  
#line 5458 
  i = 0;
  
#line 5458 
  rxo = & adapter->rx_obj[i];
  
#line 5458 
  goto ldv_59896;
  ldv_59895: 
#line 5459 
  ;
  
#line 5462 
  if ((int)rxo->rx_post_starved != 0) 
#line 5463 
                                      be_post_rx_frags(rxo,208U,64U); else ;
  
#line 5458 
  i += 1;
  
#line 5458 
  rxo += 1;
  ldv_59896: 
#line 5459 
  ;
  
#line 5458 
  if ((int)adapter->num_rx_qs > i) 
#line 5460 
                                   goto ldv_59895; else 
#line 5463 
                                                        goto ldv_59897;
  ldv_59897: 
#line 5464 
  ;
  
#line 5467 
  if ((unsigned int)(adapter->pdev)->device != 1824U && (unsigned int)(adapter->pdev)->device != 1832U) 
    
#line 5468 
    be_eqd_update(adapter,(_Bool)0); else ;
  
#line 5470 
  if (((unsigned long)adapter->flags & 1024UL) != 0UL) 
#line 5471 
                                                       be_log_sfp_info(adapter); else ;
  reschedule: 
#line 5473 
  ;
  
#line 5474 
  adapter->work_counter = (u16)((int)adapter->work_counter + 1);
  
#line 5475 
  tmp_3 = msecs_to_jiffies(1000U);
  
#line 5475 
  ;
  
#line 5475 
  ldv_schedule_delayed_work_88(& adapter->work,tmp_3);
  
#line 5476 
  return;
}


#line 5478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_unmap_pci_bars(struct be_adapter *adapter)
{
  
#line 5480 
  if (adapter->csr != (u8 *)0U) 
#line 5481 
                                pci_iounmap(adapter->pdev,(void *)adapter->csr); else ;
  
#line 5482 
  if (adapter->db != (u8 *)0U) 
#line 5483 
                               pci_iounmap(adapter->pdev,(void *)adapter->db); else ;
  
#line 5484 
  return;
}


#line 5486  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int db_bar(struct be_adapter *adapter)
{
  int __retres;
  
#line 5488 
  if (((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) || (unsigned int)adapter->virtfn != 0U) {
    
#line 5489 
    __retres = 0;
    
#line 5489 
    goto return_label;
  }
  else {
    
#line 5491 
    __retres = 4;
    
#line 5491 
    goto return_label;
  }
  return_label: 
#line 5488 
                return __retres;
}


#line 5494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_roce_map_pci_bars(struct be_adapter *adapter)
{
  int __retres;
  
#line 5496 
  if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) {
    int tmp;
    int tmp_0;
    
#line 5497 
    adapter->roce_db.size = 4096U;
    
#line 5498 
    tmp = db_bar(adapter);
    
#line 5498 
    adapter->roce_db.io_addr = (adapter->pdev)->resource[tmp].start;
    
#line 5500 
    tmp_0 = db_bar(adapter);
    
#line 5500 
    ;
    
#line 5500 
    if ((adapter->pdev)->resource[tmp_0].start != 0ULL) 
#line 5500 
                                                        goto _LOR;
    else {
      int tmp_1;
      int tmp_2;
      
#line 5500 
      tmp_1 = db_bar(adapter);
      
#line 5500 
      tmp_2 = db_bar(adapter);
      
#line 5500 
      ;
      
#line 5500 
      if ((adapter->pdev)->resource[tmp_1].end != (adapter->pdev)->resource[tmp_2].start) {
        int tmp_3;
        int tmp_4;
        _LOR: 
#line 5500 
        tmp_3 = db_bar(adapter);
        
#line 5500 
        tmp_4 = db_bar(adapter);
        
#line 5500 
        adapter->roce_db.total_size = ((unsigned int)(adapter->pdev)->resource[tmp_3].end - (unsigned int)(adapter->pdev)->resource[tmp_4].start) + 1U;
      }
      else 
#line 5500 
           adapter->roce_db.total_size = 0U;
    }
  }
  else ;
  
#line 5503 
  __retres = 0;
  
#line 5503 
  return __retres;
}


#line 5506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_map_pci_bars(struct be_adapter *adapter)
{
  int __retres;
  u8 *addr;
  u32 sli_intf;
  void *tmp_1;
  int tmp_0;
  
#line 5508 
  struct pci_dev *pdev = adapter->pdev;
  
#line 5512 
  pci_read_config_dword((struct pci_dev const *)adapter->pdev,88,& sli_intf);
  
#line 5513 
  adapter->sli_family = (sli_intf >> 8) & 15U;
  
#line 5515 
  adapter->virtfn = (unsigned char)((unsigned int)((unsigned char)sli_intf) & 1U);
  
#line 5517 
  if ((((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U)) && (unsigned int)adapter->virtfn == 0U) {
    
#line 5518 
    adapter->csr = (u8 *)pci_iomap(pdev,2,0UL);
    
#line 5519 
    if (adapter->csr == (u8 *)0U) {
      
#line 5520 
      __retres = -12;
      
#line 5520 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 5523 
  tmp_0 = db_bar(adapter);
  
#line 5523 
  ;
  
#line 5523 
  tmp_1 = pci_iomap(pdev,tmp_0,0UL);
  
#line 5523 
  addr = (u8 *)tmp_1;
  
#line 5524 
  if (addr == (u8 *)0U) 
#line 5525 
                        goto pci_map_err; else ;
  
#line 5526 
  adapter->db = addr;
  
#line 5528 
  if (((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) || (((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) || ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U))) 
    
#line 5529 
    if ((unsigned int)adapter->virtfn == 0U) {
      
#line 5531 
      addr = (u8 *)pci_iomap(pdev,((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) != 0,0UL);
      
#line 5532 
      if (addr == (u8 *)0U) 
#line 5533 
                            goto pci_map_err; else ;
      
#line 5534 
      adapter->pcicfg = addr;
    }
    else 
#line 5536 
         adapter->pcicfg = adapter->db + 4096U;
  else ;
  
#line 5540 
  be_roce_map_pci_bars(adapter);
  
#line 5541 
  __retres = 0;
  
#line 5541 
  goto return_label;
  pci_map_err: 
#line 5543 
  ;
  
#line 5544 
  dev_err((struct device const *)(& pdev->dev),"Error in mapping PCI BARs\n");
  
#line 5545 
  be_unmap_pci_bars(adapter);
  
#line 5546 
  __retres = -12;
  return_label: 
#line 5546 
                return __retres;
}


#line 5549  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_drv_cleanup(struct be_adapter *adapter)
{
  
#line 5551 
  struct be_dma_mem *mem = & adapter->mbox_mem_alloced;
  
#line 5552 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 5554 
  if (mem->va != (void *)0) 
#line 5555 
                            dma_free_attrs(dev,(unsigned long)mem->size,mem->va,mem->dma,(struct dma_attrs *)0); else ;
  
#line 5557 
  mem = & adapter->rx_filter;
  
#line 5558 
  if (mem->va != (void *)0) 
#line 5559 
                            dma_free_attrs(dev,(unsigned long)mem->size,mem->va,mem->dma,(struct dma_attrs *)0); else ;
  
#line 5561 
  mem = & adapter->stats_cmd;
  
#line 5562 
  if (mem->va != (void *)0) 
#line 5563 
                            dma_free_attrs(dev,(unsigned long)mem->size,mem->va,mem->dma,(struct dma_attrs *)0); else ;
  
#line 5564 
  return;
}


#line 5567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_drv_init(struct be_adapter *adapter)
{
  int __retres;
  
#line 5569 
  struct be_dma_mem *mbox_mem_alloc = & adapter->mbox_mem_alloced;
  
#line 5570 
  struct be_dma_mem *mbox_mem_align = & adapter->mbox_mem;
  
#line 5571 
  struct be_dma_mem *rx_filter = & adapter->rx_filter;
  
#line 5572 
  struct be_dma_mem *stats_cmd = & adapter->stats_cmd;
  
#line 5573 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 5574 
  int status = 0;
  
#line 5576 
  mbox_mem_alloc->size = 288U;
  
#line 5577 
  mbox_mem_alloc->va = dma_zalloc_coherent(dev,(unsigned long)mbox_mem_alloc->size,& mbox_mem_alloc->dma,208U);
  
#line 5580 
  if (mbox_mem_alloc->va == (void *)0) {
    
#line 5581 
    __retres = -12;
    
#line 5581 
    goto return_label;
  }
  else ;
  
#line 5583 
  mbox_mem_align->size = 272U;
  
#line 5584 
  mbox_mem_align->va = (void *)(((unsigned long)mbox_mem_alloc->va + 15UL) & 18446744073709551600UL);
  
#line 5585 
  mbox_mem_align->dma = (unsigned long long)((unsigned long)mbox_mem_alloc->dma + 15UL) & 18446744073709551600ULL;
  
#line 5587 
  rx_filter->size = 424U;
  
#line 5588 
  rx_filter->va = dma_zalloc_coherent(dev,(unsigned long)rx_filter->size,& rx_filter->dma,208U);
  
#line 5590 
  if (rx_filter->va == (void *)0) {
    
#line 5591 
    status = -12;
    
#line 5592 
    goto free_mbox;
  }
  else ;
  
#line 5595 
  if ((unsigned int)(adapter->pdev)->device == 57888U || (unsigned int)(adapter->pdev)->device == 57896U) 
    
#line 5596 
    stats_cmd->size = 672U;
  else 
    
#line 5597 
    if ((unsigned int)(adapter->pdev)->device == 529U || (unsigned int)(adapter->pdev)->device == 1792U) 
      
#line 5598 
      stats_cmd->size = 1076U;
    else 
      
#line 5599 
      if ((unsigned int)(adapter->pdev)->device == 545U || (unsigned int)(adapter->pdev)->device == 1808U) 
        
#line 5600 
        stats_cmd->size = 1864U; else 
#line 5602 
                                      stats_cmd->size = 2696U;
  
#line 5603 
  stats_cmd->va = dma_zalloc_coherent(dev,(unsigned long)stats_cmd->size,& stats_cmd->dma,208U);
  
#line 5605 
  if (stats_cmd->va == (void *)0) {
    
#line 5606 
    status = -12;
    
#line 5607 
    goto free_rx_filter;
  }
  else ;
  {
    struct lock_class_key __key;
    
#line 5610 
    __mutex_init(& adapter->mbox_lock,"&adapter->mbox_lock",& __key);
  }
  
#line 5611 
  spinlock_check(& adapter->mcc_lock);
  {
    struct lock_class_key __key_0;
    
#line 5611 
    __raw_spin_lock_init(& adapter->mcc_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->mcc_lock)->rlock",& __key_0);
  }
  
#line 5612 
  spinlock_check(& adapter->mcc_cq_lock);
  {
    struct lock_class_key __key_1;
    
#line 5612 
    __raw_spin_lock_init(& adapter->mcc_cq_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->mcc_cq_lock)->rlock",& __key_1);
  }
  
#line 5613 
  init_completion(& adapter->et_cmd_compl);
  
#line 5615 
  pci_save_state(adapter->pdev);
  {
    struct lock_class_key __key_2;
    
#line 5617 
    __init_work(& adapter->work.work,0);
    
#line 5617 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 5617 
    adapter->work.work.data = __constr_expr_37;
    
#line 5617 
    lockdep_init_map(& adapter->work.work.lockdep_map,"(&(&adapter->work)->work)",& __key_2,0);
    
#line 5617 
    INIT_LIST_HEAD(& adapter->work.work.entry);
    
#line 5617 
    adapter->work.work.func = & be_worker;
  }
  {
    struct lock_class_key __key_3;
    
#line 5617 
    init_timer_key(& adapter->work.timer,2097152U,"(&(&adapter->work)->timer)",& __key_3);
  }
  
#line 5617 
  adapter->work.timer.function = & delayed_work_timer_fn;
  
#line 5617 
  adapter->work.timer.data = (unsigned long)(& adapter->work);
  {
    struct lock_class_key __key_4;
    
#line 5618 
    __init_work(& adapter->be_err_detection_work.work,0);
    
#line 5618 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 5618 
    adapter->be_err_detection_work.work.data = __constr_expr_38;
    
#line 5618 
    lockdep_init_map(& adapter->be_err_detection_work.work.lockdep_map,"(&(&adapter->be_err_detection_work)->work)",& __key_4,0);
    
#line 5618 
    INIT_LIST_HEAD(& adapter->be_err_detection_work.work.entry);
    
#line 5618 
    adapter->be_err_detection_work.work.func = & be_err_detection_task;
  }
  {
    struct lock_class_key __key_5;
    
#line 5618 
    init_timer_key(& adapter->be_err_detection_work.timer,2097152U,"(&(&adapter->be_err_detection_work)->timer)",& __key_5);
  }
  
#line 5618 
  adapter->be_err_detection_work.timer.function = & delayed_work_timer_fn;
  
#line 5618 
  adapter->be_err_detection_work.timer.data = (unsigned long)(& adapter->be_err_detection_work);
  
#line 5621 
  adapter->rx_fc = 1U;
  
#line 5622 
  adapter->tx_fc = 1U;
  
#line 5625 
  adapter->be_get_temp_freq = 64;
  
#line 5627 
  __retres = 0;
  
#line 5627 
  goto return_label;
  free_rx_filter: 
#line 5629 
  ;
  
#line 5630 
  dma_free_attrs(dev,(unsigned long)rx_filter->size,rx_filter->va,rx_filter->dma,(struct dma_attrs *)0);
  free_mbox: 
#line 5631 
  ;
  
#line 5632 
  dma_free_attrs(dev,(unsigned long)mbox_mem_alloc->size,mbox_mem_alloc->va,mbox_mem_alloc->dma,(struct dma_attrs *)0);
  
#line 5634 
  __retres = status;
  return_label: 
#line 5634 
                return __retres;
}


#line 5637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_remove(struct pci_dev *pdev)
{
  
#line 5639 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5641 
  if (adapter == (struct be_adapter *)0) 
#line 5642 
                                         goto return_label; else ;
  
#line 5644 
  be_roce_dev_remove(adapter);
  
#line 5645 
  be_intr_set(adapter,(_Bool)0);
  
#line 5647 
  be_cancel_err_detection(adapter);
  
#line 5649 
  ldv_unregister_netdev_89(adapter->netdev);
  
#line 5651 
  be_clear(adapter);
  
#line 5654 
  be_cmd_fw_clean(adapter);
  
#line 5656 
  be_unmap_pci_bars(adapter);
  
#line 5657 
  be_drv_cleanup(adapter);
  
#line 5659 
  pci_disable_pcie_error_reporting(pdev);
  
#line 5661 
  pci_release_regions(pdev);
  
#line 5662 
  pci_disable_device(pdev);
  
#line 5664 
  ldv_free_netdev_90(adapter->netdev);
  return_label: 
#line 5665 
                return;
}


#line 5667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static ssize_t be_hwmon_show_temp(struct device *dev, struct device_attribute *dev_attr, char *buf)
{
  ssize_t __retres;
  
#line 5671 
  struct be_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 5674 
  if ((unsigned int)adapter->hwmon_info.be_on_die_temp == 255U) {
    
#line 5675 
    __retres = -5L;
    
#line 5675 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 5677 
    tmp_0 = sprintf(buf,"%u\n",(int)adapter->hwmon_info.be_on_die_temp * 1000);
    
#line 5677 
    __retres = (long)tmp_0;
    
#line 5677 
    goto return_label;
  }
  return_label: 
#line 5674 
                return __retres;
}


#line 5681  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct sensor_device_attribute sensor_dev_attr_temp1_input = {.dev_attr = {.attr = {.name = "temp1_input", .mode = (unsigned short)292U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & be_hwmon_show_temp, .store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0}, .index = 1};

#line 5684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct attribute *be_hwmon_attrs[2U] = {& sensor_dev_attr_temp1_input.dev_attr.attr, (struct attribute *)0};

#line 5689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct attribute_group const be_hwmon_group = {.name = (char const *)0, .is_visible = (umode_t (*)(struct kobject *, struct attribute *, int ))0, .attrs = (struct attribute **)(& be_hwmon_attrs), .bin_attrs = (struct bin_attribute **)0};

#line 5689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct attribute_group const *be_hwmon_groups[2U] = {& be_hwmon_group, (struct attribute_group const *)0};

#line 5691  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static char *mc_name(struct be_adapter *adapter)
{
  
#line 5693 
  char *str = (char *)"";
  
#line 5695 
  switch ((int)adapter->mc_type) {
    case 2: 
#line 5696 
    ;
    
#line 5697 
    str = (char *)"UMC";
    
#line 5698 
    goto ldv_59976;
    case 3: 
#line 5699 
    ;
    
#line 5700 
    str = (char *)"FLEX10";
    
#line 5701 
    goto ldv_59976;
    case 4: 
#line 5702 
    ;
    
#line 5703 
    str = (char *)"vNIC-1";
    
#line 5704 
    goto ldv_59976;
    case 5: 
#line 5705 
    ;
    
#line 5706 
    str = (char *)"nPAR";
    
#line 5707 
    goto ldv_59976;
    case 6: 
#line 5708 
    ;
    
#line 5709 
    str = (char *)"UFP";
    
#line 5710 
    goto ldv_59976;
    case 7: 
#line 5711 
    ;
    
#line 5712 
    str = (char *)"vNIC-2";
    
#line 5713 
    goto ldv_59976;
    default: 
#line 5714 
    ;
    
#line 5715 
    str = (char *)"";
  }
  ldv_59976: 
#line 5718 
  ;
  
#line 5718 
  return str;
}


#line 5721  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static char *func_name(struct be_adapter *adapter)
{
  char *tmp;
  
#line 5723 
  if ((unsigned int)adapter->virtfn == 0U) 
#line 5723 
                                           tmp = (char *)"PF"; else 
#line 5723 
                                                                    tmp = (char *)"VF";
  
#line 5723 
  return tmp;
}


#line 5726  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
__inline static char *nic_name(struct pci_dev *pdev)
{
  char *__retres;
  
#line 5728 
  switch ((int)pdev->device) {
    case 1792: 
#line 5729 
    ;
    
#line 5730 
    __retres = (char *)"Emulex OneConnect";
    
#line 5730 
    goto return_label;
    case 1808: 
#line 5731 
    ;
    
#line 5732 
    __retres = (char *)"Emulex OneConnect";
    
#line 5732 
    goto return_label;
    case 57888: 
#line 5733 
    ;
    case 57896: 
#line 5734 
    ;
    
#line 5735 
    __retres = (char *)"Emulex OneConnect";
    
#line 5735 
    goto return_label;
    case 545: 
#line 5736 
    ;
    
#line 5737 
    __retres = (char *)"Emulex BladeEngine3";
    
#line 5737 
    goto return_label;
    case 1824: 
#line 5738 
    ;
    case 1832: 
#line 5739 
    ;
    
#line 5740 
    __retres = (char *)"Emulex OneConnect";
    
#line 5740 
    goto return_label;
    default: 
#line 5741 
    ;
    
#line 5742 
    __retres = (char *)"Emulex BladeEngine2";
    
#line 5742 
    goto return_label;
  }
  return_label: 
#line 5728 
                return __retres;
}


#line 5746  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_probe(struct pci_dev *pdev, struct pci_device_id const *pdev_id)
{
  int __retres;
  struct be_adapter *adapter;
  struct net_device *netdev;
  char *tmp_0;
  char *tmp_1;
  char *tmp_2;
  char *tmp_3;
  
#line 5750 
  int status = 0;
  
#line 5752 
  _dev_info((struct device const *)(& pdev->dev),"%s version is %s\n",(char *)"be2net",(char *)"10.6.0.2");
  
#line 5754 
  status = pci_enable_device(pdev);
  
#line 5755 
  if (status != 0) 
#line 5756 
                   goto do_none; else ;
  
#line 5758 
  status = pci_request_regions(pdev,"be2net");
  
#line 5759 
  if (status != 0) 
#line 5760 
                   goto disable_dev; else ;
  
#line 5761 
  pci_set_master(pdev);
  
#line 5763 
  netdev = ldv_alloc_etherdev_mqs_91(1343872,32U,32U);
  
#line 5764 
  if (netdev == (struct net_device *)0) {
    
#line 5765 
    status = -12;
    
#line 5766 
    goto rel_reg;
  }
  else ;
  
#line 5768 
  adapter = (struct be_adapter *)netdev_priv((struct net_device const *)netdev);
  
#line 5769 
  adapter->pdev = pdev;
  
#line 5770 
  pci_set_drvdata(pdev,(void *)adapter);
  
#line 5771 
  adapter->netdev = netdev;
  
#line 5772 
  netdev->dev.parent = & pdev->dev;
  
#line 5774 
  status = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  
#line 5775 
  if (status == 0) 
#line 5776 
                   netdev->features |= 32ULL;
  else {
    
#line 5778 
    status = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    
#line 5779 
    if (status != 0) {
      
#line 5780 
      dev_err((struct device const *)(& pdev->dev),"Could not set PCI DMA Mask\n");
      
#line 5781 
      goto free_netdev;
    }
    else ;
  }
  
#line 5785 
  status = pci_enable_pcie_error_reporting(pdev);
  
#line 5786 
  if (status == 0) 
#line 5787 
                   _dev_info((struct device const *)(& pdev->dev),"PCIe error reporting enabled\n"); else ;
  
#line 5789 
  status = be_map_pci_bars(adapter);
  
#line 5790 
  if (status != 0) 
#line 5791 
                   goto free_netdev; else ;
  
#line 5793 
  status = be_drv_init(adapter);
  
#line 5794 
  if (status != 0) 
#line 5795 
                   goto unmap_bars; else ;
  
#line 5797 
  status = be_setup(adapter);
  
#line 5798 
  if (status != 0) 
#line 5799 
                   goto drv_cleanup; else ;
  
#line 5801 
  be_netdev_init(netdev);
  
#line 5802 
  status = ldv_register_netdev_92(netdev);
  
#line 5803 
  if (status != 0) 
#line 5804 
                   goto unsetup; else ;
  
#line 5806 
  be_roce_dev_add(adapter);
  
#line 5808 
  be_schedule_err_detection(adapter);
  
#line 5811 
  if ((unsigned int)adapter->virtfn == 0U) {
    
#line 5812 
    adapter->hwmon_info.hwmon_dev = devm_hwmon_device_register_with_groups(& pdev->dev,"be2net",(void *)adapter,(struct attribute_group const **)(& be_hwmon_groups));
    
#line 5817 
    adapter->hwmon_info.be_on_die_temp = (unsigned char)255U;
  }
  else ;
  
#line 5820 
  ;
  
#line 5820 
  tmp_0 = mc_name(adapter);
  
#line 5820 
  tmp_1 = func_name(adapter);
  
#line 5820 
  tmp_2 = nic_name(pdev);
  
#line 5820 
  ;
  
#line 5820 
  _dev_info((struct device const *)(& pdev->dev),"%s: %s %s port %c\n",tmp_2,tmp_1,tmp_0,(int)adapter->port_name);
  
#line 5823 
  __retres = 0;
  
#line 5823 
  goto return_label;
  unsetup: 
#line 5825 
  ;
  
#line 5826 
  be_clear(adapter);
  drv_cleanup: 
#line 5827 
  ;
  
#line 5828 
  be_drv_cleanup(adapter);
  unmap_bars: 
#line 5829 
  ;
  
#line 5830 
  be_unmap_pci_bars(adapter);
  free_netdev: 
#line 5831 
  ;
  
#line 5832 
  ldv_free_netdev_93(netdev);
  rel_reg: 
#line 5833 
  ;
  
#line 5834 
  pci_release_regions(pdev);
  disable_dev: 
#line 5835 
  ;
  
#line 5836 
  pci_disable_device(pdev);
  do_none: 
#line 5837 
  ;
  
#line 5838 
  tmp_3 = nic_name(pdev);
  
#line 5838 
  ;
  
#line 5838 
  dev_err((struct device const *)(& pdev->dev),"%s initialization failed\n",tmp_3);
  
#line 5839 
  __retres = status;
  return_label: 
#line 5839 
                return __retres;
}


#line 5842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_suspend(struct pci_dev *pdev, pm_message_t state)
{
  int __retres;
  pci_power_t tmp_0;
  
#line 5844 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5846 
  if ((int)adapter->wol_en != 0) 
#line 5847 
                                 be_setup_wol(adapter,(_Bool)1); else ;
  
#line 5849 
  be_intr_set(adapter,(_Bool)0);
  
#line 5850 
  be_cancel_err_detection(adapter);
  
#line 5852 
  be_cleanup(adapter);
  
#line 5854 
  pci_save_state(pdev);
  
#line 5855 
  pci_disable_device(pdev);
  
#line 5856 
  tmp_0 = pci_choose_state(pdev,state);
  
#line 5856 
  ;
  
#line 5856 
  pci_set_power_state(pdev,tmp_0);
  
#line 5857 
  __retres = 0;
  
#line 5857 
  return __retres;
}


#line 5860  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_pci_resume(struct pci_dev *pdev)
{
  int __retres;
  
#line 5862 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5863 
  int status = 0;
  
#line 5865 
  status = pci_enable_device(pdev);
  
#line 5866 
  if (status != 0) {
    
#line 5867 
    __retres = status;
    
#line 5867 
    goto return_label;
  }
  else ;
  
#line 5869 
  pci_set_power_state(pdev,0);
  
#line 5870 
  pci_restore_state(pdev);
  
#line 5872 
  status = be_resume(adapter);
  
#line 5873 
  if (status != 0) {
    
#line 5874 
    __retres = status;
    
#line 5874 
    goto return_label;
  }
  else ;
  
#line 5876 
  be_schedule_err_detection(adapter);
  
#line 5878 
  if ((int)adapter->wol_en != 0) 
#line 5879 
                                 be_setup_wol(adapter,(_Bool)0); else ;
  
#line 5881 
  __retres = 0;
  return_label: 
#line 5881 
                return __retres;
}


#line 5887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_shutdown(struct pci_dev *pdev)
{
  
#line 5889 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5891 
  if (adapter == (struct be_adapter *)0) 
#line 5892 
                                         goto return_label; else ;
  
#line 5894 
  be_roce_dev_shutdown(adapter);
  
#line 5895 
  cancel_delayed_work_sync(& adapter->work);
  
#line 5896 
  be_cancel_err_detection(adapter);
  
#line 5898 
  netif_device_detach(adapter->netdev);
  
#line 5900 
  be_cmd_reset_function(adapter);
  
#line 5902 
  pci_disable_device(pdev);
  return_label: 
#line 5903 
                return;
}


#line 5905  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static pci_ers_result_t be_eeh_err_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  pci_ers_result_t __retres;
  u8 tmp_0;
  
#line 5908 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5910 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"EEH error detected\n");
  
#line 5912 
  tmp_0 = be_check_error(adapter,1U);
  
#line 5912 
  if ((unsigned int)tmp_0 == 0U) {
    
#line 5913 
    be_set_error(adapter,1);
    
#line 5915 
    be_cancel_err_detection(adapter);
    
#line 5917 
    be_cleanup(adapter);
  }
  else ;
  
#line 5920 
  if (state == 3U) {
    
#line 5921 
    __retres = 4U;
    
#line 5921 
    goto return_label;
  }
  else ;
  
#line 5923 
  pci_disable_device(pdev);
  
#line 5931 
  if (pdev->devfn == 0U) 
#line 5932 
                         ssleep(30U); else ;
  
#line 5934 
  __retres = 3U;
  return_label: 
#line 5934 
                return __retres;
}


#line 5937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static pci_ers_result_t be_eeh_reset(struct pci_dev *pdev)
{
  pci_ers_result_t __retres;
  int status;
  
#line 5939 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5942 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"EEH reset\n");
  
#line 5944 
  status = pci_enable_device(pdev);
  
#line 5945 
  if (status != 0) {
    
#line 5946 
    __retres = 4U;
    
#line 5946 
    goto return_label;
  }
  else ;
  
#line 5948 
  pci_set_master(pdev);
  
#line 5949 
  pci_set_power_state(pdev,0);
  
#line 5950 
  pci_restore_state(pdev);
  
#line 5953 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Waiting for FW to be ready after EEH reset\n");
  
#line 5955 
  status = be_fw_wait_ready(adapter);
  
#line 5956 
  if (status != 0) {
    
#line 5957 
    __retres = 4U;
    
#line 5957 
    goto return_label;
  }
  else ;
  
#line 5959 
  pci_cleanup_aer_uncorrect_error_status(pdev);
  
#line 5960 
  be_clear_error(adapter,255);
  
#line 5961 
  __retres = 5U;
  return_label: 
#line 5961 
                return __retres;
}


#line 5964  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_eeh_resume(struct pci_dev *pdev)
{
  
#line 5966 
  int status = 0;
  
#line 5967 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5969 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"EEH resume\n");
  
#line 5971 
  pci_save_state(pdev);
  
#line 5973 
  status = be_resume(adapter);
  
#line 5974 
  if (status != 0) 
#line 5975 
                   goto err; else ;
  
#line 5977 
  be_schedule_err_detection(adapter);
  
#line 5978 
  goto return_label;
  err: 
#line 5979 
  ;
  
#line 5980 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"EEH resume failed\n");
  return_label: 
#line 5981 
                return;
}


#line 5983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_pci_sriov_configure(struct pci_dev *pdev, int num_vfs_0)
{
  int __retres;
  u16 num_vf_qs;
  int status;
  
#line 5985 
  struct be_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5989 
  if (num_vfs_0 == 0) 
#line 5990 
                      be_vf_clear(adapter); else ;
  
#line 5992 
  adapter->num_vfs = (unsigned short)num_vfs_0;
  
#line 5994 
  if ((unsigned int)adapter->num_vfs == 0U) {
    int tmp_0;
    
#line 5994 
    tmp_0 = pci_vfs_assigned(pdev);
    
#line 5994 
    if (tmp_0 != 0) {
      
#line 5995 
      dev_warn((struct device const *)(& pdev->dev),"Cannot disable VFs while they are assigned\n");
      
#line 5997 
      __retres = -16;
      
#line 5997 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 6008 
  if ((unsigned int)(adapter->pdev)->device == 1824U || (unsigned int)(adapter->pdev)->device == 1832U) {
    int tmp_1;
    
#line 6008 
    tmp_1 = pci_num_vf(pdev);
    
#line 6008 
    if (tmp_1 == 0) {
      
#line 6009 
      num_vf_qs = be_calculate_vf_qs(adapter,(unsigned short)((int)adapter->num_vfs));
      
#line 6010 
      status = be_cmd_set_sriov_config(adapter,adapter->pool_res,(unsigned short)((int)adapter->num_vfs),(unsigned short)((int)num_vf_qs));
      
#line 6012 
      if (status != 0) 
#line 6013 
                       dev_err((struct device const *)(& pdev->dev),"Failed to optimize SR-IOV resources\n"); else ;
    }
    else ;
  }
  else ;
  
#line 6017 
  status = be_get_resources(adapter);
  
#line 6018 
  if (status != 0) {
    int tmp_2;
    
#line 6019 
    if (status <= 0) 
#line 6019 
                     tmp_2 = status; else 
#line 6019 
                                          tmp_2 = -5;
    
#line 6019 
    __retres = tmp_2;
    
#line 6019 
    goto return_label;
  }
  else ;
  
#line 6022 
  rtnl_lock();
  
#line 6023 
  status = be_update_queues(adapter);
  
#line 6024 
  rtnl_unlock();
  
#line 6025 
  if (status != 0) {
    int tmp_3;
    
#line 6026 
    if (status <= 0) 
#line 6026 
                     tmp_3 = status; else 
#line 6026 
                                          tmp_3 = -5;
    
#line 6026 
    __retres = tmp_3;
    
#line 6026 
    goto return_label;
  }
  else ;
  
#line 6028 
  if ((unsigned int)adapter->num_vfs != 0U) 
#line 6029 
                                            status = be_vf_setup(adapter); else ;
  
#line 6031 
  if (status == 0) {
    
#line 6032 
    __retres = (int)adapter->num_vfs;
    
#line 6032 
    goto return_label;
  }
  else ;
  
#line 6034 
  __retres = 0;
  return_label: 
#line 6034 
                return __retres;
}


#line 6037  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct pci_error_handlers const be_eeh_handlers = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& be_eeh_err_detected), .mmio_enabled = (pci_ers_result_t (*)(struct pci_dev *))0, .link_reset = (pci_ers_result_t (*)(struct pci_dev *))0, .slot_reset = & be_eeh_reset, .reset_notify = (void (*)(struct pci_dev *, bool ))0, .resume = & be_eeh_resume};

#line 6043  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static struct pci_driver be_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = "be2net", .id_table = (struct pci_device_id const *)(& be_dev_ids), .probe = & be_probe, .remove = & be_remove, .suspend = & be_suspend, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = & be_pci_resume, .shutdown = & be_shutdown, .sriov_configure = & be_pci_sriov_configure, .err_handler = & be_eeh_handlers, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = (struct dev_pm_ops const *)0, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 6055  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static int be_init_module(void)
{
  int tmp;
  
#line 6057 
  if (((unsigned int)rx_frag_size != 8192U && (unsigned int)rx_frag_size != 4096U) && (unsigned int)rx_frag_size != 2048U) {
    
#line 6059 
    printk("\001");
    
#line 6062 
    rx_frag_size = (unsigned short)2048U;
  }
  else ;
  
#line 6065 
  if (num_vfs != 0U) {
    
#line 6066 
    printk("\001");
    
#line 6067 
    printk("\001");
  }
  else ;
  
#line 6070 
  tmp = ldv___pci_register_driver_94(& be_driver,& __this_module,"be2net");
  
#line 6070 
  return tmp;
}


#line 6074  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/emulex/benet/be_main.c"
static void be_exit_module(void)
{
  
#line 6076 
  ldv_pci_unregister_driver_95(& be_driver);
  
#line 6077 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int (*ldv_emg_alias_eth_validate_addr_30)(struct net_device *) = & eth_validate_addr;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
struct pci_driver *ldv_emg_alias_be_driver_2 = & be_driver;

#line 60 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 61 
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);


#line 62 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 63 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 64 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 65 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 66 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 67 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 68 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 72  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
unsigned long long ldv_emg_wrapper_be_features_check_45(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  unsigned long long tmp;
  
#line 73 
  tmp = be_features_check(arg0,arg1,arg2);
  
#line 73 
  return tmp;
}


#line 77  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_ndo_bridge_setlink_35(struct net_device *arg0, struct nlmsghdr *arg1, unsigned short arg2)
{
  int tmp;
  
#line 78 
  tmp = be_ndo_bridge_setlink(arg0,arg1,(unsigned short)((int)arg2));
  
#line 78 
  return tmp;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_set_vf_spoofchk_25(struct net_device *arg0, int arg1, _Bool arg2)
{
  int tmp;
  
#line 83 
  tmp = be_set_vf_spoofchk(arg0,arg1,(_Bool)((bool)((int)arg2) != 0));
  
#line 83 
  return tmp;
}


#line 87  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_pci_resume_7(struct pci_dev *arg0)
{
  int tmp;
  
#line 88 
  tmp = be_pci_resume(arg0);
  
#line 88 
  return tmp;
}


#line 92  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_pci_sriov_configure_2(struct pci_dev *arg0, int arg1)
{
  int tmp;
  
#line 93 
  tmp = be_pci_sriov_configure(arg0,arg1);
  
#line 93 
  return tmp;
}


#line 97  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
enum netdev_tx ldv_emg_wrapper_be_xmit_13(struct sk_buff *arg0, struct net_device *arg1)
{
  enum netdev_tx tmp;
  
#line 98 
  tmp = be_xmit(arg0,arg1);
  
#line 98 
  return tmp;
}


#line 102  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
struct rtnl_link_stats64 *ldv_emg_wrapper_be_get_stats64_3(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  struct rtnl_link_stats64 *tmp;
  
#line 103 
  tmp = be_get_stats64(arg0,arg1);
  
#line 103 
  return tmp;
}


#line 107  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_busy_poll_53(struct napi_struct *arg0)
{
  int tmp;
  
#line 108 
  tmp = be_busy_poll(arg0);
  
#line 108 
  return tmp;
}


#line 112  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
void ldv_emg_wrapper_be_add_vxlan_port_10(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  
#line 113 
  be_add_vxlan_port(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 114 
  return;
}


#line 117  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_be_init_module(void)
{
  int tmp;
  
#line 118 
  tmp = be_init_module();
  
#line 118 
  return tmp;
}


#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 122 
  tmp = be_open(arg0);
  
#line 122 
  return tmp;
}


#line 126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
enum irqreturn ldv_emg_wrapper_be_intx_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 127 
  tmp = be_intx(arg0,arg1);
  
#line 127 
  return tmp;
}


#line 131  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_ndo_bridge_getlink_6(struct sk_buff *arg0, unsigned int arg1, unsigned int arg2, struct net_device *arg3, unsigned int arg4, int arg5)
{
  int tmp;
  
#line 132 
  tmp = be_ndo_bridge_getlink(arg0,arg1,arg2,arg3,arg4,arg5);
  
#line 132 
  return tmp;
}


#line 136  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_change_mtu_7(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 137 
  tmp = be_change_mtu(arg0,arg1);
  
#line 137 
  return tmp;
}


#line 141  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 142 
  tmp = be_close(arg0);
  
#line 142 
  return tmp;
}


#line 146  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_vlan_rem_vid_47(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 147 
  tmp = be_vlan_rem_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 147 
  return tmp;
}


#line 151  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_set_vf_mac_55(struct net_device *arg0, int arg1, unsigned char *arg2)
{
  int tmp;
  
#line 152 
  tmp = be_set_vf_mac(arg0,arg1,arg2);
  
#line 152 
  return tmp;
}


#line 156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
void ldv_emg_wrapper_be_remove_6(struct pci_dev *arg0)
{
  
#line 157 
  be_remove(arg0);
  
#line 158 
  return;
}


#line 161  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
void ldv_emg_wrapper_be_shutdown_3(struct pci_dev *arg0)
{
  
#line 162 
  be_shutdown(arg0);
  
#line 163 
  return;
}


#line 166  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
void ldv_emg_be_exit_module(void)
{
  
#line 167 
  be_exit_module();
  
#line 168 
  return;
}


#line 170  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
enum irqreturn ldv_emg_wrapper_be_msix_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 171 
  tmp = be_msix(arg0,arg1);
  
#line 171 
  return tmp;
}


#line 175  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_suspend_5(struct pci_dev *arg0, struct pm_message arg1)
{
  int tmp;
  
#line 176 
  tmp = be_suspend(arg0,arg1);
  
#line 176 
  return tmp;
}


#line 180  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_set_vf_tx_rate_17(struct net_device *arg0, int arg1, int arg2, int arg3)
{
  int tmp;
  
#line 181 
  tmp = be_set_vf_tx_rate(arg0,arg1,arg2,arg3);
  
#line 181 
  return tmp;
}


#line 185  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_set_vf_vlan_31(struct net_device *arg0, int arg1, unsigned short arg2, unsigned char arg3)
{
  int tmp;
  
#line 186 
  tmp = be_set_vf_vlan(arg0,arg1,(unsigned short)((int)arg2),(unsigned char)((int)arg3));
  
#line 186 
  return tmp;
}


#line 190  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_set_vf_link_state_22(struct net_device *arg0, int arg1, int arg2)
{
  int tmp;
  
#line 191 
  tmp = be_set_vf_link_state(arg0,arg1,arg2);
  
#line 191 
  return tmp;
}


#line 195  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
void ldv_emg_wrapper_be_del_vxlan_port_21(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  
#line 196 
  be_del_vxlan_port(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 197 
  return;
}


#line 200  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_get_vf_config_36(struct net_device *arg0, int arg1, struct ifla_vf_info *arg2)
{
  int tmp;
  
#line 201 
  tmp = be_get_vf_config(arg0,arg1,arg2);
  
#line 201 
  return tmp;
}


#line 205  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_vlan_add_vid_41(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 206 
  tmp = be_vlan_add_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 206 
  return tmp;
}


#line 210  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_probe_4(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 211 
  tmp = be_probe(arg0,(struct pci_device_id const *)arg1);
  
#line 211 
  return tmp;
}


#line 215  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
void ldv_emg_wrapper_be_set_rx_mode_23(struct net_device *arg0)
{
  
#line 216 
  be_set_rx_mode(arg0);
  
#line 217 
  return;
}


#line 220  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
void ldv_emg_wrapper_be_netpoll_54(struct net_device *arg0)
{
  
#line 221 
  be_netpoll(arg0);
  
#line 222 
  return;
}


#line 225  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
int ldv_emg_wrapper_be_mac_addr_set_14(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 226 
  tmp = be_mac_addr_set(arg0,arg1);
  
#line 226 
  return tmp;
}


#line 263  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void atomic_add(int i, atomic_t *v)
{
  
#line 266 
  ldv_atomic_add(i,v);
  
#line 267 
  return;
}


#line 270  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void atomic_sub(int i, atomic_t *v)
{
  
#line 273 
  ldv_atomic_sub(i,v);
  
#line 274 
  return;
}


#line 284  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void atomic_inc_0(atomic_t *v)
{
  
#line 287 
  ldv_atomic_inc(v);
  
#line 288 
  return;
}


#line 291  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void atomic_dec_0(atomic_t *v)
{
  
#line 294 
  ldv_atomic_dec(v);
  
#line 295 
  return;
}


#line 648  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 651 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 651 
  return tmp;
}


#line 768  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_lock_60(spinlock_t *lock)
{
  
#line 772 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  
#line 774 
  spin_lock_0(lock);
  
#line 775 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_unlock_63(spinlock_t *lock)
{
  
#line 815 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 817 
  spin_unlock_0(lock);
  
#line 818 
  return;
}


#line 911  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_lock_73(spinlock_t *lock)
{
  
#line 915 
  ldv_spin_model_lock((char *)"lock_of_be_eq_obj");
  
#line 917 
  spin_lock_0(lock);
  
#line 918 
  return;
}


#line 921  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_unlock_74(spinlock_t *lock)
{
  
#line 925 
  ldv_spin_model_unlock((char *)"lock_of_be_eq_obj");
  
#line 927 
  spin_unlock_0(lock);
  
#line 928 
  return;
}


#line 931  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_lock_75(spinlock_t *lock)
{
  
#line 935 
  ldv_spin_model_lock((char *)"lock_of_be_eq_obj");
  
#line 937 
  spin_lock_0(lock);
  
#line 938 
  return;
}


#line 941  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_unlock_76(spinlock_t *lock)
{
  
#line 945 
  ldv_spin_model_unlock((char *)"lock_of_be_eq_obj");
  
#line 947 
  spin_unlock_0(lock);
  
#line 948 
  return;
}


#line 951  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_lock_bh_77(spinlock_t *lock)
{
  
#line 955 
  ldv_spin_model_lock((char *)"lock_of_be_eq_obj");
  
#line 957 
  spin_lock_bh_0(lock);
  
#line 958 
  return;
}


#line 961  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_unlock_bh_78(spinlock_t *lock)
{
  
#line 965 
  ldv_spin_model_unlock((char *)"lock_of_be_eq_obj");
  
#line 967 
  spin_unlock_bh_0(lock);
  
#line 968 
  return;
}


#line 971  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_lock_bh_79_0(spinlock_t *lock)
{
  
#line 975 
  ldv_spin_model_lock((char *)"lock_of_be_eq_obj");
  
#line 977 
  spin_lock_bh_0(lock);
  
#line 978 
  return;
}


#line 981  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_spin_unlock_bh_80(spinlock_t *lock)
{
  
#line 985 
  ldv_spin_model_unlock((char *)"lock_of_be_eq_obj");
  
#line 987 
  spin_unlock_bh_0(lock);
  
#line 988 
  return;
}


#line 991  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static int ldv_request_irq_81(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 995 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 995 
  return tmp;
}


#line 999  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_free_irq_82(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1003 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1004 
  return;
}


#line 1007  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static int ldv_request_irq_83(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1011 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1011 
  return tmp;
}


#line 1015  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_free_irq_84(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1019 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1020 
  return;
}


#line 1023  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_free_irq_85(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1027 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1028 
  return;
}


#line 1031  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static bool ldv_schedule_delayed_work_86(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 1035 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 1035 
  __retres = tmp != 0;
  
#line 1035 
  return __retres;
}


#line 1039  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static bool ldv_schedule_delayed_work_87(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 1043 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 1043 
  __retres = tmp != 0;
  
#line 1043 
  return __retres;
}


#line 1047  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static bool ldv_schedule_delayed_work_88(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 1051 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 1051 
  __retres = tmp != 0;
  
#line 1051 
  return __retres;
}


#line 1055  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_unregister_netdev_89(struct net_device *ldv_func_arg1)
{
  
#line 1059 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1060 
  return;
}


#line 1063  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_free_netdev_90(struct net_device *ldv_func_arg1)
{
  
#line 1067 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1068 
  return;
}


#line 1071  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_91(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 1075 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1075 
  return tmp;
}


#line 1079  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static int ldv_register_netdev_92(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 1083 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 1083 
  return tmp;
}


#line 1087  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_free_netdev_93(struct net_device *ldv_func_arg1)
{
  
#line 1091 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1092 
  return;
}


#line 1095  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static int ldv___pci_register_driver_94(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 1099 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 1099 
  return tmp;
}


#line 1103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/weaver/.tmp_be_main.c.aux"
static void ldv_pci_unregister_driver_95(struct pci_driver *ldv_func_arg1)
{
  
#line 1107 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 1108 
  return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 28 
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
int main(void);


#line 110 
void ldv_dispatch_register_9_4(struct net_device *arg0);


#line 112 
void ldv_dispatch_deregister_8_1(struct pci_driver *arg0);


#line 117 
void *ldv_initialization_1(void *arg0);


#line 118 
void ldv_dispatch_irq_register_10_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 119 
void *ldv_interrupt_scenario_13(void *arg0);


#line 120 
void ldv_dispatch_register_7_3(struct pci_driver *arg0);


#line 122 
void *ldv_pci_scenario_14(void *arg0);


#line 123 
void *ldv_random_allocationless_scenario_11(void *arg0);


#line 124 
void ldv_dispatch_deregister_6_1(struct net_device *arg0);


#line 126 
void *ldv_interrupt_scenario_12(void *arg0);


#line 127 
void ldv_dispatch_irq_deregister_4_1(int arg0);


#line 131  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 132  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_12;

#line 133  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_13;

#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_11;

#line 138  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  _Bool __retres;
  struct work_struct *ldv_3_ldv_param_0_2;
  struct delayed_work *ldv_3_delayed_work;
  int tmp_0;
  
#line 146 
  tmp_0 = ldv_undef_int();
  
#line 146 
  if (tmp_0 != 0) {
    
#line 148 
    ldv_3_delayed_work = arg0;
    
#line 152 
    ldv_3_ldv_param_0_2 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    
#line 156 
    if (ldv_3_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      
#line 158 
      (*(ldv_3_delayed_work->work.func))(ldv_3_ldv_param_0_2); else ;
    
#line 163 
    ldv_free((void *)ldv_3_ldv_param_0_2);
    
#line 167 
    __retres = (_Bool)1;
    
#line 167 
    goto return_label;
  }
  else {
    
#line 174 
    __retres = (_Bool)0;
    
#line 174 
    goto return_label;
  }
  return_label: 
#line 146 
                return __retres;
}


#line 184  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 187 
  ldv_initialize();
  
#line 190 
  ldv_initialization_1((void *)0);
  
#line 192 
  __retres = 0;
  
#line 192 
  return __retres;
}


#line 197  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_9_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_11 *cf_arg_11;
  int tmp;
  
#line 200 
  tmp = ldv_undef_int();
  
#line 200 
  switch (tmp) {
    case 0: 
#line 201 
    ;
    
#line 202 
    cf_arg_11 = (struct ldv_struct_random_allocationless_scenario_11 *)ldv_xmalloc(16UL);
    
#line 203 
    cf_arg_11->arg0 = arg0;
    
#line 204 
    ret = pthread_create(& ldv_thread_11,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_11,(void *)cf_arg_11);
    
#line 205 
    __VERIFIER_assume(ret == 0);
    
#line 206 
    goto ldv_44842;
    default: 
#line 208 
    ;
    
#line 208 
    __VERIFIER_assume(0);
  }
  ldv_44842: 
#line 209 
  ;
  
#line 210 
  return;
}


#line 214  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 217 
  struct pci_driver *ldv_7_pci_driver = ldv_emg_alias_be_driver_2;
  
#line 221 
  tmp_0 = ldv_undef_int();
  
#line 221 
  if (tmp_0 != 0) {
    
#line 223 
    ldv_7_pci_driver = arg0;
    
#line 227 
    ldv_dispatch_register_7_3(ldv_7_pci_driver);
    
#line 231 
    __retres = 0;
    
#line 231 
    goto return_label;
  }
  else {
    int tmp;
    
#line 238 
    tmp = ldv_undef_int_negative();
    
#line 238 
    __retres = tmp;
    
#line 238 
    goto return_label;
  }
  return_label: 
#line 221 
                return __retres;
}


#line 248  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_8_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_14 *cf_arg_14;
  int tmp;
  
#line 251 
  tmp = ldv_undef_int();
  
#line 251 
  switch (tmp) {
    case 0: 
#line 252 
    ;
    
#line 253 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 254 
    __VERIFIER_assume(ret == 0);
    
#line 255 
    goto ldv_44856;
    default: 
#line 257 
    ;
    
#line 257 
    __VERIFIER_assume(0);
  }
  ldv_44856: 
#line 258 
  ;
  
#line 259 
  return;
}


#line 263  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_6_netdev;
  
#line 269 
  ldv_6_netdev = arg0;
  
#line 274 
  ldv_emg_wrapper_be_close_2(ldv_6_netdev);
  
#line 278 
  ldv_dispatch_deregister_6_1(ldv_6_netdev);
  
#line 282 
  goto return_label;
  return_label: 
#line 284 
                return;
}


#line 289  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_4_line;
  
#line 295 
  ldv_4_line = (int)arg0;
  
#line 299 
  ldv_dispatch_irq_deregister_4_1(ldv_4_line);
  
#line 303 
  goto return_label;
  return_label: 
#line 305 
                return;
}


#line 310  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 313 
  struct pci_driver *ldv_8_pci_driver = ldv_emg_alias_be_driver_2;
  
#line 316 
  ldv_8_pci_driver = arg0;
  
#line 320 
  ldv_dispatch_deregister_8_1(ldv_8_pci_driver);
  
#line 324 
  goto return_label;
  return_label: 
#line 326 
                return;
}


#line 331  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_5_netdev;
  int tmp_0;
  
#line 338 
  tmp_0 = ldv_undef_int();
  
#line 338 
  if (tmp_0 != 0) {
    
#line 340 
    ldv_5_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 344 
    __retres = ldv_5_netdev;
    
#line 344 
    goto return_label;
  }
  else {
    
#line 351 
    __retres = (struct net_device *)0;
    
#line 351 
    goto return_label;
  }
  return_label: 
#line 338 
                return __retres;
}


#line 361  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 368 
  ldv_1_ret = ldv_emg_be_init_module();
  
#line 369 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 372 
  tmp = ldv_undef_int();
  
#line 372 
  if (tmp != 0) {
    
#line 374 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 378 
    __retres = (void *)0;
    
#line 378 
    goto return_label;
  }
  else {
    
#line 382 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 387 
    ldv_emg_be_exit_module();
    
#line 391 
    __retres = (void *)0;
    
#line 391 
    goto return_label;
  }
  
#line 394 
  __retres = (void *)0;
  return_label: 
#line 394 
                return __retres;
}


#line 399  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_10_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_12 *cf_arg_12;
  struct ldv_struct_interrupt_scenario_12 *cf_arg_13;
  int tmp;
  
#line 403 
  tmp = ldv_undef_int();
  
#line 403 
  switch (tmp) {
    case 0: 
#line 404 
    ;
    
#line 405 
    cf_arg_12 = (struct ldv_struct_interrupt_scenario_12 *)ldv_xmalloc(32UL);
    
#line 406 
    cf_arg_12->arg0 = arg0;
    
#line 407 
    cf_arg_12->arg1 = arg1;
    
#line 408 
    cf_arg_12->arg2 = arg2;
    
#line 409 
    cf_arg_12->arg3 = arg3;
    
#line 410 
    ret = pthread_create(& ldv_thread_12,(pthread_attr_t const *)0,& ldv_interrupt_scenario_12,(void *)cf_arg_12);
    
#line 411 
    __VERIFIER_assume(ret == 0);
    
#line 412 
    goto ldv_44895;
    case 1: 
#line 414 
    ;
    
#line 415 
    cf_arg_13 = (struct ldv_struct_interrupt_scenario_12 *)ldv_xmalloc(32UL);
    
#line 416 
    cf_arg_13->arg0 = arg0;
    
#line 417 
    cf_arg_13->arg1 = arg1;
    
#line 418 
    cf_arg_13->arg2 = arg2;
    
#line 419 
    cf_arg_13->arg3 = arg3;
    
#line 420 
    ret = pthread_create(& ldv_thread_13,(pthread_attr_t const *)0,& ldv_interrupt_scenario_13,(void *)cf_arg_13);
    
#line 421 
    __VERIFIER_assume(ret == 0);
    
#line 422 
    goto ldv_44895;
    default: 
#line 424 
    ;
    
#line 424 
    __VERIFIER_assume(0);
  }
  ldv_44895: 
#line 425 
  ;
  
#line 426 
  return;
}


#line 430  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_13(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_13_ret_val;
  int ldv_13_line;
  void *ldv_13_data;
  enum irqreturn (*ldv_13_thread)(int , void *);
  int tmp;
  
#line 436 
  enum irqreturn (*ldv_13_callback)(int , void *) = & ldv_emg_wrapper_be_msix_2;
  
#line 439 
  struct ldv_struct_interrupt_scenario_12 *data = (struct ldv_struct_interrupt_scenario_12 *)arg0;
  
#line 444 
  if (data != (struct ldv_struct_interrupt_scenario_12 *)0) {
    
#line 445 
    ldv_13_line = data->arg0;
    
#line 446 
    ldv_13_callback = data->arg1;
    
#line 447 
    ldv_13_thread = data->arg2;
    
#line 448 
    ldv_13_data = data->arg3;
    
#line 449 
    ldv_free((void *)data);
  }
  else ;
  
#line 455 
  ldv_switch_to_interrupt_context();
  
#line 457 
  ldv_13_ret_val = ldv_emg_wrapper_be_msix_2(ldv_13_line,ldv_13_data);
  
#line 459 
  ldv_switch_to_process_context();
  
#line 462 
  tmp = ldv_undef_int();
  
#line 462 
  if (tmp != 0) {
    
#line 464 
    __VERIFIER_assume(ldv_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 468 
    if (ldv_13_thread != (enum irqreturn (*)(int , void *))0) 
#line 470 
                                                              (*ldv_13_thread)(ldv_13_line,ldv_13_data); else ;
  }
  else 
#line 477 
       __VERIFIER_assume(ldv_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 486 
  __retres = (void *)0;
  
#line 486 
  goto return_label;
  
#line 488 
  __retres = (void *)0;
  return_label: 
#line 488 
                return __retres;
}


#line 493  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_7_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_14 *cf_arg_14;
  int tmp;
  
#line 496 
  tmp = ldv_undef_int();
  
#line 496 
  switch (tmp) {
    case 0: 
#line 497 
    ;
    
#line 498 
    cf_arg_14 = (struct ldv_struct_pci_scenario_14 *)ldv_xmalloc(16UL);
    
#line 499 
    cf_arg_14->arg0 = arg0;
    
#line 500 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_pci_scenario_14,(void *)cf_arg_14);
    
#line 501 
    __VERIFIER_assume(ret == 0);
    
#line 502 
    goto ldv_44917;
    default: 
#line 504 
    ;
    
#line 504 
    __VERIFIER_assume(0);
  }
  ldv_44917: 
#line 505 
  ;
  
#line 506 
  return;
}


#line 510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_10_line;
  void *ldv_10_data;
  enum irqreturn (*ldv_10_thread)(int , void *);
  int tmp_0;
  
#line 515 
  enum irqreturn (*ldv_10_callback)(int , void *) = & ldv_emg_wrapper_be_msix_2;
  
#line 520 
  tmp_0 = ldv_undef_int();
  
#line 520 
  if (tmp_0 != 0) {
    
#line 522 
    ldv_10_line = (int)arg0;
    
#line 523 
    ldv_10_callback = arg1;
    
#line 524 
    ldv_10_thread = (enum irqreturn (*)(int , void *))0;
    
#line 525 
    ldv_10_data = arg4;
    
#line 529 
    ldv_dispatch_irq_register_10_3(ldv_10_line,ldv_10_callback,ldv_10_thread,ldv_10_data);
    
#line 533 
    __retres = 0;
    
#line 533 
    goto return_label;
  }
  else {
    int tmp;
    
#line 540 
    tmp = ldv_undef_int_negative();
    
#line 540 
    __retres = tmp;
    
#line 540 
    goto return_label;
  }
  return_label: 
#line 520 
                return __retres;
}


#line 550  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_14(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_14_resource_1;
  struct pci_device_id *ldv_14_ldv_param_1_2;
  int ldv_14_ldv_param_1_3;
  struct pm_message ldv_14_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 556 
  struct pci_driver *ldv_14_container = ldv_emg_alias_be_driver_2;
  
#line 557 
  int ldv_14_ret = ldv_undef_int();
  
#line 560 
  struct ldv_struct_pci_scenario_14 *data = (struct ldv_struct_pci_scenario_14 *)arg0;
  
#line 564 
  ldv_14_ret = ldv_undef_int();
  
#line 567 
  if (data != (struct ldv_struct_pci_scenario_14 *)0) {
    
#line 568 
    ldv_14_container = data->arg0;
    
#line 569 
    ldv_free((void *)data);
  }
  else ;
  
#line 580 
  goto ldv_main_14;
  
#line 582 
  __retres = (void *)0;
  
#line 582 
  goto return_label;
  ldv_main_14: 
#line 585 
  ;
  
#line 588 
  tmp_2 = ldv_undef_int();
  
#line 588 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 590 
    ldv_14_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 595 
    ldv_pre_probe();
    
#line 597 
    ldv_14_ret = ldv_emg_wrapper_be_probe_4(ldv_14_resource_1,ldv_14_ldv_param_1_2);
    
#line 599 
    ldv_14_ret = ldv_post_probe(ldv_14_ret);
    
#line 603 
    ldv_free((void *)ldv_14_ldv_param_1_2);
    
#line 606 
    tmp_1 = ldv_undef_int();
    
#line 606 
    if (tmp_1 != 0) {
      
#line 608 
      __VERIFIER_assume(ldv_14_ret == 0);
      
#line 615 
      goto ldv_call_14;
    }
    else {
      
#line 619 
      __VERIFIER_assume(ldv_14_ret != 0);
      
#line 626 
      goto ldv_main_14;
    }
  }
  else {
    
#line 638 
    __retres = (void *)0;
    
#line 638 
    goto return_label;
  }
  
#line 641 
  __retres = (void *)0;
  
#line 641 
  goto return_label;
  ldv_call_14: 
#line 644 
  ;
  
#line 647 
  tmp_3 = ldv_undef_int();
  
#line 647 
  switch (tmp_3) {
    case 1: 
#line 648 
    ;
    
#line 654 
    ldv_emg_wrapper_be_pci_sriov_configure_2(ldv_14_resource_1,ldv_14_ldv_param_1_3);
    
#line 664 
    goto ldv_call_14;
    case 2: 
#line 667 
    ;
    
#line 670 
    ldv_14_ret = ldv_emg_wrapper_be_suspend_5(ldv_14_resource_1,ldv_14_resource_0);
    
#line 672 
    ldv_14_ret = ldv_filter_err_code(ldv_14_ret);
    
#line 676 
    if (ldv_14_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 678 
      ldv_14_ret = (*(ldv_14_container->suspend_late))(ldv_14_resource_1,ldv_14_resource_0);
      
#line 680 
      ldv_14_ret = ldv_filter_err_code(ldv_14_ret);
    }
    else 
#line 682 
         ldv_14_ret = ldv_undef_int();
    
#line 687 
    if (ldv_14_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 689 
      (*(ldv_14_container->resume_early))(ldv_14_resource_1); else ;
    
#line 695 
    ldv_emg_wrapper_be_pci_resume_7(ldv_14_resource_1);
    
#line 702 
    goto ldv_call_14;
    case 3: 
#line 705 
    ;
    
#line 708 
    ldv_emg_wrapper_be_shutdown_3(ldv_14_resource_1);
    
#line 713 
    ldv_emg_wrapper_be_remove_6(ldv_14_resource_1);
    
#line 720 
    goto ldv_main_14;
    default: 
#line 723 
    ;
    
#line 723 
    __VERIFIER_assume(0);
  }
  
#line 726 
  __retres = (void *)0;
  return_label: 
#line 726 
                return __retres;
}


#line 731  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_11(void *arg0)
{
  void *__retres;
  struct ethtool_eeprom *ldv_11_ldv_param_1_62;
  int ldv_11_ldv_param_1_44;
  unsigned int *ldv_11_ldv_param_2_28;
  struct ethtool_flash *ldv_11_ldv_param_1_75;
  struct ethtool_eeprom *ldv_11_ldv_param_1_55;
  unsigned int *ldv_11_ldv_param_1_31;
  struct ethtool_drvinfo *ldv_11_ldv_param_1_14;
  int ldv_11_ldv_param_1_29;
  void *ldv_11_ldv_param_1_19;
  struct ethtool_modinfo *ldv_11_ldv_param_1_57;
  int ldv_11_ldv_param_5_11;
  struct sk_buff *ldv_11_ldv_param_0_18;
  unsigned short ldv_11_ldv_param_2_74;
  unsigned char ldv_11_ldv_param_3_17;
  unsigned long long ldv_11_ldv_param_2_65;
  int ldv_11_ldv_param_1_12;
  struct ifla_vf_info *ldv_11_ldv_param_2_53;
  unsigned char *ldv_11_ldv_param_2_70;
  unsigned short ldv_11_ldv_param_2_51;
  int ldv_11_ldv_param_1_68;
  unsigned short ldv_11_ldv_param_2_45;
  unsigned int *ldv_11_ldv_param_1_15;
  unsigned char *ldv_11_ldv_param_2_56;
  struct ethtool_wolinfo *ldv_11_ldv_param_1_58;
  unsigned char ldv_11_ldv_param_3_46;
  struct ethtool_stats *ldv_11_ldv_param_1_36;
  unsigned short ldv_11_ldv_param_2_60;
  int ldv_11_ldv_param_1_39;
  struct net_device *ldv_11_container;
  struct ethtool_dump *ldv_11_ldv_param_1_4;
  unsigned char *ldv_11_ldv_param_2_16;
  int ldv_11_ldv_param_3_25;
  struct ethtool_coalesce *ldv_11_ldv_param_1_71;
  unsigned long long *ldv_11_ldv_param_2_21;
  int ldv_11_ldv_param_1_52;
  unsigned short ldv_11_ldv_param_1_73;
  struct ethtool_rxnfc *ldv_11_ldv_param_1_13;
  unsigned char *ldv_11_ldv_param_2_63;
  unsigned short ldv_11_ldv_param_2_49;
  void *ldv_11_ldv_param_2_67;
  struct sk_buff *ldv_11_ldv_param_0_64;
  _Bool ldv_11_ldv_param_2_40;
  int ldv_11_ldv_param_2_24;
  unsigned int ldv_11_ldv_param_1_8;
  struct ethtool_channels *ldv_11_ldv_param_1_47;
  unsigned int ldv_11_ldv_param_1_69;
  int ldv_11_ldv_param_1_5;
  struct ethtool_cmd *ldv_11_ldv_param_1_54;
  struct ethtool_channels *ldv_11_ldv_param_1_43;
  struct ethtool_pauseparam *ldv_11_ldv_param_1_38;
  unsigned short ldv_11_ldv_param_1_48;
  unsigned long long *ldv_11_ldv_param_2_37;
  struct ethtool_rxnfc *ldv_11_ldv_param_1_27;
  unsigned short ldv_11_ldv_param_1_34;
  int ldv_11_ldv_param_1_23;
  struct ethtool_test *ldv_11_ldv_param_1_20;
  unsigned int ldv_11_ldv_param_4_10;
  struct ethtool_coalesce *ldv_11_ldv_param_1_61;
  struct ethtool_ringparam *ldv_11_ldv_param_1_42;
  unsigned int ldv_11_ldv_param_1_41;
  struct ethtool_pauseparam *ldv_11_ldv_param_1_72;
  struct sk_buff *ldv_11_ldv_param_0_7;
  unsigned char *ldv_11_ldv_param_2_30;
  enum ethtool_phys_id_state *ldv_11_ldv_param_1_2;
  struct rtnl_link_stats64 *ldv_11_ldv_param_1_3;
  struct ethtool_regs *ldv_11_ldv_param_1_66;
  unsigned short ldv_11_ldv_param_2_35;
  unsigned short ldv_11_ldv_param_1_59;
  struct napi_struct *ldv_11_ldv_param_0_26;
  unsigned char *ldv_11_ldv_param_2_32;
  int ldv_11_ldv_param_2_6;
  struct ethtool_wolinfo *ldv_11_ldv_param_1_22;
  unsigned int ldv_11_ldv_param_2_9;
  unsigned char *ldv_11_ldv_param_3_33;
  struct nlmsghdr *ldv_11_ldv_param_1_50;
  int tmp_41;
  
#line 810 
  struct ldv_struct_random_allocationless_scenario_11 *data = (struct ldv_struct_random_allocationless_scenario_11 *)arg0;
  
#line 815 
  if (data != (struct ldv_struct_random_allocationless_scenario_11 *)0) {
    
#line 816 
    ldv_11_container = data->arg0;
    
#line 817 
    ldv_free((void *)data);
  }
  else ;
  
#line 825 
  goto ldv_call_11;
  
#line 827 
  __retres = (void *)0;
  
#line 827 
  goto return_label;
  ldv_call_11: 
#line 830 
  ;
  
#line 833 
  tmp_41 = ldv_undef_int();
  
#line 833 
  if (tmp_41 != 0) {
    int tmp_0;
    
#line 835 
    ldv_11_ldv_param_1_2 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    
#line 838 
    tmp_0 = ldv_undef_int();
    
#line 838 
    switch (tmp_0) {
      case 1: 
#line 839 
      ;
      
#line 842 
      ldv_emg_wrapper_be_set_phys_id_2(ldv_11_container,*ldv_11_ldv_param_1_2);
      
#line 845 
      goto ldv_45033;
      case 2: 
#line 847 
      ;
      
#line 850 
      ldv_emg_wrapper_be_get_eeprom_len_33(ldv_11_container);
      
#line 853 
      goto ldv_45033;
      case 3: 
#line 855 
      ;
      
#line 858 
      ldv_emg_wrapper_be_netpoll_54(ldv_11_container);
      
#line 861 
      goto ldv_45033;
      case 4: 
#line 863 
      ;
      
#line 865 
      ldv_11_ldv_param_1_75 = (struct ethtool_flash *)ldv_xmalloc_unknown_size(0UL);
      
#line 870 
      ldv_emg_wrapper_be_do_flash_44(ldv_11_container,ldv_11_ldv_param_1_75);
      
#line 874 
      ldv_free((void *)ldv_11_ldv_param_1_75);
      
#line 877 
      goto ldv_45033;
      case 5: 
#line 879 
      ;
      
#line 885 
      ldv_emg_wrapper_be_vlan_rem_vid_47(ldv_11_container,(unsigned short)((int)ldv_11_ldv_param_1_73),(unsigned short)((int)ldv_11_ldv_param_2_74));
      
#line 891 
      goto ldv_45033;
      case 6: 
#line 893 
      ;
      
#line 895 
      ldv_11_ldv_param_1_72 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 900 
      ldv_emg_wrapper_be_set_pauseparam_52(ldv_11_container,ldv_11_ldv_param_1_72);
      
#line 904 
      ldv_free((void *)ldv_11_ldv_param_1_72);
      
#line 907 
      goto ldv_45033;
      case 7: 
#line 909 
      ;
      
#line 911 
      ldv_11_ldv_param_1_71 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 916 
      ldv_emg_wrapper_be_set_coalesce_51(ldv_11_container,ldv_11_ldv_param_1_71);
      
#line 920 
      ldv_free((void *)ldv_11_ldv_param_1_71);
      
#line 923 
      goto ldv_45033;
      case 8: 
#line 925 
      ;
      
#line 928 
      ldv_emg_wrapper_be_get_reg_len_50(ldv_11_container);
      
#line 931 
      goto ldv_45033;
      case 9: 
#line 933 
      ;
      
#line 935 
      ldv_11_ldv_param_2_70 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 940 
      ldv_emg_wrapper_be_get_stat_strings_28(ldv_11_container,ldv_11_ldv_param_1_69,ldv_11_ldv_param_2_70);
      
#line 944 
      ldv_free((void *)ldv_11_ldv_param_2_70);
      
#line 947 
      goto ldv_45033;
      case 10: 
#line 949 
      ;
      
#line 955 
      ldv_emg_wrapper_be_get_sset_count_48(ldv_11_container,ldv_11_ldv_param_1_68);
      
#line 961 
      goto ldv_45033;
      case 11: 
#line 963 
      ;
      
#line 965 
      ldv_11_ldv_param_1_66 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
      
#line 966 
      ldv_11_ldv_param_2_67 = ldv_xmalloc_unknown_size(0UL);
      
#line 971 
      ldv_emg_wrapper_be_get_regs_46(ldv_11_container,ldv_11_ldv_param_1_66,ldv_11_ldv_param_2_67);
      
#line 975 
      ldv_free((void *)ldv_11_ldv_param_1_66);
      
#line 976 
      ldv_free(ldv_11_ldv_param_2_67);
      
#line 979 
      goto ldv_45033;
      case 12: 
#line 981 
      ;
      
#line 983 
      ldv_11_ldv_param_0_64 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 988 
      ldv_emg_wrapper_be_features_check_45(ldv_11_ldv_param_0_64,ldv_11_container,ldv_11_ldv_param_2_65);
      
#line 992 
      ldv_free((void *)ldv_11_ldv_param_0_64);
      
#line 995 
      goto ldv_45033;
      case 13: 
#line 997 
      ;
      
#line 999 
      ldv_11_ldv_param_1_62 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1000 
      ldv_11_ldv_param_2_63 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1005 
      ldv_emg_wrapper_be_get_module_eeprom_5(ldv_11_container,ldv_11_ldv_param_1_62,ldv_11_ldv_param_2_63);
      
#line 1009 
      ldv_free((void *)ldv_11_ldv_param_1_62);
      
#line 1010 
      ldv_free((void *)ldv_11_ldv_param_2_63);
      
#line 1013 
      goto ldv_45033;
      case 14: 
#line 1015 
      ;
      
#line 1017 
      ldv_11_ldv_param_1_61 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1022 
      ldv_emg_wrapper_be_get_coalesce_43(ldv_11_container,ldv_11_ldv_param_1_61);
      
#line 1026 
      ldv_free((void *)ldv_11_ldv_param_1_61);
      
#line 1029 
      goto ldv_45033;
      case 15: 
#line 1031 
      ;
      
#line 1037 
      ldv_emg_wrapper_be_vlan_add_vid_41(ldv_11_container,(unsigned short)((int)ldv_11_ldv_param_1_59),(unsigned short)((int)ldv_11_ldv_param_2_60));
      
#line 1043 
      goto ldv_45033;
      case 16: 
#line 1045 
      ;
      
#line 1047 
      ldv_11_ldv_param_1_58 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1052 
      ldv_emg_wrapper_be_get_wol_40(ldv_11_container,ldv_11_ldv_param_1_58);
      
#line 1056 
      ldv_free((void *)ldv_11_ldv_param_1_58);
      
#line 1059 
      goto ldv_45033;
      case 17: 
#line 1061 
      ;
      
#line 1063 
      ldv_11_ldv_param_1_57 = (struct ethtool_modinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1068 
      ldv_emg_wrapper_be_get_module_info_39(ldv_11_container,ldv_11_ldv_param_1_57);
      
#line 1072 
      ldv_free((void *)ldv_11_ldv_param_1_57);
      
#line 1075 
      goto ldv_45033;
      case 18: 
#line 1077 
      ;
      
#line 1079 
      ldv_11_ldv_param_2_56 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1080 
      ldv_11_ldv_param_1_55 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1085 
      ldv_emg_wrapper_be_read_eeprom_38(ldv_11_container,ldv_11_ldv_param_1_55,ldv_11_ldv_param_2_56);
      
#line 1089 
      ldv_free((void *)ldv_11_ldv_param_2_56);
      
#line 1090 
      ldv_free((void *)ldv_11_ldv_param_1_55);
      
#line 1093 
      goto ldv_45033;
      case 19: 
#line 1095 
      ;
      
#line 1097 
      ldv_11_ldv_param_1_54 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1102 
      ldv_emg_wrapper_be_get_settings_37(ldv_11_container,ldv_11_ldv_param_1_54);
      
#line 1106 
      ldv_free((void *)ldv_11_ldv_param_1_54);
      
#line 1109 
      goto ldv_45033;
      case 20: 
#line 1111 
      ;
      
#line 1113 
      ldv_11_ldv_param_2_53 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
      
#line 1118 
      ldv_emg_wrapper_be_get_vf_config_36(ldv_11_container,ldv_11_ldv_param_1_52,ldv_11_ldv_param_2_53);
      
#line 1122 
      ldv_free((void *)ldv_11_ldv_param_2_53);
      
#line 1125 
      goto ldv_45033;
      case 21: 
#line 1127 
      ;
      
#line 1129 
      ldv_11_ldv_param_1_50 = (struct nlmsghdr *)ldv_xmalloc_unknown_size(0UL);
      
#line 1134 
      ldv_emg_wrapper_be_ndo_bridge_setlink_35(ldv_11_container,ldv_11_ldv_param_1_50,(unsigned short)((int)ldv_11_ldv_param_2_51));
      
#line 1138 
      ldv_free((void *)ldv_11_ldv_param_1_50);
      
#line 1141 
      goto ldv_45033;
      case 22: 
#line 1143 
      ;
      
#line 1149 
      ldv_emg_wrapper_be_add_vxlan_port_10(ldv_11_container,(unsigned short)((int)ldv_11_ldv_param_1_48),(unsigned short)((int)ldv_11_ldv_param_2_49));
      
#line 1155 
      goto ldv_45033;
      case 23: 
#line 1157 
      ;
      
#line 1159 
      ldv_11_ldv_param_1_47 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 1164 
      ldv_emg_wrapper_be_set_channels_32(ldv_11_container,ldv_11_ldv_param_1_47);
      
#line 1168 
      ldv_free((void *)ldv_11_ldv_param_1_47);
      
#line 1171 
      goto ldv_45033;
      case 24: 
#line 1173 
      ;
      
#line 1179 
      ldv_emg_wrapper_be_set_vf_vlan_31(ldv_11_container,ldv_11_ldv_param_1_44,(unsigned short)((int)ldv_11_ldv_param_2_45),(unsigned char)((int)ldv_11_ldv_param_3_46));
      
#line 1185 
      goto ldv_45033;
      case 25: 
#line 1187 
      ;
      
#line 1189 
      ldv_11_ldv_param_1_43 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 1194 
      ldv_emg_wrapper_be_get_channels_29(ldv_11_container,ldv_11_ldv_param_1_43);
      
#line 1198 
      ldv_free((void *)ldv_11_ldv_param_1_43);
      
#line 1201 
      goto ldv_45033;
      case 26: 
#line 1203 
      ;
      
#line 1205 
      ldv_11_ldv_param_1_42 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1210 
      ldv_emg_wrapper_be_get_ringparam_19(ldv_11_container,ldv_11_ldv_param_1_42);
      
#line 1214 
      ldv_free((void *)ldv_11_ldv_param_1_42);
      
#line 1217 
      goto ldv_45033;
      case 27: 
#line 1219 
      ;
      
#line 1225 
      ldv_emg_wrapper_be_set_msg_level_49(ldv_11_container,ldv_11_ldv_param_1_41);
      
#line 1231 
      goto ldv_45033;
      case 28: 
#line 1233 
      ;
      
#line 1236 
      ldv_emg_wrapper_be_get_rxfh_indir_size_27(ldv_11_container);
      
#line 1239 
      goto ldv_45033;
      case 29: 
#line 1241 
      ;
      
#line 1244 
      (*ldv_emg_alias_ethtool_op_get_link_26)(ldv_11_container);
      
#line 1247 
      goto ldv_45033;
      case 30: 
#line 1249 
      ;
      
#line 1255 
      ldv_emg_wrapper_be_set_vf_spoofchk_25(ldv_11_container,ldv_11_ldv_param_1_39,(_Bool)((_Bool)((int)ldv_11_ldv_param_2_40) != 0));
      
#line 1261 
      goto ldv_45033;
      case 31: 
#line 1263 
      ;
      
#line 1265 
      ldv_11_ldv_param_1_38 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1270 
      ldv_emg_wrapper_be_get_pauseparam_24(ldv_11_container,ldv_11_ldv_param_1_38);
      
#line 1274 
      ldv_free((void *)ldv_11_ldv_param_1_38);
      
#line 1277 
      goto ldv_45033;
      case 32: 
#line 1279 
      ;
      
#line 1282 
      ldv_emg_wrapper_be_set_rx_mode_23(ldv_11_container);
      
#line 1285 
      goto ldv_45033;
      case 33: 
#line 1287 
      ;
      
#line 1289 
      ldv_11_ldv_param_1_36 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 1290 
      ldv_11_ldv_param_2_37 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1295 
      ldv_emg_wrapper_be_get_ethtool_stats_42(ldv_11_container,ldv_11_ldv_param_1_36,ldv_11_ldv_param_2_37);
      
#line 1299 
      ldv_free((void *)ldv_11_ldv_param_1_36);
      
#line 1300 
      ldv_free((void *)ldv_11_ldv_param_2_37);
      
#line 1303 
      goto ldv_45033;
      case 34: 
#line 1305 
      ;
      
#line 1311 
      ldv_emg_wrapper_be_del_vxlan_port_21(ldv_11_container,(unsigned short)((int)ldv_11_ldv_param_1_34),(unsigned short)((int)ldv_11_ldv_param_2_35));
      
#line 1317 
      goto ldv_45033;
      case 35: 
#line 1319 
      ;
      
#line 1321 
      ldv_11_ldv_param_3_33 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1322 
      ldv_11_ldv_param_2_32 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1323 
      ldv_11_ldv_param_1_31 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 1328 
      ldv_emg_wrapper_be_get_rxfh_20(ldv_11_container,ldv_11_ldv_param_1_31,ldv_11_ldv_param_2_32,ldv_11_ldv_param_3_33);
      
#line 1332 
      ldv_free((void *)ldv_11_ldv_param_3_33);
      
#line 1333 
      ldv_free((void *)ldv_11_ldv_param_2_32);
      
#line 1334 
      ldv_free((void *)ldv_11_ldv_param_1_31);
      
#line 1337 
      goto ldv_45033;
      case 36: 
#line 1339 
      ;
      
#line 1341 
      ldv_11_ldv_param_2_30 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1346 
      ldv_emg_wrapper_be_set_vf_mac_55(ldv_11_container,ldv_11_ldv_param_1_29,ldv_11_ldv_param_2_30);
      
#line 1350 
      ldv_free((void *)ldv_11_ldv_param_2_30);
      
#line 1353 
      goto ldv_45033;
      case 37: 
#line 1355 
      ;
      
#line 1357 
      ldv_11_ldv_param_2_28 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 1358 
      ldv_11_ldv_param_1_27 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 1363 
      ldv_emg_wrapper_be_get_rxnfc_18(ldv_11_container,ldv_11_ldv_param_1_27,ldv_11_ldv_param_2_28);
      
#line 1367 
      ldv_free((void *)ldv_11_ldv_param_2_28);
      
#line 1368 
      ldv_free((void *)ldv_11_ldv_param_1_27);
      
#line 1371 
      goto ldv_45033;
      case 38: 
#line 1373 
      ;
      
#line 1375 
      ldv_11_ldv_param_0_26 = (struct napi_struct *)ldv_xmalloc_unknown_size(0UL);
      
#line 1380 
      ldv_emg_wrapper_be_busy_poll_53(ldv_11_ldv_param_0_26);
      
#line 1384 
      ldv_free((void *)ldv_11_ldv_param_0_26);
      
#line 1387 
      goto ldv_45033;
      case 39: 
#line 1389 
      ;
      
#line 1395 
      ldv_emg_wrapper_be_set_vf_tx_rate_17(ldv_11_container,ldv_11_ldv_param_1_23,ldv_11_ldv_param_2_24,ldv_11_ldv_param_3_25);
      
#line 1401 
      goto ldv_45033;
      case 40: 
#line 1403 
      ;
      
#line 1405 
      ldv_11_ldv_param_1_22 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1410 
      ldv_emg_wrapper_be_set_wol_16(ldv_11_container,ldv_11_ldv_param_1_22);
      
#line 1414 
      ldv_free((void *)ldv_11_ldv_param_1_22);
      
#line 1417 
      goto ldv_45033;
      case 41: 
#line 1419 
      ;
      
#line 1422 
      (*ldv_emg_alias_eth_validate_addr_30)(ldv_11_container);
      
#line 1425 
      goto ldv_45033;
      case 42: 
#line 1427 
      ;
      
#line 1429 
      ldv_11_ldv_param_2_21 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1430 
      ldv_11_ldv_param_1_20 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
      
#line 1435 
      ldv_emg_wrapper_be_self_test_15(ldv_11_container,ldv_11_ldv_param_1_20,ldv_11_ldv_param_2_21);
      
#line 1439 
      ldv_free((void *)ldv_11_ldv_param_2_21);
      
#line 1440 
      ldv_free((void *)ldv_11_ldv_param_1_20);
      
#line 1443 
      goto ldv_45033;
      case 43: 
#line 1445 
      ;
      
#line 1447 
      ldv_11_ldv_param_1_19 = ldv_xmalloc_unknown_size(0UL);
      
#line 1452 
      ldv_emg_wrapper_be_mac_addr_set_14(ldv_11_container,ldv_11_ldv_param_1_19);
      
#line 1456 
      ldv_free(ldv_11_ldv_param_1_19);
      
#line 1459 
      goto ldv_45033;
      case 44: 
#line 1461 
      ;
      
#line 1463 
      ldv_11_ldv_param_0_18 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1468 
      ldv_emg_wrapper_be_xmit_13(ldv_11_ldv_param_0_18,ldv_11_container);
      
#line 1472 
      ldv_free((void *)ldv_11_ldv_param_0_18);
      
#line 1475 
      goto ldv_45033;
      case 45: 
#line 1477 
      ;
      
#line 1480 
      ldv_emg_wrapper_be_get_msg_level_12(ldv_11_container);
      
#line 1483 
      goto ldv_45033;
      case 46: 
#line 1485 
      ;
      
#line 1488 
      ldv_emg_wrapper_be_get_rxfh_key_size_11(ldv_11_container);
      
#line 1491 
      goto ldv_45033;
      case 47: 
#line 1493 
      ;
      
#line 1495 
      ldv_11_ldv_param_2_16 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1496 
      ldv_11_ldv_param_1_15 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 1501 
      ldv_emg_wrapper_be_set_rxfh_34(ldv_11_container,ldv_11_ldv_param_1_15,ldv_11_ldv_param_2_16,(unsigned char)((int)ldv_11_ldv_param_3_17));
      
#line 1505 
      ldv_free((void *)ldv_11_ldv_param_2_16);
      
#line 1506 
      ldv_free((void *)ldv_11_ldv_param_1_15);
      
#line 1509 
      goto ldv_45033;
      case 48: 
#line 1511 
      ;
      
#line 1513 
      ldv_11_ldv_param_1_14 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1518 
      ldv_emg_wrapper_be_get_drvinfo_9(ldv_11_container,ldv_11_ldv_param_1_14);
      
#line 1522 
      ldv_free((void *)ldv_11_ldv_param_1_14);
      
#line 1525 
      goto ldv_45033;
      case 49: 
#line 1527 
      ;
      
#line 1529 
      ldv_11_ldv_param_1_13 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 1534 
      ldv_emg_wrapper_be_set_rxnfc_8(ldv_11_container,ldv_11_ldv_param_1_13);
      
#line 1538 
      ldv_free((void *)ldv_11_ldv_param_1_13);
      
#line 1541 
      goto ldv_45033;
      case 50: 
#line 1543 
      ;
      
#line 1549 
      ldv_emg_wrapper_be_change_mtu_7(ldv_11_container,ldv_11_ldv_param_1_12);
      
#line 1555 
      goto ldv_45033;
      case 51: 
#line 1557 
      ;
      
#line 1559 
      ldv_11_ldv_param_0_7 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1564 
      ldv_emg_wrapper_be_ndo_bridge_getlink_6(ldv_11_ldv_param_0_7,ldv_11_ldv_param_1_8,ldv_11_ldv_param_2_9,ldv_11_container,ldv_11_ldv_param_4_10,ldv_11_ldv_param_5_11);
      
#line 1568 
      ldv_free((void *)ldv_11_ldv_param_0_7);
      
#line 1571 
      goto ldv_45033;
      case 52: 
#line 1573 
      ;
      
#line 1579 
      ldv_emg_wrapper_be_set_vf_link_state_22(ldv_11_container,ldv_11_ldv_param_1_5,ldv_11_ldv_param_2_6);
      
#line 1585 
      goto ldv_45033;
      case 53: 
#line 1587 
      ;
      
#line 1589 
      ldv_11_ldv_param_1_4 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
      
#line 1594 
      ldv_emg_wrapper_be_set_dump_4(ldv_11_container,ldv_11_ldv_param_1_4);
      
#line 1598 
      ldv_free((void *)ldv_11_ldv_param_1_4);
      
#line 1601 
      goto ldv_45033;
      case 54: 
#line 1603 
      ;
      
#line 1605 
      ldv_11_ldv_param_1_3 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
      
#line 1610 
      ldv_emg_wrapper_be_get_stats64_3(ldv_11_container,ldv_11_ldv_param_1_3);
      
#line 1614 
      ldv_free((void *)ldv_11_ldv_param_1_3);
      
#line 1617 
      goto ldv_45033;
      default: 
#line 1619 
      ;
      
#line 1619 
      __VERIFIER_assume(0);
    }
    ldv_45033: 
#line 1622 
    ;
    
#line 1622 
    ldv_free((void *)ldv_11_ldv_param_1_2);
    
#line 1629 
    goto ldv_call_11;
  }
  else {
    
#line 1637 
    __retres = (void *)0;
    
#line 1637 
    goto return_label;
  }
  
#line 1640 
  __retres = (void *)0;
  return_label: 
#line 1640 
                return __retres;
}


#line 1645  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_6_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_11 *cf_arg_11;
  int tmp;
  
#line 1648 
  tmp = ldv_undef_int();
  
#line 1648 
  switch (tmp) {
    case 0: 
#line 1649 
    ;
    
#line 1650 
    ret = pthread_join(ldv_thread_11,(void **)0);
    
#line 1651 
    __VERIFIER_assume(ret == 0);
    
#line 1652 
    goto ldv_45094;
    default: 
#line 1654 
    ;
    
#line 1654 
    __VERIFIER_assume(0);
  }
  ldv_45094: 
#line 1655 
  ;
  
#line 1656 
  return;
}


#line 1660  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 1666 
  ldv_2_netdev = arg0;
  
#line 1667 
  ldv_free((void *)ldv_2_netdev);
  
#line 1671 
  goto return_label;
  return_label: 
#line 1673 
                return;
}


#line 1678  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_12(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_12_ret_val;
  int ldv_12_line;
  void *ldv_12_data;
  enum irqreturn (*ldv_12_thread)(int , void *);
  int tmp;
  
#line 1684 
  enum irqreturn (*ldv_12_callback)(int , void *) = & ldv_emg_wrapper_be_intx_2;
  
#line 1687 
  struct ldv_struct_interrupt_scenario_12 *data = (struct ldv_struct_interrupt_scenario_12 *)arg0;
  
#line 1692 
  if (data != (struct ldv_struct_interrupt_scenario_12 *)0) {
    
#line 1693 
    ldv_12_line = data->arg0;
    
#line 1694 
    ldv_12_callback = data->arg1;
    
#line 1695 
    ldv_12_thread = data->arg2;
    
#line 1696 
    ldv_12_data = data->arg3;
    
#line 1697 
    ldv_free((void *)data);
  }
  else ;
  
#line 1703 
  ldv_switch_to_interrupt_context();
  
#line 1705 
  ldv_12_ret_val = ldv_emg_wrapper_be_intx_2(ldv_12_line,ldv_12_data);
  
#line 1707 
  ldv_switch_to_process_context();
  
#line 1710 
  tmp = ldv_undef_int();
  
#line 1710 
  if (tmp != 0) {
    
#line 1712 
    __VERIFIER_assume(ldv_12_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 1716 
    if (ldv_12_thread != (enum irqreturn (*)(int , void *))0) 
#line 1718 
                                                              (*ldv_12_thread)(ldv_12_line,ldv_12_data); else ;
  }
  else 
#line 1725 
       __VERIFIER_assume(ldv_12_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 1734 
  __retres = (void *)0;
  
#line 1734 
  goto return_label;
  
#line 1736 
  __retres = (void *)0;
  return_label: 
#line 1736 
                return __retres;
}


#line 1741  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_4_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_4 *cf_arg_12;
  struct ldv_struct_free_irq_4 *cf_arg_13;
  int tmp;
  
#line 1745 
  tmp = ldv_undef_int();
  
#line 1745 
  switch (tmp) {
    case 0: 
#line 1746 
    ;
    
#line 1747 
    ret = pthread_join(ldv_thread_12,(void **)0);
    
#line 1748 
    __VERIFIER_assume(ret == 0);
    
#line 1749 
    goto ldv_45120;
    case 1: 
#line 1751 
    ;
    
#line 1752 
    ret = pthread_join(ldv_thread_13,(void **)0);
    
#line 1753 
    __VERIFIER_assume(ret == 0);
    
#line 1754 
    goto ldv_45120;
    default: 
#line 1756 
    ;
    
#line 1756 
    __VERIFIER_assume(0);
  }
  ldv_45120: 
#line 1757 
  ;
  
#line 1758 
  return;
}


#line 1762  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/emulex/benet/be2net.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_9_netdev;
  int tmp_3;
  
#line 1766 
  int ldv_9_ret = ldv_undef_int();
  
#line 1769 
  ldv_9_ret = ldv_undef_int();
  
#line 1772 
  tmp_3 = ldv_undef_int();
  
#line 1772 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 1774 
    ldv_9_netdev = arg0;
    
#line 1779 
    ldv_9_ret = ldv_emg_wrapper_be_open_2(ldv_9_netdev);
    
#line 1782 
    tmp_1 = ldv_undef_int();
    
#line 1782 
    if (tmp_1 != 0) {
      
#line 1784 
      __VERIFIER_assume(ldv_9_ret == 0);
      
#line 1788 
      ldv_dispatch_register_9_4(ldv_9_netdev);
      
#line 1792 
      __retres = 0;
      
#line 1792 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 1799 
      __VERIFIER_assume(ldv_9_ret != 0);
      
#line 1800 
      ldv_failed_register_netdev();
      
#line 1801 
      tmp_0 = ldv_undef_int_negative();
      
#line 1801 
      __retres = tmp_0;
      
#line 1801 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 1809 
    ldv_failed_register_netdev();
    
#line 1810 
    tmp_2 = ldv_undef_int_negative();
    
#line 1810 
    __retres = tmp_2;
    
#line 1810 
    goto return_label;
  }
  return_label: 
#line 1772 
                return __retres;
}


